{"version":3,"mappings":"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","names":["ContentItemImportComponent","constructor","dialogData","contentItemsService","r","title","_a","s","d","description","_b","c","allowedFileTypes","_c","D","upload$","_d","files","importItem","i0","MAT_DIALOG_DATA","selectors","ctx_r15","ctx_r17","ctx_r19","oxw","ctx_r21","_r5","ctx_r24","FileUploadDialogComponent","BaseSubsinkComponent","dialogRef","snackBar","super","this","BehaviorSubject","undefined","FileUploadMessageTypes","ngOnInit","subscription","add","files$","subscribe","result$","value","next","filesDropped","ngOnDestroy","uploading$","complete","closeDialog","refresh","close","setFiles","upload","filesChanged","event","Array","from","target","pipe","take","result","error","open","duration","multiple","slice","Warning","Success","Error","DragAndDropDirective","elementRef","zone","EventEmitter","element","nativeElement","markStyleClass","markStyle","classList","dropAreaClass","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","dragClass","timeouts","push","window","setTimeout","remove","onDrop","dataTransfer","filterTypes","length","emit","timeout","clearTimeout","allowedTypes","split","map","type","toLocaleLowerCase","filtered","filter","file","extIndex","name","lastIndexOf","ext","substring","includes","allowedTypesString","replace","ctx","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/eav-ui/src/app/content-items/content-item-import/content-item-import.component.ts","./projects/eav-ui/src/app/content-items/content-item-import/content-item-import.component.html","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.html","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.models.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-content-item-import',\r\n  templateUrl: './content-item-import.component.html',\r\n  styleUrls: ['./content-item-import.component.scss'],\r\n})\r\nexport class ContentItemImportComponent {\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData, contentItemsService: ContentItemsService) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog></app-file-upload-dialog>\r\n","<div appDragAndDrop [allowedFileTypes]=\"dialogData.allowedFileTypes\" (filesDropped)=\"filesDropped($event)\" *ngIf=\"{\r\n  uploading: uploading$ | async,\r\n    files: files$ | async,\r\n    result: result$ | async\r\n  } as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\" [innerHtml]=\"dialogData.title | safeHtml\"></div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.uploading\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"dialogData.description | safeHtml\"></p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.uploading\" (click)=\"fileInput.click()\">\r\n      <div *ngIf=\"!data.files.length\">Select or drop file</div>\r\n      <div *ngFor=\"let file of data.files\">{{ file.name }}</div>\r\n    </button>\r\n    <input #fileInput type=\"file\" multiple (change)=\"filesChanged($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light result-container\" *ngIf=\"data.result\">\r\n    <div *ngIf=\"data.result.Success\" class=\"sxc-message sxc-message-info\">\r\n      Upload succeeded. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.result.Success\" class=\"sxc-message sxc-message-error\">\r\n      Upload failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.result.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === FileUploadMessageTypes.Warning,\r\n      'sxc-message-success': message.MessageType === FileUploadMessageTypes.Success,\r\n      'sxc-message-error': message.MessageType === FileUploadMessageTypes.Error\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.result?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.files.length || data.uploading || !!data.result\"\r\n        (click)=\"upload()\">\r\n        Upload\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.result?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog(true)\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Subscription, take } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\nimport { FileUploadDialogData, FileUploadMessageTypes, FileUploadResult } from './file-upload-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-file-upload-dialog',\r\n  templateUrl: './file-upload-dialog.component.html',\r\n  styleUrls: ['./file-upload-dialog.component.scss'],\r\n})\r\nexport class FileUploadDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  uploading$ = new BehaviorSubject<boolean>(false);\r\n  files$ = new BehaviorSubject<File[]>([]);\r\n  result$ = new BehaviorSubject<FileUploadResult>(undefined);\r\n  FileUploadMessageTypes = FileUploadMessageTypes;\r\n\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FileUploadDialogData,\r\n    private dialogRef: MatDialogRef<FileUploadDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { \r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription.add(\r\n      this.files$.subscribe(() => {\r\n        if (this.result$.value !== undefined) {\r\n          this.result$.next(undefined);\r\n        }\r\n      }),\r\n    );\r\n\r\n    if (this.dialogData.files != null) {\r\n      this.filesDropped(this.dialogData.files);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.uploading$.complete();\r\n    this.files$.complete();\r\n    this.result$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(refresh?: boolean): void {\r\n    this.dialogRef.close(refresh);\r\n  }\r\n\r\n  filesDropped(files: File[]): void {\r\n    this.setFiles(files);\r\n    this.upload();\r\n  }\r\n\r\n  filesChanged(event: Event): void {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = Array.from(fileList);\r\n    this.setFiles(files);\r\n  }\r\n\r\n  upload(): void {\r\n    this.uploading$.next(true);\r\n    this.subscription.add(\r\n      this.dialogData.upload$(this.files$.value).pipe(take(1)).subscribe({\r\n        next: (result) => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(result);\r\n        },\r\n        error: () => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(undefined);\r\n          this.snackBar.open('Upload failed. Please check console for more information', undefined, { duration: 3000 });\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  private setFiles(files: File[]): void {\r\n    if (!this.dialogData.multiple) {\r\n      files = files.slice(0, 1);\r\n    }\r\n    this.files$.next(files);\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nexport interface FileUploadDialogData {\r\n  title?: string;\r\n  description?: string;\r\n  allowedFileTypes?: string;\r\n  files?: File[];\r\n  multiple?: boolean;\r\n  upload$?(files: File[]): Observable<FileUploadResult>;\r\n}\r\n\r\nexport interface FileUploadResult {\r\n  Messages: FileUploadResultMessage[];\r\n  Success: boolean;\r\n}\r\n\r\nexport interface FileUploadResultMessage {\r\n  MessageType: FileUploadMessageType;\r\n  Text: string;\r\n}\r\n\r\nexport const FileUploadMessageTypes = {\r\n  Warning: 0,\r\n  Success: 1,\r\n  Error: 2,\r\n} as const;\r\n\r\nexport type FileUploadMessageType = typeof FileUploadMessageTypes[keyof typeof FileUploadMessageTypes];\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../components/base-subsink-component/base-subsink.component';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-items_content-item-import_content-item-import_component_ts.90e19afdba113c25.js"}