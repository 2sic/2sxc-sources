{"version":3,"sources":["./src/app/content-type-fields/services/content-types-fields.service.ts","./src/app/app-administration/services/content-types.service.ts","./src/app/content-type-fields/content-type-fields-dialog.config.ts","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./src/app/content-type-fields/content-type-fields-routing.module.ts","./src/app/content-type-fields/content-type-fields.module.ts"],"names":["webApiFieldsAll","webApiFieldsRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","inputConfigs","map","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","getFields","contentType","staticName","StaticName","fields","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","reOrder","idArray","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","Index","SortOrder","updateInputType","id","field","ContentTypesFieldsService","webApiTypeRoot","retrieveContentType","retrieveContentTypes","scope","getScopes","scopes","Object","keys","key","value","save","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","contentTypeFieldsDialog","initContext","panelSize","panelClass","getComponent","editContentTypeFieldsDialog","routes","path","component","data","dialog","children","route","matcher","loadChildren","then","m","EditModule","RefreshEditModule","ContentTypeFieldsRoutingModule","forChild","ContentTypeFieldsModule","withComponents"],"mappings":"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","file":"content-type-fields-content-type-fields-module.cc046c6f18d62613d482.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeConfig, FieldInputTypeOption } from '../models/field.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map((inputConfigs: FieldInputTypeConfig[]) => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      ) as Observable<FieldInputTypeOption[]>;\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map((fields: Field[]) => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      ) as Observable<Field[]>;\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  rename(item: Field, contentType: ContentType, newName: string) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n        newName,\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    }) as Observable<number>;\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    }) as Observable<boolean>;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    }) as Observable<ContentType>;\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    }) as Observable<ContentType[]>;\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map((scopes: { [key: string]: string }) => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    }) as Observable<ImportAppResult>;\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      { path: 'update/:contentTypeStaticName/:id', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      GoToPermissions.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n"],"sourceRoot":"webpack:///"}