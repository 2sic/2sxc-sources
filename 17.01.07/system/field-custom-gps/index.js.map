{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///./projects/field-custom-gps/src/shared/console-log-webpack.helper.ts","webpack:///./projects/field-custom-gps/src/assets/icons/font-awesome/map-marker-alt-solid.svg","webpack:///./projects/field-custom-gps/src/shared/helpers.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///./projects/eav-ui/src/app/edit/shared/helpers/general.helpers.ts","webpack:///./projects/eav-ui/src/app/edit/shared/helpers/field-mask.helper.ts","webpack:///./projects/field-custom-gps/src/main/main.html","webpack:///./projects/field-custom-gps/src/main/main.ts","webpack:///./projects/field-custom-gps/src/main/main.scss","webpack:///./projects/eav-ui/src/app/shared/constants/eav.constants.ts","webpack:///./projects/field-custom-gps/src/preview/preview.html","webpack:///./projects/field-custom-gps/src/preview/preview.ts","webpack:///./projects/field-custom-gps/src/preview/preview.scss"],"sourcesContent":["declare const __PRODUCTION__: boolean; // set by the definePlugin with string-replace\r\n\r\n/** Console log that doesn't show in Webpack production mode */\r\nexport function consoleLogWebpack(message?: any, ...optionalParams: any[]) {\r\n  if (__PRODUCTION__) { return; }\r\n\r\n  console.groupCollapsed(message, ...optionalParams);\r\n  // tslint:disable-next-line:no-console\r\n  console.trace();\r\n  console.groupEnd();\r\n}\r\n","export default \"<svg aria-hidden=\\\"true\\\" focusable=\\\"false\\\" data-prefix=\\\"fas\\\" data-icon=\\\"map-marker-alt\\\" class=\\\"svg-inline--fa fa-map-marker-alt fa-w-12\\\" role=\\\"img\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 384 512\\\"><path fill=\\\"currentColor\\\" d=\\\"M172.268 501.67C26.97 291.031 0 269.413 0 192 0 85.961 85.961 0 192 0s192 85.961 192 192c0 77.413-26.97 99.031-172.268 309.67-9.535 13.774-29.93 13.773-39.464 0zM192 272c44.183 0 80-35.817 80-80s-35.817-80-80-80-80 35.817-80 80 35.817 80 80 80z\\\"></path></svg>\";","import * as mapMarker from '../assets/icons/font-awesome/map-marker-alt-solid.svg';\r\n\r\nexport const customGpsIcons = {\r\n  mapMarker: mapMarker.default,\r\n};\r\n\r\nexport function buildTemplate(template: string, styles: string): string {\r\n  return `${template}<style>\\n${styles}\\n</style>`;\r\n}\r\n\r\nexport function parseLatLng(value: string): google.maps.LatLngLiteral {\r\n  const latLng: google.maps.LatLngLiteral = JSON.parse(value.replace('latitude', 'lat').replace('longitude', 'lng'));\r\n  return latLng;\r\n}\r\n\r\nexport function stringifyLatLng(latLng: google.maps.LatLngLiteral): string {\r\n  const value = JSON.stringify(latLng).replace('lat', 'latitude').replace('lng', 'longitude');\r\n  return value;\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import { AbstractControl } from '@angular/forms';\r\nimport { FieldValue } from '../../../../../../edit-types';\r\nimport { FormValues } from '../models';\r\n\r\nexport class GeneralHelpers {\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) { return x === y; }\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) { return false; }\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) { return false; }\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) { return x === y; }\r\n\r\n    if (x.length !== y.length) { return false; }\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** Searches where newValues has values different from oldValues */\r\n  static getFormChanges(oldValues: FormValues, newValues: FormValues): FormValues {\r\n    const changes: FormValues = {};\r\n    for (const key of Object.keys(newValues)) {\r\n      const newValue = newValues[key];\r\n      const oldValue = oldValues[key];\r\n      if (this.controlValuesEqual(newValue, oldValue)) { continue; }\r\n\r\n      changes[key] = newValue;\r\n    }\r\n    return Object.keys(changes).length === 0 ? undefined : changes;\r\n  }\r\n\r\n  static toggleInArray<T>(item: T, array: T[]): void {\r\n    const index = array.indexOf(item);\r\n    if (index === -1) {\r\n      array.push(item);\r\n    } else {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  /** TODO: Try to remove this by assigning controls [formControlName] in [formGroup] */\r\n  static markControlTouched(control: AbstractControl): void {\r\n    if (control.touched) { return; }\r\n\r\n    control.markAsTouched();\r\n    control.updateValueAndValidity();\r\n  }\r\n\r\n  /** Use to update form controls value */\r\n  static patchControlValue(control: AbstractControl, newValue: FieldValue): void {\r\n    if (!control.touched) {\r\n      control.markAsTouched();\r\n    }\r\n    if (!control.dirty && !this.controlValuesEqual(control.value, newValue)) {\r\n      control.markAsDirty();\r\n    }\r\n    control.patchValue(newValue);\r\n  }\r\n\r\n  private static controlValuesEqual(x: FieldValue, y: FieldValue): boolean {\r\n    if (x === y) { return true; }\r\n    if (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y)) { return true; }\r\n    if (Array.isArray(x) && Array.isArray(y) && this.arraysEqual(x, y)) { return true; }\r\n    return false;\r\n  }\r\n\r\n  /** Disables/enables control if not already disabled/enabled. Use this helper to trigger fewer events on the form */\r\n  static disableControl(control: AbstractControl, disable: boolean) {\r\n    if (control.disabled === disable) { return; }\r\n\r\n    if (disable) {\r\n      control.disable();\r\n    } else {\r\n      control.enable();\r\n    }\r\n  }\r\n\r\n  /** Tries to parse string as JSON */\r\n  static tryParse(input: string): any {\r\n    try {\r\n      return JSON.parse(input);\r\n    } catch { }\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n  /** used for query parameters */\r\n  static lowercaseInsideSquareBrackets(value: string) {\r\n    return value.replace(/\\[([^\\]]+)\\]/g, (match, group) => `[${group.toLowerCase()}]`);\r\n  }\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\nimport { Subscription } from 'rxjs';\r\nimport { EavConfig } from '../models';\r\nimport { FieldConfigSet } from '../../form/builder/fields-builder/field-config-set.model';\r\nimport { GeneralHelpers } from './general.helpers';\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\nexport class FieldMask {\r\n  private mask: string;\r\n  private model: Record<string, AbstractControl>;\r\n  private fields: string[] = [];\r\n  private value: string;\r\n  private findFields = /\\[.*?\\]/ig;\r\n  private unwrapField = /[\\[\\]]/ig;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    mask: string | null,\r\n    model: Record<string, AbstractControl>,\r\n    private changeEvent: (newValue: string) => void,\r\n    overloadPreCleanValues: (key: string, value: string) => string,\r\n    private eavConfig?: EavConfig,\r\n    private config?: FieldConfigSet,\r\n  ) {\r\n    this.mask = mask ?? '';\r\n    this.value = mask ?? '';// set value to be initially same as the mask so onChange doesn't run for the first time without reason\r\n    this.model = model;\r\n    this.fields = this.fieldList();\r\n\r\n    if (overloadPreCleanValues) {\r\n      this.preClean = overloadPreCleanValues;\r\n    }\r\n\r\n    // bind auto-watch only if needed...\r\n    if (model && changeEvent) {\r\n      this.watchAllFields();\r\n    }\r\n  }\r\n\r\n  /** Resolves a mask to the final value */\r\n  resolve(): string {\r\n    let value = this.mask;\r\n    if (value.includes('[')) {\r\n      value = GeneralHelpers.lowercaseInsideSquareBrackets(value);\r\n      if (this.eavConfig != null) {\r\n        value = value.replace('[app:appid]', this.eavConfig.appId);\r\n        value = value.replace('[app:zoneid]', this.eavConfig.zoneId);\r\n      }\r\n      if (this.config != null && this.config != undefined) {\r\n        value = value.replace('[guid]', this.config.entityGuid);\r\n        value = value.replace('[id]', this.config.entityId.toString());\r\n      }\r\n      this.fields.forEach((e, i) => {\r\n        const replaceValue = this.model.hasOwnProperty(e) && this.model[e] && this.model[e].value ? this.model[e].value : '';\r\n        const cleaned = this.preClean(e, replaceValue);\r\n        value = value.replace('[' + e.toLowerCase() + ']', cleaned);\r\n      });\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  fieldList(): string[] {\r\n    const result: string[] = [];\r\n    if (!this.mask) { return result; }\r\n    const matches = this.mask.match(this.findFields);\r\n    if (matches) {\r\n      matches.forEach((e, i) => {\r\n        const staticName = e.replace(this.unwrapField, '');\r\n        result.push(staticName);\r\n      });\r\n    } else { // TODO: ask is this good\r\n      result.push(this.mask);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /** Default preClean function */\r\n  private preClean(key: string, value: string): string {\r\n    return value;\r\n  }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  private onChange() {\r\n    const maybeNew = this.resolve();\r\n    if (this.value !== maybeNew) {\r\n      this.changeEvent(maybeNew);\r\n    }\r\n    this.value = maybeNew;\r\n  }\r\n\r\n  /** Add watcher and execute onChange */\r\n  private watchAllFields() {\r\n    // add a watch for each field in the field-mask\r\n    this.fields.forEach(field => {\r\n      if (!this.model[field]) { return; }\r\n      const valueSub = this.model[field].valueChanges.subscribe(value => this.onChange());\r\n      this.subscriptions.push(valueSub);\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.subscriptions.forEach(subscription => { subscription.unsubscribe(); });\r\n  }\r\n}\r\n","export default \"<div class=\\\"custom-gps-container\\\">\\r\\n  <div class=\\\"map-info\\\">\\r\\n    <div class=\\\"input-component\\\">\\r\\n      <label for=\\\"lat\\\">Lat:</label>\\r\\n      <input id=\\\"lat\\\" type=\\\"number\\\" step=\\\"0.001\\\" />\\r\\n    </div>\\r\\n    &nbsp;\\r\\n    <div class=\\\"input-component\\\">\\r\\n      <label for=\\\"lng\\\">Lng:</label>\\r\\n      <input id=\\\"lng\\\" type=\\\"number\\\" step=\\\"0.001\\\" />\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div id=\\\"address-mask-container\\\" class=\\\"map-info address-mask-container hidden\\\">\\r\\n    <a id=\\\"icon-search\\\" class=\\\"btn\\\">\\r\\n      <i class=\\\"material-icons-outlined\\\">search</i>\\r\\n    </a>\\r\\n    <span id=\\\"formatted-address-container\\\"></span>\\r\\n  </div>\\r\\n\\r\\n  <div id=\\\"map\\\" class=\\\"map-info__map\\\"></div>\\r\\n</div>\\r\\n\";","import { FieldMask } from '../../../eav-ui/src/app/edit/shared/helpers/field-mask.helper';\r\nimport { ElementEventListener } from '../../../eav-ui/src/app/edit/shared/models';\r\nimport { Connector, EavCustomInputField } from '../../../edit-types';\r\nimport { CoordinatesDto } from '../preview/coordinates';\r\nimport { consoleLogWebpack } from '../shared/console-log-webpack.helper';\r\nimport { buildTemplate, parseLatLng, stringifyLatLng } from '../shared/helpers';\r\nimport * as template from './main.html';\r\nimport * as styles from './main.scss';\r\nimport { EditApiKeyPaths } from '../../../eav-ui/src/app/shared/constants/eav.constants';\r\nimport { ApiKeySpecs } from '../../../eav-ui/src/app/shared/models/dialog-context.models';\r\n\r\nconst gpsDialogTag = 'field-custom-gps-dialog';\r\n\r\nclass FieldCustomGpsDialog extends HTMLElement implements EavCustomInputField<string> {\r\n  fieldInitialized: boolean;\r\n  connector: Connector<string>;\r\n\r\n  private addressMask: FieldMask;\r\n  private geocoder: google.maps.Geocoder;\r\n  private iconSearch: HTMLAnchorElement;\r\n  private latFieldName: string;\r\n  private latInput: HTMLInputElement;\r\n  private lngFieldName: string;\r\n  private lngInput: HTMLInputElement;\r\n  private map: google.maps.Map;\r\n  private mapContainer: HTMLDivElement;\r\n  private marker: google.maps.Marker;\r\n  private eventListeners: ElementEventListener[];\r\n  private defaultCoordinates: google.maps.LatLngLiteral;\r\n\r\n  constructor() {\r\n    super();\r\n    consoleLogWebpack(`${gpsDialogTag} constructor called`);\r\n    this.fieldInitialized = false;\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    if (this.fieldInitialized) { return; }\r\n    this.fieldInitialized = true;\r\n    consoleLogWebpack(`${gpsDialogTag} connectedCallback called`);\r\n\r\n    this.eventListeners = [];\r\n\r\n    this.innerHTML = buildTemplate(template.default, styles.default);\r\n    this.latInput = this.querySelector<HTMLInputElement>('#lat');\r\n    this.lngInput = this.querySelector<HTMLInputElement>('#lng');\r\n    const addressMaskContainer = this.querySelector<HTMLDivElement>('#address-mask-container');\r\n    this.iconSearch = this.querySelector<HTMLAnchorElement>('#icon-search');\r\n    const formattedAddressContainer = this.querySelector<HTMLSpanElement>('#formatted-address-container');\r\n    this.mapContainer = this.querySelector<HTMLDivElement>('#map');\r\n\r\n    const expConnector = this.connector._experimental;\r\n    const allInputNames = expConnector.allInputTypeNames.map(inputType => inputType.name);\r\n    if (allInputNames.includes(this.connector.field.settings.LatField)) {\r\n      this.latFieldName = this.connector.field.settings.LatField;\r\n    }\r\n    if (allInputNames.includes(this.connector.field.settings.LongField)) {\r\n      this.lngFieldName = this.connector.field.settings.LongField;\r\n    }\r\n\r\n    const addressMaskSetting = this.connector.field.settings.AddressMask || this.connector.field.settings['Address Mask'];\r\n    this.addressMask = new FieldMask(addressMaskSetting, expConnector.formGroup.controls, null, null);\r\n    consoleLogWebpack(`${gpsDialogTag} addressMask:`, addressMaskSetting);\r\n    if (addressMaskSetting) {\r\n      addressMaskContainer.classList.remove('hidden');\r\n      formattedAddressContainer.innerText = this.addressMask.resolve();\r\n    }\r\n\r\n    // TODO: TRY to refactor to use the new context.app.getSetting(...) in the formulas-data\r\n    const defaultCoordinates = expConnector.getSettings(\"Settings.GoogleMaps.DefaultCoordinates\") as CoordinatesDto;\r\n    this.defaultCoordinates = {\r\n      lat: defaultCoordinates.Latitude,\r\n      lng: defaultCoordinates.Longitude,\r\n    }\r\n\r\n    const googleMapsParams = (expConnector.getSettings(EditApiKeyPaths.GoogleMaps) as ApiKeySpecs).ApiKey;\r\n    this.connector.loadScript('google', `https://maps.googleapis.com/maps/api/js?key=${googleMapsParams}&callback=Function.prototype`, () => { this.mapScriptLoaded(); });\r\n  }\r\n\r\n  private mapScriptLoaded(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} mapScriptLoaded called`);\r\n    this.map = new google.maps.Map(this.mapContainer, {\r\n      zoom: 15,\r\n      center: this.defaultCoordinates,\r\n      gestureHandling: 'greedy',\r\n      streetViewControlOptions: {\r\n        position: google.maps.ControlPosition.RIGHT_CENTER,\r\n      },\r\n      zoomControlOptions: {\r\n        position: google.maps.ControlPosition.RIGHT_CENTER,\r\n      },\r\n    });\r\n    this.marker = new google.maps.Marker({ position: this.defaultCoordinates, map: this.map, draggable: true });\r\n    this.geocoder = new google.maps.Geocoder();\r\n\r\n    // set initial values\r\n    if (!this.connector.data.value) {\r\n      this.updateHtml(this.defaultCoordinates);\r\n    } else {\r\n      this.updateHtml(parseLatLng(this.connector.data.value));\r\n    }\r\n\r\n    // listen to inputs, iconSearch and marker. Update inputs, map, marker and form\r\n    const onLatLngInputChange = () => { this.onLatLngInputChange(); };\r\n    this.latInput.addEventListener('change', onLatLngInputChange);\r\n    this.lngInput.addEventListener('change', onLatLngInputChange);\r\n\r\n    const autoSelect = () => { this.autoSelect(); };\r\n    this.iconSearch.addEventListener('click', autoSelect);\r\n\r\n    this.eventListeners.push(\r\n      { element: this.latInput, type: 'change', listener: onLatLngInputChange },\r\n      { element: this.lngInput, type: 'change', listener: onLatLngInputChange },\r\n      { element: this.iconSearch, type: 'click', listener: autoSelect },\r\n    );\r\n\r\n    this.marker.addListener('dragend', (event: google.maps.MapMouseEvent) => {\r\n      this.onMarkerDragend(event);\r\n    });\r\n  }\r\n\r\n  private updateHtml(latLng: google.maps.LatLngLiteral): void {\r\n    this.latInput.value = latLng.lat?.toString() ?? '';\r\n    this.lngInput.value = latLng.lng?.toString() ?? '';\r\n    this.map.setCenter(latLng);\r\n    this.marker.setPosition(latLng);\r\n  }\r\n\r\n  private updateForm(latLng: google.maps.LatLngLiteral): void {\r\n    this.connector.data.update(stringifyLatLng(latLng));\r\n    if (this.latFieldName) {\r\n      this.connector._experimental.updateField(this.latFieldName, latLng.lat);\r\n    }\r\n    if (this.lngFieldName) {\r\n      this.connector._experimental.updateField(this.lngFieldName, latLng.lng);\r\n    }\r\n  }\r\n\r\n  private onLatLngInputChange(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} input changed`);\r\n    const latLng: google.maps.LatLngLiteral = {\r\n      lat: this.latInput.value.length > 0 ? parseFloat(this.latInput.value) : null,\r\n      lng: this.lngInput.value.length > 0 ? parseFloat(this.lngInput.value) : null,\r\n    };\r\n    this.updateHtml(latLng);\r\n    this.updateForm(latLng);\r\n  }\r\n\r\n  private autoSelect(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} geocoder called`);\r\n    const address = this.addressMask.resolve();\r\n    this.geocoder.geocode({\r\n      address,\r\n    }, (results, status) => {\r\n      if (status === google.maps.GeocoderStatus.OK) {\r\n        const result = results[0].geometry.location;\r\n        const latLng: google.maps.LatLngLiteral = {\r\n          lat: result.lat(),\r\n          lng: result.lng(),\r\n        };\r\n        this.updateHtml(latLng);\r\n        this.updateForm(latLng);\r\n      } else {\r\n        alert(`Could not locate address: ${address}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private onMarkerDragend(event: google.maps.MapMouseEvent): void {\r\n    consoleLogWebpack(`${gpsDialogTag} marker changed`);\r\n    const latLng: google.maps.LatLngLiteral = {\r\n      lat: event.latLng.lat(),\r\n      lng: event.latLng.lng(),\r\n    };\r\n    this.updateHtml(latLng);\r\n    this.updateForm(latLng);\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    consoleLogWebpack(`${gpsDialogTag} disconnectedCallback called`);\r\n    google?.maps.event.clearInstanceListeners(this.marker);\r\n    google?.maps.event.clearInstanceListeners(this.map);\r\n\r\n    this.eventListeners.forEach(({ element, type, listener }) => {\r\n      element.removeEventListener(type, listener);\r\n    });\r\n    this.addressMask.destroy();\r\n  }\r\n}\r\n\r\nif (!customElements.get(gpsDialogTag)) {\r\n  customElements.define(gpsDialogTag, FieldCustomGpsDialog);\r\n}\r\n","export default \".custom-gps-container{display:flex;flex-direction:column;height:100%}.map-info{flex:0 0 32px;display:flex;flex-wrap:wrap;align-items:center;padding:4px;padding-left:14px;border-bottom:1px solid #e1e1e1;background:#fff}.map-info label,.map-info #icon-search{margin-right:8px;display:flex;justify-content:center;align-items:center;font-size:12px;text-transform:uppercase;padding:4px}.map-info #icon-search i{font-size:14px;width:14px;height:14px;font-weight:bold}.map-info input{margin-right:8px;padding:4px 16px;border:none;background:rgba(0,0,0,0);outline:none !important}.address-mask-container{flex-wrap:nowrap}.map-info__map{flex:1 1 auto;width:100%;display:block}.hidden{display:none}.btn{border:1px solid silver;border-radius:4px}.btn:hover{background-color:rgba(69,79,99,.08);cursor:pointer}.input-component{display:flex;background-color:rgba(69,79,99,.08);padding:4px;border-radius:4px 4px 0 0;border-bottom:1px solid silver;margin:8px 0}.input-component:hover{border-bottom:1px solid #002753}\";","const MetadataKeyTypes = {\r\n  Guid: 'guid',\r\n  String: 'string',\r\n  Number: 'number',\r\n} as const;\r\nexport type MetadataKeyType = typeof MetadataKeyTypes[keyof typeof MetadataKeyTypes];\r\n\r\nexport interface ScopeOption {\r\n  name: string;\r\n  value: string;\r\n}\r\n\r\nexport const SystemSettingsScopes = {\r\n  App: 'app',\r\n  Site: 'site',\r\n} as const;\r\nexport type SystemSettingsScope = typeof SystemSettingsScopes[keyof typeof SystemSettingsScopes];\r\n\r\nexport const EditApiKeyPaths = {\r\n  GoogleTranslate: 'Settings.GoogleTranslate.ApiKey',\r\n  GoogleMaps: 'Settings.GoogleMaps.ApiKey',\r\n} as const;\r\n\r\n\r\nexport const eavConstants = {\r\n  metadata: {\r\n    /** Metadata of Attribute */\r\n    // tslint:disable-next-line:max-line-length\r\n    attribute: { targetType: 2, target: 'EAV Field Properties', label: 'Content-Type Field/Attribute (2)', keyType: MetadataKeyTypes.Number },\r\n    /** Metadata of App */\r\n    app: { targetType: 3, target: 'App', label: 'App (3)', keyType: MetadataKeyTypes.Number },\r\n    /** Metadata of Entity */\r\n    entity: { targetType: 4, target: 'Entity', label: 'Entity (4)', keyType: MetadataKeyTypes.Guid },\r\n    /** Metadata of ContentType */\r\n    contentType: { targetType: 5, target: 'ContentType', label: 'Content-Type (5)', keyType: MetadataKeyTypes.String },\r\n    /** Metadata of Zone */\r\n    zone: { targetType: 6, target: 'Zone', label: 'Zone (6) - not used as of now', keyType: MetadataKeyTypes.Number },\r\n    /** Metadata of Language (a Dimension) */\r\n    language: { targetType: 8, target: 'Dimension', label: 'Language (8)', keyType: MetadataKeyTypes.String },\r\n    /** Metadata of CmsObject */\r\n    cmsObject: { targetType: 10, target: 'CmsObject', label: 'Cms Object (10)', keyType: MetadataKeyTypes.String, hint: 'Usually this is \"file:400\" or \"folder:4030\"' },\r\n  },\r\n\r\n  appMetadata: {\r\n    LightSpeed: { ContentTypeName: 'LightSpeedOutputDecorator' }\r\n  },\r\n\r\n  /** Lookup type for the metadata, e.g. key=80adb152-efad-4aa4-855e-74c5ef230e1f is keyType=guid */\r\n  keyTypes: {\r\n    guid: MetadataKeyTypes.Guid,\r\n    string: MetadataKeyTypes.String,\r\n    number: MetadataKeyTypes.Number,\r\n  },\r\n\r\n  /** Scopes */\r\n  scopes: {\r\n    /** This is the main schema and the data you usually see is from here */\r\n    default: { name: 'Default', value: 'Default' },\r\n    configuration: { name: 'Configuration (Views etc.)', value: 'System.Configuration' },\r\n  },\r\n\r\n  /** Content types where templates, permissions, etc. are stored */\r\n  contentTypes: {\r\n    /** Content type containing app's specifications */\r\n    appConfiguration: '2SexyContent-App',\r\n    /** Content type containing app's views */\r\n    template: '2SexyContent-Template',\r\n    /** Content type containing permissions */\r\n    permissions: 'PermissionConfiguration',\r\n    /** Content type containing queries */\r\n    query: 'DataPipeline',\r\n    /** Content type containing content type metadata */\r\n    contentType: 'ContentType',\r\n    /** Content type containing app's custom settings */\r\n    settings: 'App-Settings',\r\n    /** Content type containing app's custom resources */\r\n    resources: 'App-Resources',\r\n    /** Content type containing app's system settings */\r\n    systemSettings: 'SettingsSystem',\r\n    /** Content type containing app's system resources */\r\n    systemResources: 'ResourcesSystem',\r\n    /** Content type containing Primary and Global App custom settings */\r\n    customSettings: 'SettingsCustom',\r\n    /** Content type containing Primary and Global App custom resources */\r\n    customResources: 'ResourcesCustom',\r\n    /** Content type containing formulas */\r\n    formulas: 'UiFormula',\r\n    /** Content type containing notes */\r\n    notes: 'NoteDecorator',\r\n    /** Content type containing settings for image scaling */\r\n    imageDecorator: 'ImageDecorator',\r\n  },\r\n\r\n  pipelineDesigner: {\r\n    dataSourceDifficulties: {\r\n      default: 100,\r\n      advanced: 200,\r\n    },\r\n    outDataSource: {\r\n      Description: 'The template/script which will show this data',\r\n      EntityGuid: 'Out',\r\n      In: ['Default', 'Header'],\r\n      Name: '2sxc Target (View or API)',\r\n      PartAssemblyAndType: 'SexyContentTemplate',\r\n      PrimaryType: 'Target',\r\n      VisualDesignerData: { Top: 20, Left: 200, Width: 700 },\r\n    },\r\n    defaultPipeline: {\r\n      dataSources: [\r\n        {\r\n          EntityGuid: 'unsaved1',\r\n          PartAssemblyAndType: 'ToSic.Sxc.DataSources.CmsBlock, ToSic.Sxc',\r\n          VisualDesignerData: { Top: 170, Left: 440 },\r\n        }\r\n      ],\r\n      streamWiring: [\r\n        { From: 'unsaved1', Out: 'Header', To: 'Out', In: 'Header' },\r\n        { From: 'unsaved1', Out: 'Default', To: 'Out', In: 'Default' },\r\n      ],\r\n    },\r\n    testParameters: '[Demo:Demo]=true',\r\n  },\r\n};\r\n","export default \"<div class=\\\"custom-gps-preview\\\">\\r\\n  <div class=\\\"custom-gps-preview__text\\\">\\r\\n    Lat: <span id=\\\"lat-container\\\"></span>, Lng: <span id=\\\"lng-container\\\"></span>\\r\\n  </div>\\r\\n  <div class=\\\"custom-gps-preview__spacer\\\"></div>\\r\\n  <div id=\\\"map-icon-container\\\" class=\\\"custom-gps-preview__map-icon\\\"></div>\\r\\n</div>\\r\\n\";","import { ElementEventListener } from '../../../eav-ui/src/app/edit/shared/models';\r\nimport { Connector, EavCustomInputField } from '../../../edit-types';\r\nimport { consoleLogWebpack } from '../shared/console-log-webpack.helper';\r\nimport { buildTemplate, customGpsIcons, parseLatLng } from '../shared/helpers';\r\nimport * as template from './preview.html';\r\nimport * as styles from './preview.scss';\r\nimport { CoordinatesDto } from './coordinates';\r\n\r\nconst gpsTag = 'field-custom-gps';\r\n\r\nclass FieldCustomGps extends HTMLElement implements EavCustomInputField<string> {\r\n  fieldInitialized: boolean;\r\n  connector: Connector<string>;\r\n\r\n  private latContainer: HTMLSpanElement;\r\n  private lngContainer: HTMLSpanElement;\r\n  private eventListeners: ElementEventListener[];\r\n  private defaultCoordinates: google.maps.LatLngLiteral;\r\n\r\n  constructor() {\r\n    super();\r\n    consoleLogWebpack(`${gpsTag} constructor called`);\r\n    this.fieldInitialized = false;\r\n  }\r\n\r\n  connectedCallback(): void {\r\n    if (this.fieldInitialized) { return; }\r\n    this.fieldInitialized = true;\r\n    consoleLogWebpack(`${gpsTag} connectedCallback called`);\r\n\r\n    this.innerHTML = buildTemplate(template.default, styles.default);\r\n    const mapIconContainer = this.querySelector<HTMLDivElement>('#map-icon-container');\r\n    mapIconContainer.innerHTML = customGpsIcons.mapMarker;\r\n    this.latContainer = this.querySelector<HTMLSpanElement>('#lat-container');\r\n    this.lngContainer = this.querySelector<HTMLSpanElement>('#lng-container');\r\n    this.eventListeners = [];\r\n    const expand = () => { this.expand(); };\r\n    this.addEventListener('click', expand);\r\n    this.eventListeners.push({ element: this, type: 'click', listener: expand });\r\n\r\n    // TODO: TRY to refactor to use the new context.app.getSetting(...) in the formulas-data\r\n    const defaultCoordinates = this.connector._experimental.getSettings(\"Settings.GoogleMaps.DefaultCoordinates\") as CoordinatesDto;\r\n    this.defaultCoordinates = {\r\n      lat: defaultCoordinates.Latitude,\r\n      lng: defaultCoordinates.Longitude,\r\n    }\r\n\r\n    // set initial value\r\n    if (!this.connector.data.value) {\r\n      this.updateHtml(this.defaultCoordinates);\r\n    } else {\r\n      this.updateHtml(parseLatLng(this.connector.data.value));\r\n    }\r\n\r\n    // update on value change\r\n    this.connector.data.onValueChange(value => {\r\n      if (!value) {\r\n        this.updateHtml(this.defaultCoordinates);\r\n      } else {\r\n        const latLng = parseLatLng(value);\r\n        this.updateHtml(latLng);\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateHtml(latLng: google.maps.LatLngLiteral): void {\r\n    this.latContainer.innerText = latLng.lat?.toString() ?? '';\r\n    this.lngContainer.innerText = latLng.lng?.toString() ?? '';\r\n  }\r\n\r\n  private expand(): void {\r\n    this.connector.dialog.open();\r\n  }\r\n\r\n  disconnectedCallback(): void {\r\n    consoleLogWebpack(`${gpsTag} disconnectedCallback called`);\r\n    this.eventListeners.forEach(({ element, type, listener }) => {\r\n      element.removeEventListener(type, listener);\r\n    });\r\n  }\r\n}\r\n\r\nif (!customElements.get(gpsTag)) {\r\n  customElements.define(gpsTag, FieldCustomGps);\r\n}\r\n","export default \".custom-gps-preview{width:100%;display:flex;align-items:center;position:absolute;top:0;bottom:0;font-size:16px;line-height:20px;margin-bottom:-2px;cursor:pointer}.custom-gps-preview__text{flex-shrink:0;max-width:80%;overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.custom-gps-preview__spacer{flex-grow:1}.custom-gps-preview__map-icon{flex-shrink:0;margin-right:4px;display:flex;align-items:center;justify-content:center}.custom-gps-preview__map-icon svg{width:20px;height:20px;line-height:20px}\";"],"names":["consoleLogWebpack","message","optionalParams","customGpsIcons","mapMarker","buildTemplate","template","styles","parseLatLng","value","JSON","parse","replace","stringifyLatLng","latLng","stringify","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","GeneralHelpers","objectsEqual","x","y","obj1","obj2","keys1","keys","keys2","length","every","key1","arraysEqual","item","index","getFormChanges","oldValues","newValues","changes","newValue","oldValue","this","controlValuesEqual","toggleInArray","array","indexOf","push","splice","markControlTouched","control","touched","markAsTouched","updateValueAndValidity","patchControlValue","dirty","markAsDirty","patchValue","isNaN","Array","isArray","disableControl","disable","disabled","enable","tryParse","input","distinct","lowercaseInsideSquareBrackets","match","group","toLowerCase","FieldMask","constructor","mask","model","changeEvent","overloadPreCleanValues","eavConfig","config","fields","findFields","unwrapField","subscriptions","fieldList","preClean","watchAllFields","resolve","includes","appId","zoneId","entityGuid","entityId","toString","forEach","e","i","replaceValue","cleaned","result","matches","staticName","onChange","maybeNew","field","valueSub","valueChanges","subscribe","destroy","subscription","unsubscribe","gpsDialogTag","FieldCustomGpsDialog","HTMLElement","super","fieldInitialized","connectedCallback","eventListeners","innerHTML","latInput","querySelector","lngInput","addressMaskContainer","iconSearch","formattedAddressContainer","mapContainer","expConnector","connector","_experimental","allInputNames","allInputTypeNames","map","inputType","name","settings","LatField","latFieldName","LongField","lngFieldName","addressMaskSetting","AddressMask","addressMask","formGroup","controls","classList","remove","innerText","defaultCoordinates","getSettings","lat","Latitude","lng","Longitude","googleMapsParams","ApiKey","loadScript","mapScriptLoaded","google","maps","Map","zoom","center","gestureHandling","streetViewControlOptions","position","ControlPosition","RIGHT_CENTER","zoomControlOptions","marker","Marker","draggable","geocoder","Geocoder","data","updateHtml","onLatLngInputChange","addEventListener","autoSelect","element","type","listener","addListener","event","onMarkerDragend","setCenter","setPosition","updateForm","update","updateField","parseFloat","address","geocode","results","status","GeocoderStatus","OK","geometry","location","alert","disconnectedCallback","clearInstanceListeners","removeEventListener","customElements","define","gpsTag","FieldCustomGps","latContainer","lngContainer","expand","onValueChange","dialog","open"],"sourceRoot":""}