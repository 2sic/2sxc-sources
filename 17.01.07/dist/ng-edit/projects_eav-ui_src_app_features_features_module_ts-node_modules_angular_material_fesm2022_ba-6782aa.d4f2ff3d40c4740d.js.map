{"version":3,"file":"projects_eav-ui_src_app_features_features_module_ts-node_modules_angular_material_fesm2022_ba-6782aa.d4f2ff3d40c4740d.js","mappings":"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","names":["FeaturesModule","static","this","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","oAB","cJS","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","constructor","http","dnnContext","getFeatureDetails","featureNameId","get","$2sxc","apiUrl","webApiRoot","params","nameId","i0","i1","i2","Yz7","factory","ɵfac","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","window","sxcVersion","prefix","suffix","getTranslation","lang","pipe","catchError","error","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","hidden","disabled","inputs","booleanAttribute","features","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[5]}