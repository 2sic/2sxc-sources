{"version":3,"file":"2sxc.api.min.js","mappings":"kCACA,I,KCAwB,CAACA,IACH,oBAAXC,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeJ,EAASC,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeJ,EAAS,aAAc,CAAEK,OAAO,GAAO,E,ICJ9D,8BACI,KAAAC,WAAaC,EACb,KAAAC,cAAgBD,CAyCpB,QAvCI,YAAAE,KAAA,SAAKC,EAAaF,GAId,IAFA,IAAIG,EAAI,SACJC,EAAIC,OACDD,IAAMC,OAAOC,KAAOH,EAAI,UAC3BA,IACAC,EAAIA,EAAEG,OAGV,IAAMC,EAAUC,SAASC,cAAc,OAIvCF,EAAQG,aAAa,QAAS,yFAA2FR,GACzHM,SAASG,KAAKC,YAAYL,GAE1B,IAAMM,EAAOL,SAASC,cAAc,UACpCI,EAAKH,aAAa,oBAAqB,QACvCG,EAAKH,aAAa,QAAS,4CAC3BG,EAAKH,aAAa,MAAOT,GACzBM,EAAQK,YAAYC,GACpBL,SAASG,KAAKG,WAAa,kBAC3BC,KAAKlB,MAAQgB,EACbE,KAAKhB,SAAWA,CACpB,EAEA,YAAAiB,MAAA,WACI,GAAID,KAAKlB,MAAO,CACZW,SAASG,KAAKG,UAAYN,SAASG,KAAKG,UAAUG,QAAQ,iBAAkB,IAC5E,IAAMC,EAAMH,KAAKlB,MACjBqB,EAAIC,WAAWA,WAAWC,YAAYF,EAAIC,YAC1CJ,KAAKhB,U,CAEb,EAEA,YAAAsB,UAAA,WACKjB,OAAOE,OAAegB,MAAMC,WAAWP,OAC5C,EAEJ,EA3CA,GCQMQ,EAAM,IACNC,EAAY,IAIZC,EAAc,IAIdC,EAAQ,CAAC,OAAQ,SACjBC,EAAgBD,EAAME,OAAO,CAAC,SAMpC,0BAuFA,QApFE,YAAAC,MAAA,SAAMC,EAAUC,GACd,QADc,IAAAA,IAAAA,GAAA,IACTD,EAAK,MAAO,GACjB,GAAIE,MAAMC,QAAQH,GAAM,MAAM,IAAII,MAAM,wFACxC,IAGMC,EAHOrB,KACVsB,eAAeN,EAAK,KAAM,EAAGC,GAC7BM,QAAO,SAAAC,GAAK,OAAK,MAALA,GAAaA,EAAEC,OAAS,CAAxB,IACSC,KAAKhB,GAC7B,OAAOW,EAAWX,EAAYW,EAAW,EAC3C,EAEA,YAAAM,MAAA,SAAM9C,EAAe+C,EAAwBC,QAAxB,IAAAD,IAAAA,GAAA,QAAwB,IAAAC,IAAAA,GAAA,GAC3C,IAAMC,EAAQ9B,KAAK+B,KAAKlD,EAAO+C,GAC/B,OAAIC,EAAcC,EAwFtB,SAA4BE,GAC1B,IAAIC,EAAc,CAAC,EACnB,IAAK,IAAIC,KAAOF,EAAM,CACpB,IAAIG,EAAOD,EAAIE,MAAM3B,GACrB0B,EAAKE,QAAO,SAASC,EAAMC,EAAKC,GAC9B,OAAOF,EAAKC,KAASD,EAAKC,GAAOE,MAAMC,OAAOP,EAAKK,EAAI,KAAQL,EAAKV,OAAS,GAAKe,EAAIR,EAAKE,GAAO,CAAC,EAAK,GAC1G,GAAGD,E,CAEL,OAAOA,CACT,CAhGWU,CAAmBb,EAC5B,EAaQ,YAAAR,eAAR,SAAuBN,EAAUuB,EAAaK,EAAe3B,GAA7D,WACE,GAAW,MAAPD,EAAa,MAAO,GACxB,IA+FkBnC,EAChBgE,EAhGIC,EAASF,EAAQ,EAAInC,EAAIsC,OAAOH,GAAS,GAC/C,GAAmB,iBAAR5B,EACT,MAAO,CAAC,UAAG8B,GAAM,OAAGP,EAAG,YAAItB,GA6FXpC,EA7FiCmC,EA8FjD6B,GAAO,EAEU,iBAAVhE,KAGLgC,EAAcmC,SAASnE,IAAUoE,EAAUpE,MAC7CgE,GAAO,GAIThE,EAAQA,EACLqE,WAAWxC,EAzJH,MA0JRwC,WAAWvC,EAtJK,MAuJhBuC,WAAW,IAAKvC,KAIbkC,EA9JWnC,IA8JW,IAFlByC,mBAAmBtE,IA7G6BmC,IAE1D,IAAMoC,EAAsBzE,OAAOwD,KAAKnB,GACrCqC,KAAI,SAAAd,GAAO,SAAKjB,eAAeN,EAAIuB,GAAMA,EAAKK,EAAQ,EAAG3B,EAA9C,IACd,GAAuB,IAAnBmC,EAAQ3B,OAAc,MAAO,GAEjC,IAAI6B,EAAMF,EAAQf,QAAO,SAAUkB,EAAKC,GACtC,OAAOD,EAAIzC,OAAOI,MAAMC,QAAQqC,GAAOC,EAAUD,EAAK,GAAKA,EAC7D,GAAG,IAIH,OADeZ,EAAQ,EAAI,CAAC,UAAGE,GAAM,OAAGP,GAAO,MAAQ,IACzCzB,OAAOwC,EACvB,EAEO,YAAAvB,KAAP,SAAYyB,EAAa5B,GACvB,IAAK4B,GAAsB,IAAfA,EAAI/B,OAAc,MAAO,GAYrC,IAVA,IAAMK,EAAQ0B,EACXN,WAAWQ,KAAuBA,MAClCR,WApEQ,KAKI,KAgEZd,MAAM1B,MACN2C,KAAI,SAAAM,GAAK,OAAAA,aAAC,EAADA,EAAGT,WAjEA,IAiEuBxC,EAA1B,IACTa,QAAO,SAAAC,GAAK,OAAAA,EAAEC,OAAS,CAAX,IAEXQ,EAAoC,CAAC,EACrC2B,EAAkB,GAEbC,EAAI,EAAGA,EAAI/B,EAAML,OAAQoC,IAAK,CACrC,IAAMC,EAAOhC,EAAM+B,GAAGzB,MAhFb,KAiFHG,EAAMuB,EAAK,GAGXC,EAAWxB,EAAIyB,MAAM,SAAS,GAAGvC,OAGvC,GAAiB,IAAbsC,EACFH,EAAQrB,EAAIH,MAAM3B,OACb,CACL,GAAIsD,EAAWH,EAAMnC,OACnB,MAAM,IAAIL,MAAM,uBAAgBmB,EAAG,kCAA0BqB,EAAMlC,KAAKjB,KAC1E,IAAMwD,EAAS1B,EAAI2B,UAAUH,IAC7BH,EAAQA,EAAMO,MAAM,EAAGJ,IACjBK,KAAKH,GACXH,EAAK,GAAKF,EAAMlC,KAAKjB,E,CAEvBwB,EAAO6B,EAAK,IAAMA,EAAKrC,OAAS,EAC3BG,GAyEL/C,OAFgBA,EAvEWwF,mBAAmBP,EAAK,UAyE9C,EAALjF,EAAO4C,QAAS,GAlKI,MAkKC5C,EAAM,GACtByF,EAAczF,EAAMsF,MAAM,IAC/BvD,EAAMoC,SAASnE,GACA,SAAVA,EACLoE,EAAUpE,GAAe0F,WAAW1F,GACjCyF,EAAczF,GA9EyCiF,EAAK,GAC3D,I,CAsEV,IAAsBjF,EApElB,OAAOoD,CACT,EAEF,EAvFA,GA2FA,SAASwB,EAAUe,EAAY5B,GAG7B,OAAIA,EAAQ,EAAU4B,EAAIL,QAGnBK,EAAInC,QAAO,SAAUkB,EAAKC,GAC/B,OAAOD,EAAIzC,OAAOI,MAAMC,QAAQqC,GAAOC,EAAUD,EAAKZ,EAAQ,GAAKY,EACrE,GAAG,GACL,CAiBO,SAASP,EAAUwB,GACxB,MAAkB,iBAAPA,IACHhC,MAAMgC,KACNhC,MAAM8B,WAAWE,GAC3B,CAyCA,SAASH,EAAczF,GACrB,IAAM6F,EAAkBC,OAAOC,aAAa,GAC5C,OAAO/F,EACJqE,WA/KkB,KA+KSwB,GAC3BxB,WAAWvC,EAlLF,KAmLTuC,WAAWwB,EAAiB/D,EACjC,CC3LA,ICEYkE,EDFZ,0BAgFA,QA1EI,YAAAC,IAAA,SAAIC,GAGAA,EAAOA,EAAK7E,QAAQ,OAAQ,OAAOA,QAAQ,OAAQ,OACnD,IAEI8E,EADAC,EADa,IAAIC,OAAO,SAAWH,EAAO,YAAa,KACpCI,KAAKC,SAASC,QASrC,GANgB,OAAZJ,IAEAA,EADe,IAAIC,OAAO,OAASH,EAAO,YAAa,KACtCI,KAAKC,SAASE,OAInB,OAAZL,EAAkB,CAElB,IAAMM,EAAUH,SAASI,SAASxB,MAAM,IAAIkB,OAAO,IAAMH,EAAO,WAAY,MAIxEQ,GAAWA,EAAQ9D,OAAS,IAC5BuD,EAAYO,EAAQE,UAAU,G,MAElCT,EAAYC,EAAQ,GAExB,OAAoB,MAAbD,EACD,GACAX,mBAAmBW,EAAU9E,QAAQ,MAAO,KACtD,EAOA,YAAAwF,QAAA,SAAQX,GACJ,IAAMY,EAAQ3F,KAAK8E,IAAIC,GACvB,GAAc,KAAVY,EAAc,CACd,IAAMC,EAAU,8BAAuBb,EAAI,wCAE3C,MADAc,MAAMD,GACAA,C,CAEV,OAAOD,CACX,EAMA,YAAAG,QAAA,W,MACI,MAAkD,UAA1B,QAAjB,EAAA9F,KAAK8E,IAAI,gBAAQ,eAAEiB,oBAC9B,EAUA,YAAAhF,MAAA,SAAMC,GACJ,OAAO,IAAIgF,GAAiBjF,MAAMC,GAAK,EACzC,EAQA,YAAAW,MAAA,SAAMzC,GACJ,OAAO,IAAI8G,GAAiBrE,MAAMzC,GAAK,EACzC,EACJ,EAhFA,GELA,aACI,KAAA+G,gBAAkB,CACtB,GDKA,SAAYpB,GAKV,6BAKA,mBAOA,6BAOA,iBAQA,uBAKA,iCAMA,mBAQA,0BAQA,wBAMA,oBAOA,kCAMA,oBAOA,kCAMA,wBAOA,sCAMA,oBAGA,wBAGA,0BAEA,0BAEA,0BAEA,0BAEA,0BAEA,0BAEA,0BAEA,0BAEA,yBACD,CA/HD,CAAYA,IAAAA,EAAmB,KEAxB,ICPKqB,EDOCC,EAAY,OAGZC,EAAa,WAmBbC,EAAc,CAAC,MAAO,UAAW,UAAW,YAAa,cAAe,MAAO,OAAQ,QC7BpG,SAAYH,GACR,YACA,cACA,gBACA,eACH,CALD,CAAYA,IAAAA,EAAe,KCO3B,I,IAAA,aAeE,WACEI,EACAC,EACAC,GAHF,WASO,KAAAC,QAAU,SAAC1B,EAAcwB,EAAiBC,GACrC,SAAKE,gBAAgB3B,EAAMwB,EAAWC,EAAtC,EALVxG,KAAK0G,gBAAgBJ,EAASC,EAAWC,EAC3C,CAqBF,OAdU,YAAAE,gBAAR,SAAwB3B,EAAcwB,EAAiBC,GAErC,MAAZxG,KAAK2G,KAMT3G,KAAK2G,IAAIC,OAAO7B,GAChB/E,KAAK2G,IAAIE,QAAQN,GACK,MAAlBC,GACFxG,KAAK2G,IAAIG,IAAIN,IARbxG,KAAK2G,IAAM,IAAII,EAAIhC,EAAMwB,EAAWC,EASxC,EAEF,EA1CA,GCMaQ,EAAQ,CACnBC,YAAY,EACZC,IAAK,CACHC,UAAU,EACVC,KAAK,GAKPtF,OAAK,GACHuF,aAAa,EACbC,wBAAwB,EACxBC,aAAa,EACbC,cAAc,GACd,EAzBgC,eAyBR,E,ICzBtBC,GAAsD,IAA3CrC,SAASC,OAAOqC,QAAQ,cAazC,aA4BE,WAAY3C,EAAcxF,EAAciH,GAAxC,WAKE,GA5BF,KAAAmB,QAAU,IAAIzG,MAGN,KAAA0B,MAAQ,EAGR,KAAAgF,WAAuB,GAQ/B,KAAAC,WAAa,IA4Bb,KAAAC,UAxDe,EA2Df,KAAAC,oBAA8B,EAG9B,KAAAN,SAAoBA,EAGpB,KAAAO,oBAA8B,EAM9B,KAAAC,eAAiB,WAAc,gBAAI,EAAK1I,OAAS,EAAKA,OAAO0I,iBAAmB,IAAG,OAAG,EAAKC,aAA5D,EA2B/B,KAAArB,QAAU,SAACtH,GACT,EAAKA,OAASA,GAAU,EAAKA,OACzB,EAAKA,SACP,EAAKwI,mBAAqB,EAAKxI,OAAOuI,UAAY,EAAKvI,OAAOwI,mBAC9D,EAAKC,mBAAqB,EAAKzI,OAAOkI,UAAY,EAAKlI,OAAOyI,mBAElE,EA+IQ,KAAAG,MAAQ,MAKT,KAAApD,KAAO,SAON,KAAAqD,GAAK,WAAc,SAAKC,UAAY,EAAKA,QAAU,EAAKC,aAAa,GAAlD,EASnB,KAAAJ,WAAa,WAAc,gBAAG,EAAKC,OAAK,OAAG,EAAKpD,KAAI,YAAI,EAAKqD,KAAI,IAAtC,EAtOjCpI,KAAK4G,OAAO7B,GACZ/E,KAAK6G,QAAQtH,GAGTyH,EAAMC,WAAY,CACpB,IAAMsB,EAAevB,EAAMlF,MAAkCiD,GAC1C,MAAfwD,IACFvI,KAAK8H,SAAWS,EAChBvI,KAAKyH,SAAWc,E,CAIpBvI,KAAKwI,WAAY,IAAIC,MAAOC,UACN,MAAlBlC,GAAwBxG,KAAK8G,IAAIN,EACvC,CA0NF,OA9LE,YAAAI,OAAA,SAAO7B,GACL,IACE,IAAMtE,EAAMsE,EAAK2C,QAAQ,KACzB1H,KAAKmI,MAAQ1H,EAAM,EAAIsE,EAAK4D,OAAO,EAAGC,KAAKC,IAAIpI,EArFjC,IAqFsD,IAAM,GAC1E,IAAMqI,EAAOrI,EAAM,EAAIsE,EAAK4D,OAAOlI,EAAM,GAAKsE,EAC9C/E,KAAK+E,KAAO+D,EAAKH,OAAO,EAAGC,KAAKC,IAAIC,EAAKrH,OAtF5B,IAuFbzB,KAAK+E,KAAO/E,KAAK+E,KAAK4D,OAAO,EAAGC,KAAKC,IAAI7I,KAAK+E,KAAKtD,OAvFtC,G,CAwFb,MAAOsH,G,CAGX,EA2BA,YAAAjC,IAAA,SAAIlB,EAAkC5D,GAEpC,GAAIhC,KAAK2H,QAAQlG,OAASzB,KAAK6H,WAC7B,OAAO7H,KAAKgJ,gBAAgBpD,GAG1B5F,KAAK2H,QAAQlG,SAAWzB,KAAK6H,YAC/B7H,KAAKiJ,UAAUjJ,KAAKkJ,cA3HA,kEA6HtB,IAAMC,EAAQnJ,KAAKkJ,cAActD,EAAS5D,GAE1C,OADAhC,KAAKiJ,UAAUE,GACRA,EAAMvD,OACf,EAGA,YAAAwD,QAAA,SAAQxD,EAAkC5D,GACpChC,KAAKqJ,WAAWrJ,KAAK8G,IAAIlB,EAAS5D,EACxC,EAGA,YAAAqH,QAAA,WACE,OAAOrJ,KAAKyH,UAAYzH,KAAKgI,kBAC/B,EAGA,YAAAkB,cAAA,SAActD,EAAkC5D,GAC9C,IAAMsH,EAAMtJ,KAAKgJ,gBAAgBpD,GAC3B2D,GAAO,IAAId,MAAOC,UAAY1I,KAAKwI,UAEzC,OADc,IAAIgB,EAASxJ,KAAMsJ,EAAKtJ,KAAK4C,MAAO2G,EAAMvH,EAE1D,EAGQ,YAAAgH,gBAAR,SAAwBpD,GACtB,GAAIA,aAAmB6D,SACrB,IACE,OAAS7D,G,CACT,MAAOmD,GACP,MAAO,wB,CAGX,OAAOnD,EAAQ8D,UACjB,EAGA,YAAAC,KAAA,SAAK5E,EAAc6E,EAAqBhE,EAAkB5D,GACxD,OAAO,IAAI6H,EAAQ7J,KAAM+E,EAAM6E,EAAYhE,EAAS5D,EACtD,EAGA,YAAA8H,cAAA,SAAc/E,GACZ/E,KAAK4C,QACL5C,KAAK4H,WAAWxD,KAAKW,EACvB,EAGA,YAAAgF,iBAAA,SAAiBhF,GACf/E,KAAK4C,QACL,IAAMoH,EAAOhK,KAAK4H,WAAWqC,MACzBD,IAASjF,GACXmF,QAAQC,KAAK,sCAA+BpF,EAAI,2BAAmBiF,EAAI,KAC3E,EASA,YAAAI,KAAA,SAAKC,EAAsB3J,QAAtB,IAAA2J,IAAAA,EAAA,WAAsB,IAAA3J,IAAAA,EAAA,OACrB2J,EAAKrK,KAAKsK,QAAQ,EAAGD,EAAK3J,GACzBV,KAAKuK,UACZ,EAGA,YAAAA,SAAA,SAASC,EAAmB/I,GAA5B,gBAAS,IAAA+I,IAAAA,EAAA,GACP,IAAIC,EAAQD,EACZxK,KAAK2H,QACFxD,MAAMqG,EAAO/I,EAAS+I,EAAQ/I,OAAS1C,GACvC2L,SAAQ,SAAC3B,GAAM,SAAKuB,QAAQG,IAAS1B,EAAtB,GACpB,EAGQ,YAAAuB,QAAR,SAAgBG,EAAe1B,EAAarI,QAAA,IAAAA,IAAAA,EAAA,OAC1C,IAAMuB,EAAU8G,EAAQ,OAAI,KAAOA,EAAE9G,OAAS,GACxC0I,GAAQ,OAASF,GAAOtG,OAAO,GAAK,IAAM4E,EAAE6B,SAAWlK,EAAY,KAAKqC,OAAOgG,EAAEnG,OAASmG,EAAEnD,QAAU3D,EACxG8G,EAAE/G,KAAMkI,QAAQvD,IAAIgE,EAAM5B,EAAE/G,MAC3BkI,QAAQvD,IAAIgE,EACnB,EASA,YAAA1B,UAAA,SAAUE,GACJnJ,KAAK8H,UAAU9H,KAAKoK,KAAKjB,GAC7BnJ,KAAK2H,QAAQvD,KAAK+E,GACdnJ,KAAKT,QAAQS,KAAKT,OAAO0J,UAAUE,EACzC,EAOQ,YAAAb,aAAR,SAAqBuC,GAGnB,IAFA,IAAMC,EAAQ,sCACVC,EAAe,GACVlH,EAAI,EAAGA,EAAIgH,EAAchH,IAAK,CACrC,IAAMmH,EAAOpC,KAAKqC,MAAMrC,KAAKsC,SAAWJ,EAAMrJ,QAC9CsJ,GAAgBD,EAAM5G,UAAU8G,EAAMA,EAAO,E,CAE/C,OAAOD,CACT,EAoCF,EArQA,GCbA,aAII,WAAmBpE,EAAiB5B,EAAc6E,EAAqBhE,EAAkB5D,GAKrF,GALe,KAAA2E,IAAAA,EAAiB,KAAA5B,KAAAA,EAChC/E,KAAKmL,aAAenL,KAAK2G,IAAIuC,cAAcnE,EAAO,KAAO6E,GAAc,IAAM,KAC7E5J,KAAK2G,IAAImD,cAAc/E,GACvB/E,KAAK2G,IAAIsC,UAAUjJ,KAAKmL,cACD,iBAAZvF,GAAsB5F,KAAK8G,IAAIlB,GACtC5D,EAAM,IAAK,IAAIO,KAAOP,EAAMhC,KAAKgC,KAAK,WAAaO,EAAKP,EAAKO,GACrE,CAoDJ,OAhDI,YAAAuE,IAAA,SAAIlB,EAAiB5D,EAAgBoJ,GACjCpL,KAAKqL,YAAczF,EACnB5F,KAAK2G,IAAIG,IAAIlB,EAAS5D,GAClBoJ,GAAUpL,KAAKsL,qBAAqBF,EAAUxF,EAAS5D,EAC/D,EAEA,YAAAuJ,aAAA,SAAa3F,EAAiBwF,GACtBpL,KAAKqL,cAAgBzF,GACzB5F,KAAK8G,IAAIlB,GACLwF,GAAUpL,KAAKsL,qBAAqBF,EAAUxF,OAAS7G,EAC/D,EAGA,YAAAiD,KAAA,SAAK4D,EAAiB5D,GAClBhC,KAAK2G,IAAIyC,QAAQxD,EAAS5D,EAC9B,EAEA,YAAAwJ,KAAA,SAAK5F,EAAkBwF,GACnBpL,KAAKyL,OAAO,KAAM7F,GAAW,KAAMwF,EACvC,EAEA,YAAAK,OAAA,SAAUxJ,EAAW2D,EAAkBwF,GAanC,OAZAxF,EAAUA,GAAW,KACrB5F,KAAKmL,aAAalJ,OAAS2D,EAC3B5F,KAAK2G,IAAIoD,iBAAiB/J,KAAK+E,MAG/B/E,KAAKmL,aAAanJ,KAAOC,GAGrBjC,KAAK2G,IAAImB,UAAY9H,KAAK2G,IAAIoB,qBAC9B/H,KAAK8G,IAAI9G,KAAK+E,KAAO,MAAQa,EAAS3D,GAEtCmJ,GAAUpL,KAAKsL,qBAAwBF,EAAUxF,EAAS3D,GACvDA,CACX,EAOQ,YAAAqJ,qBAAR,SAAgCF,EAAexF,EAAiB5D,GAI5D,GAHIoJ,IAAa,OAASlB,QAAQvD,IAAIf,EAAS5D,GAC3CoJ,IAAa,QAAUlB,QAAQC,KAAKvE,EAAS5D,GAC7CoJ,IAAa,SAAaA,IAAa,SAAWlB,QAAQwB,MAAM9F,EAAS5D,GACzEoJ,IAAa,QAAW,MAAMxF,CACtC,EACJ,EA9DA,GCEA,0BAsBA,QAjBW,EAAA+F,eAAP,W,IAA6C,sDACzCC,EAAKvJ,QAAQ,SAACJ,EAAQ4J,GAClB,OAAClN,OAAOwD,KAAK0J,GAAiBxJ,QAAO,SAACyJ,EAAQvJ,GAE1C,OADAuJ,EAAOvJ,GAAOsJ,EAAQtJ,GACfuJ,CACX,GAAG7J,EAHH,GAIF2J,EAAK,GACX,EAEO,EAAAG,UAAP,SAAoBC,EAAaC,GAC7B,QAD6B,IAAAA,IAAAA,GAAA,GAC1BD,QACC,OAAOA,EACX,IAAMvH,EAAMwH,EAAiBC,KAAKC,UAAUH,EAAUI,GAAuBF,KAAKC,UAAUH,GAC5F,OAAGvH,QACQuH,EACJE,KAAKG,MAAM5H,EACtB,EACJ,EAtBA,GAyBM2H,EAAsB,WACxB,IAAME,EAAO,IAAIC,QACjB,OAAO,SAACC,EAAO3N,GACb,GAAqB,iBAAVA,GAAgC,OAAVA,EAAgB,CAC/C,GAAIyN,EAAKG,IAAI5N,GACX,OAEFyN,EAAKxF,IAAIjI,E,CAEX,OAAOA,CACT,CACF,ECxCF,0BA2IA,QAxIW,EAAA6N,MAAP,SAAa1N,GACmB,aAAxBS,SAASkN,WACT3N,IAEAS,SAASmN,iBAAiB,oBAAoB,WAAM,OAAA5N,GAAA,GAAY,CAAE6N,MAAM,GAEhF,EAGO,EAAAC,MAAP,SAAa9L,GACT,IAAM8L,EAAQnO,OAAOgJ,QAAQ3G,GACxBqC,KAAI,SAAC,G,IAAC0J,EAAC,KAAEpJ,EAAC,KAAM,gBAAGR,mBAAmB4J,GAAE,YAAS,MAALpJ,EAAY,GAAkB,iBAANA,EAAiBR,mBAAmBQ,GAAKR,mBAAmB+I,KAAKC,UAAUxI,IAA/H,IAChBjC,KAAK,KACV,OAAOoL,CACX,EAGO,EAAAE,cAAP,SAAqBC,GAEjB,IAAMC,EAAczN,SAASC,cAAc,OAC3CwN,EAAYC,mBAAmB,aAAcF,GAG7C/L,MAAMkM,KAAKF,EAAYG,iBAAiB,WAAW3C,SAAQ,SAAC4C,GACxD,IAAMC,EAAgB9N,SAASC,cAAc,UAE7CwB,MAAMkM,KAAKE,EAAaE,YAAY9C,SAAQ,SAAC+C,GACzCF,EAAc5N,aAAa8N,EAAUC,SAAUD,EAAUE,UAC7D,IAEAJ,EAAcK,YAAcN,EAAaM,YAEzCC,EAAKC,YAAYR,EAAcC,GAAe,EAClD,IAGA,IAAMQ,EAAW7M,MAAMkM,KAAKF,EAAYc,UAIxC,OAHAD,EAASrD,SAAQ,SAACuD,GACdf,EAAY7M,YAAY4N,EAC5B,IACOF,CACX,EAGO,EAAAG,OAAP,SAAcD,GACV,IAAME,EAAaF,EAAQG,wBAK3B,MAJ+C,CAC3C9O,IAAK6O,EAAW7O,IAAMD,OAAOgP,QAC7BC,KAAMH,EAAWG,KAAOjP,OAAOkP,QAGvC,EAGO,EAAAC,MAAP,SAAaP,GAET,IAAMQ,EAAgBC,iBAAiBT,GAMvC,OALsC,IAAxBA,EAAQU,YAChB,EACAV,EAAQU,aACPC,SAASH,EAAcI,iBAAiB,qBAAsB,IAAMD,SAASH,EAAcI,iBAAiB,sBAAuB,MACnID,SAASH,EAAcI,iBAAiB,gBAAiB,IAAMD,SAASH,EAAcI,iBAAiB,iBAAkB,IAEpI,EAGO,EAAAC,OAAP,SAAcb,GAEV,IAAMQ,EAAgBC,iBAAiBT,GAMvC,OALwC,IAAzBA,EAAQc,aACjB,EACAd,EAAQc,cACPH,SAASH,EAAcI,iBAAiB,oBAAqB,IAAMD,SAASH,EAAcI,iBAAiB,uBAAwB,MACnID,SAASH,EAAcI,iBAAiB,eAAgB,IAAMD,SAASH,EAAcI,iBAAiB,kBAAmB,IAEpI,EAIO,EAAAG,MAAP,SAAaf,GACT/M,MAAMkM,KAAKa,EAAQgB,YAAYvE,SAAQ,SAACwE,GACpCjB,EAAQ5N,YAAY6O,EACxB,GACJ,EAGO,EAAApB,YAAP,SAAmBqB,EAA2BC,EAAyBC,GACnE,IAAM9P,EAAS4P,EAAaG,cAGtBC,EAAUrO,MAAMkM,KAAKgC,EAAW/B,iBAAiB,WACjDmC,EAAgC,GACtCD,EAAQ7E,SAAQ,SAAC+E,GACbD,EAASpL,KAAK,CAAEqL,OAAM,EAAEC,KAAMD,EAAOC,OACrCD,EAAOC,KAAO,IAClB,IAGAnQ,EAAOoQ,aAAaP,EAAYD,GAGhCK,EAAS9E,SAAQ,SAACkF,GACdA,EAAQH,OAAOC,KAAOE,EAAQF,IAClC,IAEIL,GAEAQ,EAAaR,WAAWE,OAASxQ,EAEzC,EAGO,EAAA+Q,OAAP,SAAcvQ,EAAqBwQ,EAA4BV,GAC3D,IAAME,EAA+B,GAErCQ,EAAYrF,SAAQ,SAACuD,GACjB,GAA4C,WAAxCA,EAAQ+B,QAAQjK,oBAAkC,CAClD,IAAM0J,EAASxB,EAETgC,EAAcR,EAAOC,KAC3BD,EAAOC,KAAO,KAEdnQ,EAAOM,YAAY4P,GAEnBA,EAAOC,KAAOO,EACdV,EAAQnL,KAAKqL,E,MAEblQ,EAAOM,YAAYoO,EAE3B,IAEIoB,GAAcE,EAAQ9N,OAAS,GAE/BoO,EAAaR,WAAWE,OAASxQ,EAEzC,EACJ,EA3IA,GA8IA,0BAyCA,QAtCW,EAAAsQ,WAAP,SAAkBE,EAA8BvQ,GAAhD,WACUyQ,EAASF,EAAQ,GACjBW,EAASX,EAAQpL,MAAM,GAC7B,GAAc,MAAVsL,EAAJ,CAMA,IAAMU,EAAO1Q,SAASC,cAAc,UASpC,GAPAwB,MAAMkM,KAAKqC,EAAOjC,YAAY9C,SAAQ,SAAC+C,GACnC0C,EAAKxQ,aAAa8N,EAAUC,SAAUD,EAAUE,UACpD,IAEAwC,EAAKvC,YAAc6B,EAAO7B,YAGtBuC,EAAKT,MAAQS,EAAKC,IAAK,CACvB,IAAMC,EAAW,WACbF,EAAKG,OAAS,KACdH,EAAKI,QAAU,KACf9Q,SAAS+Q,KAAKnQ,YAAY8P,GAC1B,EAAKd,WAAWa,EAAQlR,EAC5B,EAIA,OAHAmR,EAAKG,OAASD,EACdF,EAAKI,QAAUF,OACf5Q,SAAS+Q,KAAK3Q,YAAYsQ,E,CAK9BM,YAAW,WACPhR,SAAS+Q,KAAK3Q,YAAYsQ,GAC1B1Q,SAAS+Q,KAAKnQ,YAAY8P,GAC1B,EAAKd,WAAWa,EAAQlR,EAC5B,G,MAhCIA,SAAAA,GAiCR,EACJ,EAzCA,GCtIA,aA6BI,WAEY2H,EACDf,EAEAhD,EAEA2G,EACPvH,GARJ,WAEY,KAAA2E,IAAAA,EACD,KAAAf,QAAAA,EAEA,KAAAhD,MAAAA,EAEA,KAAA2G,KAAAA,EAVJ,KAAAqB,OAAS,WAAc,SAAKjE,IAAIsB,gBAAT,EAalBjG,IAWIhC,KAAKgC,KAAOA,EAE5B,CAEJ,OAzCI,sBAAI,mBAAI,C,IAAR,WACI,OAAOhC,KAAK0Q,KAChB,E,IAEA,SAAS1O,QACQjD,IAATiD,GACAhC,KAAK2G,IAAI0C,YACTrJ,KAAK0Q,MAAQC,EAAI5E,UAAU/J,GAAM,GACzC,E,gCAiCJ,EAtDA,G,mcCIA,cAEI,mBACI,YAAM,eAAa,K,OAKvB,EAAA4O,QAA6C,CAAC,EAJ1C,EAAK9J,IAAI,SAAU,WAAY,EAAKH,KACpC,EAAKA,IAAIG,IAAI,yD,CACjB,CA0DJ,OAhEgC,OAU5B,YAAAA,IAAA,SAAI+J,EAAiBvK,EAAiBK,GAC5BkK,KAAW7Q,KAAK4Q,UAClB5Q,KAAK4Q,QAAQC,GAAW,IAAIC,EAAeD,IAC/C7Q,KAAK4Q,QAAQC,GAASE,KAAK3M,KAAK,CAAC7B,IAAK+D,EAASK,IAAKA,GACxD,EAEA,YAAAqK,KAAA,SAAKC,EAAkBxG,EAAgBD,EAAgB/I,GAEnD,GAAKwP,EAAL,CAOA,IAAMC,EAAOlR,KAAK4Q,QAAQK,GAC1B,GAAKC,EAML,QAAcnS,IAAV0L,EAAJ,CAUA,IAAM0G,EAASD,EAAKH,KAAKtP,QAAUgJ,GAASyG,EAAKH,KAAKtG,GACtD,GAAK0G,EAKL,GAAKA,EAAOxK,IAAZ,CAKAuD,QAAQvD,IAAI,gCAAyBsK,EAAQ,YAAIxG,EAAK,cAAM0G,EAAO5O,IAAG,MACtE,IAAI6O,GAAY,OACFrS,IAAVyL,IACA4G,GAAY,EACZ5G,EAAQ,EACR/I,EAAS,IAEb0P,EAAOxK,IAAI4D,SAASC,GAAS,EAAG/I,GAC5B2P,GAAaD,EAAOxK,IAAIgB,QAAQlG,OAASA,GACzCyI,QAAQC,KAAK,uBAAgB1I,EAAM,eAAO0P,EAAOxK,IAAIgB,QAAQlG,OAAM,gF,MAbnEyI,QAAQwB,MAAM,sBAAejB,EAAK,qBAAawG,EAAQ,8BALvD/G,QAAQwB,MAAM,gBAASjB,EAAK,+BAAuBwG,EAAQ,K,KAZ/D,CACI,IAAI,EAAQ,EACNI,EAAWH,EAAKH,KACjB1N,KAAI,SAACiO,GAAM,gCAAmBL,EAAQ,cAAM,IAAO,+BAAuBK,EAAE/O,IAAG,IAApE,IACXb,KAAK,MACVwI,QAAQvD,IAAI,WAAIsK,EAAQ,sBAAcC,EAAKH,KAAKtP,OAAM,wDAAyD4P,E,MAV/GnH,QAAQwB,MAAM,gBAASuF,EAAQ,e,KATnC,CACI,IAAM9O,EAAOxD,OAAOwD,KAAKnC,KAAK4Q,SAC9B1G,QAAQvD,IAAI,UA1BP,4OA0BkB,OAAGxE,EAAKV,OAAM,gCAAiCU,EAAKkB,KAAI,SAACjE,GAAM,gCAAmBA,EAAC,MAApB,IAA2BsC,KAAK,M,CA2ClI,EACA,EAhEA,CAAgC6P,GAmEhC,EAEI,SAAmBxM,GAAA,KAAAA,KAAAA,EADnB,KAAAgM,KAAgB,EACkB,EAWzBS,EAJTnS,OAAOkB,OAASlB,OAAOkB,MAAMkR,WAC1B,IAAIC,ECzEEC,EAAY,qCAgBZC,EAAgC,2B,0dC5BvCC,EAAiB,uGAOvB,cACI,WAAmBC,GAAnB,MACI,YAAM,aAAcA,EAAInL,MAAI,K,OADb,EAAAmL,IAAAA,E,CAEnB,CA0CJ,OA7C4C,OAWxC,YAAAC,cAAA,sBACUC,EAAKhS,KAAK2G,IAAIgD,KAAK,iBAEzBkE,EAAKnB,OAAM,WAAM,SAAKuF,4BAAL,IACjBD,EAAGxG,KAAK,4BACZ,EAEQ,YAAAyG,2BAAR,WACI,IAAMD,EAAKhS,KAAK2G,IAAIgD,KAAK,8BACzB,QAAwB,IAAbtK,OAAO6S,EAEd,MADAF,EAAGxG,KAAK,SACF,uEAAgEqG,GAG1E,IAAMM,EAAK9S,OAAO6S,EAAEE,kBACpB,QAAkB,IAAPD,EAEP,MADAH,EAAGxG,KAAK,SACF,2EAAoEqG,GAE9E,IAAMQ,EAAQF,EAAG,GACbG,EAAUD,EAAME,eAAe,QAC/BC,EAA6B,CAC7BC,KAAMJ,EAAMK,WACZC,KAAM,UACNC,IAAKN,EACLO,OAAQP,EACRQ,UAAWlB,EACXmB,IAAKV,EAAMW,sBACXC,OAAQtB,EACRuB,SDzBe,OC2BnBlT,KAAK8R,IAAIqB,KAAKX,EAAU,UACxBR,EAAGxG,MACP,EACJ,EA7CA,CAA4C+F,GCNtC6B,EAAmB,yCAMzB,aAIE,WACYC,GAAA,KAAAA,WAAAA,EAEVrT,KAAK2G,IAAM,IAAII,EAAI,aAAcsM,EAAW1M,IAC9C,CA4CF,OAtCS,YAAA2M,qBAAP,SAA4B7F,GAA5B,WACQzN,KAAKuT,WACXvT,KAAKuT,SAAW,IAAIC,kBAAiB,SAACC,GACpC,IAAiB,UAAAA,EAAA,eAAa,CAA1B,IAAMC,EAAG,KACM,eAAbA,EAAIhE,MAAyBgE,EAAIC,gBAAkBlG,GACrD,EAAK4F,WAAWO,UAAU1H,KAAKG,MAAM,EAAKgH,WAAWQ,kB,CAC3D,IACA7T,KAAK2G,IAAIG,IAAI,4BACb9G,KAAKuT,SAASO,QAAQ9T,KAAKqT,WAAWU,kBAAmB,CAAEvG,YAAY,EAAMwG,WAAW,EAAOC,SAAS,IAC1G,EAMO,YAAAC,sBAAP,sBACE,IAAMlU,KAAKmU,iBAAX,CACAnU,KAAKmU,iBAAmB,IAAIX,kBAAiB,SAACC,GAC5C,IAAiB,UAAAA,EAAA,eAAa,CAA1B,IAAMC,EAAG,KACM,eAAbA,EAAIhE,MAzCG,UAyCsBgE,EAAIC,eACnC,EAAKS,uBAAuBV,EAAI5H,O,CACtC,IACA9L,KAAK2G,IAAIG,IAAI,6BACb,IAAMuN,EAAc5U,SAAS6U,cAAclB,GACxB,MAAfiB,GAIJrU,KAAKoU,uBAAuBC,GAC5BrU,KAAKmU,iBAAiBL,QAAQO,EAAa,CAAE7G,YAAY,EAAMwG,WAAW,EAAOC,SAAS,KAJxF/J,QAAQwB,MAAM,oDAA6C0H,EAAgB,MAA7D,kFATmB,CAcrC,EAGQ,YAAAgB,uBAAR,SAA+BG,GAC7BvU,KAAK2G,IAAIG,IAAI,qBACVyN,GAASA,EAAM1V,OAChBmB,KAAKqT,WAAWvB,IAAI0C,UAAUD,EAAM1V,MACxC,EACF,EApDA,G,0dCCM4V,EAAe,UAarB,cAOI,WAAmB3C,GAAnB,MACI,YAAM,aAAwBA,EAAInL,MAAc,K,OADjC,EAAAmL,IAAAA,EANZ,EAAA4C,QAAU,EAQb,EAAKC,kBAAoB,IAAIC,EAAyB,G,CAC1D,CA4DJ,OAtE2C,OAYhC,YAAAC,mBAAP,SAA0BC,GAA1B,gBAA0B,IAAAA,IAAAA,GAAA,GACtB,IAAM9C,EAAKhS,KAAK2G,IAAIgD,KAAK,qBAAsB,UAAGmL,IAElD,GAAG9U,KAAK8R,IAAIpF,MAAO,OAAOsF,EAAGxG,KAAK,oBAElCxL,KAAK2G,IAAIG,IAAI,oCAAsC9G,KAAK0U,QAAU,qBAAuBI,GACzF,IAAMC,EAAO/U,KAAK6T,iBAClB,IAAIkB,EAEA,OADA/U,KAAK0U,UACFI,GAAiB9U,KAAK0U,SAvClB,KAwCH,IAAIM,EAAuBhV,KAAK8R,KAAKC,gBAC9BC,EAAGxG,SAEdiF,YAAW,WAAQ,EAAKoE,oBAAsB,GA1C1C,IA2CG7C,EAAGxG,KAAK,eAGnBxL,KAAK4T,UAAU1H,KAAKG,MAAM0I,IAG1B/U,KAAK2U,kBAAkBrB,qBAAqBmB,GAC5CzC,EAAGxG,MACP,EAEO,YAAAoI,UAAP,SAAiBqB,GACbjV,KAAK2G,IAAIG,IAAI,yBACb9G,KAAK8R,IAAIqB,KAAK8B,EArDD,eHWS,WG2CnBA,EAAU/B,UACTlT,KAAK2U,kBAAkBT,uBAC/B,EAEO,YAAAL,eAAP,WACI,IAAMqB,EAAUlV,KAAK+T,kBACrB,OAAKmB,EACEA,EAAQC,aAAaV,GADP,IAEzB,EAEO,YAAAV,gBAAP,WACI,OAAOtU,SAAS6U,cAAc,oBHjEP,SGiEmC,KAC9D,EAOO,YAAAhB,qBAAP,sBACQtT,KAAKuT,WACXvT,KAAKuT,SAAW,IAAIC,kBAAiB,SAACC,GACpC,IAAiB,UAAAA,EAAA,eAAa,CAA1B,IAAMC,EAAG,KACM,eAAbA,EAAIhE,MAAyBgE,EAAIC,gBAAkBc,GACrD,EAAKb,UAAU1H,KAAKG,MAAM,EAAKwH,kB,CACrC,IACA7T,KAAK2G,IAAIG,IAAI,4BACb9G,KAAKuT,SAASO,QAAQ9T,KAAK+T,kBAAmB,CAAEvG,YAAY,EAAMwG,WAAW,EAAOC,SAAS,IAC/F,EAGJ,EAtEA,CAA2C1C,G,0dCf3C,cAgBI,mBACI,YAAM,cAAe,KAAM,aAAW,K,OAXnC,EAAA7E,OAAQ,EAIR,EAAA9B,OAAS,GAQZ,EAAKjE,IAAIc,UAAW,EACpB+J,EAAS1K,IAAI,SAAU,cAAe,EAAKH,KAC3C,EAAKyO,WAAa,IAAIC,EAAsB,GAGvB,oBAAXC,QACN,EAAK3O,IAAIG,IAAI,0BACb,EAAKqM,KAAKmC,OAAQ,4BAElB,EAAK3O,IAAIG,IAAI,2BACb,EAAKsO,WAAWP,sB,CAExB,CAsHJ,OApJ0C,OAsC/B,YAAA1B,KAAP,SAAYoC,EAA4B3K,GACpC,IAAMoH,EAAKhS,KAAK2G,IAAIgD,KAAK,QACzB,GAAG4L,EAAS5C,OAAS4C,EAAS3C,IAAK,CAC/BZ,EAAGlL,IAAI,kDACP,IAAM0O,EAAYD,EAAS5C,KAAK8C,SAAS,KAAO,GAAK,IACrDF,EAAS3C,IAAM,UAAG2C,EAAS5C,MAAI,OAAG6C,GAAQ,OdxCzB,2B,Cc0CrBxV,KAAK0V,OAASH,EAKXvV,KAAK2V,cAAa3V,KAAK0V,OAAO3C,IAAM/S,KAAK2V,aAE5C3V,KAAK0M,OAAQ,EACb1M,KAAK4K,OAASA,GAAU,oBAAsB5K,KAAK2V,YAAc,OAAQ,IACzE3D,EAAGvG,OAAO8J,EAAU,eAAiBvV,KAAK4K,OAC9C,EAMO,YAAA4J,UAAP,SAAiBoB,GACTA,IACJ5V,KAAK2V,YAAcC,EACnB5V,KAAK0V,OAAO3C,IAAM6C,EACtB,EAKO,YAAAhD,IAAP,WAEI,OADA5S,KAAK6V,mBAAmB,OACjB7V,KAAK0V,OAAO9C,GACvB,EAIO,YAAAC,OAAP,WAGI,OADA7S,KAAK6V,mBAAmB,UACjB7V,KAAK0V,OAAO7C,MACvB,EAKO,YAAAJ,KAAP,WAEI,OADAzS,KAAK6V,mBAAmB,QACjB7V,KAAK0V,OAAOjD,IACvB,EAKO,YAAAK,UAAP,WAEI,OADA9S,KAAK6V,mBAAmB,aACjB7V,KAAK0V,OAAO5C,WAAalB,CACpC,EAKO,YAAAmB,IAAP,WAEI,OADA/S,KAAK6V,mBAAmB,OACjB7V,KAAK0V,OAAO3C,GACvB,EAMO,YAAAE,OAAP,WAEI,OADAjT,KAAK6V,mBAAmB,UACjB7V,KAAK0V,OAAOzC,QAAUtB,CACjC,EAKO,YAAAuB,SAAP,WAEI,OADAlT,KAAK6V,mBAAmB,YACjB7V,KAAK0V,OAAOxC,UJzGA,KI0GvB,EAQO,YAAA4C,YAAP,W,MACE,OAA8B,QAAvB,EAAA9V,KAAK0V,OAAOI,mBAAW,QAAI,IACpC,EAIQ,YAAAD,mBAAR,SAA2BE,GACvB,IAAG/V,KAAK0M,QAGR1M,KAAK2G,IAAIG,IAAI,2DAA6DiP,GAC1E/V,KAAKoV,WAAWP,oBAAmB,IAGhC7U,KAAK0M,OACR,KAAM,qBAAcqJ,EAAa,gDACrC,EAEJ,EApJA,CAA0CxE,GCN1C,aACE,WAAoBqB,EAAwBoD,GAAxB,KAAApD,IAAAA,EAAwB,KAAAoD,IAAAA,CAC5C,CA8CF,OAvCS,YAAAC,YAAP,SAAmBC,GACjB,IAAIC,EAAUnW,KAAK4S,IAAIuD,UAEvB,GAAgB,MAAZ9W,OAAO6S,EACT,MAAM,IAAI9Q,MAAM,mHAElB,IAAMgV,EAAU/W,OAAO6S,EAAEmE,KAAK,CAC5BC,OAAO,EACPC,SAAWL,EAAiBK,UAAY,OACxCvU,KAAMkK,KAAKC,UAAW+J,EAAiBlU,MACvCwU,YAAa,mBACb9G,KAAOwG,EAAiBO,OACxBvX,IAAKc,KAAK0W,aAAaR,GACvBS,WAAA,SAAWC,GACT,IAAK,IAAIrU,KAAO4T,EACVA,EAAQU,eAAetU,IACzBqU,EAAIE,iBAAiBvU,EAAK4T,EAAQ5T,GACxC,IAMF,OAHK2T,EAASa,iBACZX,EAAQY,KAAKhX,KAAKgW,IAAIiB,uBAEjBb,CACT,EAOQ,YAAAM,aAAR,SAAqBR,GACnB,IAAIhX,EAAOgX,EAAiBhX,KAAO,gBAAkBgX,EAASgB,WAAa,IAAMhB,EAASiB,OAK1F,OAFWnX,KAAKgW,IAAIoB,KAAKC,OAAOnY,EAAKgX,EAASoB,WAE9BpB,EAASqB,OAAe,IAAM1J,EAAKf,MAAMoJ,EAASqB,QAAhC,GACpC,EACF,EAhDA,G,gNCOA,aAaI,WAA6BvB,GAAA,KAAAA,IAAAA,CAG7B,CAyMJ,OAnMI,YAAAlR,IAAA,SAAI0S,EAAmDD,EAAcvV,EAAY+U,GAC7E,OAAO/W,KAAKyX,QAAQD,EAAeD,EAAQvV,EAAM+U,EAAiB,MACtE,EAMA,YAAAW,KAAA,SAAKF,EAAmDD,EAAcvV,EAAY+U,GAC9E,OAAO/W,KAAKyX,QAAQD,EAAeD,EAAQvV,EAAM+U,EAAiB,OACtE,EAMA,YAAAY,OAAA,SAAOH,EAAmDD,EAAcvV,EAAY+U,GAChF,OAAO/W,KAAKyX,QAAQD,EAAeD,EAAQvV,EAAM+U,EAAiB,SACtE,EAMC,YAAAa,IAAA,SAAIJ,EAAmDD,EAAcvV,EAAY+U,GAC9E,OAAO/W,KAAKyX,QAAQD,EAAeD,EAAQvV,EAAM+U,EAAiB,MACtE,EAMC,YAAAU,QAAA,SAAQvB,EAA8CqB,EAAavV,EAAW+U,EAA0BN,GAQrG,GAJsB,iBAAXc,QAAyC,IAAXA,IACrCA,EAAS,CAAEnP,GAAImP,IAGK,iBAAbrB,EAAuB,CAC9B,IAAM2B,EAAmB3B,EAAS9T,MAAM,KAClC0V,EAAiBD,EAAiB,GAClCE,EAAaF,EAAiB,GAEb,KAAnBC,GAAwC,KAAfC,GACzB7N,QAAQC,KAAK,8EAEjB+L,EAAW,CACPgB,WAAYY,EACZX,OAAQY,EACRR,OAAM,EACNvV,KAAI,EACJ9C,IAAK2Y,EAAiBpW,OAAS,EAAIyU,EAAW,KAC9Ca,gBAAe,E,CAIvB,IAAMiB,EAAW,CACbvB,OAAmB,OAAXA,EAAkB,OAASA,EACnCc,OAAQ,KACRR,iBAAiB,GAGjBK,EAAO,IAAIa,EAAYjY,KAAMA,KAAKgW,KAMtC,OAJAE,EAAWvX,OAAOuZ,OAAO,CAAC,EAAGF,EAAU9B,GAEvBkB,EAAKnB,YAAYC,EAGrC,EAeA,YAAAiC,SAAA,SAASjZ,EAAa8C,EAAqCyU,GACvD,IAAM2B,EAAY,CAAC,EACbC,EAAMrY,KAAKgW,IAAIqC,IACfC,EAAWpZ,EAAI6G,qBAEjBsS,aAAG,EAAHA,EAAKE,mBAAoBD,EAAStV,SAAS,gBACvCqV,aAAG,EAAHA,EAAKG,SAAUF,EAAStV,SAAS,YAAWoV,EAAUI,MAAQH,EAAIG,QAClEH,aAAG,EAAHA,EAAKI,UAAWH,EAAStV,SAAS,aAAYoV,EAAUK,OAASJ,EAAII,SAE7EvZ,EAAMc,KAAKd,IAAIA,EAAKkZ,GACpB3B,EAASA,IAAWzU,EAAO,OAAS,OACpC,IAAMmU,EAAUnW,KAAKmW,QAAQM,GAE7B,GAAIzU,EAEA,IACIkK,KAAKG,MAAMrK,E,CACb,SACEA,EAAOkK,KAAKC,UAAUnK,E,CAI9B,OAAO0W,MAAMxZ,EAAK,EAAF,CACZiX,QAAO,EACPM,OAAM,GACFzU,GAAQ,CAAEpC,KAAMoC,IAE5B,EASA,YAAA0W,MAAA,SAAMxZ,EAAa8C,EAAqCyU,GAEpD,OADAvM,QAAQC,KAAK,4IACNnK,KAAK2Y,UAAUzZ,EAAK8C,EAAMyU,EACrC,EASA,YAAAkC,UAAA,SAAmBzZ,EAAa8C,EAAqCyU,GACjE,OAAOzW,KAAKmY,SAASjZ,EAAK8C,EAAMyU,GAAQmC,MAAK,SAAAC,GAAY,OAAAA,EAASC,MAAT,GAC7D,EAMA,YAAA3C,QAAA,SAAQM,GACJ,IAAMN,EAAUnW,KAAKgW,IAAIoB,KAAKjB,QAAQnW,KAAKgW,IAAI5N,GAAIpI,KAAKgW,IAAI+C,KAAM/Y,KAAKgW,IAAIqC,KAC3E,OAAK5B,GAKI,QADDA,EAAOuC,oBAEP7C,EAAgB,OAAI,oBAGpBA,EAAgB,OAAI,mBACpBA,EAAQ,gBAAkB,oBAE3BA,GAXIA,CAYf,EAaA,YAAAjX,IAAA,SAAIA,EAAaqY,GACb,GAAW,MAAPrY,EAAa,OAAOA,EAExB,IAAM+Z,EAAe/Z,EAAIkD,MAAM,KAAK,GAAGA,MAAM,KAIvC8W,GADNha,EAAM+Z,EAAa,IACE7W,MAAM,KAC3B,GAAwB,IAApB8W,EAASzX,QAAgByX,EAAS,IAAMA,EAAS,GAAI,CACrD,IAAMhC,EAAagC,EAAS,GACtB/B,EAAS+B,EAAS,GACxBha,EAAM,uBAAgBgY,EAAU,YAAIC,E,CAYxC,MADM,CATNjY,EAAMc,KAAKgW,IAAIoB,KAAKC,OAAOnY,GAG3BqY,EAAS,UAAG0B,EAAa,IAAM,GAAE,YAAI1B,EAA2B,iBAAXA,EAAsBA,EAAS1J,EAAKf,MAAMyK,GAAU,IACpGnV,MAAM,KACNb,QAAO,SAAAnC,GAAK,QAAEA,CAAF,IACZsC,KAAK,MAGUH,QAAO,SAAAnC,GAAK,QAAEA,CAAF,IAAKsC,KAAK,IAE9C,EACJ,EAzNA,GCLA,EAOE,SAESsU,EAEA/E,GAFA,KAAA+E,IAAAA,EAEA,KAAA/E,SAAAA,CACT,E,0dCVF,cAQE,WACE+E,EACSjR,EACToU,GAHF,MAKE,YAAMnD,EAAK,SAAO,KAKlB,GARS,EAAAjR,KAAAA,EAIT,EAAKqU,OAASpD,EAAIoD,OAGlBD,GAAe,SACH,MAARpU,EAAc,MAAMoU,EAAc,WACtC,IAA0B,GAAtBpU,EAAK2C,QAAQ,OAAqC,GAAvB3C,EAAK2C,QAAQ,MAAa,MAAMyR,EAAc,4BAC7E,IAA0B,GAAtBpU,EAAK2C,QAAQ,KAAY,MAAMyR,EAAc,wB,QACnD,CAEF,OAvBiD,OAuBjD,EAvBA,CAAiDE,G,0dCJ3CC,EAAiB,gBAMvB,eAOE,WAAYtD,EAAmBjR,GAA/B,MACE,YAAMiR,EAAKjR,EAAM,gBAAc,K,OADF,EAAAA,KAAAA,E,CAE/B,CAuFF,OAhG0C,EAAAwU,EAAA,GAcxC,YAAAC,OAAA,WACE,OAAOxZ,KAAKyZ,aACd,EAKA,YAAAC,OAAA,SAAOtR,GACL,OAAOpI,KAAKyZ,YAAerR,EAC7B,EAKQ,YAAAuR,QAAR,SAAgBC,EAAmCC,GACjD,KAAM,+CACR,EAUQ,YAAAJ,YAAR,SAA2BrR,EAAsBmP,GAC/C,IAAIuC,EAAO,UAAGR,EAAc,YAAItZ,KAAK+E,MAErC,OADIqD,GAAqB,iBAAPA,GAAiC,iBAAPA,IAAkB0R,GAAQ,IAAM1R,GACrEpI,KAAKoZ,OAAOT,UAAU3Y,KAAKoZ,OAAOla,IAAI4a,EAAMvC,GACrD,EAeA,YAAAwC,OAAA,SAAOC,EAAiCC,GACtC,IAAMH,EAAO,UAAGR,EAAc,YAAItZ,KAAK+E,MACvC,GAAmB,MAAfkV,EAAqB,CACK,iBAAlB,IACRA,EAAc,CAAEC,OAAQrV,EAAoBsV,OAAQC,KAAMH,IAC5D,IACED,EAAOK,IAAMJ,CACL,CAAR,SAAQ,C,CAEZ,OAAOja,KAAKoZ,OAAOT,UAAU3Y,KAAKoZ,OAAOla,IAAI4a,GAAOE,EAAQ,OAC9D,EAKA,YAAAM,OAAA,SAAOlS,EAAY4R,GACjB,IAAMF,EAAO,UAAGR,EAAc,YAAItZ,KAAK+E,KAAI,YAAIqD,GAC/C,OAAOpI,KAAKoZ,OAAOT,UAAU3Y,KAAKoZ,OAAOla,IAAI4a,GAAOE,EAAQ,OAC9D,EAeA,YAAArC,OAAA,SAAO4C,GACL,IAAMT,EAAO,UAAGR,EAAc,YAAItZ,KAAK+E,KAAI,YAAIwV,GAC/C,OAAOva,KAAKoZ,OAAOjB,SAASnY,KAAKoZ,OAAOla,IAAI4a,QAAO/a,EAAW,UAAU6Z,MAAK,SAAAC,GAAY,cAC3F,EACF,EAhGA,CAA0C2B,G,2dCJ1C,eAME,WAAYxE,EAAmBjR,GAA/B,MACE,YAAMiR,EAAKjR,EAAM,UAAQ,K,OADI,EAAAA,KAAAA,E,CAE/B,CAyFF,OAjG8B,QAmB5B,YAAAyU,OAAA,SAAoBiB,EAA8CzY,GAChE,OAAOhC,KAAKyZ,iBAAe1a,EAAW0b,EAAWzY,EACnD,EAaA,YAAA0Y,UAAA,SAAuBC,EAAgBF,EAA8CzY,GACnF,IAA6B,IAAzB2Y,EAAOjT,QAAQ,KAAa,KAAM,sEACtC,OAAO1H,KAAKyZ,YAAqBkB,EAAQF,EAAWzY,GAAM4W,MAAK,SAAC5W,GAC9D,OAAY,MAARA,GAAiBA,EAAK6U,eAAe8D,GACjC3Y,EAAa2Y,GADoC,EAE3D,GACF,EAyCA,YAAAC,WAAA,SAAwBC,EAAiBJ,EAA8CzY,GACrF,OAAOhC,KAAKyZ,YAAeoB,EAASJ,EAAWzY,EACjD,EASQ,YAAAyX,YAAR,SAAiCoB,EAAkBtD,EAAuCvV,GACxF,IAAI8X,EAAO,kBAAoB9Z,KAAK+E,KAEpC,OADI8V,GAA+B,iBAAZA,IAAuBf,GAAQ,WAAae,GAC5D7a,KAAKoZ,OAAOT,UAAU3Y,KAAKoZ,OAAOla,IAAI4a,EAAMvC,GAASvV,EAC9D,EACF,EAjGA,CAA8BwY,G,2dCG9B,eAGE,WAAYxE,G,OACV,YAAMA,EAAK,QAAM,IACnB,CAWF,OAhB4B,QAa1B,YAAA5O,IAAA,SAAO0T,GACL,KAAM,yFACR,EACF,EAhBA,CAA4BzB,G,8qBCI5B,eAyBE,WAESjR,EAKA2Q,EAKAgC,EAKSpI,EAKT0F,GAtBT,MAwBE,YAAM,cAAe,KAAM,kBAAoBjQ,EAAK,IAAM2Q,IAAK,KAtBxD,EAAA3Q,GAAAA,EAKA,EAAA2Q,KAAAA,EAKA,EAAAgC,SAAAA,EAKS,EAAApI,KAAAA,EAKT,EAAA0F,IAAAA,EA7CD,EAAA2C,gBAAiB,EAezB,EAAAC,OAAoB,KAKpB,EAAA/T,IAAc,IAAIgU,GAAO,GA8BvB,IACMvI,EAAKwI,SAASxI,EAAKwI,QAAQC,aAAa,E,CAC5C,MAAOrS,GACPmB,QAAQwB,MAAM,8CAA+C3C,E,CAI/D,IAgL2B/G,EAhLrBqZ,EAAa,EAAKC,QAAQ3I,G,OAChC,EAAKb,IAAMuJ,EAAWvJ,IACtB,EAAKsF,KAAOiE,EAAWjE,KACvB,EAAKgC,OAAS,IAAImC,EAAU,IA6KDvZ,EA1KL,EAAKA,MA2KVwZ,KAChBxZ,EAAawZ,GAAK,WAAQ,MAAMC,EAAQ,EACzC9c,OAAOC,eAAeoD,EAAM,YAAa,CACrC8C,IAAK,WAAa,MAAM2W,EAAQ,KA3KhC9I,EAAK+I,gBAAkB,EAAKT,QAE5B,EAAKA,OAAOU,SAAW,EAAKV,OAAOU,QAAQC,KAAO,EAAKX,OAAOU,QAAQC,IAAIC,iBAC9ElJ,EAAK+I,eAAe,EAAKT,Q,CAC3B,CAyJF,OAjOyB,QAoFf,YAAAK,QAAR,SAAgB3I,G,QACRmJ,EAA4C,QAAhC,EAAmB,QAApB,EAAC9b,KAAKib,cAAc,eAAEc,mBAAW,eAAEC,MACpD,IAAKF,EAAU,MAAO,CAAEhK,IAAKa,EAAKb,IAAKsF,KAAMzE,EAAKyE,MAClD,IAAM6E,EAAWtJ,EAAKb,IAAYqE,QAC5B+F,EAAQJ,EAAW,SAAKG,GAAYH,GAAaG,EACjDnK,EAAM,IAAIqK,EAEhB,OADArK,EAAIqB,KAAK+I,EAAO,gBACT,CAAEpK,IAAG,EAAEsF,KAAM,IAAIgF,GAActK,GACxC,EAkBc,EAAAuK,GAAd,SAAiBC,GACf,OAAQA,EAActB,cACxB,EAOA,YAAAhZ,KAAA,SAAkBwU,GAChB,OAAO,IAAI+C,GAAWvZ,KAAMwW,EAC9B,EAMA,YAAA+F,MAAA,SAAMA,GACJ,OAAO,IAAIC,GAASxc,KAAMuc,EAC5B,EAWA,YAAAE,kBAAA,SAAkBC,GAChB,IAAMvU,EAAQuU,EAAYta,MAAM,KAAK,GAAGua,cAGxC,OAAoC,IAAhCtW,EAAYqB,QAAQS,GACjBuU,EAEA1c,KAAKoX,KAAK9E,QAAQnM,GAAagC,EAAQ,IAAMuU,EAAYxY,UAAUwY,EAAYhV,QAAQ,KAAO,EACvG,EASA,YAAAuP,sBAAA,SAAsBhV,GAKpB,GAJI5C,OAAO6K,SACXA,QAAQvD,IAAI1E,GAGU,MAAlBA,EAAO2a,QACT3a,EAAO4a,QACP5a,EAAO4a,OAAO3d,KACd+C,EAAO4a,OAAO3d,IAAIwI,QAAQ,gBAAkB,EAG1C,OAFIrI,OAAO6K,SACXA,QAAQvD,IAAI,wEACL1E,EAKX,GAAsB,IAAlBA,EAAO2a,SAAmC,IAAnB3a,EAAO2a,OAClC,OAAO3a,EAGP,IAAI6a,EAAW,8CAAgD7a,EAAO2a,OAAS,KACzEG,EAAU9a,EAAO+a,aACrB9Q,KAAKG,MAAMpK,EAAO+a,cAClB/a,EAAOD,KACT,GAAI+a,EAAS,CACX,IAAMzT,EAAMyT,EAAQE,QAChB3T,IAAKwT,GAAY,cAAgBxT,GACrC,IAAM4T,EAASH,EAAQI,eAAiBJ,EAAQK,iBAC5CF,IAAQJ,GAAY,aAAeI,GAGnCA,GAAoD,IAA1CA,EAAOxV,QAAQ,yBACzBwV,EAAOxV,QAAQ,yBAA2B,EAC9CoV,GAAY,wEACHI,EAAOxV,QAAQ,6BAA+B,IACvDoV,GAAY,+EAERxT,GAAqC,IAA9BA,EAAI5B,QAAQ,eAAuB4B,EAAI5B,QAAQ,aAAe,IACzEoV,GAEA,iM,CAOF,OAHAA,GAAY,qHACZjX,MAAMiX,GAEC7a,CACT,EAMA,YAAAob,WAAA,W,MACE,OAAsC,KAApB,QAAX,EAAArd,KAAKib,cAAM,eAAEqC,cACtB,EAQA,YAAAC,SAAA,SAASC,GAEP,OADIA,UAAmBxd,KAAK2S,KAAK8K,aAAazd,KAAK+a,UAC5C/a,KAAK2S,KAAK3S,KAAKoI,GAAIpI,KAAK+Y,KACjC,EACF,EAjOA,CAAyBxH,GAoPnBkK,GAAU,sPC9PhB,2BAuFA,QA7BS,EAAAY,GAAP,SAAUrQ,GACR,IAAM0R,EAAkB1R,EACxB,YAAkCjN,IAA3B2e,EAAgBjF,aAAkD1Z,IAA1B2e,EAAgBlF,KACjE,EAOO,EAAAmF,sBAAP,SAA6BtF,GAE3B,GAAIA,EAAII,QAAUJ,EAAIG,MAAO,OAAOH,EAEpC,IAAM/O,EAAM,8FAEZ,MADAY,QAAQwB,MAAMpC,EAAK+O,GACb/O,CACR,EAQO,EAAAsU,WAAP,SAAkBvF,GAEhB,OADArY,KAAK2d,sBAAsBtF,GACpB,UAAGA,EAAII,OAAM,YAAIJ,EAAIG,MAAK,YAAIH,EAAIwF,OAAM,YAAIxF,EAAIyF,SAAQ,YAAIzF,EAAI0F,QACzE,EACF,EAvFA,GCFMC,GAAa,IAAIC,EACjBC,IAAyC,IAAzBF,GAAWlY,UAGjC,GAWI,WACI9F,KAAKmT,KAAO+K,GACZle,KAAKme,QAAUH,GAAWlZ,IAAI,SAClC,E,2dCZJ,eAEI,WAAoBgN,GAApB,MACI,YAAM,aAAW,K,OADD,EAAAA,IAAAA,E,CAEpB,CAuIJ,OA3ImC,QA+C/B,YAAAqE,QAAA,SAAQ/N,EAAa2Q,EAAeV,G,UAC1BrG,EAAKhS,KAAK2G,IAAIgD,KAAK,UAAW,UAAGvB,EAAE,aAAK2Q,IACxCqF,EAAmC,CAAC,EACpCP,GAAqB,QAAX,EAAAxF,aAAG,EAAHA,EAAKwF,cAAM,QAAI7d,KAAK8R,IAAIW,QAAQ/I,WAYhD,OAXAtB,EAAkB,QAAb,EAAAiQ,aAAG,EAAHA,EAAKyF,gBAAQ,QAAI1V,EACtB2Q,EAAmB,QAAZ,EAAAV,aAAG,EAAHA,EAAK0F,eAAO,QAAIhF,GAGlBV,aAAG,EAAHA,EAAKgG,2BACFjW,IAAIgW,EAA6B,SAAIhW,EAAGsB,YACxCqP,IAAMqF,EAAmC,eAAIrF,EAAKrP,YACtD0U,EAA0B,MAAIP,EAC9BO,EAA2B,OAAIP,GAEnCO,EAASpe,KAAK8R,IAAIgB,aAAe9S,KAAK8R,IAAIiB,MACnCf,EAAGvG,OAAO2S,EAAU,qBAAchW,EAAE,kBAAU2Q,EAAI,KAC7D,EAOA,YAAAzG,QAAA,SAAQgM,GACJ,IAAMtM,EAAKhS,KAAK2G,IAAIgD,KAAK,WACrB1H,EAASjC,KAAK8R,IAAIc,MAAM1S,Qf3EG,Qe2E8Boe,GAC7D,OAAOtM,EAAGvG,OAAOxJ,EAAQ,mBAAYqc,EAAY,MACrD,EAOC,YAAAC,WAAA,W,MACSvM,EAAKhS,KAAK2G,IAAIgD,KAAK,cAErB1H,EAA0B,QAAjB,EAAAjC,KAAK8R,IAAIe,gBAAQ,QAAI7S,KAAKsS,QAAQnM,GAC/C,OAAO6L,EAAGvG,OAAOxJ,EAAQ,eAC7B,EA0BA,YAAAoV,OAAA,SAAOnY,EAAaof,GAEhB,IAAMtM,EAAKhS,KAAK2G,IAAIgD,KAAK,UAIzB,GAHA3J,KAAK2G,IAAIG,IAAI,sBAAe5H,EAAG,4BAAoBof,EAAY,OAGrD,MAAPpf,EAAa,OAAOA,EAGvB,IAAIA,GAA+B,GAAxBA,EAAIwI,QAAQ,UAA0C,GAAzBxI,EAAIwI,QAAQ,WAAuC,GAArBxI,EAAIwI,QAAQ,MAC9E,OAAOsK,EAAGvG,OAAOvM,GAGrB,IAAIof,IAAqC,GAApBpf,EAAIwI,QAAQ,MAAiC,GAApBxI,EAAIwI,QAAQ,MACtD,OAAOsK,EAAGvG,OAAOvM,GAErB,IAAIsf,EAAUtf,EAAI6G,oBAAoB0Y,WzBxGlB,OyByGdze,KAAKue,aACLve,KAAKsS,QAAQgM,GAAgBnY,GAOnC,MAHgC,KAA7BqY,EAAQA,EAAQ/c,OAAO,KAAW+c,GAAW,KAEnC,KAAVtf,EAAI,KAAWA,EAAMA,EAAIiF,MAAM,IAC3B6N,EAAGvG,OAAO+S,EAAUtf,EAC/B,EACJ,EA3IA,CAAmCqS,GCO5B,SAASmN,GAAStW,EAAoD2Q,G,MACnExY,EAAQlB,OAAOkB,MAErB,GADAA,EAAMoG,IAAIG,IAAI,mBAAqBsB,EAAK,IAAM2Q,IACzCxY,EAAMkd,aACP,MAAM,IAAIrc,MAAM,6BAIpB,GAAIud,GAAItC,GAAGjU,GAAK,OAAOA,EAGvB,IAAIiQ,EAAyB,KAC7B,GAAIuG,GAAkBvC,GAAGjU,GAGrBA,EAAiB,QAAZ,GAFLiQ,EAAMuG,GAAkBjB,sBAAsBvV,IAErC0V,gBAAQ,QAAiB,IAAbzF,EAAII,OAAkBJ,EAAIG,WAC5C,GAAIpQ,aAAcyW,aAAezW,EAAG7C,QA1BvB,4DA0BoD6C,EAAG0W,QAzBvD,0BAyBiF,CAEjG,IAAMC,EAAc,cACdC,EAAmB5W,EAAG+M,aAAa4J,GACrCE,EAAkB/S,KAAKG,MAAM2S,GACjC,GAAuB,MAAnBC,EAAyB,MAAM,IAAI7d,MAAM,4CAAqC2d,EAAW,sBAC7F,OAAOL,GAASO,E,CAGpB,GAAkB,iBAAP7W,EAAiB,CAExB,IAAM8W,EAmBd,SAAkBC,GACd,IAAMC,EAAeD,EAAWL,QAAQ,qBACxC,IAAKM,EAAc,OAAO,KAC1B,IAAMC,EAAMD,EAAajK,aAAa,oBAChC4D,EAAOqG,EAAajK,aAAa,cACvC,OAAKkK,GAAQtG,EACN,CAACnK,SAASyQ,EAAK,IAAKzQ,SAASmK,EAAM,KADhB,IAE9B,CA1BwBuG,CAASlX,GACzBA,EAAK8W,EAAQ,GACbnG,EAAOmG,EAAQ,E,CAIdnG,IAAMA,EAAO3Q,GAClB,IAAM2S,EAAkB,MAAP1C,EAAcuG,GAAkBhB,WAAWvF,GAAOjQ,EAAK,IAAM2Q,EAG9E,OAAIxY,EAAMkd,aAAa1C,IACnBxa,EAAMoG,IAAIG,IAAI,oBAAsBiU,GAC7Bxa,EAAMkd,aAAa1C,IAGtBxa,EAAMkd,aAAa1C,GACrB,IAAI4D,GAAIvW,EAAI2Q,EAAMgC,EAAUxa,EAAO8X,EAC7C,CCpDKhZ,OAAOkB,QACVlB,OAAOkB,MCKF,WACH,IA+CMoG,EACFmL,EAhDEyN,GA+CA5Y,EAAM,IAAII,EAAI,QAAS,KAAM,YAC/B+K,EAAM,IAAIqK,EACP,CACHqD,QAAS,CACLC,QAASrZ,EACTsZ,YAAa,6DAEjB5N,IAAKA,EACLsF,KAAM,IAAIgF,GAActK,GACxBnL,IAAKA,IAtDHqX,EAAa,IAAIC,EACjBpc,EAAQ,IAAI8d,GACZC,EAAQ,IAAIC,EAGZC,EAA4B,CAC9Bhb,IAAK4Z,GACLjB,aAAc,CAAC,EACfsC,KAAM,CAAC,EAIPvf,WAAY,IAAIwf,EAChBvF,UAAWuD,EAIXnc,MAAK,EACL+d,MAAOA,EACPK,SAAU,SAAChP,EAAkBxG,EAAgBD,EAAgB/I,GAAoB,OAAA+P,EAAA,KAAcP,EAAUxG,EAAOD,EAAO/I,EAAtC,EACjFgQ,UAAWD,GAeT0O,EAASvhB,OAAOuZ,OAAOwG,GAAUoB,EAAOP,GAK9C,OAJAW,EAAOvZ,IAAIG,IAAI,wBAEfoD,QAAQvD,IAAI,gBAASP,EAAU,8DAExB8Z,CACX,CDjDiBC,I","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/make namespace object","webpack:///./src/tools/total-popup.ts","webpack:///./src/tools/obj2url.ts","webpack:///./src/tools/url-params.ts","webpack:///./src/data/target-types.ts","webpack:///./src/Stats.ts","webpack:///../core/constants/index.ts","webpack:///../core/logging/log-entry-options.ts","webpack:///../core/logging/has-log.ts","webpack:///../inpage/src/constants/debug.ts","webpack:///../core/logging/Log.ts","webpack:///../core/logging/log-call.ts","webpack:///../core/plumbing/obj.ts","webpack:///../core/plumbing/no-jquery.ts","webpack:///../core/logging/entry.ts","webpack:///../core/logging/insights.ts","webpack:///./src/constants/index.ts","webpack:///./src/environment/env-loader-dnn-sf.ts","webpack:///./src/environment/env-loader-dynamic.ts","webpack:///./src/environment/env-loader-meta.ts","webpack:///./src/environment/sxc-global-environment.ts","webpack:///./src/sxc/web-api/ajax-promise.ts","webpack:///./src/sxc/web-api/sxc-web-api.ts","webpack:///./src/sxc/sxc-part.ts","webpack:///./src/sxc/data/sxc-data-service-base.ts","webpack:///./src/sxc/data/sxc-data.ts","webpack:///./src/sxc/data/sxc-query.ts","webpack:///./src/sxc/sxc-cms.ts","webpack:///./src/sxc/sxc.ts","webpack:///./src/sxc-global/context-identifier.ts","webpack:///./src/sxc-global/sxc-global-debug.ts","webpack:///./src/sxc-global/sxc-global-http.ts","webpack:///./src/sxc-global/sxc-global-get.ts","webpack:///./src/2sxc.api.ts","webpack:///./src/sxc-global/sxc-global-bootstrap.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/** @internal */\r\nexport class TotalPopup {\r\n    frame: any = undefined;\r\n    callback: any = undefined;\r\n\r\n    open(url: string, callback: () => void): void {\r\n        // count parents to see how high the z-index needs to be\r\n        let z = 10000010; // Needs at least 10000000 to be on top of the DNN9 bar\r\n        let p = window as Window;\r\n        while (p !== window.top && z < 10000100) {\r\n            z++;\r\n            p = p.parent;\r\n        }\r\n\r\n        const wrapper = document.createElement('div');\r\n        // 2023-07-07 2dm 2sxc 16.02 - added `color-scheme: auto;` to fix dark mode\r\n        // Otherwise the iframe is not transparent in dark mode\r\n        // https://fvsch.com/transparent-iframes\r\n        wrapper.setAttribute('style', ' top: 0;left: 0;width: 100%;height: 100%; color-scheme: auto; position:fixed; z-index:' + z);\r\n        document.body.appendChild(wrapper);\r\n\r\n        const ifrm = document.createElement('iframe');\r\n        ifrm.setAttribute('allowtransparency', 'true');\r\n        ifrm.setAttribute('style', 'top: 0;left: 0;width: 100%;height: 100%;');\r\n        ifrm.setAttribute('src', url);\r\n        wrapper.appendChild(ifrm);\r\n        document.body.className += ' sxc-popup-open';\r\n        this.frame = ifrm;\r\n        this.callback = callback;\r\n    }\r\n\r\n    close(): void {\r\n        if (this.frame) {\r\n            document.body.className = document.body.className.replace('sxc-popup-open', '');\r\n            const frm = this.frame;\r\n            frm.parentNode.parentNode.removeChild(frm.parentNode);\r\n            this.callback();\r\n        }\r\n    }\r\n\r\n    closeThis(): void {\r\n        (window.parent as any).$2sxc.totalPopup.close();\r\n    }\r\n\r\n}\r\n","\r\n// Test code\r\n// window.beta.toUrl({ hello: 7, name: \"daniel\", sub: { subname: \"mettler\", subage: 27, subsub: { and: \"like\"} }, final: 42, null: null}, \"test\")\r\n\r\nimport { TypeValue } from '../../../core';\r\n\r\n// $2sxc.urlParams.toObj($2sxc.urlParams.toUrl({ v1: 1, v2: 2, v3: { v31: 0, v32: { v321: \"daniel\" } }, v4: 4}));\r\n\r\nconst equals = '=';\r\nconst dot = '.';\r\nconst separator = '~';\r\nconst sepEsc = '~~';\r\nconst stringPrefix = separator;\r\nconst space = ' ';\r\nconst spaceMarker = '_';\r\nconst spaceMarkerEsc = '~_';\r\nconst restoreSep = '#'; // can never exist unencoded in the fragment\r\nconst innerStringPrefix = '¶';\r\nconst bools = ['true', 'false'];\r\nconst specialValues = bools.concat(['null']);\r\n\r\n/**\r\n * Custom converter to pass objects into a URL and back.\r\n * @internal\r\n */\r\nexport class ToolUrlObjects {\r\n\r\n\r\n  toUrl(obj: any, encode: boolean = true): string {\r\n    if (!obj) return '';\r\n    if (Array.isArray(obj)) throw new Error(\"only objects can be toUrl(), arrays don't work. Put the array in an object property.\");\r\n    var result = this\r\n      .toUrlRecursive(obj, null, 0, encode)\r\n      .filter(x => x != null && x.length > 0);\r\n    const urlParam = result.join(separator);\r\n    return urlParam ? separator + urlParam : '';\r\n  }\r\n\r\n  toObj(value: string, decode: boolean = true, debug: boolean = false): unknown {\r\n    const parts = this.back(value, decode);\r\n    if (debug) return parts;\r\n    return unflatStringsToObj(parts);\r\n  }\r\n\r\n\r\n\r\n\r\n  /**\r\n   * Converts an object to a compact notation with dots.\r\n   * Recursive, as it needs to also handle sub-objects\r\n   * @param obj\r\n   * @param key\r\n   * @param depth\r\n   * @returns\r\n   */\r\n  private toUrlRecursive(obj: any, key: string, depth: number, encode: boolean): string[] {\r\n    if (obj == null) return [];\r\n    const prefix = depth > 0 ? dot.repeat(depth) : '';\r\n    if (typeof obj !== 'object')\r\n      return [`${prefix}${key}=${encode ? customEncode(obj) : obj}`];\r\n\r\n    const subItem: string[][] = Object.keys(obj)\r\n      .map(key => this.toUrlRecursive(obj[key], key, depth + 1, encode));\r\n    if (subItem.length === 0) return [];\r\n\r\n    var all = subItem.reduce(function (acc, val) {\r\n      return acc.concat(Array.isArray(val) ? arrayFlat(val, 2) : val);\r\n    }, []);\r\n\r\n    // Add header entry so the object structure is complete\r\n    const header = depth > 0 ? [`${prefix}${key}`, null] : [];\r\n    return header.concat(all);\r\n  }\r\n\r\n  public back(val: string, decode: boolean): Record<string, any> {\r\n    if (!val || val.length === 0) return [];\r\n\r\n    const parts = val\r\n      .replaceAll(equals + stringPrefix, equals + innerStringPrefix) // prot. string prefix\r\n      .replaceAll(sepEsc, restoreSep)                  // Protect escaped separators\r\n      .split(separator + dot)\r\n      .map(v => v?.replaceAll(restoreSep, separator))  // Restore escaped separators\r\n      .filter(x => x.length > 0);\r\n\r\n    let result: Record<string, TypeValue> = {};\r\n    let stack: string[] = [];\r\n\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const pair = parts[i].split(equals);\r\n      const key = pair[0];\r\n\r\n      // count leading dots\r\n      const dotCount = key.match(/^\\.*/g)[0].length;\r\n\r\n      // Reset stack?\r\n      if (dotCount === 0) {\r\n        stack = key.split(dot); // could have multiple components\r\n      } else {\r\n        if (dotCount > stack.length)\r\n          throw new Error(`Invalid key: ${key} when current stack is ${stack.join(dot)}`);\r\n        const subKey = key.substring(dotCount);\r\n        stack = stack.slice(0, dotCount);\r\n        stack.push(subKey);\r\n        pair[0] = stack.join(dot);\r\n      }\r\n      result[pair[0]] = pair.length > 1\r\n        ? (decode ? restoreValue(decodeURIComponent(pair[1])) : pair[1])\r\n        : null;\r\n    }\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\n\r\n// Recursively reduce sub-arrays to the specified depth\r\nfunction arrayFlat(arr: any[], depth: number): any[] {\r\n\r\n  // If depth is 0, return the array as-is\r\n  if (depth < 1) return arr.slice();\r\n\r\n  // Otherwise, concatenate into the parent array\r\n  return arr.reduce(function (acc, val) {\r\n    return acc.concat(Array.isArray(val) ? arrayFlat(val, depth - 1) : val);\r\n  }, []);\r\n};\r\n\r\n// https://stackoverflow.com/questions/42694980/how-to-unflatten-a-javascript-object-in-a-daisy-chain-dot-notation-into-an-objec\r\nfunction unflatStringsToObj(data: Record<string, any>): any {\r\n  var result: any = {};\r\n  for (var rec in data) {\r\n    var keys = rec.split(dot);\r\n    keys.reduce(function(list, key, j) {\r\n      return list[key] || (list[key] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[rec] : {}) : [])\r\n    }, result)\r\n  }\r\n  return result\r\n}\r\n\r\n\r\n\r\n// https://stackoverflow.com/questions/175739/how-can-i-check-if-a-string-is-a-valid-number\r\nexport function isNumeric(str: string) {\r\n  if (typeof str != \"string\") return false // we only process strings!\r\n  return !isNaN(str as any) && // use type coercion to parse the _entirety_ of the string (`parseFloat` alone does not do this)...\r\n         !isNaN(parseFloat(str)) // ...and ensure strings of whitespace fail\r\n}\r\n\r\n\r\n/**\r\n * Mark strings which contain values that look like a bool/number\r\n */\r\nfunction customEncode(value: any) {\r\n  var mark = false;\r\n  // Not a string (a bool/number) - leave as is\r\n  if (typeof value === 'string') { // return value;\r\n\r\n    // Escape strings which look like booleans or numbers\r\n    if (specialValues.includes(value) || isNumeric(value as any))\r\n      mark = true;\r\n      // return `${innerStringPrefix}${value}`;\r\n\r\n    // Mark any characters which look like the encoding chars\r\n    value = value\r\n      .replaceAll(separator, sepEsc)\r\n      .replaceAll(spaceMarker, spaceMarkerEsc)\r\n      .replaceAll(' ', spaceMarker);\r\n  }\r\n  const enc = encodeURIComponent(value);\r\n  // marc after encoding\r\n  return (mark ? stringPrefix : '') + enc;\r\n}\r\n\r\n/**\r\n * Restore a value to the real type.\r\n * Explicitly marked strings will not be re-typed\r\n */\r\nfunction restoreValue(value: string) {\r\n  // if explicitly marked string, unwrap and return string\r\n  if (value?.length > 0 && value[0] === innerStringPrefix)\r\n    return restoreString(value.slice(1));\r\n  if (bools.includes(value))\r\n    return value === 'true';\r\n  if (isNumeric(value)) return parseFloat(value);\r\n  return restoreString(value);\r\n}\r\n\r\nfunction restoreString(value: string) {\r\n  const spaceMarkerTemp = String.fromCharCode(1);\r\n  return value\r\n    .replaceAll(spaceMarkerEsc, spaceMarkerTemp)\r\n    .replaceAll(spaceMarker, space)\r\n    .replaceAll(spaceMarkerTemp, spaceMarker);\r\n}\r\n","import { ToolUrlObjects } from './obj2url';\r\n/**\r\n * Helper object to read url params. \r\n * Available on `$2sxc.urlParams`\r\n * @public\r\n */\r\nexport class UrlParams {\r\n    /**\r\n     * Get a param from the url, no matter if it's behind ? or #\r\n     * If not found, will return an empty string `''`\r\n     * @param name\r\n     */\r\n    get(name: string) {\r\n        // warning: this method is duplicated in 2 places - keep them in sync.\r\n        // locations are eav and 2sxc4ng\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const searchRx = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\r\n        let results = searchRx.exec(location.search);\r\n        let strResult: string;\r\n\r\n        if (results === null) {\r\n            const hashRx = new RegExp('[#&]' + name + '=([^&#]*)', 'i');\r\n            results = hashRx.exec(location.hash);\r\n        }\r\n\r\n        // if nothing found, try normal URL because DNN places parameters in /key/value notation\r\n        if (results === null) {\r\n            // Otherwise try parts of the URL\r\n            const matches = location.pathname.match(new RegExp('/' + name + '/([^/]+)', 'i'));\r\n\r\n            // Check if we found anything, if we do find it, we must reverse the\r\n            // results so we get the \"last\" one in case there are multiple hits\r\n            if (matches && matches.length > 1)\r\n                strResult = matches.reverse()[0];\r\n        } else\r\n            strResult = results[1];\r\n\r\n        return strResult == null\r\n            ? ''\r\n            : decodeURIComponent(strResult.replace(/\\+/g, ' '));\r\n    }\r\n\r\n    /**\r\n     * Get a required param from the url, no matter if it's behind ? or #\r\n     * Will throw an error if not found\r\n     * @param name\r\n     */\r\n    require(name: string) {\r\n        const found = this.get(name);\r\n        if (found === '') {\r\n            const message = `Required parameter (${name}) missing from url - cannot continue`;\r\n            alert(message);\r\n            throw message;\r\n        }\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Checks if debug is enabled in the URL\r\n     * @returns \r\n     */\r\n    isDebug(): boolean {\r\n        return this.get('debug')?.toLocaleLowerCase() === 'true'\r\n    }\r\n\r\n    /**\r\n     * Convert an object to be used in a URL.\r\n     * Uses a custom, brief syntax which can change at any time. \r\n     * So to unwrap, always use the toObj method.\r\n     * @param obj \r\n     * @returns \r\n     * @internal\r\n     */\r\n    toUrl(obj: any): string {\r\n      return new ToolUrlObjects().toUrl(obj, true);\r\n    }\r\n\r\n    /**\r\n     * Convert a url which was created by toUrl back to an object.\r\n     * @param url \r\n     * @returns\r\n     * @internal\r\n     */\r\n    toObj(url: string): unknown {\r\n      return new ToolUrlObjects().toObj(url, true);\r\n    }\r\n}\r\n","/**\r\n * Metadata Target Types\r\n * \r\n * These are constants to determine what something is assigned to (e.g. it describes an Entity, a file, etc.)\r\n * \r\n * Use it for the @see MetadataFor objects\r\n * @public\r\n */\r\nexport enum MetadataTargetTypes {\r\n  /** \r\n   * Undefined Type (0) - included for completeness.\r\n   * Not usually used, actually None (1) is the default\r\n   */\r\n  Undefined = 0,\r\n\r\n  /** \r\n   * Things that are not used as Metadata (1). This is the default for most Entities.\r\n   */\r\n  None = 1,\r\n\r\n  /** \r\n   * Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc.\r\n   * Remarks = \r\n   * The key is always a number (int) pointing to the Attribute ID in the DB.\r\n   */\r\n  Attribute = 2,\r\n\r\n  /** \r\n   * App metadata (3). Used to give Apps additional properties. \r\n   * Remarks = \r\n   * The key should always be an int ID of the App.\r\n   */\r\n  App = 3,\r\n\r\n  /** \r\n   * Metadata of entities / data-items (4). \r\n   * This lets us enhance entities with additional information. \r\n   * Remarks = \r\n   * The Key should always be a GUID\r\n   */\r\n  Entity = 4,\r\n\r\n  /** \r\n   * Metadata of a content-type / data-schema (5). Used to give it a description etc. \r\n  */\r\n  ContentType = 5,\r\n\r\n  /** \r\n   * Zone metadata (6) - used to give a Zone additional information. \r\n   * Only used in very special cases, best not use.\r\n   */\r\n  Zone = 6,\r\n\r\n  /** \r\n   * Item / Object of the Platform, like a File or Folder etc. (10)\r\n   * Remarks = \r\n   * * The key is usually a string to further specify what it's describing, like \"file:72\"\r\n   * * The text equivalent is CmsObject\r\n   */\r\n  CmsItem = 10,\r\n\r\n  /** \r\n   * The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11).\r\n   * Remarks = \r\n   * This is not in use as of now, just added for completeness sakes.\r\n   * New in v13\r\n   */\r\n  System = 11,\r\n\r\n  /** \r\n   * A Site - like the current site (12)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Site = 12,\r\n\r\n  /** \r\n   * A Site - like the current site (13)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  SiteVariant = 13,\r\n\r\n  /** \r\n   * A Page - like the current page (14)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Page = 14,\r\n\r\n  /** \r\n   * A Page - like the current page (15) \r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  PageVariant = 15,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (16) \r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Module = 16,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (17)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  ModuleVariant = 17,\r\n\r\n  /** \r\n   * A User - like the admin-user (18)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  User = 18,\r\n\r\n  /** Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. */\r\n  Custom = 90,\r\n\r\n  /** Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom1 = 91,\r\n  /** Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom2 = 92,\r\n  /** Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom3 = 93,\r\n  /** Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom4 = 94,\r\n  /** Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom5 = 95,\r\n  /** Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom6 = 96,\r\n  /** Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom7 = 97,\r\n  /** Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom8 = 98,\r\n  /** Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom9 = 99,\r\n}\r\n","/** @internal */\r\nexport class Stats {\r\n    watchDomChanges = 0;\r\n}\r\n","/**\r\n * Special version which is filled in during compile by the definePlugin\r\n * The real version comes from the main package.json file in this repo\r\n * The sub-projects also use this version\r\n */\r\ndeclare const ROOTVERSION: string;\r\n\r\n/** @internal */\r\nexport const ToSxcName = \"2sxc\";\r\n\r\n/** @internal */\r\nexport const SxcVersion = ROOTVERSION;\r\n\r\n/** @internal */\r\nexport const SxcApiUrlRoot = 'desktopmodules/2sxc/api/';\r\n\r\n/** @internal */\r\nexport const HeaderNames = {\r\n    // 2sxc specific header\r\n    ContentBlockId: \"ContentBlockId\",\r\n\r\n    // headers as defined by DNN\r\n    ModuleId: \"ModuleId\",\r\n    TabId: \"TabId\",\r\n\r\n    // Header which should replace \"TabId\" in the long run\r\n    PageId: \"PageId\",\r\n};\r\n\r\n/** @internal */\r\nexport const ApiUrlRoots = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n/** @internal */\r\nexport const AppApiMarker = 'app';\r\n\r\n// TODO: this should later lead to remapping of old url calls, but it's not in use yet\r\n// note that these were always 'auto' so `app-content` would need to be come `app/auto/content`\r\n/** @internal */\r\nexport const AppApiMap = {\r\n    'app-api': 'app/[name]/api',\r\n    'app-query': 'app/[name]/query',\r\n    'app-content': 'app/[name]/content'\r\n};\r\n\r\n// These are Not-Defined-IDs.\r\n// Because\r\n\r\n/**\r\n * This is a marker for an ID which is not defined\r\n * This is for situations where a 0 or even a negative number\r\n * could be real numbers, so this number is so big, it should never be a real ID\r\n * @internal\r\n */\r\nexport const NumberNotDefinedHuge = 274200000000;\r\n","/** @internal */\r\nexport enum LogEntryOptions {\r\n    log = 'log',\r\n    warn = 'warn',\r\n    error = 'error',\r\n    throw = 'throw',\r\n}\r\n","import { Log } from '.';\r\n\r\n/**\r\n * Any object that has an own log object\r\n * @export\r\n * @interface HasLog\r\n * @public\r\n */\r\nexport abstract class HasLog {\r\n  /**\r\n   * The logger for this object\r\n   * @internal usually not relevant and could make docs confusing\r\n   */\r\n  log: Log;\r\n\r\n  /**\r\n   * initialize the logger\r\n   * ideally it has a parent-logger to attach to\r\n   * @param logName name to show in the logger\r\n   * @param parentLog parent-logger to attach to\r\n   * @param initialMessage optional start-message to log\r\n   * @internal\r\n   */\r\n  constructor(\r\n    logName: string,\r\n    parentLog?: Log,\r\n    initialMessage?: string,\r\n  ) {\r\n    this.initLogInternal(logName, parentLog, initialMessage);\r\n  }\r\n\r\n  /** @internal */\r\n  public initLog = (name: string, parentLog?: Log, initialMessage?: string)\r\n    : void => this.initLogInternal(name, parentLog, initialMessage)\r\n\r\n  /** @internal */\r\n  private initLogInternal(name: string, parentLog?: Log, initialMessage?: string): void {\r\n    // standard & most common case: just create new log\r\n    if (this.log == null) {\r\n      this.log = new Log(name, parentLog, initialMessage);\r\n      return;\r\n    }\r\n\r\n    // late-init case, where the log was already created - just reconfig keeping what was in it\r\n    this.log.rename(name);\r\n    this.log.linkLog(parentLog);\r\n    if (initialMessage != null)\r\n      this.log.add(initialMessage);\r\n  }\r\n\r\n}\r\n","// Log Names must be added here, and not in the places where they are used\r\n// Reason is that otherwise we get circular dependencies\r\n\r\nexport const QuickEClipboardLogId = \"Q-E.Clpbrd\";\r\n\r\n/**\r\n * Special variable which is filled in during compile by the definePlugin\r\n */\r\ndeclare const IsDevBuild: boolean;\r\n\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const Debug = {\r\n  isDevBuild: IsDevBuild,\r\n  cms: {\r\n    autoDump: false,\r\n    run: true,\r\n  },\r\n\r\n  // Full debug on specific parts of the code\r\n  // should always be empty in production\r\n  parts: {\r\n    commandInfo: false,\r\n    ToolbarConfigLoaderV10: false,\r\n    RuleManager: false,\r\n    CommandTippy: false,\r\n    [QuickEClipboardLogId]: true,\r\n  }\r\n};\r\n","import { LogEntry, LogCall } from '.';\r\nimport { Debug } from '../../inpage/src/constants/debug';\r\n\r\nconst keepData = location.search.indexOf(\"debug=true\") !== -1;\r\n\r\nconst maxScopeLen = 3;\r\nconst maxNameLen = 6;\r\nconst liveDump = false;\r\nconst maxEntriesReached = 'Maximum amount of entries added to log, will stop adding more';\r\n\r\n/**\r\n * A log object which will collect log entries for another object\r\n * @export\r\n * @interface Log\r\n * @public\r\n */\r\nexport class Log {\r\n\r\n  /**\r\n   * List of all entries added to this log\r\n   */\r\n  entries = new Array<LogEntry>();\r\n\r\n  /** @internal */\r\n  private depth = 0;\r\n\r\n  /** @internal */\r\n  private callDepths: string[] = [];\r\n  \r\n  /** @internal */\r\n  startTime: number;\r\n\r\n  /**\r\n   * Maximum amount of entries to add - to prevent memory hogging\r\n   */\r\n  maxEntries = 1000;\r\n\r\n  /**\r\n   * Create a logger and optionally attach it to a parent logger\r\n   * @param string name this logger should use\r\n   * @param Log optional parrent logger to attach to\r\n   * @param string optional initial message to log\r\n   * @internal\r\n   */\r\n  constructor(name: string, parent?: Log, initialMessage?: string) {\r\n    this.rename(name);\r\n    this.linkLog(parent);\r\n\r\n    // after linking, check if we have debug settings\r\n    if (Debug.isDevBuild) {\r\n      const shouldDebug = (Debug.parts as Record<string, boolean>)[name];\r\n      if (shouldDebug != null) {\r\n        this.liveDump = shouldDebug;\r\n        this.keepData = shouldDebug;\r\n      }\r\n    }\r\n\r\n    this.startTime = new Date().getTime();\r\n    if (initialMessage != null) this.add(initialMessage);\r\n  }\r\n\r\n  /* if we should live-dump, can be selectively activated */\r\n  /** @internal */\r\n  liveDump: boolean = liveDump;\r\n\r\n  /** @internal */\r\n  _parentHasLiveDump: boolean = false;\r\n\r\n  /** @internal */\r\n  keepData: boolean = keepData;\r\n\r\n  /** @internal */\r\n  _parentHasKeepData: boolean = false;\r\n\r\n  /**\r\n   * Full identifier of this log-object, with full hierarchy\r\n   * @internal\r\n   */\r\n  fullIdentifier = (): string => `${(this.parent ? this.parent.fullIdentifier() : '')}${this.identifier()}`\r\n\r\n  /**\r\n   * give this logger a new name\r\n   * usually happens in constructor, but in rare cases\r\n   * it's called manually\r\n   * @param name\r\n   * @internal\r\n   */\r\n  rename(name: string): void {\r\n    try {\r\n      const dot = name.indexOf('.');\r\n      this.scope = dot > 0 ? name.substr(0, Math.min(dot, maxScopeLen)) + '.' : '';\r\n      const rest = dot > 0 ? name.substr(dot + 1) : name;\r\n      this.name = rest.substr(0, Math.min(rest.length, maxNameLen));\r\n      this.name = this.name.substr(0, Math.min(this.name.length, maxNameLen));\r\n    } catch (e) {\r\n        /* ignore */\r\n    }\r\n  }\r\n\r\n  /**\r\n   * link this log to a parent\r\n   * usually happens in constructor, but in rare cases\r\n   * this must be called manually\r\n   * @internal\r\n   */\r\n  linkLog = (parent: Log): void => {\r\n    this.parent = parent || this.parent; // if new parent isn't defined, don't replace\r\n    if (this.parent) {\r\n      this._parentHasLiveDump = this.parent.liveDump || this.parent._parentHasLiveDump;\r\n      this._parentHasKeepData = this.parent.keepData || this.parent._parentHasKeepData;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a simple message to the log\r\n   * @param message\r\n   *\r\n   * preferred usage is with string parameter:\r\n   * log.add(`description ${ parameter }`);\r\n   *\r\n   * in case that we experience error with normal string parameter, we can use arrow function to enclose parameter like this () => parameter\r\n   * but use it very rarely, because there is certainly a performance implication!\r\n   * log.add(`description ${() => parameter}`);\r\n   */\r\n  add(message: (() => string) | string, data?: unknown): string {\r\n    // check if the log is already too big\r\n    if (this.entries.length > this.maxEntries) \r\n      return this._prepareMessage(message);\r\n\r\n    // if we just reached the max, add special message\r\n    if (this.entries.length === this.maxEntries) \r\n      this._addEntry(this._prepareEntry(maxEntriesReached));\r\n\r\n    const entry = this._prepareEntry(message, data);\r\n    this._addEntry(entry);\r\n    return entry.message;\r\n  }\r\n\r\n  /** @internal */\r\n  addData(message: (() => string) | string, data: unknown): void {\r\n    if (this.logData()) this.add(message, data);\r\n  }\r\n\r\n  /** @internal */\r\n  logData(): boolean {\r\n    return this.keepData || this._parentHasKeepData;\r\n  }\r\n\r\n  /** @internal */\r\n  _prepareEntry(message: (() => string) | string, data?: unknown): LogEntry {\r\n    const msg = this._prepareMessage(message);\r\n    const time = new Date().getTime() - this.startTime;\r\n    const entry = new LogEntry(this, msg, this.depth, time, data);\r\n    return entry;\r\n  }\r\n\r\n  /** @internal */\r\n  private _prepareMessage(message: (() => string) | string): string {\r\n    if (message instanceof Function) {\r\n      try {\r\n        return ((message as () => string)());\r\n      } catch (e) {\r\n        return 'err: message undefined';\r\n      }\r\n    }\r\n    return message.toString();\r\n  }\r\n\r\n  /** @internal */\r\n  call(name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }): LogCall {\r\n    return new LogCall(this, name, callParams, message, data);\r\n  }\r\n\r\n  /** @internal */\r\n  _callDepthAdd(name: string): void {\r\n    this.depth++;\r\n    this.callDepths.push(name);\r\n  }\r\n\r\n  /** @internal */\r\n  _callDepthRemove(name: string): void {\r\n    this.depth--;\r\n    const last = this.callDepths.pop();\r\n    if (last !== name)\r\n      console.warn(`log: call depth reduced by '${name}' but last was '${last}'`);\r\n  }\r\n\r\n  /**\r\n   * helper to create a text-output of the log info\r\n   * @param separator\r\n   * @param start\r\n   * @param end\r\n   * @internal\r\n   */\r\n  dump(one: LogEntry = null, separator = ' - '): void {\r\n    if (one) this.dumpOne(0, one, separator);\r\n    else this.dumpList();\r\n  }\r\n\r\n  /** @internal */\r\n  dumpList(start: number = 0, length?: number) {\r\n    let index = start;\r\n    this.entries\r\n      .slice(start, length ? start + length : undefined)\r\n      .forEach((e) => this.dumpOne(index++, e));\r\n  }\r\n\r\n  /** @internal */\r\n  private dumpOne(index: number, e: LogEntry, separator = ' - '): void {\r\n    const result = (e.result) ? ' =' + e.result : '';\r\n    const line = ('0000' + index).slice(-4) + ' ' + e.source() + separator + '..'.repeat(e.depth) + e.message + result;\r\n    if (e.data) console.log(line, e.data);\r\n    else console.log(line);\r\n  }\r\n\r\n\r\n  /**\r\n   * add an entry-object to this logger\r\n   * this is often called by sub-loggers to add to parent\r\n   * @param entry\r\n   * @internal\r\n   */\r\n  _addEntry(entry: LogEntry): void {\r\n    if (this.liveDump) this.dump(entry);\r\n    this.entries.push(entry);\r\n    if (this.parent) this.parent._addEntry(entry);\r\n  }\r\n\r\n  /**\r\n   * helper to generate a random 2-char ID\r\n   * @param stringLength\r\n   * @internal\r\n   */\r\n  private randomString(stringLength: number): string {\r\n    const chars = '0123456789abcdefghiklmnopqrstuvwxyz';\r\n    let randomstring = '';\r\n    for (let i = 0; i < stringLength; i++) {\r\n      const rnum = Math.floor(Math.random() * chars.length);\r\n      randomstring += chars.substring(rnum, rnum + 1);\r\n    }\r\n    return randomstring;\r\n  }\r\n\r\n  /**\r\n   * parent logger - important if loggers are chained\r\n   * @internal\r\n   */\r\n  private parent: Log;\r\n\r\n  /**\r\n   * scope of this logger - to easily see which ones\r\n   * are about the same topic\r\n   * @internal\r\n   */\r\n  private scope = 'tdo';\r\n\r\n  /**\r\n   * The name of this log, for scenarios where multiple loggers are mixed\r\n   */\r\n  public name = 'unknwn';\r\n\r\n\r\n  /**\r\n   * Unique 2-character ID of this specific log object\r\n   * @internal\r\n   */\r\n  private id = (): string => this.idCache || (this.idCache = this.randomString(2));\r\n\r\n  /** @internal */\r\n  private idCache: string;\r\n\r\n  /**\r\n   * Unique identifier of this log object, with name and ID\r\n   * @internal\r\n   */\r\n  private identifier = (): string => `${this.scope}${this.name}(${this.id()})`;\r\n\r\n}\r\n","import { LogEntry, Log, LogEntryOptions as LEO } from '.';\r\n\r\n/** @internal */\r\nexport class LogCall {\r\n    /** The initial entry created - important for later attaching the final result of the call */\r\n    public initialEntry: LogEntry;\r\n\r\n    constructor(public log: Log, public name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }) {\r\n        this.initialEntry = this.log._prepareEntry(name + '(' + (callParams || '') + ')');\r\n        this.log._callDepthAdd(name);\r\n        this.log._addEntry(this.initialEntry);\r\n        if (typeof message === 'string') this.add(message);\r\n        if (data) for (let key in data) this.data('initial:' + key, data[key]);\r\n    }\r\n\r\n    private lastMessage: string;\r\n\r\n    add(message: string, data?: unknown, behavior?: LEO) {\r\n        this.lastMessage = message;\r\n        this.log.add(message, data);\r\n        if (behavior) this.processExtraBehavior(behavior, message, data);\r\n    }\r\n\r\n    onlyAddIfNew(message: string, behavior?: LEO) {\r\n        if (this.lastMessage !== message)\r\n        this.add(message);\r\n        if (behavior) this.processExtraBehavior(behavior, message, undefined);\r\n    }\r\n\r\n    /** Add data - but only if data logging is enabled */\r\n    data(message: string, data: unknown) {\r\n        this.log.addData(message, data);\r\n    }\r\n\r\n    done(message?: string, behavior?: LEO): void {\r\n        this.return(null, message || '👍', behavior);\r\n    }\r\n\r\n    return<T>(result: T, message?: string, behavior?: LEO) {\r\n        message = message || '👍';\r\n        this.initialEntry.result = message;\r\n        this.log._callDepthRemove(this.name);\r\n\r\n        // if we're in keep-data / debug mode, keep that\r\n        this.initialEntry.data = result;\r\n\r\n        // if we're in live-dump mode, then the entry was already dumped, show again\r\n        if (this.log.liveDump || this.log._parentHasLiveDump)\r\n            this.add(this.name + ' = ' + message, result);\r\n\r\n        if (behavior) this.processExtraBehavior<T>(behavior, message, result);\r\n        return result;\r\n    }\r\n\r\n    /* \r\n     * treat all extra output or errors\r\n     * to allow setting a debug stop point when needed\r\n     * then you can trace the stack-call to see where the error originated\r\n     */\r\n    private processExtraBehavior<T>(behavior: LEO, message: string, data: T) {\r\n        if (behavior === LEO.log) console.log(message, data);\r\n        if (behavior === LEO.warn) console.warn(message, data);\r\n        if (behavior === LEO.error || behavior === LEO.throw) console.error(message, data);\r\n        if (behavior === LEO.throw) throw message;\r\n    }\r\n}\r\n","\r\n/**\r\n * Object manipulator helpers\r\n * @internal\r\n */\r\nexport class Obj {\r\n    /**\r\n     * This is the same as Object.assign, but type-safe.\r\n     * Use it as a replacetment for Object.Assign(this, ... ) in constructors\r\n     */\r\n    static TypeSafeAssign <T, K extends keyof T>(...args: T[]) {\r\n        args.reduce( (result, current) =>\r\n            (Object.keys(current) as K[]).reduce((target, key) => {\r\n                target[key] = current[key];\r\n                return target;\r\n            }, result)\r\n        , args[0]);\r\n    }\r\n\r\n    static DeepClone<T>(original: T, ignoreCircular = false): T {\r\n        if(original === undefined || original === null)\r\n            return original;\r\n        const str = ignoreCircular ? JSON.stringify(original, getCircularReplacer) : JSON.stringify(original);\r\n        if(str === undefined || str === null)\r\n            return original;\r\n        return JSON.parse(str) as T;\r\n    }\r\n}\r\n\r\n\r\nconst getCircularReplacer = () => {\r\n    const seen = new WeakSet();\r\n    return (_:any, value: any) => {\r\n      if (typeof value === \"object\" && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    };\r\n  };\r\n","/** @internal */\r\nexport class NoJQ {\r\n\r\n    /** https://api.jquery.com/ready/ */\r\n    static ready(callback: () => void): void {\r\n        if (document.readyState === 'complete') {\r\n            callback();\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', () => callback(), { once: true });\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/jquery.param/ */\r\n    static param(obj: any): string {\r\n        const param = Object.entries(obj)\r\n            .map(([k, v]) => `${encodeURIComponent(k)}=${v == null ? '' : typeof v === 'string' ? encodeURIComponent(v) : encodeURIComponent(JSON.stringify(v))}`)\r\n            .join('&');\r\n        return param;\r\n    }\r\n\r\n    /** Build DOM elements from string */\r\n    static domFromString(string: string): HTMLElement[] {\r\n        // build elements from string into dummy parent\r\n        const dummyParent = document.createElement('div');\r\n        dummyParent.insertAdjacentHTML('afterbegin', string);\r\n\r\n        // scripts created from string are not executable and have to recreated manually to be executable\r\n        Array.from(dummyParent.querySelectorAll('script')).forEach((brokenScript) => {\r\n            const workingScript = document.createElement('script');\r\n            // copy attributes\r\n            Array.from(brokenScript.attributes).forEach((attribute) => {\r\n                workingScript.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n            });\r\n            // copy inline part\r\n            workingScript.textContent = brokenScript.textContent;\r\n            // replace a non executable script with executable one\r\n            NoJQ.replaceWith(brokenScript, workingScript, false);\r\n        });\r\n\r\n        // remove created elements from dummy parent so it can be garbage collected\r\n        const elements = Array.from(dummyParent.children) as HTMLElement[];\r\n        elements.forEach((element) => {\r\n            dummyParent.removeChild(element);\r\n        });\r\n        return elements;\r\n    }\r\n\r\n    /** https://api.jquery.com/offset/ */\r\n    static offset(element: HTMLElement): { left: number; top: number; } {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const offset: { left: number; top: number; } = {\r\n            top: clientRect.top + window.scrollY,\r\n            left: clientRect.left + window.scrollX,\r\n        };\r\n        return offset;\r\n    }\r\n\r\n    /** https://api.jquery.com/width/ */\r\n    static width(element: HTMLElement): number {\r\n        // jquery width === offsetWidth - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const width = element.offsetWidth === 0\r\n            ? 0\r\n            : element.offsetWidth\r\n            - (parseInt(computedStyle.getPropertyValue('border-left-width'), 10) + parseInt(computedStyle.getPropertyValue('border-right-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-left'), 10) + parseInt(computedStyle.getPropertyValue('padding-right'), 10));\r\n        return width;\r\n    }\r\n\r\n    /** https://api.jquery.com/height/ */\r\n    static height(element: HTMLElement): number {\r\n        // jquery height === offsetHeight - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const height = element.offsetHeight === 0\r\n            ? 0\r\n            : element.offsetHeight\r\n            - (parseInt(computedStyle.getPropertyValue('border-top-width'), 10) + parseInt(computedStyle.getPropertyValue('border-bottom-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-top'), 10) + parseInt(computedStyle.getPropertyValue('padding-bottom'), 10));\r\n        return height;\r\n    }\r\n\r\n\r\n    /** https://api.jquery.com/empty/ */\r\n    static empty(element: HTMLElement): void {\r\n        Array.from(element.childNodes).forEach((n) => {\r\n            element.removeChild(n);\r\n        });\r\n    }\r\n\r\n    /** https://api.jquery.com/replacewith/ */\r\n    static replaceWith(toBeReplaced: HTMLElement, newElement: HTMLElement, runScripts: boolean): void {\r\n        const parent = toBeReplaced.parentElement;\r\n\r\n        // disable scripts before replacing dom\r\n        const scripts = Array.from(newElement.querySelectorAll('script'));\r\n        const restores: ScriptTypeRestore[] = [];\r\n        scripts.forEach((script) => {\r\n            restores.push({ script, type: script.type });\r\n            script.type = null;\r\n        });\r\n\r\n        // replace dom\r\n        parent.replaceChild(newElement, toBeReplaced);\r\n\r\n        // enable scripts\r\n        restores.forEach((restore) => {\r\n            restore.script.type = restore.type;\r\n        });\r\n\r\n        if (runScripts) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/append/ */\r\n    static append(parent: HTMLElement, newElements: HTMLElement[], runScripts: boolean): void {\r\n        const scripts: HTMLScriptElement[] = [];\r\n\r\n        newElements.forEach((element) => {\r\n            if (element.tagName.toLocaleLowerCase() === 'script') {\r\n                const script = element as HTMLScriptElement;\r\n                // disable script before inserting to the dom\r\n                const restoreType = script.type;\r\n                script.type = null;\r\n                // insert to dom\r\n                parent.appendChild(script);\r\n                // enable script\r\n                script.type = restoreType;\r\n                scripts.push(script);\r\n            } else {\r\n                parent.appendChild(element);\r\n            }\r\n        });\r\n\r\n        if (runScripts && scripts.length > 0) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class AssetsLoader {\r\n\r\n    /** Asynchronously runs external and inline scripts in series */\r\n    static runScripts(scripts: HTMLScriptElement[], callback: () => void): void {\r\n        const script = scripts[0];\r\n        const others = scripts.slice(1);\r\n        if (script == null) {\r\n            callback?.();\r\n            return;\r\n        }\r\n\r\n        // create copy\r\n        const copy = document.createElement('script');\r\n        // attributes\r\n        Array.from(script.attributes).forEach((attribute) => {\r\n            copy.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n        });\r\n        // inline part\r\n        copy.textContent = script.textContent;\r\n\r\n        // if src then insert in head, wait for onload or onerror, remove from head and move to next one\r\n        if (copy.type && copy.src) {\r\n            const listener = () => {\r\n                copy.onload = null;\r\n                copy.onerror = null;\r\n                document.head.removeChild(copy);\r\n                this.runScripts(others, callback);\r\n            };\r\n            copy.onload = listener;\r\n            copy.onerror = listener;\r\n            document.head.appendChild(copy);\r\n            return;\r\n        }\r\n\r\n        // if no src then inline, insert to head and remove instantly and move to next one\r\n        setTimeout(() => {\r\n            document.head.appendChild(copy);\r\n            document.head.removeChild(copy);\r\n            this.runScripts(others, callback);\r\n        });\r\n    }\r\n}\r\n\r\ninterface ScriptTypeRestore {\r\n    script: HTMLScriptElement;\r\n    type: string;\r\n}\r\n","import { Obj } from '../plumbing';\r\nimport { Log } from '.';\r\n\r\n/**\r\n * A log entry item\r\n * @export\r\n * @interface LogEntry\r\n * @public\r\n */\r\nexport class LogEntry {\r\n\r\n    /**\r\n     * The result of an operation - treated differently in the output\r\n     * @internal\r\n     */\r\n    public result: string;\r\n\r\n\r\n    /**\r\n     * Data which is logged - if data-logging is enabled\r\n     * @internal\r\n     */\r\n    get data(): unknown {\r\n        return this._data;\r\n    }\r\n    /** @internal */\r\n    set data(data: unknown) {\r\n        if (data === undefined) return;\r\n        if (this.log.logData())\r\n            this._data = Obj.DeepClone(data, true);\r\n    }\r\n    /** @internal */\r\n    private _data?: unknown;\r\n\r\n    /** @internal */\r\n    public source = (): string => this.log.fullIdentifier();\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** @internal */\r\n        private log: Log,\r\n        public message: string,\r\n        /** @internal */\r\n        public depth: number,\r\n        /** A timestamp for this entry to better see sequences of things happening */\r\n        public time: number,\r\n        data?: unknown,\r\n        ) {\r\n            if (data) {\r\n                // #2492 - jQuery isn't used any more in 2sxc\r\n                // if (data instanceof jQuery) {\r\n                //     const jq = data as JQuery;\r\n                //     this.data = {\r\n                //         isJQuery: true,\r\n                //         original: jq,\r\n                //         html: jq.length && jq[0].outerHTML,\r\n                //     };\r\n                // } \r\n                // else\r\n                    this.data = data;\r\n            }\r\n    }\r\n\r\n}\r\n","import { HasLog, Log } from '.';\r\n\r\ndeclare const window: Window;\r\n\r\n/** @public */\r\ntype LogList = Array<{ key: string, log: Log}>;\r\n\r\nconst msgIntro = 'This is the $2sxc JS Insights - see https://go.2sxc.org/insights \\n'\r\n    + 'Add ?debug=true to the url to log more data. \\n'\r\n    + 'Copy/paste code lines below to see details. \\n'\r\n    + '----------------------------------------------------------------------\\n';\r\n\r\n/** @internal */\r\nclass InsightsSingleton extends HasLog {\r\n\r\n    constructor() {\r\n        super('Sys.Insght');\r\n        this.add('system', 'insights', this.log);\r\n        this.log.add(`this log is usually empty, as it's just a helper tool`)\r\n    }\r\n\r\n    history: { [key: string]: InsightsLogSet } = {};\r\n\r\n    add(setName: string, logName: string, log: Log ) {\r\n        if (!(setName in this.history))\r\n            this.history[setName] = new InsightsLogSet(setName);\r\n        this.history[setName].logs.push({key: logName, log: log});\r\n    }\r\n\r\n    show(partName: string, index?: number, start?: number, length?: number): void {\r\n        // if nothing specified, list what to do to see inner parts\r\n        if (!partName) {\r\n            const keys = Object.keys(this.history);\r\n            console.log(`${msgIntro}${keys.length} insights-sections found: \\n` + keys.map((p) => `$2sxc.insights('${p}');`).join('\\n'));\r\n            return;\r\n        }\r\n\r\n        // partName found, check if it exists\r\n        const part = this.history[partName];\r\n        if (!part) {\r\n            console.error(`part '${partName}' not found`);\r\n            return;\r\n        }\r\n\r\n        // We have a partName, but no index - show list and how to get details\r\n        if (index === undefined) {\r\n            let count = 0;\r\n            const logNames = part.logs\r\n                .map((s) => `$2sxc.insights('${partName}', ${count++}); - will show for '${s.key}'`)\r\n                .join('\\n');\r\n            console.log(`'${partName}' contains ${part.logs.length} entries. Copy/paste the code to to see the logs: \\n` + logNames);\r\n            return;\r\n        }\r\n\r\n        // verify the entry exists\r\n        const logSet = part.logs.length >= index && part.logs[index];\r\n        if (!logSet) {\r\n            console.error(`index ${index} not found in part '${partName}'`);\r\n            return;\r\n        }\r\n\r\n        if (!logSet.log) {\r\n            console.error(`found index ${index} on part '${partName}' but it has no logs`);\r\n            return;\r\n        }\r\n\r\n        console.log(`Will dump the log for ${partName}[${index}] '${logSet.key}'`);\r\n        let autoLimit = false;\r\n        if (start === undefined) {\r\n            autoLimit = true;\r\n            start = 0;\r\n            length = 25;\r\n        }\r\n        logSet.log.dumpList(start || 0, length);\r\n        if (autoLimit && logSet.log.entries.length > length)\r\n            console.warn(`Only showing ${length} of ${logSet.log.entries.length} logs. To show all, add start param '..., 0)' or start/length '..., 0, 100)'`)\r\n}\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nclass InsightsLogSet {\r\n    logs: LogList = [];\r\n    constructor(public name: string) {}\r\n}\r\n\r\n// ensure it's only created once\r\n// this is important, because the inpage code also uses this class\r\n// and would otherwise create the object separately\r\nconst singleton: InsightsSingleton = \r\n    window.$2sxc && window.$2sxc._insights   // try to load existing\r\n    || new InsightsSingleton();             // otherwise create new\r\n\r\n/** @internal */\r\nexport const Insights = singleton;\r\n","\r\n/**\r\n * This is a placeholder in the settings, which must be replaced with \"2sxc\" or another term for other dnn extensions\r\n * @internal\r\n */\r\nexport const ApiExtensionPlaceholder = 'e.x.t';\r\n\r\n/**\r\n * The special header meta tag containing settings for 2sxc\r\n * @internal\r\n */\r\nexport const MetaHeaderJsApi = '_jsApi';\r\n\r\n/**\r\n * The fallback path to the UI\r\n * @internal\r\n */\r\nexport const DnnUiRoot = '/desktopmodules/tosic_sexycontent/';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformOqtane = 'oqtane';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformDnn = 'dnn';\r\n\r\n/**\r\n * The fallback AntiForgery token header name (as in Dnn)\r\n * @internal\r\n */\r\nexport const AntiForgeryTokenHeaderNameDnn = 'RequestVerificationToken';\r\n","import { SxcGlobalEnvironment } from '.';\r\nimport { HasLog, NoJQ } from '../../../core';\r\nimport { EnvironmentSpecs } from '..';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\nconst helpAutoDetect = 'You must either include jQuery on the page or inject the jsApi parameters to prevent auto-detection.';\r\ndeclare const window: Window;\r\n\r\n/**\r\n * This helps load environment information from DNN ServicesFramework - it's a fallback in case the other mechanisms fail\r\n * @internal\r\n */\r\nexport class EnvironmentDnnSfLoader extends HasLog {\r\n    constructor(public env: SxcGlobalEnvironment) {\r\n        super('Env.DnnLdr', env.log);\r\n    }\r\n\r\n\r\n    /**\r\n     * This will assume the new parameter injection failed and it will attempt to fallback\r\n     * it's for backward compatibility, in case something is using $2sxc and doesn't provide the new\r\n     * implementation\r\n     */\r\n    dnnSfFallback(): void {\r\n        const cl = this.log.call('dnnSfFallback');\r\n        // await page-ready to then initialize the stuff\r\n        NoJQ.ready(() => this.dnnSfLoadWhenDocumentReady());\r\n        cl.done('started dom-ready watcher')\r\n    }\r\n\r\n    private dnnSfLoadWhenDocumentReady(): void {\r\n        const cl = this.log.call('dnnSfLoadWhenDocumentReady');\r\n        if (typeof window.$ === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid, etc. and $ is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n\r\n        const sf = window.$.ServicesFramework;\r\n        if (typeof sf === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid etc. and DNN SF is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n        const dnnSf = sf(0);\r\n        var apiRoot = dnnSf.getServiceRoot('2sxc');\r\n        var sfJsInfo: EnvironmentSpecs = {\r\n            page: dnnSf.getTabId(),\r\n            root: 'unknown',\r\n            api: apiRoot,\r\n            appApi: apiRoot,\r\n            rvtHeader: AntiForgeryTokenHeaderNameDnn,\r\n            rvt: dnnSf.getAntiForgeryValue(),\r\n            uiRoot: DnnUiRoot,\r\n            platform: PlatformDnn,\r\n        };\r\n        this.env.load(sfJsInfo, 'dnn SF');\r\n        cl.done();\r\n    }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { Log } from '../../../core';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\n\r\nconst InputValue = 'value';\r\n\r\nconst SelectorInputRvt = `input[name=__RequestVerificationToken]`;\r\n\r\n/**\r\n * Special loader for dynamic pages like Oqtane, where content can change at runtime\r\n * @internal\r\n */\r\nexport class EnvironmentLoaderDynamic {\r\n\r\n  public log: Log;\r\n\r\n  constructor(\r\n      private mainLoader: EnvironmentMetaLoader\r\n  ) {\r\n    this.log = new Log('ldr.dynmic', mainLoader.log);\r\n  }\r\n\r\n  /**\r\n   * Watch for changes in our special meta header, to update the variables.\r\n   * Important for Oqtane, which changes the page on the fly without reloading.\r\n   */\r\n  public startMetaTagObserver(attribute: string): void {\r\n    if (!!this.observer) return;\r\n    this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === attribute)\r\n          this.mainLoader.updateEnv(JSON.parse(this.mainLoader.getMetaContent()) as EnvironmentSpecs)\r\n    });\r\n    this.log.add('start observing meta tag');\r\n    this.observer.observe(this.mainLoader.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private observer: MutationObserver;\r\n\r\n  /**\r\n   * Load RequestVerificationToken from the hidden form-field in Oqtane\r\n   */\r\n  public startInputRvtObserver(): void {\r\n    if (!!this.inputRvtObserver) return;\r\n    this.inputRvtObserver = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === InputValue)\r\n          this.loadRvtFromHiddenInput(mut.target as HTMLInputElement);\r\n    });\r\n    this.log.add('start observing Rvt Input');\r\n    const hiddenField = document.querySelector(SelectorInputRvt);\r\n    if (hiddenField == null) {\r\n      console.error(`Can't find Oqtane RVT field with selector ${SelectorInputRvt}\\n` +`So we cannot watch it for changes.\\n` +`This will probably cause the $2sxc to fail.`);\r\n      return;\r\n    }\r\n    this.loadRvtFromHiddenInput(hiddenField as HTMLInputElement);\r\n    this.inputRvtObserver.observe(hiddenField, { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private inputRvtObserver: MutationObserver;\r\n\r\n  private loadRvtFromHiddenInput(input: HTMLInputElement){\r\n    this.log.add('Input Rvt updated');\r\n    if(input && input.value)\r\n      this.mainLoader.env.updateRvt(input.value);\r\n  }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { SxcGlobalEnvironment } from '.';\r\nimport { EnvironmentDnnSfLoader } from './env-loader-dnn-sf';\r\nimport { MetaHeaderJsApi, PlatformOqtane } from '../constants';\r\nimport { HasLog, Log } from '../../../core';\r\nimport { EnvironmentLoaderDynamic } from './env-loader-dynamic';\r\n\r\n// temp: usually 10, but because Oqtane has some delays, we'll temporarily increase to 100 till we're safe\r\nconst maxRetries = 100;\r\nconst retryMs = 10;\r\n\r\nconst MetaSourceId = 'meta header';\r\n\r\nconst MetaProperty = 'content';\r\n\r\n\r\nfunction logTest(): boolean\r\n{\r\n    console.log('test');\r\n    return true;\r\n}\r\n/**\r\n * This loads environment information from the meta-header tag.\r\n * Because of timing issues, it will try multiple times\r\n * @internal\r\n */\r\nexport class EnvironmentMetaLoader extends HasLog {\r\n    public retries = 0;\r\n\r\n    public log: Log;\r\n\r\n    private dynamicPageHelper: EnvironmentLoaderDynamic;\r\n\r\n    constructor(public env: SxcGlobalEnvironment) {\r\n        super('Env.MetaLd', logTest ? env.log : env.log);\r\n        this.dynamicPageHelper = new EnvironmentLoaderDynamic(this);\r\n    }\r\n\r\n    public loadMetaFromHeader(forceFallback = false): void {\r\n        const cl = this.log.call('loadMetaFromHeader', `${forceFallback}`);\r\n        // avoid duplicate execution\r\n        if(this.env.ready) return cl.done('loadMeta - ready');\r\n\r\n        this.log.add('loadMetaFromHeader: start, retry:' + this.retries + ', force fallback: ' + forceFallback);\r\n        const meta = this.getMetaContent();\r\n        if(!meta) {\r\n            this.retries++;\r\n            if(forceFallback || this.retries >= maxRetries) {\r\n                new EnvironmentDnnSfLoader(this.env).dnnSfFallback();\r\n                return cl.done()\r\n            }\r\n            setTimeout(() => { this.loadMetaFromHeader(); }, retryMs);\r\n            return cl.done('will retry');\r\n        }\r\n        // Load the settings\r\n        this.updateEnv(JSON.parse(meta) as EnvironmentSpecs);\r\n\r\n        // monitor setting changes - important for Oqtane\r\n        this.dynamicPageHelper.startMetaTagObserver(MetaProperty);\r\n        cl.done();\r\n    }\r\n\r\n    public updateEnv(newJsInfo: EnvironmentSpecs) {\r\n        this.log.add('meta env info updated');\r\n        this.env.load(newJsInfo, MetaSourceId);\r\n        if(newJsInfo.platform === PlatformOqtane)\r\n            this.dynamicPageHelper.startInputRvtObserver();\r\n    }\r\n\r\n    public getMetaContent(): string {\r\n        const ourMeta = this.getJsApiMetaTag();\r\n        if (!ourMeta) return null;\r\n        return ourMeta.getAttribute(MetaProperty)\r\n    }\r\n\r\n    public getJsApiMetaTag() {\r\n        return document.querySelector(`meta[name=${MetaHeaderJsApi}]`);\r\n    }\r\n\r\n\r\n    /**\r\n     * Watch for changes in our special meta header, to update the variables.\r\n     * Important for Oqtane, which changes the page on the fly without reloading.\r\n     */\r\n    public startMetaTagObserver(): void {\r\n      if (!!this.observer) return;\r\n      this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n        for(const mut of mutationsList)\r\n          if (mut.type === 'attributes' && mut.attributeName === MetaProperty)\r\n            this.updateEnv(JSON.parse(this.getMetaContent()) as EnvironmentSpecs)\r\n      });\r\n      this.log.add('start observing meta tag');\r\n      this.observer.observe(this.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n    }\r\n    private observer: MutationObserver;\r\n\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\nimport { HasLog, Insights, SxcApiUrlRoot } from '../../../core';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\ndeclare const _jsApi: EnvironmentSpecs;\r\n\r\n/**\r\n * Provides environment information to $2sxc - usually page-id, api-root and stuff like that\r\n * @public\r\n */\r\nexport class SxcGlobalEnvironment extends HasLog {\r\n    /** @internal */\r\n    private header: EnvironmentSpecs;\r\n    /** \r\n     * Flag to determine if the environment information is available. \r\n     */\r\n    public ready = false;\r\n    /** \r\n     * Where the environment information came from.\r\n     */\r\n    public source = '';\r\n\r\n    /** @internal */\r\n    public metaLoader: EnvironmentMetaLoader;\r\n\r\n    /** @internal */\r\n    constructor() {\r\n        super('Environment', null, 'starting');\r\n        this.log.keepData = true;   // always keep here for clarity\r\n        Insights.add('system', 'environment', this.log);\r\n        this.metaLoader = new EnvironmentMetaLoader(this);\r\n\r\n        // check if a global variable was already set which we should use\r\n        if(typeof _jsApi !== typeof undefined) {\r\n            this.log.add('found _jsApi, will use');\r\n            this.load(_jsApi, 'global variable _jsApi');\r\n        } else {\r\n            this.log.add('will start initializing');\r\n            this.metaLoader.loadMetaFromHeader();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manually load a new EnvironmentSpecs in cases where the page cannot provide them. \r\n     * This is only used in scenarios outside of Dnn / Oqtane, you will usually not need this. \r\n     * @param envSpecs new info to load\r\n     * @param source _optional_ name where the data came from\r\n     */\r\n    public load(envSpecs: EnvironmentSpecs, source?: string) {\r\n        const cl = this.log.call('load');\r\n        if(envSpecs.root && !envSpecs.api) {\r\n            cl.add('root provided, api missing, will auto-complete');\r\n            const addSlash = (envSpecs.root.endsWith('/') ? '' : '/');\r\n            envSpecs.api = `${envSpecs.root}${addSlash}${SxcApiUrlRoot}`;\r\n        }\r\n        this.header = envSpecs;\r\n\r\n        // in some cases the UpdateRvt may already have been called before\r\n        // in which case it's probably more relevant\r\n        // so we should set it again\r\n        if(this.replacedRvt) this.header.rvt = this.replacedRvt;\r\n\r\n        this.ready = true;\r\n        this.source = source || 'external/unknown' + (this.replacedRvt ? '+rvt': '');\r\n        cl.return(envSpecs, 'loaded from ' + this.source);\r\n    }\r\n\r\n    /** @internal */\r\n    private replacedRvt: string;\r\n\r\n    /** @internal */\r\n    public updateRvt(newRvt: string) {\r\n        if(!newRvt) return;\r\n        this.replacedRvt = newRvt;\r\n        this.header.rvt = newRvt;\r\n    }\r\n\r\n    /**\r\n     * The API endpoint url from the environment\r\n     */\r\n    public api(): string {\r\n        this.ensureReadyOrThrow('api');\r\n        return this.header.api;\r\n    }\r\n\r\n    // WIP - may return undefined\r\n    /** @internal */\r\n    public appApi(): string {\r\n        // WIP - must get it to work without 'appApi' but only 'api' to ensure ...\r\n        this.ensureReadyOrThrow('appApi');\r\n        return this.header.appApi;\r\n    }\r\n\r\n    /**\r\n     * The current page ID - often needed in API calls\r\n     */\r\n    public page(): number {\r\n        this.ensureReadyOrThrow('page');\r\n        return this.header.page;\r\n    }\r\n\r\n    /**\r\n     * The request verification token header name for internal WebAPI calls\r\n     */\r\n    public rvtHeader(): string {\r\n        this.ensureReadyOrThrow('rvtHeader');\r\n        return this.header.rvtHeader || AntiForgeryTokenHeaderNameDnn;\r\n    }\r\n\r\n    /**\r\n     * The request-verification token for internal WebAPI calls\r\n     */\r\n    public rvt(): string {\r\n        this.ensureReadyOrThrow('rvt');\r\n        return this.header.rvt;\r\n    }\r\n\r\n    /**\r\n     * The uiRoot path\r\n     * @internal\r\n     */\r\n    public uiRoot(): string {\r\n        this.ensureReadyOrThrow('uiRoot');\r\n        return this.header.uiRoot || DnnUiRoot;\r\n    }\r\n\r\n    /**\r\n     * The platform code like 'oqt' or 'dnn' in case the JS needs to know the difference\r\n     */\r\n    public platform(): string {\r\n        this.ensureReadyOrThrow('platform');\r\n        return this.header.platform || PlatformDnn;\r\n    }\r\n\r\n    /**\r\n     * The dialogQuery added in 14.08 because of issues with opening the dialog on sub-portals\r\n     * ATM very internal\r\n     * Don't check if it was initialized, because it's valid if it doesn't exist\r\n     * @internal\r\n     */\r\n    public dialogQuery(): string {\r\n      return this.header.dialogQuery ?? null;\r\n    }\r\n  \r\n\r\n    /** @internal */\r\n    private ensureReadyOrThrow(partRequested: string): void {\r\n        if(this.ready) return;\r\n\r\n        // try one last time - usually it should really be ready by now\r\n        this.log.add('ensureReady - force last attempt to load MetaHeader for ' + partRequested)\r\n        this.metaLoader.loadMetaFromHeader(true);\r\n\r\n        // if still not ready, throw exception to console log\r\n        if(this.ready) return;\r\n        throw `Can't find ${partRequested} - something went wrong, pls contact 2sxc.org`;\r\n    }\r\n\r\n}\r\n\r\n","import { Sxc, SxcWebApi } from '..';\r\nimport { NoJQ } from '../../../../core';\r\nimport { ZzzAjaxSettingsDeprecated } from './ajax-settings';\r\n\r\n/** @internal */\r\nexport class AjaxPromise {\r\n  constructor(private api: SxcWebApi, private sxc: Sxc) {\r\n  }\r\n\r\n  /**\r\n   * Make a jQuery style promise request\r\n   * @param settings: settings\r\n   * @returns JQueryPromise<any>\r\n   */\r\n  public makePromise(settings: ZzzAjaxSettingsDeprecated): any {\r\n    var headers = this.api.headers();\r\n    // debugger;\r\n    if (window.$ == null) {\r\n      throw new Error('JQuery is now removed from 2sxc installation. Please use newer api like fetch or include JQuery in your project');\r\n    }\r\n    const promise = window.$.ajax({\r\n      async: true,\r\n      dataType: (settings as any).dataType || 'json', // default is json if not specified\r\n      data: JSON.stringify((settings as any).data),\r\n      contentType: 'application/json',\r\n      type: (settings as any).method,\r\n      url: this.getActionUrl(settings),\r\n      beforeSend(xhr: any) {\r\n        for (var key in headers)\r\n          if (headers.hasOwnProperty(key))\r\n            xhr.setRequestHeader(key, headers[key]);\r\n      },\r\n    }) as any;\r\n\r\n    if (!settings.preventAutoFail)\r\n      promise.fail(this.sxc.showDetailedHttpError);\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate the correct WebApi url\r\n   * @param settings the settings as they would be in jQuery\r\n   */\r\n  private getActionUrl(settings: ZzzAjaxSettingsDeprecated): string {\r\n    var url = (settings as any).url || 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n    // 2020-03-13 stop adding 2sxc endpoint-name, it's already happening in apiUrl so with this it happens 2x\r\n    // var endpoint = settings.endpoint || ToSxcName;\r\n    var base = this.sxc.http.apiUrl(url, settings.endpoint);\r\n\r\n    return base + (!settings.params ? '' : ('?' + NoJQ.param(settings.params)));\r\n  }\r\n}\r\n","import { Sxc } from '../sxc';\r\nimport { AjaxPromise } from './ajax-promise';\r\nimport { ZzzAjaxSettingsDeprecated } from './ajax-settings';\r\nimport { NoJQ } from '../../../../core';\r\nimport { ZzzSxcWebApiDeprecated } from './sxc-web-api-deprecated';\r\n\r\n/**\r\n * helper API to run ajax / REST calls to the server\r\n * it will ensure that the headers etc. are set correctly\r\n * and that urls are rewritten\r\n * @public\r\n */\r\nexport class SxcWebApi implements ZzzSxcWebApiDeprecated {\r\n    // 2023-05-22 believe this is never used, so removing  \r\n    // /**\r\n    //  * @internal\r\n    //  * TODO: PROBABLY remove ? but must be sure it's not used elsewhere\r\n    //  */\r\n    // private readonly env: SxcGlobalEnvironment;\r\n\r\n    /**\r\n     * \r\n     * @param sxc \r\n     * @internal\r\n     */\r\n    constructor(private readonly sxc: Sxc) {\r\n      // 2023-05-22 believe this is never used, so removing\r\n      // this.env = sxc.root.env;\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    get(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'GET');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    post(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'POST');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    delete(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'DELETE');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n     put(settingsOrUrl: string | ZzzAjaxSettingsDeprecated, params?: any, data?: any, preventAutoFail?: boolean): any {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'PUT');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** - docs in the separate interface\r\n     * @deprecated use fetchJson instead\r\n     */\r\n     request(settings: string | ZzzAjaxSettingsDeprecated, params: any, data: any, preventAutoFail: boolean, method: string): any {\r\n\r\n        // url parameter: auto convert a single value (instead of object of values) to an id=... parameter\r\n        // tslint:disable-next-line:curly\r\n        if (typeof params !== 'object' && typeof params !== 'undefined')\r\n            params = { id: params };\r\n\r\n        // if the first parameter is a string, resolve settings\r\n        if (typeof settings === 'string') {\r\n            const controllerAction = settings.split('/');\r\n            const controllerName = controllerAction[0];\r\n            const actionName = controllerAction[1];\r\n\r\n            if (controllerName === '' || actionName === '')\r\n                console.warn('Error: controller or action not defined. Will continue with likely errors.');\r\n\r\n            settings = {\r\n                controller: controllerName,\r\n                action: actionName,\r\n                params,\r\n                data,\r\n                url: controllerAction.length > 2 ? settings : null,\r\n                preventAutoFail,\r\n            } as any;\r\n        }\r\n\r\n        const defaults = {\r\n            method: method === null ? 'POST' : method,\r\n            params: null as any,\r\n            preventAutoFail: false,\r\n        };\r\n        // new 10.25\r\n        var http = new AjaxPromise(this, this.sxc);\r\n\r\n        settings = Object.assign({}, defaults, settings);\r\n\r\n        const promise = http.makePromise(settings as ZzzAjaxSettingsDeprecated);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing a Response object, just like a normal fetch would. \r\n     * example: webApi.fetchRaw('Rss/Feed');\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 })); // url params\r\n     * example: webApi.fetchRaw('Rss/Feed', { id: 47 }); // post params\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 }), { something: 'this is a test' }); // url & post params\r\n     * maybe: webApi.fetchRaw({url: 'Rss/Feed', params: { id: 47 }})\r\n     * maybe: webApi.fetchRaw({url: ..., params: { ...}, body: { ...}, method: 'GET' })\r\n     */\r\n    fetchRaw(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        const ctxParams = {} as { appId?: number; zoneId?: number; };\r\n        const ctx = this.sxc.ctx;\r\n        const urlLower = url.toLocaleLowerCase();\r\n        // Note: #_autoAppIdsInUrl is only used in edit-ui formulas\r\n        if (ctx?._autoAppIdsInUrl && urlLower.includes('app/auto/')) {\r\n            if (ctx?.appId && !urlLower.includes('appid=')) ctxParams.appId = ctx.appId;\r\n            if (ctx?.zoneId && !urlLower.includes('zoneid=')) ctxParams.zoneId = ctx.zoneId;\r\n        }\r\n        url = this.url(url, ctxParams);\r\n        method = method || (data ? 'POST' : 'GET');\r\n        const headers = this.headers(method);\r\n\r\n        if (data) {\r\n            // test if data is a json. If it's not, convert it to json\r\n            try {\r\n                JSON.parse(data as string);\r\n            } catch {\r\n                data = JSON.stringify(data);\r\n            }\r\n        }\r\n\r\n        return fetch(url, {\r\n            headers,\r\n            method,\r\n            ...(data && { body: data as string }),\r\n        });\r\n    }\r\n\r\n    // Note: fetch was documented in v12.10 (December 2021) but will probably never be used externally\r\n    // So we rename it to fetchRaw and later will make fetch just be the json implementation.\r\n    // Renamed and added this warning in 13.04 (2022-03-14), will drop in v14 and probably make it do fetchJson by default\r\n    // Changed functionality in 13.10 (2022-05-04) to make it do fetchJson by default\r\n    // Changed functionality back in 13.11 (2022-05-10) because it seems that Mobius was published using fetch\r\n    // Important: Do not document in the docs, as it shouldn't be used\r\n    /** @internal */\r\n    fetch(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        console.warn(`You are calling 'fetch' on the sxc.webApi. This is deprecated will stop in 2sxc v15, please use fetchRaw(...) or fetchJson(...) instead.`)\r\n        return this.fetchJson(url, data, method);\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch and give you an object. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing any object.\r\n     */\r\n    fetchJson<T = any>(url: string, data?: string | Record<string, any>, method?: string): Promise<T> {\r\n        return this.fetchRaw(url, data, method).then(response => response.json());\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call for this to work reliably.\r\n     * Use this if you need to get a list of headers in another system\r\n     */\r\n    headers(method?: string): Record<string, string> {\r\n        const headers = this.sxc.http.headers(this.sxc.id, this.sxc.cbid, this.sxc.ctx);\r\n        if (!method) {\r\n            return headers;\r\n        }\r\n\r\n        switch (method.toLocaleUpperCase()) {\r\n            case 'GET':\r\n                headers['Accept'] = 'application/json';\r\n                break;\r\n            default:\r\n                headers['Accept'] = 'application/json';\r\n                headers['Content-Type'] = 'application/json';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url A short, medium or long url. \r\n     * Short like `controller/method`, \r\n     * medium like `app/auto/api/controller/method`\r\n     * long like `https://xyz.\r\n     * In all cases it can also have ?params etc.\r\n     * @param params Optional parameters as string or object, will be added to url-params. \r\n     * @returns In the cases of a short/medium url, \r\n     * it will auto-expand to have the full url as needed for an API call. \r\n     */\r\n    url(url: string, params?: string | Record<string, any>): string {\r\n        if (url == null) return url;\r\n\r\n        const urlAndParams = url.split('#')[0].split('?');\r\n\r\n        // url fixes\r\n        url = urlAndParams[0];\r\n        const urlParts = url.split('/');\r\n        if (urlParts.length === 2 && urlParts[0] && urlParts[1]) {\r\n            const controller = urlParts[0];\r\n            const action = urlParts[1];\r\n            url = `app/auto/api/${controller}/${action}`;\r\n        }\r\n        url = this.sxc.http.apiUrl(url);\r\n\r\n        // params fixes\r\n        params = `${urlAndParams[1] || ''}&${params ? typeof params === 'string' ? params : NoJQ.param(params) : ''}`\r\n            .split('&')\r\n            .filter(p => !!p)\r\n            .join('&');\r\n\r\n        // result\r\n        url = [url, params].filter(p => !!p).join('?');\r\n        return url;\r\n    }\r\n}\r\n","import { Sxc } from '..';\r\n\r\n/**\r\n * Base class for anything attached to an sxc-instance.\r\n * This is internal and not important, but we can't keep it out of the docs. \r\n * @public\r\n */\r\nexport abstract class SxcPart {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc: sxc\r\n  * @param partName: name of the part\r\n  * @internal\r\n  */\r\n  constructor(\r\n    /** @internal */\r\n    public sxc: Sxc, \r\n    /** @internal */\r\n    public partName: string) {      \r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { SxcPart } from '../sxc-part';\r\nimport { SxcWebApi } from '../web-api/sxc-web-api';\r\n\r\n/**\r\n * Base class doing common checks.\r\n * This is internal and not important, but we can't keep it out of the docs. \r\n * @public\r\n */\r\nexport abstract class SxcDataServiceBase extends SxcPart {\r\n  protected readonly webApi: SxcWebApi;\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc: \r\n  * @param name: the content-type name\r\n  * @internal\r\n  */\r\n  constructor(\r\n    sxc: Sxc,\r\n    readonly name: string,\r\n    nameInError: string\r\n  ) {\r\n    super(sxc, 'data');\r\n    this.webApi = sxc.webApi;\r\n    \r\n    // Fail early if something is wrong\r\n    nameInError += ' name ';\r\n    if (name == null) throw nameInError + 'is empty';\r\n    if (name.indexOf(\"/\") != -1 || name.indexOf(\"\\\\\") != -1) throw nameInError + 'has slashes - not allowed';\r\n    if (name.indexOf(\"?\") != -1) throw nameInError + 'has \"?\" - not allowed';\r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { MetadataTargetTypes } from '../../data';\r\nimport { MetadataFor } from '../../data/metadata-for';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\nconst ContentApiRoot = 'app/auto/data';\r\n\r\n/**\r\n* Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type\r\n* @public\r\n*/\r\nexport class SxcData<T = unknown> extends SxcDataServiceBase {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param sxc:\r\n  * @param name: the content-type name\r\n  * @internal\r\n  */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'ContentType');\r\n  }\r\n\r\n  /**\r\n   * Get all items of this type.\r\n   */\r\n  getAll(): Promise<T[]> {\r\n    return this.getInternal<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Get the specific item with the ID. It will return null if not found\r\n   */\r\n  getOne(id: number): Promise<T> | null {\r\n    return this.getInternal<T>(id);\r\n  };\r\n\r\n  /** Future\r\n   *  @internal \r\n   */\r\n  private getMany(criteria: Record<string, unknown>, fields: Array<string>): Promise<T[]> {\r\n    throw 'not implemented - probably v13.5 or something';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<TCall>(id?: string | number, params?: string | Record<string, unknown>): Promise<TCall> {\r\n    let path = `${ContentApiRoot}/${this.name}`;\r\n    if (id && (typeof id === 'string' || typeof id === 'number')) path += \"/\" + id;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params));\r\n  }\r\n\r\n  /**\r\n   * Create a new entity with the values supplied\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>): Promise<Record<string, unknown>>;\r\n\r\n  /**\r\n   * Create a new entity with the values supplied and also a metadata-for reference\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>, metadataFor: MetadataFor | string): Promise<Record<string, unknown>>;\r\n\r\n  /** @internal */\r\n  create(values: Record<string, unknown>, metadataFor?: MetadataFor | string): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}`;\r\n    if (metadataFor != null) {\r\n      if (typeof(metadataFor) === 'string')\r\n        metadataFor = { Target: MetadataTargetTypes.Entity, Guid: metadataFor } as MetadataFor;\r\n      try {\r\n        values.For = metadataFor;\r\n      } catch { }\r\n    }\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Update an existing entity with the values supplied\r\n   */\r\n  update(id: number, values: Record<string, unknown>): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}/${id}`;\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param id id of the item to delete\r\n   */\r\n  delete(id: number): Promise<null>;\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param guid GUID of the item to delete\r\n   */\r\n  delete(guid: string): Promise<null>;\r\n\r\n  /** @internal */\r\n  delete(idOrGuid: number | string): Promise<null> {\r\n    const path = `${ContentApiRoot}/${this.name}/${idOrGuid}`;\r\n    return this.webApi.fetchRaw(this.webApi.url(path), undefined, 'DELETE').then(response => null);\r\n  }\r\n}\r\n\r\n","import { Sxc } from '..';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\n/**\r\n * Instance Query Service\r\n * @public\r\n */\r\nexport class SxcQuery extends SxcDataServiceBase {\r\n\r\n  /**\r\n   * Creates an instance of SxcQuery.\r\n   * @internal\r\n   */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'Query');\r\n  }\r\n\r\n  getAll<T = unknown>(): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Retrieve the entire query with all streams\r\n   *\r\n   * @template T\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   */\r\n  getAll<T = unknown>(urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(undefined, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get just one stream, returning an array of items in that stream\r\n   *\r\n   * @template T\r\n   * @param stream\r\n   * @returns {Promise<T[]>} containing an array of items - or empty if stream not found or nothing returned\r\n   */\r\n  getStream<T = unknown>(stream: string): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T[]>;\r\n  \r\n  getStream<T = unknown>(stream: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T[]> {\r\n    if (stream.indexOf(',') !== -1) throw \"parameter 'stream' can only contain one stream name for 'getStream'\";\r\n    return this.getInternal<unknown>(stream, urlParams, data).then((data) => {\r\n      if (data == null || !data.hasOwnProperty(stream)) return [];\r\n      return (data as any)[stream] as T[];\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @param data data to include in case of a POST call - if this is provided, it will use a post\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   * @public\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the mentioned streams.\r\n   * This will reduce the amount of data retrieved on queries that have many streams. \r\n   *\r\n   * @template T The schema/interfaces of what will be returned\r\n   * @param streams name of streams to get, comma separated\r\n   * @param urlParams additional parameters for the URL, either as a string or as a object\r\n   * @param data data to include in case of a POST call - if this is provided, it will use a post\r\n   * @returns {Promise<T>} Promise containing a object with stream-names and items in the streams.\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(streams, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<T = unknown>(streams?: string, params?: string | Record<string, any>, data?: string | Record<string, unknown>): Promise<T> {\r\n    let path = \"app/auto/query/\" + this.name;\r\n    if (streams && (typeof streams === 'string')) path += \"?stream=\" + streams;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params), data);\r\n  }\r\n}\r\n","import { SxcPart } from './sxc-part';\r\nimport { RunParams } from '../cms/run-params';\r\nimport { Sxc } from '.';\r\n\r\n/**\r\n * This is in charge of sxc.cms on the instance level.\r\n * ATM it just has the run command.\r\n * In future, it may also have dedicated command like `layout` etc.\r\n * @public\r\n */\r\nexport class SxcCms extends SxcPart {\r\n\r\n  /** @internal */\r\n  constructor(sxc: Sxc) {\r\n    super(sxc, \"cms\");\r\n  }\r\n\r\n  /**\r\n   * Run a command on this sxc-instance. \r\n   * Requires edit mode to be on, which would enable the edit-JS parts.\r\n   * To use, remember to activate `2sxc.JsCms` on the page\r\n   * @param runParams - real type is actually RunParams\r\n   */\r\n  run<T>(runParams: RunParams): Promise<void | T> { \r\n    throw 'cms.run() requires editing to be on, or page-feature \"2sxc.JsCms\" to be enabled to work';\r\n  }\r\n}","import { SxcGlobalEnvironment } from './../environment/sxc-global-environment';\r\nimport { ContextIdentifier } from '../sxc-global/context-identifier';\r\nimport { SxcWebApi } from './web-api/sxc-web-api';\r\nimport { ApiUrlRoots, HasLog, ToSxcName } from '../../../core';\r\nimport { SxcManage } from './sxc-manage';\r\nimport { SxcData } from './data/sxc-data';\r\nimport { SxcQuery } from './data/sxc-query';\r\nimport { EnvironmentSpecs, SxcGlobal, SxcGlobalHttp } from '..';\r\nimport { SxcCms } from './sxc-cms';\r\n\r\n/**\r\n* The typical sxc-instance object for a specific DNN module or content-block\r\n* @public\r\n*/\r\nexport class Sxc extends HasLog {\r\n  /** @internal */\r\n  private _isSxcInstance = true;\r\n\r\n\r\n  /**\r\n   * Web API calls for this instance.\r\n   * This is the pure call APIs system. \r\n   * To get data or queries, best use the data or query services.\r\n   */\r\n  webApi: SxcWebApi;\r\n\r\n  /**\r\n   * manage object which provides access to additional content-management features\r\n   * it only exists if 2sxc is in edit mode (otherwise the JS are not included for these features)\r\n   * @internal\r\n   */\r\n  manage: SxcManage = null; // initialize correctly later on\r\n\r\n  /**\r\n   * CMS operations on this sxc-instance, such as opening the edit dialog etc.\r\n   */\r\n  cms: SxcCms = new SxcCms(this);\r\n  \r\n  /** @internal */\r\n  constructor(\r\n    /** the sxc-instance ID, which is usually the DNN Module Id */\r\n    public id: number,\r\n    /**\r\n     * content-block ID, which is either the module ID, or the content-block definition entity ID\r\n     * this is an advanced concept you usually don't care about, otherwise you should research it\r\n     */\r\n    public cbid: number,\r\n    /** \r\n     * the id/key of this instance in the cache for reset\r\n     * @internal\r\n     */\r\n    public cacheKey: string,\r\n    /** \r\n     * The environment information, important for http-calls \r\n     * @internal\r\n     */\r\n    public readonly root: SxcGlobal,\r\n    /** \r\n     * Custom context information provided by the constructor - will replace auto-context detection\r\n     * @internal\r\n     */\r\n    public ctx?: ContextIdentifier,\r\n  ) {\r\n    super('SxcInstance', null, 'Generating for ' + id + ':' + cbid);\r\n    \r\n    // add manage property, but not within initializer, because inside the manage-initializer it may reference 2sxc again\r\n    try { // sometimes the manage can't be built, like before installing\r\n      if (root._manage) root._manage.initInstance(this);\r\n    } catch (e) {\r\n      console.error('error in 2sxc - will only log but not throw', e);\r\n    }\r\n\r\n    // New 16.01 - get env from the current tag instead of the entire page - if possible\r\n    const envAndHttp = this.loadEnv(root);\r\n    this.env = envAndHttp.env;\r\n    this.http = envAndHttp.http;\r\n    this.webApi = new SxcWebApi(this);\r\n\r\n    // ensure that data-APIs used incorrectly shows good warnings\r\n    patchDataWithWarnings(this.data);\r\n    \r\n    // this only works when manage exists (not installing) and translator exists too\r\n    if (root._translateInit && this.manage)\r\n    // ensure that we really have a manage context, otherwise we can't initialize i18n and it doesn't make sense\r\n    if (this.manage.context && this.manage.context.app && this.manage.context.app.currentLanguage)\r\n    root._translateInit(this.manage);    // init translate, not really nice, but ok for now\r\n  }\r\n\r\n  /**\r\n   * New v16.01 - WIP\r\n   * We have the problem that sometimes the environment is not available on the page or is wrong. \r\n   * * On a page where a 2sxc-module was just added\r\n   * * On a module which is in the skin, so technically from a different page\r\n   * \r\n   * Based on this we are trying to include all relevant information from the root-env, but override it with the local env\r\n   * @param root \r\n   * @returns \r\n   */\r\n  private loadEnv(root: SxcGlobal): { env: SxcGlobalEnvironment, http: SxcGlobalHttp } {\r\n    const localEnv = (this.manage as any)?.editContext?.JsApi as EnvironmentSpecs;\r\n    if (!localEnv) return { env: root.env, http: root.http };\r\n    const rootEnv = (root.env as any).headers as EnvironmentSpecs;\r\n    const final = localEnv ? { ...rootEnv, ...localEnv } : rootEnv;\r\n    const env = new SxcGlobalEnvironment();\r\n    env.load(final, 'sxc-instance');\r\n    return { env, http: new SxcGlobalHttp(env) };\r\n  }\r\n\r\n  /**\r\n   * Env helper for API calls and such\r\n   * @internal\r\n   */\r\n  public env: SxcGlobalEnvironment;\r\n  /**\r\n   * Http helper for API calls and such\r\n   * @internal\r\n   */\r\n  public http: SxcGlobalHttp;\r\n\r\n  /**\r\n   * TypeGuard for TypeScript to verify this is a SxcInstance\r\n   * @param thing \r\n   * @internal\r\n   */\r\n  public static is(thing: unknown): thing is Sxc {\r\n    return (thing as Sxc)._isSxcInstance;\r\n  }\r\n\r\n  /**\r\n   * Get a data service for a specific content-type.\r\n   *\r\n   * @param contentType: name of the content type which this service will get\r\n   */\r\n  data<T = unknown>(contentType: string) : SxcData<T> {\r\n    return new SxcData<T>(this, contentType);\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @param query \r\n   */\r\n  query(query: string) : SxcQuery {\r\n    return new SxcQuery(this, query);\r\n  }\r\n    \r\n    \r\n  /**\r\n  * converts a short api-call path like \"/app/Blog/query/xyz\" to the DNN full path\r\n  * which varies from installation to installation like \"/desktopmodules/api/2sxc/app/...\"\r\n  * @deprecated use http.apiUrl instead\r\n  * @param virtualPath\r\n  * @returns mapped path\r\n  * @internal\r\n  */\r\n  resolveServiceUrl(virtualPath: string) {\r\n    const scope = virtualPath.split('/')[0].toLowerCase();\r\n    \r\n    // stop if it's not one of our special paths\r\n    if (ApiUrlRoots.indexOf(scope) === -1)\r\n    return virtualPath;\r\n    \r\n    return this.http.apiRoot(ToSxcName) + scope + '/' + virtualPath.substring(virtualPath.indexOf('/') + 1);\r\n  }\r\n    \r\n    \r\n  /**\r\n   * Show a nice error with more infos around 2sxc\r\n   * @param result \r\n   * @returns \r\n   * @internal\r\n   */\r\n  showDetailedHttpError(result: any): any {\r\n    if (window.console)\r\n    console.log(result);\r\n    \r\n    // check if the error was just because a language file couldn't be loaded - then don't show a message\r\n    if (result.status === 404 &&\r\n      result.config &&\r\n      result.config.url &&\r\n      result.config.url.indexOf('/dist/i18n/') > -1) {\r\n        if (window.console)\r\n        console.log('just fyi: failed to load language resource; will have to use default');\r\n        return result;\r\n    }\r\n      \r\n    // if it's an unspecified 0-error, it's probably not an error but a cancelled request,\r\n    // (happens when closing popups containing angularJS)\r\n    if (result.status === 0 || result.status === -1)\r\n    return result;\r\n    \r\n    // let's try to show good messages in most cases\r\n    let infoText = 'Had an error talking to the server (status ' + result.status + ').';\r\n    const srvResp = result.responseText\r\n    ? JSON.parse(result.responseText) // for jquery ajax errors\r\n    : result.data; // for angular $http\r\n    if (srvResp) {\r\n      const msg = srvResp.Message;\r\n      if (msg) infoText += '\\nMessage: ' + msg;\r\n      const msgDet = srvResp.MessageDetail || srvResp.ExceptionMessage;\r\n      if (msgDet) infoText += '\\nDetail: ' + msgDet;\r\n      \r\n      \r\n      if (msgDet && msgDet.indexOf('No action was found') === 0)\r\n      if (msgDet.indexOf('that matches the name') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: you probably got the action-name wrong in your JS.';\r\n      else if (msgDet.indexOf('that matches the request.') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: Seems like the parameters are the wrong amount or type.';\r\n      \r\n      if (msg && msg.indexOf('Controller') === 0 && msg.indexOf('not found') > 0)\r\n      infoText +=\r\n      // tslint:disable-next-line:max-line-length\r\n      \"\\n\\nTip from 2sxc: you probably spelled the controller name wrong or forgot to remove the word 'controller' from the call in JS. To call a controller called 'DemoController' only use 'Demo'.\";\r\n      \r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    infoText += '\\n\\nif you are an advanced user you can learn more about what went wrong - discover how on 2sxc.org/help?tag=debug';\r\n    alert(infoText);\r\n    \r\n    return result;\r\n  }\r\n    \r\n  /**\r\n   * Test if the current code is in edit-mode and additional javascripts have been loaded to make it work\r\n   * @returns true if we are in edit-mode\r\n   */\r\n  isEditMode(): boolean {\r\n    return this.manage?._isEditMode() === true;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param resetCache \r\n   * @returns \r\n   * @internal\r\n   */\r\n  recreate(resetCache: boolean): Sxc {\r\n    if (resetCache) delete this.root._controllers[this.cacheKey]; // clear cache\r\n    return this.root(this.id, this.cbid) as any as Sxc; // generate new\r\n  }\r\n}\r\n\r\n// Help cach error on call of old code\r\n// Background: From v3 to v12 data had a unusualy system for retrieving data belonging to the module\r\n// We believe it's almost never used, but the TimelineJs App always used it, and we believe\r\n// 2-3 other examples may have as well. \r\n// Now in v13 sxc.data is used to get any kind of data,\r\n// and we want to make sure that old code will show a warning helping people fix this\r\n// All the old code would have started with sxc.data.on('load', ...) so this is where we give them the error\r\n// We only do this if it hasn't been done already\r\nfunction patchDataWithWarnings(data: any) {\r\n  if (!(data as any).on) {\r\n    (data as any).on = () => { throw warning };\r\n    Object.defineProperty(data, 'sourceUrl', {\r\n        get: function() { throw warning }\r\n    });\r\n  }\r\n}\r\n\r\nconst warning = 'Warning Obsolete Feature on 2sxc JS: the .data has been obsolete for a long time and is repurposed. \\n'\r\n+ 'If you are calling \".data.on(...)\" or \".data.sourceUrl\" you are running very old code. \\n' \r\n+ 'Guidance to fix this: https://go.2sxc.org/brc-13-id.';","/**\r\n * ContextIdentifier is used to initialize a Sxc object outside of the default context.\r\n * @public\r\n */\r\nexport class ContextIdentifier {\r\n  /**\r\n   * ZoneId of this Context\r\n   * @requires zoneId\r\n   */\r\n  zoneId: number;\r\n\r\n  /**\r\n   * AppId of this Context\r\n   * @requires appId\r\n   */\r\n  appId: number;\r\n\r\n  /** \r\n   * PageId of this Context (optional)\r\n   * @optional\r\n   */\r\n  pageId?: number;\r\n\r\n  /**\r\n   * ModuleId of this Context (optional)\r\n   * @optional\r\n   */\r\n  moduleId?: number;\r\n\r\n  /**\r\n   * Exclude pageId and moduleId headers in web requests.\r\n   * Internal - only used in edit-ui formulas. Any other use must be documented here.\r\n   * @internal\r\n   */\r\n  _noContextInHttpHeaders?: boolean;\r\n\r\n  /**\r\n   * Auto add the appid= and zoneid= to the url if not yet set\r\n   * Internal - only used in edit-ui formulas. Any other use must be documented here.\r\n   * @internal\r\n   */\r\n  _autoAppIdsInUrl?: boolean;\r\n\r\n  /**\r\n   * Marks the context as complete, so it won't merge in anything else \r\n   * WIP #CustomContext ATM for the updated edit-ui\r\n   * @internal\r\n   */\r\n  complete?: boolean;\r\n\r\n  /**\r\n   * WIP #CustomContext not really used yet\r\n   * @internal\r\n   */\r\n  blockId?: number;\r\n\r\n  /**\r\n   * Type Guard to determine if an object is a ContextIdentifier\r\n   * @param original \r\n   * @returns \r\n   * @internal\r\n   */\r\n  static is(original: unknown): original is ContextIdentifier {\r\n    const origAsContextId = original as ContextIdentifier;\r\n    return origAsContextId.zoneId !== undefined && origAsContextId.appId !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Internal\r\n   * @param ctx \r\n   * @internal\r\n   */\r\n  static ensureCompleteOrThrow(ctx: ContextIdentifier): ContextIdentifier {\r\n    // if it's fulfills the minimum requirements\r\n    if (ctx.zoneId && ctx.appId) return ctx; \r\n  \r\n    const msg = `It looks like the id given is a ContextIdentifier, but it's missing either zoneId or appId.`;\r\n    console.error(msg, ctx);\r\n    throw msg;\r\n  }\r\n  \r\n  /**\r\n   * Create a string-id to identify in a cache. \r\n   * @param ctx \r\n   * @returns \r\n   * @internal\r\n   */\r\n  static toCacheKey(ctx: ContextIdentifier): string {\r\n    this.ensureCompleteOrThrow(ctx);\r\n    return `${ctx.zoneId}/${ctx.appId}/${ctx.pageId}/${ctx.moduleId}/${ctx.blockId}`;\r\n  }\r\n}\r\n","import { UrlParams } from '..';\r\n\r\nconst urlManager = new UrlParams();\r\nconst urlDebugState = urlManager.isDebug() === true;\r\n\r\n/** @internal */\r\nexport class SxcGlobalDebug {\r\n    /**\r\n     * The load-debug state (provided by the url with debug=true)\r\n     */\r\n    load: boolean;\r\n\r\n    /**\r\n     * Cache breaker string, contains the version number of 2sxc if one is provided with sxcver=...\r\n     */\r\n    uncache: string;\r\n\r\n    constructor() {\r\n        this.load = urlDebugState;\r\n        this.uncache = urlManager.get('sxcver');\r\n    }\r\n}\r\n","import { ApiExtensionPlaceholder } from '../constants';\r\nimport { AppApiMarker, HasLog, HeaderNames, ToSxcName } from '../../../core';\r\nimport { ContextIdentifier, SxcGlobalEnvironment } from '..';\r\n\r\n/**\r\n * Global HTTP Service for information and helpers on `$2sxc.http`\r\n * @public\r\n */\r\nexport class SxcGlobalHttp extends HasLog {\r\n    /** @internal */\r\n    constructor(private env: SxcGlobalEnvironment) {\r\n        super('Sxc.Http');\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module context.\r\n     * @param id _optional_ module ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module and content-block context.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number, ctx: ContextIdentifier): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id?: number, cbid?: number, ctx?: ContextIdentifier): Record<string, string> {\r\n        const cl = this.log.call('headers', `${id}, ${cbid}`);\r\n        const fHeaders: Record<string, string> = {};\r\n        const pageId = (ctx?.pageId ?? this.env.page()).toString();\r\n        id = ctx?.moduleId ?? id;\r\n        cbid = ctx?.blockId ?? cbid;\r\n\r\n        // TODO: THE #_ignoreHeaders is only used in edit-ui, and should be changed to somehow say use-in-URL\r\n        if (!ctx?._noContextInHttpHeaders) {\r\n            if (id) fHeaders[HeaderNames.ModuleId] = id.toString();\r\n            if (cbid) fHeaders[HeaderNames.ContentBlockId] = cbid.toString();\r\n            fHeaders[HeaderNames.TabId] = pageId;\r\n            fHeaders[HeaderNames.PageId] = pageId;\r\n        }\r\n        fHeaders[this.env.rvtHeader()] = this.env.rvt();\r\n        return cl.return(fHeaders, `headers(id:${id}, cbid:${cbid})`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for a specific extension/endpoint\r\n     * @returns\r\n     * @internal Not relevant for 2sxc, only used if calling platform endpoints\r\n     */\r\n    apiRoot(endpointName: string): string {\r\n        const cl = this.log.call('apiRoot');\r\n        var result = this.env.api().replace(ApiExtensionPlaceholder, endpointName);\r\n        return cl.return(result, `apiRoot('${endpointName}')`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for Apps\r\n     * new in v12\r\n     * @internal\r\n     */\r\n     appApiRoot(): string {\r\n        const cl = this.log.call('appApiRoot');\r\n        // try to get it, or fall back to the previous / old convention\r\n        var result = this.env.appApi() ?? this.apiRoot(ToSxcName);\r\n        return cl.return(result, `appApiRoot()`);\r\n    }\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName?: string): string\r\n    {\r\n        const cl = this.log.call('apiUrl');\r\n        this.log.add(`apiUrl(url:'${url}', endpointName:'${endpointName}')`);\r\n\r\n        // null/undefined check\r\n        if(url == null) return url;\r\n\r\n        // if starts with http: or https: then ignore\r\n        if(!url || url.indexOf('http:') == 0 || url.indexOf('https:') == 0 || url.indexOf('//') == 0)\r\n            return cl.return(url);\r\n\r\n        // if no endpoint specified, then also skip absolute and relative urls\r\n        if(!endpointName && (url.indexOf('/') == 0 || url.indexOf('.') == 0))\r\n            return cl.return(url);\r\n\r\n        var baseUrl = url.toLocaleLowerCase().startsWith(AppApiMarker)\r\n            ? this.appApiRoot()\r\n            : this.apiRoot(endpointName || ToSxcName);\r\n\r\n\r\n        // ensure base ends with slash\r\n        if(baseUrl[baseUrl.length-1] != '/') baseUrl += '/';\r\n        // ensure url doesn't start with slash\r\n        if(url[0] == '/') url = url.slice(1);\r\n        return cl.return(baseUrl + url);\r\n    }\r\n}\r\n","import { Sxc, SxcGlobal } from '..';\r\nimport { ContextIdentifier } from './context-identifier';\r\n\r\ndeclare const window: Window;\r\n// TODO: copied from selectors in inpage project. Probably best to move selectors from inpage to core\r\nconst toolbarSelector = `.sc-menu[toolbar],.sc-menu[data-toolbar],[sxc-toolbar]`;\r\nconst sxcDivsSelector = 'div[data-edit-context]';\r\n\r\n/**\r\n * returns a 2sxc-instance of the id or html-tag passed in\r\n * @param id\r\n * @param cbid\r\n * @returns {}\r\n * @internal\r\n */\r\nexport function $2sxcGet(id: number | ContextIdentifier | HTMLElement | Sxc, cbid?: number): Sxc {\r\n    const $2sxc = window.$2sxc as SxcGlobal;\r\n    $2sxc.log.add('FindSxcInstance(' + id + ',' + cbid);\r\n    if (!$2sxc._controllers)\r\n        throw new Error('$2sxc not initialized yet');\r\n\r\n    // Test if it already is such an instance, in which case we just preserve it and return it\r\n    // Used in cases where the $2sxc(something) is just used to ensure it really is this\r\n    if (Sxc.is(id)) return id;\r\n\r\n    // check if it's a context identifier\r\n    let ctx: ContextIdentifier = null;\r\n    if (ContextIdentifier.is(id)) {\r\n        ctx = ContextIdentifier.ensureCompleteOrThrow(id);\r\n        // get moduleId or create fake, based on zone and app because this is used to identify the object in the cache\r\n        id = ctx.moduleId ?? ctx.zoneId * 100000 + ctx.appId;\r\n    } else if (id instanceof HTMLElement && id.matches(toolbarSelector) && !id.closest(sxcDivsSelector)) {\r\n        // for toolbars that are not inside 2sxc modules (e.g. in skin)\r\n        const contextAttr = 'sxc-context';\r\n        const contextAttribute = id.getAttribute(contextAttr);\r\n        var ctxTlbAttribute = JSON.parse(contextAttribute);\r\n        if (ctxTlbAttribute == null) throw new Error(`Toolbar outside of module without ${contextAttr} attribute found.`);\r\n        return $2sxcGet(ctxTlbAttribute);\r\n    } \r\n    // HTMLElement or anything else, try to auto-find...\r\n    if (typeof id === 'object') {\r\n        // if it's a dom-element, use auto-find\r\n        const idTuple = autoFind(id);\r\n        id = idTuple[0];\r\n        cbid = idTuple[1];\r\n    }\r\n\r\n    // if content-block is unknown, use id of module, and create an ID in the cache\r\n    if (!cbid) cbid = id;\r\n    const cacheKey = ctx != null ? ContextIdentifier.toCacheKey(ctx) : id + ':' + cbid;\r\n\r\n    // either get the cached controller from previous calls, or create a new one\r\n    if ($2sxc._controllers[cacheKey]) {\r\n        $2sxc.log.add('Cache found for: ' + cacheKey);\r\n        return $2sxc._controllers[cacheKey];\r\n    }\r\n\r\n    return ($2sxc._controllers[cacheKey]\r\n        = new Sxc(id, cbid, cacheKey, $2sxc, ctx));\r\n}\r\n\r\nfunction autoFind(domElement: HTMLElement): [number, number] {\r\n    const containerTag = domElement.closest('.sc-content-block');\r\n    if (!containerTag) return null;\r\n    const iid = containerTag.getAttribute('data-cb-instance');\r\n    const cbid = containerTag.getAttribute('data-cb-id');\r\n    if (!iid || !cbid) return null;\r\n    return [parseInt(iid, 10), parseInt(cbid, 10)];\r\n}\r\n","// this is the 2sxc-javascript API\r\n// 2sxc will include this automatically when a user has edit-rights\r\n// a template developer will typically use this to use the data-api to read 2sxc-data from the server\r\n// read more about this in the wiki: https://github.com/2sic/2sxc/wiki/JavaScript-%242sxc\r\n\r\nimport { buildSxcRoot } from './sxc-global/sxc-global-bootstrap';\r\n\r\nif (!window.$2sxc) // prevent double execution\r\n  window.$2sxc = buildSxcRoot();\r\n","import { TotalPopup } from '../tools/total-popup';\r\nimport { UrlParams } from '../tools/url-params';\r\nimport { Stats } from '../Stats';\r\nimport { SxcGlobalDebug, SxcGlobal, SxcGlobalEnvironment } from '..';\r\nimport { Insights, Log, SxcVersion } from '../../../core';\r\nimport { $2sxcGet } from './sxc-global-get';\r\nimport { SxcGlobalHttp } from './sxc-global-http';\r\n\r\n\r\n/**\r\n * Build a SXC Controller for the page. Should only ever be executed once\r\n * @internal\r\n */\r\nexport function buildSxcRoot(): SxcGlobal {\r\n    const rootApiV2 = getRootPartsV2();\r\n\r\n    const urlManager = new UrlParams();\r\n    const debug = new SxcGlobalDebug();\r\n    const stats = new Stats();\r\n\r\n\r\n    const addOn: Partial<SxcGlobal> = {\r\n        get: $2sxcGet,\r\n        _controllers: {} as any,\r\n        beta: {},\r\n        // 2022-06-01 2dm disabled, believe this is for the old .data\r\n        // _data: {},\r\n        // this creates a full-screen iframe-popup and provides a close-command to finish the dialog as needed\r\n        totalPopup: new TotalPopup(),\r\n        urlParams: urlManager,\r\n        // note: I would like to remove this from $2sxc, but it's currently\r\n        // used both in the inpage-edit and in the dialogs\r\n        // debug state which is needed in various places\r\n        debug,\r\n        stats: stats,\r\n        insights: (partName: string, index?: number, start?: number, length?: number) => Insights.show(partName, index, start, length),\r\n        _insights: Insights,\r\n\r\n        // 2022-06-01 2dm removed, don't think this is used anywhere\r\n        // mini-helpers to manage 2sxc parts, a bit like a dependency loader\r\n        // which will optimize to load min/max depending on debug state\r\n        // parts: {\r\n        //     getUrl(url: string, preventUnmin: boolean) {\r\n        //         // let r = url;// (preventUnmin || !debug.load) ? url : url.replace('.min', ''); // use min or not\r\n        //         if (debug.uncache && url.indexOf('sxcver') === -1)\r\n        //             return url + ((url.indexOf('?') === -1) ? '?' : '&') + 'sxcver=' + debug.uncache;\r\n        //         return url;\r\n        //     },\r\n        // },\r\n    };\r\n\r\n    const merged = Object.assign($2sxcGet, addOn, rootApiV2) as SxcGlobal;\r\n    merged.log.add('sxc controller built');\r\n\r\n    console.log(`$2sxc ${SxcVersion} with insights-logging - see https://go.2sxc.org/insights`)\r\n\r\n    return merged;\r\n}\r\n\r\n/** @internal */\r\nfunction getRootPartsV2(): Partial<SxcGlobal> {\r\n    const log = new Log('$2sxc', null, 'building');\r\n    var env = new SxcGlobalEnvironment();\r\n    return {\r\n        sysinfo: {\r\n            version: SxcVersion,\r\n            description: 'The 2sxc Controller - read more about it on docs.2sxc.org',\r\n        },\r\n        env: env,\r\n        http: new SxcGlobalHttp(env),\r\n        log: log,\r\n    };\r\n}\r\n"],"names":["exports","Symbol","toStringTag","Object","defineProperty","value","frame","undefined","callback","open","url","z","p","window","top","parent","wrapper","document","createElement","setAttribute","body","appendChild","ifrm","className","this","close","replace","frm","parentNode","removeChild","closeThis","$2sxc","totalPopup","dot","separator","spaceMarker","bools","specialValues","concat","toUrl","obj","encode","Array","isArray","Error","urlParam","toUrlRecursive","filter","x","length","join","toObj","decode","debug","parts","back","data","result","rec","keys","split","reduce","list","key","j","isNaN","Number","unflatStringsToObj","depth","mark","prefix","repeat","includes","isNumeric","replaceAll","encodeURIComponent","subItem","map","all","acc","val","arrayFlat","equals","v","stack","i","pair","dotCount","match","subKey","substring","slice","push","decodeURIComponent","restoreString","parseFloat","arr","str","spaceMarkerTemp","String","fromCharCode","MetadataTargetTypes","get","name","strResult","results","RegExp","exec","location","search","hash","matches","pathname","reverse","require","found","message","alert","isDebug","toLocaleLowerCase","ToolUrlObjects","watchDomChanges","LogEntryOptions","ToSxcName","SxcVersion","ApiUrlRoots","logName","parentLog","initialMessage","initLog","initLogInternal","log","rename","linkLog","add","Log","Debug","isDevBuild","cms","autoDump","run","commandInfo","ToolbarConfigLoaderV10","RuleManager","CommandTippy","keepData","indexOf","entries","callDepths","maxEntries","liveDump","_parentHasLiveDump","_parentHasKeepData","fullIdentifier","identifier","scope","id","idCache","randomString","shouldDebug","startTime","Date","getTime","substr","Math","min","rest","e","_prepareMessage","_addEntry","_prepareEntry","entry","addData","logData","msg","time","LogEntry","Function","toString","call","callParams","LogCall","_callDepthAdd","_callDepthRemove","last","pop","console","warn","dump","one","dumpOne","dumpList","start","index","forEach","line","source","stringLength","chars","randomstring","rnum","floor","random","initialEntry","behavior","lastMessage","processExtraBehavior","onlyAddIfNew","done","return","error","TypeSafeAssign","args","current","target","DeepClone","original","ignoreCircular","JSON","stringify","getCircularReplacer","parse","seen","WeakSet","_","has","ready","readyState","addEventListener","once","param","k","domFromString","string","dummyParent","insertAdjacentHTML","from","querySelectorAll","brokenScript","workingScript","attributes","attribute","nodeName","nodeValue","textContent","NoJQ","replaceWith","elements","children","element","offset","clientRect","getBoundingClientRect","scrollY","left","scrollX","width","computedStyle","getComputedStyle","offsetWidth","parseInt","getPropertyValue","height","offsetHeight","empty","childNodes","n","toBeReplaced","newElement","runScripts","parentElement","scripts","restores","script","type","replaceChild","restore","AssetsLoader","append","newElements","tagName","restoreType","others","copy","src","listener","onload","onerror","head","setTimeout","_data","Obj","history","setName","InsightsLogSet","logs","show","partName","part","logSet","autoLimit","logNames","s","HasLog","Insights","_insights","InsightsSingleton","DnnUiRoot","AntiForgeryTokenHeaderNameDnn","helpAutoDetect","env","dnnSfFallback","cl","dnnSfLoadWhenDocumentReady","$","sf","ServicesFramework","dnnSf","apiRoot","getServiceRoot","sfJsInfo","page","getTabId","root","api","appApi","rvtHeader","rvt","getAntiForgeryValue","uiRoot","platform","load","SelectorInputRvt","mainLoader","startMetaTagObserver","observer","MutationObserver","mutationsList","mut","attributeName","updateEnv","getMetaContent","observe","getJsApiMetaTag","childList","subtree","startInputRvtObserver","inputRvtObserver","loadRvtFromHiddenInput","hiddenField","querySelector","input","updateRvt","MetaProperty","retries","dynamicPageHelper","EnvironmentLoaderDynamic","loadMetaFromHeader","forceFallback","meta","EnvironmentDnnSfLoader","newJsInfo","ourMeta","getAttribute","metaLoader","EnvironmentMetaLoader","_jsApi","envSpecs","addSlash","endsWith","header","replacedRvt","newRvt","ensureReadyOrThrow","dialogQuery","partRequested","sxc","makePromise","settings","headers","promise","ajax","async","dataType","contentType","method","getActionUrl","beforeSend","xhr","hasOwnProperty","setRequestHeader","preventAutoFail","fail","showDetailedHttpError","controller","action","http","apiUrl","endpoint","params","settingsOrUrl","request","post","delete","put","controllerAction","controllerName","actionName","defaults","AjaxPromise","assign","fetchRaw","ctxParams","ctx","urlLower","_autoAppIdsInUrl","appId","zoneId","fetch","fetchJson","then","response","json","cbid","toLocaleUpperCase","urlAndParams","urlParts","nameInError","webApi","SxcPart","ContentApiRoot","SxcData","getAll","getInternal","getOne","getMany","criteria","fields","path","create","values","metadataFor","Target","Entity","Guid","For","update","idOrGuid","SxcDataServiceBase","urlParams","getStream","stream","getStreams","streams","runParams","cacheKey","_isSxcInstance","manage","SxcCms","_manage","initInstance","envAndHttp","loadEnv","SxcWebApi","on","warning","_translateInit","context","app","currentLanguage","localEnv","editContext","JsApi","rootEnv","final","SxcGlobalEnvironment","SxcGlobalHttp","is","thing","query","SxcQuery","resolveServiceUrl","virtualPath","toLowerCase","status","config","infoText","srvResp","responseText","Message","msgDet","MessageDetail","ExceptionMessage","isEditMode","_isEditMode","recreate","resetCache","_controllers","origAsContextId","ensureCompleteOrThrow","toCacheKey","pageId","moduleId","blockId","urlManager","UrlParams","urlDebugState","uncache","fHeaders","_noContextInHttpHeaders","endpointName","appApiRoot","baseUrl","startsWith","$2sxcGet","Sxc","ContextIdentifier","HTMLElement","closest","contextAttr","contextAttribute","ctxTlbAttribute","idTuple","domElement","containerTag","iid","autoFind","rootApiV2","sysinfo","version","description","SxcGlobalDebug","stats","Stats","addOn","beta","TotalPopup","insights","merged","buildSxcRoot"],"sourceRoot":""}