{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_analyze-settings_analyze-settings_comp-6cd38e.1a9e9c36f0f25cf5.js","mappings":"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","names":["AnalyzeSettingsKeyComponent","constructor","this","clipboard","transient","ClipboardService","agInit","params","key","value","refresh","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","copyToClipboard","MatRippleModule","i1","TippyDirective","styles","ctx_r0","totalResults","_r2","openDetails","AnalyzeSettingsTotalResultsComponent","stackItem","data","AnalyzeSettingsTotalResultsComponent_Conditional_0_Template","AnalyzeSettingsTotalResultsComponent_Conditional_1_Template","MatIconModule","i2","view_r1","Guid","Name","AnalyzeSettingsComponent","#viewsSvc","#analyzeSettingsSvc","#dialogRouter","dialog","gridOptions","buildGridOptions","ViewsService","AnalyzeSettingsService","DialogRoutingService","selectedView","signal","undefined","views","getAll","stack","computed","getStackSig","part","getParam","ngOnInit","#getStack","closeDialog","close","changeView","viewGuid","set","defaultGridOptions","columnDefs","ColumnDefinitions","TextWideActionClass","headerName","field","cellRenderer","AnalyzeSettingsValueComponent","TextNarrow","Items","width","cellClass","cellRendererParams","navRelative","Path","$event","AnalyzeSettingsComponent_For_19_Template","MatButtonModule","i3","RouterOutlet","MatFormFieldModule","i4","MatSelectModule","i5","i6","FormsModule","i7","MatOptionModule","SxcGridModule","i8"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { ClipboardService } from '../../../../shared/services/clipboard.service';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-key',\r\n  templateUrl: './analyze-settings-key.component.html',\r\n  styleUrls: ['./analyze-settings-key.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsKeyComponent implements ICellRendererAngularComp {\r\n  key: string;\r\n\r\n  constructor() { }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.key = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div matRipple class=\"key-box highlight\" [tippy]=\"key\" (click)=\"clipboard.copyToClipboard(key)\">\r\n  <span class=\"key\">{{ key }}</span>\r\n</div>\r\n","@if (totalResults <= 1) {\r\n  <div class=\"input-component no-click\">\r\n    <div>{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (totalResults > 1) {\r\n  <div matRipple class=\"input-component highlight\" tippy=\"Open details\" (click)=\"openDetails()\">\r\n    <div class=\"text\">{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { SettingsStackItem } from '../analyze-settings.models';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results.models';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-total-results',\r\n  templateUrl: './analyze-settings-total-results.component.html',\r\n  styleUrls: ['./analyze-settings-total-results.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsTotalResultsComponent implements ICellRendererAngularComp {\r\n  totalResults: number;\r\n\r\n  private stackItem: SettingsStackItem;\r\n  private params: ICellRendererParams & AnalyzeSettingsTotalResultsParams;\r\n\r\n  agInit(params: ICellRendererParams & AnalyzeSettingsTotalResultsParams): void {\r\n    this.totalResults = params.value;\r\n    this.params = params;\r\n    this.stackItem = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openDetails(): void {\r\n    this.params.openDetails(this.stackItem);\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-mdc-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Analyze {{ part }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n  <div class=\"padding-class\">\r\n    <p class=\"dialog-description\">\r\n      Settings and Resources are consolidated from many sources. Here you see what the resulting values would be.\r\n    </p>\r\n    <router-outlet></router-outlet>\r\n    <mat-form-field color=\"accent\" class=\"view-select-box\">\r\n      <mat-label>Merge settings / resources of a View</mat-label>\r\n      <mat-select [ngModel]=\"selectedView()\" (ngModelChange)=\"changeView($event)\">\r\n        <mat-option [value]=\"undefined\">No view selected - this is how APIs see the data</mat-option>\r\n        @for (view of views(); track view) {\r\n        <mat-option [value]=\"view.Guid\">{{ view.Name }}</mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper padding-class\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"stack()()\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n    <div class=\"grid-more-actions-box\"></div>\r\n  </div>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, computed, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Of, transient } from '../../../../../../core';\r\nimport { ColumnDefinitions } from '../../../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { SxcGridModule } from '../../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ViewsService } from '../../services';\r\nimport { AnalyzeSettingsService } from '../../services/analyze-settings.service';\r\nimport { AnalyzeSettingsKeyComponent } from './analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from './analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results/analyze-settings-total-results.models';\r\nimport { AnalyzeSettingsValueComponent } from './analyze-settings-value/analyze-settings-value.component';\r\nimport { AnalyzeParts } from './analyze-settings.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings',\r\n  templateUrl: './analyze-settings.component.html',\r\n  styleUrls: ['./analyze-settings.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class AnalyzeSettingsComponent implements OnInit {\r\n  part: Of<typeof AnalyzeParts>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  #viewsSvc = transient(ViewsService);\r\n  #analyzeSettingsSvc = transient(AnalyzeSettingsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AnalyzeSettingsComponent>,\r\n  ) {\r\n    this.part = this.#dialogRouter.getParam('part') as Of<typeof AnalyzeParts>;\r\n  }\r\n\r\n  selectedView = signal<string>(undefined);\r\n  views = this.#viewsSvc.getAll();\r\n\r\n  stack = computed(() =>\r\n    this.#analyzeSettingsSvc.getStackSig(this.part, undefined, this.selectedView(), true)\r\n  );\r\n\r\n  ngOnInit(): void {\r\n    this.#getStack();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  changeView(viewGuid: string): void {\r\n    this.selectedView.set(viewGuid);\r\n    this.#getStack();\r\n  }\r\n\r\n\r\n  #getStack(): void {\r\n    this.stack();\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.TextWideActionClass,\r\n          headerName: 'Key',\r\n          field: 'Path',\r\n          cellRenderer: AnalyzeSettingsKeyComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideActionClass,\r\n          headerName: 'Value',\r\n          field: '_value',\r\n          cellRenderer: AnalyzeSettingsValueComponent,\r\n        },\r\n        {\r\n          field: 'Source',\r\n          ...ColumnDefinitions.TextNarrow,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          headerName: 'Total',\r\n          field: 'TotalResults',\r\n          width: 72,\r\n          cellClass: 'no-outline',\r\n          cellRenderer: AnalyzeSettingsTotalResultsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: AnalyzeSettingsTotalResultsParams = {\r\n              openDetails: (stackItem) => {\r\n                this.#dialogRouter.navRelative([`details/${this.selectedView()}/${stackItem.Path}`]);\r\n              },\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}