{"version":3,"file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.7d767d5ce52add10.js","mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","MatIconModule","i1","TippyDirective","styles","CheckboxCellComponent","onChange","event","currentTarget","checked","$event","isDisabled","ctx_r0","pendingApps","gridOptions","AddAppFromFolderComponent","#isAddFromFolderEnabled","#appsListService","constructor","dialog","snackBar","hostClass","buildGridOptions","installing","inject","FeaturesScopedService","isEnabled","FeatureNames","AppSyncWithSiteFiles","transient","AppsListService","getPendingApps","closeDialog","close","app","enabled","pendingAppsTemp","push","splice","indexOf","set","install","open","undefined","duration","installPendingApps","subscribe","error","next","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","ColumnDefinitions","ItemsText","flex","sort","pendingApp","ServerFolder","Folder","Version","Description","i2","hostVars","hostBindings","AddAppFromFolderComponent_Conditional_8_Template","AddAppFromFolderComponent_Conditional_9_Template","tmp_1_0","length","tmp_2_0","MatDialogActions","MatButtonModule","i3","FeatureTextInfoComponent","SxcGridModule","i4","ctx_r1","feature","_r3","clipboard","copyToClipboard","guid","_r4","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","dialogSpecs","specs","input","computedObj","ClipboardService","MAT_DIALOG_DATA","inputs","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","SafeHtmlPipe","TranslateModule","i5","encapsulation","_c0","FeatureInfoDialogComponent","#featureDetailSvc","dialogData","route","FeatureDetailService","featureId","signal","ngOnInit","snapshot","featureDetails","getFeatureDetail","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","ContentTypeFieldsReuseDefinitions","AppExportAssetsAdvanced","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","openDialog","icon","FeatureComponentBase","super","asInfo","ngContentSelectors","FeatureTextInfoComponent_Conditional_0_Template","show","webApiFeatureDetails","HttpServiceBase","getSignal","getFeatureDetails","nameIds","featureList","xx","update","prev","getHttpApiUrl","__ngFactoryType__","factory","ɵfac","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","MatDialog","ViewContainerRef","ChangeDetectorRef","getCurrent","feat","openFeatureDialog","viewContainerRef","changeDetectorRef","autoFocus","markForCheck","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n  standalone: true,\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Add App from Folder</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n    <p>\r\n      Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n    </p>\r\n    @if (pendingApps()?.length == 0) {\r\n    <p>\r\n      Nothing to show. All apps in the 2sxc folder are already installed.\r\n    </p>\r\n    }\r\n    @if (pendingApps()?.length > 0) {\r\n    <div>\r\n      <ag-grid-angular class=\"ag-theme-material eav-grid\" [rowData]=\"pendingApps()\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n    </div>\r\n    }\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps().length === 0 || installing\"\r\n      (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, WritableSignal, inject } from \"@angular/core\";\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../core';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    FeatureTextInfoComponent,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class AddAppFromFolderComponent  {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  installing: boolean = false;\r\n\r\n  public features = inject(FeaturesScopedService);\r\n  #isAddFromFolderEnabled = this.features.isEnabled[FeatureNames.AppSyncWithSiteFiles];\r\n  #appsListService = transient(AppsListService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AddAppFromFolderComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {}\r\n\r\n  pendingApps = this.#appsListService.getPendingApps() as WritableSignal<PendingApp[]>;\r\n\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    const pendingAppsTemp = this.pendingApps();\r\n\r\n    if (enabled)\r\n      pendingAppsTemp.push(app);\r\n    else\r\n      pendingAppsTemp.splice(pendingAppsTemp.indexOf(app), 1);\r\n\r\n    this.pendingApps.set(pendingAppsTemp);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.#appsListService.installPendingApps(this.pendingApps()).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.#isAddFromFolderEnabled(),\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Name',\r\n          flex: 1,\r\n          sort: 'asc',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\n","@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n    TranslateModule,\r\n  ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    FeatureDetailsDialogComponent\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId());\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() { super(); }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetail(nameId: string): Signal<Feature> {\r\n    return this.getSignal<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n      this.xx(nameId).subscribe(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n\r\n  // TODO: Daniel fragen, getFeatureDetails(nameIds: string[]) ist nicht korrekt\r\n  // getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n  //   console.log('getFeatureDetails', nameIds);\r\n  //   const featureList = signal<Feature[]>([]);\r\n  //   for (const nameId of nameIds) {\r\n  //   console.log('getFeatureDetails', nameId);\r\n\r\n\r\n  //     const x = this.getFeatureDetail(nameId) ;\r\n  //     featureList.update(prev => [...prev, x()]);\r\n  //   }\r\n  //   return featureList;\r\n  // }\r\n\r\n  // Remove later\r\n  xx(nameId: string): Observable<Feature> {\r\n    return this.getHttpApiUrl<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesScopedService } from '../features-scoped.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesScopedService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml', standalone: true })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}