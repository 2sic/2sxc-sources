{"version":3,"mappings":"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","names":["static","appId","items","ContentTypeName","eavConstants","For","Target","TargetType","Number","Singleton","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","i0","ctx_r5","FeatureTextInfoComponent","FeatureComponentBase","constructor","dialog","viewContainerRef","featuresService","changeDetectorRef","super","this","BehaviorSubject","viewModel$","combineLatest","feature$","asInfo$","show$","pipe","map","feature","asInfo","show","icon","value","next","selectors","oxw","ctx_r8","ctx_r10","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","getFeatureDetails","copyToClipboard","text","open","duration","findOutMore","link","window","closeDialog","close","MAT_DIALOG_DATA","featureNameId$","switchMap","featName","get$","showIf$","feat","showIf","Z","T","Enabled","_a","featureNameId","openDialog","featureId","autoFocus","data","width","markForCheck","inputs","BooleanFilterComponent","agInit","params","filterParams","isFilterActive","filter","doesFilterPass","valueGetter","api","colDef","column","columnApi","context","node","getValue","field","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","ctx","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges"],"sources":["./projects/eav-ui/src/app/app-administration/app-admin-helpers.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts"],"sourcesContent":["import { eavConstants } from '../shared/constants/eav.constants';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\n\r\nexport class AppAdminHelpers {\r\n  public static getLightSpeedEditParams(appId: number) {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          ContentTypeName: eavConstants.appMetadata.LightSpeed.ContentTypeName,\r\n          For: {\r\n            Target: eavConstants.metadata.app.target,\r\n            TargetType: eavConstants.metadata.app.targetType,\r\n            Number: appId,\r\n            Singleton: true,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    return form;\r\n  }\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n};\r\n","<ng-container *ngIf=\"viewModel$ | async as vm; else loading\">\r\n  <div class=\"feature-text-info\" *ngIf=\"vm.show\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n    <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","<div *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ vm.feature.Name }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n\r\n  <div class=\"info-box\">\r\n    <div class=\"info-row\">\r\n      <div class=\"info-row__label\">{{ \"Features.Status\" | translate }}</div>\r\n      <div class=\"info-row__value\">\r\n        <span>{{ (vm.feature.Enabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"info-row__label\">ID</div>\r\n      <div class=\"info-row__value click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button class=\"dialog-component-button\" color=\"accent\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"dialog-component-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</div>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.Enabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      // TODO: this looks wrong. I believe we have some way to standardize dialog sizes...\r\n      width: '600px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_app-administration_app-admin-helpers_ts-projects_eav-ui_src_a-463e21.5e577560c3f4a132.js"}