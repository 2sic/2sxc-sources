{"version":3,"mappings":"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","names":["i0","ctx_r6","ctx_r8","ctx_r10","ctx_r12","ContentTypeFieldsActionsComponent","constructor","agInit","params","this","field","data","metadataCount","Metadata","Object","keys","filter","key","length","enablePermissions","InputType","InputTypeConstants","Type","DataTypeConstants","refresh","openMetadata","onOpenMetadata","rename","onRename","openPermissions","onOpenPermissions","deleteField","onDelete","selectors","ctx_r2","ContentTypeFieldsInputTypeComponent","value","changeInputType","onChangeInputType","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsTitleComponent","isTitle","setTitle","onSetTitle","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","ctx_r4","ctx_r5","ctx_r7","ctx_r9","ContentTypeFieldsComponent","BaseComponent","router","route","dialogRef","contentTypesService","contentTypesFieldsService","snackBar","super","BehaviorSubject","undefined","buildGridOptions","snapshot","paramMap","get","ngOnInit","fetchFields","subscription","add","refreshOnChildClosedShallow","subscribe","viewModel$","combineLatest","contentType$","fields$","pipe","map","contentType","fields","ngOnDestroy","complete","closeDialog","close","onGridReady","gridApi","api","columnApi","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","Id","reOrder","onRowDragMove","movingNode","node","overNode","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","onSortChanged","columnStates","getColumnState","sortApplied","some","state","sort","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","filterApplied","shouldSuppress","rowDragSuppressed","navigate","contentTypeStaticName","relativeTo","nameCellRenderer","currentField","inputType","EmptyFieldHelpers","isGroupOpen","StaticName","callback","retrieveContentType","of","getFields","forkJoin","editFieldMetadata","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","EntityId","ContentTypeName","For","Target","eavConstants","TargetType","Number","Prefill","Name","open","duration","delete","confirm","GoToPermissions","url","GoToMetadata","defaultGridOptions","getRowClass","rowClass","EditInfo","ReadOnly","push","columnDefs","rowDrag","width","cellClass","split","valueGetter","IsTitle","cellRenderer","cellRendererParams","flex","minWidth","sortable","onCellClicked","headerClass","headerName","substring","l","i","_a","All","_b","Notes","pinned","BaseSubsinkComponent","refreshOnChildClosedDeep","events","NavigationEnd","startWith","firstChild","pairwise","hadChild","hasChild","features","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns"],"sources":["./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts"],"sourcesContent":["<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Metadata\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\">local_offer</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\">local_offer</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Permissions\" *ngIf=\"!field.EditInfo.ReadOnly && enablePermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\">person</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly || !enablePermissions\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\">person</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly\" (click)=\"rename()\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.ReadOnly || field.IsTitle\" (click)=\"deleteField()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.field);\r\n  }\r\n\r\n  rename(): void {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  openPermissions(): void {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n\r\n  deleteField(): void {\r\n    this.params.onDelete(this.field);\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\" *ngIf=\"!field.EditInfo.ReadOnly\" (click)=\"changeInputType()\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"input-component disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n  <div class=\"text disabled\">{{ value }}</div>\r\n  <div class=\"like-button disabled\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"hasFormulas\" tippy=\"Has Formulas\">functions</mat-icon>\r\n  <mat-icon *ngIf=\"isEphemeral\" tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!field.EditInfo.ReadOnly\" tippy=\"Use as title field\"\r\n    (click)=\"setTitle()\">\r\n    <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"field.EditInfo.ReadOnly\">\r\n    <mat-icon>{{ isTitle ? 'star' : 'star_outline' }}</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../models/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","<div class=\"nav-component-wrapper\" *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>\r\n        <ng-container>\r\n          {{ vm.contentType.Label || vm.contentType.Name }}\r\n        </ng-container>\r\n        Fields\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.fields\" [gridOptions]=\"gridOptions\"\r\n      (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\" (rowDragMove)=\"onRowDragMove($event)\"\r\n      (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\" (filterChanged)=\"onFilterChanged($event)\"\r\n      [ngClass]=\"{\r\n        'grid-sorted': sortApplied,\r\n        'grid-filtered': filterApplied\r\n      }\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"vm.contentType == null || vm.contentType.EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>","// tslint:disable-next-line:max-line-length\r\nimport { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, Observable, combineLatest, forkJoin, map, of } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { ItemAddIdentifier, EditForm, ItemEditIdentifier } from '../shared/models/edit-form.model';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\nimport { EmptyFieldHelpers } from '../edit/form/fields/empty/empty-field-helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n})\r\nexport class ContentTypeFieldsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  fields$ = new BehaviorSubject<Field[]>(undefined);\r\n  gridOptions = this.buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentTypeFieldsViewModel>;\r\n\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super(router, route);\r\n   }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchFields(); }));\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.fields$\r\n    ]).pipe(\r\n      map(([contentType, fields]) => ({ contentType, fields }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const inputType = currentField.InputType;\r\n    // const empties: string[] = [InputTypeConstants.EmptyDefault, InputTypeConstants.EmptyEnd];\r\n    // if (empties.includes(currentField.InputType)) {\r\n    if (EmptyFieldHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (EmptyFieldHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (EmptyFieldHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null) { callback(); }\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          TargetType: eavConstants.metadata.attribute.targetType,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.ReadOnly) { rowClass.push('disable-row-drag'); }\r\n        if (EmptyFieldHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (EmptyFieldHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.IsTitle;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsTitleParams = {\r\n              onSetTitle: (field) => this.setTitle(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          onCellClicked: (params) => {\r\n            const field: Field = params.data;\r\n            this.editFieldMetadata(field);\r\n          },\r\n          cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.StaticName;\r\n          },\r\n        },\r\n        {\r\n          field: 'Type',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Type;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (params) => {\r\n            const field: Field = params.data;\r\n            return `${field.EditInfo.ReadOnly ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' ');\r\n          },\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n            return inputType;\r\n          },\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsInputTypeParams = {\r\n              onChangeInputType: (field) => this.changeInputType(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Name;\r\n          },\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Notes;\r\n          },\r\n        },\r\n        {\r\n          width: 122,\r\n          cellClass: 'secondary-action no-padding'.split(' '),\r\n          pinned: 'right',\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsActionsParams = {\r\n              onRename: (field) => this.rename(field),\r\n              onDelete: (field) => this.delete(field),\r\n              onOpenPermissions: (field) => this.openPermissions(field),\r\n              onOpenMetadata: (field) => this.openMetadata(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface ContentTypeFieldsViewModel {\r\n  contentType: ContentType;\r\n  fields: Field[];\r\n}","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n  \r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  protected refreshOnChildClosedDeep() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.ee1c247d84a8e500.js"}