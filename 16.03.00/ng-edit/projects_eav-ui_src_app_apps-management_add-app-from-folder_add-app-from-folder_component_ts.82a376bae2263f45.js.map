{"version":3,"mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","i0","CheckboxCellComponent","onChange","event","currentTarget","checked","ctx","ctx_r5","ctx_r7","AddAppFromFolderComponent","BaseSubsinkComponent","constructor","dialogRef","appsListService","snackBar","featuresService","super","buildGridOptions","Subject","BehaviorSubject","ngOnInit","subscription","add","isEnabled$","FeatureNames","pipe","distinctUntilChanged","subscribe","isAddFromFolderEnabled$","viewModel$","combineLatest","refreshApps$","startWith","undefined","switchMap","getPendingApps","catchError","of","share","map","pendingApps","ngOnDestroy","complete","closeDialog","close","app","enabled","push","splice","indexOf","install","installing","open","duration","installPendingApps","error","next","Object","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","isDisabled","flex","sort","filter","pendingApp","ServerFolder","Folder","Version","Description","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FeatureTextInfoComponent","FeatureComponentBase","dialog","viewContainerRef","changeDetectorRef","feature$","asInfo$","show$","feature","asInfo","show","icon","oxw","ctx_r8","ctx_r10","FeatureInfoDialogComponent","dialogData","featureDetailService","getFeatureDetails","copyToClipboard","text","findOutMore","link","window","MAT_DIALOG_DATA","featureNameId$","featName","get$","showIf$","feat","showIf","N","_","Enabled","_a","featureNameId","openDialog","featureId","autoFocus","markForCheck","inputs","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Add App from Folder</div>\r\n  </div>\r\n\r\n  <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n  \r\n  <p class=\"dialog-description\">\r\n    Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n  </p>\r\n\r\n  <p class=\"dialog-description\" *ngIf=\"vm.pendingApps?.length == 0\">\r\n    Nothing to show. All apps in the 2sxc folder are already installed.\r\n  </p>\r\n\r\n  <div class=\"grid-wrapper\" *ngIf=\"vm.pendingApps?.length > 0\">\r\n    <ag-grid-angular style=\"height: 200px; width: auto;\" class=\"ag-theme-material\"\r\n      [rowData]=\"vm.pendingApps\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps.length === 0 || installing\" (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </div> \r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, catchError, combineLatest, distinctUntilChanged, map, Observable, of, share, startWith, Subject, Subscription, switchMap } from \"rxjs\";\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n})\r\nexport class AddAppFromFolderComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  pendingApps: PendingApp[] = [];\r\n  installing: boolean = false;\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n  private isAddFromFolderEnabled$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<AddAppFromFolderViewModel>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AddAppFromFolderComponent>,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n    private featuresService: FeaturesService,\r\n  ) { \r\n    super();\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.subscription.add(this.featuresService.isEnabled$(FeatureNames.AppSyncWithSiteFiles)\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(this.isAddFromFolderEnabled$)\r\n    ); \r\n    this.viewModel$ = combineLatest([\r\n      this.refreshApps$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.appsListService.getPendingApps().pipe(catchError(() => of(undefined)))),\r\n        share()\r\n      )\r\n    ]).pipe(\r\n      map(([pendingApps]) => ({ pendingApps })),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshApps$.complete();\r\n    super.ngOnDestroy();\r\n  } \r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    if (enabled)\r\n      this.pendingApps.push(app);\r\n    else\r\n      this.pendingApps.splice(this.pendingApps.indexOf(app), 1);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.appsListService.installPendingApps(this.pendingApps).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.isAddFromFolderEnabled$.value,\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 1,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface AddAppFromFolderViewModel {\r\n  pendingApps: PendingApp[];\r\n}","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n};\r\n","<ng-container *ngIf=\"viewModel$ | async as vm; else loading\">\r\n  <div class=\"feature-text-info\" *ngIf=\"vm.show\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n    <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","<div *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ vm.feature.Name }}</div>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n\r\n  <div class=\"info-box\">\r\n    <div class=\"info-row\">\r\n      <div class=\"info-row__label\">{{ \"Features.Status\" | translate }}</div>\r\n      <div class=\"info-row__value\">\r\n        <span>{{ (vm.feature.Enabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"info-row__label\">ID</div>\r\n      <div class=\"info-row__value click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button class=\"dialog-component-button\" color=\"accent\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"dialog-component-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </div>\r\n\r\n</div>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.Enabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      // TODO: this looks wrong. I believe we have some way to standardize dialog sizes...\r\n      width: '600px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.82a376bae2263f45.js"}