{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/app-administration/services/web-apis.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/ng-dialogs/src/app/metadata/metadata.component.html","./projects/ng-dialogs/src/app/metadata/metadata.component.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"names":["http","context","dnnContext","getDialogSettings","appId","this","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","AppDialogConfigService","getContentInfo","scope","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppPartsService","getAppInfo","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ExportAppService","webApiAppPartsRoot","importAppParts","file","formData","FormData","append","post","resetApp","ImportAppPartsService","webApiQueryRun","webApiQueryRoot","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","getAll","contentType","importQuery","pipe","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","PipelinesService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ViewsService","global","path","mask","withSubfolders","paths","map","splitIndex","lastIndexOf","fileExtIndex","folder","substring","name","create","templateKey","purpose","details","apiPath","WebApisService","contentTypeStaticName","getColumns","staticName","importItem","ContentItemsService","webApiAppRoot","importApp","changedName","ImportAppService","agInit","refresh","deleteMetadata","onDelete","data","MetadataActionsComponent","dialogRef","contentTypesService","hostClass","dropdownInsertValue","guidedContentType","advancedMode","ngOnInit","contentTypes$","BehaviorSubject","scopeOptions$","buildForm","fetchScopes","templateVars$","combineLatest","contentTypes","scopeOptions","ngOnDestroy","complete","closeDialog","close","toggleGuidedContentType","toggleAdvancedMode","event","checked","confirm","formValues","form","getRawValue","addControl","controls","valueChanges","startWith","value","distinctUntilChanged","subscribe","newScope","patchValue","prompt","some","option","next","fetchContentTypes","retrieveContentTypes","getScopes","scopes","MetadataSaveDialogComponent","Number","Guid","String","Target","router","route","metadataService","snackBar","entitiesService","contentItemsService","dialog","viewContainerRef","changeDetectorRef","modules","gridOptions","frameworkComponents","idFieldComponent","metadataActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","filter","cellRendererParams","tooltipGetter","metadata","flex","minWidth","sort","onCellClicked","editMetadata","bind","valueGetter","_Type","Name","Description","pinned","metadata$","recommendations$","itemFor$","undefined","fabOpen$","subscription","Subscription","targetType","parseInt","snapshot","paramMap","keyType","key","title","decodeURIComponent","fetchFor","fetchMetadata","refreshOnChildClosed","recommendations","itemFor","fabOpen","unsubscribe","openChange","createMetadata","recommendation","CreateEmpty","For","calculateItemFor","error","duration","createMetadataForm","autoFocus","afterClosed","items","ContentTypeName","formUrl","navigate","relativeTo","markForCheck","Object","values","find","type","target","item","i","getMetadata","Items","filtered","Recommendations","r","Count","EntityId","warning","DeleteWarning","Title","add","events","firstChild","pairwise","MetadataComponent","isError","isShort","toggleIsShort","FieldHintComponent","onClick","stopPropagation","ClickStopPropagationDirective","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","readAsText"],"mappings":"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","file":"projects_ng-dialogs_src_app_metadata_metadata_component_ts.aaaf84d8d1a594bbd92c.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFileCreate, webApiAppFilesAll, webApiExplorer } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { WebApi, WebApiDetails } from '../models';\r\n\r\n@Injectable()\r\nexport class WebApisService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: '', mask: '*Controller.cs', withSubfolders: 'true' },\r\n    }).pipe(\r\n      map(paths => {\r\n        const webApis: WebApi[] = paths.map(path => {\r\n          const splitIndex = path.lastIndexOf('/');\r\n          const fileExtIndex = path.lastIndexOf('.');\r\n          const folder = path.substring(0, splitIndex);\r\n          const name = path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path, folder, name };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  create(path: string, templateKey: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        global: 'false',\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  details(apiPath: string) {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(webApiExplorer), {\r\n      params: { path: apiPath },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: MetadataActionsParams;\r\n\r\n  agInit(params: MetadataActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata() {\r\n    const metadata: MetadataItem = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogTemplateVars, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  templateVars$: Observable<MetadataSaveDialogTemplateVars>;\r\n  guidedContentType = true;\r\n  advancedMode = false;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.templateVars$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const templateVars: MetadataSaveDialogTemplateVars = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(eavConstants.scopes.default.value));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>{{ title || 'Metadata' }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"!data.itemFor\">This item is not metadata for anything else.</ng-container>\r\n      <ng-container *ngIf=\"data.itemFor\">\r\n        This item is metadata for:\r\n        <br>Target: {{ data.itemFor.Target }}\r\n        <ng-container *ngIf=\"data.itemFor.Number\"><br>Number: {{ data.itemFor.Number }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Guid\"><br>Guid: {{ data.itemFor.Guid }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.String\"><br>String: {{ data.itemFor.String }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Title\"><br>Title: {{ data.itemFor.String }}</ng-container>\r\n      </ng-container>\r\n    </p>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.metadata\" [modules]=\"modules\"\r\n        [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n\r\n      <div class=\"grid-more-actions-box\"></div>\r\n\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" *ngIf=\"data.recommendations.length === 0\"\r\n        tippy=\"Create a new metadata for this item\" (click)=\"createMetadata()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': data.fabOpen }\"\r\n        *ngIf=\"data.recommendations.length > 0\" (openChange)=\"openChange($event)\">\r\n        <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n          <button mat-fab>\r\n            <mat-icon class=\"spin180\">{{ data.fabOpen ? 'close' : 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-trigger>\r\n\r\n        <eco-fab-speed-dial-actions>\r\n          <button mat-mini-fab label=\"Other Content Type\" (click)=\"createMetadata()\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-mini-fab *ngFor=\"let recommendation of data.recommendations\" [attr.label]=\"recommendation.Title\"\r\n            (click)=\"createMetadata(recommendation)\">\r\n            <mat-icon>{{ recommendation.Icon || 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-actions>\r\n      </eco-fab-speed-dial>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n","import { AllCommunityModules, CellClickedEvent, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { EavFor } from '../../../../edit/shared/models/eav';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { MetadataActionsComponent } from './ag-grid-components/metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './ag-grid-components/metadata-actions/metadata-actions.models';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataItem, MetadataRecommendation, MetadataTemplateVars } from './models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent implements OnInit, OnDestroy {\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      metadataActionsComponent: MetadataActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (metadata: MetadataItem) => `ID: ${metadata.Id}\\nGUID: ${metadata.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Title', field: 'Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: this.editMetadata.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Content Type', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => {\r\n          const metadata = params.data as MetadataItem;\r\n          return `${metadata._Type.Name}${metadata._Type.Description ? ` (${metadata._Type.Description})` : ''}`;\r\n        },\r\n      },\r\n      {\r\n        width: 42, cellClass: 'secondary-action no-padding', cellRenderer: 'metadataActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: this.deleteMetadata.bind(this),\r\n        } as MetadataActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private metadata$ = new BehaviorSubject<MetadataItem[]>([]);\r\n  private recommendations$ = new BehaviorSubject<MetadataRecommendation[]>([]);\r\n  private itemFor$ = new BehaviorSubject<EavFor | undefined>(undefined);\r\n  private fabOpen$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('type'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  templateVars$: Observable<MetadataTemplateVars>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.refreshOnChildClosed();\r\n\r\n    this.templateVars$ = combineLatest([this.metadata$, this.recommendations$, this.itemFor$, this.fabOpen$]).pipe(\r\n      map(([metadata, recommendations, itemFor, fabOpen]) => {\r\n        const templateVars: MetadataTemplateVars = {\r\n          metadata,\r\n          recommendations,\r\n          itemFor,\r\n          fabOpen,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.recommendations$.complete();\r\n    this.itemFor$.complete();\r\n    this.fabOpen$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  createMetadata(recommendation?: MetadataRecommendation) {\r\n    if (recommendation) {\r\n      if (recommendation.CreateEmpty) {\r\n        this.snackBar.open(`Creating ${recommendation.Name}...`);\r\n        this.entitiesService.create(recommendation.Id, { For: this.calculateItemFor() }).subscribe({\r\n          error: () => {\r\n            this.snackBar.open(`Creating ${recommendation.Name} failed. Please check console for more info`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n          next: () => {\r\n            this.snackBar.open(`Created ${recommendation.Name}`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n        });\r\n      } else {\r\n        this.createMetadataForm(recommendation.Id);\r\n      }\r\n      return;\r\n    }\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n      this.createMetadataForm(contentType);\r\n    });\r\n  }\r\n\r\n  private createMetadataForm(contentType: string) {\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: contentType,\r\n        For: this.calculateItemFor(),\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private calculateItemFor(): EavFor {\r\n    const itemFor: EavFor = {\r\n      Target: Object.values(eavConstants.metadata).find(option => option.type === this.targetType)?.target ?? this.targetType.toString(),\r\n      ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n      ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n      ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n    };\r\n    return itemFor;\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      if (item?.For) {\r\n        this.itemFor$.next(item.For);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata(this.targetType, this.keyType, this.key).subscribe(metadata => {\r\n      this.metadata$.next(metadata.Items);\r\n      const filtered = metadata.Recommendations.filter(r => r.Count === 1 && !metadata.Items.some(i => i._Type.Id === r.Id));\r\n      this.recommendations$.next(filtered);\r\n    });\r\n  }\r\n\r\n  private editMetadata(params: CellClickedEvent) {\r\n    const metadata: MetadataItem = params.data;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: MetadataItem) {\r\n    let warning = this.recommendations$.value.find(r => r.Id === metadata._Type.Id)?.DeleteWarning || '';\r\n    warning = warning\r\n      ? `${warning}\\n\\nAre you sure you want to delete '${metadata.Title}' (${metadata.Id})?`\r\n      : `Delete '${metadata.Title}' (${metadata.Id})?`;\r\n    if (!confirm(warning)) { return; }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchMetadata();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///"}