{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/app-administration/services/web-apis.service.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"names":["http","context","dnnContext","getDialogSettings","appId","this","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","AppDialogConfigService","getContentInfo","scope","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppPartsService","getAppInfo","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ExportAppService","webApiAppPartsRoot","importAppParts","file","formData","FormData","append","post","resetApp","ImportAppPartsService","webApiQueryRun","webApiQueryRoot","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","getAll","contentType","importQuery","pipe","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","PipelinesService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ViewsService","global","path","mask","withSubfolders","paths","map","splitIndex","lastIndexOf","fileExtIndex","folder","substring","name","create","templateKey","purpose","details","apiPath","WebApisService","filter","idFilterString","agInit","isFilterActive","idFilter","length","doesFilterPass","values","valueGetter","node","some","value","includes","item","data","colDef","headerName","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","EntityFilterComponent","refresh","clone","onClone","onExport","deleteItem","onDelete","ContentItemsActionsComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","entities","text","replace","ContentItemsEntityComponent","metadataCount","Metadata","metadataTooltip","For","Target","Number","String","Guid","Title","openMetadata","onOpenMetadata","ContentItemsStatusComponent","published","metadata","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","PubMetaFilterComponent","dialogRef","contentItemsService","contentTypesService","hostClass","eavConstants","dropdownInsertValue","ngOnInit","form","subscription","Subscription","targetTypeOptions","Object","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","addControl","control","keyType","controls","testValue","test","patternWholeNumber","hasCurly","bracket","patternGuid","add","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","key","contentTypeStaticName","formValues","targetType","items","formValues$","combineLatest","guidedMode","foundTargetType","find","type","updatedForm","isAppMetadata","keys","templateVars$","scopeOptions","contentItems","contentTypes","guidedKey","unknownTargetType","targetTypeHint","hint","guidedKeyExists","ngOnDestroy","complete","unsubscribe","closeDialog","result","close","toggleGuidedKey","event","toggleGuidedMode","checked","confirm","target","retrieveContentTypes","getScopes","scopes","CreateMetadataDialogComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","contentType$","items$","debugEnabled$","getDebugEnabled$","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","entityFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","gridApi$","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","onGridReady","api","retrieveContentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","filters","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","entries","forEach","columnDef","c","filterTo","undefined","v","buildFilterModel","sessionStorage","getItem","setColumnDefs","gridApi","take","setFilterModel","_Title","navigate","relativeTo","editItem","formUrl","ContentTypeName","EntityId","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","res","markForCheck","debugFilter","warn","alert","events","firstChild","pairwise","field","headerClass","cellClass","p","getCellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","paramsData","_RepositoryId","valueGetterStatus","bind","flex","minWidth","onCellClicked","headerTooltip","valueGetterUsage","pinned","column","StaticName","Type","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","defaultClasses","_EditInfo","ReadOnly","exportEntity","duration","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","ContentItemsComponent","webApiAppRoot","importApp","changedName","ImportAppService","isError","isShort","toggleIsShort","FieldHintComponent","tooltip","copy","IdFieldComponent","guidRegex","onClick","stopPropagation","ClickStopPropagationDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","copyToClipboard","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","sanitizer","transform","html","bypassSecurityTrustHtml","SafeHtmlPipe"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.c930fc6ab78a429186bb.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFileCreate, webApiAppFilesAll, webApiExplorer } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { WebApi, WebApiDetails } from '../models';\r\n\r\n@Injectable()\r\nexport class WebApisService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: '', mask: '*Controller.cs', withSubfolders: 'true' },\r\n    }).pipe(\r\n      map(paths => {\r\n        const webApis: WebApi[] = paths.map(path => {\r\n          const splitIndex = path.lastIndexOf('/');\r\n          const fileExtIndex = path.lastIndexOf('.');\r\n          const folder = path.substring(0, splitIndex);\r\n          const name = path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path, folder, name };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  create(path: string, templateKey: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        global: 'false',\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  details(apiPath: string) {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(webApiExplorer), {\r\n      params: { path: apiPath },\r\n    });\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private params: IFilterParams;\r\n  private idFilter: number[];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const values: string[] | undefined = this.params.valueGetter(params.node);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const item: { Id: number; Title: string; } | undefined = params.data[this.params.colDef.headerName]?.[0];\r\n      if (item == null) { return false; }\r\n      if (!this.idFilter.includes(item.Id)) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ContentItemsActionsParams;\r\n  private item: ContentItem;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private params: ContentItemsStatusParams;\r\n  private item: ContentItem;\r\n\r\n  agInit(params: ContentItemsStatusParams) {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nType: ${this.item.For.Target}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button button-publish\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" [ngClass]=\"{ 'hide-until-row-hover': metadataCount === 0 && !value.metadata }\"\r\n    matRipple [tippy]=\"metadataTooltip\" (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount > 0 ? metadataCount : null\" matBadgeColor=\"accent\" matBadgeSize=\"small\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.type\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.type\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.type || data.formValues.targetType === eavConstants.metadata.contentType.type)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.type\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.type\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.type, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.type && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.type === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.type;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.type === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.type === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists: [eavConstants.metadata.entity.type, eavConstants.metadata.contentType.type].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      // if not a known target, use the number\r\n      target: this.targetTypeOptions.find(option => option.type === formValues.targetType)?.target ?? formValues.targetType.toString(),\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClassParams, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './ag-grid-components/content-items-status/content-items-status.models';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      entityFilterComponent: EntityFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().pipe(take(1)).subscribe((res: MetadataInfo) => {\r\n      if (res == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: res.target,\r\n            ...(res.keyType === eavConstants.keyTypes.guid && { Guid: res.key }),\r\n            ...(res.keyType === eavConstants.keyTypes.number && { Number: parseInt(res.key, 10) }),\r\n            ...(res.keyType === eavConstants.keyTypes.string && { String: res.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense',\r\n        cellClass: (p: CellClassParams) => this.getCellClass(p, 'id-action no-padding no-outline'),\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: ContentItem) => `ID: ${paramsData.Id}\\nRepoID: ${paramsData._RepositoryId}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 82, headerClass: 'dense',\r\n        cellClass: (p: CellClassParams) => this.getCellClass(p, 'secondary-action no-padding'),\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n        cellRendererParams: {\r\n          onOpenMetadata: this.openMetadata.bind(this),\r\n        } as ContentItemsStatusParams,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250,\r\n        cellClass: (p: CellClassParams) => this.getCellClass(p, 'primary-action highlight'),\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 122, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'entityFilterComponent';\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  /** Get the cell classes and optionally add 'disabled' if necessary */\r\n  private getCellClass(params: CellClassParams, defaultClasses: string) {\r\n    return defaultClasses + ((params.data as ContentItem)._EditInfo.ReadOnly\r\n      ? ' disabled'\r\n      : '');\r\n  }\r\n\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n      hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { GeneralHelpers } from '../../../../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === 'entityFilterComponent') {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}