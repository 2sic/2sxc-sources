{"version":3,"file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.156e5dd666062dd1.js","mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","decls","vars","consts","template","rf","ctx","i0","MatIconModule","i1","TippyDirective","styles","CheckboxCellComponent","onChange","event","currentTarget","checked","$event","isDisabled","ctx_r0","pendingApps","gridOptions","AddAppFromFolderComponent","#isAddFromFolderEnabled","#appsListService","constructor","dialog","snackBar","hostClass","buildGridOptions","installing","features","inject","FeaturesService","isEnabled","FeatureNames","AppSyncWithSiteFiles","transient","AppsListService","getPendingApps","closeDialog","close","app","enabled","pendingAppsTemp","push","splice","indexOf","set","install","open","undefined","duration","installPendingApps","subscribe","error","next","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","ColumnDefinitions","ItemsText","flex","sort","pendingApp","ServerFolder","Folder","Version","Description","i2","hostVars","hostBindings","AddAppFromFolderComponent_Conditional_8_Template","AddAppFromFolderComponent_Conditional_9_Template","tmp_1_0","length","tmp_2_0","MatDialogActions","MatButtonModule","i3","FeatureTextInfoComponent","SxcGridModule","i4","ctx_r1","feature","_r3","clipboard","copyToClipboard","guid","_r4","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","dialogSpecs","specs","input","computedObj","ClipboardService","MAT_DIALOG_DATA","inputs","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","SafeHtmlPipe","TranslateModule","i5","encapsulation","_c0","FeatureInfoDialogComponent","#featureDetailSvc","dialogData","route","FeatureDetailService","featureId","signal","ngOnInit","snapshot","featureDetails","getFeatureDetail","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","ContentTypeFieldsReuseDefinitions","AppExportAssetsAdvanced","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","openDialog","icon","FeatureComponentBase","super","asInfo","ngContentSelectors","FeatureTextInfoComponent_Conditional_0_Template","show","webApiFeatureDetails","HttpServiceBase","getSignal","getFeatureDetails","nameIds","featureList","xx","update","prev","getHttpApiUrl","__ngFactoryType__","factory","ɵfac","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","MatDialog","ViewContainerRef","ChangeDetectorRef","getCurrent","feat","openFeatureDialog","viewContainerRef","changeDetectorRef","autoFocus","markForCheck","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-app-name-show',\r\n    templateUrl: './app-name-show.component.html',\r\n    styleUrls: ['./app-name-show.component.scss'],\r\n    imports: [MatIconModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Add App from Folder</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n    <p>\r\n      Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n    </p>\r\n    @if (pendingApps()?.length == 0) {\r\n    <p>\r\n      Nothing to show. All apps in the 2sxc folder are already installed.\r\n    </p>\r\n    }\r\n    @if (pendingApps()?.length > 0) {\r\n    <div>\r\n      <ag-grid-angular class=\"ag-theme-material eav-grid\" [rowData]=\"pendingApps()\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n    </div>\r\n    }\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps().length === 0 || installing\"\r\n      (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, WritableSignal, inject } from \"@angular/core\";\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../core';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n    selector: 'app-add-app-from-folder',\r\n    templateUrl: './add-app-from-folder.component.html',\r\n    styleUrls: ['./add-app-from-folder.component.scss'],\r\n    imports: [\r\n        MatDialogActions,\r\n        MatButtonModule,\r\n        FeatureTextInfoComponent,\r\n        SxcGridModule,\r\n    ]\r\n})\r\nexport class AddAppFromFolderComponent  {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  installing: boolean = false;\r\n\r\n  public features = inject(FeaturesService);\r\n  #isAddFromFolderEnabled = this.features.isEnabled[FeatureNames.AppSyncWithSiteFiles];\r\n  #appsListService = transient(AppsListService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AddAppFromFolderComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) {}\r\n\r\n  pendingApps = this.#appsListService.getPendingApps() as WritableSignal<PendingApp[]>;\r\n\r\n  closeDialog(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    const pendingAppsTemp = this.pendingApps();\r\n\r\n    if (enabled)\r\n      pendingAppsTemp.push(app);\r\n    else\r\n      pendingAppsTemp.splice(pendingAppsTemp.indexOf(app), 1);\r\n\r\n    this.pendingApps.set(pendingAppsTemp);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.#appsListService.installPendingApps(this.pendingApps()).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.#isAddFromFolderEnabled(),\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Name',\r\n          flex: 1,\r\n          sort: 'asc',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\n","@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n    selector: 'app-feature-details-dialog',\r\n    templateUrl: './feature-details-dialog.component.html',\r\n    imports: [\r\n        MatCardModule,\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        SafeHtmlPipe,\r\n        TranslateModule,\r\n    ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject, OnInit, signal } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n    selector: 'app-feature-info-dialog',\r\n    templateUrl: './feature-info-dialog.component.html',\r\n    imports: [\r\n        FeatureDetailsDialogComponent\r\n    ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n  featureId = signal<string>('');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.featureId.set(this.route.snapshot.data['featureId'] || this.dialogData || '');\r\n    this.featureDetails = this.#featureDetailSvc.getFeatureDetail(this.featureId());\r\n  }\r\n\r\n  protected featureDetails: any;\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n    selector: 'app-feature-text-info',\r\n    templateUrl: './feature-text-info.component.html',\r\n    styleUrls: ['./feature-text-info.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        TranslateModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() { super(); }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetail(nameId: string): Signal<Feature> {\r\n    return this.getSignal<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n      this.xx(nameId).subscribe(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n\r\n  // TODO: Daniel fragen, getFeatureDetails(nameIds: string[]) ist nicht korrekt\r\n  // getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n  //   console.log('getFeatureDetails', nameIds);\r\n  //   const featureList = signal<Feature[]>([]);\r\n  //   for (const nameId of nameIds) {\r\n  //   console.log('getFeatureDetails', nameId);\r\n\r\n\r\n  //     const x = this.getFeatureDetail(nameId) ;\r\n  //     featureList.update(prev => [...prev, x()]);\r\n  //   }\r\n  //   return featureList;\r\n  // }\r\n\r\n  // Remove later\r\n  xx(nameId: string): Observable<Feature> {\r\n    return this.getHttpApiUrl<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesService } from '../features.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({\r\n  name: 'safeHtml',\r\n})\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}