{"version":3,"file":"default-node_modules_angular_material_fesm2022_radio_mjs.af4f7cd0faa65e2d.js","mappings":"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","names":["_c0","_c1","_c2","nextUniqueId","MatRadioChange","constructor","source","value","this","MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatRadioGroup","multi","MAT_RADIO_GROUP","InjectionToken","MAT_RADIO_DEFAULT_OPTIONS","providedIn","factory","MAT_RADIO_DEFAULT_OPTIONS_FACTORY","color","disabledInteractive","name","_name","_updateRadioButtonNames","labelPosition","_labelPosition","v","_markRadiosForCheck","_value","newValue","_updateSelectedRadioFromValue","_checkSelectedRadioButton","_selected","checked","selected","disabled","_disabled","required","_required","_disabledInteractive","_changeDetector","_isInitialized","_controlValueAccessorChangeFn","onTouched","change","EventEmitter","ngAfterContentInit","_buttonChanges","_radios","changes","subscribe","find","radio","ngOnDestroy","unsubscribe","_touch","forEach","_markForCheck","_emitChangeEvent","emit","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","ɵfac","__ngFactoryType__","i0","ɵdir","type","selectors","contentQueries","rf","ctx","dirIndex","MatRadioButton","_t","hostAttrs","inputs","booleanAttribute","outputs","exportAs","standalone","features","_checked","radioGroup","_radioDispatcher","notify","id","_setDisabled","_color","_defaultOptions","inputId","_uniqueId","_elementRef","_focusMonitor","animationMode","tabIndex","_ngZone","inject","NgZone","disableRipple","_removeUniqueSelectionListener","_injector","Injector","_onInputClick","event","preventDefault","_noopAnimations","numberAttribute","focus","options","origin","focusVia","_inputElement","nativeElement","ngOnInit","listen","ngDoCheck","_updateTabIndex","ngAfterViewInit","monitor","focusOrigin","runOutsideAngular","addEventListener","removeEventListener","stopMonitoring","_isRippleDisabled","_onInputInteraction","stopPropagation","groupValueChanged","_onTouchTargetClick","group","_previousTabIndex","input","setAttribute","afterNextRender","queueMicrotask","document","activeElement","blur","injector","i1","i2","ANIMATION_MODULE_TYPE","ɵcmp","viewQuery","ElementRef","first","_rippleTrigger","hostVars","hostBindings","ariaLabel","ariaLabelledby","ariaDescribedby","ngContentSelectors","decls","vars","consts","template","_r1","$event","dependencies","MatRipple","_MatInternalFormField","styles","encapsulation","changeDetection","MatRadioModule","ɵmod","ɵinj","imports","MatCommonModule","CommonModule","MatRippleModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/radio.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport * as i2 from '@angular/cdk/collections';\nimport * as i0 from '@angular/core';\nimport { forwardRef, InjectionToken, EventEmitter, booleanAttribute, Directive, Output, ContentChildren, Input, inject, NgZone, Injector, numberAttribute, afterNextRender, ANIMATION_MODULE_TYPE, ElementRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, Attribute, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatRipple, _MatInternalFormField, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport { CommonModule } from '@angular/common';\n\n// Increasing integer for generating unique ids for radio components.\nlet nextUniqueId = 0;\n/** Change event object emitted by radio button and radio group. */\nclass MatRadioChange {\n    constructor(\n    /** The radio button that emits the change event. */\n    source, \n    /** The value of the radio button. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n/**\n * Provider Expression that allows mat-radio-group to register as a ControlValueAccessor. This\n * allows it to support [(ngModel)] and ngControl.\n * @docs-private\n */\nconst MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatRadioGroup),\n    multi: true,\n};\n/**\n * Injection token that can be used to inject instances of `MatRadioGroup`. It serves as\n * alternative token to the actual `MatRadioGroup` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_RADIO_GROUP = new InjectionToken('MatRadioGroup');\nconst MAT_RADIO_DEFAULT_OPTIONS = new InjectionToken('mat-radio-default-options', {\n    providedIn: 'root',\n    factory: MAT_RADIO_DEFAULT_OPTIONS_FACTORY,\n});\nfunction MAT_RADIO_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        disabledInteractive: false,\n    };\n}\n/**\n * A group of radio buttons. May contain one or more `<mat-radio-button>` elements.\n */\nclass MatRadioGroup {\n    /** Name of the radio button group. All radio buttons inside this group will use this name. */\n    get name() {\n        return this._name;\n    }\n    set name(value) {\n        this._name = value;\n        this._updateRadioButtonNames();\n    }\n    /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition;\n    }\n    set labelPosition(v) {\n        this._labelPosition = v === 'before' ? 'before' : 'after';\n        this._markRadiosForCheck();\n    }\n    /**\n     * Value for the radio-group. Should equal the value of the selected radio button if there is\n     * a corresponding radio button with a matching value. If there is not such a corresponding\n     * radio button, this value persists to be applied in case a new radio button is added with a\n     * matching value.\n     */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        if (this._value !== newValue) {\n            // Set this before proceeding to ensure no circular loop occurs with selection.\n            this._value = newValue;\n            this._updateSelectedRadioFromValue();\n            this._checkSelectedRadioButton();\n        }\n    }\n    _checkSelectedRadioButton() {\n        if (this._selected && !this._selected.checked) {\n            this._selected.checked = true;\n        }\n    }\n    /**\n     * The currently selected radio button. If set to a new radio button, the radio group value\n     * will be updated to match the new selected button.\n     */\n    get selected() {\n        return this._selected;\n    }\n    set selected(selected) {\n        this._selected = selected;\n        this.value = selected ? selected.value : null;\n        this._checkSelectedRadioButton();\n    }\n    /** Whether the radio group is disabled */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether the radio group is required */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = value;\n        this._markRadiosForCheck();\n    }\n    /** Whether buttons in the group should be interactive while they're disabled. */\n    get disabledInteractive() {\n        return this._disabledInteractive;\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n        this._markRadiosForCheck();\n    }\n    constructor(_changeDetector) {\n        this._changeDetector = _changeDetector;\n        /** Selected value for the radio group. */\n        this._value = null;\n        /** The HTML name attribute applied to radio buttons in this group. */\n        this._name = `mat-radio-group-${nextUniqueId++}`;\n        /** The currently selected radio button. Should match value. */\n        this._selected = null;\n        /** Whether the `value` has been set to its initial value. */\n        this._isInitialized = false;\n        /** Whether the labels should appear after or before the radio-buttons. Defaults to 'after' */\n        this._labelPosition = 'after';\n        /** Whether the radio group is disabled. */\n        this._disabled = false;\n        /** Whether the radio group is required. */\n        this._required = false;\n        /** The method to be called in order to update ngModel */\n        this._controlValueAccessorChangeFn = () => { };\n        /**\n         * onTouch function registered via registerOnTouch (ControlValueAccessor).\n         * @docs-private\n         */\n        this.onTouched = () => { };\n        /**\n         * Event emitted when the group value changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * a radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        this._disabledInteractive = false;\n    }\n    /**\n     * Initialize properties once content children are available.\n     * This allows us to propagate relevant attributes to associated buttons.\n     */\n    ngAfterContentInit() {\n        // Mark this component as initialized in AfterContentInit because the initial value can\n        // possibly be set by NgModel on MatRadioGroup, and it is possible that the OnInit of the\n        // NgModel occurs *after* the OnInit of the MatRadioGroup.\n        this._isInitialized = true;\n        // Clear the `selected` button when it's destroyed since the tabindex of the rest of the\n        // buttons depends on it. Note that we don't clear the `value`, because the radio button\n        // may be swapped out with a similar one and there are some internal apps that depend on\n        // that behavior.\n        this._buttonChanges = this._radios.changes.subscribe(() => {\n            if (this.selected && !this._radios.find(radio => radio === this.selected)) {\n                this._selected = null;\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._buttonChanges?.unsubscribe();\n    }\n    /**\n     * Mark this group as being \"touched\" (for ngModel). Meant to be called by the contained\n     * radio buttons upon their blur.\n     */\n    _touch() {\n        if (this.onTouched) {\n            this.onTouched();\n        }\n    }\n    _updateRadioButtonNames() {\n        if (this._radios) {\n            this._radios.forEach(radio => {\n                radio.name = this.name;\n                radio._markForCheck();\n            });\n        }\n    }\n    /** Updates the `selected` radio button from the internal _value state. */\n    _updateSelectedRadioFromValue() {\n        // If the value already matches the selected radio, do nothing.\n        const isAlreadySelected = this._selected !== null && this._selected.value === this._value;\n        if (this._radios && !isAlreadySelected) {\n            this._selected = null;\n            this._radios.forEach(radio => {\n                radio.checked = this.value === radio.value;\n                if (radio.checked) {\n                    this._selected = radio;\n                }\n            });\n        }\n    }\n    /** Dispatch change event with current selection and group value. */\n    _emitChangeEvent() {\n        if (this._isInitialized) {\n            this.change.emit(new MatRadioChange(this._selected, this._value));\n        }\n    }\n    _markRadiosForCheck() {\n        if (this._radios) {\n            this._radios.forEach(radio => radio._markForCheck());\n        }\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n        this._changeDetector.markForCheck();\n    }\n    /**\n     * Registers a callback to be triggered when the model value changes.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the control is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets the disabled state of the control. Implemented as a part of ControlValueAccessor.\n     * @param isDisabled Whether the control should be disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetector.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioGroup, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatRadioGroup, isStandalone: true, selector: \"mat-radio-group\", inputs: { color: \"color\", name: \"name\", labelPosition: \"labelPosition\", value: \"value\", selected: \"selected\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { attributes: { \"role\": \"radiogroup\" }, classAttribute: \"mat-mdc-radio-group\" }, providers: [\n            MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n            { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n        ], queries: [{ propertyName: \"_radios\", predicate: i0.forwardRef(() => MatRadioButton), descendants: true }], exportAs: [\"matRadioGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-radio-group',\n                    exportAs: 'matRadioGroup',\n                    providers: [\n                        MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR,\n                        { provide: MAT_RADIO_GROUP, useExisting: MatRadioGroup },\n                    ],\n                    host: {\n                        'role': 'radiogroup',\n                        'class': 'mat-mdc-radio-group',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }], propDecorators: { change: [{\n                type: Output\n            }], _radios: [{\n                type: ContentChildren,\n                args: [forwardRef(() => MatRadioButton), { descendants: true }]\n            }], color: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\nclass MatRadioButton {\n    /** Whether this radio button is checked. */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        if (this._checked !== value) {\n            this._checked = value;\n            if (value && this.radioGroup && this.radioGroup.value !== this.value) {\n                this.radioGroup.selected = this;\n            }\n            else if (!value && this.radioGroup && this.radioGroup.value === this.value) {\n                // When unchecking the selected radio button, update the selected radio\n                // property on the group.\n                this.radioGroup.selected = null;\n            }\n            if (value) {\n                // Notify all radio buttons with the same name to un-check.\n                this._radioDispatcher.notify(this.id, this.name);\n            }\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** The value of this radio button. */\n    get value() {\n        return this._value;\n    }\n    set value(value) {\n        if (this._value !== value) {\n            this._value = value;\n            if (this.radioGroup !== null) {\n                if (!this.checked) {\n                    // Update checked when the value changed to match the radio group's value\n                    this.checked = this.radioGroup.value === value;\n                }\n                if (this.checked) {\n                    this.radioGroup.selected = this;\n                }\n            }\n        }\n    }\n    /** Whether the label should appear after or before the radio button. Defaults to 'after' */\n    get labelPosition() {\n        return this._labelPosition || (this.radioGroup && this.radioGroup.labelPosition) || 'after';\n    }\n    set labelPosition(value) {\n        this._labelPosition = value;\n    }\n    /** Whether the radio button is disabled. */\n    get disabled() {\n        return this._disabled || (this.radioGroup !== null && this.radioGroup.disabled);\n    }\n    set disabled(value) {\n        this._setDisabled(value);\n    }\n    /** Whether the radio button is required. */\n    get required() {\n        return this._required || (this.radioGroup && this.radioGroup.required);\n    }\n    set required(value) {\n        this._required = value;\n    }\n    /**\n     * Theme color of the radio button. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        // As per M2 design specifications the selection control radio should use the accent color\n        // palette by default. https://m2.material.io/components/radio-buttons#specs\n        return (this._color ||\n            (this.radioGroup && this.radioGroup.color) ||\n            (this._defaultOptions && this._defaultOptions.color) ||\n            'accent');\n    }\n    set color(newValue) {\n        this._color = newValue;\n    }\n    /** Whether the radio button should remain interactive when it is disabled. */\n    get disabledInteractive() {\n        return (this._disabledInteractive || (this.radioGroup !== null && this.radioGroup.disabledInteractive));\n    }\n    set disabledInteractive(value) {\n        this._disabledInteractive = value;\n    }\n    /** ID of the native input element inside `<mat-radio-button>` */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    constructor(radioGroup, _elementRef, _changeDetector, _focusMonitor, _radioDispatcher, animationMode, _defaultOptions, tabIndex) {\n        this._elementRef = _elementRef;\n        this._changeDetector = _changeDetector;\n        this._focusMonitor = _focusMonitor;\n        this._radioDispatcher = _radioDispatcher;\n        this._defaultOptions = _defaultOptions;\n        this._ngZone = inject(NgZone);\n        this._uniqueId = `mat-radio-${++nextUniqueId}`;\n        /** The unique ID for the radio button. */\n        this.id = this._uniqueId;\n        /** Whether ripples are disabled inside the radio button */\n        this.disableRipple = false;\n        /** Tabindex of the radio button. */\n        this.tabIndex = 0;\n        /**\n         * Event emitted when the checked state of this radio button changes.\n         * Change events are only emitted when the value changes due to user interaction with\n         * the radio button (the same behavior as `<input type-\"radio\">`).\n         */\n        this.change = new EventEmitter();\n        /** Whether this radio is checked. */\n        this._checked = false;\n        /** Value assigned to this radio. */\n        this._value = null;\n        /** Unregister function for _radioDispatcher */\n        this._removeUniqueSelectionListener = () => { };\n        this._injector = inject(Injector);\n        /** Called when the input is clicked. */\n        this._onInputClick = (event) => {\n            // If the input is disabled while interactive, we need to prevent the\n            // selection from happening in this event handler. Note that even though\n            // this happens on `click` events, the logic applies when the user is\n            // navigating with the keyboard as well. An alternative way of doing\n            // this is by resetting the `checked` state in the `change` callback but\n            // it isn't optimal, because it can allow a pre-checked disabled button\n            // to be un-checked. This approach seems to cover everything.\n            if (this.disabled && this.disabledInteractive) {\n                event.preventDefault();\n            }\n        };\n        // Assertions. Ideally these should be stripped out by the compiler.\n        // TODO(jelbourn): Assert that there's no name binding AND a parent radio group.\n        this.radioGroup = radioGroup;\n        this._noopAnimations = animationMode === 'NoopAnimations';\n        this._disabledInteractive = _defaultOptions?.disabledInteractive ?? false;\n        if (tabIndex) {\n            this.tabIndex = numberAttribute(tabIndex, 0);\n        }\n    }\n    /** Focuses the radio button. */\n    focus(options, origin) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Marks the radio button as needing checking for change detection.\n     * This method is exposed because the parent radio group will directly\n     * update bound properties of the radio button.\n     */\n    _markForCheck() {\n        // When group value changes, the button will not be notified. Use `markForCheck` to explicit\n        // update radio button's status\n        this._changeDetector.markForCheck();\n    }\n    ngOnInit() {\n        if (this.radioGroup) {\n            // If the radio is inside a radio group, determine if it should be checked\n            this.checked = this.radioGroup.value === this._value;\n            if (this.checked) {\n                this.radioGroup.selected = this;\n            }\n            // Copy name from parent radio group\n            this.name = this.radioGroup.name;\n        }\n        this._removeUniqueSelectionListener = this._radioDispatcher.listen((id, name) => {\n            if (id !== this.id && name === this.name) {\n                this.checked = false;\n            }\n        });\n    }\n    ngDoCheck() {\n        this._updateTabIndex();\n    }\n    ngAfterViewInit() {\n        this._updateTabIndex();\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin && this.radioGroup) {\n                this.radioGroup._touch();\n            }\n        });\n        // We bind this outside of the zone, because:\n        // 1. Its logic is completely DOM-related so we can avoid some change detections.\n        // 2. There appear to be some internal tests that break when this triggers a change detection.\n        this._ngZone.runOutsideAngular(() => {\n            this._inputElement.nativeElement.addEventListener('click', this._onInputClick);\n        });\n    }\n    ngOnDestroy() {\n        // We need to null check in case the button was destroyed before `ngAfterViewInit`.\n        this._inputElement?.nativeElement.removeEventListener('click', this._onInputClick);\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._removeUniqueSelectionListener();\n    }\n    /** Dispatch change event with current value. */\n    _emitChangeEvent() {\n        this.change.emit(new MatRadioChange(this, this._value));\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Triggered when the radio button receives an interaction from the user. */\n    _onInputInteraction(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n        if (!this.checked && !this.disabled) {\n            const groupValueChanged = this.radioGroup && this.value !== this.radioGroup.value;\n            this.checked = true;\n            this._emitChangeEvent();\n            if (this.radioGroup) {\n                this.radioGroup._controlValueAccessorChangeFn(this.value);\n                if (groupValueChanged) {\n                    this.radioGroup._emitChangeEvent();\n                }\n            }\n        }\n    }\n    /** Triggered when the user clicks on the touch target. */\n    _onTouchTargetClick(event) {\n        this._onInputInteraction(event);\n        if (!this.disabled || this.disabledInteractive) {\n            // Normally the input should be focused already, but if the click\n            // comes from the touch target, then we might have to focus it ourselves.\n            this._inputElement?.nativeElement.focus();\n        }\n    }\n    /** Sets the disabled state and marks for check if a change occurred. */\n    _setDisabled(value) {\n        if (this._disabled !== value) {\n            this._disabled = value;\n            this._changeDetector.markForCheck();\n        }\n    }\n    /** Gets the tabindex for the underlying input element. */\n    _updateTabIndex() {\n        const group = this.radioGroup;\n        let value;\n        // Implement a roving tabindex if the button is inside a group. For most cases this isn't\n        // necessary, because the browser handles the tab order for inputs inside a group automatically,\n        // but we need an explicitly higher tabindex for the selected button in order for things like\n        // the focus trap to pick it up correctly.\n        if (!group || !group.selected || this.disabled) {\n            value = this.tabIndex;\n        }\n        else {\n            value = group.selected === this ? this.tabIndex : -1;\n        }\n        if (value !== this._previousTabIndex) {\n            // We have to set the tabindex directly on the DOM node, because it depends on\n            // the selected state which is prone to \"changed after checked errors\".\n            const input = this._inputElement?.nativeElement;\n            if (input) {\n                input.setAttribute('tabindex', value + '');\n                this._previousTabIndex = value;\n                // Wait for any pending tabindex changes to be applied\n                afterNextRender(() => {\n                    queueMicrotask(() => {\n                        // The radio group uses a \"selection follows focus\" pattern for tab management, so if this\n                        // radio button is currently focused and another radio button in the group becomes\n                        // selected, we should move focus to the newly selected radio button to maintain\n                        // consistency between the focused and selected states.\n                        if (group &&\n                            group.selected &&\n                            group.selected !== this &&\n                            document.activeElement === input) {\n                            group.selected?._inputElement.nativeElement.focus();\n                            // If this radio button still has focus, the selected one must be disabled. In this\n                            // case the radio group as a whole should lose focus.\n                            if (document.activeElement === input) {\n                                this._inputElement.nativeElement.blur();\n                            }\n                        }\n                    });\n                }, { injector: this._injector });\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioButton, deps: [{ token: MAT_RADIO_GROUP, optional: true }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i2.UniqueSelectionDispatcher }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_RADIO_DEFAULT_OPTIONS, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatRadioButton, isStandalone: true, selector: \"mat-radio-button\", inputs: { id: \"id\", name: \"name\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], checked: [\"checked\", \"checked\", booleanAttribute], value: \"value\", labelPosition: \"labelPosition\", disabled: [\"disabled\", \"disabled\", booleanAttribute], required: [\"required\", \"required\", booleanAttribute], color: \"color\", disabledInteractive: [\"disabledInteractive\", \"disabledInteractive\", booleanAttribute] }, outputs: { change: \"change\" }, host: { listeners: { \"focus\": \"_inputElement.nativeElement.focus()\" }, properties: { \"attr.id\": \"id\", \"class.mat-primary\": \"color === \\\"primary\\\"\", \"class.mat-accent\": \"color === \\\"accent\\\"\", \"class.mat-warn\": \"color === \\\"warn\\\"\", \"class.mat-mdc-radio-checked\": \"checked\", \"class.mat-mdc-radio-disabled\": \"disabled\", \"class.mat-mdc-radio-disabled-interactive\": \"disabledInteractive\", \"class._mat-animation-noopable\": \"_noopAnimations\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" }, classAttribute: \"mat-mdc-radio-button\" }, viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"_rippleTrigger\", first: true, predicate: [\"formField\"], descendants: true, read: ElementRef, static: true }], exportAs: [\"matRadioButton\"], ngImport: i0, template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-mdc-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, black)}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"], dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { kind: \"component\", type: _MatInternalFormField, selector: \"div[mat-internal-form-field]\", inputs: [\"labelPosition\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioButton, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-radio-button', host: {\n                        'class': 'mat-mdc-radio-button',\n                        '[attr.id]': 'id',\n                        '[class.mat-primary]': 'color === \"primary\"',\n                        '[class.mat-accent]': 'color === \"accent\"',\n                        '[class.mat-warn]': 'color === \"warn\"',\n                        '[class.mat-mdc-radio-checked]': 'checked',\n                        '[class.mat-mdc-radio-disabled]': 'disabled',\n                        '[class.mat-mdc-radio-disabled-interactive]': 'disabledInteractive',\n                        '[class._mat-animation-noopable]': '_noopAnimations',\n                        // Needs to be removed since it causes some a11y issues (see #21266).\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        // Note: under normal conditions focus shouldn't land on this element, however it may be\n                        // programmatically set, for example inside of a focus trap, in this case we want to forward\n                        // the focus to the native element.\n                        '(focus)': '_inputElement.nativeElement.focus()',\n                    }, exportAs: 'matRadioButton', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [MatRipple, _MatInternalFormField], template: \"<div mat-internal-form-field [labelPosition]=\\\"labelPosition\\\" #formField>\\n  <div class=\\\"mdc-radio\\\" [class.mdc-radio--disabled]=\\\"disabled\\\">\\n    <!-- Render this element first so the input is on top. -->\\n    <div class=\\\"mat-mdc-radio-touch-target\\\" (click)=\\\"_onTouchTargetClick($event)\\\"></div>\\n    <input #input class=\\\"mdc-radio__native-control\\\" type=\\\"radio\\\"\\n           [id]=\\\"inputId\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled && !disabledInteractive\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.value]=\\\"value\\\"\\n           [required]=\\\"required\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           [attr.aria-disabled]=\\\"disabled && disabledInteractive ? 'true' : null\\\"\\n           (change)=\\\"_onInputInteraction($event)\\\">\\n    <div class=\\\"mdc-radio__background\\\">\\n      <div class=\\\"mdc-radio__outer-circle\\\"></div>\\n      <div class=\\\"mdc-radio__inner-circle\\\"></div>\\n    </div>\\n    <div mat-ripple class=\\\"mat-radio-ripple mat-mdc-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"_rippleTrigger.nativeElement\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleCentered]=\\\"true\\\">\\n      <div class=\\\"mat-ripple-element mat-radio-persistent-ripple\\\"></div>\\n    </div>\\n  </div>\\n  <label class=\\\"mdc-label\\\" [for]=\\\"inputId\\\">\\n    <ng-content></ng-content>\\n  </label>\\n</div>\\n\", styles: [\".mat-mdc-radio-button{-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-radio-button .mdc-radio{display:inline-block;position:relative;flex:0 0 auto;box-sizing:content-box;width:20px;height:20px;cursor:pointer;will-change:opacity,transform,border-color,color;padding:calc((var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled]):not(:focus)~.mdc-radio__background::before{opacity:.04;transform:scale(1)}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:not([disabled])~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-hover-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:hover .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-hover-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-pressed-icon-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio:active .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-pressed-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__background{display:inline-block;position:relative;box-sizing:border-box;width:20px;height:20px}.mat-mdc-radio-button .mdc-radio__background::before{position:absolute;transform:scale(0, 0);border-radius:50%;opacity:0;pointer-events:none;content:\\\"\\\";transition:opacity 90ms cubic-bezier(0.4, 0, 0.6, 1),transform 90ms cubic-bezier(0.4, 0, 0.6, 1);width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size);top:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2);left:calc(-1*(var(--mdc-radio-state-layer-size) - 20px)/2)}.mat-mdc-radio-button .mdc-radio__outer-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;border-width:2px;border-style:solid;border-radius:50%;transition:border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__inner-circle{position:absolute;top:0;left:0;box-sizing:border-box;width:100%;height:100%;transform:scale(0, 0);border-width:10px;border-style:solid;border-radius:50%;transition:transform 90ms cubic-bezier(0.4, 0, 0.6, 1),border-color 90ms cubic-bezier(0.4, 0, 0.6, 1)}.mat-mdc-radio-button .mdc-radio__native-control{position:absolute;margin:0;padding:0;opacity:0;top:0;right:0;left:0;cursor:inherit;z-index:1;width:var(--mdc-radio-state-layer-size);height:var(--mdc-radio-state-layer-size)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{transition:border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle{transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:focus+.mdc-radio__background::before{transform:scale(1);opacity:.12;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 1),transform 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button .mdc-radio__native-control:disabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background{cursor:default}.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:disabled+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button .mdc-radio__native-control:enabled:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-icon-color, var(--mat-app-on-surface-variant))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:checked+.mdc-radio__background .mdc-radio__inner-circle{border-color:var(--mdc-radio-selected-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button .mdc-radio__native-control:enabled:focus:checked+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-selected-focus-icon-color, var(--mat-app-primary))}.mat-mdc-radio-button .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle{transform:scale(0.5);transition:transform 90ms cubic-bezier(0, 0, 0.2, 1),border-color 90ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled{pointer-events:auto}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:not(:checked)+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-unselected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-unselected-icon-opacity)}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled:hover .mdc-radio__native-control:checked+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control:checked:focus+.mdc-radio__background .mdc-radio__outer-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__inner-circle,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__native-control+.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-disabled-selected-icon-color, var(--mat-app-on-surface));opacity:var(--mdc-radio-disabled-selected-icon-opacity)}.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__background::before,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__outer-circle,.mat-mdc-radio-button._mat-animation-noopable .mdc-radio__inner-circle{transition:none !important}.mat-mdc-radio-button .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button.mat-mdc-radio-checked .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-checked .mdc-radio__background::before{background-color:var(--mat-radio-checked-ripple-color, var(--mat-app-primary))}.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mat-ripple-element,.mat-mdc-radio-button.mat-mdc-radio-disabled-interactive .mdc-radio--disabled .mdc-radio__background::before{background-color:var(--mat-radio-ripple-color, var(--mat-app-on-surface))}.mat-mdc-radio-button .mat-internal-form-field{color:var(--mat-radio-label-text-color, var(--mat-app-on-surface));font-family:var(--mat-radio-label-text-font, var(--mat-app-body-medium-font));line-height:var(--mat-radio-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-radio-label-text-size, var(--mat-app-body-medium-size));letter-spacing:var(--mat-radio-label-text-tracking, var(--mat-app-body-medium-tracking));font-weight:var(--mat-radio-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-radio-button .mdc-radio--disabled+label{color:var(--mat-radio-disabled-label-color)}.mat-mdc-radio-button .mat-radio-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none;border-radius:50%}.mat-mdc-radio-button .mat-radio-ripple .mat-ripple-element{opacity:.14}.mat-mdc-radio-button .mat-radio-ripple::before{border-radius:50%}.mat-mdc-radio-button .mdc-radio .mdc-radio__native-control:focus:enabled:not(:checked)~.mdc-radio__background .mdc-radio__outer-circle{border-color:var(--mdc-radio-unselected-focus-icon-color, black)}.mat-mdc-radio-button.cdk-focused .mat-mdc-focus-indicator::before{content:\\\"\\\"}.mat-mdc-radio-disabled{cursor:default;pointer-events:none}.mat-mdc-radio-disabled.mat-mdc-radio-disabled-interactive{pointer-events:auto}.mat-mdc-radio-touch-target{position:absolute;top:50%;left:50%;height:48px;width:48px;transform:translate(-50%, -50%);display:var(--mat-radio-touch-target-display)}[dir=rtl] .mat-mdc-radio-touch-target{left:auto;right:50%;transform:translate(50%, -50%)}\"] }]\n        }], ctorParameters: () => [{ type: MatRadioGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RADIO_GROUP]\n                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i2.UniqueSelectionDispatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_RADIO_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { id: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], checked: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], value: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], color: [{\n                type: Input\n            }], disabledInteractive: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], change: [{\n                type: Output\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], _rippleTrigger: [{\n                type: ViewChild,\n                args: ['formField', { read: ElementRef, static: true }]\n            }] } });\n\nclass MatRadioModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioGroup, MatRadioButton], exports: [MatCommonModule, MatRadioGroup, MatRadioButton] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioButton, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRadioModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule, MatRippleModule, MatRadioGroup, MatRadioButton],\n                    exports: [MatCommonModule, MatRadioGroup, MatRadioButton],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_RADIO_DEFAULT_OPTIONS, MAT_RADIO_DEFAULT_OPTIONS_FACTORY, MAT_RADIO_GROUP, MAT_RADIO_GROUP_CONTROL_VALUE_ACCESSOR, MatRadioButton, MatRadioChange, MatRadioGroup, MatRadioModule };\n"],"x_google_ignoreList":[0]}