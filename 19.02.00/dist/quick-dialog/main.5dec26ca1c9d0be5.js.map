{"version":3,"file":"main.5dec26ca1c9d0be5.js","mappings":"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","names":["Config","parseInt","get","Number","req","$2sxc","moduleId","cbId","key","urlParams","require","SupportedLanguages","i18nPrefix","BackendSettings","constructor","http","this","BehaviorSubject","data","appId","pipe","distinctUntilChanged","switchMap","id","map","bundle","Context","share","showAdvanced$","settings","Enable","CodeEditor","setApp","next","i0","factory","AppIconsService","matIconRegistry","load","setDefaultFontSetClass","console","log","BehaviorObservable","Observable","super","static","initialValue","subj","obs","asObservable","subject","reset","isInitial","value","DebugConfig","Log","name","parent","Array","Object","add","msg","args","logs","push","autoDump","forceLogToConsole","arguments","Constants","apply","subLog","newLog","loggers","dump","state","window","logger","cViewWithoutContent","parentLog","ContentTypesProcessor","translate","buildList","allTypes","type","allTemplates","template","unhide","unhideSelectedType","addEmptyTypeIfNeeded","filtered","hideNecessaryTypes","sortTypes","types","filter","t","IsHidden","contentTypes","currentType","currentTemplate","c","StaticName","undefined","forEach","templates","layoutElementLabel","instant","find","ContentTypeStaticName","slice","Name","Thumbnail","Label","sort","a","b","localeCompare","IsDefault","sortTypesWithDefault","selectedContentTypeId","App","json","assign","VersionMain","Version","substr","uninitializedList","PickerService","buildObservables","enableLogging","ready$","combineLatest","apps$","contentTypes$","templates$","ct","apps","set","mustLoadApps","startWith","saveAppId","reloadParts","loadApps","Error","post","toPromise","initLoading","requireApps","reloadAppParts","loadTemplates","loadContentTypes","subscribe","response","Properties","alreadyLoaded","appsFilter","streamLog","length","r","TemplateFilterPipe","transform","typeId","contentType","typeNameFilter","isContent","pure","CurrentDataService","api","templateFilter","ctProcessor","buildBasicObservables","app$","appId$","AppId","initialType$","initialTypeId$","all","type$","merge","selectedType$","current","findTemplatesForTypeOrAll","initialTemplate$","initialTemplateId$","TemplateId","selected$","selectedTemplate$","template$","selected","app","TemplateProcessor","sortTemplates","types$","init","config","JSON","stringify","appReady$","typeReady$","scan","acc","contentTypeId","templReady$","debounceTime","templateId","loadAll$","initLogging","activateCurrentApp","inita$","inittyp$","initt$","initAll$","slog","initLog","activateType","activateTemplate","InstallerService","installPackages","packages","step","reduce","url","of","AppInstallSettingsService","Subject","installSettingsSubject","settings$","tap","loadGettingStarted","isContentApp","InstallerComponent","installer","sanitizer","fromEvent","alreadyProcessing","evt","parse","e","error","subscriptions","remoteInstallerUrl","bypassSecurityTrustResourceUrl","remoteUrl","ready","dashInfo","bridge","frameElement","getAdditionalDashboardConfig","showDebug","debug","bootController","rebootRequest$","destroy","sub","unsubscribe","ngOnInit","messages$","action","winFrame","installerWindow","nativeElement","specsMsg","installedApps","rules","specsJson","contentWindow","postMessage","values","displayName","confirm","showProgress","devSimulateInstall","alert","p","currentPackage","top","location","reload","catchError","Message","message","sendMessage","toggleSimulate","selectors","FilterByPropertyValuePipe","input","propertyName","filterValue","i","toLocaleLowerCase","includes","FilterByBoolPropertyPipe","TemplatePickerComponent","backendSettings","cdRef","boot","autosyncObservablesToEnsureUiUpdates","initDone$","initObservables","initValuesFromBridge","loading$","debugObservables","g","l","observablesAlreadyInitialized","initTrue$","loading","typeOrAppReady","_","switchTab","_2","showAdv","installerNeeded","installerShow","isInnerContent","showSearchBar","showInstallAndAllApps","showAdminApp","templatesLoading$","skipUntil","previewTemplate","defaultContentType","detectChanges","preventTypeSwitch","hasContent","supportsAjax","preventAppSwitch","showCancel","cancel","run","persistTemplate","setTemplate","selectApp","before","after","updateApp","selectContentType","setContentType","selectTemplate","tabIndex","newApp","ajax","SupportsAjaxReload","showMessage","toString","then","reloadAndReInit","newConfig","AppComponent","SxcAppComponent","el","context","iconService","preConfigure","sxc","addLangs","ctxDto","lang","Language","setDefaultLang","use","langCode5","split","langCode2","Current","CoreModule","imports","CommonModule","HttpClientModule","InstallerModule","MatProgressSpinnerModule","MATERIAL_MODULES","MatButtonModule","MatDialogModule","MatExpansionModule","MatIconModule","MatProgressBarModule","MatTabsModule","MatToolbarModule","MaterialModule","TemplatePickerModule","BrowserAnimationsModule","MatMenuModule","FormsModule","FlexLayoutModule","TranslateModule","loader","TranslateHttpLoader","AppModule","bootstrap","SxcHttpInterceptorProvider","BrowserModule","provide","TranslateLoader","useFactory","HttpLoaderFactory","deps","HttpClient","BootController","_reboot","instance","reboot","enableProdMode","platform","__NgCli_bootstrap_1","destroyed","bootstrapModule","appBootstrap","catch","err"],"sourceRoot":"webpack:///","sources":["./src/app/config.ts","../connect-parts/inpage-quick-dialog/quick-dialog-params.ts","./src/app/i18n/constants.ts","./src/app/core/backend-settings.ts","./src/app/core/app-icon-registry.ts","./src/app/core/behavior-observable.ts","./src/app/debug-config.ts","./src/app/core/log.ts","./src/app/template-picker/constants.ts","./src/app/template-picker/data/content-types-processor.service.ts","./src/app/template-picker/data/template-processor.ts","./src/app/core/app.ts","./src/app/template-picker/picker.service.ts","./src/app/core/constants.ts","./src/app/template-picker/template-filter.pipe.ts","./src/app/template-picker/current-data.service.ts","./src/app/installer/installer.service.ts","./src/app/installer/getting-started.service.ts","./src/app/installer/installer.component.html","./src/app/installer/installer.component.ts","./src/app/template-picker/filter-by-property-value.pipe.ts","./src/app/template-picker/template-picker.component.html","./src/app/template-picker/template-picker.component.ts","./src/app/app.component.ts","./src/app/i18n/index.ts","./src/app/app.component.html","./src/app/core/core.module.ts","./src/app/installer/installer.module.ts","./src/app/material-module.ts","./src/app/template-picker/template-picker.module.ts","./src/app/app.module.ts","./src/environments/environment.prod.ts","./src/app/core/boot-control.ts","./src/main.ts"],"sourcesContent":["import { SxcGlobal } from '@2sic.com/2sxc-typings';\r\nimport { urlParams } from './core/constants';\r\n\r\ndeclare const $2sxc: SxcGlobal;\r\n\r\nexport class Config {\r\n  static appId = () => parseInt(get(urlParams.appId));\r\n  static apps = () => get(urlParams.apps);\r\n\r\n  static moduleId = () => Number(req(urlParams.moduleId));\r\n  static cbId = () => Number(req(urlParams.contentBlockId));\r\n\r\n  static getSxcInstance = () => $2sxc(Config.moduleId(), Config.cbId());\r\n}\r\n\r\n\r\nfunction req(key) { return $2sxc.urlParams.require(key); }\r\n\r\nfunction get(key) { return $2sxc.urlParams.get(key); }\r\n","\r\n/**\r\n * These are all the url params the UI needs to function\r\n * @internal\r\n */\r\nexport const urlParams = {\r\n  // These are used in UI.html, but we keep them here so we have a full list documented\r\n  pageId: 'tid',\r\n\r\n  /**\r\n   *  request verification token header name\r\n   */\r\n  requestVerificationTokenHeader: 'rvth',\r\n\r\n  /**\r\n   *  request verification token value\r\n   */\r\n  requestVerificationToken: 'rvt',\r\n\r\n  api: 'api',\r\n\r\n  /**\r\n   * Context: App we're on.\r\n   * This is often 0 (zero) as initially it's not known.\r\n   */\r\n  appId: 'appId',\r\n\r\n  /**\r\n   * Selection of what apps should be shown by the dialog\r\n   * this is an optional parameter\r\n   */\r\n  apps: 'apps',\r\n\r\n  /** Context: Module we're on */\r\n  moduleId: 'mid',\r\n\r\n  /** Context: ContentBlock we're on */\r\n  contentBlockId: 'cbid',\r\n};\r\n","/* Constants for i18n */\r\n\r\nexport const PrimaryUiLanguage = 'en';\r\nexport const SupportedLanguages = ['en', 'de', 'es', 'fr', 'it', 'uk'];\r\nexport const i18nPrefix = 'TemplatePicker.LayoutElement';\r\nexport const pathToI18n = './i18n/';\r\nexport const i18nExtension = '.js';\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap, share, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Constants } from './constants';\r\nimport { ContextDto } from '../../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BackendSettings {\r\n\r\n  appId = new BehaviorSubject<number>(0);\r\n\r\n  data: Observable<ContextDto>;\r\n\r\n  showAdvanced$: Observable<boolean>;\r\n\r\n  constructor(http: HttpClient) {\r\n    this.data = this.appId.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(id => http.get<{ Context: ContextDto }>(`${Constants.webApiDialogContext}?appId=${id}`)),\r\n      map(bundle => bundle.Context),\r\n      share()\r\n    );\r\n\r\n    this.showAdvanced$ = this.data.pipe(map(settings => settings.Enable?.CodeEditor ?? false));\r\n  }\r\n\r\n  setApp(id: number) {\r\n    this.appId.next(id);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatIconRegistry } from '@angular/material/icon';\r\n\r\n@Injectable()\r\nexport class AppIconsService {\r\n  constructor(private matIconRegistry: MatIconRegistry) { }\r\n\r\n  load() {\r\n    // v18.01 - changing to Material Symbols\r\n    // this.matIconRegistry.setDefaultFontSetClass('material-icons-outlined');\r\n    this.matIconRegistry.setDefaultFontSetClass('material-symbols-outlined');\r\n\r\n    console.log('2dm: Loading App Icons');\r\n  }\r\n}\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// Todo: probably not needed any more, since now Subjects are automatically observables\r\nexport class BehaviorObservable<T> extends Observable<T> {\r\n  private constructor() {\r\n    super();\r\n  }\r\n  /** The source subject */\r\n  subject: BehaviorSubject<T>;\r\n\r\n  /** will reset back to the initial value */\r\n  reset: () => void;\r\n\r\n  /** check if it's the initial object */\r\n  isInitial: () => boolean;\r\n\r\n  /** the initial object */\r\n  initialValue: T;\r\n\r\n  /** shorthand to push next value */\r\n  next: (value: T) => void;\r\n\r\n  static create<T>(initialValue: T): BehaviorObservable<T> {\r\n    const subj = new BehaviorSubject<T>(initialValue);\r\n    const obs = subj.asObservable() as BehaviorObservable<T>;\r\n    obs.initialValue = initialValue;\r\n    obs.subject = subj;\r\n    obs.reset = () => {\r\n      obs.subject.next(obs.initialValue);\r\n    };\r\n    obs.isInitial = () => {\r\n      return obs.subject.value === obs.initialValue;\r\n    };\r\n    obs.next = (value: T) => obs.subject.next(value);\r\n    return obs;\r\n  }\r\n}\r\n","\r\n/** configuration what to debug directly to the screen and what to keep secret */\r\nexport const DebugConfig = {\r\n\r\n  /** logger configuration */\r\n  logger: {\r\n    /** should we stream messages directly to console */\r\n    logToConsole: false,\r\n    /** should we also log internal events */\r\n    internals: false,\r\n    /** allow url param ?debug=true to turn on logging */\r\n    urlDebugEnablesAll: true,\r\n    /** if url param ?debug=true also enables all live-logging */\r\n    urlDebugActivatesLive: true\r\n  },\r\n\r\n  /** api debugging */\r\n  api: {\r\n    enabled: false,\r\n    streams: false,\r\n  },\r\n\r\n  /** template picker */\r\n  picker: {\r\n    enabled: false,\r\n    streams: false,\r\n    showDebugPanel: false\r\n  },\r\n\r\n  /** template state */\r\n  state: {\r\n    enabled: false,\r\n    streams: false,\r\n    inits: false,\r\n  },\r\n\r\n  /** content-type processor */\r\n  typeProcessor: false,\r\n  /** template processor */\r\n  templateProcessor: false,\r\n};\r\n","import { Constants } from './constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n\r\n/** @public */\r\nexport class Log {\r\n  /** global state to determine if logging to console should be done or not */\r\n  public static forceLogToConsole = false;\r\n\r\n  name = '';\r\n  autoDump = DebugConfig.logger.logToConsole;\r\n  logs = new Array<string>();\r\n  parent: Log;\r\n  loggers: any = new Object();\r\n\r\n  constructor (name?: string, parent?: Log) {\r\n    this.name = name;\r\n    this.parent = parent;\r\n  }\r\n\r\n  add(msg: string, ...args: any[]): void {\r\n    this.logs.push(msg);\r\n    if (this.name) msg = this.name + ':' + msg;\r\n    if (this.parent) this.parent.logs.push(msg);\r\n    if (this.autoDump || Log.forceLogToConsole) {\r\n      arguments[0] = Constants.logName + ': ' + msg;\r\n      console.log.apply(null, arguments);\r\n    }\r\n  }\r\n\r\n  subLog(name: string, autoDump?: boolean): Log {\r\n    const newLog = new Log(name, this);\r\n    this.loggers[name] = newLog;\r\n    newLog.autoDump = typeof(autoDump) === 'boolean'\r\n      ? autoDump : this.autoDump;\r\n    if (DebugConfig.logger.internals)\r\n      this.add(`logger: subLog(${name}, ${autoDump}) resulting in autoDump=${newLog.autoDump}`);\r\n\r\n    return newLog;\r\n  }\r\n\r\n  dump(): void {\r\n    this.add('dumping to console');\r\n    console.log(`Log dump for '${this.name}'`, this);\r\n  }\r\n\r\n  public static configureRuntimeLogging(state: boolean) {\r\n    if(DebugConfig.logger.urlDebugActivatesLive)\r\n      Log.forceLogToConsole = state;\r\n  }\r\n}\r\n\r\n\r\nexport const log = new Log();\r\n\r\nwindow['logger'] = log;\r\n","export const cViewWithoutContent = '_LayoutElement';\r\n","import { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { i18nPrefix } from 'app/i18n';\r\nimport { cViewWithoutContent } from '../constants';\r\nimport { ContentType } from '../content-type';\r\nimport { Template } from '../template';\r\n\r\n// const debug = true;\r\nconst log = parentLog.subLog('ct-processor', DebugConfig.typeProcessor);\r\n\r\n/**\r\n * This is a helper to do various transformations for the list of content-types\r\n */\r\n@Injectable()\r\nexport class ContentTypesProcessor {\r\n  constructor(private translate: TranslateService) { }\r\n\r\n  public buildList(allTypes: ContentType[], type: ContentType, allTemplates: Template[], template: Template): ContentType[] {\r\n    log.add('buildList(...) of content-types to show');\r\n    let unhide = this.unhideSelectedType(allTypes, type, template);\r\n    unhide = this.addEmptyTypeIfNeeded(unhide, allTemplates);\r\n    const filtered = this.hideNecessaryTypes(unhide);\r\n    return this.sortTypes(filtered);\r\n  }\r\n\r\n  private hideNecessaryTypes(types: ContentType[]): ContentType[] {\r\n    return types.filter(t => !t.IsHidden);\r\n  }\r\n\r\n  /**\r\n   * Ensure current content-type is visible, just in case it's configured as hidden\r\n   */\r\n  private unhideSelectedType(contentTypes: ContentType[], currentType: ContentType, currentTemplate: Template): ContentType[] {\r\n    // console.log('2dm before', JSON.parse(JSON.stringify(contentTypes)));\r\n    // console.log('2dm current T', currentTemplate?.TemplateId);\r\n    // console.log('2dm currentType Static', currentType?.StaticName);\r\n    contentTypes\r\n      // 2022-11-04 2dm disabled, think it's never used\r\n      // 2022-11-11 trying to fix another issue....\r\n      // .filter(c => (currentTemplate?.TemplateId === c.TemplateId) || (c.StaticName === currentType?.StaticName))\r\n      .filter(c => (c.StaticName === currentType?.StaticName && c.StaticName !== undefined))\r\n      .forEach(c => c.IsHidden = false);\r\n    // console.log('2dm after', contentTypes);\r\n    return contentTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * add an empty content-type for UI selection if any template would support \"no content-type\"\r\n   */\r\n  private addEmptyTypeIfNeeded(contentTypes: ContentType[], templates: Template[]): ContentType[] {\r\n    const layoutElementLabel = (this.translate && this.translate.instant(i18nPrefix))\r\n      || cViewWithoutContent; // if translate is not ready, use the nicer label\r\n\r\n    // add option for empty content type\r\n    if (templates && templates.find(t => t.ContentTypeStaticName === '')) {\r\n      contentTypes = contentTypes.slice(); // copy it first to not change original\r\n      contentTypes.push({\r\n        StaticName: cViewWithoutContent,\r\n        Name: i18nPrefix,\r\n        Thumbnail: null,\r\n        Label: layoutElementLabel,\r\n        IsHidden: false,\r\n      } as ContentType);\r\n    }\r\n    return contentTypes;\r\n  }\r\n\r\n  /**\r\n   * Sort the types by label\r\n   */\r\n  private sortTypes(contentTypes: ContentType[]): ContentType[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return contentTypes.sort((a, b) => ('' + a.Label).localeCompare(b.Label));\r\n  }\r\n\r\n  /**\r\n   * Sort the types by IsDefault DESC and Label ASC\r\n  */\r\n  private static sortTypesWithDefault(contentTypes: ContentType[]): ContentType[] {\r\n    return contentTypes.sort((a, b) => {\r\n      // first sort by IsDefault DESC\r\n      if (a.IsDefault > b.IsDefault) return -1;\r\n      if (a.IsDefault < b.IsDefault) return 1;\r\n      // than sort by Label ASC\r\n      return ('' + a.Label).localeCompare(b.Label);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get first default or alphabetically\r\n   */\r\n  static firstDefault(contentTypes: ContentType[]): ContentType {\r\n    return this.sortTypesWithDefault([...contentTypes])[0];\r\n  }\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  static findContentTypesById(contentTypes: ContentType[], selectedContentTypeId: string): ContentType {\r\n    log.add(`findContentTypesById(..., ${selectedContentTypeId}`);\r\n    return selectedContentTypeId\r\n      ? contentTypes.find(c => c.StaticName === selectedContentTypeId)\r\n      : null;\r\n  }\r\n\r\n}\r\n","import { Template } from '../template';\r\nimport { ContentType } from '../content-type';\r\nimport { App } from 'app/core/app';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\nconst log = parentLog.subLog('TemplateProcessor', DebugConfig.templateProcessor);\r\n\r\nexport class TemplateProcessor {\r\n  static pickSelected(selected: Template, templates: Template[], type: ContentType, app: App): Template {\r\n    log.add(`pickSelected(selected: ${selected && selected.TemplateId}, templates: ${templates.length})`)\r\n    // if one is selected, return that; but only if it's in the list of possible templates\r\n    if (selected && templates.find(t => t.TemplateId === selected.TemplateId))\r\n      return selected;\r\n\r\n    // if none is selected, return the first (preferred default DESC); assuming a type or app has been selected\r\n    if ((type || app) && templates && templates.length) return this.sortTemplates([...templates])[0];\r\n\r\n    // nothing valid\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Sort the templates by IsDefault DESC and Name ASC\r\n   */\r\n  static sortTemplates(templates: Template[]): Template[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return templates.sort((a, b) => {\r\n      // first sort by IsDefault DESC\r\n      if (a.IsDefault > b.IsDefault) return -1;\r\n      if (a.IsDefault < b.IsDefault) return 1;\r\n      // than by Name ASC\r\n      return ('' + a.Name).localeCompare(b.Name);\r\n    });\r\n  }\r\n}\r\n","export class App {\r\n    AppId: number;\r\n    Name: string;\r\n    Thumbnail: string;\r\n    SupportsAjaxReload: boolean;\r\n    Version: string;\r\n    VersionMain: number;\r\n\r\n    constructor(json: any) {\r\n        Object.assign(this, json);\r\n\r\n        try {\r\n            this.VersionMain = parseInt(this.Version.substr(0,2));\r\n        } catch(e) { /* ignore */}\r\n    }\r\n\r\n}\r\n","import { combineLatest } from 'rxjs';\r\nimport { map, startWith, share } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { App } from 'app/core/app';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Config } from '../config';\r\n\r\nconst log = parentLog.subLog('api', DebugConfig.api.enabled);\r\nconst uninitializedList = []; // this must be created as a variable, so we can check later if it's still the original or a new empty list\r\n@Injectable()\r\nexport class PickerService {\r\n  // #region public properties\r\n  /** all apps of the zone */\r\n  apps$ = BehaviorObservable.create<App[]>(uninitializedList);\r\n\r\n  /** all types of this app */\r\n  contentTypes$ = BehaviorObservable.create<ContentType[]>(uninitializedList);\r\n\r\n  /** templates/views of this app */\r\n  templates$ = BehaviorObservable.create<Template[]>(uninitializedList);\r\n\r\n  /**\r\n   * ready is true when all necessary data is loaded\r\n   * note that apps are not loaded if not needed */\r\n  ready$ = new Observable<boolean>();\r\n  // #endregion\r\n\r\n  // #region private properties\r\n  private mustLoadApps = false;\r\n  // all the subjects - these are all multi-cast, so don't use share!\r\n  // #endregion\r\n\r\n  constructor(private http: HttpClient) {\r\n    log.add('constructor()');\r\n    this.buildObservables();\r\n    this.enableLogging();\r\n  }\r\n\r\n  private buildObservables() {\r\n    log.add(`buildObservables()`);\r\n\r\n    // ready requires all to have data, but app can be skipped if not required\r\n    this.ready$ = combineLatest([this.apps$, this.contentTypes$, this.templates$])\r\n      .pipe(\r\n        map(([a, ct, t]) => ({ apps: a, types: ct, templates: t })),\r\n        map(set => set.templates !== uninitializedList\r\n          && set.types !== uninitializedList\r\n          && (!this.mustLoadApps || !!(set.apps && set.apps !== uninitializedList))),\r\n        startWith(false),\r\n        share());\r\n  }\r\n\r\n  public saveAppId(appId: string, reloadParts: boolean): Promise<any> {\r\n    log.add(`saveAppId(${appId}, ${reloadParts})`);\r\n    // skip doing anything here, if we're in content-mode (which doesn't use/change apps)\r\n    if (!this.loadApps) throw new Error(`can't save app, as we're not in app-mode`);\r\n    return this.http.post(`${Constants.webApiSetApp}?appId=${appId}`, {}).toPromise();\r\n  }\r\n\r\n\r\n\r\n  public initLoading(requireApps: boolean): Observable<any> {\r\n    log.add(`initLoading(requireApps: ${requireApps})`);\r\n    this.mustLoadApps = requireApps;\r\n    if (requireApps) this.loadApps();\r\n    return this.reloadAppParts();\r\n  }\r\n\r\n  public reloadAppParts(): Observable<any> {\r\n    return combineLatest([this.loadTemplates(), this.loadContentTypes()]);\r\n  }\r\n\r\n  /**\r\n   * load templates - is sometimes repeated if the app changes\r\n   */\r\n  public loadTemplates(): Observable<any> {\r\n    log.add('loadTemplates()');\r\n    this.templates$.reset();\r\n    const obs = this.http.get<Template[]>(Constants.webApiGetTemplates)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.templates$.next(response || []));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load the ContentTypes - only needed on first initialization\r\n   */\r\n  private loadContentTypes(): Observable<any> {\r\n    log.add(`loadContentTypes()`);\r\n    this.contentTypes$.reset();\r\n    const obs = this.http.get<ContentType[]>(Constants.webApiGetTypes)\r\n      .pipe(share()); // ensure it's only run once\r\n    obs.pipe(map(response => (response || []).map(ct => {\r\n        ct.Label = ct.Properties?.Label ?? ct.Name;\r\n        return ct;\r\n      })))\r\n      .subscribe(json => this.contentTypes$.next(json));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load all Apps, only needed on first initialization\r\n   */\r\n  private loadApps(): Observable<any> {\r\n    const alreadyLoaded = !this.apps$.isInitial();\r\n    log.add(`loadApps() - skip:${alreadyLoaded}`);\r\n    if (alreadyLoaded) return;\r\n\r\n    const appsFilter = Config.apps();\r\n\r\n    const obs = this.http.get<any[]>(`${Constants.webApiGetApps}?apps=${appsFilter}`)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.apps$.subject.next(response.map(a => new App(a))));\r\n    return obs;\r\n  }\r\n\r\n  private enableLogging() {\r\n    const streamLog = parentLog.subLog('api-streams', DebugConfig.api.streams);\r\n    this.apps$.subscribe(a => streamLog.add(`app$:${a && a.length}`));\r\n    this.contentTypes$.subscribe(ct => streamLog.add(`contentTypes$:${ct && ct.length}`));\r\n    this.templates$.subscribe(t => streamLog.add(`templates$:${t && t.length}`));\r\n    this.ready$.subscribe(r => streamLog.add(`ready$:${r}`));\r\n  }\r\n\r\n}\r\n","export const Constants = {\r\n  logName: 'quick-edit',\r\n\r\n  //#region WebApi Endpoints used: 2sxc\r\n  webApiDialogContext: 'admin/dialog/settings',\r\n  webApiInstallPackage: 'sys/install/RemotePackage',\r\n  // webApiRemoteInstaller: 'sys/install/RemoteWizardUrl',\r\n  webApiInstallSettings: 'sys/install/InstallSettings',\r\n  webApiGetTemplates: 'cms/block/Templates',\r\n  webApiGetTypes: 'cms/block/ContentTypes',\r\n  webApiGetApps: 'cms/block/Apps',\r\n  webApiSetApp: 'cms/block/App',\r\n  //#endregion\r\n};\r\n\r\nexport * from '../../../../connect-parts/inpage-quick-dialog/quick-dialog-params';\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { cViewWithoutContent } from './constants';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\n\r\n@Pipe({\r\n  name: 'templateFilter'\r\n})\r\nexport class TemplateFilterPipe implements PipeTransform {\r\n\r\n\r\n  transform(templates: Template[], args: {isContent: boolean, contentType: ContentType } ): Template[] {\r\n\r\n    const typeId = args.contentType ? args.contentType.StaticName : undefined;\r\n\r\n    // in case we're filtering for the special \"empty\" code, use empty in the filter\r\n    const typeNameFilter = typeId === cViewWithoutContent\r\n      ? ''\r\n      : (typeId || '');\r\n\r\n    return templates\r\n      .filter(t => !t.IsHidden)\r\n      .filter(t => !args.isContent || t.ContentTypeStaticName === typeNameFilter);\r\n  }\r\n}\r\n","\r\n// #region imports\r\nimport { Injectable } from '@angular/core';\r\nimport { App } from 'app/core/app';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { IQuickDialogConfig } from 'app/interfaces/shared';\r\nimport { combineLatest, merge, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map, scan, share, startWith, tap } from 'rxjs/operators';\r\nimport { ContentType } from './content-type';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { TemplateProcessor } from './data/template-processor';\r\nimport { PickerService } from './picker.service';\r\nimport { Template } from './template';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\n\r\n// #endregion\r\n\r\nconst log = parentLog.subLog('state', DebugConfig.state.enabled);\r\n\r\n@Injectable()\r\nexport class CurrentDataService {\r\n  /** Currently selected app */\r\n  app$: Observable<App>;\r\n\r\n  /** Relevant types */\r\n  types$: Observable<ContentType[]>;\r\n\r\n  /** The currently selected type */\r\n  type$: Observable<ContentType>;\r\n\r\n  /** Stream containing the currently selected template or null if not selected */\r\n  template$: Observable<Template>;\r\n\r\n  /** all templates relevant for the UI */\r\n  templates$: Observable<Template[]>;\r\n\r\n  private appId$ = BehaviorObservable.create<number>(null);\r\n  private initialTypeId$ = BehaviorObservable.create<string>(null);\r\n  private initialTemplateId$ = BehaviorObservable.create<number>(null);\r\n  private selectedType$ = BehaviorObservable.create<ContentType>(null);\r\n  private selectedTemplate$ = BehaviorObservable.create<Template>(null);\r\n\r\n\r\n  private config: IQuickDialogConfig;\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    private templateFilter: TemplateFilterPipe,\r\n    private ctProcessor: ContentTypesProcessor\r\n  ) {\r\n    this.buildBasicObservables();\r\n  }\r\n\r\n  private buildBasicObservables() {\r\n    // app-stream should contain selected app, once the ID is known - or null\r\n    this.app$ = combineLatest([\r\n      this.api.apps$,\r\n      this.appId$\r\n    ]).pipe(map(([apps, appId]) => apps.find(a => a.AppId === appId)));\r\n\r\n    // current type should be either the initial type, or a manually selected type\r\n    const initialType$ = combineLatest([\r\n      this.initialTypeId$,\r\n      this.api.contentTypes$\r\n    ]).pipe(map(([typeId, all]) => ContentTypesProcessor.findContentTypesById(all, typeId)));\r\n\r\n    this.type$ = merge(initialType$, this.selectedType$).pipe(\r\n      startWith(null as ContentType),\r\n      share()\r\n    );\r\n\r\n    // the templates-list is always filtered by the currently selected type\r\n    this.templates$ = combineLatest([\r\n      this.api.templates$,\r\n      this.type$\r\n    ]).pipe(\r\n      map(([all, current]) => this.findTemplatesForTypeOrAll(all, current)),\r\n      startWith(new Array<Template>())\r\n    );\r\n\r\n    // the current template is either the last selected, or auto-selected when conditions change\r\n    const initialTemplate$ = combineLatest([\r\n      this.initialTemplateId$,\r\n      this.api.templates$\r\n    ]).pipe(\r\n        map(([id, templates]) => templates.find(t => t.TemplateId === id)),\r\n        filter(t => t != null), // only allow new values which are not null, to guarantee later template$ updates don't affect this\r\n        startWith(null as Template),\r\n        share()\r\n      );\r\n\r\n    const selected$ = merge(initialTemplate$, this.selectedTemplate$.pipe(filter(t => t !== null)));\r\n    this.template$ = combineLatest([\r\n      selected$,\r\n      this.templates$,\r\n      this.type$,\r\n      this.app$\r\n    ]).pipe(\r\n      map(([selected, templates, type, app]) => TemplateProcessor.pickSelected(selected, templates, type, app)),\r\n      startWith(null as Template),\r\n      share(),\r\n      );\r\n\r\n    // construct list of relevant types for the UI\r\n    this.types$ = combineLatest([\r\n      this.api.contentTypes$,\r\n      this.type$,\r\n      this.api.templates$,\r\n      this.template$\r\n    ]).pipe(\r\n      map(([types, type, templates, template]) => this.ctProcessor.buildList(types, type, templates, template)),\r\n      share()\r\n    );\r\n  }\r\n\r\n  init(config: IQuickDialogConfig): Observable<boolean> {\r\n    this.config = config;\r\n    // app-init is ready, if it has an app or doesn't need to init one\r\n    log.add(`initializing with config:${JSON.stringify(config)}`, config);\r\n    const appReady$ = this.app$.pipe(\r\n      map(a => config.isContent || !!a),\r\n      startWith(config.isContent || !config.appId)\r\n    );\r\n\r\n    const typeReady$ = this.type$.pipe(\r\n      map(t => !!t),\r\n      scan((acc, value) => acc || value, !config.contentTypeId)\r\n    );\r\n    const templReady$ = this.template$.pipe(\r\n      map(t => !!t),\r\n      debounceTime(100), // need to debounce, because the template might have a value and change again\r\n      startWith(!config.templateId)\r\n    );\r\n\r\n    const loadAll$ = combineLatest([\r\n      appReady$,\r\n      templReady$,\r\n      typeReady$\r\n    ]).pipe(map(set => set[0] && set[1] && set[2]));\r\n\r\n    this.initLogging(appReady$, typeReady$, templReady$, loadAll$);\r\n\r\n    // automatically set the app, type and template\r\n    this.activateCurrentApp(config.appId);\r\n    this.initialTypeId$.next(config.contentTypeId);\r\n    this.initialTemplateId$.next(config.templateId);\r\n\r\n    return loadAll$;\r\n  }\r\n\r\n  private initLogging(inita$: Observable<boolean>,\r\n    inittyp$: Observable<boolean>,\r\n    initt$: Observable<boolean>,\r\n    initAll$: Observable<boolean>): void {\r\n    const slog = log.subLog('stream', DebugConfig.state.streams);\r\n    this.type$.subscribe(t => slog.add(`type$ update:'${t && t.Label}'`, t));\r\n    this.app$.subscribe(a => slog.add(`app$ update:'${a && a.AppId}'`, a));\r\n    this.template$.subscribe(t => slog.add(`template$ update:'${t && t.TemplateId}'`, t));\r\n    this.templates$.subscribe(t => slog.add(`templates$ count:'${t && t.length}'`, t));\r\n    this.types$.subscribe(t => slog.add(`types$ count:'${t && t.length}'`, t));\r\n    this.selectedTemplate$.subscribe(t => slog.add(`selectedTemplate$: ${t && t.TemplateId}`));\r\n\r\n    const initLog = log.subLog('stream-init', DebugConfig.state.inits);\r\n    this.initialTypeId$.subscribe(t => initLog.add(`initial TypeId:'${t}'`, t));\r\n    this.initialTemplateId$.subscribe(t => initLog.add(`initial TemplateId:'${t}'`, t));\r\n    inita$.subscribe(t => initLog.add(`init app$`, t));\r\n    inittyp$.subscribe(t => initLog.add(`init type$`, t));\r\n    initt$.subscribe(t => initLog.add(`init temp$`, t));\r\n    initAll$.subscribe(t => initLog.add(`init all$`, t));\r\n  }\r\n\r\n\r\n\r\n  //#region activate calls from outside\r\n  activateCurrentApp(appId: number) {\r\n    log.add(`activateApp(${appId})`);\r\n    this.appId$.next(appId);\r\n  }\r\n  activateType(contentType: ContentType) {\r\n    log.add(`activateType(${contentType.Name})`);\r\n    this.selectedType$.next(contentType);\r\n  }\r\n  activateTemplate(template: Template) {\r\n    log.add(`activateTemplate(${template.TemplateId})`);\r\n    this.selectedTemplate$.next(template);\r\n  }\r\n  //#endregion\r\n\r\n  private findTemplatesForTypeOrAll(allTemplates: Template[], contentType: ContentType): Template[] {\r\n    return this.templateFilter.transform(allTemplates, { contentType, isContent: this.config.isContent });\r\n  }\r\n\r\n}\r\n","\r\nimport { of } from 'rxjs';\r\n\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Constants } from 'app/core/constants';\r\nimport { InstallPackage } from './messages';\r\n\r\n// copied to eav-ui\r\n@Injectable()\r\nexport class InstallerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  installPackages(packages: InstallPackage[], step: (p: InstallPackage) => void): Observable<any> {\r\n    return packages.reduce(\r\n      (t: Observable<Response>, c) => t.pipe(\r\n        switchMap(() => {\r\n          if (!c.url) return of(true);\r\n          step(c);\r\n          return <Observable<any>>this.http.post(`${Constants.webApiInstallPackage}?packageUrl=${c.url}`, {});\r\n        })),\r\n      of(true));\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { log } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { InstallSettings } from './installer-models';\r\n\r\n// copied to eav-ui\r\n@Injectable()\r\nexport class AppInstallSettingsService {\r\n\r\n  private installSettingsSubject: Subject<InstallSettings> = new Subject<InstallSettings>();\r\n  settings$: Observable<InstallSettings> = this.installSettingsSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    const ready$ = this.settings$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    ready$.pipe(tap(r => log.add(`ready getting started:${r}`))).subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<InstallSettings>(`${Constants.webApiInstallSettings}?isContentApp=${isContentApp}`)\r\n      .subscribe(json => this.installSettingsSubject.next(json));\r\n  }\r\n}\r\n","<div class=\"progress\" *ngIf=\"showProgress\">\r\n  <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n  <span>Installing {{ currentPackage?.displayName }}..</span>\r\n</div>\r\n<div *ngIf=\"ready\">\r\n  <iframe #installerWindow class=\"fr-getting-started\" id=\"frGettingStarted\" [src]=\"remoteInstallerUrl\" width=\"100%\" height=\"300px\"></iframe>\r\n</div>\r\n<div *ngIf=\"showDebug\">\r\n  Debug:\r\n  <button type=\"button\" (click)=\"sendMessage('test')\">Send Test message</button>\r\n  -\r\n  Simulate Install: {{devSimulateInstall}}\r\n  <button type=\"button\" (click)=\"toggleSimulate()\">toggle</button>\r\n  - \r\n  <button type=\"button\" (click)=\"sendMessage('specs')\">Send 'specs' message</button>\r\n</div>","\r\nimport { tap, switchMap, map, filter, debounceTime, catchError, take } from 'rxjs/operators';\r\nimport { Component, OnInit, Input, ViewChild, ElementRef } from '@angular/core';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { fromEvent, of, Subscription } from 'rxjs';\r\nimport { AppInstallSettingsService } from './getting-started.service';\r\nimport { Config } from '../config';\r\nimport { CrossWindowMessage, InstallPackage, SpecsForInstaller } from './messages';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { IDialogFrameElement } from '../../../../connect-parts/inpage-quick-dialog';\r\nimport { InstallSettings } from './installer-models';\r\n\r\n@Component({\r\n  selector: 'app-installer',\r\n  templateUrl: './installer.component.html',\r\n  styleUrls: ['./installer.component.scss']\r\n})\r\nexport class InstallerComponent implements OnInit {\r\n  @Input() isContentApp: boolean;\r\n\r\n  @ViewChild('installerWindow') installerWindow: ElementRef;\r\n\r\n  showProgress: boolean;\r\n  currentPackage: InstallPackage;\r\n  remoteInstallerUrl = '';\r\n  settings: InstallSettings;\r\n  ready = false;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  showDebug = DebugConfig.picker.showDebugPanel;\r\n\r\n  devSimulateInstall = false;\r\n\r\n  constructor(\r\n    private installer: InstallerService,\r\n    private api: AppInstallSettingsService,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    // copied to eav-ui file-upload-dialog\r\n    this.subscriptions.push(\r\n      this.api.settings$.subscribe(settings => {\r\n        this.settings = settings;\r\n        this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(settings.remoteUrl);\r\n        this.ready = true;\r\n      }));\r\n\r\n    // get configuration from iframe-bridge and set everything\r\n    const bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = bridge.getAdditionalDashboardConfig();\r\n    this.showDebug = dashInfo.debug;\r\n\r\n    window.bootController.rebootRequest$.pipe(\r\n      debounceTime(1000))\r\n      .subscribe(() => this.destroy());\r\n  }\r\n\r\n  destroy(): void {\r\n    this.subscriptions.forEach(sub => sub.unsubscribe());\r\n    console.log('destroy subs', this.subscriptions);\r\n  }\r\n\r\n  private alreadyProcessing = false;\r\n\r\n  // copied to eav-ui file-upload-dialog\r\n  // Initial Observable to monitor messages\r\n  private messages$ = fromEvent(window, 'message').pipe(\r\n\r\n    // Ensure only one installation is processed.\r\n    filter(() => !this.alreadyProcessing),\r\n\r\n    // Get data from event.\r\n    map((evt: MessageEvent) => {\r\n      try {\r\n        // note: since 2024-05 we are suddenly receiving object messages from somewhere\r\n        // not sure from where - atm we'll just use, but maybe we should filter them out?\r\n        if (typeof(evt.data) === 'object')\r\n          return evt.data as CrossWindowMessage;\r\n        return JSON.parse(evt.data) as CrossWindowMessage;\r\n      } catch (e) {\r\n        console.error('error processing message. Message / errors were ', evt.data, e);\r\n        return void 0;\r\n      }\r\n    }),\r\n\r\n    // Check if data is valid and the moduleID matches\r\n    filter(data => data && Number(data.moduleId) === Config.moduleId()),\r\n  );\r\n\r\n  ngOnInit() {\r\n    this.api.loadGettingStarted(this.isContentApp);\r\n\r\n    // Subscription to listen to 'test' messages\r\n    this.subscriptions.push(this.messages$.pipe(\r\n      tap((data) => {\r\n        console.log('debug data', data);\r\n      }),\r\n      filter(data => data.action === 'test'),\r\n      tap(() => { console.log('test message received'); }),\r\n    ).subscribe());\r\n\r\n    // copied to eav-ui file-upload-dialog\r\n    // Subscription to listen to 'specs' messages\r\n    this.subscriptions.push(this.messages$.pipe(\r\n      // Verify it's for this action\r\n      filter(data => data.action === 'specs'),\r\n\r\n      // Send message to iframe\r\n      tap(() => {\r\n        const winFrame = this.installerWindow.nativeElement as HTMLIFrameElement;\r\n        const specsMsg: SpecsForInstaller = {\r\n          action: 'specs',\r\n          data: {\r\n            installedApps: this.settings.installedApps,\r\n            rules: this.settings.rules,\r\n          },\r\n        };\r\n        const specsJson = JSON.stringify(specsMsg);\r\n        winFrame.contentWindow.postMessage(specsJson, '*');\r\n        console.log('debug: just sent specs message:' + specsJson, specsMsg, winFrame);\r\n      }),\r\n    ).subscribe());\r\n\r\n    // copied to eav-ui file-upload-dialog\r\n    // Subscription to listen to 'install' messages\r\n    this.subscriptions.push(this.messages$.pipe(\r\n      filter(data => data.action === 'install'),\r\n\r\n      // Get packages from data.\r\n      map(data => Object.values(data.packages)),\r\n\r\n      // Show confirm dialog.\r\n      filter(packages => {\r\n        const packagesDisplayNames = packages\r\n          .reduce((t, c) => `${t} - ${c.displayName}\\n`, '');\r\n\r\n        const msg = `Do you want to install these packages?\r\n\r\n${packagesDisplayNames}\r\nThis takes about 10 seconds per package. Don't reload the page while it's installing.`;\r\n        return confirm(msg);\r\n      }),\r\n\r\n      // Install the packages one at a time\r\n      switchMap(packages => {\r\n        this.alreadyProcessing = true;\r\n        this.showProgress = true;\r\n        if (this.devSimulateInstall) {\r\n          alert('would install packages now, see list in console');\r\n          console.log('packages', packages);\r\n          return of(true);\r\n        } else\r\n          return this.installer.installPackages(packages, p => this.currentPackage = p);\r\n      }),\r\n\r\n      tap(() => {\r\n        this.showProgress = false;\r\n        alert('Installation complete 👍');\r\n        if (this.devSimulateInstall)\r\n          console.log(`would reload now, but won't, as we're just simulating.`);\r\n        else\r\n          window.top.location.reload();\r\n      }),\r\n\r\n      catchError(error => {\r\n        console.error('Error: ', error);\r\n        this.showProgress = false;\r\n        this.alreadyProcessing = false;\r\n        const errorMsg = `An error occurred: Package ${this.currentPackage.displayName}\r\n\r\n${error.error?.Message ?? error.error?.message ?? ''}\r\n\r\n${error.message}\r\n\r\nPlease try again later or check how to manually install content-templates: https://azing.org/2sxc/r/0O4OymoA`;\r\n        alert(errorMsg);\r\n        return of(error);\r\n      }),\r\n    ).subscribe());\r\n  }\r\n\r\n  sendMessage(message: string) {\r\n    window.postMessage(JSON.stringify({ action: message, moduleId: Config.moduleId() } as CrossWindowMessage));\r\n  }\r\n\r\n  toggleSimulate() {\r\n    this.devSimulateInstall = !this.devSimulateInstall;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'filterByPropertyValue' })\r\nexport class FilterByPropertyValuePipe implements PipeTransform {\r\n  transform<T>(input: T[], propertyName: string, filterValue: string): T[] {\r\n    return input?.filter(i => i[propertyName]?.toLocaleLowerCase?.().includes?.(filterValue?.toLocaleLowerCase?.())) ?? input;\r\n  }\r\n}\r\n\r\n\r\n@Pipe({ name: 'filterByBoolProperty' })\r\nexport class FilterByBoolPropertyPipe implements PipeTransform {\r\n  transform<T>(input: T[], propertyName: string, filterValue: boolean): T[] {\r\n    // console.log('debug 2dm', input);\r\n    return input?.filter(i => i[propertyName] === filterValue) ?? input;\r\n  }\r\n}\r\n","\r\n<div class=\"content\">\r\n\r\n  <!-- debug info section -->\r\n  <div *ngIf=\"showDebug\">\r\n    <h4>Debug 2sxc 14 Quick Dialog</h4>\r\n    <ul>\r\n      <li>Types: {{ types?.length }}, current: {{contentType?.StaticName}}, default: {{defaultContentType?.Label}}</li>\r\n      <li>Apps: {{ (apps$ | async)?.length }}, current: {{app?.AppId }} </li>\r\n      <li>Templates: {{templates?.length}}, current: {{template?.TemplateId}}</li>\r\n      <li>Config: isContent='{{isContent}}' Ready: {{ready}} </li>\r\n      <li>Tab to show: '{{tabIndex}}' / preventTypeSwitch '{{preventTypeSwitch}}' / preventAppSwitch '{{preventAppSwitch}}'</li>\r\n      <li>installerNeeded: {{installerNeeded}}, isInnerContent: {{isInnerContent}}, installerShow: {{installerShow}}, showInstallAndAllApps: {{showInstallAndAllApps}}</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- loading indicator -->\r\n  <mat-progress-bar [ngStyle]=\"{ opacity: ready ? 0 : 1 }\" [mode]=\"'indeterminate'\"></mat-progress-bar>\r\n\r\n  <!-- main dialog, starting with save/cancel button -->\r\n  <div class=\"card\"\r\n    [ngClass]=\"{ blocked: !ready }\"\r\n  >\r\n    <div class=\"top-controls\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-fab *ngIf=\"template\" (click)=\"persistTemplate(template)\" [attr.title]=\"'TemplatePicker.Save' | translate\">\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab class=\"secondary\" *ngIf=\"showCancel\" (click)=\"cancel()\" [attr.title]=\"('TemplatePicker.' + (isContent ? 'Cancel' : 'Close')) | translate\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tabs -->\r\n    <mat-tab-group [selectedIndex]=\"tabIndex\">\r\n      <mat-tab>\r\n        <ng-template mat-tab-label>\r\n          {{(isContent\r\n            ? (contentType?.Name || ('TemplatePicker.ContentTypePickerDefault' | translate))\r\n            : (app?.Name || ('TemplatePicker.AppPickerDefault' | translate)))}}\r\n        </ng-template>\r\n\r\n        <!-- App Selector -->\r\n        <div *ngIf=\"!isContent; else contentApp\" class=\"tiles\" [ngClass]=\"{ 'show-installer': installerShow }\">\r\n\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: app?.AppId === a.AppId, blocked: preventTypeSwitch }\"\r\n            [attr.title]=\"a.Name\"\r\n            (click)=\"selectApp(app, a)\"\r\n            (dblclick)=\"switchTab()\" *ngFor=\"let a of apps$ | async | filterByPropertyValue:'Name':appFilter\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"a.Thumbnail !== null && a.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"a.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"a.Thumbnail === null || a.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon>star</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"version\"><span>v{{a.VersionMain}}</span></div>\r\n\r\n            <div class=\"title\" [ngClass]=\"{ show: a.Thumbnail === null || a.Thumbnail === '' }\">\r\n              <span>{{a.Name}}</span>\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n\r\n        <!-- Content-Type selection (when not a generic app, but the default content-app) -->\r\n        <ng-template #contentApp>\r\n          <div class=\"tiles\" [ngClass]=\"{ 'show-installer': installerShow }\">\r\n            <div mat-button class=\"tile\"\r\n              [ngClass]=\"{ active: contentType ? contentType?.StaticName === c.StaticName : defaultContentType?.StaticName === c.StaticName, blocked: preventTypeSwitch }\"\r\n              [attr.title]=\"(c.Label | translate) + (showDebug ? ' (' + c.StaticName + ')' : '')\"\r\n              (click)=\"selectContentType(contentType, c)\"\r\n              (dblclick)=\"switchTab()\"\r\n              *ngFor=\"let c of types | filterByPropertyValue:'Label':contentTypeFilter | filterByBoolProperty:'IsHidden':false\"\r\n            >\r\n              <div class=\"bg\">\r\n                <img *ngIf=\"c.Thumbnail !== null && c.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"c.Thumbnail + '?w=176&h=176'\">\r\n                <div *ngIf=\"c.Thumbnail === null || c.Thumbnail === ''\" class=\"bg-icon\">\r\n                  <mat-icon>bubble_chart</mat-icon>\r\n                </div>\r\n              </div>\r\n              <div class=\"title\" [ngClass]=\"{ show: c.Thumbnail === null || c.Thumbnail === '' }\">\r\n                <span>{{c.Label}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n\r\n      <!-- template selection after app/content-type selection -->\r\n      <mat-tab [label]=\"('TemplatePicker.ChangeView' | translate) + ' (' + templates.length + ')'\">\r\n        <div *ngIf=\"!(isContent ? contentType : app)\">\r\n          &nbsp; &nbsp; &nbsp; {{ (\"TemplatePicker.ViewNeeds\" + (isContent ? \"ContentType\" : \"App\" )) | translate }}\r\n        </div>\r\n        <div *ngIf=\"isContent ? contentType : app\" class=\"tiles\" [ngClass]=\"{ 'show-installer': installerShow }\">\r\n          <mat-spinner class=\"templates-spinner\" *ngIf=\"templatesLoading$ | async\"></mat-spinner>\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: template?.TemplateId === t.TemplateId }\"\r\n            [attr.title]=\"t.Name + (showDebug ? ' (' + t.TemplateId + ')' : '')\"\r\n            (click)=\"selectTemplate(t)\"\r\n            *ngFor=\"let t of templates | filterByPropertyValue:'Name':templateFilter\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"t.Thumbnail !== null && t.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"t.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"t.Thumbnail === null || t.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon *ngIf=\"isContent\">view_carousel</mat-icon>\r\n                <mat-icon *ngIf=\"!isContent\">view_quilt</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title\" [ngClass]=\"{ show: t.Thumbnail === null || t.Thumbnail === '' }\">\r\n              <span>{{t.Name}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n\r\n      <mat-tab disabled>\r\n        <ng-template mat-tab-label>\r\n          <!-- search -->\r\n          <div class=\"search-field\" *ngIf=\"showSearchBar\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 0 && !isContent\" [(ngModel)]=\"appFilter\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 0 && isContent\" [(ngModel)]=\"contentTypeFilter\">\r\n            <input type=\"text\" *ngIf=\"tabIndex === 1\" [(ngModel)]=\"templateFilter\">\r\n          </div>\r\n\r\n          <!-- install and manage buttons -->\r\n          <button mat-button class=\"config-btn\" *ngIf=\"tabIndex === 0 && showInstallAndAllApps\" (click)=\"run('app-import')\" [attr.title]=\"'TemplatePicker.Install.Details' | translate\">\r\n            <mat-icon>get_app</mat-icon>\r\n            {{\"TemplatePicker.Install\" | translate}}\r\n          </button>\r\n          <button mat-button class=\"config-btn\" *ngIf=\"tabIndex === 0 && showInstallAndAllApps\" (click)=\"run('apps')\" [attr.title]=\"'TemplatePicker.Zone.Details' | translate\">\r\n            <mat-icon>apps</mat-icon>\r\n            {{\"TemplatePicker.Zone\" | translate}}\r\n          </button>\r\n          <button mat-button class=\"config-btn\" *ngIf=\"showAdminApp && (isContent || tabIndex == 1)\" (click)=\"run('app')\" [attr.title]=\"'TemplatePicker.App.Details' | translate\">\r\n            <mat-icon>settings</mat-icon>\r\n            {{\"TemplatePicker.App\" | translate}}\r\n          </button>\r\n        </ng-template>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <span class=\"no-install-allowed\" *ngIf=\"installerNeeded && !installerShow\">\r\n      No {{isContent ? 'Content App' : 'Apps'}} installed yet.\r\n      You should see the installer here but we cannot show it.\r\n      <ng-container *ngIf=\"isInnerContent\">\r\n        <br>\r\n        You cannot use the installer from inner-content.\r\n        Please install Apps first by adding a {{isContent ? 'Content' : 'App'}} Module on a page.\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!isInnerContent\">\r\n        <br>\r\n        You don't have super-user permissions.\r\n        Please try again with a super-user login.\r\n      </ng-container>\r\n    </span>\r\n    <app-installer *ngIf=\"installerShow\" [isContentApp]=\"isContent\"></app-installer>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\r\nimport { App } from 'app/core/app';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Log, log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { IDialogFrameElement, IIFrameBridge, IQuickDialogConfig } from 'app/interfaces/shared';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { combineLatest, merge, Observable, timer, BehaviorSubject } from 'rxjs';\r\nimport { filter, map, skipUntil, startWith, share } from 'rxjs/operators';\r\nimport { BackendSettings } from '../core/backend-settings';\r\nimport { CurrentDataService } from './current-data.service';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { PickerService } from './picker.service';\r\nimport { nameofFactory } from '../core/nameof';\r\n\r\nconst log = parentLog.subLog('picker', DebugConfig.picker.enabled);\r\n\r\nconst nameofTPC = nameofFactory<TemplatePickerComponent>();\r\n\r\nconst debug = false;\r\n\r\n@Component({\r\n  selector: 'app-template-picker',\r\n  templateUrl: './template-picker.component.html',\r\n  styleUrls: ['./template-picker.component.scss'],\r\n})\r\nexport class TemplatePickerComponent implements OnInit {\r\n  // #region properties\r\n  /** Stream of all apps */\r\n  apps$: Observable<App[]>;\r\n\r\n  /** is cancelling possible */\r\n  showCancel = true;\r\n\r\n  /** is in the main content-app or a generic app */\r\n  isContent: boolean;\r\n\r\n  /** Needs the installer */\r\n  installerNeeded = false;\r\n\r\n  /** Show the Installer */\r\n  installerShow = false;\r\n\r\n  /** Stream to indicate ready, for loading-indicator */\r\n  ready$: Observable<boolean>;\r\n  templatesLoading$: Observable<boolean>;\r\n\r\n  /** Tab-id, when we set it, the tab switches */\r\n  tabIndex = 0;\r\n\r\n  /** Indicate if the user is allowed to change content-types or not */\r\n  preventTypeSwitch: boolean;\r\n\r\n  /** Indicates whether the installer can be shown in this dialog or not. True if inner-content. */\r\n  isInnerContent = false;\r\n\r\n  /** Indicates whether the search bar will be shown in this dialog or not */\r\n  showSearchBar = false;\r\n\r\n  /**\r\n   * Indicates whether the install apps and all apps buttons will be shown in this dialog or not\r\n   * only on empty-content or all apps in admin-mode\r\n   */\r\n  showInstallAndAllApps = false;\r\n\r\n  /** Show the admin-this-app button */\r\n  showAdminApp = false;\r\n\r\n  /** The communication-object to the parent */\r\n  private bridge: IIFrameBridge;\r\n\r\n  /** internal loading state */\r\n  private loading$ = BehaviorObservable.create<boolean>(false);\r\n\r\n  /** Ajax-support changes how saving/changing is handled */\r\n  private supportsAjax: boolean;\r\n\r\n  preventAppSwitch = false;\r\n\r\n  public showDebug = DebugConfig.picker.showDebugPanel;\r\n\r\n  appFilter = '';\r\n  contentTypeFilter = '';\r\n  templateFilter = '';\r\n  // #endregion\r\n\r\n  // #region data to show - using local variables, because streams didn't update correctly :(\r\n  app: App;\r\n  templates: Template[];\r\n  template: Template;\r\n  contentType: ContentType;\r\n  types: ContentType[];\r\n  defaultContentType: ContentType;\r\n  ready = false;\r\n  //#endregion\r\n\r\n  constructor(\r\n    private backendSettings: BackendSettings,\r\n    private api: PickerService,\r\n    public state: CurrentDataService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {\r\n    // get configuration from iframe-bridge and set everything\r\n    this.bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = this.bridge.getAdditionalDashboardConfig();\r\n\r\n    this.boot(dashInfo);\r\n    if (debug) this.debugObservables();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.autosyncObservablesToEnsureUiUpdates();\r\n  }\r\n\r\n\r\n  private boot(dashInfo: IQuickDialogConfig) {\r\n    this.showDebug = dashInfo.debug;\r\n    Log.configureRuntimeLogging(dashInfo.debug);\r\n\r\n    // Make sure we have the latest backend settings\r\n    this.backendSettings.setApp(dashInfo.appId);\r\n    // start data-loading\r\n    this.api.initLoading(!dashInfo.isContent);\r\n\r\n    // init parts, variables, observables\r\n    const initDone$ = this.state.init(dashInfo);\r\n    this.initObservables(initDone$);\r\n    this.initValuesFromBridge(dashInfo);\r\n    this.loading$.next(false);\r\n  }\r\n\r\n  private debugObservables() {\r\n    console.log('debugObservables');\r\n    // this.tab$.subscribe(t => log.add(`tab changed to ${t}`));\r\n\r\n    if (!DebugConfig.picker.streams) return;\r\n    this.loading$.subscribe(l => log.add(`quick-dialog loading$:${l}`));\r\n    this.ready$.subscribe(r => log.add(`quick-dialog ready$:${r}`));\r\n  }\r\n\r\n  /**\r\n   * wire up observables for this component\r\n   */\r\n  private observablesAlreadyInitialized = false;\r\n  private initObservables(initDone$: Observable<boolean>): void {\r\n    if (this.observablesAlreadyInitialized) return;\r\n    this.observablesAlreadyInitialized = true;\r\n\r\n    const initTrue$ = initDone$.pipe(filter(t => !!t));\r\n\r\n    // wire up basic observables\r\n    this.ready$ = combineLatest([this.api.ready$, this.loading$]).pipe(\r\n      map(([ready, loading]) => ready && !loading),\r\n      share()\r\n    );\r\n\r\n    // all apps are the same as provided by the api\r\n    this.apps$ = this.api.apps$;\r\n\r\n    // if the content-type or app is set, switch tabs (ignore null/empty states)\r\n    const typeOrAppReady = merge(this.state.type$, this.state.app$).pipe(\r\n      filter(t => !!t),\r\n      share()\r\n    );\r\n    combineLatest([typeOrAppReady, initTrue$]).subscribe(_ => this.switchTab('type/app ready and init-true'));\r\n\r\n    // once the data is known, check if installer is needed\r\n    combineLatest([\r\n      this.api.templates$,\r\n      this.api.contentTypes$,\r\n      this.api.apps$,\r\n      this.api.ready$.pipe(filter(r => !!r)),\r\n      this.backendSettings.showAdvanced$\r\n    ]).pipe(\r\n        map(([templates, _, apps, _2, showAdv]) => {\r\n          log.add('apps/templates loaded, will check if we should show installer');\r\n          // Installer is needed on content without templates, or apps without any apps\r\n          this.installerNeeded = this.isContent\r\n            ? templates.length === 0\r\n            : apps.length === 0;\r\n          this.installerShow = showAdv && this.installerNeeded && !this.isInnerContent;\r\n          this.showSearchBar = !this.installerNeeded;\r\n          this.showInstallAndAllApps = showAdv && (this.installerShow || !this.isContent);\r\n          this.showAdminApp = showAdv && !this.installerNeeded;\r\n\r\n          log.add('Debug Relevant Properties', {\r\n            installerNeeded: this.installerNeeded,\r\n            showAdv: showAdv,\r\n            isInnerContent: this.isInnerContent,\r\n            installerShow: this.installerShow,\r\n          });\r\n\r\n          // if (this.showDebug) console.log('initObservables...combineLatest(...)', this);\r\n        }))\r\n      .subscribe();\r\n\r\n    // template loading is true, when the template-list or selected template are not ready\r\n    this.templatesLoading$ = combineLatest([this.state.templates$, this.state.template$])\r\n      .pipe(\r\n        map(([all, selected]) => !(all && selected)),\r\n        startWith(false)\r\n      );\r\n\r\n    // whenever the template changes, ensure the preview reloads\r\n    // but don't do this when initializing, that's why we listen to initDone$\r\n    this.state.template$.pipe(\r\n      filter(t => !!t),\r\n      skipUntil(initTrue$))\r\n      .subscribe(t => this.previewTemplate(t));\r\n  }\r\n\r\n  /** The UI doesn't update reliably :(, so we copy the data to local variables */\r\n  private autosyncObservablesToEnsureUiUpdates(): any {\r\n    this.state.app$.subscribe(a => this.app = a);\r\n    this.state.templates$.subscribe(t => this.templates = t);\r\n    this.state.template$.subscribe(t => this.template = t);\r\n    this.state.types$.subscribe(t => {\r\n      this.types = t;\r\n      this.defaultContentType = ContentTypesProcessor.firstDefault(t);\r\n    });\r\n    this.state.type$.subscribe(t => this.contentType = t);\r\n\r\n    this.ready$.subscribe(r => this.ready = r);\r\n    merge(\r\n      this.ready$,\r\n      this.state.app$,\r\n      this.state.type$,\r\n      this.state.types$,\r\n      this.state.template$,\r\n      this.state.templates$,\r\n      ).subscribe(() => this.cdRef.detectChanges());\r\n  }\r\n\r\n\r\n  private initValuesFromBridge(config: IQuickDialogConfig): void {\r\n    if (this.showDebug) console.log(`initValuesFromBridge(config)`, config);\r\n    this.preventTypeSwitch = config.hasContent;\r\n    this.isInnerContent = config.isInnerContent;\r\n    this.isContent = config.isContent;\r\n    this.supportsAjax = this.isContent || config.supportsAjax;\r\n    this.preventAppSwitch = config.hasContent;\r\n    this.showCancel = config.templateId != null;\r\n  }\r\n\r\n  //#region basic UI action binding\r\n  cancel(): void { this.bridge.cancel(); }\r\n\r\n  run(action: string): void { this.bridge.run(action); }\r\n\r\n  persistTemplate(template: Template) { this.bridge.setTemplate(template.TemplateId, template.Name, true); }\r\n\r\n  /**\r\n   * app selection from UI\r\n   */\r\n  selectApp(before: App, after: App): void {\r\n    if (before && before.AppId === after.AppId) {\r\n      this.switchTab('select app');\r\n    } else {\r\n      this.updateApp(after);\r\n      this.templateFilter = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * content-type selection from UI\r\n   */\r\n  selectContentType(before: ContentType, after: ContentType): void {\r\n    if (before && before.StaticName === after.StaticName) {\r\n      this.switchTab('select template');\r\n    } else {\r\n      this.setContentType(after);\r\n      this.templateFilter = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * activate a template from the UI\r\n   */\r\n  selectTemplate(template: Template): void {\r\n    this.state.activateTemplate(template);\r\n  }\r\n  //#endregion\r\n\r\n  private setContentType(contentType: ContentType): void {\r\n    log.add(`select content-type '${contentType.Name}'; prevent: ${this.preventTypeSwitch}`);\r\n    if (this.preventTypeSwitch) return;\r\n    this.state.activateType(contentType);\r\n  }\r\n\r\n  switchTab(message: string) {\r\n    const msg = `switchTab(${message})`;\r\n    log.add(msg);\r\n    this.tabIndex = 1;\r\n    this.cdRef.detectChanges();\r\n    // repeat after delay because of a bug in the tabs-updating (unclear why...)\r\n    // timer(100).toPromise().then(_ => {\r\n    //   return this.tabIndex = 1;\r\n    // });\r\n  }\r\n\r\n\r\n  private updateApp(newApp: App): void {\r\n    // ajax-support can change as apps are changed; for ajax, maybe both the previous and new must support it\r\n    // or just new? still WIP\r\n    const ajax = newApp.SupportsAjaxReload;\r\n    log.add(`changing app to ${newApp.AppId}; prevent-switch: ${this.preventAppSwitch} use-ajax:${ajax}`);\r\n    if (this.preventAppSwitch) return;\r\n\r\n\r\n    this.loading$.next(true);\r\n    this.bridge.showMessage('loading App...');\r\n    const savePromise = this.api.saveAppId(newApp.AppId.toString(), ajax);\r\n\r\n    if (ajax) {\r\n      savePromise.then(() => {\r\n        log.add('saved app, will reset some stuff');\r\n        // do this after save completed, to ensure that the module is ready on the server\r\n        log.add('calling reloadAndReInit()');\r\n        this.bridge.reloadAndReInit()\r\n          .then(newConfig => this.boot(newConfig));\r\n      });\r\n    } else {\r\n      savePromise.then(() => window.parent.location.reload());\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  private previewTemplate(t: Template): void {\r\n    log.add(`previewTemplate(${t.TemplateId}), ajax is ${this.supportsAjax}`);\r\n    this.loading$.next(true);\r\n    this.bridge\r\n      .setTemplate(t.TemplateId, t.Name, false)\r\n      .then(_ => this.loading$.next(false));\r\n  }\r\n\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { Component, ElementRef } from '@angular/core';\r\nimport { SxcAppComponent, Context } from '@2sic.com/sxc-angular';\r\nimport { Config } from './config';\r\nimport { SupportedLanguages, langCode2, PrimaryUiLanguage } from './i18n';\r\nimport { BackendSettings } from './core/backend-settings';\r\nimport { AppIconsService } from './core/app-icon-registry';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css'],\r\n  providers: [AppIconsService]\r\n})\r\nexport class AppComponent extends SxcAppComponent {\r\n  constructor(\r\n    public translate: TranslateService,\r\n    el: ElementRef,\r\n    context: Context,\r\n    backendSettings: BackendSettings,\r\n    iconService: AppIconsService,\r\n  ) {\r\n    super(el, context.preConfigure({ sxc: Config.getSxcInstance() }), false);\r\n    translate.addLangs(SupportedLanguages);\r\n\r\n    backendSettings.setApp(Config.appId());\r\n\r\n    backendSettings.data\r\n      .subscribe(ctxDto => {\r\n        const lang = ctxDto.Language;\r\n        translate.setDefaultLang(PrimaryUiLanguage);\r\n        translate.use(langCode2(lang.Current));\r\n      });\r\n\r\n    iconService.load();\r\n  }\r\n}\r\n","\r\nexport * from './constants';\r\n\r\n\r\nexport function langCode2(langCode5: string) {\r\n  return langCode5.split('-')[0];\r\n}\r\n","<app-template-picker></app-template-picker>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { AppInstallSettingsService } from 'app/installer/getting-started.service';\r\nimport { PickerService } from 'app/template-picker/picker.service';\r\nimport { CurrentDataService } from 'app/template-picker/current-data.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    AppInstallSettingsService,\r\n    PickerService,\r\n    CurrentDataService,\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InstallerComponent } from './installer.component';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    InstallerComponent\r\n  ],\r\n  declarations: [\r\n    InstallerComponent\r\n  ],\r\n  providers: [\r\n    InstallerService\r\n  ]\r\n})\r\nexport class InstallerModule { }","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatButtonModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES,\r\n})\r\n\r\nexport class MaterialModule { }\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TemplatePickerComponent } from './template-picker.component';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { CoreModule } from 'app/core/core.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { InstallerModule } from 'app/installer/installer.module';\r\nimport { DebugPipe } from './debug.pipe';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { MaterialModule } from 'app/material-module';\r\nimport { FilterByPropertyValuePipe, FilterByBoolPropertyPipe } from './filter-by-property-value.pipe';\r\n\r\n@NgModule({\r\n  exports: [\r\n    TemplatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n    MaterialModule,\r\n    MatProgressBarModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    InstallerModule,\r\n    TranslateModule,\r\n  ],\r\n  providers: [\r\n    TemplateFilterPipe,\r\n    ContentTypesProcessor\r\n  ],\r\n  declarations: [\r\n    TemplatePickerComponent,\r\n    TemplateFilterPipe,\r\n    DebugPipe,\r\n    FilterByPropertyValuePipe,\r\n    FilterByBoolPropertyPipe,\r\n  ]\r\n})\r\nexport class TemplatePickerModule { }\r\n","import { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SxcHttpInterceptorProvider } from '@2sic.com/sxc-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplatePickerModule } from 'app/template-picker/template-picker.module';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MaterialModule } from './material-module';\r\nimport { log } from './core/log';\r\nimport { pathToI18n, i18nExtension } from './i18n';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  const loader = new TranslateHttpLoader(http, pathToI18n, i18nExtension);\r\n  log.add('created translate-loader', loader);\r\n  return loader;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  exports: [ ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TemplatePickerModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    MaterialModule, // must be after BrowserModule\r\n  ],\r\n  providers: [SxcHttpInterceptorProvider],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","export const environment = {\r\n  production: true\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { log as parentLog } from './log';\r\n\r\nconst log = parentLog.subLog('boot-controller');\r\n/**\r\n * Special reboot controller, to restart the angular app\r\n * when critical parameters were changed\r\n */\r\nexport class BootController {\r\n  private static instance: BootController;\r\n  private _reboot: Subject<boolean> = new Subject();\r\n  rebootRequest$ = this._reboot.asObservable();\r\n\r\n  static getRebootController() {\r\n    log.add('getRebootController()');\r\n    if (!BootController.instance) {\r\n      BootController.instance = new BootController();\r\n    }\r\n    return BootController.instance;\r\n  }\r\n\r\n  public reboot() {\r\n    log.add('restarting...');\r\n    this._reboot.next(true);\r\n  }\r\n}\r\n","\r\nimport { startWith } from 'rxjs/operators';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { BootController } from './app/core/boot-control';\r\nimport { log } from 'app/core/log';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nlog.add('loading main.ts');\r\n\r\ndeclare const window;\r\nconst platform = platformBrowserDynamic();\r\n\r\nfunction init() {\r\n  log.add('init()');\r\n\r\n  try {\r\n    // kill listeners\r\n    if (!platform.destroyed)\r\n      platform.destroy();\r\n  } catch (e) {\r\n    console.log('platform destroy error', e);\r\n  }\r\n\r\n  // must re-create the object here, otherwise AOT compiler optimizations\r\n  // break these lines of code\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n    .then(() => window.appBootstrap && window.appBootstrap())\r\n    .catch(err => console.error('NG Bootstrap Error =>', err));\r\n}\r\n\r\n\r\n// provide hook for outside reboot calls\r\nconst bootController = window.bootController = BootController.getRebootController();\r\n\r\n// Init on reboot request.\r\nbootController.rebootRequest$.pipe(\r\n  startWith(true)) // Init on first load.\r\n  .subscribe(() => init());\r\n"],"x_google_ignoreList":[]}