{"version":3,"file":"default-projects_eav-ui_src_app_edit_form_form-config_service_ts-projects_eav-ui_src_app_edit-b26668.cb9cc54fe9233637.js","mappings":"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","names":["FieldState","constructor","name","config","group","settings","basics","ui","uiValue","translationState","isOpen","pickerData","featuresSvc","injectorForEffects","this","#reqFeaturesMy","signalObj","#reqFeaturesFromSettings","setting","requiredFeatures","computedObj","merged","Array","from","Set","#pickerData","effect","reqFeaturesFromSettings","length","feature","requireFeature","injector","Error","settingExt","current","includes","set","i0","PagePickerComponent_Conditional_12_For_2_ng_container_0_Template","pageAndChildren_r3","_c0","page_r2","PagePickerComponent_Conditional_12_For_2_Template","ctx_r3","tree","page_r6","path","_r5","$implicit","select","PagePickerComponent_Conditional_13_For_3_Conditional_6_Template","PagePickerComponent_Conditional_13_For_3_Conditional_10_Template","PagePickerComponent_Conditional_13_For_3_Conditional_11_Template","id","selected","isNavigation","isClickable","PagePickerComponent_Conditional_13_Conditional_1_Template","PagePickerComponent_Conditional_13_For_3_Template","filteredSearch","_r8","page_r9","page","toggle","toggled","PagePickerComponent_ng_template_14_Conditional_12_For_2_ng_container_0_Template","child_r10","PagePickerComponent_ng_template_14_Conditional_12_For_2_Template","children","PagePickerComponent_ng_template_14_Conditional_2_Template","PagePickerComponent_ng_template_14_Conditional_3_Template","_r7","PagePickerComponent_ng_template_14_Conditional_10_Template","PagePickerComponent_ng_template_14_Conditional_11_Template","PagePickerComponent_ng_template_14_Conditional_12_Template","isVisible","PagePickerComponent","dialogData","dialog","translate","filterText","signal","searchItems","computed","filter","item","toLocaleLowerCase","queryService","transient","QueryService","ngOnInit","parseSelectedPageId","fetchPages","setFilter","window","confirm","instant","closeDialog","pageId","ArrayHelpers","toggleInArray","close","find","i","result","toString","stream","getFromQuery","subscribe","next","data","console","error","pages","buildPageSearch","map","Path","trim","replace","startsWith","substring","split","slice","join","Id","Name","IsNavigation","IsClickable","buildPageTree","items","parentId","ParentId","push","parent","prefix","fieldValue","controls","fieldName","value","parseInt","MAT_DIALOG_DATA","i1","i2","selectors","decls","vars","consts","template","rf","ctx","$event","_r1","PagePickerComponent_Conditional_12_Template","PagePickerComponent_Conditional_13_Template","PagePickerComponent_ng_template_14_Template","MatFormFieldModule","i3","MatInputModule","i4","FormsModule","i5","NgTemplateOutlet","NgClass","MatIconModule","i6","MatDialogActions","TranslateModule","TippyDirective","styles","PagePicker","open","matDialog","viewContainerRef","changeDetectorRef","callback","autoFocus","height","width","afterClosed","pipe","take","markForCheck","FormConfigService","log","classLog","configSignal","context","inject","Context","languageService","FormLanguageService","initFormConfig","dialogContext","formId","isParentDialog","itemGuids","createMode","isCopy","enableHistory","languages","initial","Language","Current","primary","Primary","list","List","zoneId","appId","appRoot","App","Url","appSharedRoot","SharedUrl","moduleId","partOfPage","sessionStorage","getItem","keyPartOfPage","partOfPageDefault","portalRoot","Site","tabId","systemRoot","location","pathname","versioningOptions","getVersioningOptions","keyPublishing","enableFormulaSave","Enable","FormulaSave","removeEditRestrictions","OverrideEditRestrictions","language","getSignal","publishing","allowAll","show","hide","branch","publish","language$","_language$","getLanguage$","factory","ɵfac","logSpecs","getReader","getLanguage","getReaderSignal","SignalStoreObservableBase","super","getId","sanitizeAdd","FormLanguage","empty","#entityReaderCache","ComputedCacheHelper","#signalsHideHeaderCache","addForm","hideHeader","add","setCurrent","newLanguage","update","getEntityReader","l","fnIf","sig","getOrCreateWithInfo","EntityReader","rSilent","isNew","cache$","languageInstances","mapUntilChanged","m","shareReplay","getHideHeaderSignal","getOrCreate","cache","updateHideHeader","providedIn","bothPrimary","original","diffCurrent","DimensionReader","dimensions","hasCurrentWrite","d","Value","hasCurrentReadOnly","currentRO","undefined","hasCurrent","all","FieldReader","field","#noData","#field","#language","#values","Values","ofLanguage","currentOrDefault","currentOrDefaultOrAny","val","Dimensions","hasPrimary","hasCurrentReadonly","hasEditableValues","#valuesEditableOf","countEditable","countEditableWithContents","v","currentEditable","dimension","x","isEditableOrReadonlyTranslationExist","getBestValue","attributeValues","defaultValue","flatten","metadata","metadataItems","isArray","Type","values","Object","entries","Attributes","currentValues","itemAttributes","reduce","acc","initSignal","watchAllFields","FieldsFindNoPrefix","FieldUnwrap","FieldMask","ServiceBase","#fieldState","#formConfig","#controls","#fieldConfig","#requirePrefix","#maskSignal","#mask","#fieldsUsedInMask","#extractFieldNames","a","initPreClean","overloadPreCleanValues","preClean","init","mask","requirePrefix","extendName","#updateMaskFinal","r","logChanges","enabled","#watchAllFields","#onChange","#process","hasPlaceholders","lowercaseInsideSquareBrackets","_","toLowerCase","entityGuid","entityId","dataPlaceholders","forEach","e","replaceValue","cleaned","matches","match","token","key","maybeNew","end","f","c","subscriptions","valueChanges","ContentTypeSettingsHelpers","getDefaultSettings","reader","contentType","itemHeader","defaultSettings","Metadata","Description","EditInstructions","Features","Label","ListInstructions","Notes","Icon","Link","_itemTitle","getTitle","_slotCanBeEmpty","IsEmptyAllowed","_slotIsEmpty","IsEmpty","type","label","FileTypeHelpers","defaultIcon","customExtensions","doc","docx","xls","xlsx","ppt","pptx","pdf","mp3","avi","mpg","mpeg","mov","mp4","zip","rar","txt","html","css","xml","xsl","matExtensions","vcf","getExtension","filename","lastIndexOf","getIconClass","ext","isKnownType","isImage","isImgRegex","test","FieldDefaults","inputType","getDefaultOrPrefillValue","onlyPrefill","fn","prefillRaw","Prefill","rNull","DefaultValue","InputTypeCatalog","BooleanDefault","BooleanTristate","DateTimeDefault","Date","toJSON","NumberDefault","NumberDropdown","NumberPicker","isNaN","Number","EntityDefault","EntityQuery","EntityContentBlocks","EntityPicker","guids","guid","JSON","stringify","parse","SanitizeHelper","removeFromStart","sanitized","charToRemove","removeFromEnd","cleanBadPath","goodChar","sanitizePath","sanitizeName","SignalStoreBase","#cache","#list","#itemSignalsCache","addMany","before","get","newItem","remove","updatedStore","clearCache","getAll","getMany","ids","getManySignal","getAllSignal","#cache$","toObservable","#list$","list$","getList$","getMany$","obj","CustomDefault","CustomGps","CustomJsonEditor","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","StringWysiwyg","StringPicker","Unknown","array","index","indexOf","splice","distinctUntilChanged","mapUntilObjChanged","isEqual"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/fields/field-state.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.html","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.component.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helpers.ts","./projects/eav-ui/src/app/edit/fields/page-picker/page-picker.helper.ts","./projects/eav-ui/src/app/edit/form/form-config.service.ts","./projects/eav-ui/src/app/edit/form/form-language.service.ts","./projects/eav-ui/src/app/edit/form/form-languages.model.ts","./projects/eav-ui/src/app/edit/localization/dimension-reader.ts","./projects/eav-ui/src/app/edit/localization/field-reader.ts","./projects/eav-ui/src/app/edit/shared/helpers/entity-reader.ts","./projects/eav-ui/src/app/edit/shared/helpers/field-mask.helper.ts","./projects/eav-ui/src/app/edit/state/fields-settings.helpers.ts","./projects/eav-ui/src/app/edit/shared/adam/file-type.helpers.ts","./projects/eav-ui/src/app/edit/shared/input-types/input-field.helpers.ts","./projects/eav-ui/src/app/edit/shared/helpers/sanitize.helper.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-base.ts","./projects/eav-ui/src/app/edit/shared/store/signal-store-observable-base.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/array.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts"],"sourcesContent":["import { effect, Injector, Signal } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { BasicControlSettings } from '../../../../../edit-types/src/BasicControlSettings';\r\nimport { FieldSettings } from '../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../edit-types/src/FieldValue';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { TranslationState } from '../localization/translate-state.model';\r\nimport { UiControl } from '../shared/controls/ui-control';\r\nimport { FieldConfigSet } from './field-config-set.model';\r\nimport { PickerData } from './picker/picker-data';\r\n\r\n/**\r\n * This is provided / injected at the fields-builder for every single field.\r\n * So any control or service within that field, which requests this service, will get one containing exactly that fields.\r\n */\r\nexport class FieldState<TValue extends FieldValue = FieldValue, TSettings extends FieldSettings = FieldSettings> {\r\n  constructor(\r\n    /** The fields technical name to access settings etc. */\r\n    public name: string,\r\n\r\n    /** Field configuration, incl. a lot of unchanging values and access to adam, dropzone etc. */\r\n    public config: FieldConfigSet,\r\n\r\n    /** The form group containing the field - rarely relevant, as you should use the control in most cases */\r\n    public group: UntypedFormGroup,\r\n\r\n    // TODO: @2pp try to find out where this is used just to create a signal for a property\r\n    /** The settings as a signal - use this for most cases */\r\n    public settings: Signal<TSettings>,\r\n\r\n    /** The basic settings - use this for most cases as it will change less than the settings signal */\r\n    public basics: Signal<BasicControlSettings>,\r\n\r\n    /**\r\n     * The UI control (actually it's the virtual UI control), since it's a reactive form control.\r\n     * Note: e just introduced uiValue below, which should be used in most cases\r\n     */\r\n    public ui: Signal<UiControl>,\r\n\r\n    /** The value of the field in the UI control as a signal */\r\n    public uiValue: Signal<TValue>,\r\n\r\n    public translationState: Signal<TranslationState>,\r\n\r\n    /** Signal if a dialog (popup) of this field is open, like a hyperlink-dialog */\r\n    public isOpen: Signal<boolean>,\r\n\r\n    pickerData: PickerData,\r\n\r\n    featuresSvc: FeaturesService,\r\n\r\n    injectorForEffects: Injector,\r\n  ) {\r\n    this.#pickerData = pickerData;\r\n\r\n    // Required Features Transfer\r\n    effect(() => {\r\n      const reqFeaturesFromSettings = this.requiredFeatures();\r\n      if (reqFeaturesFromSettings.length == 0)\r\n        return;\r\n      for (const feature of reqFeaturesFromSettings)\r\n        featuresSvc.requireFeature(feature, `Used in field ${this.name}`);\r\n    }, { injector: injectorForEffects });\r\n\r\n  }\r\n\r\n  /**\r\n   * Picker Data - will throw an error if accessed on a field which doesn't have PickerData\r\n   * @readonly\r\n   * @type {PickerData}\r\n   */\r\n  get pickerData(): PickerData {\r\n    if (this.#pickerData)\r\n      return this.#pickerData;\r\n    throw new Error(`PickerData was not initialized for the field: ${this.name}`);\r\n  }\r\n  #pickerData: PickerData;\r\n\r\n  /**\r\n   * Cool helper to just get a single value-signal from the settings.\r\n   * It will automatically\r\n   * - ensure that you only use valid keys\r\n   * - return a signal with that name\r\n   * - the signal will be correctly typed as the setting value is typed\r\n   * @param name property name of a FieldSettings\r\n   * @returns the signal for that property, with isEqual change detection and name\r\n   */\r\n  setting<K extends keyof FieldSettings>(name: K): Signal<FieldSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  settingExt<K extends keyof TSettings>(name: K): Signal<TSettings[K]> {\r\n    return computedObj(name as string, () => this.settings()[name]);\r\n  }\r\n\r\n  // settingExt<TSet extends FieldSettings, K extends keyof TSet>(name: K): Signal<TSet[K]> {\r\n  //   return computedObj(name as string, () => (this.settings() as unknown as TSet)[name]);\r\n  // }\r\n\r\n  //#region Required Features\r\n\r\n  #reqFeaturesMy = signalObj<Of<typeof FeatureNames>[]>('requiredFeatures', []);\r\n  #reqFeaturesFromSettings = this.setting('requiredFeatures');\r\n\r\n  requiredFeatures = computedObj('requiredFeatures', () => {\r\n    const merged = [\r\n      ...this.#reqFeaturesMy(),\r\n      ...this.#reqFeaturesFromSettings() ?? [],\r\n    ];\r\n    // make distinct\r\n    return Array.from(new Set(merged));\r\n  });\r\n\r\n  requireFeature(feature: Of<typeof FeatureNames>) {\r\n    const current = this.#reqFeaturesMy();\r\n    if (!current.includes(feature))\r\n      this.#reqFeaturesMy.set([...current, feature]);\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ 'Fields.Hyperlink.PagePicker.Title' | translate }}</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <div class=\"page-search-box\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n        <mat-label>Search</mat-label>\r\n        <input matInput [ngModel]=\"filterText()\" (ngModelChange)=\"setFilter($event)\">\r\n      </mat-form-field>\r\n    </div>\r\n    <div class=\"page-tree-box\">\r\n      @if (!filterText()) {\r\n      <ul>\r\n        @for (page of tree(); track page) {\r\n        <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: page}\"></ng-container>\r\n        }\r\n      </ul>\r\n      }\r\n      @if (filterText()) {\r\n      <ul>\r\n        @if (filteredSearch().length === 0) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div>No results</div>\r\n          </div>\r\n        </li>\r\n        }\r\n        @for (page of filteredSearch(); track page) {\r\n        <li>\r\n          <div class=\"page-row\">\r\n            <div class=\"no-toggle\"></div>\r\n            <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n              <div class=\"page-icon-and-text\">\r\n                <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n                @if (page.path) {\r\n                <span class=\"page-path\" [tippy]=\"page.path\">{{ page.path }}&nbsp;>&nbsp;</span>\r\n                }\r\n                <span class=\"page-name\" [tippy]=\"page.name\">{{ page.name }}</span>\r\n              </div>\r\n              <div class=\"page-icons\">\r\n                @if (!page.isNavigation) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n                }\r\n                @if (!page.isClickable) {\r\n                <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n                }\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </li>\r\n        }\r\n      </ul>\r\n      }\r\n    </div>\r\n    <ng-template #pageAndChildren let-page=\"page\">\r\n      <li>\r\n        <div class=\"page-row\">\r\n          @if (page.children.length === 0) {\r\n          <div class=\"no-toggle\"></div>\r\n          }\r\n          @if (page.children.length > 0) {\r\n          <mat-icon class=\"page-toggle\" (click)=\"toggle(page.id)\">\r\n            {{ toggled.includes(page.id) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          }\r\n          <div class=\"page-label\" [ngClass]=\"page.id === selected ? 'selected' : ''\" (click)=\"select(page)\">\r\n            <div class=\"page-icon-and-text\">\r\n              <mat-icon class=\"page-icon\" svgIcon=\"file\"></mat-icon>\r\n              <span>{{ page.name }}</span>\r\n            </div>\r\n            <div class=\"page-icons\">\r\n              @if (!page.isVisible) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">visibility_off</mat-icon>\r\n              }\r\n              @if (!page.isClickable) {\r\n              <mat-icon class=\"page-visible-clickable-icon\">cancel</mat-icon>\r\n              }\r\n            </div>\r\n          </div>\r\n        </div>\r\n        @if (page.children.length > 0 && toggled.includes(page.id)) {\r\n        <ul>\r\n          @for (child of page.children; track child) {\r\n          <ng-container *ngTemplateOutlet=\"pageAndChildren; context: {page: child}\"></ng-container>\r\n          }\r\n        </ul>\r\n        }\r\n      </li>\r\n    </ng-template>\r\n  </div>\r\n  <mat-dialog-actions>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, computed, Inject, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { ArrayHelpers } from '../../../shared/helpers/array.helpers';\r\nimport { QueryService } from '../../../shared/services/query.service';\r\nimport { buildPageSearch, buildPageTree } from './page-picker.helpers';\r\nimport { PageEntity, PagePickerDialogData, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\n@Component({\r\n    selector: 'app-page-picker',\r\n    templateUrl: './page-picker.component.html',\r\n    styleUrls: ['./page-picker.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n        FormsModule,\r\n        NgTemplateOutlet,\r\n        NgClass,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        TranslateModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class PagePickerComponent implements OnInit {\r\n  selected: number;\r\n  toggled: number[];\r\n\r\n  filterText = signal<string>('');\r\n  searchItems = signal<PageSearchItem[]>([]);\r\n  tree = signal<PageTreeItem[]>([]);\r\n\r\n  filteredSearch = computed(() => {\r\n    const filterText = this.filterText();\r\n    const searchItems = this.searchItems();\r\n    return searchItems.filter(item => item.name.toLocaleLowerCase().includes(filterText.toLocaleLowerCase()));\r\n  });\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: PagePickerDialogData,\r\n    private dialog: MatDialogRef<PagePickerComponent>,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.selected = this.parseSelectedPageId();\r\n    this.toggled = [];\r\n\r\n    this.fetchPages();\r\n  }\r\n\r\n  setFilter(filterText: string): void {\r\n    this.filterText.set(filterText);\r\n  }\r\n\r\n  select(page: PageTreeItem | PageSearchItem): void {\r\n    // filters out pages without parent (broken)\r\n    if (page.id == null) return;\r\n    if (!page.isClickable || !page.isNavigation) {\r\n      const ok = window.confirm(this.translate.instant('Fields.Hyperlink.PagePicker.HiddenOrSystemPageWarning'));\r\n      if (!ok) return;\r\n    }\r\n    this.closeDialog(page.id);\r\n  }\r\n\r\n  toggle(pageId: number): void {\r\n    ArrayHelpers.toggleInArray(pageId, this.toggled);\r\n  }\r\n\r\n  private closeDialog(pageId?: number): void {\r\n    if (pageId == null) {\r\n      this.dialog.close();\r\n      return;\r\n    }\r\n\r\n    const page = this.searchItems().find(i => i.id === pageId);\r\n    const result: PagePickerResult = {\r\n      id: page.id.toString(),\r\n      name: page.name,\r\n    };\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  private fetchPages(): void {\r\n    const stream = 'Default';\r\n    const params = 'includehidden=true';\r\n    this.queryService.getFromQuery(`System.Pages/Default`, params, null).subscribe({\r\n      next: (data) => {\r\n        if (!data) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryErrorNoData'));\r\n          return;\r\n        }\r\n        if (!data[stream]) {\r\n          console.error(this.translate.instant('Fields.Picker.QueryStreamNotFound') + ' ' + stream);\r\n          return;\r\n        }\r\n        const pages = data[stream] as PageEntity[];\r\n        const searchItems = buildPageSearch(pages);\r\n        this.searchItems.set(searchItems);\r\n        const tree = buildPageTree(pages);\r\n        this.tree.set(tree);\r\n      },\r\n      error: (error) => {\r\n        console.error(error);\r\n        console.error(`${this.translate.instant('Fields.Picker.QueryError')} - ${error.data}`);\r\n      }\r\n    });\r\n  }\r\n\r\n  private parseSelectedPageId(): number {\r\n    const prefix = 'page:';\r\n    let fieldValue: FieldValue = this.dialogData.group.controls[this.dialogData.config.fieldName].value;\r\n    if (typeof fieldValue !== 'string') return;\r\n\r\n    fieldValue = fieldValue.trim().toLocaleLowerCase();\r\n    if (!fieldValue.startsWith(prefix)) return;\r\n\r\n    try {\r\n      const id = parseInt(fieldValue.split(prefix)[1], 10);\r\n      return id;\r\n    } catch {\r\n      return;\r\n    }\r\n  }\r\n}\r\n","import { PageEntity, PageSearchItem, PageTreeItem } from './page-picker.models';\r\n\r\nexport function buildPageSearch(pages: PageEntity[]): PageSearchItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    let path = page.Path.trim().replace(/\\\\/g, '/').replace(/\\/\\//g, '/');\r\n    if (path.startsWith('/')) {\r\n      path = path.substring(1);\r\n    }\r\n    path = path.split('/').slice(0, -1).join(' > ');\r\n\r\n    const item: PageSearchItem = {\r\n      id: page.Id,\r\n      name: page.Name,\r\n      path,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  return items;\r\n}\r\n\r\nexport function buildPageTree(pages: PageEntity[]): PageTreeItem[] {\r\n  if (!pages) { return []; }\r\n\r\n  const items = pages.map(page => {\r\n    const item: PageTreeItem = {\r\n      children: [],\r\n      id: page.Id,\r\n      name: page.Name,\r\n      parentId: page.ParentId,\r\n      isNavigation: page.IsNavigation,\r\n      isClickable: page.IsClickable,\r\n    };\r\n    return item;\r\n  });\r\n\r\n  const tree: PageTreeItem[] = [];\r\n  for (const item of items) {\r\n    if (item.parentId === -1) {\r\n      tree.push(item);\r\n      continue;\r\n    }\r\n\r\n    const parent = items.find(i => i.id === item.parentId);\r\n    if (!parent) {\r\n      tree.push(item);\r\n    } else {\r\n      parent.children.push(item);\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { UntypedFormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { take } from 'rxjs';\r\nimport { PagePickerResult } from '../../../../../../edit-types/src/PagePickerResult';\r\nimport { FieldConfigSet } from '../field-config-set.model';\r\nimport { PagePickerComponent } from './page-picker.component';\r\nimport { PagePickerDialogData } from './page-picker.models';\r\n\r\nexport class PagePicker {\r\n  static open(\r\n    config: FieldConfigSet,\r\n    group: UntypedFormGroup,\r\n    matDialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    callback: (value: PagePickerResult) => void,\r\n  ): void {\r\n    const dialogData: PagePickerDialogData = {\r\n      config,\r\n      group,\r\n    };\r\n    const dialogRef = matDialog.open(PagePickerComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef,\r\n      height: '80%',\r\n      width: '650px',\r\n    });\r\n\r\n    dialogRef.afterClosed().pipe(take(1)).subscribe((value: PagePickerResult) => {\r\n      callback(value);\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { Injectable, Signal, inject, signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogContext } from '../../app-administration/models';\r\nimport { keyPartOfPage, keyPublishing, partOfPageDefault } from '../../shared/constants/session.constants';\r\nimport { classLog } from '../../shared/logging';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EditSettings } from '../dialog/main/edit-dialog-main.models';\r\nimport { FormConfiguration, VersioningOptions } from './form-configuration.model';\r\nimport { FormLanguageService } from './form-language.service';\r\nimport { FormLanguageComplete, FormLanguagesConfig } from './form-languages.model';\r\n\r\n/**\r\n * Service which tell us about a single edit-form configuration.\r\n * It contains multiple entities.\r\n *\r\n * Things such as language, IDs shown on it, edit-settings etc.\r\n */\r\n@Injectable()\r\nexport class FormConfigService {\r\n  \r\n  log = classLog({FormConfigService});\r\n  \r\n  /** no constructor */\r\n  constructor() { }\r\n\r\n  /**\r\n   * Important! These are constants that form was loaded with.\r\n   * They are initialized in the main edit-form.\r\n   * They do not change while form is running\r\n   */\r\n  config: FormConfiguration;\r\n\r\n  // WIP, null at first\r\n  configSignal = signal<FormConfiguration>(null);\r\n\r\n  /**\r\n   * Current form language information\r\n   */\r\n  language: Signal<FormLanguageComplete>;\r\n\r\n  /**\r\n   * Current edit settings\r\n   * Note: Clean use - only used by classes that inject this themselves\r\n   */\r\n  settings: EditSettings;\r\n\r\n  /**\r\n   * Form language configuration, not meant to change during runtime...\r\n   */\r\n  languages: FormLanguagesConfig;\r\n\r\n  /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n  private context = inject(Context);\r\n  private languageService = inject(FormLanguageService);\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  initFormConfig(\r\n    dialogContext: DialogContext,\r\n    formId: number,\r\n    isParentDialog: boolean,\r\n    itemGuids: string[],\r\n    createMode: boolean,\r\n    isCopy: boolean,\r\n    enableHistory: boolean,\r\n    settings: EditSettings\r\n  ) {\r\n    this.settings = settings;\r\n    this.languages = {\r\n      initial: dialogContext.Language.Current,\r\n      primary: dialogContext.Language.Primary,\r\n      list: dialogContext.Language.List,\r\n    };\r\n    this.config = {\r\n      zoneId: this.context.zoneId,\r\n      appId: this.context.appId,\r\n      appRoot: dialogContext.App.Url,\r\n      appSharedRoot: dialogContext.App.SharedUrl,\r\n      moduleId: this.context.moduleId?.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage) ?? partOfPageDefault,\r\n      portalRoot: dialogContext.Site.Url,\r\n      tabId: this.context.tabId?.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing)\r\n      ),\r\n      formId,\r\n      isParentDialog,\r\n      itemGuids,\r\n      createMode,\r\n      isCopy,\r\n      enableHistory,\r\n      enableFormulaSave: dialogContext.Enable.FormulaSave ?? false,\r\n      removeEditRestrictions: dialogContext.Enable.OverrideEditRestrictions ?? false,\r\n      dialogContext,\r\n      settings,\r\n    };\r\n    this.configSignal.set(this.config);\r\n    this.language = this.languageService.getSignal(this.config.formId);\r\n  }\r\n\r\n  private getVersioningOptions(\r\n    partOfPage: boolean,\r\n    publishing: string\r\n  ): VersioningOptions {\r\n\r\n    const allowAll: VersioningOptions = { show: true, hide: true, branch: true };\r\n\r\n    if (!partOfPage)\r\n      return allowAll;\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return allowAll;\r\n      case 'DraftRequired':\r\n        // Note: the key 'show' should not be added, as the code later picks the first property to set the default\r\n        // Branch should also be first, as it's the preferred option\r\n        return { branch: true, hide: true };\r\n      case 'DraftForbidden':\r\n        return { show: true };\r\n      default: {\r\n        console.error(`Invalid versioning requirements: ${publish}`);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the language observable for the form - it will keep track of the current language as it changes.\r\n   * TODO: try to use the signal as much as possible\r\n    // TODO:: @2dg Question Languages as Signal\r\n   */\r\n  get language$(): Observable<FormLanguageComplete> {\r\n    return this._language$ ??= this.languageService.getLanguage$(this.config.formId);\r\n  }\r\n  private _language$: Observable<FormLanguageComplete>;\r\n\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { map, Observable, shareReplay } from 'rxjs';\r\nimport { classLog } from '../../shared/logging';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { ComputedCacheHelper } from '../../shared/signals/computed-cache';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { SignalStoreObservableBase } from '../shared/store/signal-store-observable-base';\r\nimport { FormLanguage, FormLanguageComplete } from './form-languages.model';\r\n\r\nconst logSpecs = {\r\n  getReader: false,\r\n  getLanguage: false,\r\n  getReaderSignal: false,\r\n};\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class FormLanguageService extends SignalStoreObservableBase<number, FormLanguageInStore> {\r\n\r\n  constructor() {\r\n    super(classLog({FormLanguageService}, logSpecs));\r\n  }\r\n\r\n  protected override getId = (item: FormLanguageInStore) => item.formId;\r\n\r\n  protected override sanitizeAdd = (item: FormLanguageInStore) => ({\r\n    ...FormLanguage.empty,\r\n    initial: item.current,\r\n    ...item\r\n  });\r\n\r\n  addForm(formId: number, primary: string, current: string, hideHeader: boolean): void {\r\n    this.add({\r\n      formId,\r\n      current,\r\n      initial: current,\r\n      primary,\r\n      hideHeader,\r\n    } satisfies FormLanguageInStore);\r\n  }\r\n\r\n  setCurrent(formId: number, newLanguage: string): void {\r\n    this.update(formId, { current: newLanguage } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n\r\n  /**\r\n   * Get an EntityReader for the current form.\r\n   * ATM used in fields settings service.\r\n   * \r\n   * If the form doesn't exist, the reader returned will not have the correct languages specified.\r\n   * This is to avoid errors when the form is not yet loaded or is being unloaded.\r\n   */\r\n  getEntityReader(formId: number): Signal<EntityReader> {\r\n    const l = this.log.fnIf('getReader', { formId });\r\n    // Place creation of the language signal here to avoid creating it multiple times\r\n    const sig = this.#entityReaderCache.getOrCreateWithInfo(formId, () => {\r\n      const language = this.getSignal(formId)() ?? FormLanguage.empty();\r\n      const l2 = this.log.fnIf('getReaderSignal', { language });\r\n      return new EntityReader(language);\r\n    });\r\n    return l.rSilent(sig.signal, `isNew: ${sig.isNew}`);\r\n  }\r\n  #entityReaderCache = new ComputedCacheHelper<number, EntityReader>('entityReader');\r\n\r\n  // use in form config service for language$()\r\n  getLanguage$(formId: number): Observable<FormLanguageComplete> {\r\n    return this.cache$.pipe(\r\n      map(languageInstances => languageInstances[formId]),\r\n      mapUntilChanged(m => m),\r\n      shareReplay(1)\r\n    );\r\n  }\r\n\r\n  /** Get hideHeader for the form. Fix for safari and mobile browsers */\r\n  getHideHeaderSignal(formId: number): Signal<boolean> {\r\n    return this.#signalsHideHeaderCache.getOrCreate(formId, () => this.cache()[formId]?.hideHeader ?? false);\r\n  }\r\n  #signalsHideHeaderCache = new ComputedCacheHelper<number, boolean>('hideHeader');\r\n\r\n\r\n  /** Update hideHeader for the form. Fix for safari and mobile browsers */\r\n  updateHideHeader(formId: number, hideHeader: boolean): void {\r\n    this.update(formId, { hideHeader } satisfies Partial<FormLanguageInStore>);\r\n  }\r\n}\r\n\r\nexport interface FormLanguageInStore extends FormLanguageComplete {\r\n  formId: number;\r\n  hideHeader: boolean;\r\n}\r\n","import { Language } from '../../shared/models/language.model';\r\n\r\nexport { Language } from '../../shared/models/language.model';\r\n\r\nexport class FormLanguage\r\n{\r\n  /** The current language of the system / UI. */\r\n  current: string;\r\n\r\n  /** The primary language of the system.\r\n   * Important, because the primary language must be filled in before all other languages.\r\n   */\r\n  primary: string;\r\n\r\n  /**\r\n   * In some cases we want both to be primary, but it's not clear why.\r\n   * I think it's just because we want certain tests to only use one value, but the test is meant for 2 values.\r\n   */\r\n  static bothPrimary(original: FormLanguage): FormLanguage {\r\n    return {\r\n      current: original.primary,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static diffCurrent(original: FormLanguage, current: string): FormLanguage {\r\n    return {\r\n      current: current,\r\n      primary: original.primary\r\n    };\r\n  }\r\n\r\n  static empty(): FormLanguageComplete {\r\n    return {\r\n      current: '',\r\n      primary: '',\r\n      initial: '',\r\n    };\r\n  }\r\n}\r\n\r\nexport class FormLanguageComplete extends FormLanguage {\r\n  /** initial language of the UI */\r\n  initial: string;\r\n}\r\n\r\nexport interface FormLanguagesConfig\r\n{\r\n  initial: string;\r\n  primary: string;\r\n  list: Language[];\r\n}\r\n\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavDimension } from '../shared/models/eav';\r\n\r\n\r\nexport class DimensionReader {\r\n  constructor(private dimensions: EavDimension[], private language: FormLanguage) { }\r\n\r\n  get hasCurrentWrite(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n\r\n  get hasCurrentReadOnly(): boolean {\r\n    const currentRO = `~${this.language.current}`;\r\n    return this.dimensions.find(d => d.Value === currentRO) !== undefined;\r\n  }\r\n\r\n  get hasCurrent(): boolean {\r\n    const match = this.dimensions.find(d => d.Value === this.language.current\r\n      || d.Value === `~${this.language.current}`\r\n      || (this.language.current === this.language.primary && d.Value === '*'));\r\n    return !!match;\r\n  }\r\n}\r\n","import { FormLanguage } from '../form/form-languages.model';\r\nimport { EavField, EavValue } from '../shared/models/eav';\r\nimport { DimensionReader } from './dimension-reader';\r\nimport { classLog } from '../../shared/logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class FieldReader<T = any> {\r\n  \r\n  log = classLog({FieldReader}, logSpecs);\r\n\r\n  constructor(field: EavField<T>, language: string);\r\n  constructor(field: EavField<T>, language: FormLanguage);\r\n  constructor(field: EavField<T>, language: FormLanguage | string) {\r\n    this.log.fnIf('constructor', { field, language });\r\n    this.#field = field;\r\n    this.#language = typeof language === 'string' ? { current: language, primary: language } : language;\r\n    this.#values = field?.Values ?? [];\r\n    this.#noData = !field || !field.Values || field.Values.length === 0;\r\n  }\r\n\r\n  #noData = true;\r\n\r\n  #field: EavField<T>;\r\n  /** Values - never empty for read-safety */\r\n  #values: EavValue<T>[];\r\n  #language: FormLanguage;\r\n\r\n  get current(): EavValue<T> | null {\r\n    return this.ofLanguage(this.#language); // first match if any is the one we're looking for\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   *\r\n   * @readonly\r\n   * @type {EavValue<T>}\r\n   * @memberof FieldReader\r\n   */\r\n  get currentOrDefault(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    return this.current\r\n      // note that having both languages primary will also result in checking the '*' dimension\r\n      ?? this.ofLanguage(FormLanguage.bothPrimary(this.#language));\r\n  }\r\n\r\n  /**\r\n   * Priority:\r\n   * 1. value for current language\r\n   * 2. value for all languages\r\n   * 3. value for default language\r\n   * 4. first/any value in the system\r\n   */\r\n  get currentOrDefaultOrAny(): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.currentOrDefault ?? this.#values[0] ?? null;\r\n  }\r\n\r\n\r\n  ofLanguage(language: FormLanguage): EavValue<T> | null {\r\n    if (this.#noData) return null;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrent)[0] ?? null;\r\n  }\r\n\r\n  /** Check if there is a value on the specified primary language or on the '*' dimension */\r\n  get hasPrimary(): boolean {\r\n    if (this.#noData) return false;\r\n    const primary = this.#language.primary;\r\n    return this.#values.filter(val => val.Dimensions.find(d => d.Value === primary || d.Value === '*')).length > 0;\r\n  }\r\n\r\n  get hasCurrentReadonly(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, this.#language).hasCurrentReadOnly).length > 0;\r\n  }\r\n\r\n  /** A value in specified Language is editable, if assigned to current language or to '*' (but only when on default-language) */\r\n  get hasEditableValues(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n  /** Number of editable translatable fields that */\r\n  countEditable(): number {\r\n    return this.#valuesEditableOf().length;\r\n  }\r\n\r\n  /** Number of editable translatable fields that have some content (not empty/null) */\r\n  countEditableWithContents(): number {\r\n    return this.#valuesEditableOf().filter(v => v.Value != \"\" && v.Value != null)?.length;\r\n  }\r\n\r\n  /**\r\n   * Values of a field are for the current language,\r\n   * if they are assigned to the current language or to '*' (but only when the current-language is also the primary-language)\r\n   */\r\n  #valuesEditableOf(language?: FormLanguage): EavValue<T>[] {\r\n    if (this.#noData) return [];\r\n    language ??= this.#language;\r\n    return this.#values.filter(val => new DimensionReader(val.Dimensions, language).hasCurrentWrite);\r\n  }\r\n\r\n  /** Value of current language which is editable. `null` if not found. */\r\n  get currentEditable(): EavValue<T> {\r\n    if (this.#noData) return null;\r\n    const dimension = this.#language.current;\r\n    return this.#values.find(v => v.Dimensions.find(x => x.Value === dimension)) ?? null;\r\n  }\r\n\r\n  isEditableOrReadonlyTranslationExist(): boolean {\r\n    if (this.#noData) return false;\r\n    return this.#valuesEditableOf().length > 0;\r\n  }\r\n\r\n}\r\n","import { classLog } from '../../../shared/logging';\r\nimport { FormLanguage } from '../../form/form-languages.model';\r\nimport { FieldReader } from '../../localization/field-reader';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\nimport { EavEntity, EavEntityAttributes, EavField } from '../models/eav';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  constructor: false,\r\n};\r\n\r\nexport class EntityReader implements FormLanguage {\r\n  \r\n  log = classLog({EntityReader}, logSpecs);\r\n\r\n  /** @inheritdoc */\r\n  public current: string;\r\n  /** @inheritdoc */\r\n  public primary: string;\r\n\r\n  constructor(formLanguage: FormLanguage);\r\n  constructor(current: string, primary: string);\r\n  constructor(current: FormLanguage | string, primary?: string) {\r\n    this.log.fnIf('constructor', { current, primary });\r\n    if (typeof current === 'string') {\r\n      this.current = current;\r\n      this.primary = primary;\r\n    } else {\r\n      this.current = current.current;\r\n      this.primary = current.primary;\r\n    }\r\n  }\r\n\r\n  // WIP - to make code clearer, this is what should be used from now on\r\n  // But we'll probably end up calling this from the EntityReader only, so it should be straight forward\r\n  getBestValue<T>(attributeValues: EavField<T>, defaultValue: T = null): T {\r\n    const fieldReader = new FieldReader<T>(attributeValues, this);\r\n    return fieldReader.currentOrDefaultOrAny?.Value ?? defaultValue;\r\n    // return LocalizationHelpers.translate<T>(this, attributeValues as EavField<T>, defaultValue);\r\n  }\r\n\r\n  public flatten<T>(metadata: EavEntity | EavEntity[]): T {\r\n    if (metadata == null)\r\n      return {} as T;\r\n\r\n    const metadataItems = Array.isArray(metadata) ? metadata : [metadata];\r\n    if (metadataItems.length === 0 || metadataItems[0] == null)\r\n      return {} as T;\r\n\r\n    const merged: Record<string, any> = {};\r\n    // copy metadata settings which are not @All\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id === '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    // copy @All metadata settings, overwriting previous settings\r\n    for (const item of metadataItems) {\r\n      if (item.Type.Id !== '@All') continue;\r\n\r\n      for (const [name, values] of Object.entries(item.Attributes)) {\r\n        const value = this.getBestValue(values);\r\n        // do not overwrite previous settings if @All is empty\r\n        const exists = merged[name] != null;\r\n        const emptyAll = value == null || value === '';\r\n        if (exists && emptyAll) continue;\r\n\r\n        merged[name] = value;\r\n      }\r\n    }\r\n\r\n    return merged as T;\r\n  }\r\n\r\n  currentValues(itemAttributes: EavEntityAttributes): ItemValuesOfLanguage {\r\n\r\n    const formValues: ItemValuesOfLanguage = Object.entries(itemAttributes)\r\n      .reduce((acc, [name, values]) => {\r\n        acc[name] = this.getBestValue(values);\r\n        return acc;\r\n      }, {} as ItemValuesOfLanguage);\r\n\r\n    return formValues;\r\n  }\r\n\r\n}\r\n","import { Injectable, Injector, Signal, computed, effect, inject, signal } from '@angular/core';\r\nimport { IFieldMask } from '../../../../../../edit-types/src/IFieldMask';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ServiceBase } from '../../../shared/services/service-base';\r\nimport { FieldState } from '../../fields/field-state';\r\nimport { FormConfigService } from '../../form/form-config.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  initSignal: false,\r\n  watchAllFields: true,\r\n}\r\n\r\nconst dataPrefix = 'data';\r\nconst FieldsFindNoPrefix = /\\[.*?\\]/ig;\r\nconst FieldsFindPrefix = /\\[[a-zA-Z]+\\:.*?\\]/ig;\r\nconst FieldUnwrap = /[\\[\\]]/ig;\r\n\r\n/**\r\n * Create a new FieldMask instance and access result with resolve\r\n * @example\r\n * const mask = new FieldMask(\"[FirstName]\", formGroup.controls);\r\n * const maskValue = mask.resolve();\r\n *\r\n * @param mask a string like \"[FirstName] [LastName]\"\r\n * @param model usually FormGroup controls, passed into here\r\n * @param overloadPreCleanValues a function which will \"scrub\" the found field-values\r\n */\r\n\r\n@Injectable()\r\nexport class FieldMask extends ServiceBase implements IFieldMask /* for field-change subscription */ {\r\n  \r\n  log = classLog({FieldMask}, logSpecs);\r\n\r\n  #fieldState = inject(FieldState);\r\n  #formConfig = inject(FormConfigService);\r\n\r\n  constructor(private injector: Injector) {\r\n    super();\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  /**\r\n   * The result of the mask as a signal, for external use/subscribing.\r\n   */\r\n  public result = signal<string>('');\r\n\r\n  #controls = this.#fieldState.group.controls;\r\n  #fieldConfig = this.#fieldState.config;\r\n  #requirePrefix = false;\r\n\r\n  /**\r\n   * The mask as a signal.\r\n   * This allows us to use a simple value or a possibly runtime-changing mask. \r\n   */\r\n  #maskSignal = signal<Signal<string>>(signal<string>(''));\r\n\r\n  /**\r\n   * The final mask to use - either picking the signal or the text\r\n   * TODO: we should be able to simplify this to just use a signal\r\n   */\r\n  #mask = computed(() => this.#maskSignal()());\r\n\r\n  /** Fields used in the mask */\r\n  #fieldsUsedInMask = computed(() => this.#extractFieldNames(this.#mask()));\r\n\r\n  // #fieldValuesSignals = inject(FieldsSettingsService).fieldValues;\r\n\r\n  // // TODO create a multi-field signal?\r\n\r\n  // public result2 = computed(() => {\r\n  //   // listen to all the fields for changes\r\n  //   this.#fieldsUsedInMask().forEach(field => {\r\n\r\n  //   });\r\n  // });\r\n\r\n\r\n  /**\r\n   * Attach any processing events before the mask is resolved the first time\r\n   */\r\n  public initPreClean(overloadPreCleanValues: (key: string, value: string) => string): this {\r\n    this.log.a('initPreClean');\r\n    this.preClean = overloadPreCleanValues;\r\n    return this;\r\n  }\r\n\r\n  public init(name: string, mask: string, requirePrefix: boolean = false): this {\r\n    return this.initSignal(name, signal(mask));\r\n  }\r\n\r\n  public initSignal(name: string, mask: Signal<string>): this {\r\n    this.log.extendName(`-${name}`);\r\n    const l = this.log.fnIf('initSignal', { name, mask });\r\n    this.#maskSignal.set(mask);\r\n    this.#updateMaskFinal();\r\n    return l.r(this, 'first result:' + this.result());\r\n  }\r\n\r\n  /**\r\n   * Activate an aggressive change logger to debug what's happening.\r\n   * Should only be used in development, as it will log a lot of data to the console.\r\n   */\r\n  public logChanges(): this {\r\n    // use logger, but if not enabled, create new just for this\r\n    const l = this.log.enabled ? this.log : classLog({FieldMask});\r\n    effect(() => l.a(`Mask '${this.#mask()}' value changed to: ${this.result()}`), { injector: this.injector });\r\n    return this;\r\n  }\r\n\r\n  #updateMaskFinal() {\r\n    // bind auto-watch only if needed...\r\n    // otherwise it's just on-demand\r\n    this.#watchAllFields();\r\n    this.#onChange();\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * Process a mask to the get the final value\r\n   */\r\n  #process(): string {\r\n\r\n    // if no mask, exit early\r\n    if (!hasPlaceholders(this.#mask()))\r\n      return this.#mask();\r\n\r\n    let value = lowercaseInsideSquareBrackets(this.#mask());\r\n\r\n    // If we have form info (which we usually do), replace the placeholders\r\n    if (this.#formConfig != null)\r\n      value = value\r\n        .replace('[app:appid]', this.#formConfig.config.appId.toString())\r\n        .replace('[app:zoneid]', this.#formConfig.config.zoneId.toString());\r\n\r\n    // If we have field info (which we usually do), replace the placeholders\r\n    if (this.#fieldConfig != null)\r\n      value = value\r\n        .replace('[guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[data:guid]', this.#fieldConfig.entityGuid)\r\n        .replace('[id]', this.#fieldConfig.entityId.toString())\r\n        .replace('[data:id]', this.#fieldConfig.entityId.toString());\r\n\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return value;\r\n\r\n    dataPlaceholders.forEach((e, i) => {\r\n      const replaceValue = this.#controls?.[e]?.value ?? '';\r\n      const cleaned = this.preClean(e, replaceValue);\r\n      // New with prefix 'data:'\r\n      value = value.replace('[data:' + e.toLowerCase() + ']', cleaned);\r\n      // Old without prefix - only if allowed (for compatibility)\r\n      value = value.replace('[' + e.toLowerCase() + ']', cleaned);\r\n    });\r\n    return value;\r\n  }\r\n\r\n  /** Retrieves a list of all fields used in the mask */\r\n  #extractFieldNames(mask: string): Record<string, string[]> {\r\n    // exit early if mask very simple or not a mask\r\n    if (!mask || !hasPlaceholders(mask))\r\n      return {};\r\n\r\n    const matches = mask.match(FieldsFindNoPrefix);\r\n    \r\n    if (!matches)\r\n      return {};\r\n    \r\n    const fields: string[] = matches.map(token => token.replace(FieldUnwrap, ''));\r\n    return { data: fields };\r\n  }\r\n\r\n  /**\r\n   * Default preClean function, if no other function was specified for this\r\n   * Will be replaced if need be.\r\n   */\r\n  private preClean(key: string, value: string): string { return value; }\r\n\r\n  /** Change-event - will only fire if it really changes */\r\n  #onChange() {\r\n    const maybeNew = this.#process();\r\n    this.result.set(maybeNew);\r\n  }\r\n\r\n  /**\r\n   * Add watcher and execute onChange.\r\n   * Uses observables, since that's what angular provides on valueChanges.\r\n   */\r\n  #watchAllFields() {\r\n    const l = this.log.fnIf('watchAllFields');\r\n    const dataPlaceholders = this.#fieldsUsedInMask().data;\r\n    if (!dataPlaceholders)\r\n      return l.end('no data placeholders');\r\n\r\n    // add a watch for each field in the field-mask\r\n    const controls = dataPlaceholders\r\n      .map(f => this.#controls[f])\r\n      .filter(f => f != null);\r\n\r\n    if (controls.length == 0)\r\n      return l.end('no fields to watch');\r\n\r\n    controls.forEach(c => this.subscriptions.add(c.valueChanges.subscribe(_ => this.#onChange())));\r\n    l.end();\r\n  }\r\n}\r\n\r\n\r\nfunction hasPlaceholders(mask: string): boolean {\r\n  return (mask ?? '').includes('[');\r\n}\r\n\r\n/** used for query parameters */\r\nfunction lowercaseInsideSquareBrackets(value: string) {\r\n  return value.replace(/\\[([^\\]]+)\\]/g, (_, group) => `[${group.toLowerCase()}]`);\r\n}\r\n","import { ItemIdentifierEditConfig } from '../../shared/models/edit-form.model';\r\nimport { FormLanguage } from '../form/form-languages.model';\r\nimport { FieldReader } from '../localization/field-reader';\r\nimport { EntityReader } from '../shared/helpers';\r\nimport { EavContentType } from '../shared/models/eav';\r\nimport { ContentTypeSettings } from './content-type-settings.model';\r\n\r\nexport class ContentTypeSettingsHelpers {\r\n\r\n  /**\r\n   * Initialize the default settings of a ContentType to ensure everything is set or empty-string etc.\r\n   * @returns \r\n   */\r\n  static getDefaultSettings(reader: EntityReader, contentType: EavContentType, itemHeader: ItemIdentifierEditConfig): ContentTypeSettings {\r\n    const metadata = reader.flatten<ContentTypeSettings>(contentType.Metadata);\r\n    const defaultSettings = { ...metadata };\r\n    defaultSettings.Description ??= '';\r\n    defaultSettings.EditInstructions ??= '';\r\n    defaultSettings.Features ??= '';\r\n    defaultSettings.Label ??= '';\r\n    defaultSettings.ListInstructions ??= '';\r\n    defaultSettings.Notes ??= '';\r\n    defaultSettings.Icon ??= '';\r\n    defaultSettings.Link ??= '';\r\n    defaultSettings._itemTitle = this.getTitle(contentType, reader);\r\n    defaultSettings._slotCanBeEmpty = itemHeader.IsEmptyAllowed ?? false;\r\n    defaultSettings._slotIsEmpty = itemHeader.IsEmpty ?? false;\r\n    return defaultSettings;\r\n  }\r\n\r\n  static getTitle(contentType: EavContentType, language: FormLanguage): string {\r\n    try {\r\n      // xx ContentType is a historic bug and should be fixed when JSONs are rechecked\r\n      const type = contentType.Metadata.find(metadata => metadata.Type.Name === 'ContentType' || metadata.Type.Name === 'xx ContentType');\r\n      let label = (type)\r\n        ? new FieldReader(type.Attributes.Label, language).currentOrDefault?.Value\r\n        : null;\r\n      label = label || contentType.Name;\r\n      return label;\r\n    } catch (error) {\r\n      return contentType.Name;\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n","export class FileTypeHelpers {\r\n  private static defaultIcon = 'file';\r\n  private static customExtensions: Record<string, string> = {\r\n    doc: 'file-word',\r\n    docx: 'file-word',\r\n    xls: 'file-excel',\r\n    xlsx: 'file-excel',\r\n    ppt: 'file-powerpoint',\r\n    pptx: 'file-powerpoint',\r\n    pdf: 'file-pdf',\r\n    mp3: 'file-audio',\r\n    avi: 'file-video',\r\n    mpg: 'file-video',\r\n    mpeg: 'file-video',\r\n    mov: 'file-video',\r\n    mp4: 'file-video',\r\n    zip: 'file-archive',\r\n    rar: 'file-archive',\r\n    txt: 'file-text',\r\n    html: 'file-code',\r\n    css: 'file-code',\r\n    xml: 'file-code',\r\n    xsl: 'file-code',\r\n  };\r\n  private static matExtensions: Record<string, string> = {\r\n    vcf: 'person',\r\n  };\r\n\r\n  static getExtension(filename: string) {\r\n    return filename.substring(filename.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n  }\r\n\r\n  static getIconClass(filename: string) {\r\n    const ext = this.getExtension(filename);\r\n    return this.matExtensions[ext] || this.customExtensions[ext] || this.defaultIcon;\r\n  }\r\n\r\n  static isKnownType(filename: string) {\r\n    return this.matExtensions[this.getExtension(filename)] != null;\r\n  }\r\n\r\n  static isImage(filename: string) {\r\n    return this.isImgRegex().test(filename);\r\n  }\r\n\r\n  private static isImgRegex() {\r\n    return /(?:([^:\\/?#]+):)?(?:\\/\\/([^\\/?#]*))?([^?#]*\\.(?:jpg|jpeg|gif|png|webp))(?:\\?([^#]*))?(?:#(.*))?/i;\r\n  }\r\n}\r\n","import { Of } from '../../../../../../core';\r\nimport { FieldSettings } from '../../../../../../edit-types/src/FieldSettings';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\nimport { InputTypeCatalog } from '../../../shared/fields/input-type-catalog';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { ItemIdentifierShared } from '../../../shared/models/edit-form.model';\r\n\r\n/**\r\n * Get the field initial / default value, incl. the prefilled value if available.\r\n */\r\nexport class FieldDefaults {\r\n\r\n  log = classLog({FieldDefaults});\r\n\r\n  constructor(\r\n    private name: string,\r\n    private inputType: Of<typeof InputTypeCatalog>,\r\n    private settings: FieldSettings,\r\n    private itemHeader?: Pick<ItemIdentifierShared, \"Prefill\">,\r\n  ) { }\r\n\r\n  /** Include itemHeader if you need data from prefill, and set onlyPrefill if you only need parsed prefill */\r\n  getDefaultOrPrefillValue(onlyPrefill?: boolean): FieldValue {\r\n\r\n    const inputType = this.inputType;\r\n    const name = this.name;\r\n    const settings = this.settings;\r\n    const itemHeader = this.itemHeader;\r\n    const l = this.log.fn('parseDefaultValue', { name, inputType, settings, itemHeader, onlyPrefill });\r\n\r\n    const prefillRaw = itemHeader?.Prefill?.[name];\r\n    if (onlyPrefill && prefillRaw === undefined)\r\n      return l.rNull('only prefill, but no prefill data found');\r\n\r\n    let defaultValue = prefillRaw?.toString() ?? settings.DefaultValue;\r\n\r\n    l.values({ defaultValue });\r\n\r\n    switch (inputType) {\r\n      case InputTypeCatalog.BooleanDefault:\r\n        return defaultValue?.toLowerCase() === 'true';\r\n      case InputTypeCatalog.BooleanTristate:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? defaultValue.toLowerCase() === 'true'\r\n          : null;\r\n      case InputTypeCatalog.DateTimeDefault:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? new Date(defaultValue).toJSON()\r\n          : null;\r\n      case InputTypeCatalog.NumberDefault:\r\n      case InputTypeCatalog.NumberDropdown:\r\n      case InputTypeCatalog.NumberPicker:\r\n        return defaultValue != null && defaultValue !== ''\r\n          ? !isNaN(Number(defaultValue)) ? Number(defaultValue) : null\r\n          : null;\r\n      case InputTypeCatalog.EntityDefault:\r\n      case InputTypeCatalog.EntityQuery:\r\n      case InputTypeCatalog.EntityContentBlocks:\r\n      case InputTypeCatalog.EntityPicker:\r\n        // Empty - return []\r\n        if (defaultValue == null || defaultValue === '')\r\n          return [];\r\n\r\n        // string has { } characters, we must switch them to quotes for parsing below\r\n        // 2024-06-01 2dm not sure why this is an option..., maybe some interim encoding?\r\n        if (defaultValue.includes('{'))\r\n          defaultValue = defaultValue.replace(/[\\{\\}]/g, '\\\"');\r\n\r\n        // list but no array, add brackets\r\n        if (defaultValue.includes(',') && !defaultValue.includes('[')) {\r\n          const guids = defaultValue.split(',').map(guid => guid.trim());\r\n          defaultValue = JSON.stringify(guids);\r\n        }\r\n\r\n        // Finally parse\r\n        return defaultValue.startsWith('[') // an array with guid strings\r\n          ? JSON.parse(defaultValue) // if it's a string containing an array\r\n          : [defaultValue.replace(/\"/g, '')]; // just a guid string, but might have quotes\r\n      default:\r\n        return defaultValue ?? '';\r\n    }\r\n  }\r\n}\r\n","export class SanitizeHelper {\r\n\r\n  private static removeFromStart(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static removeFromEnd(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static cleanBadPath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  static sanitizePath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  static sanitizeName(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized).replace(illegalRe, replacement);\r\n  }\r\n}\r\n","import { Signal } from '@angular/core';\r\nimport { ComputedCacheHelper } from '../../../shared/signals/computed-cache';\r\nimport { computedObj, signalObj } from '../../../shared/signals/signal.utilities';\r\nimport { classLog, ClassLogger } from '../../../shared/logging';\r\n\r\n/**\r\n * Signal based store for any kind of data which is accessed by a key.\r\n * - The data type is generic.\r\n * - The key type can be customized.\r\n * - Standard get/add/remove methods exist, and can be augmented by the inheriting store.\r\n */\r\nexport abstract class SignalStoreBase<TKey extends string | number, TValue> {\r\n  \r\n  protected log: ClassLogger;\r\n\r\n  constructor(log: ClassLogger) {\r\n    this.log = log ?? classLog({SignalStoreBase});\r\n    this.log.a('SignalStoreBase created');\r\n    this.name = this.log.name;\r\n  }\r\n  \r\n  /** Main Cache */\r\n  #cache = signalObj<Record<TKey, TValue>>('cache', {} as Record<TKey, TValue>);\r\n\r\n  /** Cached version of the list, with the latest object-values */\r\n  #list = computedObj('list', () => Object.values(this.#cache()) as TValue[]);\r\n\r\n  /** Cache for the inheriting classes, but as read-only */\r\n  protected get cache(): Signal<Record<TKey, TValue>> { return this.#cache; }\r\n\r\n  /** List for the inheriting classes, but as read-only */\r\n  protected get list(): Signal<TValue[]> { return this.#list; }\r\n\r\n  /**\r\n   * Function to get the key / id for storing in the cache.\r\n   * Default is to get the 'id' property of the item.\r\n   * This should be overriden in the inheriting class.\r\n   */\r\n  protected getId: (item: TValue) => TKey = (item) => (item as any).id as TKey;\r\n\r\n  protected sanitizeAdd: (item: TValue) => TValue = (item) => item;\r\n\r\n  name: string;\r\n\r\n\r\n  //#region Add / Update / Remove / Clear Cache\r\n\r\n  add(item: TValue): void {\r\n    const l = this.log.fn('add', { item });\r\n    if (!item)\r\n      return l.end('item is null');\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    });\r\n    l.end('added');\r\n  }\r\n\r\n  addMany(items: TValue[]): void {\r\n    var l = this.log.fn('addMany', { items });\r\n    if (!items || items.length == 0)\r\n      return l.end('items is null or empty');\r\n\r\n    // also add to signal, but in one go\r\n    const result = items.reduce((acc, item) => ({\r\n      ...acc,\r\n      [this.getId(item)]: this.sanitizeAdd(item)\r\n    }), { ...this.#cache() });\r\n    \r\n    this.#cache.set(result);\r\n    l.end('added');\r\n  }\r\n\r\n  update(id: TKey, item: Partial<TValue>): void {\r\n    const l = this.log.fn('update', { id, item });\r\n    if (!id || !item)\r\n      return l.end('id or item is null');\r\n\r\n    const before = this.get(id);\r\n    if (!before)\r\n      return l.end(`Item with id ${id} not found in store`);\r\n\r\n    // merge\r\n    const newItem = { ...before, ...item };\r\n\r\n    // add to signal\r\n    this.#cache.set({\r\n      ...this.#cache(),\r\n      [id]: newItem\r\n    });\r\n    l.end('updated');\r\n  }\r\n\r\n  remove(id: TKey): void {\r\n    const l = this.log.fn('remove', { id });\r\n    const { [id]: _, ...updatedStore } = this.#cache();\r\n    this.#cache.set(updatedStore as Record<TKey, TValue>);\r\n    l.end('removed');\r\n  }\r\n\r\n  clearCache(): void {\r\n    const l = this.log.fn('clearCache');\r\n    this.#cache.set({} as Record<TKey, TValue>);\r\n    l.end('cleared');\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Now-Getters\r\n\r\n  get(id: TKey): TValue {\r\n    const result = this.#cache()[id];\r\n    this.log.a(`get(${id}) - ` + (result == null ? 'not' : '') + 'found');\r\n    return result;\r\n  }\r\n\r\n  getAll(): TValue[] {\r\n    const result = this.#list();\r\n    this.log.a('getAll() - ' + `found ${result.length} items`);\r\n    return result;\r\n  }\r\n\r\n  getMany(ids: TKey[]): TValue[] {\r\n    const l = this.log.fn('getMany', { ids });\r\n    const result = ids\r\n      .map(id => this.#cache()[id])\r\n      .filter(item => item != null);\r\n    return l.r(result, `found ${result.length} items`);\r\n  }\r\n\r\n  //#endregion\r\n\r\n  //#region Signal Getters\r\n\r\n  getSignal(id: TKey): Signal<TValue> {\r\n    const result = this.#itemSignalsCache.getOrCreateWithInfo(id, () => this.get(id));\r\n    this.log.a(`getSignal(${id})`, { isNew: result.isNew });\r\n    return result.signal;\r\n  }\r\n  #itemSignalsCache = new ComputedCacheHelper<TKey, TValue>('item');\r\n\r\n\r\n  getManySignal(ids: TKey[]): Signal<TValue[]> {\r\n    const sig = computedObj('getMany', () => ids.map(id => this.get(id)).filter(item => item != null));\r\n    this.log.a('getManySignal()', { ids });\r\n    return sig;\r\n  }\r\n\r\n  getAllSignal(): Signal<TValue[]> {\r\n    const list = this.#list;\r\n    this.log.a(`getAllSignal() - found ${list().length} items`);\r\n    return list;\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { toObservable } from '@angular/core/rxjs-interop';\r\nimport { SignalStoreBase } from './signal-store-base';\r\nimport { Observable } from 'rxjs';\r\nimport { mapUntilChanged } from '../../../shared/rxJs/mapUntilChanged';\r\n\r\nexport abstract class SignalStoreObservableBase<TKey extends string | number, TValue> extends SignalStoreBase<TKey, TValue> {\r\n\r\n  /** Old / existing functionality with observables */\r\n  #cache$ = toObservable(this.cache);\r\n\r\n  #list$ = toObservable(this.list);\r\n\r\n  // publish only as a read-only signal\r\n  protected get cache$(): Observable<Record<TKey, TValue>> {\r\n    return this.#cache$;\r\n  }\r\n\r\n  protected get list$(): Observable<TValue[]> {\r\n    return this.#list$;\r\n  }\r\n\r\n  getList$(): Observable<TValue[]> {\r\n    return this.list$;\r\n  }\r\n\r\n  getMany$(ids?: TKey[]): Observable<TValue[]> {\r\n    return this.cache$.pipe(\r\n      mapUntilChanged(obj => ids.map(id => obj[id]).filter(m => m != null)),\r\n    );\r\n  }\r\n\r\n}","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","export class ArrayHelpers {\r\n  /**\r\n   * Toggles an item in an array. If the item is not in the array, it is added. If it is in the array, it is removed.\r\n   * @param item The item to toggle\r\n   * @param array The array to toggle the item in\r\n   */\r\n  static toggleInArray<T>(item: T, array: T[]): void {\r\n    const index = array.indexOf(item);\r\n    if (index === -1) {\r\n      array.push(item);\r\n    } else {\r\n      array.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  // probably better: Array.from(new Set(merged));\r\n  // static distinct<T extends unknown>(array: T[]): T[] {\r\n  //   return array.filter(onlyUnique);\r\n  // }\r\n\r\n}\r\n\r\n\r\n// function onlyUnique<T extends unknown>(value: T, index: number, array: T[]): boolean {\r\n//   return array.indexOf(value) === index;\r\n// }","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n"],"x_google_ignoreList":[]}