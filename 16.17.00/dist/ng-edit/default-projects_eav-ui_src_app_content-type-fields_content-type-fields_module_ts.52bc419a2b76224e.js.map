{"version":3,"file":"default-projects_eav-ui_src_app_content-type-fields_content-type-fields_module_ts.52bc419a2b76224e.js","mappings":"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","names":["contentTypeFieldsDialog","name","initContext","panelSize","panelClass","getComponent","_asyncToGenerator","ContentTypeFieldsComponent","Promise","all","__webpack_require__","e","then","bind","editContentTypeFieldsDialog","EditContentTypeFieldsComponent","routes","path","component","DialogEntryComponent","data","dialog","children","GoToMetadata","getRoutes","GoToPermissions","route","matcher","edit","loadChildren","m","EditModule","refreshEdit","RefreshEditModule","ContentTypeFieldsRoutingModule","_class","RouterModule","forChild","ContentTypeFieldsModule","Context","ContentTypesService","ContentTypesFieldsService","provide","MAT_SELECT_CONFIG","useValue","hideSingleSelectionIndicator","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","SxcGridModule","FormsModule","MatInputModule","MatSelectModule","MatRippleModule","MatSnackBarModule","MatMenuModule","MatBadgeModule","MatTableModule","MatCardModule","TranslateModule","FeaturesModule","_c0","_c1","mixinHasStickyInput","base","sticky","this","_sticky","v","prevValue","coerceBooleanProperty","_hasStickyChanged","hasStickyChanged","resetStickyChanged","constructor","args","super","CDK_TABLE","InjectionToken","CdkCellDef","template","ɵfac","t","i0","ɵdir","type","selectors","CdkHeaderCellDef","_class2","CdkFooterCellDef","_class3","CdkColumnDefBase","_CdkColumnDefBase","CdkColumnDef","_class4","_name","_setNameInput","stickyEnd","_stickyEnd","_table","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","value","replace","contentQueries","rf","ctx","dirIndex","_t","cell","first","headerCell","footerCell","inputs","features","useExisting","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","_class5","hostAttrs","CdkCell","_class7","_elementRef","nodeType","tableRole","getAttribute","setAttribute","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_class8","_ngZone","_currentSchedule","_destroyed","Subject","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","ngOnDestroy","next","complete","_getScheduleObservable","pipe","takeUntil","subscribe","length","isStable","from","resolve","undefined","onStable","take","ɵprov","token","factory","BaseRowDef","_class9","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkHeaderRowDefBase","_CdkHeaderRowDefBase","_class10","CdkFooterRowDefBase","_CdkFooterRowDefBase","_class11","CdkRowDef","_class12","when","CdkCellOutlet","_class13","_viewContainer","mostRecentCellOutlet","CdkHeaderRow","_class14","ɵcmp","decls","vars","consts","dependencies","encapsulation","CdkRow","_class16","CdkNoDataRow","_class17","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","ELEMENT_NODE","i","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","stickyColumnsUpdated","sizes","stickyEndColumnsUpdated","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","slice","map","width","index","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","height","getBoundingClientRect","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","_class19","viewContainer","HeaderRowOutlet","_class20","FooterRowOutlet","_class21","NoDataRowOutlet","_class22","CdkTable","_class23","trackBy","_trackByFn","fn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_rowOutlet","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","_forceRecalculateCellWidths","_stickyColumnStylesNeedReset","_changeDetectorRef","role","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","contentChanged","EventEmitter","viewChange","BehaviorSubject","Number","MAX_VALUE","nodeName","ngOnInit","_setupStickyStyler","_applyNativeTableSections","_dataDiffer","_i","dataRow","dataIndex","change","ngAfterContentChecked","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_rowDefs","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","_headerRowOutlet","_footerRowOutlet","forEach","def","clear","_headerRowDefs","_footerRowDefs","_defaultRowDef","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","get","$implicit","NgZone","isInAngularZone","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","footerRow","values","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","filter","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","documentFragment","createDocumentFragment","sections","tag","outlets","_noDataRowOutlet","section","createElement","appendChild","stickyCheckReducer","d","isBrowser","items","_noDataRow","shouldShow","container","rootNode","i1","DOCUMENT","i2","_VIEW_REPEATER_STRATEGY","i3","viewQuery","hostVars","hostBindings","outputs","exportAs","useClass","_DisposeViewRepeaterStrategy","ngContentSelectors","styles","array","concat","CdkTableModule","_class25","ɵmod","ɵinj","ScrollingModule","MatTable","arguments","ɵ_class2_BaseFactory","MatCellDef","ɵ_class3_BaseFactory","MatHeaderCellDef","ɵ_class4_BaseFactory","MatColumnDef","_class6","ɵ_class6_BaseFactory","MatHeaderCell","ɵ_class7_BaseFactory","MatCell","ɵ_class9_BaseFactory","MatHeaderRowDef","ɵ_class10_BaseFactory","MatRowDef","ɵ_class12_BaseFactory","MatHeaderRow","ɵ_class13_BaseFactory","MatRow","_class15","ɵ_class15_BaseFactory","_class18","MatCommonModule","_MatTableDataSource","DataSource","_renderChangesSubscription","_filterData","_filter","sort","_sort","_updateChangeSubscription","paginator","_paginator","initialData","_renderData","_internalPageChanges","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","Object","keys","currentTerm","key","toLowerCase","transformedFilter","trim","sortChange","merge","initialized","pageChange","page","filteredData","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","lastPageIndex","Math","ceil","newPageIndex","min","MatTableDataSource"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/content-type-fields-dialog.config.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-routing.module.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.module.ts","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs"],"sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../edit/edit.matcher';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      {\r\n        path: 'update/:contentTypeStaticName/:id/:editMode',\r\n        component: DialogEntryComponent,\r\n        data: { dialog: editContentTypeFieldsDialog },\r\n      },\r\n      ...GoToMetadata.getRoutes(),\r\n      GoToPermissions.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MAT_SELECT_CONFIG, MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ReservedNamesValidatorDirective } from './edit-content-type-fields/reserved-names.directive';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\nimport { AddSharingFieldsComponent } from './add-sharing-fields/add-sharing-fields.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { ShareOrInheritDialogComponent } from './share-or-inherit-dialog/share-or-inherit-dialog.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { FeaturesModule } from '../features/features.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n    ContentTypeFieldsSpecialComponent,\r\n    ReservedNamesValidatorDirective,\r\n    AddSharingFieldsComponent,\r\n    ShareOrInheritDialogComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    SxcGridModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n    MatTableModule,\r\n    MatCardModule,\r\n    TranslateModule,\r\n    FeaturesModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n    { provide: MAT_SELECT_CONFIG, useValue: { hideSingleSelectionIndicator: true } }\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n","import * as i1 from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, Input, ContentChild, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, NgZone, Attribute, SkipSelf, Output, ViewChild, ContentChildren, NgModule } from '@angular/core';\nimport { Subject, from, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil, take } from 'rxjs/operators';\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkCellDef, selector: \"[cdkCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkHeaderCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFooterCellDef, selector: \"[cdkFooterCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkFooterCellDef]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n// Boilerplate for applying mixins to CdkColumnDef.\n/** @docs-private */\nclass CdkColumnDefBase {\n}\nconst _CdkColumnDefBase = mixinHasStickyInput(CdkColumnDefBase);\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef extends _CdkColumnDefBase {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(v) {\n        const prevValue = this._stickyEnd;\n        this._stickyEnd = coerceBooleanProperty(v);\n        this._hasStickyChanged = prevValue !== this._stickyEnd;\n    }\n    constructor(_table) {\n        super();\n        this._table = _table;\n        this._stickyEnd = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: { sticky: \"sticky\", name: [\"cdkColumnDef\", \"name\"], stickyEnd: \"stickyEnd\" }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }]; }, propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], stickyEnd: [{\n                type: Input,\n                args: ['stickyEnd']\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        if (columnDef._table?._elementRef.nativeElement.nodeType === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFooterCell, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        if (columnDef._table?._elementRef.nativeElement.nodeType === 1) {\n            const tableRole = columnDef._table._elementRef.nativeElement.getAttribute('role');\n            const role = tableRole === 'grid' || tableRole === 'treegrid' ? 'gridcell' : 'cell';\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: CdkColumnDef }, { type: i0.ElementRef }]; } });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_ngZone) {\n        this._ngZone = _ngZone;\n        this._currentSchedule = null;\n        this._destroyed = new Subject();\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    /** Prevent any further tasks from running. */\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._getScheduleObservable()\n            .pipe(takeUntil(this._destroyed))\n            .subscribe(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        });\n    }\n    _getScheduleObservable() {\n        // Use onStable when in the context of an ongoing change detection cycle so that we\n        // do not accidentally trigger additional cycles.\n        return this._ngZone.isStable\n            ? from(Promise.resolve(undefined))\n            : this._ngZone.onStable.pipe(take(1));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _CoalescedStyleScheduler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: i0.NgZone }]; } });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }]; } });\n// Boilerplate for applying mixins to CdkHeaderRowDef.\n/** @docs-private */\nclass CdkHeaderRowDefBase extends BaseRowDef {\n}\nconst _CdkHeaderRowDefBase = mixinHasStickyInput(CdkHeaderRowDefBase);\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends _CdkHeaderRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkHeaderRowDef, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: ['columns: cdkHeaderRowDef', 'sticky: cdkHeaderRowDefSticky'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }]; } });\n// Boilerplate for applying mixins to CdkFooterRowDef.\n/** @docs-private */\nclass CdkFooterRowDefBase extends BaseRowDef {\n}\nconst _CdkFooterRowDefBase = mixinHasStickyInput(CdkFooterRowDefBase);\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends _CdkFooterRowDefBase {\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFooterRowDef, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\"] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: ['columns: cdkFooterRowDef', 'sticky: cdkFooterRowDefSticky'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }]; } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkRowDef, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: ['columns: cdkRowDefColumns', 'when: cdkRowDefWhen'],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }]; } });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static { this.mostRecentCellOutlet = null; }\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[cdkCellOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; } });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkHeaderRow, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkFooterRow, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkRow, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkNoDataRow, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        const firstRow = rows[0];\n        const numCells = firstRow.children.length;\n        const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n        const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n        const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n        const lastStickyStart = stickyStartStates.lastIndexOf(true);\n        const firstStickyEnd = stickyEndStates.indexOf(true);\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n        // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n        // sticky states need to be reversed as well.\n        const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n        const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n        // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n        const stickyOffsets = [];\n        const stickyCellHeights = [];\n        const elementsToStick = [];\n        for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n            if (!states[rowIndex]) {\n                continue;\n            }\n            stickyOffsets[rowIndex] = stickyOffset;\n            const row = rows[rowIndex];\n            elementsToStick[rowIndex] = this._isNativeHtmlTable\n                ? Array.from(row.children)\n                : [row];\n            const height = row.getBoundingClientRect().height;\n            stickyOffset += height;\n            stickyCellHeights[rowIndex] = height;\n        }\n        const borderedRowIndex = states.lastIndexOf(true);\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        const tfoot = tableElement.querySelector('tfoot');\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            if (stickyStates.some(state => !state)) {\n                this._removeStickyStyle(tfoot, ['bottom']);\n            }\n            else {\n                this._addStickyStyle(tfoot, 'bottom', 0, false);\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkRecycleRows, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: DataRowOutlet, selector: \"[rowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[rowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[headerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[footerRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{ selector: '[noDataRowOutlet]' }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }]; } });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"></ng-content>\n  <ng-content select=\"colgroup, col\"></ng-content>\n  <ng-container headerRowOutlet></ng-container>\n  <ng-container rowOutlet></ng-container>\n  <ng-container noDataRowOutlet></ng-container>\n  <ng-container footerRowOutlet></ng-container>\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(v) {\n        this._multiTemplateDataRows = coerceBooleanProperty(v);\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(v) {\n        this._fixedLayout = coerceBooleanProperty(v);\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_ngZone` parameter to become required.\n     * @breaking-change 14.0.0\n     */\n    _ngZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        this._ngZone = _ngZone;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        if (!role) {\n            this._elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isNativeHtmlTable = this._elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        if (this._isNativeHtmlTable) {\n            this._applyNativeTableSections();\n        }\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentChecked() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet.viewContainer,\n            this._headerRowOutlet.viewContainer,\n            this._footerRowOutlet.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach(def => {\n            def.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === 1 /* _ViewRepeaterOperation.INSERTED */ && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        // Allow the new row data to render before measuring it.\n        // @breaking-change 14.0.0 Remove undefined check once _ngZone is required.\n        if (this._ngZone && NgZone.isInAngularZone()) {\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._onDestroy)).subscribe(() => {\n                this.updateStickyColumnStyles();\n            });\n        }\n        else {\n            this.updateStickyColumnStyles();\n        }\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const thead = tableElement.querySelector('thead');\n        if (thead) {\n            thead.style.display = headerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        const tableElement = this._elementRef.nativeElement;\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        const tfoot = tableElement.querySelector('tfoot');\n        if (tfoot) {\n            tfoot.style.display = footerRows.length ? '' : 'none';\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            this._rowOutlet.viewContainer.clear();\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /** Adds native table sections (e.g. tbody) and moves the row outlets into them. */\n    _applyNativeTableSections() {\n        const documentFragment = this._document.createDocumentFragment();\n        const sections = [\n            { tag: 'thead', outlets: [this._headerRowOutlet] },\n            { tag: 'tbody', outlets: [this._rowOutlet, this._noDataRowOutlet] },\n            { tag: 'tfoot', outlets: [this._footerRowOutlet] },\n        ];\n        for (const section of sections) {\n            const element = this._document.createElement(section.tag);\n            element.setAttribute('role', 'rowgroup');\n            for (const outlet of section.outlets) {\n                element.appendChild(outlet.elementRef.nativeElement);\n            }\n            documentFragment.appendChild(element);\n        }\n        // Use a DocumentFragment so we don't hit the DOM on each iteration.\n        this._elementRef.nativeElement.appendChild(documentFragment);\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkTable, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: \"multiTemplateDataRows\", fixedLayout: \"fixedLayout\" }, outputs: { contentChanged: \"contentChanged\" }, host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], viewQueries: [{ propertyName: \"_rowOutlet\", first: true, predicate: DataRowOutlet, descendants: true, static: true }, { propertyName: \"_headerRowOutlet\", first: true, predicate: HeaderRowOutlet, descendants: true, static: true }, { propertyName: \"_footerRowOutlet\", first: true, predicate: FooterRowOutlet, descendants: true, static: true }, { propertyName: \"_noDataRowOutlet\", first: true, predicate: NoDataRowOutlet, descendants: true, static: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                        'ngSkipHydration': '',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['role']\n                }] }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                    type: Inject,\n                    args: [_COALESCED_STYLE_SCHEDULER]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [STICKY_POSITIONING_LISTENER]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input\n            }], fixedLayout: [{\n                type: Input\n            }], contentChanged: [{\n                type: Output\n            }], _rowOutlet: [{\n                type: ViewChild,\n                args: [DataRowOutlet, { static: true }]\n            }], _headerRowOutlet: [{\n                type: ViewChild,\n                args: [HeaderRowOutlet, { static: true }]\n            }], _footerRowOutlet: [{\n                type: ViewChild,\n                args: [FooterRowOutlet, { static: true }]\n            }], _noDataRowOutlet: [{\n                type: ViewChild,\n                args: [NoDataRowOutlet, { static: true }]\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkTextColumn, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"sticky\", \"cdkColumnDef\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }], ctorParameters: function () { return [{ type: CdkTable, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TEXT_COLUMN_OPTIONS]\n                }] }]; }, propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTableModule, declarations: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], imports: [ScrollingModule], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    declarations: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/table';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, CDK_TABLE_TEMPLATE, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CDK_ROW_TEMPLATE, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRecycleRows, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-mdc-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        // After ngOnInit, the `CdkTable` has created and inserted the table sections (thead, tbody,\n        // tfoot). MDC requires the `mdc-data-table__content` class to be added to the body. Note that\n        // this only applies to native tables, because we don't wrap the content of flexbox-based ones.\n        if (this._isNativeHtmlTable) {\n            const tbody = this._elementRef.nativeElement.querySelector('tbody');\n            tbody.classList.add('mdc-data-table__content');\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTable, selector: \"mat-table, table[mat-table]\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"></ng-content>\\n  <ng-content select=\\\"colgroup, col\\\"></ng-content>\\n  <ng-container headerRowOutlet></ng-container>\\n  <ng-container rowOutlet></ng-container>\\n  <ng-container noDataRowOutlet></ng-container>\\n  <ng-container footerRowOutlet></ng-container>\\n\", isInline: true, styles: [\".mdc-data-table{border-radius:var(--mdc-shape-medium, 4px);border-width:1px;border-style:solid}.mdc-data-table .mdc-data-table__header-cell:first-child{border-top-left-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table .mdc-data-table__header-cell:first-child,.mdc-data-table .mdc-data-table__header-cell:first-child[dir=rtl]{border-top-right-radius:var(--mdc-shape-medium, 4px);border-top-left-radius:0}.mdc-data-table .mdc-data-table__header-cell:last-child{border-top-right-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table .mdc-data-table__header-cell:last-child,.mdc-data-table .mdc-data-table__header-cell:last-child[dir=rtl]{border-top-left-radius:var(--mdc-shape-medium, 4px);border-top-right-radius:0}.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child{border-bottom-left-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child,.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child[dir=rtl]{border-bottom-right-radius:var(--mdc-shape-medium, 4px);border-bottom-left-radius:0}.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child{border-bottom-right-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child,.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child[dir=rtl]{border-bottom-left-radius:var(--mdc-shape-medium, 4px);border-bottom-right-radius:0}.mdc-data-table__cell,.mdc-data-table__header-cell{border-bottom-width:1px;border-bottom-style:solid}.mdc-data-table__pagination{border-top-width:1px;border-top-style:solid}.mdc-data-table__row:last-child>.mdc-data-table__cell{border-bottom:none}.mdc-data-table__row{height:52px}.mdc-data-table__pagination{min-height:52px}.mdc-data-table__header-row{height:56px}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__cell--checkbox{width:1px}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__header-cell--checkbox{width:1px}.mdc-data-table__sort-icon-button{width:28px;height:28px;padding:2px;transform:rotate(0.0001deg);margin-left:4px;margin-right:0;opacity:0}.mdc-data-table__sort-icon-button .mdc-icon-button__focus-ring{max-height:28px;max-width:28px}.mdc-data-table__sort-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__ripple{width:28px;height:28px;margin-top:0px;margin-bottom:0px;margin-right:0px;margin-left:0px}.mdc-data-table__sort-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__focus-ring{max-height:28px;max-width:28px}.mdc-data-table__sort-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:28px;left:50%;width:28px;transform:translate(-50%, -50%)}[dir=rtl] .mdc-data-table__sort-icon-button,.mdc-data-table__sort-icon-button[dir=rtl]{margin-left:0;margin-right:4px}.mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button{margin-left:0;margin-right:4px}[dir=rtl] .mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button,.mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button[dir=rtl]{margin-left:4px;margin-right:0}.mdc-data-table__header-cell--sorted-descending .mdc-data-table__sort-icon-button{transform:rotate(-180deg)}.mdc-data-table__sort-icon-button:focus,.mdc-data-table__header-cell:hover .mdc-data-table__sort-icon-button,.mdc-data-table__header-cell--sorted .mdc-data-table__sort-icon-button{opacity:1}.mdc-data-table__header-cell--with-sort{cursor:pointer}.mdc-data-table__sort-status-label{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.mdc-data-table--sticky-header .mdc-data-table__header-cell{position:sticky;top:0;z-index:1}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__pagination{box-sizing:border-box;display:flex;justify-content:flex-end}.mdc-data-table__pagination-trailing{margin-left:4px;margin-right:0;align-items:center;display:flex;flex-wrap:wrap;justify-content:flex-end}[dir=rtl] .mdc-data-table__pagination-trailing,.mdc-data-table__pagination-trailing[dir=rtl]{margin-left:0;margin-right:4px}.mdc-data-table__pagination-navigation{align-items:center;display:flex}.mdc-data-table__pagination-button{margin-left:0;margin-right:4px}[dir=rtl] .mdc-data-table__pagination-button .mdc-button__icon,.mdc-data-table__pagination-button .mdc-button__icon[dir=rtl]{transform:rotate(180deg)}[dir=rtl] .mdc-data-table__pagination-button,.mdc-data-table__pagination-button[dir=rtl]{margin-left:4px;margin-right:0}.mdc-data-table__pagination-total{margin-left:14px;margin-right:36px;white-space:nowrap}[dir=rtl] .mdc-data-table__pagination-total,.mdc-data-table__pagination-total[dir=rtl]{margin-left:36px;margin-right:14px}.mdc-data-table__pagination-rows-per-page{margin-left:0;margin-right:22px;align-items:center;display:inline-flex}[dir=rtl] .mdc-data-table__pagination-rows-per-page,.mdc-data-table__pagination-rows-per-page[dir=rtl]{margin-left:22px;margin-right:0}.mdc-data-table__pagination-rows-per-page-label{margin-left:0;margin-right:12px;white-space:nowrap}[dir=rtl] .mdc-data-table__pagination-rows-per-page-label,.mdc-data-table__pagination-rows-per-page-label[dir=rtl]{margin-left:12px;margin-right:0}.mdc-data-table__pagination-rows-per-page-select{min-width:var(--mdc-menu-min-width, 80px);margin:8px 0}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor{width:100%;min-width:80px}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor{height:36px}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-floating-label--float-above{transform:translateY(-27.25px) scale(1)}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-floating-label--float-above{font-size:.75rem}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-24.75px) scale(0.75)}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-data-table__pagination-rows-per-page-select .mdc-select__dropdown-icon{width:20px;height:20px}.mdc-data-table__pagination-rows-per-page-select.mdc-select--outlined .mdc-select__anchor :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 56px)}.mdc-data-table__pagination-rows-per-page-select .mdc-list-item.mdc-list-item--with-one-line{height:36px}.mdc-data-table__progress-indicator{display:none;position:absolute;width:100%}.mdc-data-table--in-progress .mdc-data-table__progress-indicator{display:block}.mdc-data-table__scrim{background-color:var(--mdc-theme-surface, #fff);height:100%;opacity:.32;position:absolute;top:0;width:100%}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table-sticky{position:sticky !important}.mat-mdc-table{table-layout:auto;white-space:normal}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table .mat-mdc-row:hover,.mat-mdc-table .mat-mdc-footer-row:hover{background-color:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: i1.DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: i1.HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: i1.FooterRowOutlet, selector: \"[footerRowOutlet]\" }, { kind: \"directive\", type: i1.NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                        'ngSkipHydration': '',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, styles: [\".mdc-data-table{border-radius:var(--mdc-shape-medium, 4px);border-width:1px;border-style:solid}.mdc-data-table .mdc-data-table__header-cell:first-child{border-top-left-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table .mdc-data-table__header-cell:first-child,.mdc-data-table .mdc-data-table__header-cell:first-child[dir=rtl]{border-top-right-radius:var(--mdc-shape-medium, 4px);border-top-left-radius:0}.mdc-data-table .mdc-data-table__header-cell:last-child{border-top-right-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table .mdc-data-table__header-cell:last-child,.mdc-data-table .mdc-data-table__header-cell:last-child[dir=rtl]{border-top-left-radius:var(--mdc-shape-medium, 4px);border-top-right-radius:0}.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child{border-bottom-left-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child,.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:first-child[dir=rtl]{border-bottom-right-radius:var(--mdc-shape-medium, 4px);border-bottom-left-radius:0}.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child{border-bottom-right-radius:var(--mdc-shape-medium, 4px)}[dir=rtl] .mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child,.mdc-data-table.mdc-data-table--without-footer .mdc-data-table__row:last-child>.mdc-data-table__cell:last-child[dir=rtl]{border-bottom-left-radius:var(--mdc-shape-medium, 4px);border-bottom-right-radius:0}.mdc-data-table__cell,.mdc-data-table__header-cell{border-bottom-width:1px;border-bottom-style:solid}.mdc-data-table__pagination{border-top-width:1px;border-top-style:solid}.mdc-data-table__row:last-child>.mdc-data-table__cell{border-bottom:none}.mdc-data-table__row{height:52px}.mdc-data-table__pagination{min-height:52px}.mdc-data-table__header-row{height:56px}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px 0 16px}.mdc-data-table__header-cell--checkbox,.mdc-data-table__cell--checkbox{padding-left:4px;padding-right:0}[dir=rtl] .mdc-data-table__header-cell--checkbox,[dir=rtl] .mdc-data-table__cell--checkbox,.mdc-data-table__header-cell--checkbox[dir=rtl],.mdc-data-table__cell--checkbox[dir=rtl]{padding-left:0;padding-right:4px}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__cell--checkbox{width:1px}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__header-cell--checkbox{width:1px}.mdc-data-table__sort-icon-button{width:28px;height:28px;padding:2px;transform:rotate(0.0001deg);margin-left:4px;margin-right:0;opacity:0}.mdc-data-table__sort-icon-button .mdc-icon-button__focus-ring{max-height:28px;max-width:28px}.mdc-data-table__sort-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__ripple{width:28px;height:28px;margin-top:0px;margin-bottom:0px;margin-right:0px;margin-left:0px}.mdc-data-table__sort-icon-button.mdc-icon-button--reduced-size .mdc-icon-button__focus-ring{max-height:28px;max-width:28px}.mdc-data-table__sort-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:28px;left:50%;width:28px;transform:translate(-50%, -50%)}[dir=rtl] .mdc-data-table__sort-icon-button,.mdc-data-table__sort-icon-button[dir=rtl]{margin-left:0;margin-right:4px}.mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button{margin-left:0;margin-right:4px}[dir=rtl] .mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button,.mdc-data-table__header-cell--numeric .mdc-data-table__sort-icon-button[dir=rtl]{margin-left:4px;margin-right:0}.mdc-data-table__header-cell--sorted-descending .mdc-data-table__sort-icon-button{transform:rotate(-180deg)}.mdc-data-table__sort-icon-button:focus,.mdc-data-table__header-cell:hover .mdc-data-table__sort-icon-button,.mdc-data-table__header-cell--sorted .mdc-data-table__sort-icon-button{opacity:1}.mdc-data-table__header-cell--with-sort{cursor:pointer}.mdc-data-table__sort-status-label{clip:rect(1px, 1px, 1px, 1px);height:1px;overflow:hidden;position:absolute;white-space:nowrap;width:1px}.mdc-data-table--sticky-header .mdc-data-table__header-cell{position:sticky;top:0;z-index:1}.mdc-data-table{-webkit-overflow-scrolling:touch;display:inline-flex;flex-direction:column;box-sizing:border-box;position:relative}.mdc-data-table__table-container{-webkit-overflow-scrolling:touch;overflow-x:auto;width:100%}.mdc-data-table__table{min-width:100%;border:0;white-space:nowrap;border-spacing:0;table-layout:fixed}.mdc-data-table__header-cell{box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mdc-data-table__header-cell,.mdc-data-table__header-cell[dir=rtl]{text-align:right}.mdc-data-table__header-cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__header-cell--numeric,.mdc-data-table__header-cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__header-cell-wrapper{align-items:center;display:inline-flex;vertical-align:middle}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell,.mdc-data-table__cell[dir=rtl]{text-align:right}.mdc-data-table__cell--numeric{text-align:right}[dir=rtl] .mdc-data-table__cell--numeric,.mdc-data-table__cell--numeric[dir=rtl]{text-align:left}.mdc-data-table__pagination{box-sizing:border-box;display:flex;justify-content:flex-end}.mdc-data-table__pagination-trailing{margin-left:4px;margin-right:0;align-items:center;display:flex;flex-wrap:wrap;justify-content:flex-end}[dir=rtl] .mdc-data-table__pagination-trailing,.mdc-data-table__pagination-trailing[dir=rtl]{margin-left:0;margin-right:4px}.mdc-data-table__pagination-navigation{align-items:center;display:flex}.mdc-data-table__pagination-button{margin-left:0;margin-right:4px}[dir=rtl] .mdc-data-table__pagination-button .mdc-button__icon,.mdc-data-table__pagination-button .mdc-button__icon[dir=rtl]{transform:rotate(180deg)}[dir=rtl] .mdc-data-table__pagination-button,.mdc-data-table__pagination-button[dir=rtl]{margin-left:4px;margin-right:0}.mdc-data-table__pagination-total{margin-left:14px;margin-right:36px;white-space:nowrap}[dir=rtl] .mdc-data-table__pagination-total,.mdc-data-table__pagination-total[dir=rtl]{margin-left:36px;margin-right:14px}.mdc-data-table__pagination-rows-per-page{margin-left:0;margin-right:22px;align-items:center;display:inline-flex}[dir=rtl] .mdc-data-table__pagination-rows-per-page,.mdc-data-table__pagination-rows-per-page[dir=rtl]{margin-left:22px;margin-right:0}.mdc-data-table__pagination-rows-per-page-label{margin-left:0;margin-right:12px;white-space:nowrap}[dir=rtl] .mdc-data-table__pagination-rows-per-page-label,.mdc-data-table__pagination-rows-per-page-label[dir=rtl]{margin-left:12px;margin-right:0}.mdc-data-table__pagination-rows-per-page-select{min-width:var(--mdc-menu-min-width, 80px);margin:8px 0}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor{width:100%;min-width:80px}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor{height:36px}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-floating-label--float-above{transform:translateY(-27.25px) scale(1)}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-floating-label--float-above{font-size:.75rem}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-24.75px) scale(0.75)}.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-data-table__pagination-rows-per-page-select .mdc-select__anchor .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-data-table__pagination-rows-per-page-select .mdc-select__dropdown-icon{width:20px;height:20px}.mdc-data-table__pagination-rows-per-page-select.mdc-select--outlined .mdc-select__anchor :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 56px)}.mdc-data-table__pagination-rows-per-page-select .mdc-list-item.mdc-list-item--with-one-line{height:36px}.mdc-data-table__progress-indicator{display:none;position:absolute;width:100%}.mdc-data-table--in-progress .mdc-data-table__progress-indicator{display:block}.mdc-data-table__scrim{background-color:var(--mdc-theme-surface, #fff);height:100%;opacity:.32;position:absolute;top:0;width:100%}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table-sticky{position:sticky !important}.mat-mdc-table{table-layout:auto;white-space:normal}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table .mat-mdc-row:hover,.mat-mdc-table .mat-mdc-footer-row:hover{background-color:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatCellDef, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterCellDef, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: { sticky: \"sticky\", name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    inputs: ['sticky'],\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterCell, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatCell, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                }]\n        }] });\n\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderRowDef, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: ['columns: matHeaderRowDef', 'sticky: matHeaderRowDefSticky'],\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterRowDef, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\"] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: ['columns: matFooterRowDef', 'sticky: matFooterRowDefSticky'],\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRowDef, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: ['columns: matRowDefColumns', 'when: matRowDefWhen'],\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatHeaderRow, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatFooterRow, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatRow, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: i1.CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatNoDataRow, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatTextColumn, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"sticky\", \"matColumnDef\"] }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, declarations: [\n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], imports: [MatCommonModule, CdkTableModule], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                    declarations: EXPORTED_DECLARATIONS,\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/** Shared base class with MDC-based implementation. */\nclass _MatTableDataSource extends DataSource {\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we\n                // leave them as strings. For more info: https://goo.gl/y5vbSg\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends _MatTableDataSource {\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn, _MatTableDataSource };\n"],"x_google_ignoreList":[4,5]}