{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.2546fda4775e4447.js","mappings":"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","names":["AppDialogConfigService","_class","constructor","http","context","dnnContext","globalConfigService","featuresService","this","dialogSettings$","loadFromService","getShared$","appId","getDialogSettings","pipe","shareReplay","refCount","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","i0","i1","i2","i3","i4","i5","factory","ɵfac","ExportAppPartsService","getContentInfo","scope","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","delete","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","export","getPolymorphism","getUsage","guid","EntityFilterComponent","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","viewQuery","rf","ctx","$event","_r3","ctx_r2","deleteItem","ctx_r1","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","clone","onClone","onExport","onDelete","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","_r0","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_span_1_Template","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","For","Target","TargetType","Number","String","Guid","Title","onOpenMetadata","ContentItemsStatusComponent_div_4_Template","ContentItemsStatusComponent_div_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r23","targetType","label","vm_r1","formValues","CreateMetadataDialogComponent_ng_container_0_mat_select_15_mat_option_1_Template","CreateMetadataDialogComponent_ng_container_0_mat_select_15_mat_option_2_Template","targetTypeOptions","unknownTargetType","targetTypeHint","option_r27","contentType_r29","StaticName","Label","CreateMetadataDialogComponent_ng_container_0_mat_form_field_27_mat_option_4_Template","contentTypes","scopeOption_r32","name","CreateMetadataDialogComponent_ng_container_0_mat_form_field_28_mat_option_4_Template","scopeOptions","ctx_r11","dropdownInsertValue","item_r40","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_mat_select_1_mat_option_1_Template","contentItems","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_mat_select_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_input_2_Template","guidedKey","contentType_r46","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_mat_select_1_mat_option_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_mat_select_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_input_2_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_3_ng_container_1_Template","_r15","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_3_Template","ctx_r14","entity","CreateMetadataDialogComponent_ng_container_0_ng_template_39_input_0_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_39_input_1_Template","ctx_r16","_r55","ctx_r54","toggleGuidedKey","ctx_r56","CreateMetadataDialogComponent_ng_container_0_mat_select_15_Template","CreateMetadataDialogComponent_ng_container_0_input_16_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_17_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_18_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_19_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_20_Template","CreateMetadataDialogComponent_ng_container_0_mat_option_25_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_26_Template","CreateMetadataDialogComponent_ng_container_0_mat_form_field_27_Template","CreateMetadataDialogComponent_ng_container_0_mat_form_field_28_Template","CreateMetadataDialogComponent_ng_container_0_ng_container_36_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_39_Template","CreateMetadataDialogComponent_ng_container_0_div_41_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_42_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_43_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_44_Template","_r59","ctx_r58","toggleGuidedMode","ctx_r60","closeDialog","ctx_r61","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","_r13","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseSubsinkComponent","dialogRef","contentItemsService","contentTypesService","super","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscription","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","GeneralHelpers","objectsEqual","combineLatest","foundTargetType","find","arraysEqual","updatedForm","isAppMetadata","app","keys","disableControl","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","retrieveContentTypes","getScopes","hostVars","hostBindings","CreateMetadataDialogComponent_ng_container_0_Template","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r6","ctx_r5","debugFilter","_r8","ctx_r7","ContentItemsComponent_div_0_div_9_Template","ctx_r9","onGridReady","ctx_r10","filesDropped","exportContent","ctx_r12","importContent","ctx_r13","importItem","createMetadata","ContentItemsComponent_div_0_button_34_Template","ctx_r15","editItem","Name","Properties","ListInstructions","gridOptions","debugEnabled","ContentItemsComponent","BaseComponent","router","route","entitiesService","contentExportService","snackBar","dialog","viewContainerRef","changeDetectorRef","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosedShallow","getDebugEnabled$","retrieveContentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","autoFocus","width","afterClosed","itemFor","string","markForCheck","warn","duration","headerClass","sortable","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","flex","minWidth","onCellClicked","headerTooltip","_Used","_Uses","pinned","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","i6","i7","i8","features","ContentItemsComponent_div_0_Template","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","refreshOnChildClosedDeep","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","FieldHintComponent_mat_hint_1_ng_container_1_Template","_r2","FieldHintComponent_mat_error_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c1","FieldHintComponent_mat_hint_1_Template","FieldHintComponent_mat_error_2_Template","FieldHintComponent_ng_template_3_Template","align","tooltip","copy","copyToClipboard","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","ClickStopPropagationDirective","onClick","stopPropagation","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/constants/guid.constants.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId?: number) {\r\n    appId ??= this.context.appId;\r\n    if (!this.dialogSettings$[appId])\r\n      this.dialogSettings$[appId] = this.getDialogSettings(appId).pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions are killed\r\n  }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n      tap(dialogSettings => {\r\n        this.globalConfigService.allowDebug(dialogSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone(): void {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export(): void {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem(): void {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple *ngIf=\"!disableMetadata\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button disabled\" *ngIf=\"disableMetadata && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item,\r\n        see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Target</mat-label>\r\n\r\n          <mat-select *ngIf=\"vm.guidedMode\" formControlName=\"targetType\" required>\r\n            <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n              {{ option.label }}\r\n            </mat-option>\r\n            <mat-option *ngIf=\"vm.unknownTargetType\" [value]=\"vm.formValues.targetType\">\r\n              {{ vm.formValues.targetType }}\r\n            </mat-option>\r\n          </mat-select>\r\n\r\n          <input matInput type=\"number\" min=\"0\" *ngIf=\"!vm.guidedMode\" formControlName=\"targetType\" required>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint\r\n          *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType\"\r\n          [isError]=\"false\">\r\n          Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n          doing\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"vm.targetTypeHint\" [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n          [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n          [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key type</mat-label>\r\n\r\n          <mat-select formControlName=\"keyType\" required>\r\n            <mat-option *ngFor=\"let option of vm.keyTypeOptions\" [value]=\"option\">\r\n              {{ option }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n          [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n\r\n        <!-- Content Type for Content Items -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n          *ngIf=\"vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n          <mat-label>Content Type</mat-label>\r\n\r\n          <mat-select formControlName=\"contentTypeForContentItems\"\r\n            [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let contentType of vm.contentTypes\" [value]=\"contentType.StaticName\">\r\n              {{ contentType.Label }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <!-- Scope for Content Types -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n          *ngIf=\"vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType || vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n          <mat-label>Scope</mat-label>\r\n\r\n          <mat-select formControlName=\"scopeForContentTypes\"\r\n            [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of vm.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key</mat-label>\r\n\r\n          <ng-container *ngIf=\"vm.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n          </ng-container>\r\n\r\n          <ng-template #specialKeyInputs>\r\n            <ng-container [ngSwitch]=\"vm.formValues.targetType\">\r\n              <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n                <mat-select *ngIf=\"vm.guidedKey\" formControlName=\"key\" required\r\n                  [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                  <mat-option *ngFor=\"let item of vm.contentItems\" [value]=\"item.Guid\">\r\n                    {{ item.Title }} ({{ item.Id }})\r\n                  </mat-option>\r\n                </mat-select>\r\n\r\n                <input matInput type=\"text\" *ngIf=\"!vm.guidedKey\" formControlName=\"key\" required>\r\n              </ng-container>\r\n\r\n              <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n                <mat-select *ngIf=\"vm.guidedKey\" formControlName=\"key\" required\r\n                  [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                  <mat-option *ngFor=\"let contentType of vm.contentTypes\" [value]=\"contentType.StaticName\">\r\n                    {{ contentType.Label }}\r\n                  </mat-option>\r\n                </mat-select>\r\n\r\n                <input matInput type=\"text\" *ngIf=\"!vm.guidedKey\" formControlName=\"key\" required>\r\n              </ng-container>\r\n\r\n              <ng-container *ngSwitchDefault>\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n          </ng-template>\r\n\r\n          <ng-template #defaultKeyInput>\r\n            <input matInput type=\"text\" *ngIf=\"vm.formValues.keyType !== eavConstants.keyTypes.number\"\r\n              formControlName=\"key\" required>\r\n            <input matInput type=\"number\" *ngIf=\"vm.formValues.keyType === eavConstants.keyTypes.number\"\r\n              formControlName=\"key\" required>\r\n          </ng-template>\r\n\r\n          <div matTextSuffix class=\"eav-selection-suffix\" *ngIf=\"vm.guidedMode && vm.guidedKeyExists\">\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\"\r\n              (click)=\"toggleGuidedKey(true)\">\r\n              <mat-icon class=\"eav-icon\">search</mat-icon>\r\n            </button>\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\"\r\n              (click)=\"toggleGuidedKey(false)\">\r\n              <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n            </button>\r\n          </div>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n          [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\"\r\n          [isError]=\"true\">\r\n          Must be a valid GUID\r\n        </app-field-hint>\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith, Subscription } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\" *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div *ngIf=\"vm.contentType?.Properties?.ListInstructions as listInstructions\" [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"vm.debugEnabled\" (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n    \r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subject, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$, this.globalConfigService.getDebugEnabled$()\r\n    ]).pipe(\r\n      map(([contentType, items, debugEnabled]) => ({ contentType, items, debugEnabled }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID',\r\n        field: 'Id',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        sortable: true,\r\n        filter: 'agNumberColumnFilter',\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem.Id;\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem._Title;\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        width: 122,\r\n        pinned: 'right',\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            onClone: (item) => this.clone(item),\r\n            onExport: (item) => this.export(item),\r\n            onDelete: (item) => this.delete(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n  debugEnabled: boolean;\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n  \r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  protected refreshOnChildClosedDeep() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}