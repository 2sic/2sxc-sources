{"version":3,"file":"default-projects_eav-ui_src_app_app-administration_app-admin-helpers_ts-projects_eav-ui_src_a-463e21.68ac1b081f48e8e1.js","mappings":"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","names":["AppAdminHelpers","getLightSpeedEditParams","appId","items","ContentTypeName","eavConstants","appMetadata","LightSpeed","For","Target","metadata","app","target","TargetType","targetType","Number","Singleton","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","i0","_r6","ctx_r5","openDialog","vm_r3","feature","icon","FeatureTextInfoComponent_ng_container_0_div_1_Template","show","FeatureTextInfoComponent","_class","FeatureComponentBase","asInfo","value","this","asInfo$","next","constructor","dialog","viewContainerRef","featuresService","changeDetectorRef","super","BehaviorSubject","viewModel$","combineLatest","feature$","show$","pipe","map","i1","i2","selectors","inputs","features","decls","vars","consts","template","rf","ctx","FeatureTextInfoComponent_ng_container_0_Template","FeatureTextInfoComponent_ng_template_2_Template","_r1","id_r4","ngIf","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_mat_card_0_div_15_Template","FeatureInfoDialogComponent_mat_card_0_button_17_Template","_r11","ctx_r10","closeDialog","vm_r1","Name","Description","IsEnabled","NameId","Link","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","getFeatureDetails","text","open","duration","link","window","close","MAT_DIALOG_DATA","i3","FeatureInfoDialogComponent_mat_card_0_Template","featureNameId","featureNameId$","showIf","showIf$","switchMap","featName","get$","feat","featureId","autoFocus","data","width","markForCheck","BooleanFilterComponent","filter","agInit","params","filterParams","isFilterActive","doesFilterPass","valueGetter","api","colDef","column","columnApi","context","node","getValue","field","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","$event","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","hostBindings"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/app-admin-helpers.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts"],"sourcesContent":["import { eavConstants } from '../shared/constants/eav.constants';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\n\r\nexport class AppAdminHelpers {\r\n  public static getLightSpeedEditParams(appId: number) {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          ContentTypeName: eavConstants.appMetadata.LightSpeed.ContentTypeName,\r\n          For: {\r\n            Target: eavConstants.metadata.app.target,\r\n            TargetType: eavConstants.metadata.app.targetType,\r\n            Number: appId,\r\n            Singleton: true,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    return form;\r\n  }\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","<ng-container *ngIf=\"viewModel$ | async as vm; else loading\">\r\n  <div class=\"feature-text-info\" *ngIf=\"vm.show\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n    <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","<mat-card *ngIf=\"viewModel$ | async as vm\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"eav-info-row__label\">ID:</div>\r\n      <div class=\"eav-info-row__value eav_click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button color=\"accent\"\r\n      class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}