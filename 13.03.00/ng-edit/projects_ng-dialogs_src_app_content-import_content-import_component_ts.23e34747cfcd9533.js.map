{"version":3,"mappings":"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","names":["i0","_r8","ctx_r11","ctx_r14","ctx_r15","ctx_r29","ctx_r31","ctx_r38","ctx_r42","ContentImportComponent","dialogData","dialogRef","route","contentImportService","appDialogConfigService","contentTypesService","this","BehaviorSubject","waiting","default","evaluated","imported","viewStates","combineLatest","contentType$","loading$","viewStateSelected$","evaluationResult$","importResult$","pipe","map","contentType","s","loading","viewStateSelected","evaluationResult","importResult","snapshot","paramMap","get","next","retrieveContentType","contentTypeStaticName","dialogSettings$","getDialogSettings","forkJoin","subscribe","dialogSettings","c","o","formValues","defaultLanguage","Context","Language","Primary","file","files","resourcesReferences","clearEntities","complete","close","evaluateContent","result","importContent","event","target","i","MAT_DIALOG_DATA","selectors"],"sources":["./projects/ng-dialogs/src/app/content-import/content-import.component.html","./projects/ng-dialogs/src/app/content-import/content-import.component.ts"],"sourcesContent":["<div class=\"dialog-form-wrapper\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.contentType?.Name }} Import Data</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n    importing, and that you created the import-file using the template provided by the Export. Please visit\r\n    <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n  </p>\r\n\r\n  <ng-container *ngIf=\"formValues != null\">\r\n    <ng-container [ngSwitch]=\"data.viewStateSelected\">\r\n\r\n      <!-- FORM -->\r\n      <form #ngForm=\"ngForm\" class=\"dialog-form\" *ngSwitchCase=\"1\">\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n              <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n            </button>\r\n            <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">References to pages / files</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\">\r\n              <mat-radio-button value=\"Keep\">\r\n                Import links as written in the file (for example /Portals/...)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">\r\n                Try to resolve paths to references\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">Clear all other entities</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n              <mat-radio-button value=\"None\">\r\n                Keep all entities not found in import\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"All\">\r\n                Remove all entities not found in import\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <p class=\"hint\">Remember to backup your DNN first!</p>\r\n        </div>\r\n\r\n        <div class=\"dialog-form-actions\">\r\n          <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n          <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n            (click)=\"evaluateContent()\">\r\n            Preview Import\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <!-- END FORM -->\r\n\r\n      <!-- WAITING -->\r\n      <p *ngSwitchCase=\"0\" class=\"progress-message\">Please wait while processing...</p>\r\n      <!-- END WAITING -->\r\n\r\n      <!-- EVALUATION RESULT -->\r\n      <ng-container *ngSwitchCase=\"2\">\r\n        <ng-container *ngIf=\"data.evaluationResult\">\r\n          <!-- DETAILS / STATISTICS -->\r\n          <div *ngIf=\"data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <p class=\"evaluation__title\">File contains:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>{{ data.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n              <li>{{ data.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n              <li>{{ data.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"evaluation__title\">If you press Import, it will:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>Create {{ data.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n              <li>Update {{ data.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n              <li>Delete {{ data.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n              <li>Ignore {{ data.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"hint\">Note: The import validates much data and may take several minutes.</p>\r\n          </div>\r\n          <!-- END DETAILS / STATISTICS -->\r\n          <!-- ERRORS -->\r\n          <div *ngIf=\"!data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li *ngFor=\"let error of data.evaluationResult.Errors\">\r\n                <div>{{ errors[error.ErrorCode] }}</div>\r\n                <div *ngIf=\"error.ErrorDetail\"><i>Details: {{ error.ErrorDetail }}</i></div>\r\n                <div *ngIf=\"error.LineNumber\"><i>Line-no: {{ error.LineNumber }}</i></div>\r\n                <div *ngIf=\"error.LineDetail\"><i>Line-details: {{ error.LineDetail }}</i></div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <!-- END ERRORS -->\r\n          <div class=\"dialog-component-actions\">\r\n            <button mat-raised-button (click)=\"back()\">Back</button>\r\n            <button mat-raised-button color=\"accent\" [disabled]=\"!data.evaluationResult.Success\"\r\n              (click)=\"importContent()\">\r\n              Import\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <!-- END EVALUATION RESULT -->\r\n\r\n      <!-- IMPORT RESULT -->\r\n      <div *ngSwitchCase=\"3\">\r\n        <div *ngIf=\"data.importResult\" class=\"progress-message\">\r\n          <p *ngIf=\"data.importResult.Success\">Import done.</p>\r\n          <p *ngIf=\"!data.importResult.Success\">Import failed.</p>\r\n        </div>\r\n        <div class=\"dialog-component-actions\">\r\n          <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n        </div>\r\n      </div>\r\n      <!-- END IMPORT RESULT -->\r\n    </ng-container>\r\n  </ng-container>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  templateVars$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-import_content-import_component_ts.23e34747cfcd9533.js"}