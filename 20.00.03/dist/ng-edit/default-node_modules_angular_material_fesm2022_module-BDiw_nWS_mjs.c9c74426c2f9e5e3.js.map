{"version":3,"file":"default-node_modules_angular_material_fesm2022_module-BDiw_nWS_mjs.c9c74426c2f9e5e3.js","mappings":"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","names":["SelectionModel","_multiple","_emitChanges","compareWith","_selection","Set","_deselectedToEmit","_selectedToEmit","_selected","selected","this","Array","from","values","changed","Subject","constructor","initiallySelectedValues","length","forEach","value","_markSelected","select","_verifyValueAssignment","_hasQueuedChanges","_emitChangeEvent","deselect","_unmarkSelected","setSelection","oldValues","newSelectedSet","map","_getConcreteValue","filter","has","toggle","isSelected","clear","flushEvent","_unmarkAll","isEmpty","size","hasValue","sort","predicate","isMultipleSelection","next","source","added","removed","add","push","delete","inputValue","selection","selectedValue","_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","i0","ctx_r1","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","customTrigger","MatSelect_ng_template_10_Template","_r3","$event","_handleKeydown","_getPanelTheme","_animationsDisabled","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","providedIn","factory","injector","inject","Injector","createRepositionScrollStrategy","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","_overlay","MAT_SELECT_TRIGGER","MatSelectChange","MatSelect","_viewportRuler","ViewportRuler","_changeDetectorRef","ChangeDetectorRef","_elementRef","ElementRef","_dir","Directionality","optional","_idGenerator","_IdGenerator","_renderer","Renderer2","_parentFormField","MAT_FORM_FIELD","ngControl","NgControl","self","_liveAnnouncer","LiveAnnouncer","_defaultOptions","_initialized","_cleanupDetach","options","optionGroups","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","toArray","panel","nativeElement","labelCount","_countGroupLabelsBeforeOption","element","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","getId","_triggerAriaLabelledBy","_previousControl","_destroy","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","trigger","_overlayDir","disabled","disableRipple","_disableRipple","set","signal","tabIndex","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","required","_required","control","hasValidator","Validators","disableOptionCentering","fn","_initializeSelection","_value","newValue","_assignValue","ariaLabelledby","errorStateMatcher","matcher","typeaheadDebounceInterval","sortComparator","_id","errorState","panelWidth","canSelectNullableOptions","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","onSelectionChange","openedChange","EventEmitter","_openedStream","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","ErrorStateMatcher","parentForm","NgForm","parentFormGroup","FormGroupDirective","HostAttributeToken","valueAccessor","_ErrorStateTracker","parseInt","ngOnInit","change","takeUntil","subscribe","panelOpen","_getOverlayWidth","detectChanges","ngAfterContentInit","complete","_initKeyManager","event","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","updateErrorState","ngOnChanges","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","positionChange","take","attachOverlay","withHorizontalOrientation","_highlightCorrectOption","markForCheck","Promise","resolve","then","emit","_trackedModal","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_exitAndDetach","_isRtl","_detachOverlay","cleanupEvent","clearTimeout","exitFallbackTimer","listen","animationName","setTimeout","classList","detachOverlay","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_handleOverlayKeydown","ESCAPE","_onFocus","_onBlur","cancelTypeahead","color","_setSelectionByValue","setInactiveStyles","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","_skipPredicate","preferredOrigin","CdkOverlayOrigin","elementRef","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","a","b","indexOf","fallbackValue","valueToEmit","firstEnabledOptionIndex","get","labelId","getLabelId","_getAriaActiveDescendant","describedByIds","getAttribute","split","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","static","__ngFactoryType__","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","first","viewQuery","CdkConnectedOverlay","hostAttrs","hostVars","hostBindings","toString","inputs","booleanAttribute","numberAttribute","outputs","exportAs","features","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r1","fallbackOverlayOrigin_r4","dependencies","NgClass","styles","encapsulation","changeDetection","MatSelectTrigger","MatSelectModule","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/selection-model-BCgC8uEN.mjs","./node_modules/@angular/material/fesm2022/module-BDiw_nWS.mjs"],"sourcesContent":["import { Subject } from 'rxjs';\n\n/**\n * Class to be used to power selecting one or more options from a list.\n */\nclass SelectionModel {\n    _multiple;\n    _emitChanges;\n    compareWith;\n    /** Currently-selected values. */\n    _selection = new Set();\n    /** Keeps track of the deselected options that haven't been emitted by the change event. */\n    _deselectedToEmit = [];\n    /** Keeps track of the selected options that haven't been emitted by the change event. */\n    _selectedToEmit = [];\n    /** Cache for the array value of the selected items. */\n    _selected;\n    /** Selected values. */\n    get selected() {\n        if (!this._selected) {\n            this._selected = Array.from(this._selection.values());\n        }\n        return this._selected;\n    }\n    /** Event emitted when the value has changed. */\n    changed = new Subject();\n    constructor(_multiple = false, initiallySelectedValues, _emitChanges = true, compareWith) {\n        this._multiple = _multiple;\n        this._emitChanges = _emitChanges;\n        this.compareWith = compareWith;\n        if (initiallySelectedValues && initiallySelectedValues.length) {\n            if (_multiple) {\n                initiallySelectedValues.forEach(value => this._markSelected(value));\n            }\n            else {\n                this._markSelected(initiallySelectedValues[0]);\n            }\n            // Clear the array in order to avoid firing the change event for preselected values.\n            this._selectedToEmit.length = 0;\n        }\n    }\n    /**\n     * Selects a value or an array of values.\n     * @param values The values to select\n     * @return Whether the selection changed as a result of this call\n     */\n    select(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._markSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Deselects a value or an array of values.\n     * @param values The values to deselect\n     * @return Whether the selection changed as a result of this call\n     */\n    deselect(...values) {\n        this._verifyValueAssignment(values);\n        values.forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Sets the selected values\n     * @param values The new selected values\n     * @return Whether the selection changed as a result of this call\n     */\n    setSelection(...values) {\n        this._verifyValueAssignment(values);\n        const oldValues = this.selected;\n        const newSelectedSet = new Set(values.map(value => this._getConcreteValue(value)));\n        values.forEach(value => this._markSelected(value));\n        oldValues\n            .filter(value => !newSelectedSet.has(this._getConcreteValue(value, newSelectedSet)))\n            .forEach(value => this._unmarkSelected(value));\n        const changed = this._hasQueuedChanges();\n        this._emitChangeEvent();\n        return changed;\n    }\n    /**\n     * Toggles a value between selected and deselected.\n     * @param value The value to toggle\n     * @return Whether the selection changed as a result of this call\n     */\n    toggle(value) {\n        return this.isSelected(value) ? this.deselect(value) : this.select(value);\n    }\n    /**\n     * Clears all of the selected values.\n     * @param flushEvent Whether to flush the changes in an event.\n     *   If false, the changes to the selection will be flushed along with the next event.\n     * @return Whether the selection changed as a result of this call\n     */\n    clear(flushEvent = true) {\n        this._unmarkAll();\n        const changed = this._hasQueuedChanges();\n        if (flushEvent) {\n            this._emitChangeEvent();\n        }\n        return changed;\n    }\n    /**\n     * Determines whether a value is selected.\n     */\n    isSelected(value) {\n        return this._selection.has(this._getConcreteValue(value));\n    }\n    /**\n     * Determines whether the model does not have a value.\n     */\n    isEmpty() {\n        return this._selection.size === 0;\n    }\n    /**\n     * Determines whether the model has a value.\n     */\n    hasValue() {\n        return !this.isEmpty();\n    }\n    /**\n     * Sorts the selected values based on a predicate function.\n     */\n    sort(predicate) {\n        if (this._multiple && this.selected) {\n            this._selected.sort(predicate);\n        }\n    }\n    /**\n     * Gets whether multiple values can be selected.\n     */\n    isMultipleSelection() {\n        return this._multiple;\n    }\n    /** Emits a change event and clears the records of selected and deselected values. */\n    _emitChangeEvent() {\n        // Clear the selected values so they can be re-cached.\n        this._selected = null;\n        if (this._selectedToEmit.length || this._deselectedToEmit.length) {\n            this.changed.next({\n                source: this,\n                added: this._selectedToEmit,\n                removed: this._deselectedToEmit,\n            });\n            this._deselectedToEmit = [];\n            this._selectedToEmit = [];\n        }\n    }\n    /** Selects a value. */\n    _markSelected(value) {\n        value = this._getConcreteValue(value);\n        if (!this.isSelected(value)) {\n            if (!this._multiple) {\n                this._unmarkAll();\n            }\n            if (!this.isSelected(value)) {\n                this._selection.add(value);\n            }\n            if (this._emitChanges) {\n                this._selectedToEmit.push(value);\n            }\n        }\n    }\n    /** Deselects a value. */\n    _unmarkSelected(value) {\n        value = this._getConcreteValue(value);\n        if (this.isSelected(value)) {\n            this._selection.delete(value);\n            if (this._emitChanges) {\n                this._deselectedToEmit.push(value);\n            }\n        }\n    }\n    /** Clears out the selected values. */\n    _unmarkAll() {\n        if (!this.isEmpty()) {\n            this._selection.forEach(value => this._unmarkSelected(value));\n        }\n    }\n    /**\n     * Verifies the value assignment and throws an error if the specified value array is\n     * including multiple values while the selection model is not supporting multiple values.\n     */\n    _verifyValueAssignment(values) {\n        if (values.length > 1 && !this._multiple && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMultipleValuesInSingleSelectionError();\n        }\n    }\n    /** Whether there are queued up change to be emitted. */\n    _hasQueuedChanges() {\n        return !!(this._deselectedToEmit.length || this._selectedToEmit.length);\n    }\n    /** Returns a value that is comparable to inputValue by applying compareWith function, returns the same inputValue otherwise. */\n    _getConcreteValue(inputValue, selection) {\n        if (!this.compareWith) {\n            return inputValue;\n        }\n        else {\n            selection = selection ?? this._selection;\n            for (let selectedValue of selection) {\n                if (this.compareWith(inputValue, selectedValue)) {\n                    return selectedValue;\n                }\n            }\n            return inputValue;\n        }\n    }\n}\n/**\n * Returns an error that reports that multiple values are passed into a selection model\n * with a single value.\n * @docs-private\n */\nfunction getMultipleValuesInSingleSelectionError() {\n    return Error('Cannot pass multiple values into SelectionModel with single-value mode.');\n}\n\nexport { SelectionModel as S, getMultipleValuesInSingleSelectionError as g };\n","import { createRepositionScrollStrategy, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, Injector, ChangeDetectorRef, ElementRef, Renderer2, signal, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, ENTER, SPACE, A, ESCAPE, DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, takeUntil, take } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { h as MAT_FORM_FIELD, k as MatFormFieldControl } from './form-field-C9DZXojn.mjs';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition, c as MAT_OPTION_PARENT_COMPONENT, M as MatOption, d as MAT_OPTGROUP } from './option-BzhYL_xC.mjs';\nimport { E as ErrorStateMatcher } from './error-options-DCNQlTOA.mjs';\nimport { _ as _ErrorStateTracker } from './error-state-Dtb1IHM-.mjs';\nimport { M as MatOptionModule } from './index-DwiL-HGk.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport { M as MatFormFieldModule } from './module-DzZHEh7B.mjs';\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return () => createRepositionScrollStrategy(injector);\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(_overlay) {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    source;\n    value;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _renderer = inject(Renderer2);\n    _parentFormField = inject(MAT_FORM_FIELD, { optional: true });\n    ngControl = inject(NgControl, { self: true, optional: true });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, { optional: true });\n    _animationsDisabled = _animationsDisabled();\n    _initialized = new Subject();\n    _cleanupDetach;\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top',\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n    ];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => { };\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    get disableRipple() {\n        return this._disableRipple();\n    }\n    set disableRipple(value) {\n        this._disableRipple.set(value);\n    }\n    _disableRipple = signal(false);\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n        ? this._defaultOptions.panelWidth\n        : 'auto';\n    /**\n     * By default selecting an option with a `null` or `undefined` value will reset the select's\n     * value. Enable this option if the reset behavior doesn't match your requirements and instead\n     * the nullable options should become selected. The value of this input can be controlled app-wide\n     * using the `MAT_SELECT_CONFIG` injection token.\n     */\n    canSelectNullableOptions = this._defaultOptions?.canSelectNullableOptions ?? false;\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._cleanupDetach?.();\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._cleanupDetach?.();\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n        this._overlayDir.attachOverlay();\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n        // Simulate the animation event before we moved away from `@angular/animations`.\n        Promise.resolve().then(() => this.openedChange.emit(true));\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._exitAndDetach();\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n            // Simulate the animation event before we moved away from `@angular/animations`.\n            Promise.resolve().then(() => this.openedChange.emit(false));\n        }\n    }\n    /** Triggers the exit animation and detaches the overlay at the end. */\n    _exitAndDetach() {\n        if (this._animationsDisabled || !this.panel) {\n            this._detachOverlay();\n            return;\n        }\n        this._cleanupDetach?.();\n        this._cleanupDetach = () => {\n            cleanupEvent();\n            clearTimeout(exitFallbackTimer);\n            this._cleanupDetach = undefined;\n        };\n        const panel = this.panel.nativeElement;\n        const cleanupEvent = this._renderer.listen(panel, 'animationend', (event) => {\n            if (event.animationName === '_mat-select-exit') {\n                this._cleanupDetach?.();\n                this._detachOverlay();\n            }\n        });\n        // Since closing the overlay depends on the animation, we have a fallback in case the panel\n        // doesn't animate. This can happen in some internal tests that do `* {animation: none}`.\n        const exitFallbackTimer = setTimeout(() => {\n            this._cleanupDetach?.();\n            this._detachOverlay();\n        }, 200);\n        panel.classList.add('mat-select-panel-exit');\n    }\n    /** Detaches the current overlay directive. */\n    _detachOverlay() {\n        this._overlayDir.detachOverlay();\n        // Some of the overlay detachment logic depends on change detection.\n        // Mark for check to ensure that things get picked up in a timely manner.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /** Handles keyboard events coming from the overlay. */\n    _handleOverlayKeydown(event) {\n        // TODO(crisbeto): prior to #30363 this was being handled inside the overlay directive, but we\n        // need control over the animation timing so we do it manually. We should remove the `keydown`\n        // listener from `.mat-mdc-select-panel` and handle all the events here. That may cause\n        // further test breakages so it's left for a follow-up.\n        if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n            this.close();\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return ((option.value != null || this.canSelectNullableOptions) &&\n                    this._compareWith(option.value, value));\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = (option) => {\n        if (this.panelOpen) {\n            // Support keyboard focusing disabled options in an ARIA listbox.\n            return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0 && !!this._overlayDir;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId() || null;\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        let value = this._parentFormField?.getLabelId() || '';\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        // The value should not be used for the trigger's aria-labelledby,\n        // but this currently \"breaks\" accessibility tests since they complain\n        // there is no aria-labelledby. This is because they are not setting an\n        // appropriate label on the form field or select.\n        // TODO: remove this conditional after fixing clients by ensuring their\n        // selects have a label applied.\n        if (!value) {\n            value = this._valueId;\n        }\n        return value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get describedByIds() {\n        const element = this._elementRef.nativeElement;\n        const existingDescribedBy = element.getAttribute('aria-describedby');\n        return existingDescribedBy?.split(' ') || [];\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelect, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"20.0.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\", canSelectNullableOptions: [\"canSelectNullableOptions\", \"canSelectNullableOptions\", booleanAttribute] }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  [cdkConnectedOverlayFlexibleDimensions]=\\\"true\\\"\\n  (detach)=\\\"close()\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:relative;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\\n\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  [cdkConnectedOverlayFlexibleDimensions]=\\\"true\\\"\\n  (detach)=\\\"close()\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:relative;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], canSelectNullableOptions: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectModule, imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\nexport { MatSelectModule as M, MAT_SELECT_SCROLL_STRATEGY as a, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY as b, MAT_SELECT_CONFIG as c, MAT_SELECT_SCROLL_STRATEGY_PROVIDER as d, MAT_SELECT_TRIGGER as e, MatSelectChange as f, MatSelect as g, MatSelectTrigger as h };\n"],"x_google_ignoreList":[0,1]}