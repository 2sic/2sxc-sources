{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.b33dd42011d7ea24.js","mappings":"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","names":["AppDialogConfigService","constructor","http","context","dnnContext","globalConfigService","featuresService","this","dialogSettings$","loadFromService","getShared$","appId","getDialogSettings","pipe","shareReplay","refCount","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","i5","_angular_core__WEBPACK_IMPORTED_MODULE_5__","Yz7","factory","ɵfac","ExportAppPartsService","getContentInfo","scope","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","delete","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","EntityFilterComponent","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","core","Xpm","selectors","viewQuery","rf","ctx","$event","_r3","ctx_r2","deleteItem","ctx_r1","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","clone","onClone","onExport","onDelete","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","_r0","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_span_1_Template","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","For","Target","TargetType","Number","String","Guid","Title","onOpenMetadata","ContentItemsStatusComponent_div_4_Template","ContentItemsStatusComponent_div_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r23","targetType","label","vm_r1","formValues","CreateMetadataDialogComponent_ng_container_0_mat_select_15_mat_option_1_Template","CreateMetadataDialogComponent_ng_container_0_mat_select_15_mat_option_2_Template","targetTypeOptions","unknownTargetType","targetTypeHint","option_r27","contentType_r29","StaticName","Label","CreateMetadataDialogComponent_ng_container_0_mat_form_field_27_mat_option_4_Template","contentTypes","scopeOption_r32","name","CreateMetadataDialogComponent_ng_container_0_mat_form_field_28_mat_option_4_Template","scopeOptions","ctx_r11","dropdownInsertValue","item_r40","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_mat_select_1_mat_option_1_Template","contentItems","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_mat_select_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_input_2_Template","guidedKey","contentType_r46","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_mat_select_1_mat_option_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_mat_select_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_input_2_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_3_ng_container_1_Template","_r16","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_1_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_2_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_ng_container_3_Template","ctx_r13","entity","CreateMetadataDialogComponent_ng_container_0_ng_template_39_input_0_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_39_input_1_Template","ctx_r15","_r55","ctx_r54","toggleGuidedKey","ctx_r56","CreateMetadataDialogComponent_ng_container_0_mat_select_15_Template","CreateMetadataDialogComponent_ng_container_0_input_16_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_17_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_18_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_19_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_20_Template","CreateMetadataDialogComponent_ng_container_0_mat_option_25_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_26_Template","CreateMetadataDialogComponent_ng_container_0_mat_form_field_27_Template","CreateMetadataDialogComponent_ng_container_0_mat_form_field_28_Template","CreateMetadataDialogComponent_ng_container_0_ng_container_36_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_37_Template","CreateMetadataDialogComponent_ng_container_0_ng_template_39_Template","CreateMetadataDialogComponent_ng_container_0_div_41_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_42_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_43_Template","CreateMetadataDialogComponent_ng_container_0_app_field_hint_44_Template","_r59","ctx_r58","toggleGuidedMode","ctx_r60","closeDialog","ctx_r61","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","_r14","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseSubsinkComponent","dialogRef","contentItemsService","contentTypesService","super","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscription","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","GeneralHelpers","objectsEqual","combineLatest","foundTargetType","find","arraysEqual","updatedForm","isAppMetadata","app","keys","disableControl","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","retrieveContentTypes","getScopes","hostVars","hostBindings","CreateMetadataDialogComponent_ng_container_0_Template","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r6","ctx_r5","debugFilter","_r8","ctx_r7","ContentItemsComponent_div_0_div_9_Template","ctx_r9","onGridReady","ctx_r10","filesDropped","exportContent","ctx_r12","importContent","importItem","ctx_r14","createMetadata","ContentItemsComponent_div_0_button_34_Template","editItem","Name","Properties","ListInstructions","gridOptions","debugEnabled","ContentItemsComponent","BaseComponent","router","route","entitiesService","contentExportService","snackBar","dialog","viewContainerRef","changeDetectorRef","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosedShallow","getDebugEnabled$","retrieveContentType","getColumns","columns","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","autoFocus","width","afterClosed","itemFor","string","markForCheck","warn","duration","headerClass","sortable","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","flex","minWidth","onCellClicked","headerTooltip","_Used","_Uses","pinned","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","i6","i7","i8","features","ContentItemsComponent_div_0_Template","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","refreshOnChildClosedDeep","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","lG2","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FieldHintComponent_mat_hint_1_ng_container_1_Template","FieldHintComponent_mat_error_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c1","FieldHintComponent_mat_hint_1_Template","FieldHintComponent_mat_error_2_Template","FieldHintComponent_ng_template_3_Template","align","tooltip","copy","copyToClipboard","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","ClickStopPropagationDirective","onClick","stopPropagation","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/base-component/base.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId?: number) {\r\n    appId ??= this.context.appId;\r\n    if (!this.dialogSettings$[appId])\r\n      this.dialogSettings$[appId] = this.getDialogSettings(appId).pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions are killed\r\n  }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n      tap(dialogSettings => {\r\n        this.globalConfigService.allowDebug(dialogSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone(): void {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export(): void {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem(): void {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple *ngIf=\"!disableMetadata\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button disabled\" *ngIf=\"disableMetadata && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item,\r\n        see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Target</mat-label>\r\n\r\n          <mat-select *ngIf=\"vm.guidedMode\" formControlName=\"targetType\" required>\r\n            <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n              {{ option.label }}\r\n            </mat-option>\r\n            <mat-option *ngIf=\"vm.unknownTargetType\" [value]=\"vm.formValues.targetType\">\r\n              {{ vm.formValues.targetType }}\r\n            </mat-option>\r\n          </mat-select>\r\n\r\n          <input matInput type=\"number\" min=\"0\" *ngIf=\"!vm.guidedMode\" formControlName=\"targetType\" required>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint\r\n          *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType\"\r\n          [isError]=\"false\">\r\n          Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n          doing\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"vm.targetTypeHint\" [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n          [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n          [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key type</mat-label>\r\n\r\n          <mat-select formControlName=\"keyType\" required>\r\n            <mat-option *ngFor=\"let option of vm.keyTypeOptions\" [value]=\"option\">\r\n              {{ option }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n          [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n\r\n        <!-- Content Type for Content Items -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n          *ngIf=\"vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n          <mat-label>Content Type</mat-label>\r\n\r\n          <mat-select formControlName=\"contentTypeForContentItems\"\r\n            [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let contentType of vm.contentTypes\" [value]=\"contentType.StaticName\">\r\n              {{ contentType.Label }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <!-- Scope for Content Types -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n          *ngIf=\"vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType || vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n          <mat-label>Scope</mat-label>\r\n\r\n          <mat-select formControlName=\"scopeForContentTypes\"\r\n            [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of vm.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key</mat-label>\r\n\r\n          <ng-container *ngIf=\"vm.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n          </ng-container>\r\n\r\n          <ng-template #specialKeyInputs>\r\n            <ng-container [ngSwitch]=\"vm.formValues.targetType\">\r\n              <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n                <mat-select *ngIf=\"vm.guidedKey\" formControlName=\"key\" required\r\n                  [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                  <mat-option *ngFor=\"let item of vm.contentItems\" [value]=\"item.Guid\">\r\n                    {{ item.Title }} ({{ item.Id }})\r\n                  </mat-option>\r\n                </mat-select>\r\n\r\n                <input matInput type=\"text\" *ngIf=\"!vm.guidedKey\" formControlName=\"key\" required>\r\n              </ng-container>\r\n\r\n              <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n                <mat-select *ngIf=\"vm.guidedKey\" formControlName=\"key\" required\r\n                  [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                  <mat-option *ngFor=\"let contentType of vm.contentTypes\" [value]=\"contentType.StaticName\">\r\n                    {{ contentType.Label }}\r\n                  </mat-option>\r\n                </mat-select>\r\n\r\n                <input matInput type=\"text\" *ngIf=\"!vm.guidedKey\" formControlName=\"key\" required>\r\n              </ng-container>\r\n\r\n              <ng-container *ngSwitchDefault>\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              </ng-container>\r\n            </ng-container>\r\n          </ng-template>\r\n\r\n          <ng-template #defaultKeyInput>\r\n            <input matInput type=\"text\" *ngIf=\"vm.formValues.keyType !== eavConstants.keyTypes.number\"\r\n              formControlName=\"key\" required>\r\n            <input matInput type=\"number\" *ngIf=\"vm.formValues.keyType === eavConstants.keyTypes.number\"\r\n              formControlName=\"key\" required>\r\n          </ng-template>\r\n\r\n          <div matTextSuffix class=\"eav-selection-suffix\" *ngIf=\"vm.guidedMode && vm.guidedKeyExists\">\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\"\r\n              (click)=\"toggleGuidedKey(true)\">\r\n              <mat-icon class=\"eav-icon\">search</mat-icon>\r\n            </button>\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\"\r\n              (click)=\"toggleGuidedKey(false)\">\r\n              <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n            </button>\r\n          </div>\r\n        </mat-form-field>\r\n\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n          [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n        <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\"\r\n          [isError]=\"true\">\r\n          Must be a valid GUID\r\n        </app-field-hint>\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith, Subscription } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\" *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div *ngIf=\"vm.contentType?.Properties?.ListInstructions as listInstructions\" [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"vm.debugEnabled\" (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n    \r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subject, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$, this.globalConfigService.getDebugEnabled$()\r\n    ]).pipe(\r\n      map(([contentType, items, debugEnabled]) => ({ contentType, items, debugEnabled }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID',\r\n        field: 'Id',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        sortable: true,\r\n        filter: 'agNumberColumnFilter',\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem.Id;\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem._Title;\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        width: 122,\r\n        pinned: 'right',\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            onClone: (item) => this.clone(item),\r\n            onExport: (item) => this.export(item),\r\n            onDelete: (item) => this.delete(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n  debugEnabled: boolean;\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseComponent extends BaseSubsinkComponent implements OnDestroy {\r\n  \r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  protected refreshOnChildClosedDeep() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n\r\n  protected refreshOnChildClosedShallow() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}