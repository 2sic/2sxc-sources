{"version":3,"file":"default-projects_eav-ui_src_app_shared_components_file-upload-dialog_index_ts.5d4f5cd12d5014f2.js","mappings":"sYAMIA,MAAA,0CAIIA,MAAA,SAA8BA,MAAA,yBAAmBA,kCACjDA,MAAA,SAAmCA,MAAA,GAAeA,kCAAfA,MAAA,GAAAA,MAAAC,EAAAC,+CAGrCF,MAAA,eAC2BA,MAAA,mBAAAA,MAAAG,GAAA,MAAAC,EAAAJ,MAAA,UAASA,MAAAI,EAAAC,iBAAgB,GAClDL,MAAA,yCACFA,+BAIAA,MAAA,YACEA,MAAA,sEACFA,+BACAA,MAAA,YACEA,MAAA,mEACFA,6HACAA,MAAA,YAKEA,MAAA,GACFA,6CANoEA,MAAA,UAAAA,MAAA,EAAAM,EAAAC,EAAAC,cAAAC,EAAAC,uBAAAC,QAAAJ,EAAAC,cAAAC,EAAAC,uBAAAE,QAAAL,EAAAC,cAAAC,EAAAC,uBAAAG,QAKlEb,MAAA,GAAAA,MAAA,IAAAO,EAAAO,KAAA,+BAZJd,MAAA,YACEA,MAAA,EAAAe,EAAA,aAAAf,CAEM,EAAAgB,EAAA,aAFNhB,CAEM,EAAAiB,EAAA,cAWRjB,mCAbQA,MAAA,GAAAA,MAAA,OAAAkB,EAAAC,OAAAP,SAGAZ,MAAA,GAAAA,MAAA,QAAAkB,EAAAC,OAAAP,SAGmBZ,MAAA,GAAAA,MAAA,UAAAkB,EAAAC,OAAAC,gCAQ3BpB,MAAA,0DAKAA,MAAA,GACEA,MAAA,eAA0BA,MAAA,mBAAAA,MAAAqB,GAAA,MAAAC,EAAAtB,MAAA,UAASA,MAAAsB,EAAAC,cAAa,GAAEvB,MAAA,YAAMA,QACxDA,MAAA,eACEA,MAAA,mBAAAA,MAAAqB,GAAA,MAAAG,EAAAxB,MAAA,UAASA,MAAAwB,EAAAC,SAAQ,GACjBzB,MAAA,cACFA,QACFA,sCAJ2CA,MAAA,GAAAA,MAAA,YAAAkB,EAAAQ,MAAAC,QAAAT,EAAAU,aAAAV,EAAAC,iDAK3CnB,MAAA,GACEA,MAAA,eAAyCA,MAAA,mBAAAA,MAAA6B,GAAA,MAAAC,EAAA9B,MAAA,UAASA,MAAA8B,EAAAP,aAAY,GAAK,GAAEvB,MAAA,WAAKA,QAC5EA,kCAVFA,MAAA,2BACEA,MAAA,EAAA+B,EAAA,qBAAA/B,CAMe,EAAAgC,EAAA,sBAIjBhC,mCAViBA,MAAA,GAAAA,MAAA,eAAAkB,EAAAC,QAAAD,EAAAC,OAAAP,UAOAZ,MAAA,GAAAA,MAAA,aAAAkB,EAAAC,OAAA,KAAAD,EAAAC,OAAAP,kDA/CnBZ,MAAA,WACmDA,MAAA,wBAAAiC,GAAAjC,MAAAkC,GAAA,MAAAC,EAAAnC,QAAA,OAAgBA,MAAAmC,EAAAC,aAAAH,GAAoB,GACrFjC,MAAA,WACEA,MAAA,+BACFA,QACAA,MAAA,WACEA,MAAA,EAAAqC,EAAA,qBACArC,MAAA,6BACAA,MAAA,QAAAA,CAAK,cAC2EA,MAAA,mBAAAA,MAAAkC,GAAA,MAAAI,EAAAtC,MAAA,WAASA,MAAAsC,EAAAC,QAAiB,GACtGvC,MAAA,GAAAwC,EAAA,YAAAxC,CAAuD,GAAAyC,EAAA,aAEzDzC,QACAA,MAAA,kBAAuCA,MAAA,kBAAAiC,GAAAjC,MAAAkC,GAAA,MAAAQ,EAAA1C,QAAA,OAAUA,MAAA0C,EAAAC,aAAAV,GAAoB,GAArEjC,QACAA,MAAA,GAAA4C,EAAA,iBAIF5C,QAEAA,MAAA,GAAA6C,EAAA,aAAA7C,CAcM,GAAA8C,EAAA,iBAIR9C,QACAA,MAAA,GAAA+C,EAAA,6BAYF/C,yCAlDEA,MAAA,mBAAAgD,EAAAC,WAAAC,kBAEwClD,MAAA,GAAAA,MAAA,YAAAA,MAAA,KAAAgD,EAAAC,WAAAE,OAAAnD,OAGxBA,MAAA,GAAAA,MAAA,OAAAkB,EAAAU,WACX5B,MAAA,GAAAA,MAAA,YAAAA,MAAA,KAAAgD,EAAAC,WAAAG,aAAApD,OAEmDA,MAAA,GAAAA,MAAA,WAAAkB,EAAAU,WAC5C5B,MAAA,GAAAA,MAAA,QAAAkB,EAAAQ,MAAAC,QACgB3B,MAAA,GAAAA,MAAA,UAAAkB,EAAAQ,OAGG1B,MAAA,GAAAA,MAAA,OAAAgD,EAAAK,YAAAL,EAAAM,YAAAC,KAMMvD,MAAA,GAAAA,MAAA,OAAAkB,EAAAC,QAe1BnB,MAAA,GAAAA,MAAA,OAAAgD,EAAAK,YAAAL,EAAAM,YAAAC,KAAArC,EAAAb,gBAIsBL,MAAA,GAAAA,MAAA,QAAAkB,EAAAb,iBC3B5B,IAAMmD,EAA0B,MAAjC,MAAOA,UAAkCC,IAiB7CC,YACkCT,EACxBU,EACAC,GAERC,QAJgCC,KAAAb,aACxBa,KAAAH,YACAG,KAAAF,WAnBgBE,KAAAC,UAAY,mBAMtCD,KAAAE,WAAa,IAAIC,KAAyB,GAC1CH,KAAAI,OAAS,IAAID,IAAwB,IACrCH,KAAAK,QAAU,IAAIF,SAAkCG,GAChDN,KAAApD,uBAAyBA,IACzBoD,KAAAR,YAAcA,IACdQ,KAAAO,gBAAkB,IAAIJ,KAAyB,EAW/C,CAwBAK,WACER,KAAKS,aAAaC,IAChBV,KAAKI,OAAOO,UAAU,UACOL,IAAvBN,KAAKK,QAAQO,OACfZ,KAAKK,QAAQQ,UAAKP,EAAS,IAKJ,MAAzBN,KAAKb,WAAWvB,OAClBoC,KAAK1B,aAAa0B,KAAKb,WAAWvB,OAGpCoC,KAAKc,cAAaC,KAAc,CAC9Bf,KAAKE,WAAYF,KAAKI,OAAQJ,KAAKK,QAASL,KAAKO,kBAChDS,QAAKC,KAAI,EAAEnD,EAAWF,EAAOP,EAAQd,MAAc,CAASuB,YAAWF,QAAOP,SAAQd,oBAY3F,CAEA2E,cACElB,KAAKE,WAAWiB,WAChBnB,KAAKI,OAAOe,WACZnB,KAAKK,QAAQc,WACbpB,MAAMmB,aACR,CAEAzD,YAAY2D,GACVpB,KAAKH,UAAUwB,MAAMD,EACvB,CAEA9C,aAAaV,GACXoC,KAAKsB,SAAS1D,GACdoC,KAAKrC,QACP,CAEAkB,aAAa0C,GACX,MACM3D,EAAQ4D,MAAMC,KADFF,EAAMG,OAA4B9D,OAEpDoC,KAAKsB,SAAS1D,EAChB,CAEAD,SACEqC,KAAKE,WAAWW,MAAK,GACrBb,KAAKS,aAAaC,IAChBV,KAAKb,WAAWwC,QAAQ3B,KAAKI,OAAOQ,OAAOI,QAAKY,KAAK,IAAIjB,UAAU,CACjEE,KAAOxD,IACL2C,KAAKE,WAAWW,MAAK,GACrBb,KAAKK,QAAQQ,KAAKxD,EAAM,EAE1BwE,MAAOA,KACL7B,KAAKE,WAAWW,MAAK,GACrBb,KAAKK,QAAQQ,UAAKP,GAClBN,KAAKF,SAASgC,KAAK,gEAA4DxB,EAAW,CAAEyB,SAAU,KAAM,IAIpH,CAEAxF,iBACEyD,KAAKO,gBAAgBM,MAAMb,KAAKO,gBAAgBK,MAClD,CAEQU,SAAS1D,GACVoC,KAAKb,WAAW6C,WACnBpE,EAAQA,EAAMqE,MAAM,EAAG,IAEzBjC,KAAKI,OAAOS,KAAKjD,EACnB,CAACsE,SAAAlC,KAAA,mBAAAmC,iBA5HUzC,GAAyBxD,MAkB1BkG,MAAelG,MAAAmG,MAAAnG,MAAAoG,MAAA,EAAAJ,SAAAlC,KAAA,UAAAuC,EAAAC,IAAA,MAlBd9C,EAAyB+C,UAAA,6BAAAC,UAAA,SAAAC,EAAAC,MAAA,EAAAD,quEDZtCzG,MAAA,EAAA2G,EAAA,sCAAyB3G,MAAA,OAAAA,MAAA,IAAA0G,EAAA9B,qTCYZpB,CAA0B,8CCShC,MAAM9C,EAAyB,CACpCC,QAAS,EACTC,QAAS,EACTC,MAAO,GAKIyC,EAAc,CACzBC,IAAK,EACLqD,QAAS,EACTC,YAAa,EACbC,YAAa,EACbC,MAAO,EACPC,KAAM,kKC7BD,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BxD,IAYxCC,YAAYwD,EAAgCC,EAAsBvD,GAChEC,QAD0CC,KAAAqD,OAAsBrD,KAAAF,WAXzDE,KAAAsD,UAA2C,UAE3CtD,KAAAZ,iBAAmB,GACVY,KAAA1B,aAAe,IAAIiF,MAG7BvD,KAAAwD,cAAgB,eAEhBxD,KAAAyD,UAAY,eACZzD,KAAA0D,SAAqB,GAI3B1D,KAAK2D,QAAUP,EAAWQ,aAC5B,CAEApD,WACER,KAAK6D,eAAiB,gBAAgB7D,KAAKsD,YAC3CtD,KAAK2D,QAAQG,UAAUpD,IAAIV,KAAKwD,cAAexD,KAAK6D,gBACpD7D,KAAKqD,KAAKU,kBAAkB,KAC1B/D,KAAKS,aAAaC,OAChBsD,KAAqBhE,KAAK2D,QAAS,YAAYhD,UAAUY,IACvDA,EAAM0C,iBACN1C,EAAM2C,kBACNlE,KAAKmE,gBACLnE,KAAK2D,QAAQG,UAAUpD,IAAIV,KAAKyD,UAAS,IAG7CzD,KAAKS,aAAaC,OAChBsD,KAAqBhE,KAAK2D,QAAS,aAAahD,UAAUY,IACxDA,EAAM0C,iBACN1C,EAAM2C,kBACNlE,KAAK0D,SAASU,KACZC,OAAOC,WAAW,KAAQtE,KAAK2D,QAAQG,UAAUS,OAAOvE,KAAKyD,UAAS,EAAM,IAAG,GAEjF,EAGR,CAEAvC,cACElB,KAAKmE,gBACLnE,KAAK2D,QAAQG,UAAUS,OAAOvE,KAAKwD,cAAexD,KAAK6D,eAAgB7D,KAAKyD,WAC5E1D,MAAMmB,aACR,CAGAsD,OAAOjD,GACLA,EAAM0C,iBACN1C,EAAM2C,kBACNlE,KAAKmE,gBACLnE,KAAK2D,QAAQG,UAAUS,OAAOvE,KAAKyD,WAEnC,IAAI7F,EAAQ4D,MAAMC,KADDF,EAAMkD,aAAa7G,OAEpCA,EAAQoC,KAAK0E,YAAY9G,EAAOoC,KAAKZ,kBACjCxB,EAAMC,OAAS,GACjBmC,KAAK1B,aAAaqG,KAAK/G,EAE3B,CAEQuG,gBACN,UAAWS,KAAW5E,KAAK0D,SACzBmB,aAAaD,GAEf5E,KAAK0D,SAAW,EAClB,CAEQgB,YAAY9G,EAAewB,GACjC,GAAyB,KAArBA,EAA2B,OAAOxB,EAEtC,MAAMkH,EAAe1F,EAAiB2F,MAAM,KAAK9D,IAAI+D,GAAQA,EAAKC,qBAC5DC,EAAWtH,EAAMuH,OAAOC,IAC5B,MAAMC,EAAWD,EAAKhJ,KAAKkJ,YAAY,KACvC,GAAID,GAAY,EAAK,OAAO,EAC5B,MAAME,EAAMH,EAAKhJ,KAAKoJ,UAAUH,EAAW,GAAGJ,oBAE9C,OADgBH,EAAaW,SAASF,EAAG,GAI3C,GAAI3H,EAAMC,SAAWqH,EAASrH,OAAQ,CACpC,MAAM6H,EAAqB1F,KAAKZ,iBAAiBuG,QAAQ,MAAO,MAIhE3F,KAAKF,SAASgC,KAHEoD,EAASrH,OACrB,6EAA+E6H,EAC/E,+CAAiDA,EACzB,KAAM,CAAE3D,SAAU,MAEhD,OAAOmD,CACT,CAAChD,SAAAlC,KAAA,mBAAAmC,iBAxFUgB,GAAoBjH,gCAAAmG,MAAA,EAAAH,SAAAlC,KAAA,UAAAuC,EAAAqD,IAAA,MAApBzC,EAAoBV,UAAA,2BAAAoD,aAAA,SAAAlD,EAAAC,GAAA,EAAAD,mCAApBC,EAAA4B,OAAArG,EAAc,uIAAdgF,CAAqB,8DCF3B,IAAM2C,EAAY,MAAnB,MAAOA,EAEXlG,YAAoBmG,GAAA/F,KAAA+F,WAA2B,CAE/CC,UAAUC,GACR,OAAOjG,KAAK+F,UAAUG,wBAAwBD,EAChD,CAAC/D,SAAAlC,KAAA,mBAAAmC,iBANU2D,GAAY5J,MAAAmG,KAAA,MAAAH,SAAAlC,KAAA,WAAAmG,EAAAC,IAAA,sBAAZN,EAAYO,MAAA,WAAZP,CAAY","names":["i0","file_r10","name","_r12","ctx_r11","showAppCatalog","_c1","message_r16","MessageType","ctx_r15","FileUploadMessageTypes","Warning","Success","Error","Text","FileUploadDialogComponent_div_0_div_15_div_1_Template","FileUploadDialogComponent_div_0_div_15_div_2_Template","FileUploadDialogComponent_div_0_div_15_div_3_Template","vm_r1","result","Messages","_r22","ctx_r21","closeDialog","ctx_r23","upload","files","length","uploading","_r26","ctx_r25","FileUploadDialogComponent_div_0_mat_dialog_actions_17_ng_container_1_Template","FileUploadDialogComponent_div_0_mat_dialog_actions_17_ng_container_2_Template","$event","_r29","ctx_r28","filesDropped","FileUploadDialogComponent_div_0_mat_spinner_5_Template","_r5","click","FileUploadDialogComponent_div_0_div_10_Template","FileUploadDialogComponent_div_0_div_11_Template","ctx_r31","filesChanged","FileUploadDialogComponent_div_0_button_14_Template","FileUploadDialogComponent_div_0_div_15_Template","FileUploadDialogComponent_div_0_iframe_16_Template","FileUploadDialogComponent_div_0_mat_dialog_actions_17_Template","ctx_r0","dialogData","allowedFileTypes","title","description","uploadType","UploadTypes","App","FileUploadDialogComponent","BaseSubsinkComponent","constructor","dialogRef","snackBar","super","this","hostClass","uploading$","BehaviorSubject","files$","result$","undefined","showAppCatalog$","ngOnInit","subscription","add","subscribe","value","next","viewModel$","combineLatest","pipe","map","ngOnDestroy","complete","refresh","close","setFiles","event","Array","from","target","upload$","take","error","open","duration","multiple","slice","static","t","MAT_DIALOG_DATA","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_1__","Xpm","selectors","viewQuery","rf","ctx","FileUploadDialogComponent_div_0_Template","AppPart","ContentType","ContentItem","Query","View","DragAndDropDirective","elementRef","zone","markStyle","EventEmitter","dropAreaClass","dragClass","timeouts","element","nativeElement","markStyleClass","classList","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","file","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","lG2","hostBindings","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","_angular_core__WEBPACK_IMPORTED_MODULE_0__","Yjl","pure"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.html","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.models.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["<div class=\"eav-dialog\" *ngIf=\"viewModel$ | async as vm\" appDragAndDrop \r\n  [allowedFileTypes]=\"dialogData.allowedFileTypes\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\" [innerHtml]=\"dialogData.title | safeHtml\"></div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <mat-spinner *ngIf=\"vm.uploading\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n    <p [innerHtml]=\"dialogData.description | safeHtml\"></p>\r\n    <div>\r\n      <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"vm.uploading\" (click)=\"fileInput.click()\">\r\n        <div *ngIf=\"!vm.files.length\">Select or drop file</div>\r\n        <div *ngFor=\"let file of vm.files\">{{ file.name }}</div>\r\n      </button>\r\n      <input #fileInput type=\"file\" multiple (change)=\"filesChanged($event)\" class=\"hide\" />\r\n      <button mat-raised-button *ngIf=\"uploadType == UploadTypes.App\" class=\"eav-app-catalog-button\"\r\n        tippy=\"Open app catalog\" (click)=\"showAppCatalog()\"><!-- [disabled]=\"vm.uploading\" -->\r\n        Get recommended Apps from Catalog\r\n      </button>\r\n    </div>\r\n    \r\n    <div class=\"eav-result-container\" *ngIf=\"vm.result\">\r\n      <div *ngIf=\"vm.result.Success\" class=\"sxc-message sxc-message-info\">\r\n        Upload succeeded. See the messages below for more information.\r\n      </div>\r\n      <div *ngIf=\"!vm.result.Success\" class=\"sxc-message sxc-message-error\">\r\n        Upload failed. See the messages below for more information.\r\n      </div>\r\n      <div *ngFor=\"let message of vm.result.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n              'sxc-message-warning': message.MessageType === FileUploadMessageTypes.Warning,\r\n              'sxc-message-success': message.MessageType === FileUploadMessageTypes.Success,\r\n              'sxc-message-error': message.MessageType === FileUploadMessageTypes.Error\r\n            }\">\r\n        {{ message.Text }}\r\n      </div>\r\n    </div>\r\n    <iframe *ngIf=\"uploadType == UploadTypes.App && vm.showAppCatalog\" #installerWindow class=\"eav-app-catalog-iframe\" \r\n      src=\"//gettingstarted.2sxc.org/router.aspx?Platform=Dnn&amp;SysVersion=9.6.1&amp;SxcVersion=16.07.01&amp;destination=autoconfigureapp&amp;ModuleId=1197&amp;SiteId=16&amp;ZoneID=17&amp;DefaultLanguage=en-us&amp;CurrentLanguage=en-us&amp;SysGuid=DB92DBFC-0C60-4101-93C6-803C2FE244B6&amp;AppId=&amp;fp=c2b7fabe7d51a0a0f6484d72bc119c8bf2d14b8ad29b30696a9148f9845a766c\">\r\n    </iframe>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\" *ngIf=\"!vm.showAppCatalog\">\r\n    <ng-container *ngIf=\"!vm.result?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!vm.files.length || vm.uploading || !!vm.result\"\r\n        (click)=\"upload()\">\r\n        Upload\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"vm.result?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog(true)\">Close</button>\r\n    </ng-container>\r\n  </mat-dialog-actions>\r\n</div>","import { Component, ElementRef, HostBinding, Inject, Input, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable, Subscription, combineLatest, filter, fromEvent, map, take } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\nimport { FileUploadDialogData, FileUploadMessageTypes, FileUploadResult, UploadTypes } from './file-upload-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-file-upload-dialog',\r\n  templateUrl: './file-upload-dialog.component.html',\r\n  styleUrls: ['./file-upload-dialog.component.scss'],\r\n})\r\nexport class FileUploadDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  @Input() uploadType: UploadTypes;\r\n\r\n  @ViewChild('installerWindow') installerWindow: ElementRef;\r\n\r\n  uploading$ = new BehaviorSubject<boolean>(false);\r\n  files$ = new BehaviorSubject<File[]>([]);\r\n  result$ = new BehaviorSubject<FileUploadResult>(undefined);\r\n  FileUploadMessageTypes = FileUploadMessageTypes;\r\n  UploadTypes = UploadTypes;\r\n  showAppCatalog$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FileUploadDialogViewModel>;\r\n\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FileUploadDialogData,\r\n    private dialogRef: MatDialogRef<FileUploadDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { \r\n    super();\r\n  }\r\n\r\n  // private alreadyProcessing = false;\r\n\r\n  // // Initial Observable to monitor messages\r\n  // private messages$ = fromEvent(window, 'message').pipe(\r\n\r\n  //   // Ensure only one installation is processed.\r\n  //   filter(() => !this.alreadyProcessing),\r\n\r\n  //   // Get data from event.\r\n  //   map((evt: MessageEvent) => {\r\n  //     try {\r\n  //       return JSON.parse(evt.data) as CrossWindowMessage;\r\n  //     } catch (e) {\r\n  //       console.error('error procesing message. Message was ' + evt.data, e);\r\n  //       return void 0;\r\n  //     }\r\n  //   }),\r\n\r\n  //   // Check if data is valid and the moduleID matches\r\n  //   filter(data => data && Number(data.moduleId) === Config.moduleId()),\r\n  // );\r\n\r\n  ngOnInit(): void {\r\n    this.subscription.add(\r\n      this.files$.subscribe(() => {\r\n        if (this.result$.value !== undefined) {\r\n          this.result$.next(undefined);\r\n        }\r\n      }),\r\n    );\r\n\r\n    if (this.dialogData.files != null) {\r\n      this.filesDropped(this.dialogData.files);\r\n    }\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.uploading$, this.files$, this.result$, this.showAppCatalog$,\r\n    ]).pipe(map(([uploading, files, result, showAppCatalog]) => ({ uploading, files, result, showAppCatalog })));\r\n\r\n    // const winFrame = this.installerWindow.nativeElement as HTMLIFrameElement;\r\n    // const specsMsg: SpecsForInstaller = {\r\n    //   action: 'specs',\r\n    //   data: {\r\n    //     installedApps: this.settings.installedApps,\r\n    //     rules: this.settings.rules,\r\n    //   },\r\n    // };\r\n    // const specsJson = JSON.stringify(specsMsg);\r\n    // winFrame.contentWindow.postMessage(specsJson, '*');\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.uploading$.complete();\r\n    this.files$.complete();\r\n    this.result$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(refresh?: boolean): void {\r\n    this.dialogRef.close(refresh);\r\n  }\r\n\r\n  filesDropped(files: File[]): void {\r\n    this.setFiles(files);\r\n    this.upload();\r\n  }\r\n\r\n  filesChanged(event: Event): void {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = Array.from(fileList);\r\n    this.setFiles(files);\r\n  }\r\n\r\n  upload(): void {\r\n    this.uploading$.next(true);\r\n    this.subscription.add(\r\n      this.dialogData.upload$(this.files$.value).pipe(take(1)).subscribe({\r\n        next: (result) => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(result);\r\n        },\r\n        error: () => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(undefined);\r\n          this.snackBar.open('Upload failed. Please check console for more information', undefined, { duration: 3000 });\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  showAppCatalog(): void { \r\n    this.showAppCatalog$.next(!this.showAppCatalog$.value);\r\n  }\r\n\r\n  private setFiles(files: File[]): void {\r\n    if (!this.dialogData.multiple) {\r\n      files = files.slice(0, 1);\r\n    }\r\n    this.files$.next(files);\r\n  }\r\n}\r\n\r\ninterface FileUploadDialogViewModel {\r\n  uploading: boolean;\r\n  files: File[];\r\n  result: FileUploadResult;\r\n  showAppCatalog: boolean;\r\n}\r\n\r\ninterface SpecsForInstaller {\r\n  action: 'specs';\r\n  data: InstallSpecs;\r\n}\r\n\r\ninterface InstallSpecs {\r\n  installedApps?: InstalledApp[];\r\n  rules?: InstallRule[];\r\n}\r\n\r\ninterface InstalledApp {\r\n  name: string;\r\n  version: string;\r\n  guid: string;\r\n}\r\n\r\ninterface InstallRule {\r\n  target: string;\r\n  mode: string;\r\n  appGuid: string;\r\n  url: string;\r\n}\r\n\r\ninterface CrossWindowMessage {\r\n  action: string;\r\n  moduleId: string | number; // probably string, must safely convert to Number()\r\n  packages: InstallPackage[];\r\n}\r\n\r\ninterface InstallPackage {\r\n  displayName: string;\r\n  url: string;\r\n}","import { Observable } from 'rxjs';\r\n\r\nexport interface FileUploadDialogData {\r\n  title?: string;\r\n  description?: string;\r\n  allowedFileTypes?: string;\r\n  files?: File[];\r\n  multiple?: boolean;\r\n  upload$?(files: File[]): Observable<FileUploadResult>;\r\n}\r\n\r\nexport interface FileUploadResult {\r\n  Messages: FileUploadResultMessage[];\r\n  Success: boolean;\r\n}\r\n\r\nexport interface FileUploadResultMessage {\r\n  MessageType: FileUploadMessageType;\r\n  Text: string;\r\n}\r\n\r\nexport const FileUploadMessageTypes = {\r\n  Warning: 0,\r\n  Success: 1,\r\n  Error: 2,\r\n} as const;\r\n\r\nexport type FileUploadMessageType = typeof FileUploadMessageTypes[keyof typeof FileUploadMessageTypes];\r\n\r\nexport const UploadTypes = {\r\n  App: 0,\r\n  AppPart: 1,\r\n  ContentType: 2,\r\n  ContentItem: 3,\r\n  Query: 4,\r\n  View: 5,\r\n} as const;\r\n\r\nexport type UploadTypes = typeof UploadTypes[keyof typeof UploadTypes];\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../components/base-subsink-component/base-subsink.component';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}