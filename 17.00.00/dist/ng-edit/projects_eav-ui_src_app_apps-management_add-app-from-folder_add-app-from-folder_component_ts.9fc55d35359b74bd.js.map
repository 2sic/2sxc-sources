{"version":3,"file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.9fc55d35359b74bd.js","mappings":"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","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","static","t","core","Xpm","selectors","decls","vars","consts","template","rf","ctx","i0","CheckboxCellComponent","onChange","event","currentTarget","checked","$event","isDisabled","vm_r1","pendingApps","ctx_r3","gridOptions","AddAppFromFolderComponent_ng_container_0_p_9_Template","AddAppFromFolderComponent_ng_container_0_div_10_Template","_r6","ctx_r5","closeDialog","ctx_r7","install","length","ctx_r0","installing","AddAppFromFolderComponent","BaseSubsinkComponent","constructor","dialogRef","appsListService","snackBar","featuresService","super","hostClass","buildGridOptions","refreshApps$","Subject","isAddFromFolderEnabled$","BehaviorSubject","ngOnInit","subscription","add","isEnabled$","FeatureNames","AppSyncWithSiteFiles","pipe","distinctUntilChanged","subscribe","viewModel$","combineLatest","startWith","undefined","switchMap","getPendingApps","catchError","of","share","map","ngOnDestroy","complete","close","app","enabled","push","splice","indexOf","open","duration","installPendingApps","error","next","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","flex","sort","filter","pendingApp","ServerFolder","Folder","Version","Description","i1","i2","i3","i4","hostVars","hostBindings","AddAppFromFolderComponent_ng_container_0_Template","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","openDialog","vm_r3","feature","icon","FeatureTextInfoComponent_ng_container_0_div_1_Template","show","FeatureTextInfoComponent","FeatureComponentBase","asInfo","asInfo$","dialog","viewContainerRef","changeDetectorRef","feature$","show$","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","features","FeatureTextInfoComponent_ng_container_0_Template","FeatureTextInfoComponent_ng_template_2_Template","_r2","id_r4","ngIf","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_mat_card_0_div_15_Template","FeatureInfoDialogComponent_mat_card_0_button_17_Template","_r11","ctx_r10","Name","IsEnabled","NameId","Link","FeatureInfoDialogComponent","dialogData","featureDetailService","getFeatureDetails","text","link","window","MAT_DIALOG_DATA","FeatureInfoDialogComponent_mat_card_0_Template","featureNameId","featureNameId$","showIf","showIf$","featName","get$","feat","featureId","autoFocus","markForCheck","lG2","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [disabled]=\"params.isDisabled\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Add App from Folder</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <app-feature-text-info [featureNameId]=\"'AppSyncWithSiteFiles'\"></app-feature-text-info>\r\n      <p>\r\n        Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n      </p>\r\n      <p *ngIf=\"vm.pendingApps?.length == 0\">\r\n        Nothing to show. All apps in the 2sxc folder are already installed.\r\n      </p>\r\n      <div *ngIf=\"vm.pendingApps?.length > 0\">\r\n        <ag-grid-angular class=\"ag-theme-material eav-grid\" [rowData]=\"vm.pendingApps\"\r\n          [gridOptions]=\"gridOptions\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n        Cancel\r\n      </button>\r\n      <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps.length === 0 || installing\"\r\n        (click)=\"install()\">\r\n        Install\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, catchError, combineLatest, distinctUntilChanged, map, Observable, of, share, startWith, Subject, Subscription, switchMap } from \"rxjs\";\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n})\r\nexport class AddAppFromFolderComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  pendingApps: PendingApp[] = [];\r\n  installing: boolean = false;\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n  private isAddFromFolderEnabled$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<AddAppFromFolderViewModel>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AddAppFromFolderComponent>,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n    private featuresService: FeaturesService,\r\n  ) { \r\n    super();\r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.subscription.add(this.featuresService.isEnabled$(FeatureNames.AppSyncWithSiteFiles)\r\n      .pipe(distinctUntilChanged())\r\n      .subscribe(this.isAddFromFolderEnabled$)\r\n    ); \r\n    this.viewModel$ = combineLatest([\r\n      this.refreshApps$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.appsListService.getPendingApps().pipe(catchError(() => of(undefined)))),\r\n        share()\r\n      )\r\n    ]).pipe(\r\n      map(([pendingApps]) => ({ pendingApps })),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshApps$.complete();\r\n    super.ngOnDestroy();\r\n  } \r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    if (enabled)\r\n      this.pendingApps.push(app);\r\n    else\r\n      this.pendingApps.splice(this.pendingApps.indexOf(app), 1);\r\n  }\r\n\r\n  install(): void {\r\n    this.installing = true;\r\n    this.snackBar.open('Installing', undefined, { duration: 2000 });\r\n    this.appsListService.installPendingApps(this.pendingApps).subscribe({\r\n      error: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.installing = false;\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              isDisabled: !this.isAddFromFolderEnabled$.value,\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 1,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface AddAppFromFolderViewModel {\r\n  pendingApps: PendingApp[];\r\n}","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","<ng-container *ngIf=\"viewModel$ | async as vm; else loading\">\r\n  <div class=\"feature-text-info\" *ngIf=\"vm.show\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n    <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","<mat-card *ngIf=\"viewModel$ | async as vm\">\r\n  <mat-card-header>\r\n    <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n    <div class=\"eav-info-row\">\r\n      <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n      <div class=\"eav-info-row__value\">\r\n        <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n      </div>\r\n    </div>\r\n    <div class=\"eav-info-row\" *ngIf=\"vm.feature.NameId as id\">\r\n      <div class=\"eav-info-row__label\">ID:</div>\r\n      <div class=\"eav-info-row__value eav_click\">\r\n        <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <button *ngIf=\"vm.feature.Link as link\" mat-raised-button color=\"accent\"\r\n      class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      {{ \"Features.FindOutMore\" | translate }}\r\n    </button>\r\n    <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n      {{ \"Features.Close\" | translate }}\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}