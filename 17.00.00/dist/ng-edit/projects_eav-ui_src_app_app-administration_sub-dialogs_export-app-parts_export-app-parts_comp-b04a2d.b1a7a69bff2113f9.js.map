{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_export-app-parts_export-app-parts_comp-b04a2d.b1a7a69bff2113f9.js","mappings":"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","names":["i0","scopeOption_r4","value","name","$event","template_r11","_r13","$implicit","_export","Name","Id","ExportAppPartsComponent_ng_container_0_div_26_li_4_ul_5_li_3_Template","contentType_r7","Templates","entity_r16","_r18","Title","ExportAppPartsComponent_ng_container_0_div_26_li_4_ul_6_li_3_Template","Entities","_r21","ExportAppPartsComponent_ng_container_0_div_26_li_4_ul_5_Template","ExportAppPartsComponent_ng_container_0_div_26_li_4_ul_6_Template","length","template_r22","_r24","ExportAppPartsComponent_ng_container_0_div_26_li_4_Template","ExportAppPartsComponent_ng_container_0_div_26_li_8_Template","ctx_r3","contentInfo","ContentTypes","TemplatesWithoutContentTypes","_r26","ctx_r25","changeScope","ExportAppPartsComponent_ng_container_0_mat_option_16_Template","ctx_r27","unlockScope","ExportAppPartsComponent_ng_container_0_div_26_Template","ctx_r28","closeDialog","ctx_r29","exportAppParts","ctx_r0","exportScope","lockScope","scopeOptions","dropdownInsertValue","vm_r1","loading","isExporting","ExportAppPartsComponent","constructor","dialogRef","exportAppPartsService","contentTypesService","this","hostClass","eavConstants","scopes","default","loading$","BehaviorSubject","isExporting$","viewModel$","combineLatest","pipe","map","ngOnInit","fetchScopes","fetchContentInfo","ngOnDestroy","complete","close","next","contentTypeIds","selectedContentTypes","contentType","templateIds","selectedTemplates","template","entityIds","selectedEntities","entity","concat","exportParts","newScope","prompt","find","option","unshift","getScopes","subscribe","getContentInfo","filter","entities","templates","static","t","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_3__","Xpm","selectors","hostVars","hostBindings","rf","ctx","ExportAppPartsComponent_ng_container_0_Template","ClickStopPropagationDirective","onClick","event","stopPropagation","_angular_core__WEBPACK_IMPORTED_MODULE_0__","lG2"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts"],"sourcesContent":["<ng-container *ngIf=\"viewModel$ | async as vm\">\r\n  <div class=\"eav-dialog eav-no-scrollbar\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Export Content and Templates from this App</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is an advanced feature to export parts of the app.\r\n        The export will create an xml file which can be imported into another site or app.\r\n        To export the entire content of the app (for example when duplicating the entire site), go to the app export.\r\n        For further help visit <a href=\"https://2sxc.org/en/help?tag=export\" target=\"_blank\">2sxc Help</a>.\r\n      </p>\r\n      \r\n      <div class=\"eav-edit-input\">\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select [ngModel]=\"exportScope\" name=\"Scope\" [disabled]=\"lockScope\" (ngModelChange)=\"changeScope($event)\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n          <button mat-icon-button matTextSuffix [tippy]=\"lockScope ? 'Unlock' : 'Lock'\">\r\n            <mat-icon appClickStopPropagation (click)=\"unlockScope()\">\r\n              {{ lockScope ? 'lock' : 'lock_open' }}\r\n            </mat-icon>\r\n          </button>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a appClickStopPropagation href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\">see help</a>\r\n        </app-field-hint>\r\n      </div>\r\n    \r\n      <div *ngIf=\"contentInfo\">\r\n        <ul class=\"eav-content-info__list eav-content-info__base\">\r\n          <p class=\"eav-content-info__title\">Content Types</p>\r\n          <li class=\"eav-content-info__item\" *ngFor=\"let contentType of contentInfo.ContentTypes\">\r\n            <div class=\"eav-option-box\">\r\n              <mat-checkbox [(ngModel)]=\"contentType._export\">\r\n                <span class=\"eav-option-box__text\">{{ contentType.Name }} ({{ contentType.Id }})</span>\r\n              </mat-checkbox>\r\n            </div>\r\n    \r\n            <ul class=\"eav-content-info__list\" *ngIf=\"contentType.Templates.length > 0\">\r\n              <p class=\"eav-content-info__subtitle\">Templates</p>\r\n              <li class=\"eav-content-info__item\" *ngFor=\"let template of contentType.Templates\">\r\n                <div class=\"eav-option-box\">\r\n                  <mat-checkbox [(ngModel)]=\"template._export\">\r\n                    <span class=\"eav-option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n                  </mat-checkbox>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n    \r\n            <ul class=\"eav-content-info__list\" *ngIf=\"contentType.Entities.length > 0\">\r\n              <p class=\"eav-content-info__subtitle\">Entities</p>\r\n              <li class=\"eav-content-info__item\" *ngFor=\"let entity of contentType.Entities\">\r\n                <div class=\"eav-option-box\">\r\n                  <mat-checkbox [(ngModel)]=\"entity._export\">\r\n                    <span class=\"eav-option-box__text\">{{ entity.Title }} ({{ entity.Id }})</span>\r\n                  </mat-checkbox>\r\n                </div>\r\n              </li>\r\n            </ul>\r\n          </li>\r\n        </ul>\r\n    \r\n        <ul class=\"eav-content-info__list eav-content-info__base\">\r\n          <p class=\"eav-content-info__title\">Templates Without Content Types</p>\r\n          <li class=\"eav-content-info__item\" *ngFor=\"let template of contentInfo.TemplatesWithoutContentTypes\">\r\n            <div class=\"eav-option-box\">\r\n              <mat-checkbox [(ngModel)]=\"template._export\">\r\n                <span class=\"eav-option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n              </mat-checkbox>\r\n            </div>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button [disabled]=\"vm.loading || vm.isExporting\" (click)=\"closeDialog()\">\r\n        Cancel\r\n      </button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"vm.loading || vm.isExporting\" (click)=\"exportAppParts()\">\r\n        Export\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { dropdownInsertValue } from '../../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { ContentInfo, ContentInfoEntity, ContentInfoTemplate } from '../../models/content-info.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\nimport { ExportAppPartsService } from '../../services/export-app-parts.service';\r\n\r\n@Component({\r\n  selector: 'app-export-app-parts',\r\n  templateUrl: './export-app-parts.component.html',\r\n  styleUrls: ['./export-app-parts.component.scss'],\r\n})\r\nexport class ExportAppPartsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  contentInfo: ContentInfo;\r\n  exportScope = eavConstants.scopes.default.value;\r\n  scopeOptions: ScopeOption[];\r\n  lockScope = true;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  private loading$ = new BehaviorSubject(false);\r\n  private isExporting$ = new BehaviorSubject(false);\r\n  viewModel$ = combineLatest([this.loading$, this.isExporting$]).pipe(\r\n    map(([loading, isExporting]) => ({ loading, isExporting })),\r\n  );\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ExportAppPartsComponent>,\r\n    private exportAppPartsService: ExportAppPartsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchScopes();\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.isExporting$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportAppParts() {\r\n    this.isExporting$.next(true);\r\n    // spm TODO: maybe optimize these functions to not loop content types and entities multiple times for no reason\r\n    // spm TODO: figure out how to capture window loading to disable export button\r\n    const contentTypeIds = this.selectedContentTypes().map(contentType => contentType.Id);\r\n    const templateIds = this.selectedTemplates().map(template => template.Id);\r\n    let entityIds = this.selectedEntities().map(entity => entity.Id);\r\n    entityIds = entityIds.concat(templateIds);\r\n\r\n    this.exportAppPartsService.exportParts(contentTypeIds, entityIds, templateIds);\r\n    this.isExporting$.next(false);\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n      if (!this.scopeOptions.find(option => option.value === newScope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions.unshift(newScopeOption);\r\n      }\r\n    }\r\n    this.exportScope = newScope;\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope = !this.lockScope;\r\n    if (this.lockScope) {\r\n      this.exportScope = eavConstants.scopes.default.value;\r\n      this.fetchContentInfo();\r\n    }\r\n  }\r\n\r\n  private fetchScopes() {\r\n    this.loading$.next(true);\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions = scopes;\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  private fetchContentInfo() {\r\n    this.loading$.next(true);\r\n    this.exportAppPartsService.getContentInfo(this.exportScope).subscribe(contentInfo => {\r\n      this.contentInfo = contentInfo;\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  private selectedContentTypes() {\r\n    return this.contentInfo.ContentTypes.filter(contentType => contentType._export);\r\n  }\r\n\r\n  private selectedEntities() {\r\n    let entities: ContentInfoEntity[] = [];\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      entities = entities.concat(contentType.Entities.filter(entity => entity._export));\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  private selectedTemplates() {\r\n    let templates: ContentInfoTemplate[] = [];\r\n    // The ones with...\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      templates = templates.concat(contentType.Templates.filter(template => template._export));\r\n    }\r\n    // ...and without content types\r\n    templates = templates.concat(this.contentInfo.TemplatesWithoutContentTypes.filter(template => template._export));\r\n    return templates;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}