{"version":3,"file":"default-projects_eav-ui_src_app_apps-management_services_zone_service_ts-projects_eav-ui_src_-86ba39.73558fafffc77410.js","mappings":"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","names":["webApiZoneRoot","ZoneService","constructor","http","context","dnnContext","this","getLanguages","get","$2sxc","apiUrl","toggleLanguage","code","enable","params","cultureCode","toString","getSystemInfo","getLanguagesPermissions","webApiAppRoot","appId","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","Yz7","factory","Éµfac","FeaturesModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","oAB","cJS","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","webApiRoot","nameId","EmptyRouteComponent","Xpm","selectors","decls","vars","template","rf","ctx","DialogService","openCodeFile","path","isShared","templateId","form","items","Path","EntityId","hashParams","buildHashParam","keyDialog","DialogTypeConstants","Develop","keyIsShared","keyItems","JSON","stringify","url","buildFullUrl","window","open","openQueryDesigner","queryId","PipelineDesigner","keyPipelineId","openAppsManagement","zoneId","tab","extras","keyZoneId","Zone","Object","keys","length","keyExtras","openAppAdministration","scope","keyAppId","App","buildSharedHashParams","keyModuleId","moduleId","keyContentBlockId","contentBlockId","keyPartOfPage","sessionStorage","getItem","keyDebug","key","value","rawKey","replace","prefix","valueTemp","_","encodeURIComponent","oldHref","keyUrl","oldUrl","URL","newHref","origin","pathname","search","allHashParams","entries","reduce","acc","_angular_core__WEBPACK_IMPORTED_MODULE_3__","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","suffix","getTranslation","lang","pipe","catchError","error","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","Éµdir","type","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","booleanAttribute","features","MatBadgeModule","Éµmod","Éµinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/services/zone.service.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/shared/components/empty-route/empty-route.component.ts","./projects/eav-ui/src/app/shared/components/empty-route/empty-route.component.html","./projects/eav-ui/src/app/shared/services/dialog.service.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SiteLanguage, SiteLanguagePermissions } from '../models/site-language.model';\r\nimport { SystemInfoSet } from '../models/system-info.model';\r\n\r\nconst webApiZoneRoot = 'admin/zone/';\r\n\r\n@Injectable()\r\nexport class ZoneService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getLanguages() {\r\n    return this.http.get<SiteLanguage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'GetLanguages'));\r\n  }\r\n\r\n  toggleLanguage(code: string, enable: boolean) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'SwitchLanguage'), {\r\n      params: { cultureCode: code, enable: enable.toString() },\r\n    });\r\n  }\r\n\r\n  getSystemInfo() {\r\n    return this.http.get<SystemInfoSet>(this.dnnContext.$2sxc.http.apiUrl(webApiZoneRoot + 'GetSystemInfo'));\r\n  }\r\n\r\n  getLanguagesPermissions() {\r\n    return this.http.get<SiteLanguagePermissions[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'languages'), {\r\n      params: { appId: this.context.appId },\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-empty-route',\r\n  templateUrl: './empty-route.component.html',\r\n})\r\nexport class EmptyRouteComponent {\r\n  constructor() { }\r\n}\r\n","<router-outlet></router-outlet>\r\n","import { Injectable } from '@angular/core';\r\nimport { DialogTypeConstants } from '../constants/dialog-type.constants';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyAppId, keyContentBlockId, keyDebug, keyDialog, keyExtras, keyIsShared, keyItems, keyModuleId, keyPartOfPage, keyPipelineId, keyUrl, keyZoneId, prefix } from '../constants/session.constants';\r\nimport { DialogHashParams, ExtrasParam } from '../models/dialog-url-params.model';\r\nimport { EditForm, ViewOrFileIdentifier } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCodeFile(path: string, isShared: boolean, templateId?: number) {\r\n    const dialog = DialogTypeConstants.Develop;\r\n    const form = {\r\n      items: [{\r\n        Path: path,\r\n        ...(templateId != null && { EntityId: templateId }),\r\n      }] as ViewOrFileIdentifier[]\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyIsShared, isShared.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(queryId: number) {\r\n    const dialog = DialogTypeConstants.PipelineDesigner;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: queryId }],\r\n    };\r\n\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyDialog, dialog),\r\n      ...this.buildHashParam(keyPipelineId, queryId.toString()),\r\n      ...this.buildHashParam(keyItems, JSON.stringify(form.items)),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppsManagement(zoneId: number, tab?: string) {\r\n    const extras: ExtrasParam = {\r\n      ...(tab && { tab }),\r\n    };\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.Zone),\r\n      ...(Object.keys(extras).length ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openAppAdministration(zoneId: number, appId: number, tab?: string, scope?: string) {\r\n    const extras: ExtrasParam = {\r\n      ...(tab && { tab }),\r\n      ...(scope && { scope }),\r\n    };\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, appId.toString()),\r\n      ...this.buildHashParam(keyDialog, DialogTypeConstants.App),\r\n      ...(Object.keys(extras).length ? this.buildHashParam(keyExtras, JSON.stringify(extras)) : ''),\r\n    };\r\n    const url = this.buildFullUrl(hashParams);\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  /** A lot of the link is identical when opening the admin-dialogs in a new window */\r\n  private buildSharedHashParams() {\r\n    const hashParams: DialogHashParams = {\r\n      ...this.buildHashParam(keyZoneId, this.context.zoneId.toString()),\r\n      ...this.buildHashParam(keyAppId, this.context.appId.toString()),\r\n      ...this.buildHashParam(keyModuleId, this.context.moduleId?.toString()),\r\n      ...this.buildHashParam(keyContentBlockId, this.context.contentBlockId?.toString()),\r\n      ...this.buildHashParam(keyPartOfPage),\r\n      ...(sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : {}),\r\n    };\r\n    return hashParams;\r\n  }\r\n\r\n  /** Encodes param if necessary */\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value != null) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam: DialogHashParams = { [rawKey]: rawValue };\r\n    return hashParam;\r\n  }\r\n\r\n  private buildFullUrl(hashParams: DialogHashParams) {\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n\r\n    const allHashParams: DialogHashParams = {\r\n      ...this.buildSharedHashParams(),\r\n      ...hashParams,\r\n    };\r\n    const hashUrl = Object.entries(allHashParams).reduce((acc, [key, value]) => `${acc}&${key}=${value}`, '').replace('&', '#');\r\n    return newHref + hashUrl;\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ÉµÉµFactoryTarget.Directive }); }\n    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }\n    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[9]}