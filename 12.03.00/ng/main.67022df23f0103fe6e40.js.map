{"version":3,"sources":["./src/$_lazy_route_resource lazy namespace object","./src/app/core/log.ts","./src/app/debug-config.ts","./src/app/core/boot-control.ts","./src/app/config.ts","../connect-parts/inpage-quick-dialog/quick-dialog-params.ts","./src/app/i18n/constants.ts","./src/app/core/backend-settings.ts","./src/app/template-picker/constants.ts","./src/app/core/behavior-observable.ts","./src/app/core/app.ts","./src/app/template-picker/picker.service.ts","./src/app/core/constants.ts","./src/app/template-picker/data/content-types-processor.service.ts","./src/app/template-picker/data/template-processor.ts","./src/app/template-picker/template-filter.pipe.ts","./src/app/template-picker/current-data.service.ts","./src/app/installer/installer.service.ts","./src/app/installer/getting-started.service.ts","./src/app/installer/installer.component.html","./src/app/installer/installer.component.ts","./src/app/template-picker/template-picker.component.html","./src/app/template-picker/template-picker.component.ts","./src/app/app.component.ts","./src/app/i18n/index.ts","./src/app/app.component.html","./src/app/core/core.module.ts","./src/app/installer/installer.module.ts","./src/app/material-module.ts","./src/app/template-picker/template-picker.module.ts","./src/app/app.module.ts","./src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","name","parent","autoDump","logs","Array","loggers","Object","this","add","msg","push","Log","forceLogToConsole","arguments","Constants","console","log","apply","subLog","newLog","dump","configureRuntimeLogging","state","window","_reboot","Subject","rebootRequest$","asObservable","getRebootController","BootController","instance","reboot","next","appId","parseInt","get","apps","moduleId","Number","cbId","getSxcInstance","$2sxc","Config","key","urlParams","require","SupportedLanguages","i18nPrefix","http","BehaviorSubject","data","pipe","distinctUntilChanged","switchMap","map","bundle","Context","share","setApp","BackendSettings","cViewWithoutContent","create","initialValue","subj","obs","subject","reset","isInitial","value","Observable","json","assign","VersionMain","Version","substr","uninitializedList","apps$","contentTypes$","templates$","ready$","mustLoadApps","buildObservables","enableLogging","combineLatest","types","templates","set","startWith","saveAppId","reloadParts","loadApps","post","toPromise","initLoading","requireApps","reloadAppParts","loadTemplates","loadContentTypes","subscribe","response","ct","Label","Metadata","Name","alreadyLoaded","appsFilter","a","App","streamLog","length","t","r","PickerService","translate","buildList","allTypes","type","allTemplates","template","unhide","unhideSelectedType","addEmptyTypeIfNeeded","filtered","hideNecessaryTypes","sortTypes","filter","IsHidden","contentTypes","currentType","currentTemplate","c","TemplateId","StaticName","forEach","layoutElementLabel","instant","find","ContentTypeStaticName","slice","Thumbnail","sort","b","localeCompare","findContentTypesById","selectedContentTypeId","ContentTypesProcessor","pickSelected","selected","app","transform","args","typeId","contentType","undefined","typeNameFilter","isContent","TemplateFilterPipe","api","templateFilter","ctProcessor","appId$","initialTypeId$","initialTemplateId$","selectedType$","selectedTemplate$","buildBasicObservables","app$","AppId","initialType$","type$","merge","findTemplatesForTypeOrAll","initialTemplate$","selected$","template$","TemplateProcessor","types$","init","config","JSON","stringify","appReady$","typeReady$","scan","acc","contentTypeId","templReady$","debounceTime","templateId","loadAll$","initLogging","activateCurrentApp","inita$","inittyp$","initt$","initAll$","slog","initLog","activateType","activateTemplate","CurrentDataService","installPackages","packages","step","reduce","url","InstallerService","gettingStartedSubject","gettingStarted$","tap","loadGettingStarted","isContentApp","GettingStartedService","installer","sanitizer","remoteInstallerUrl","ready","subscriptions","bypassSecurityTrustResourceUrl","bootController","destroy","sub","unsubscribe","ngOnInit","alreadyProcessing","fromEvent","evt","parse","action","values","packagesDisplayNames","displayName","confirm","showProgress","p","currentPackage","alert","top","location","reload","InstallerComponent","backendSettings","cdRef","showCancel","showAdvanced","showInstaller","tabIndex","isBadContextForInstaller","loading$","preventAppSwich","showDebug","bridge","frameElement","dashInfo","getAdditionalDashboardConfig","boot","debugObservables","autosyncObservablesToEnsureUiUpdates","debug","settings","Enable","CodeEditor","initDone$","initObservables","initValuesFromBridge","initTrue$","typeOrAppReady","_","switchTab","templatesLoading$","skipUntil","previewTemplate","detectChanges","preventTypeSwitch","hasContent","isInnerContent","supportsAjax","cancel","run","persistTemplate","setTemplate","selectApp","before","after","updateApp","selectContentType","setContentType","selectTemplate","timer","newApp","ajax","SupportsAjaxReload","showMessage","toString","reloadAndReInit","newConfig","TemplatePickerComponent","el","context","preConfigure","sxc","addLangs","ctxDto","lang","Language","setDefaultLang","use","Current","split","AppComponent","CoreModule","InstallerModule","MATERIAL_MODULES","MaterialModule","TemplatePickerModule","HttpLoaderFactory","loader","AppModule","forRoot","provide","useFactory","deps","platform","destroyed","bootstrapModule","appBootstrap","catch","err","error"],"mappings":"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","file":"main.67022df23f0103fe6e40.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"crnd\";","import { Constants } from './constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\n\r\nexport class Log {\r\n  /** global state to determine if logging to console should be done or not */\r\n  public static forceLogToConsole = false;\r\n\r\n  name = '';\r\n  autoDump = DebugConfig.logger.logToConsole;\r\n  logs = new Array<string>();\r\n  parent: Log;\r\n  loggers: any = new Object();\r\n\r\n  constructor (name?: string, parent?: Log) {\r\n    this.name = name;\r\n    this.parent = parent;\r\n  }\r\n\r\n  add(msg: string, ...args: any[]): void {\r\n    this.logs.push(msg);\r\n    if (this.name) msg = this.name + ':' + msg;\r\n    if (this.parent) this.parent.logs.push(msg);\r\n    if (this.autoDump || Log.forceLogToConsole) {\r\n      arguments[0] = Constants.logName + ': ' + msg;\r\n      console.log.apply(null, arguments);\r\n    }\r\n  }\r\n\r\n  subLog(name: string, autoDump?: boolean): Log {\r\n    const newLog = new Log(name, this);\r\n    this.loggers[name] = newLog;\r\n    newLog.autoDump = typeof(autoDump) === 'boolean'\r\n      ? autoDump : this.autoDump;\r\n    if (DebugConfig.logger.internals)\r\n      this.add(`logger: subLog(${name}, ${autoDump}) resulting in autoDump=${newLog.autoDump}`);\r\n\r\n    return newLog;\r\n  }\r\n\r\n  dump(): void {\r\n    this.add('dumping to console');\r\n    console.log(`Log dump for '${this.name}'`, this);\r\n  }\r\n\r\n  public static configureRuntimeLogging(state: boolean) {\r\n    if(DebugConfig.logger.urlDebugActivatesLive)\r\n      Log.forceLogToConsole = state;\r\n  }\r\n}\r\n\r\n\r\nexport const log = new Log();\r\n\r\nwindow['logger'] = log;\r\n","\r\n/** configuration what to debug directly to the screen and what to keep secret */\r\nexport const DebugConfig = {\r\n\r\n  /** logger configuration */\r\n  logger: {\r\n    /** should we stream messages directly to console */\r\n    logToConsole: false,\r\n    /** should we also log internal events */\r\n    internals: false,\r\n    /** allow url param ?debug=true to turn on logging */\r\n    urlDebugEnablesAll: true,\r\n    /** if url param ?debug=true also enables all live-logging */\r\n    urlDebugActivatesLive: true\r\n  },\r\n\r\n  /** api debugging */\r\n  api: {\r\n    enabled: false,\r\n    streams: false,\r\n  },\r\n\r\n  /** template picker */\r\n  picker: {\r\n    enabled: false,\r\n    streams: false,\r\n    showDebugPanel: false\r\n  },\r\n\r\n  /** template state */\r\n  state: {\r\n    enabled: false,\r\n    streams: false,\r\n    inits: false,\r\n  },\r\n\r\n  /** content-type processor */\r\n  typeProcessor: false,\r\n  /** template processor */\r\n  templateProcessor: false,\r\n};\r\n","import { Subject } from 'rxjs';\r\nimport { log as parentLog } from './log';\r\n\r\nconst log = parentLog.subLog('boot-controller');\r\n/**\r\n * Special reboot controller, to restart the angular app\r\n * when critical parameters were changed\r\n */\r\nexport class BootController {\r\n  private static instance: BootController;\r\n  private _reboot: Subject<boolean> = new Subject();\r\n  rebootRequest$ = this._reboot.asObservable();\r\n\r\n  static getRebootController() {\r\n    log.add('getRebootController()');\r\n    if (!BootController.instance) {\r\n      BootController.instance = new BootController();\r\n    }\r\n    return BootController.instance;\r\n  }\r\n\r\n  public reboot() {\r\n    log.add('restarting...');\r\n    this._reboot.next(true);\r\n  }\r\n}\r\n","import { SxcRoot } from '../../../sxc-typings';\r\nimport { urlParams } from './core/constants';\r\n\r\ndeclare const $2sxc: SxcRoot;\r\n\r\nexport class Config {\r\n  static appId = () => parseInt(get(urlParams.appId));\r\n  static apps = () => get(urlParams.apps);\r\n\r\n  static moduleId = () => Number(req(urlParams.moduleId));\r\n  static cbId = () => Number(req(urlParams.contentBlockId));\r\n\r\n  static getSxcInstance = () => $2sxc(Config.moduleId(), Config.cbId());\r\n}\r\n\r\n\r\nfunction req(key) { return $2sxc.urlParams.require(key); }\r\n\r\nfunction get(key) { return $2sxc.urlParams.get(key); }\r\n","\r\n/** These are all the url params the UI needs to function */\r\nexport const urlParams = {\r\n  // These are used in UI.html, but we keep them here so we have a full list documented\r\n  pageId: 'tid',\r\n  requestVerificationToken: 'rvt',\r\n  api: 'api',\r\n\r\n  /** \r\n   * Context: App we're on. \r\n   * This is often 0 (zero) as initially it's not known. \r\n   */\r\n  appId: 'appId',\r\n\r\n  /** \r\n   * Selection of what apps should be shown by the dialog \r\n   * this is an optional parameter\r\n   */\r\n  apps: 'apps',\r\n\r\n  /** Context: Module we're on */\r\n  moduleId: 'mid',\r\n\r\n  /** Context: ContentBlock we're on */\r\n  contentBlockId: 'cbid',\r\n};\r\n","/* Constants for i18n */\r\n\r\nexport const PrimaryUiLanguage = 'en';\r\nexport const SupportedLanguages = ['en', 'de', 'es', 'fr', 'it', 'uk'];\r\nexport const i18nPrefix = 'TemplatePicker.LayoutElement';\r\nexport const pathToI18n = './i18n/';\r\nexport const i18nExtension = '.js';\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { map, switchMap, share, distinctUntilChanged } from 'rxjs/operators';\r\nimport { Constants } from './constants';\r\nimport { ContextDto } from '../../../../shared';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class BackendSettings {\r\n\r\n  appId = new BehaviorSubject<number>(0);\r\n\r\n  data: Observable<ContextDto>\r\n\r\n  constructor(http: HttpClient) {\r\n    this.data = this.appId.pipe(\r\n      distinctUntilChanged(),\r\n      switchMap(id => http.get<{ Context: ContextDto }>(`${Constants.webApiDialogContext}?appId=${id}`)),\r\n      map(bundle => bundle.Context),\r\n      share()\r\n    );\r\n  }\r\n\r\n  setApp(id: number) {\r\n    this.appId.next(id);\r\n  }\r\n}\r\n","export const cViewWithoutContent = '_LayoutElement';\r\nexport const cAppActionImport = -1;\r\n","import { BehaviorSubject, Observable } from 'rxjs';\r\n\r\n// Todo: probably not needed any more, since now Subjects are automatically observables\r\nexport class BehaviorObservable<T> extends Observable<T> {\r\n  private constructor() {\r\n    super();\r\n  }\r\n  /** The source subject */\r\n  subject: BehaviorSubject<T>;\r\n\r\n  /** will reset back to the initial value */\r\n  reset: () => void;\r\n\r\n  /** check if it's the initial object */\r\n  isInitial: () => boolean;\r\n\r\n  /** the initial object */\r\n  initialValue: T;\r\n\r\n  /** shorthand to push next value */\r\n  next: (value: T) => void;\r\n\r\n  static create<T>(initialValue: T): BehaviorObservable<T> {\r\n    const subj = new BehaviorSubject<T>(initialValue);\r\n    const obs = subj.asObservable() as BehaviorObservable<T>;\r\n    obs.initialValue = initialValue;\r\n    obs.subject = subj;\r\n    obs.reset = () => {\r\n      obs.subject.next(obs.initialValue);\r\n    };\r\n    obs.isInitial = () => {\r\n      return obs.subject.value === obs.initialValue;\r\n    };\r\n    obs.next = (value: T) => obs.subject.next(value);\r\n    return obs;\r\n  }\r\n}\r\n","export class App {\r\n    AppId: number;\r\n    Name: string;\r\n    Thumbnail: string;\r\n    SupportsAjaxReload: boolean;\r\n    Version: string;\r\n    VersionMain: number;\r\n\r\n    constructor(json: any) {\r\n        Object.assign(this, json);\r\n\r\n        try {\r\n            this.VersionMain = parseInt(this.Version.substr(0,2));\r\n        } catch(e) { /* ignore */}\r\n    }\r\n\r\n}\r\n","import { combineLatest } from 'rxjs';\r\nimport { map, startWith, share } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { App } from 'app/core/app';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { Config } from '../config';\r\n\r\nconst log = parentLog.subLog('api', DebugConfig.api.enabled);\r\nconst uninitializedList = []; // this must be created as a variable, so we can check later if it's still the original or a new empty list\r\n@Injectable()\r\nexport class PickerService {\r\n  // #region public properties\r\n  /** all apps of the zone */\r\n  apps$ = BehaviorObservable.create<App[]>(uninitializedList);\r\n\r\n  /** all types of this app */\r\n  contentTypes$ = BehaviorObservable.create<ContentType[]>(uninitializedList);\r\n\r\n  /** templates/views of this app */\r\n  templates$ = BehaviorObservable.create<Template[]>(uninitializedList);\r\n\r\n  /**\r\n   * ready is true when all necessary data is loaded\r\n   * note that apps are not loaded if not needed */\r\n  ready$ = new Observable<boolean>();\r\n  // #endregion\r\n\r\n  // #region private properties\r\n  private mustLoadApps = false;\r\n  // all the subjects - these are all multi-cast, so don't use share!\r\n  // #endregion\r\n\r\n  constructor(private http: HttpClient) {\r\n    log.add('constructor()');\r\n    this.buildObservables();\r\n    this.enableLogging();\r\n  }\r\n\r\n  private buildObservables() {\r\n    log.add(`buildObservables()`);\r\n\r\n    // ready requires all to have data, but app can be skipped if not required\r\n    this.ready$ = combineLatest([this.apps$, this.contentTypes$, this.templates$])\r\n      .pipe(\r\n        map(([a, ct, t]) => ({ apps: a, types: ct, templates: t })),\r\n        map(set => set.templates !== uninitializedList\r\n          && set.types !== uninitializedList\r\n          && (!this.mustLoadApps || !!(set.apps && set.apps !== uninitializedList))),\r\n        startWith(false),\r\n        share());\r\n  }\r\n\r\n  public saveAppId(appId: string, reloadParts: boolean): Promise<any> {\r\n    log.add(`saveAppId(${appId}, ${reloadParts})`);\r\n    // skip doing anything here, if we're in content-mode (which doesn't use/change apps)\r\n    if (!this.loadApps) throw new Error(`can't save app, as we're not in app-mode`);\r\n    return this.http.post(`${Constants.webApiSetApp}?appId=${appId}`, {}).toPromise();\r\n  }\r\n\r\n\r\n\r\n  public initLoading(requireApps: boolean): Observable<any> {\r\n    log.add(`initLoading(requireApps: ${requireApps})`);\r\n    this.mustLoadApps = requireApps;\r\n    if (requireApps) this.loadApps();\r\n    return this.reloadAppParts();\r\n  }\r\n\r\n  public reloadAppParts(): Observable<any> {\r\n    return combineLatest([this.loadTemplates(), this.loadContentTypes()]);\r\n  }\r\n\r\n  /**\r\n   * load templates - is sometimes repeated if the app changes\r\n   */\r\n  public loadTemplates(): Observable<any> {\r\n    log.add('loadTemplates()');\r\n    this.templates$.reset();\r\n    const obs = this.http.get<Template[]>(Constants.webApiGetTemplates)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.templates$.next(response || []));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load the ContentTypes - only needed on first initialization\r\n   */\r\n  private loadContentTypes(): Observable<any> {\r\n    log.add(`loadContentTypes()`);\r\n    this.contentTypes$.reset();\r\n    const obs = this.http.get<any[]>(Constants.webApiGetTypes)\r\n      .pipe(share()); // ensure it's only run once\r\n    obs.pipe(map(response => (response || []).map(ct => {\r\n        ct.Label = (ct.Metadata && ct.Metadata.Label)\r\n          ? ct.Metadata.Label\r\n          : ct.Name;\r\n        return ct;\r\n      })))\r\n      .subscribe(json => this.contentTypes$.next(json));\r\n    return obs;\r\n  }\r\n\r\n  /**\r\n   * Load all Apps, only needed on first initialization\r\n   */\r\n  private loadApps(): Observable<any> {\r\n    const alreadyLoaded = !this.apps$.isInitial();\r\n    log.add(`loadApps() - skip:${alreadyLoaded}`);\r\n    if (alreadyLoaded) return;\r\n\r\n    const appsFilter = Config.apps();\r\n\r\n    const obs = this.http.get<any[]>(`${Constants.webApiGetApps}?apps=${appsFilter}`)\r\n      .pipe(share()); // ensure it's only run once\r\n\r\n    obs.subscribe(response => this.apps$.subject.next(response.map(a => new App(a))));\r\n    return obs;\r\n  }\r\n\r\n  private enableLogging() {\r\n    const streamLog = parentLog.subLog('api-streams', DebugConfig.api.streams);\r\n    this.apps$.subscribe(a => streamLog.add(`app$:${a && a.length}`));\r\n    this.contentTypes$.subscribe(ct => streamLog.add(`contentTypes$:${ct && ct.length}`));\r\n    this.templates$.subscribe(t => streamLog.add(`templates$:${t && t.length}`));\r\n    this.ready$.subscribe(r => streamLog.add(`ready$:${r}`));\r\n  }\r\n\r\n}\r\n","export const Constants = {\r\n  logName: 'quick-edit',\r\n\r\n  //#region WebApi Endpoints used: 2sxc\r\n  webApiDialogContext: 'admin/dialog/settings',\r\n  webApiInstallPackage: 'sys/install/RemotePackage',\r\n  webApiRemoteInstaller: 'sys/install/RemoteWizardUrl',\r\n  webApiGetTemplates: 'cms/block/Templates',\r\n  webApiGetTypes: 'cms/block/ContentTypes',\r\n  webApiGetApps: 'cms/block/Apps',\r\n  webApiSetApp: 'cms/block/App',\r\n  //#endregion\r\n};\r\n\r\nexport * from '../../../../connect-parts/inpage-quick-dialog/quick-dialog-params';\r\n","import { ContentType } from '../content-type';\r\nimport { cViewWithoutContent } from '../constants';\r\nimport { Template } from '../template';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { i18nPrefix } from 'app/i18n';\r\n\r\n// const debug = true;\r\nconst log = parentLog.subLog('ct-processor', DebugConfig.typeProcessor);\r\n\r\n/**\r\n * This is a helper to do various transformations for the list of content-types\r\n */\r\n@Injectable()\r\nexport class ContentTypesProcessor {\r\n  constructor(private translate: TranslateService) {}\r\n\r\n  public buildList(allTypes: ContentType[], type: ContentType, allTemplates: Template[], template: Template): ContentType[] {\r\n    log.add('buildList(...) of content-types to show');\r\n    let unhide = this.unhideSelectedType(allTypes, type, template);\r\n    unhide = this.addEmptyTypeIfNeeded(unhide, allTemplates);\r\n    const filtered = this.hideNecessaryTypes(unhide);\r\n    return this.sortTypes(filtered);\r\n  }\r\n\r\n  private hideNecessaryTypes(types: ContentType[]): ContentType[] {\r\n    return types.filter(t => !t.IsHidden);\r\n  }\r\n\r\n  /**\r\n   * Ensure current content-type is visible, just in case it's configured as hidden\r\n   */\r\n  private unhideSelectedType(contentTypes: ContentType[], currentType: ContentType, currentTemplate: Template): ContentType[] {\r\n    contentTypes\r\n      .filter(c => (currentTemplate?.TemplateId === c.TemplateId) || (c.StaticName === currentType?.StaticName))\r\n      .forEach(c => c.IsHidden = false);\r\n    return contentTypes;\r\n  }\r\n\r\n\r\n  /**\r\n   * add an empty content-type for UI selection if any template would support \"no content-type\"\r\n   */\r\n  private addEmptyTypeIfNeeded(contentTypes: ContentType[], templates: Template[]): ContentType[] {\r\n    const layoutElementLabel = (this.translate && this.translate.instant(i18nPrefix))\r\n      || cViewWithoutContent; // if translate is not ready, use the nicer label\r\n\r\n    // add option for empty content type\r\n    if (templates && templates.find(t => t.ContentTypeStaticName === '')) {\r\n      contentTypes = contentTypes.slice(); // copy it first to not change original\r\n      contentTypes.push({\r\n        StaticName: cViewWithoutContent,\r\n        Name: i18nPrefix,\r\n        Thumbnail: null,\r\n        Label: layoutElementLabel,\r\n        IsHidden: false,\r\n      } as ContentType);\r\n    }\r\n    return contentTypes;\r\n  }\r\n\r\n  /**\r\n   * Sort the types by label\r\n   */\r\n  private sortTypes(contentTypes: ContentType[]): ContentType[] {\r\n    // https://stackoverflow.com/questions/51165/how-to-sort-strings-in-javascript\r\n    return contentTypes.sort((a, b) => ('' + a.Label).localeCompare(b.Label));\r\n  }\r\n\r\n\r\n  // tslint:disable-next-line:member-ordering\r\n  static findContentTypesById(contentTypes: ContentType[], selectedContentTypeId: string): ContentType {\r\n    log.add(`findContentTypesById(..., ${selectedContentTypeId}`);\r\n    return selectedContentTypeId\r\n      ? contentTypes.find(c => c.StaticName === selectedContentTypeId)\r\n      : null;\r\n  }\r\n\r\n}\r\n\r\n","import { Template } from '../template';\r\nimport { ContentType } from '../content-type';\r\nimport { App } from 'app/core/app';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { DebugConfig } from 'app/debug-config';\r\n\r\nconst log = parentLog.subLog('TemplateProcessor', DebugConfig.templateProcessor);\r\n\r\nexport class TemplateProcessor {\r\n  static pickSelected(selected: Template, templates: Template[], type: ContentType, app: App): Template {\r\n    log.add(`pickSelected(selected: ${selected && selected.TemplateId}, templates: ${templates.length})`)\r\n    // if one is selected, return that; but only if it's in the list of possible templates\r\n    if (selected && templates.find(t => t.TemplateId === selected.TemplateId))\r\n        return selected;\r\n\r\n    // if none is selected, return the first; assuming a type or app has been selected\r\n    if ((type || app) && templates && templates.length) return templates[0];\r\n\r\n    // nothing valid\r\n    return null;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { cViewWithoutContent } from './constants';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\n\r\n@Pipe({\r\n  name: 'templateFilter'\r\n})\r\nexport class TemplateFilterPipe implements PipeTransform {\r\n\r\n\r\n  transform(templates: Template[], args: {isContent: boolean, contentType: ContentType } ): Template[] {\r\n\r\n    const typeId = args.contentType ? args.contentType.StaticName : undefined;\r\n\r\n    // in case we're filtering for the special \"empty\" code, use empty in the filter\r\n    const typeNameFilter = typeId === cViewWithoutContent\r\n      ? ''\r\n      : (typeId || '');\r\n\r\n    return templates\r\n      .filter(t => !t.IsHidden)\r\n      .filter(t => !args.isContent || t.ContentTypeStaticName === typeNameFilter);\r\n  }\r\n}\r\n","\r\n// #region imports\r\nimport { scan, debounceTime, share, startWith, map, filter } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, combineLatest, merge } from 'rxjs';\r\n\r\nimport { App } from 'app/core/app';\r\nimport { PickerService } from './picker.service';\r\nimport { Template } from './template';\r\nimport { ContentType } from './content-type';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { log as parentLog } from 'app/core/log';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { TemplateProcessor } from './data/template-processor';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { IQuickDialogConfig } from 'app/interfaces/shared';\r\n// #endregion\r\n\r\nconst log = parentLog.subLog('state', DebugConfig.state.enabled);\r\n\r\n@Injectable()\r\nexport class CurrentDataService {\r\n  /** Currently selected app */\r\n  app$: Observable<App>;\r\n\r\n  /** Relevant types */\r\n  types$: Observable<ContentType[]>;\r\n\r\n  /** The currently selected type */\r\n  type$: Observable<ContentType>;\r\n\r\n  /** Stream containing the currently selected template or null if not selected */\r\n  template$: Observable<Template>;\r\n\r\n  /** all templates relevant for the UI */\r\n  templates$: Observable<Template[]>;\r\n\r\n  private appId$ = BehaviorObservable.create<number>(null);\r\n  private initialTypeId$ = BehaviorObservable.create<string>(null);\r\n  private initialTemplateId$ = BehaviorObservable.create<number>(null);\r\n  private selectedType$ = BehaviorObservable.create<ContentType>(null);\r\n  private selectedTemplate$ = BehaviorObservable.create<Template>(null);\r\n\r\n\r\n  private config: IQuickDialogConfig;\r\n\r\n  constructor(\r\n    private api: PickerService,\r\n    private templateFilter: TemplateFilterPipe,\r\n    private ctProcessor: ContentTypesProcessor\r\n  ) {\r\n    this.buildBasicObservables();\r\n  }\r\n\r\n  private buildBasicObservables() {\r\n    // app-stream should contain selected app, once the ID is known - or null\r\n    this.app$ = combineLatest([\r\n      this.api.apps$,\r\n      this.appId$]).pipe(map(([apps, appId]) => apps.find(a => a.AppId === appId)));\r\n\r\n    // current type should be either the initial type, or a manually selected type\r\n    const initialType$ = combineLatest([this.initialTypeId$, this.api.contentTypes$])\r\n      .pipe(map(([typeId, all]) => ContentTypesProcessor.findContentTypesById(all, typeId)));\r\n    this.type$ = merge(initialType$, this.selectedType$).pipe(\r\n      startWith(null as ContentType),\r\n      share());\r\n\r\n    // the templates-list is always filtered by the currently selected type\r\n    this.templates$ = combineLatest([this.api.templates$, this.type$])\r\n      .pipe(map(([all, current]) => this.findTemplatesForTypeOrAll(all, current)))\r\n      .pipe(startWith(new Array<Template>()));\r\n\r\n    // the current template is either the last selected, or auto-selected when conditions change\r\n    const initialTemplate$ = combineLatest([\r\n      this.initialTemplateId$,\r\n      this.api.templates$])\r\n      .pipe(map(([id, templates]) => templates.find(t => t.TemplateId === id)))\r\n      .pipe(\r\n        filter(t => t != null), // only allow new values which are not null, to guarantee later template$ updates don't affect this\r\n        startWith(null as Template),\r\n        share());\r\n\r\n    const selected$ = merge(initialTemplate$, this.selectedTemplate$.pipe(filter(t => t !== null)));\r\n    this.template$ = combineLatest([\r\n      selected$,\r\n      this.templates$,\r\n      this.type$,\r\n      this.app$]).pipe(map(\r\n        ([selected, templates, type, app]) => TemplateProcessor.pickSelected(selected, templates, type, app)\r\n      ))\r\n      .pipe(\r\n        startWith(null as Template),\r\n        share());\r\n\r\n    // construct list of relevant types for the UI\r\n    this.types$ = combineLatest([\r\n      this.api.contentTypes$,\r\n      this.type$,\r\n      this.api.templates$,\r\n      this.template$])\r\n      .pipe(map(([types, type, templates, template]) => this.ctProcessor.buildList(types, type, templates, template)));\r\n  }\r\n\r\n  init(config: IQuickDialogConfig): Observable<boolean> {\r\n    this.config = config;\r\n    // app-init is ready, if it has an app or doesn't need to init one\r\n    log.add(`initializing with config:${JSON.stringify(config)}`, config);\r\n    const appReady$ = this.app$.pipe(\r\n      map(a => config.isContent || !!a),\r\n      startWith(config.isContent || !config.appId)\r\n    );\r\n\r\n    const typeReady$ = this.type$.pipe(\r\n      map(t => !!t),\r\n      scan((acc, value) => acc || value, !config.contentTypeId)\r\n    );\r\n    const templReady$ = this.template$.pipe(\r\n      map(t => !!t),\r\n      debounceTime(100), // need to debounce, because the template might have a value and change again\r\n      startWith(!config.templateId)\r\n    );\r\n\r\n    const loadAll$ = combineLatest([appReady$, templReady$, typeReady$])\r\n      .pipe(map(set => set[0] && set[1] && set[2]));\r\n\r\n    this.initLogging(appReady$, typeReady$, templReady$, loadAll$);\r\n\r\n    // automatically set the app, type and template\r\n    this.activateCurrentApp(config.appId);\r\n    this.initialTypeId$.next(config.contentTypeId);\r\n    this.initialTemplateId$.next(config.templateId);\r\n\r\n    return loadAll$;\r\n  }\r\n\r\n  private initLogging(inita$: Observable<boolean>,\r\n    inittyp$: Observable<boolean>,\r\n    initt$: Observable<boolean>,\r\n    initAll$: Observable<boolean>): void {\r\n    const slog = log.subLog('stream', DebugConfig.state.streams);\r\n    this.type$.subscribe(t => slog.add(`type$ update:'${t && t.Label}'`, t));\r\n    this.app$.subscribe(a => slog.add(`app$ update:'${a && a.AppId}'`, a));\r\n    this.template$.subscribe(t => slog.add(`template$ update:'${t && t.TemplateId}'`, t));\r\n    this.templates$.subscribe(t => slog.add(`templates$ count:'${t && t.length}'`, t));\r\n    this.types$.subscribe(t => slog.add(`types$ count:'${t && t.length}'`, t));\r\n    this.selectedTemplate$.subscribe(t => slog.add(`selectedTemplate$: ${t && t.TemplateId}`));\r\n\r\n    const initLog = log.subLog('stream-init', DebugConfig.state.inits);\r\n    this.initialTypeId$.subscribe(t => initLog.add(`initial TypeId:'${t}'`, t));\r\n    this.initialTemplateId$.subscribe(t => initLog.add(`initial TemplateId:'${t}'`, t));\r\n    inita$.subscribe(t => initLog.add(`init app$`, t));\r\n    inittyp$.subscribe(t => initLog.add(`init type$`, t));\r\n    initt$.subscribe(t => initLog.add(`init temp$`, t));\r\n    initAll$.subscribe(t => initLog.add(`init all$`, t));\r\n  }\r\n\r\n\r\n\r\n  //#region activate calls from outside\r\n  activateCurrentApp(appId: number) {\r\n    log.add(`activateApp(${appId})`);\r\n    this.appId$.next(appId);\r\n  }\r\n  activateType(contentType: ContentType) {\r\n    log.add(`activateType(${contentType.Name})`);\r\n    this.selectedType$.next(contentType);\r\n  }\r\n  activateTemplate(template: Template) {\r\n    log.add(`activateTemplate(${template.TemplateId})`);\r\n    this.selectedTemplate$.next(template);\r\n  }\r\n  //#endregion\r\n\r\n  private findTemplatesForTypeOrAll(allTemplates: Template[], contentType: ContentType): Template[] {\r\n    return this.templateFilter.transform(allTemplates, { contentType, isContent: this.config.isContent });\r\n  }\r\n\r\n}\r\n","\r\nimport {of as observableOf } from 'rxjs';\r\n\r\nimport {switchMap} from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n@Injectable()\r\nexport class InstallerService {\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ) { }\r\n\r\n  installPackages(packages: any[], step: Function): Observable<any> {\r\n    return packages.reduce((t: Observable<Response>, c) => t.pipe(\r\n        switchMap(() => {\r\n          if (!c.url) return observableOf(true);\r\n          step(c);\r\n          return <Observable<any>>this.http.post(`${Constants.webApiInstallPackage}?packageUrl=${c.url}`, {});\r\n        })), observableOf(true));\r\n  }\r\n}\r\n","\r\nimport { startWith, map, tap } from 'rxjs/operators';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { log } from 'app/core/log';\r\nimport { Constants } from 'app/core/constants';\r\n\r\n@Injectable()\r\nexport class GettingStartedService {\r\n  gettingStarted$: Observable<string>;\r\n  ready$ = new Observable<boolean>();\r\n\r\n  private gettingStartedSubject: Subject<string> = new Subject<string>();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.gettingStarted$ = this.gettingStartedSubject.asObservable();\r\n    this.ready$ = this.gettingStarted$.pipe(\r\n      map(() => true),\r\n      startWith(false));\r\n\r\n    this.ready$.pipe(tap(r => log.add(`ready getting started:${r}`))).subscribe();\r\n  }\r\n\r\n  public loadGettingStarted(isContentApp: boolean): void {\r\n    this.http.get<string>(`${Constants.webApiRemoteInstaller}?isContentApp=${isContentApp}`)\r\n      .subscribe(json => this.gettingStartedSubject.next(json));\r\n  }\r\n\r\n}\r\n","<div class=\"progress\" *ngIf=\"showProgress\">\r\n  <mat-progress-spinner [mode]=\"'indeterminate'\"></mat-progress-spinner>\r\n  <span>Installing {{ currentPackage?.displayName }}..</span>\r\n</div>\r\n<div *ngIf=\"ready\">\r\n  <iframe class=\"fr-getting-started\" id=\"frGettingStarted\" [src]=\"remoteInstallerUrl\" width=\"100%\" height=\"300px\"></iframe>\r\n</div>\r\n","\r\nimport { tap, switchMap, map, filter, debounceTime } from 'rxjs/operators';\r\nimport { Component, OnInit, Input } from '@angular/core';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { GettingStartedService } from './getting-started.service';\r\nimport { Config } from '../config';\r\n\r\ndeclare const $2sxc: any;\r\n\r\n@Component({\r\n  selector: 'app-installer',\r\n  templateUrl: './installer.component.html',\r\n  styleUrls: ['./installer.component.scss']\r\n})\r\nexport class InstallerComponent implements OnInit {\r\n  @Input() isContentApp: boolean;\r\n\r\n  showProgress: boolean;\r\n  currentPackage: any;\r\n  remoteInstallerUrl = '';\r\n  ready = false;\r\n\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private installer: InstallerService,\r\n    private api: GettingStartedService,\r\n    private sanitizer: DomSanitizer,\r\n  ) {\r\n    this.subscriptions.push(\r\n      this.api.gettingStarted$.subscribe(url => {\r\n        this.remoteInstallerUrl = <string>this.sanitizer.bypassSecurityTrustResourceUrl(url);\r\n        this.ready = true;\r\n      }));\r\n\r\n    window.bootController.rebootRequest$.pipe(\r\n      debounceTime(1000))\r\n      .subscribe(() => this.destroy());\r\n  }\r\n\r\n  destroy(): void {\r\n    this.subscriptions\r\n      .forEach(sub => sub.unsubscribe());\r\n    console.log('destroy subs', this.subscriptions);\r\n  }\r\n\r\n  ngOnInit() {\r\n    let alreadyProcessing = false;\r\n    this.api.loadGettingStarted(this.isContentApp);\r\n\r\n    this.subscriptions.push(fromEvent(window, 'message').pipe(\r\n\r\n      // Ensure only one installation is processed.\r\n      filter(() => !alreadyProcessing),\r\n\r\n      // Get data from event.\r\n      map((evt: MessageEvent) => {\r\n        try {\r\n          return JSON.parse(evt.data);\r\n        } catch (e) {\r\n          return void 0;\r\n        }\r\n      }),\r\n\r\n      // Check if data is correct.\r\n      filter(data => data\r\n        && Number(data.moduleId) === Config.moduleId()\r\n        && data.action === 'install'),\r\n\r\n      // Get packages from data.\r\n      map(data => Object.values(data.packages)),\r\n\r\n      // Show confirm dialog.\r\n      filter(packages => {\r\n        const packagesDisplayNames = packages\r\n          .reduce((t, c) => `${t} - ${(c as any).displayName}\\n`, '');\r\n\r\n        const msg = `Do you want to install these packages?\r\n\r\n${packagesDisplayNames}\r\nThis takes about 10 seconds per package. Don't reload the page while it's installing.`;\r\n        return confirm(msg);\r\n      }),\r\n\r\n      switchMap(packages => {\r\n        alreadyProcessing = true;\r\n        this.showProgress = true;\r\n        return this.installer.installPackages(packages, p => this.currentPackage = p);\r\n      }),\r\n\r\n      tap(() => {\r\n        this.showProgress = false;\r\n        alert('Installation complete 👍');\r\n        window.top.location.reload();\r\n      }))\r\n\r\n      .subscribe(null, () => {\r\n        this.showProgress = false;\r\n        alert('An error occurred.');\r\n        alreadyProcessing = false;\r\n      }));\r\n  }\r\n}\r\n","\r\n<div class=\"content\">\r\n\r\n  <!-- debug info section -->\r\n  <div *ngIf=\"showDebug\">\r\n    <h4>Debug 2sxc 11 / ng 11</h4>\r\n    <ul>\r\n      <li>Types: {{ types?.length }}, current: {{contentType?.StaticName}}</li>\r\n      <li>Apps: {{ (apps$ | async)?.length }}, current: {{app?.AppId }} </li>\r\n      <li>Templates: {{templates?.length}}, current: {{template?.TemplateId}}</li>\r\n      <li>Config: isContent='{{isContent}}' Ready: {{ready}} </li>\r\n      <li>Tab to show: '{{tabIndex}}' / preventTypeSwitch '{{preventTypeSwitch}}' / preventAppSwitch '{{preventAppSwich}}'</li>\r\n    </ul>\r\n  </div>\r\n\r\n  <!-- loading indicator -->\r\n  <mat-progress-bar [ngStyle]=\"{ opacity: ready ? 0 : 1 }\" [mode]=\"'indeterminate'\"></mat-progress-bar>\r\n\r\n  <!-- main dialog, starting with save/cancel button -->\r\n  <div class=\"card\"\r\n    [ngClass]=\"{ blocked: !ready }\"\r\n  >\r\n    <div class=\"top-controls\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\r\n      <button mat-fab *ngIf=\"template\" (click)=\"persistTemplate(template)\" [attr.title]=\"'TemplatePicker.Save' | translate\">\r\n        <mat-icon>check</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab class=\"secondary\" *ngIf=\"showCancel\" (click)=\"cancel()\" [attr.title]=\"('TemplatePicker.' + (isContent ? 'Cancel' : 'Close')) | translate\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n    <!-- tabs -->\r\n    <mat-tab-group [(selectedIndex)]=\"tabIndex\">\r\n      <mat-tab>\r\n        <ng-template mat-tab-label>\r\n          {{(isContent\r\n            ? (contentType?.Name || ('TemplatePicker.ContentTypePickerDefault' | translate))\r\n            : (app?.Name || ('TemplatePicker.AppPickerDefault' | translate)))}}\r\n        </ng-template>\r\n\r\n        <!-- App Selector -->\r\n        <div *ngIf=\"!isContent; else contentApp\" class=\"tiles\">\r\n\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: app?.AppId === a.AppId, blocked: preventTypeSwitch }\"\r\n            [attr.title]=\"a.Name\"\r\n            (click)=\"selectApp(app, a)\"\r\n            (dblclick)=\"switchTab()\" *ngFor=\"let a of apps$ | async\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"a.Thumbnail !== null && a.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"a.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"a.Thumbnail === null || a.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon>star</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"version\"><span>v{{a.VersionMain}}</span></div>\r\n\r\n            <div class=\"title\" [ngClass]=\"{ show: a.Thumbnail === null || a.Thumbnail === '' }\">\r\n              <span>{{a.Name}}</span>\r\n            </div>\r\n          </div>\r\n\r\n          <!-- install and manage buttons -->\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('app-import')\" [attr.title]=\"'TemplatePicker.Install' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>get_app</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Install\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced\" (click)=\"run('zone')\" [attr.title]=\"'TemplatePicker.Zone' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>apps</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.Zone\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Content-Type selection (when not a generic app, but the default content-app -->\r\n        <ng-template #contentApp>\r\n          <div class=\"tiles\">\r\n            <div mat-button class=\"tile\"\r\n              [ngClass]=\"{ active: contentType?.StaticName === c.StaticName, blocked: preventTypeSwitch }\"\r\n              [attr.title]=\"(c.Label | translate) + (showDebug ? ' (' + c.StaticName + ')' : '')\"\r\n              (click)=\"selectContentType(contentType, c)\"\r\n              (dblclick)=\"switchTab()\"\r\n              *ngFor=\"let c of types\"\r\n            >\r\n              <div class=\"bg\">\r\n                <img *ngIf=\"c.Thumbnail !== null && c.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"c.Thumbnail + '?w=176&h=176'\">\r\n                <div *ngIf=\"c.Thumbnail === null || c.Thumbnail === ''\" class=\"bg-icon\">\r\n                  <mat-icon>bubble_chart</mat-icon>\r\n                </div>\r\n              </div>\r\n              <div class=\"title\" [ngClass]=\"{ show: c.Thumbnail === null || c.Thumbnail === '' }\">\r\n                <span>{{c.Label}}</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </ng-template>\r\n      </mat-tab>\r\n\r\n      <!-- template selection after app/content-type selection -->\r\n      <mat-tab *ngIf=\"isContent ? contentType : app\" [label]=\"('TemplatePicker.ChangeView' | translate) + '(' + templates.length + ')'\">\r\n        <div class=\"tiles\">\r\n          <mat-spinner class=\"templates-spinner\" *ngIf=\"templatesLoading$ | async\"></mat-spinner>\r\n          <div class=\"tile\"\r\n            [ngClass]=\"{ active: template?.TemplateId === t.TemplateId }\"\r\n            [attr.title]=\"t.Name + (showDebug ? ' (' + t.TemplateId + ')' : '')\"\r\n            (click)=\"selectTemplate(t)\"\r\n            *ngFor=\"let t of templates\">\r\n            <div class=\"bg\">\r\n              <img *ngIf=\"t.Thumbnail !== null && t.Thumbnail !== ''\" class=\"bg-img\" [attr.src]=\"t.Thumbnail + '?w=176&h=176'\">\r\n              <div *ngIf=\"t.Thumbnail === null || t.Thumbnail === ''\" class=\"bg-icon\">\r\n                <mat-icon *ngIf=\"isContent\">view_carousel</mat-icon>\r\n                <mat-icon *ngIf=\"!isContent\">view_quilt</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title\" [ngClass]=\"{ show: t.Thumbnail === null || t.Thumbnail === '' }\">\r\n              <span>{{t.Name}}</span>\r\n            </div>\r\n          </div>\r\n          <div class=\"tile config\" *ngIf=\"showAdvanced && !isContent && app?.AppId !== null\" (click)=\"run('app')\" [attr.title]=\"'TemplatePicker.App' | translate\">\r\n            <div class=\"bg\">\r\n              <div class=\"bg-icon\">\r\n                <mat-icon>settings</mat-icon>\r\n              </div>\r\n            </div>\r\n            <div class=\"title show\">\r\n              <span>{{\"TemplatePicker.App\" | translate}}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </mat-tab>\r\n    </mat-tab-group>\r\n\r\n    <span class=\"no-install-allowed\" *ngIf=\"isBadContextForInstaller && showInstaller\">No {{isContent ? 'Content Apps' : 'Apps'}} installed yet. Please persue the installation by creating a new {{isContent ? 'Content' : 'App'}} in the root of your website.</span>\r\n    <app-installer *ngIf=\"!isBadContextForInstaller && showInstaller\" [isContentApp]=\"isContent\"></app-installer>\r\n  </div>\r\n</div>\r\n","\r\nimport {merge, combineLatest,  timer } from 'rxjs';\r\nimport {filter, startWith, skipUntil, map} from 'rxjs/operators';\r\nimport { Component, ChangeDetectorRef, OnInit } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { App } from 'app/core/app';\r\nimport { Template } from 'app/template-picker/template';\r\nimport { ContentType } from 'app/template-picker/content-type';\r\nimport { cAppActionImport } from './constants';\r\nimport { log as parentLog, Log } from 'app/core/log';\r\nimport { PickerService } from './picker.service';\r\nimport { CurrentDataService } from './current-data.service';\r\nimport { DebugConfig } from 'app/debug-config';\r\nimport { BehaviorObservable } from 'app/core/behavior-observable';\r\nimport { IDialogFrameElement, IIFrameBridge, IQuickDialogConfig } from 'app/interfaces/shared';\r\nimport { BackendSettings } from '../core/backend-settings';\r\n\r\nconst log = parentLog.subLog('picker', DebugConfig.picker.enabled);\r\n\r\n@Component({\r\n  selector: 'app-template-picker',\r\n  templateUrl: './template-picker.component.html',\r\n  styleUrls: ['./template-picker.component.scss'],\r\n})\r\nexport class TemplatePickerComponent implements OnInit {\r\n  // #region properties\r\n  /** Stream of all apps */\r\n  apps$: Observable<App[]>;\r\n\r\n  /** is cancelling possible */\r\n  showCancel = true;\r\n\r\n  /** is in the main content-app or a generic app */\r\n  isContent: boolean;\r\n\r\n  /** show advanced features (admin/host only) */\r\n  showAdvanced = false;\r\n\r\n  /** show the installer */\r\n  showInstaller = false;\r\n\r\n  /** Stream to indicate ready, for loading-indicator */\r\n  ready$: Observable<boolean>;\r\n  templatesLoading$: Observable<boolean>;\r\n\r\n  /** Tab-id, when we set it, the tab switches */\r\n  tabIndex = 0;\r\n\r\n  /** Indicate if the user is allowed to change content-types or not */\r\n  preventTypeSwitch: boolean;\r\n\r\n  /** Indicates whether the installer can be shown in this dialog or not */\r\n  isBadContextForInstaller = false;\r\n\r\n  /** The communication-object to the parent */\r\n  private bridge: IIFrameBridge;\r\n\r\n  /** internal loading state */\r\n  private loading$ = BehaviorObservable.create<boolean>(false);\r\n\r\n  /** Ajax-support changes how saving/changing is handled */\r\n  private supportsAjax: boolean;\r\n\r\n  preventAppSwich = false;\r\n\r\n  public showDebug = DebugConfig.picker.showDebugPanel;\r\n  // #endregion\r\n\r\n  // #region data to show - using local variables, because streams didn't update correctly :(\r\n  app: App;\r\n  templates: Template[];\r\n  template: Template;\r\n  contentType: ContentType;\r\n  types: ContentType[];\r\n  ready = false;\r\n  //#endregion\r\n\r\n  constructor(\r\n    private backendSettings: BackendSettings,\r\n    private api: PickerService,\r\n    public state: CurrentDataService,\r\n    private cdRef: ChangeDetectorRef\r\n  ) {\r\n    // get configuration from iframe-bridge and set everything\r\n    this.bridge = (<IDialogFrameElement>window.frameElement).bridge;\r\n    const dashInfo = this.bridge.getAdditionalDashboardConfig();\r\n\r\n    this.boot(dashInfo);\r\n    this.debugObservables();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.autosyncObservablesToEnsureUiUpdates();\r\n  }\r\n\r\n\r\n  private boot(dashInfo: IQuickDialogConfig) {\r\n    this.showDebug = dashInfo.debug;\r\n    Log.configureRuntimeLogging(dashInfo.debug);\r\n\r\n    // Make sure we have the latest backend settings\r\n    this.backendSettings.setApp(dashInfo.appId);\r\n    this.backendSettings.data.subscribe(settings => {\r\n      this.showAdvanced = settings.Enable?.CodeEditor ?? false;\r\n    });\r\n\r\n    // start data-loading\r\n    this.api.initLoading(!dashInfo.isContent);\r\n\r\n    // init parts, variables, observables\r\n    const initDone$ = this.state.init(dashInfo);\r\n    this.initObservables(initDone$);\r\n    this.initValuesFromBridge(dashInfo);\r\n    this.loading$.next(false);\r\n  }\r\n\r\n  private debugObservables() {\r\n    if (!DebugConfig.picker.streams) return;\r\n    this.loading$.subscribe(l => log.add(`loading$:${l}`));\r\n    this.ready$.subscribe(r => log.add(`ready$:${r}`));\r\n  }\r\n\r\n  /**\r\n   * wire up observables for this component\r\n   */\r\n  private initObservables(initDone$: Observable<boolean>): void {\r\n    const initTrue$ = initDone$.pipe(filter(t => !!t));\r\n\r\n    // wire up basic observables\r\n    this.ready$ = combineLatest([this.api.ready$, this.loading$])\r\n      .pipe(map(([r, l]) => r && !l));\r\n\r\n    // all apps are the same as provided by the api\r\n    this.apps$ = this.api.apps$;\r\n\r\n    // if the content-type or app is set, switch tabs (ignore null/empty states)\r\n    const typeOrAppReady = merge(this.state.type$, this.state.app$)\r\n      .pipe(filter(t => !!t));\r\n    combineLatest([typeOrAppReady, initTrue$])\r\n      .subscribe(_ => this.switchTab());\r\n\r\n    // once the data is known, check if installer is needed\r\n    combineLatest([this.api.templates$,\r\n      this.api.contentTypes$,\r\n      this.api.apps$,\r\n      this.api.ready$.pipe(filter(r => !!r))])\r\n      .pipe(\r\n        map(([templates, _, apps, _2]) => {\r\n          log.add('apps/templates loaded, will check if we should show installer');\r\n          this.showInstaller = this.isContent\r\n            ? templates.length === 0\r\n            : apps.filter(a => a.AppId !== cAppActionImport).length === 0;\r\n        }))\r\n      .subscribe();\r\n\r\n    // template loading is true, when the template-list or selected template are not ready\r\n    this.templatesLoading$ = combineLatest([this.state.templates$, this.state.template$])\r\n      .pipe(\r\n        map(([all, selected]) => !(all && selected)),\r\n        startWith(false)\r\n      );\r\n\r\n    // whenever the template changes, ensure the preview reloads\r\n    // but don't do this when initializing, that's why we listen to initDone$\r\n    this.state.template$.pipe(\r\n      filter(t => !!t),\r\n      skipUntil(initTrue$))\r\n      .subscribe(t => this.previewTemplate(t));\r\n  }\r\n\r\n  /** The UI doesn't update reliably :(, so we copy the data to local variables */\r\n  private autosyncObservablesToEnsureUiUpdates(): any {\r\n    this.state.app$.subscribe(a => this.app = a);\r\n    this.state.templates$.subscribe(t => this.templates = t);\r\n    this.state.template$.subscribe(t => this.template = t);\r\n    this.state.types$.subscribe(t => this.types = t);\r\n    this.state.type$.subscribe(t => this.contentType = t);\r\n\r\n    this.ready$.subscribe(r => this.ready = r);\r\n    merge(\r\n      this.ready$,\r\n      this.state.app$,\r\n      this.state.type$,\r\n      this.state.types$,\r\n      this.state.template$,\r\n      this.state.templates$,\r\n      ).subscribe(() => this.cdRef.detectChanges());\r\n  }\r\n\r\n\r\n  private initValuesFromBridge(config: IQuickDialogConfig): void {\r\n    this.preventTypeSwitch = config.hasContent;\r\n    this.isBadContextForInstaller = config.isInnerContent;\r\n    this.isContent = config.isContent;\r\n    this.supportsAjax = this.isContent || config.supportsAjax;\r\n    this.preventAppSwich = config.hasContent;\r\n    this.showCancel = config.templateId != null;\r\n  }\r\n\r\n  //#region basic UI action binding\r\n  cancel(): void { this.bridge.cancel(); }\r\n\r\n  run(action: string): void { this.bridge.run(action); }\r\n\r\n  persistTemplate(template: Template) { this.bridge.setTemplate(template.TemplateId, template.Name, true); }\r\n\r\n  /**\r\n   * app selection from UI\r\n   */\r\n  selectApp(before: App, after: App): void {\r\n    console.log('selectApp()');\r\n    if (before && before.AppId === after.AppId) this.switchTab();\r\n    else this.updateApp(after);\r\n  }\r\n\r\n  /**\r\n   * content-type selection from UI\r\n   */\r\n  selectContentType(before: ContentType, after: ContentType): void {\r\n    if (before && before.StaticName === after.StaticName) this.switchTab();\r\n    else this.setContentType(after);\r\n  }\r\n\r\n  /**\r\n   * activate a template from the UI\r\n   */\r\n  selectTemplate(template: Template): void {\r\n    this.state.activateTemplate(template);\r\n  }\r\n  //#endregion\r\n\r\n  private setContentType(contentType: ContentType): void {\r\n    log.add(`select content-type '${contentType.Name}'; prevent: ${this.preventTypeSwitch}`);\r\n    if (this.preventTypeSwitch) return;\r\n    this.state.activateType(contentType);\r\n  }\r\n\r\n  switchTab() {\r\n    log.add('switchTab()');\r\n    // must delay change because of a bug in the tabs-updating\r\n    timer(100).toPromise().then(_ => this.tabIndex = 1);\r\n  }\r\n\r\n\r\n  private updateApp(newApp: App): void {\r\n    // ajax-support can change as apps are changed; for ajax, maybe both the previous and new must support it\r\n    // or just new? still WIP\r\n    const ajax = newApp.SupportsAjaxReload;\r\n    log.add(`changing app to ${newApp.AppId}; prevent-switch: ${this.preventAppSwich} use-ajax:${ajax}`);\r\n    if (this.preventAppSwich) return;\r\n\r\n\r\n    this.loading$.next(true);\r\n    this.bridge.showMessage('loading App...');\r\n    const savePromise = this.api.saveAppId(newApp.AppId.toString(), ajax);\r\n\r\n    if (ajax) {\r\n      savePromise.then(() => {\r\n        log.add('saved app, will reset some stuff');\r\n        // do this after save completed, to ensure that the module is ready on the server\r\n        log.add('calling reloadAndReInit()');\r\n        this.bridge.reloadAndReInit()\r\n          .then(newConfig => this.boot(newConfig));\r\n      });\r\n    } else {\r\n      savePromise.then(() => window.parent.location.reload());\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  private previewTemplate(t: Template): void {\r\n    log.add(`previewTemplate(${t.TemplateId}), ajax is ${this.supportsAjax}`);\r\n    this.loading$.next(true);\r\n    this.bridge\r\n      .setTemplate(t.TemplateId, t.Name, false)\r\n      .then(_ => this.loading$.next(false));\r\n  }\r\n\r\n}\r\n","import { TranslateService } from '@ngx-translate/core';\r\nimport { Component, ElementRef } from '@angular/core';\r\nimport { DnnAppComponent, Context } from '@2sic.com/dnn-sxc-angular';\r\nimport { Config } from './config';\r\nimport { SupportedLanguages, langCode2, PrimaryUiLanguage } from './i18n';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BackendSettings } from './core/backend-settings';\r\n\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent extends DnnAppComponent {\r\n  constructor(\r\n    public translate: TranslateService,\r\n    el: ElementRef,\r\n    context: Context,\r\n    backendSettings: BackendSettings,\r\n  ) {\r\n    super(el, context.preConfigure({ sxc: Config.getSxcInstance() }), false);\r\n    translate.addLangs(SupportedLanguages);\r\n\r\n    backendSettings.setApp(Config.appId());\r\n\r\n    backendSettings.data\r\n      .subscribe(ctxDto => {\r\n        const lang = ctxDto.Language;\r\n        translate.setDefaultLang(PrimaryUiLanguage);\r\n        translate.use(langCode2(lang.Current));\r\n      });\r\n  }\r\n}\r\n","\r\nexport * from './constants';\r\n\r\n\r\nexport function langCode2(langCode5: string) {\r\n  return langCode5.split('-')[0];\r\n}\r\n","<app-template-picker></app-template-picker>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpClientModule } from '@angular/common/http';\r\nimport { GettingStartedService } from 'app/installer/getting-started.service';\r\nimport { PickerService } from 'app/template-picker/picker.service';\r\nimport { CurrentDataService } from 'app/template-picker/current-data.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  declarations: [],\r\n  providers: [\r\n    GettingStartedService,\r\n    PickerService,\r\n    CurrentDataService,\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { InstallerComponent } from './installer.component';\r\nimport { InstallerService } from 'app/installer/installer.service';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  exports: [\r\n    InstallerComponent\r\n  ],\r\n  declarations: [\r\n    InstallerComponent\r\n  ],\r\n  providers: [\r\n    InstallerService\r\n  ]\r\n})\r\nexport class InstallerModule { }","import { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\n\r\nconst MATERIAL_MODULES = [\r\n  MatButtonModule,\r\n  MatDialogModule,\r\n  MatExpansionModule,\r\n  MatIconModule,\r\n  MatProgressBarModule,\r\n  MatProgressSpinnerModule,\r\n  MatTabsModule,\r\n  MatToolbarModule,\r\n];\r\n\r\n@NgModule({\r\n  imports: MATERIAL_MODULES,\r\n  exports: MATERIAL_MODULES,\r\n})\r\n\r\nexport class MaterialModule { }\r\n","import { TranslateModule } from '@ngx-translate/core';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressBarModule } from '@angular/material/progress-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TemplatePickerComponent } from './template-picker.component';\r\nimport { TemplateFilterPipe } from './template-filter.pipe';\r\nimport { CoreModule } from 'app/core/core.module';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { InstallerModule } from 'app/installer/installer.module';\r\nimport { DebugPipe } from './debug.pipe';\r\nimport { ContentTypesProcessor } from './data/content-types-processor.service';\r\nimport { MaterialModule } from 'app/material-module';\r\n\r\n@NgModule({\r\n  exports: [\r\n    TemplatePickerComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    BrowserAnimationsModule,\r\n    MatMenuModule,\r\n    MatTabsModule,\r\n    MaterialModule,\r\n    MatProgressBarModule,\r\n    CoreModule,\r\n    FormsModule,\r\n    FlexLayoutModule,\r\n    InstallerModule,\r\n    TranslateModule\r\n  ],\r\n  providers: [\r\n    TemplateFilterPipe,\r\n    ContentTypesProcessor\r\n  ],\r\n  declarations: [\r\n    TemplatePickerComponent,\r\n    TemplateFilterPipe,\r\n    DebugPipe,\r\n  ]\r\n})\r\nexport class TemplatePickerModule { }\r\n","import { TranslateHttpLoader } from '@ngx-translate/http-loader';\r\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DnnInterceptor } from '@2sic.com/dnn-sxc-angular';\r\nimport { AppComponent } from './app.component';\r\nimport { TemplatePickerModule } from 'app/template-picker/template-picker.module';\r\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\r\nimport { MaterialModule } from './material-module';\r\nimport { log } from './core/log';\r\nimport { pathToI18n, i18nExtension } from './i18n';\r\n\r\nexport function HttpLoaderFactory(http: HttpClient) {\r\n  const loader = new TranslateHttpLoader(http, pathToI18n, i18nExtension);\r\n  log.add('created translate-loader', loader);\r\n  return loader;\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  exports: [ ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    FormsModule,\r\n    TemplatePickerModule,\r\n    TranslateModule.forRoot({\r\n      loader: {\r\n        provide: TranslateLoader,\r\n        useFactory: HttpLoaderFactory,\r\n        deps: [HttpClient]\r\n      }\r\n    }),\r\n    MaterialModule, // must be after BrowserModule\r\n  ],\r\n  providers: [DnnInterceptor],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","\r\nimport { startWith } from 'rxjs/operators';\r\nimport { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\nimport { BootController } from './app/core/boot-control';\r\nimport { log } from 'app/core/log';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nlog.add('loading main.ts');\r\n\r\ndeclare const window;\r\nconst platform = platformBrowserDynamic();\r\n\r\nfunction init() {\r\n  log.add('init()');\r\n\r\n  try {\r\n    // kill listeners\r\n    if (!platform.destroyed)\r\n      platform.destroy();\r\n  } catch (e) {\r\n    console.log('platform destroy error', e);\r\n  }\r\n\r\n  // must re-create the object here, otherwise AOT compiler optimizations\r\n  // break these lines of code\r\n  platformBrowserDynamic().bootstrapModule(AppModule)\r\n    .then(() => window.appBootstrap && window.appBootstrap())\r\n    .catch(err => console.error('NG Bootstrap Error =>', err));\r\n}\r\n\r\n\r\n// provide hook for outside reboot calls\r\nconst bootController = window.bootController = BootController.getRebootController();\r\n\r\n// Init on reboot request.\r\nbootController.rebootRequest$.pipe(\r\n  startWith(true)) // Init on first load.\r\n  .subscribe(() => init());\r\n"],"sourceRoot":"webpack:///"}