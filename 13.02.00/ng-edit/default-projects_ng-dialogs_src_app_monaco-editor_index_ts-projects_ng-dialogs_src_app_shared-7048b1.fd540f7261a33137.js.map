{"version":3,"mappings":"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","names":["MonacoEditorModule","_","CommonModule","voidElements","split","map","el","trim","toLocaleLowerCase","MonacoInstance","monaco","filename","value","container","options","snippets","m","this","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","saveState","disconnect","forEach","completionItemProvider","dispose","getModel","setValue","focus","callback","valueChangedCallback","focusedCallback","blurredCallback","snippet","getContribution","insert","jsonSchema","uri","toString","jsonDiagnostics","Object","languages","json","jsonDefaults","diagnosticsOptions","enableSchemaRequest","exists","schemas","some","schema","fileMatch","e","newSchema","type","JSON","parse","filter","setDiagnosticsOptions","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","create","editorModelUri","Uri","file","editorModel","createModel","undefined","setModel","viewState","stringify","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getModeId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","length","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","includes","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","n","word","getWordUntilPosition","content","name","documentation","I","title","_a","b","help","_b","E","links","_c","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","t","onDidFocusEditorWidget","onDidBlurEditorWidget","a","MonacoEditorComponent","EventEmitter","window","require","config","paths","vs","createEditor","autoFocus","changes","monacoInstance","destroy","updateValue","o","setJsonSchema","v","setSnippets","insertSnippet","editorRef","nativeElement","onValueChange","valueChanged","emit","onFocus","focused","onBlur","blurred","s","selectors","i0","ToggleDebugDirective","globalConfigService","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","r","ctx","SafeHtmlPipe","sanitizer","html","bypassSecurityTrustHtml","pure","factory","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","http","prefix","suffix","lang","get","concat","pipe","catchError","console","warn","error","of"],"sources":["./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-instance.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.html","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import { JsonSchema, Monaco2sxc, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: MonacoType;\r\n  private completionItemProviders: MonacoType[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: MonacoType,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: MonacoType,\r\n    private snippets: Snippet[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => {\r\n      completionItemProvider.dispose();\r\n    });\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance.getContribution('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      enableSchemaRequest: true,\r\n    };\r\n    const exists = jsonDiagnostics.schemas.some((schema: MonacoType) => schema.fileMatch[0] === uri);\r\n\r\n    if (jsonSchema?.value) {\r\n      const newSchema = jsonSchema.type === 'link'\r\n        ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n        : { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) };\r\n\r\n      jsonDiagnostics.schemas = exists\r\n        ? jsonDiagnostics.schemas.map((schema: MonacoType) => schema.fileMatch[0] === uri ? newSchema : schema)\r\n        : [...jsonDiagnostics.schemas, newSchema];\r\n    } else {\r\n      if (!exists) { return; }\r\n      jsonDiagnostics.schemas = jsonDiagnostics.schemas.filter((schema: MonacoType) => schema.fileMatch[0] !== uri);\r\n    }\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: MonacoType): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: MonacoType): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n    });\r\n  }\r\n\r\n  private createInstance(monaco: MonacoType, filename: string, value: string, container: HTMLElement, options: MonacoType): MonacoType {\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    // editorInstance.updateOptions({ readOnly: true })\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.itextmodelupdateoptions.html\r\n    // editorInstance.getModel().updateOptions({ tabSize: 2 });\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: MonacoType, editorInstance: MonacoType): MonacoType[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const range = {\r\n            startLineNumber: position.lineNumber,\r\n            endLineNumber: position.lineNumber,\r\n            startColumn: word.startColumn,\r\n            endColumn: word.endColumn\r\n          };\r\n          // kind and rule copied from:\r\n          // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            return {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range,\r\n            };\r\n          }).filter(snippet => !!snippet);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      // monaco.languages.registerHoverProvider(editorInstance.getModel().getModeId(), {\r\n      //   provideHover: (model: MonacoType, position: MonacoType) => {\r\n      //     const word = model.getWordAtPosition(position);\r\n      //     if (!word) { return; }\r\n      //     // const range = {\r\n      //     //   startLineNumber: position.lineNumber,\r\n      //     //   endLineNumber: position.lineNumber,\r\n      //     //   startColumn: word.startColumn,\r\n      //     //   endColumn: word.endColumn,\r\n      //     // };\r\n      //     if (word.word.toLocaleLowerCase() === '2sxc') {\r\n      //       const contents = [\r\n      //         { value: '2sxc - Dynamic Content and Apps for DNN' },\r\n      //         { value: '[2sxc - Dynamic Content and Apps for DNN](https://2sxc.org)' },\r\n      //         { value: '**BOLD**  \\nLine2' },\r\n      //       ];\r\n      //       return { /*range,*/ contents };\r\n      //     }\r\n      //   }\r\n      // }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: MonacoType): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: MonacoType): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations((e: any) => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     (marker: any) => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { JsonSchema, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() options?: Record<string, any>;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: MonacoType;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n    );\r\n\r\n    if (this.jsonSchema) {\r\n      this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    }\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_ng-dialogs_src_app_monaco-editor_index_ts-projects_ng-dialogs_src_app_shared-7048b1.fd540f7261a33137.js"}