{"version":3,"mappings":"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","names":["ContentExportService","context","dnnContext","E","this","values","selectedIds","selectedIdsString","join","url","$2sxc","http","apiUrl","webApiEntityRoot","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","typeName","webApiTypeRoot","id","prefix","metadata","c","i0","factory","ContentItemsService","get","webApiEntityList","params","toString","contentType","webApiFieldsAll","staticName","file","from","toBase64","pipe","mergeMap","f","post","AppId","ContentBase64","fileBase64","a","EntitiesService","entity","zoneId","entityId","type","tryForce","delete","force","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"sources":["./projects/ng-dialogs/src/app/content-export/services/content-export.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/content-items/services/entities.service.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../../../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { InnerItem } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: InnerItem;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-export_services_content-export_service_ts-projects_ng-dia-58abb1.9c3052c0f7be922b.js"}