{"version":3,"mappings":"mRAQaA,EAAb,eAAaA,EAAb,WACE,WAAoBC,EAA0BC,EAA0BC,IAAsB,eAA1EC,YAA0BA,eAA0BA,kBAD1E,qCAGE,SAAgBC,EAAqBC,GACnC,OAAOF,KAAKH,KAAKM,KAAV,wBAAmCF,GAAeC,EAAQ,CAC/DE,OAAQ,CAAEC,MAAOL,KAAKF,QAAQO,MAAOC,OAAQN,KAAKF,QAAQQ,YALhE,oBASE,SAAOC,EAAcC,EAAYC,GAC/B,OAAOT,KAAKH,KAAKa,OAAaV,KAAKD,WAAWY,MAAMd,KAAKe,OAAOC,KAAmB,UAAW,CAC5FT,OAAQ,CAAEH,YAAaM,EAAMC,GAAIA,EAAGM,WAAYT,MAAOL,KAAKF,QAAQO,MAAMS,WAAYC,MAAON,EAASK,kBAX5GE,kDAAapB,GAAeqB,+DAAfrB,EAAesB,QAAftB,EAAe,YAAfA,EAAb,0FCNauB,EAAkC,CAC7CC,KAAM,yBACNC,aAAa,EACbC,UAAW,QACXC,WAAY,KAENC,aANuC,mJAOJC,+UAA/BC,sBACDA,2KCJLC,EAAiB,CACrB,CACEC,KAAM,GAAIC,UAAWC,IAAsBC,KAAM,CAAEC,OAAQb,KAAqBc,SAAU,CACxF,CACEC,QAASC,KACTC,aAAc,kBAAMX,o2BAAuCY,KAAK,YAAC,OAAIC,EAAEC,eAEzE,CACEL,QAASM,KACTJ,aAAc,kBAAMK,iEAA+CJ,KAAK,YAAC,OAAIC,EAAEI,yBAU1EC,EAAb,eAAaA,KAAbC,iFAAaD,4DAHF,CAACE,cAAsBlB,IACtBkB,QAECF,EAAb,oPCeaG,EAAb,eAAaA,KAAbF,iFAAaE,6DAPA,CACTC,IACAC,IACAC,IACArD,KACDsD,SAhBQ,CACPC,KACAR,IACAS,IACAC,KACAC,KACAC,KACAC,oBAA4B,IAC5BC,KACAC,SASSZ,EAAb,yHC7BaG,EAAb,eAAaA,EAAb,WACE,WAAoBpD,EAA0BC,EAA0BC,IAAsB,eAA1EC,YAA0BA,eAA0BA,kBAD1E,0CAUE,SAAY2D,EAAoBC,EAA0BC,EAAsBC,GAC9E,OAAO9D,KAAKH,KAAKkE,IAAc/D,KAAKD,WAAWY,MAAMd,KAAKe,OAd3C,sBAc+D,CAC5ER,OAAM4D,eACJ3D,MAAOL,KAAKF,QAAQO,MAAMS,WAC1B6C,WAAYA,EAAW7C,WACvB8C,UACAC,IAAKA,EAAI/C,YACLgD,GAAmB,CAAE7D,YAAa6D,UAjB9C9C,kDAAaiC,GAAehC,+DAAfgC,EAAe/B,QAAf+B,EAAe,YAAfA,EAAb,kICFaD,EAAb,eAAaA,EAAb,WACE,WAAoBiB,EAA0CC,MAAgCtB,aAA1E5C,uBAA0CA,uBADhE,qCAGE,SAAO2D,EAAoBC,EAA0BC,GACnD,OAAO7D,KAAKiE,gBAAgBE,YAAYR,EAAYC,EAASC,EAAKO,8BAAuCC,MACvGC,OAAI,YAAQ,OAAIC,EAASC,WAL/B,oBASE,SAAOhE,GACL,OAAOR,KAAKkE,gBAAgBxD,OAAO0D,6BAAuC5D,GAAI,OAVlFQ,kDAAagC,GAAkB/B,kDAAlB+B,EAAkB9B,QAAlB8B,EAAkB,YAAlBA,EAAb","names":["EntitiesService","http","context","dnnContext","this","contentType","entity","post","params","appId","zoneId","type","id","tryForce","delete","$2sxc","apiUrl","webApiEntityRoot","toString","force","n","i0","factory","permissionsDialog","name","initContext","panelSize","panelClass","getComponent","Promise","PermissionsComponent","routes","path","component","DialogEntryComponent","data","dialog","children","matcher","edit","loadChildren","then","m","EditModule","refreshEdit","t","RefreshEditModule","PermissionsRoutingModule","u","RouterModule","PermissionsModule","Context","PermissionsService","MetadataService","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","AgGridModule","MatRippleModule","MatSnackBarModule","targetType","keyType","key","contentTypeName","get","Object","metadataService","entitiesService","getMetadata","eavConstants","pipe","map","metadata","Items"],"sources":["./projects/ng-dialogs/src/app/content-items/services/entities.service.ts","./projects/ng-dialogs/src/app/permissions/permissions-dialog.config.ts","./projects/ng-dialogs/src/app/permissions/permissions-routing.module.ts","./projects/ng-dialogs/src/app/permissions/permissions.module.ts","./projects/ng-dialogs/src/app/permissions/services/metadata.service.ts","./projects/ng-dialogs/src/app/permissions/services/permissions.service.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = any>(contentType: string, entity: Record<string, any>): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const permissionsDialog: DialogConfig = {\r\n  name: 'SET_PERMISSIONS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { PermissionsComponent } = await import('./permissions.component');\r\n    return PermissionsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { permissionsDialog } from './permissions-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: permissionsDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PermissionsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { PermissionsActionsComponent } from './ag-grid-components/permissions-actions/permissions-actions.component';\r\nimport { PermissionsRoutingModule } from './permissions-routing.module';\r\nimport { PermissionsComponent } from './permissions.component';\r\nimport { MetadataService } from './services/metadata.service';\r\nimport { PermissionsService } from './services/permissions.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PermissionsComponent,\r\n    PermissionsActionsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PermissionsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    PermissionsService,\r\n    MetadataService,\r\n    EntitiesService,\r\n  ]\r\n})\r\nexport class PermissionsModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Metadata } from '../../metadata';\r\nimport { MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nconst webApiRoot = 'admin/metadata/get';\r\n\r\n@Injectable()\r\nexport class MetadataService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Fetches metadata for given key in metadata content type\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n  getMetadata(targetType: number, keyType: MetadataKeyType, key: string | number, contentTypeName?: string): Observable<Metadata> {\r\n    return this.http.get<Metadata>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot), {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        targetType: targetType.toString(),\r\n        keyType,\r\n        key: key.toString(),\r\n        ...(contentTypeName && { contentType: contentTypeName }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { EntitiesService } from '../../content-items/services/entities.service';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { Permission } from '../models/permission.model';\r\nimport { MetadataService } from './metadata.service';\r\n\r\n@Injectable()\r\nexport class PermissionsService {\r\n  constructor(private metadataService: MetadataService, private entitiesService: EntitiesService) { }\r\n\r\n  getAll(targetType: number, keyType: MetadataKeyType, key: string): Observable<Permission[]> {\r\n    return this.metadataService.getMetadata(targetType, keyType, key, eavConstants.contentTypes.permissions).pipe(\r\n      map(metadata => metadata.Items as Permission[]),\r\n    );\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.entitiesService.delete(eavConstants.contentTypes.permissions, id, false);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_permissions_permissions_module_ts.2c5d202945a67952.js"}