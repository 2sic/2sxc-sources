{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts-projects_eav-ui_src_app_shar-d0da70.8792b7f4032d2e61.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","EntityFilterComponent","constructor","filter","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","includes","items","headerName","idFltr","itm","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","core","VBU","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","MatInputModule","i3","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","TippyDirective","ctx_r1","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","valid","CreateMetadataDialogComponent","BaseComponent","dialogRef","super","hostClass","contentItemsService","transient","ContentItemsService","contentTypesService","ngOnInit","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","default","subscriptions","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","NgTemplateOutlet","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","debugFilter","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","dialog","viewContainerRef","changeDetectorRef","log","classLog","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","DialogRoutingService","signal","undefined","gridOptions","defaultGridOptions","#gridApi$","#contentTypeStaticName","getParam","fetchContentType","fetchItems","fetchColumns","doOnDialogClosed","onGridReady","set","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","a","setFilterModel","GoToMetadata","getUrlEntity","_Title","navRelative","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","importFile","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","createMetadata","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","onCellClicked","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","clone","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","encapsulation","ImportAppService","importApp","changedName","retryOnDuplicate","MessageType","FileUploadMessageTypes","Warning","folderName","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","onClick","stopPropagation","preventDefault","FsC","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","indexOf","inputType","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","fields","fld","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","order","stringify","setTitle","rename","fieldId","IsTitle","Error","newField","Index","SortOrder","updateInputType","_angular_core__WEBPACK_IMPORTED_MODULE_3__","Custom","Empty","Hyperlink","String","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","readAsText","logSpecs","ServiceBase","router","route","snapshot","paramMap","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","fnIf","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","NavigationEnd","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","mapUntilChanged","fn","isEqual","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","all","getAvailableEntities","getEntities","QueryService","queryUrl","entitiesFilter","hasParams","urlParams","Guids","itemIds","Subscription","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { AppInfo } from '../models/app-info.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"do('clone')\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n  <div class=\"eav-grid-action-button highlight\" matRipple\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n  <div class=\"eav-grid-action-button disabled\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      This is a special operation to add an item which is metadata for another item,\r\n      see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n    </p>\r\n    <form [formGroup]=\"form\">\r\n      <!-- Target Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Target</mat-label>\r\n        @if (vm.guidedMode) {\r\n        <mat-select formControlName=\"targetType\" required>\r\n          @for (option of targetTypeOptions; track option) {\r\n          <mat-option [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          }\r\n          @if (vm.unknownTargetType) {\r\n          <mat-option [value]=\"vm.formValues.targetType\">\r\n            {{ vm.formValues.targetType }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedMode) {\r\n        <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n      <app-field-hint [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n        doing\r\n      </app-field-hint>\r\n      }\r\n      @if (vm.targetTypeHint) {\r\n      <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      <!-- Key Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key type</mat-label>\r\n        <mat-select formControlName=\"keyType\" required>\r\n          @for (option of vm.keyTypeOptions; track option) {\r\n          <mat-option [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      <!-- Content Type for Content Items -->\r\n      @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <!-- Scope for Content Types -->\r\n      @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n      vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Scope</mat-label>\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n          @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n      <!-- Key -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key</mat-label>\r\n        @if (vm.guidedMode) {\r\n          @switch (vm.formValues.targetType) {\r\n            @case (eavConstants.metadata.entity.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                @for (item of vm.contentItems; track item) {\r\n                  <mat-option [value]=\"item.Guid\">\r\n                    {{ item.Title }} ({{ item.Id }})\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @case (eavConstants.metadata.contentType.targetType) {\r\n              @if (vm.guidedKey) {\r\n              <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                @for (contentType of vm.contentTypes; track contentType) {\r\n                  <mat-option [value]=\"contentType.StaticName\">\r\n                    {{ contentType.Label }}\r\n                  </mat-option>\r\n                }\r\n              </mat-select>\r\n              }\r\n              @else {\r\n                <input matInput type=\"text\" formControlName=\"key\" required>\r\n              }\r\n            }\r\n            @default {\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            }\r\n          }\r\n        }\r\n        @else {\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        }\r\n        <ng-template #defaultKeyInput>\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n            <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n            <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        </ng-template>\r\n        @if (vm.guidedMode && vm.guidedKeyExists) {\r\n          <div matTextSuffix class=\"eav-selection-suffix\">\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\" (click)=\"toggleGuidedKey(true)\">\r\n              <mat-icon class=\"eav-icon\">search</mat-icon>\r\n            </button>\r\n            <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n              [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\" (click)=\"toggleGuidedKey(false)\">\r\n              <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n            </button>\r\n          </div>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n        <app-field-hint [isError]=\"true\">\r\n          This field is required\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a whole number\r\n        </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n        <app-field-hint [isError]=\"true\">\r\n          Must be a valid GUID\r\n        </app-field-hint>\r\n      }\r\n    </form>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <mat-slide-toggle color=\"accent\"\r\n      [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n      [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n      {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n    </mat-slide-toggle>\r\n    <div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgTemplateOutlet, NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { transient } from '../../core';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRadioModule,\r\n    FormsModule,\r\n  ],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n    <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items()\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, inject, OnDestroy, OnInit, signal, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, filter, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../core';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { classLog } from '../shared/logging';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n\r\n  log = classLog({ContentItemsComponent});\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  items = signal<ContentItem[]>(undefined);\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  #gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.#gridApi$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.#contentTypesSvc.retrieveContentType(this.#contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType.set(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#contentItemsSvc.getAll(this.#contentTypeStaticName).subscribe(items => {\r\n      this.items.set(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.#gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.#gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.#gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.#dialogRouter.navRelative([`export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`]);\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.#dialogRouter.navRelative([`${this.#contentTypeStaticName}/import`], { state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [ EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor) ],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        onCellClicked: (p: { data: ContentItem }) => this.editItem(p.data),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'clone': this.clone(item); break;\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n    event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\nimport { InputTypeStrict } from './input-type-catalog';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.appId }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputTypeMetadata[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.appId } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.appId, staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.appId, attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.appId, attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport type DataTypeStrict = typeof DataTypeCatalog[keyof typeof DataTypeCatalog];\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}