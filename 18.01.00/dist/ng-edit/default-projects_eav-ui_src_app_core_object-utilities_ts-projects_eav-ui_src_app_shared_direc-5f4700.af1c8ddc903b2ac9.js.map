{"version":3,"file":"default-projects_eav-ui_src_app_core_object-utilities_ts-projects_eav-ui_src_app_shared_direc-5f4700.af1c8ddc903b2ac9.js","mappings":"kMAQM,SAAUA,EAA8CC,EAAQC,GACpE,OAAOA,EAAGD,EACZ,CASM,SAAUE,EAA8CF,EAAQC,GACpE,OAAOA,EAAGD,EACZ,yECfO,IAAMG,EAAiC,MAAxC,MAAOA,EAEXC,YAAYC,GACVA,EAAMC,iBACR,CAACC,SAAAC,KAAA,mBAAAC,iBAJUN,EAAiC,EAAAI,SAAAC,KAAA,UAAAE,EAAAC,IAAA,MAAjCR,EAAiCS,UAAA,wCAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAAjCE,MAAA,qBAAAC,GAAA,OAAAF,EAAAX,YAAAa,EAAmB,2BAAnBd,CAAiC,yHCA9C,MAAMe,EAAW,CACfC,kBAAkB,GASb,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BC,IAIxCC,YACSC,EACAC,GAEPC,QAHOjB,KAAAe,SACAf,KAAAgB,QAJThB,KAAAkB,OAAMC,KAAS,CAACP,wBAAuBF,EAOvC,CAEA,YAAIU,GAAa,OAAOpB,KAAKgB,MAAMI,QAAU,CAE7C,OAAIC,GAAQ,OAAOrB,KAAKe,OAAOM,GAAK,CAEpCC,SAASC,GACP,OAAOvB,KAAKgB,MAAMI,SAASI,SAASC,IAAIF,EAC1C,CAEAG,UAA4BC,GAC1B,MAAMH,EAAWxB,KAAKgB,MAAMI,SAASI,SACrC,OAAOG,EAAKC,OAAO,CAACC,EAAKN,KACvBM,EAAIN,GAAOC,EAASC,IAAIF,GACjBM,GACN,GACL,CAEAC,cAAcP,GACZ,OAAOvB,KAAKgB,MAAMI,SAASW,cAAcN,IAAIF,EAC/C,CAEAS,eAAiCL,GAC/B,MAAMI,EAAgB/B,KAAKgB,MAAMI,SAASW,cAC1C,OAAOJ,EAAKC,OAAO,CAACC,EAAKN,KACvBM,EAAIN,GAAOQ,EAAcN,IAAIF,GACtBM,GACN,GACL,CAGAI,QAAmB,OAAOjC,KAAKe,OAAOmB,uBAAuBC,QAAQF,KAAY,CAK1EtB,iBAAiByB,GACtB,MAAMC,EAAIrC,KAAKkB,IAAIoB,KAAK,oBACxBtC,KAAKuC,cAAcC,IACjBxC,KAAKyC,qBAAqBC,UAAU,IAAMN,MAE5CC,EAAEM,KACJ,CAMOC,QAAQvB,EAAac,GAC1B,OAAOnC,KAAKe,OAAO8B,SAAS,CAACxB,GAAMc,EACrC,CAKOW,YAAYC,EAAiBZ,GAClC,OAAOnC,KAAKe,OAAO8B,SAASE,EAAU,IAAKZ,EAAQa,WAAYhD,KAAKgB,OACtE,CAEOiC,oBAAoBF,EAAiBZ,GAC1C,OAAOnC,KAAKe,OAAO8B,SAASE,EAAU,IAAKZ,EAAQa,WAAYhD,KAAKgB,MAAMkC,OAAOC,YACnF,CAEAV,qBACE,OAAOzC,KAAKe,OAAOqC,OAAOC,QACxBC,KAAOzD,GAASA,aAAiB0D,OAAa,EAC9CC,OAAYxD,KAAKgB,MAAMI,SAAS+B,aAAU,EAC1CM,KAAI,MAAQzD,KAAKgB,MAAMI,SAAS+B,aAAU,EAC1CO,QAAQ,EACRJ,KAAO,EAAEK,EAAgBC,KAAiBD,IAAmBC,GAEjE,CAAC7D,SAAAC,KAAA,mBAAAC,iBAhFUW,GAAoBJ,MAAAqD,MAAArD,MAAAqD,MAAA,EAAA9D,SAAAC,KAAA,WAAA8D,EAAAC,IAAA,OAApBnD,EAAoBoD,QAApBpD,EAAoBqD,mBAApBrD,CAAqB,8DCR3B,IAAeC,EAAW,MAA3B,MAAgBA,EADtBC,cAGYd,KAAAuC,cAAgB,IAAI2B,KAE9BC,cACEnE,KAAKoE,SACP,CAGAA,UACEpE,KAAKuC,cAAc8B,aACrB,CAACtE,SAAAC,KAAA,mBAAAC,iBAXmBY,EAAW,EAAAd,SAAAC,KAAA,WAAAsE,EAAAP,IAAA,OAAXlD,EAAWmD,QAAXnD,EAAWoD,mBAAXpD,CAAW,gSCSjC,SAAS0D,EAAaC,EAAMC,EAAQC,GAChC,QAASnD,KAAOkD,EACZ,GAAIA,EAAOE,eAAepD,GAAM,CAC5B,MAAMqD,EAAQH,EAAOlD,GACjBqD,EACAJ,EAAKK,YAAYtD,EAAKqD,EAAOF,GAAqBI,IAAIvD,GAAO,YAAc,IAG3EiD,EAAKO,eAAexD,EAE5B,CAEJ,OAAOiD,CACX,CAOA,SAASQ,EAA6BC,EAASC,GAC3C,MAAMC,EAAaD,EAAS,GAAK,OACjCX,EAAaU,EAAQG,MAAO,CACxB,eAAgBF,EAAS,GAAK,OAC9B,oBAAqBA,EAAS,GAAK,OACnC,8BAA+BA,EAAS,GAAK,cAC7C,cAAeC,EACf,kBAAmBA,EACnB,sBAAuBA,EACvB,mBAAoBA,GAE5B,CAQA,SAASE,GAAiBJ,EAASC,EAAQR,GACvCH,EAAaU,EAAQG,MAAO,CACxBE,SAAUJ,EAAS,GAAK,QACxBK,IAAKL,EAAS,GAAK,IACnBM,QAASN,EAAS,GAAK,IACvBO,KAAMP,EAAS,GAAK,UACrBR,EACP,CAKA,SAASgB,EAAkBC,EAAWC,GAClC,OAAOA,GAAwC,QAApBA,EACrBD,EAAY,IAAMC,EAClBD,CACV,CAMA,SAASE,GAAiBC,EAAQC,GAC9BD,EAAOV,MAAMY,MAAS,GAAED,EAAWC,UACnCF,EAAOV,MAAMa,OAAU,GAAEF,EAAWE,WACpCH,EAAOV,MAAMO,UAAYO,EAAaH,EAAWN,KAAMM,EAAWR,IACtE,CAMA,SAASW,EAAaC,EAAGC,GAGrB,MAAQ,eAAcC,KAAKC,MAAMH,SAASE,KAAKC,MAAMF,UACzD,CAGA,SAASG,EAAqBtB,GAC1B,MAAMuB,EAAOvB,EAAQwB,wBAKrB,MAAO,CACHlB,IAAKiB,EAAKjB,IACVmB,MAAOF,EAAKE,MACZC,OAAQH,EAAKG,OACblB,KAAMe,EAAKf,KACXO,MAAOQ,EAAKR,MACZC,OAAQO,EAAKP,OACbE,EAAGK,EAAKL,EACRC,EAAGI,EAAKJ,EAEhB,CAOA,SAASQ,EAAmBC,EAAYV,EAAGC,GACvC,MAAQb,MAAKoB,SAAQlB,OAAMiB,SAAUG,EACrC,OAAOT,GAAKb,GAAOa,GAAKO,GAAUR,GAAKV,GAAQU,GAAKO,CACxD,CAOA,SAASI,EAAcC,EAASxB,EAAKE,GACjCsB,EAAQxB,KAAOA,EACfwB,EAAQJ,OAASI,EAAQxB,IAAMwB,EAAQd,OACvCc,EAAQtB,MAAQA,EAChBsB,EAAQL,MAAQK,EAAQtB,KAAOsB,EAAQf,KAC3C,CAQA,SAASgB,GAAqBR,EAAMS,EAAWC,EAAUC,GACrD,MAAQ5B,MAAKmB,QAAOC,SAAQlB,OAAMO,QAAOC,UAAWO,EAC9CY,EAAapB,EAAQiB,EACrBI,EAAapB,EAASgB,EAC5B,OAAQE,EAAW5B,EAAM8B,GACrBF,EAAWR,EAASU,GACpBH,EAAWzB,EAAO2B,GAClBF,EAAWR,EAAQU,CAC3B,CAGA,MAAME,GACFxG,YAAYyG,GACRvH,KAAKuH,UAAYA,EAEjBvH,KAAKwH,UAAY,IAAIC,GACzB,CAEAC,QACI1H,KAAKwH,UAAUE,OACnB,CAEAC,MAAMC,GACF5H,KAAK0H,QACL1H,KAAKwH,UAAUK,IAAI7H,KAAKuH,UAAW,CAC/BO,eAAgB9H,KAAK+H,8BAEzBH,EAASI,QAAQ/C,IACbjF,KAAKwH,UAAUK,IAAI5C,EAAS,CACxB6C,eAAgB,CAAEvC,IAAKN,EAAQgD,UAAWxC,KAAMR,EAAQiD,YACxDrB,WAAYN,EAAqBtB,IACpC,EAET,CAEAkD,aAAatI,GACT,MAAMiG,KAASsC,MAAgBvI,GACzBwI,EAAiBrI,KAAKwH,UAAU/F,IAAIqE,GAC1C,IAAKuC,EACD,OAAO,KAEX,MAAMP,EAAiBO,EAAeP,eACtC,IAAIQ,EACAC,EACJ,GAAIzC,IAAW9F,KAAKuH,UAAW,CAC3B,MAAMiB,EAAyBxI,KAAK+H,4BACpCO,EAASE,EAAuBjD,IAChCgD,EAAUC,EAAuB/C,IACrC,MAEI6C,EAASxC,EAAOmC,UAChBM,EAAUzC,EAAOoC,WAErB,MAAMO,EAAgBX,EAAevC,IAAM+C,EACrCI,EAAiBZ,EAAerC,KAAO8C,EAG7C,OAAAvI,KAAKwH,UAAUQ,QAAQ,CAAC1C,EAAUqD,KAC1BrD,EAASuB,YAAcf,IAAW6C,GAAQ7C,EAAO8C,SAASD,IAC1D7B,EAAcxB,EAASuB,WAAY4B,EAAeC,EAAc,GAGxEZ,EAAevC,IAAM+C,EACrBR,EAAerC,KAAO8C,EACf,CAAEhD,IAAKkD,EAAehD,KAAMiD,EACvC,CAOAX,4BACI,MAAO,CAAExC,IAAKsD,OAAOC,QAASrD,KAAMoD,OAAOE,QAC/C,EAIJ,SAASC,GAAcL,GACnB,MAAMM,EAAQN,EAAKO,WAAU,GACvBC,EAAoBF,EAAMG,iBAAiB,QAC3CC,EAAWV,EAAKU,SAASC,cAE/BL,EAAMM,gBAAgB,MACtB,QAASC,EAAI,EAAGA,EAAIL,EAAkBM,OAAQD,IAC1CL,EAAkBK,GAAGD,gBAAgB,MAEzC,MAAiB,WAAbF,EACAK,GAAmBf,EAAMM,IAEP,UAAbI,GAAqC,WAAbA,GAAsC,aAAbA,IACtDM,GAAkBhB,EAAMM,GAE5BW,GAAa,SAAUjB,EAAMM,EAAOS,IACpCE,GAAa,0BAA2BjB,EAAMM,EAAOU,IAC9CV,CACX,CAEA,SAASW,GAAaC,EAAUlB,EAAMM,EAAO7G,GACzC,MAAM0H,EAAqBnB,EAAKS,iBAAiBS,GACjD,GAAIC,EAAmBL,OAAQ,CAC3B,MAAMM,EAAgBd,EAAMG,iBAAiBS,GAC7C,QAASL,EAAI,EAAGA,EAAIM,EAAmBL,OAAQD,IAC3CpH,EAAS0H,EAAmBN,GAAIO,EAAcP,GAEtD,CACJ,CAEA,IAAIQ,GAAgB,EAEpB,SAASL,GAAkBlF,EAAQwE,GAEZ,SAAfA,EAAMgB,OACNhB,EAAMrE,MAAQH,EAAOG,OAKN,UAAfqE,EAAMgB,MAAoBhB,EAAMiB,OAChCjB,EAAMiB,KAAQ,aAAYjB,EAAMiB,QAAQF,OAEhD,CAEA,SAASN,GAAmBjF,EAAQwE,GAChC,MAAMkB,EAAUlB,EAAMmB,WAAW,MACjC,GAAID,EAGA,IACIA,EAAQE,UAAU5F,EAAQ,EAAG,EACjC,OACQ,CAEhB,CAMA,SAAS6F,GAAYC,EAAShD,GAC1B,MAAMiD,EAAYD,EAAQC,UAC1B,GAAyB,IAArBA,EAAUf,QAAgBe,EAAU,GAAGC,WAAalD,EAAUmD,aAC9D,OAAOF,EAAU,GAErB,MAAMG,EAAUpD,EAAUqD,cAAc,OACxCJ,SAAUxC,QAAQW,GAAQgC,EAAQE,YAAYlC,IACvCgC,CACX,CAGA,SAASG,GAAsBlG,GAE3B,MAAMmG,EAAanG,EAAM0E,cAAc0B,QAAQ,OAAQ,EAAK,EAAI,IAChE,OAAOC,WAAWrG,GAASmG,CAC/B,CAmBA,SAASG,EAAsBC,EAAejB,GAE1C,OADciB,EAAcC,iBAAiBlB,GAChCmB,MAAM,KAAK5H,IAAI6H,GAAQA,EAAKC,OAC7C,CAGA,MAAM7G,GAAsB,IAAI8G,IAAI,CAEhC,aAEJ,MAAMC,GACF3K,YAAYyG,EAAWmE,EAAcC,EAAYC,EAAiBC,EAAkBC,EAAeC,EAAuBC,EAAmBC,GACzIjM,KAAKuH,UAAYA,EACjBvH,KAAK0L,aAAeA,EACpB1L,KAAK2L,WAAaA,EAClB3L,KAAK4L,gBAAkBA,EACvB5L,KAAK6L,iBAAmBA,EACxB7L,KAAK8L,cAAgBA,EACrB9L,KAAK+L,sBAAwBA,EAC7B/L,KAAKgM,kBAAoBA,EACzBhM,KAAKiM,QAAUA,CACnB,CACAC,OAAOhJ,GACHlD,KAAKmM,SAAWnM,KAAKoM,iBACrBlJ,EAAO2H,YAAY7K,KAAKmM,UAGpB,gBAAiBnM,KAAKmM,UACtBnM,KAAKmM,SAASE,aAEtB,CACAjI,UACIpE,KAAKmM,SAASG,SACdtM,KAAKuM,sBAAsBnI,UAC3BpE,KAAKmM,SAAWnM,KAAKuM,qBAAuB,IAChD,CACAC,aAAa5H,GACT5E,KAAKmM,SAAS/G,MAAMO,UAAYf,CACpC,CACA6B,wBACI,OAAOzG,KAAKmM,SAAS1F,uBACzB,CACAgG,SAASC,GACL1M,KAAKmM,SAASQ,UAAUnK,IAAIkK,EAChC,CACAE,wBACI,OA/DR,SAASC,GAAmC5H,GACxC,MAAMkG,EAAgB2B,iBAAiB7H,GACjC8H,EAAyB7B,EAAsBC,EAAe,uBAC9D6B,EAAWD,EAAuBE,KAAKC,GAAiB,cAATA,GAAiC,QAATA,GAE7E,IAAKF,EACD,OAAO,EAIX,MAAMG,EAAgBJ,EAAuB/B,QAAQgC,GAC/CI,EAAelC,EAAsBC,EAAe,uBACpDkC,EAAYnC,EAAsBC,EAAe,oBACvD,OAAQL,GAAsBsC,EAAaD,IACvCrC,GAAsBuC,EAAUF,GACxC,CAgDeN,CAAmC7M,KAAKmM,SACnD,CACAmB,iBAAiBpD,EAAMqD,GACnBvN,KAAKmM,SAASmB,iBAAiBpD,EAAMqD,EACzC,CACAC,oBAAoBtD,EAAMqD,GACtBvN,KAAKmM,SAASqB,oBAAoBtD,EAAMqD,EAC5C,CACAnB,iBACI,MAAMqB,EAAgBzN,KAAK6L,iBACrB6B,EAAe1N,KAAK8L,cACpB6B,EAAkBF,EAAgBA,EAAcG,SAAW,KACjE,IAAIC,EACJ,GAAIF,GAAmBF,EAAe,CAGlC,MAAMK,EAAWL,EAAcM,UAAY/N,KAAK4L,gBAAkB,KAC5DrB,EAAUkD,EAAcO,cAAcC,mBAAmBN,EAAiBF,EAActD,SAC9FI,EAAQ2D,gBACRL,EAAUvD,GAAYC,EAASvK,KAAKuH,WACpCvH,KAAKuM,qBAAuBhC,EACxBkD,EAAcM,UACdlI,GAAiBgI,EAASC,GAG1BD,EAAQzI,MAAMO,UAAYO,EAAalG,KAAK+L,sBAAsB5F,EAAGnG,KAAK+L,sBAAsB3F,EAExG,MAEIyH,EAAU7E,GAAchJ,KAAK0L,cAC7B7F,GAAiBgI,EAAS7N,KAAK4L,iBAC3B5L,KAAKgM,oBACL6B,EAAQzI,MAAMO,UAAY3F,KAAKgM,mBAGvCzH,SAAasJ,EAAQzI,MAAO,CAGxB,iBAAkB,OAElB+I,OAAU,IACV7I,SAAY,QACZC,IAAO,IACPE,KAAQ,IACR,UAAWzF,KAAKiM,QAAU,IAC3BvH,IACHM,EAA6B6I,GAAS,GACtCA,EAAQlB,UAAUnK,IAAI,oBACtBqL,EAAQO,aAAa,UAAW,UAChCP,EAAQO,aAAa,MAAOpO,KAAK2L,YAC7B+B,IACIW,MAAMC,QAAQZ,GACdA,EAAa1F,QAAQ0E,GAAamB,EAAQlB,UAAUnK,IAAIkK,IAGxDmB,EAAQlB,UAAUnK,IAAIkL,IAGvBG,CACX,EAIJ,MAAMU,IAA8BC,QAAgC,CAAEC,SAAS,IAEzEC,GAA6BF,QAAgC,CAAEC,SAAS,IAExEE,IAAgCH,QAAgC,CAClEC,SAAS,EACTG,SAAS,IAUPC,GAA0B,IAAIrD,IAAI,CAEpC,aAKJ,MAAMsD,GAEF,YAAIC,GACA,OAAO/O,KAAKgP,cAAgBhP,KAAKiP,iBAAkBjP,KAAKiP,eAAeF,SAC3E,CACA,YAAIA,CAASnK,GACLA,IAAU5E,KAAKgP,YACfhP,KAAKgP,UAAYpK,EACjB5E,KAAKkP,gCACLlP,KAAKmP,SAASnH,QAAQoH,GAAUpK,EAA6BoK,EAAQxK,IAE7E,CACA9D,YAAYmE,EAASoK,EAAS9H,EAAW+H,EAASC,EAAgBC,GAC9DxP,KAAKqP,QAAUA,EACfrP,KAAKuH,UAAYA,EACjBvH,KAAKsP,QAAUA,EACftP,KAAKuP,eAAiBA,EACtBvP,KAAKwP,kBAAoBA,EAOzBxP,KAAKyP,kBAAoB,CAAEtJ,EAAG,EAAGC,EAAG,GAEpCpG,KAAK0P,iBAAmB,CAAEvJ,EAAG,EAAGC,EAAG,GAKnCpG,KAAK2P,qBAAsB,EAE3B3P,KAAK4P,YAAc,IAAIC,IAEvB7P,KAAK8P,yBAA2B5L,KAAa6L,MAE7C/P,KAAKgQ,uBAAyB9L,KAAa6L,MAE3C/P,KAAKiQ,oBAAsB/L,KAAa6L,MAExC/P,KAAKkQ,oBAAsBhM,KAAa6L,MAExC/P,KAAKmQ,iBAAmB,KAExBnQ,KAAKoQ,4BAA6B,EAElCpQ,KAAKmP,SAAW,GAEhBnP,KAAKqQ,iBAAmB,IAAI7E,IAE5BxL,KAAK2L,WAAa,MAKlB3L,KAAKsQ,eAAiB,EACtBtQ,KAAKgP,WAAY,EAEjBhP,KAAKuQ,cAAgB,IAAIV,IAEzB7P,KAAKwQ,QAAU,IAAIX,IAEnB7P,KAAKyQ,SAAW,IAAIZ,IAEpB7P,KAAK0Q,MAAQ,IAAIb,IAEjB7P,KAAK2Q,QAAU,IAAId,IAEnB7P,KAAK4Q,OAAS,IAAIf,IAElB7P,KAAK6Q,QAAU,IAAIhB,IAKnB7P,KAAK8Q,MAAQ9Q,KAAK4P,YAElB5P,KAAK+Q,aAAgBlR,IAGjB,GAFAG,KAAKuQ,cAAcS,OAEfhR,KAAKmP,SAAS1F,OAAQ,CACtB,MAAMwH,EAAejR,KAAKkR,iBAAiBrR,GACvCoR,IAAiBjR,KAAKqQ,iBAAiBvL,IAAImM,KAAkBjR,KAAK+O,UAClE/O,KAAKmR,wBAAwBF,EAAcpR,EAEnD,MACUG,KAAK+O,UACX/O,KAAKmR,wBAAwBnR,KAAK0L,aAAc7L,EAAK,EAI7DG,KAAKoR,aAAgBvR,IACjB,MAAMwR,EAAkBrR,KAAKsR,0BAA0BzR,GACvD,IAAKG,KAAK2P,oBAAqB,CAQ3B,GAPkBtJ,KAAKkL,IAAIF,EAAgBlL,EAAInG,KAAK+L,sBAAsB5F,GACxDE,KAAKkL,IAAIF,EAAgBjL,EAAIpG,KAAK+L,sBAAsB3F,IACzBpG,KAAKqP,QAAQmC,mBAKzC,CACjB,MAAMC,EAAiBC,KAAKC,OAAS3R,KAAK4R,eAAiB5R,KAAK6R,mBAAmBhS,GAC7EiS,EAAY9R,KAAKiP,eACvB,IAAKwC,EAED,YADAzR,KAAK+R,iBAAiBlS,KAMrBiS,IAAeA,EAAUE,eAAiBF,EAAUG,iBAGjDpS,EAAMqS,YACNrS,EAAMsS,iBAEVnS,KAAK2P,qBAAsB,EAC3B3P,KAAKsP,QAAQ8C,IAAI,IAAMpS,KAAKqS,mBAAmBxS,IAEvD,CACA,MACJ,CAIIA,EAAMqS,YACNrS,EAAMsS,iBAEV,MAAMG,EAA6BtS,KAAKuS,+BAA+BlB,GAIvE,GAHArR,KAAKwS,WAAY,EACjBxS,KAAKyS,0BAA4BpB,EACjCrR,KAAK0S,6BAA6BJ,GAC9BtS,KAAKiP,eACLjP,KAAK2S,2BAA2BL,EAA4BjB,OAE3D,CAGD,MAAMuB,EAAS5S,KAAK6S,kBAAoB7S,KAAK4L,gBAAkB5L,KAAK+L,sBAC9D+G,EAAkB9S,KAAK0P,iBAC7BoD,EAAgB3M,EAAImM,EAA2BnM,EAAIyM,EAAOzM,EAAInG,KAAKyP,kBAAkBtJ,EACrF2M,EAAgB1M,EAAIkM,EAA2BlM,EAAIwM,EAAOxM,EAAIpG,KAAKyP,kBAAkBrJ,EACrFpG,KAAK+S,2BAA2BD,EAAgB3M,EAAG2M,EAAgB1M,EACvE,CAIIpG,KAAK4P,YAAYoD,UAAUvJ,QAC3BzJ,KAAKsP,QAAQ8C,IAAI,KACbpS,KAAK4P,YAAYoB,KAAK,CAClBvM,OAAQzE,KACRqR,gBAAiBiB,EACjBzS,QACAoT,SAAUjT,KAAKkT,iBAAiBZ,GAChCa,MAAOnT,KAAKoT,wBACf,EACJ,EAITpT,KAAKqT,WAAcxT,IACfG,KAAK+R,iBAAiBlS,EAAK,EAG/BG,KAAKsT,iBAAoBzT,IACrB,GAAIG,KAAKmP,SAAS1F,OAAQ,CACtB,MAAMwH,EAAejR,KAAKkR,iBAAiBrR,GACvCoR,IAAiBjR,KAAKqQ,iBAAiBvL,IAAImM,KAAkBjR,KAAK+O,UAClElP,EAAMsS,gBAEd,MACUnS,KAAK+O,UAGXlP,EAAMsS,gBAAe,EAG7BnS,KAAKuT,gBAAgBtO,GAASuO,WAAWnE,EAAQoE,eAAiB,MAClEzT,KAAK0T,iBAAmB,IAAIpM,GAAsBC,GAClDiI,EAAkBmE,iBAAiB3T,KACvC,CAKA4T,wBACI,OAAO5T,KAAK6T,YAChB,CAEAC,iBACI,OAAO9T,KAAK0L,YAChB,CAKAqI,oBACI,OAAO/T,KAAKgS,aAAehS,KAAK4T,wBAA0B5T,KAAK8T,gBACnE,CAEAE,YAAYC,GACRjU,KAAKmP,SAAW8E,EAAQxQ,IAAI2L,MAAU8E,MAAc9E,IACpDpP,KAAKmP,SAASnH,QAAQoH,GAAUpK,EAA6BoK,EAAQpP,KAAK+O,WAC1E/O,KAAKkP,gCAKL,MAAMiF,EAAkB,IAAI3I,IAC5B,OAAAxL,KAAKqQ,iBAAiBrI,QAAQoH,IACtBpP,KAAKmP,SAASnE,QAAQoE,IAAU,GAChC+E,EAAgB3R,IAAI4M,EAAM,GAGlCpP,KAAKqQ,iBAAmB8D,EACjBnU,IACX,CAKAoU,oBAAoBxG,GAChB,OAAA5N,KAAK6L,iBAAmB+B,EACjB5N,IACX,CAKAqU,wBAAwBzG,GACpB,OAAA5N,KAAKsU,qBAAuB1G,EACrB5N,IACX,CAMAuT,gBAAgBgB,GACZ,MAAMtP,KAAUiP,MAAcK,GAC9B,OAAItP,IAAYjF,KAAK0L,eACb1L,KAAK0L,cACL1L,KAAKwU,4BAA4BxU,KAAK0L,cAE1C1L,KAAKsP,QAAQmF,kBAAkB,KAC3BxP,EAAQqI,iBAAiB,YAAatN,KAAK+Q,aAAcrC,GACzDzJ,EAAQqI,iBAAiB,aAActN,KAAK+Q,aAAcxC,IAC1DtJ,EAAQqI,iBAAiB,YAAatN,KAAKsT,iBAAkB5E,EAA0B,GAE3F1O,KAAKgM,uBAAoB0I,EACzB1U,KAAK0L,aAAezG,UAEb0P,WAAe,KAAe3U,KAAK0L,wBAAwBiJ,aAClE3U,KAAK4U,iBAAmB5U,KAAK0L,aAAamJ,iBAEvC7U,IACX,CAIA8U,oBAAoBC,GAChB,OAAA/U,KAAKmQ,iBAAmB4E,KAAkBb,MAAca,GAAmB,KAC3E/U,KAAKkQ,oBAAoB7L,cACrB0Q,IACA/U,KAAKkQ,oBAAsBlQ,KAAKuP,eAC3ByF,OAAO,IACPtS,UAAU,IAAM1C,KAAKiV,mCAEvBjV,IACX,CAEAwT,WAAWtQ,GACP,OAAAlD,KAAKkV,eAAiBhS,EACflD,IACX,CAEAmV,UACInV,KAAKwU,4BAA4BxU,KAAK0L,cAGlC1L,KAAKgS,cAGLhS,KAAK0L,cAAcY,SAEvBtM,KAAKoV,SAAS9I,SACdtM,KAAKqV,kBACLrV,KAAKsV,sBACLtV,KAAKwP,kBAAkB+F,eAAevV,MACtCA,KAAKwV,mBACLxV,KAAKuQ,cAAckF,WACnBzV,KAAKwQ,QAAQiF,WACbzV,KAAKyQ,SAASgF,WACdzV,KAAK0Q,MAAM+E,WACXzV,KAAK2Q,QAAQ8E,WACbzV,KAAK4Q,OAAO6E,WACZzV,KAAK6Q,QAAQ4E,WACbzV,KAAK4P,YAAY6F,WACjBzV,KAAKmP,SAAW,GAChBnP,KAAKqQ,iBAAiB3I,QACtB1H,KAAKiP,oBAAiByF,EACtB1U,KAAKkQ,oBAAoB7L,cACzBrE,KAAK0T,iBAAiBhM,QACtB1H,KAAKmQ,iBACDnQ,KAAK0L,aACD1L,KAAK4U,iBACD5U,KAAKsU,qBACDtU,KAAK6L,iBACD7L,KAAKoV,QACDpV,KAAKkV,eACD,IAChC,CAEAlD,aACI,OAAOhS,KAAK2P,qBAAuB3P,KAAKwP,kBAAkBwC,WAAWhS,KACzE,CAEA0V,QACI1V,KAAK0L,aAAatG,MAAMO,UAAY3F,KAAKgM,mBAAqB,GAC9DhM,KAAK0P,iBAAmB,CAAEvJ,EAAG,EAAGC,EAAG,GACnCpG,KAAKyP,kBAAoB,CAAEtJ,EAAG,EAAGC,EAAG,EACxC,CAKAuP,cAAcvG,IACLpP,KAAKqQ,iBAAiBvL,IAAIsK,IAAWpP,KAAKmP,SAASnE,QAAQoE,IAAU,IACtEpP,KAAKqQ,iBAAiB7N,IAAI4M,GAC1BpK,EAA6BoK,GAAQ,GAE7C,CAKAwG,aAAaxG,GACLpP,KAAKqQ,iBAAiBvL,IAAIsK,KAC1BpP,KAAKqQ,iBAAiBwF,OAAOzG,GAC7BpK,EAA6BoK,EAAQpP,KAAK+O,UAElD,CAEA+G,cAAcC,GACV,OAAA/V,KAAK2L,WAAaoK,EACX/V,IACX,CAEAgW,mBAAmBlE,GACf9R,KAAKiP,eAAiB6C,CAC1B,CAIAmE,sBACI,MAAM3Q,EAAWtF,KAAKgS,aAAehS,KAAK0P,iBAAmB1P,KAAKyP,kBAClE,MAAO,CAAEtJ,EAAGb,EAASa,EAAGC,EAAGd,EAASc,EACxC,CAKA8P,oBAAoBtR,GAChB,OAAA5E,KAAK0P,iBAAmB,CAAEvJ,EAAG,EAAGC,EAAG,GACnCpG,KAAKyP,kBAAkBtJ,EAAIvB,EAAMuB,EACjCnG,KAAKyP,kBAAkBrJ,EAAIxB,EAAMwB,EAC5BpG,KAAKiP,gBACNjP,KAAK+S,2BAA2BnO,EAAMuB,EAAGvB,EAAMwB,GAE5CpG,IACX,CAKAmW,qBAAqBvR,GACjB,OAAA5E,KAAKoW,kBAAoBxR,EAClB5E,IACX,CAEAqW,+BACI,MAAM/Q,EAAWtF,KAAKyS,0BAClBnN,GAAYtF,KAAKiP,gBACjBjP,KAAK2S,2BAA2B3S,KAAKuS,+BAA+BjN,GAAWA,EAEvF,CAEAkQ,mBACIxV,KAAK8P,yBAAyBzL,cAC9BrE,KAAKgQ,uBAAuB3L,cAC5BrE,KAAKiQ,oBAAoB5L,cACzBrE,KAAKsW,kBAAkB9I,oBAAoB,cAAe+I,GAAsB5H,GACpF,CAEA0G,kBACIrV,KAAKmM,UAAU/H,UACfpE,KAAKmM,SAAW,IACpB,CAEAmJ,sBACItV,KAAK6T,cAAcvH,SACnBtM,KAAKwW,iBAAiBpS,UACtBpE,KAAK6T,aAAe7T,KAAKwW,gBAAkB,IAC/C,CAKAzE,iBAAiBlS,GAKb,GAAKG,KAAKwP,kBAAkBwC,WAAWhS,QAGvCA,KAAKwV,mBACLxV,KAAKwP,kBAAkBiH,aAAazW,MACpCA,KAAKkP,gCACDlP,KAAKmP,WACLnP,KAAK0L,aAAatG,MAAMsR,wBACpB1W,KAAK2W,0BAER3W,KAAK2P,qBAIV,GADA3P,KAAKyQ,SAASO,KAAK,CAAEvM,OAAQzE,KAAMH,UAC/BG,KAAKiP,eAELjP,KAAKiP,eAAe2H,iBACpB5W,KAAK6W,+BAA+BC,KAAK,KACrC9W,KAAK+W,sBAAsBlX,GAC3BG,KAAKgX,2BACLhX,KAAKwP,kBAAkBiH,aAAazW,KAAI,OAG3C,CAIDA,KAAKyP,kBAAkBtJ,EAAInG,KAAK0P,iBAAiBvJ,EACjD,MAAMkL,EAAkBrR,KAAKsR,0BAA0BzR,GACvDG,KAAKyP,kBAAkBrJ,EAAIpG,KAAK0P,iBAAiBtJ,EACjDpG,KAAKsP,QAAQ8C,IAAI,KACbpS,KAAK0Q,MAAMM,KAAK,CACZvM,OAAQzE,KACRiT,SAAUjT,KAAKkT,iBAAiB7B,GAChC4F,UAAW5F,EACXxR,SACH,GAELG,KAAKgX,2BACLhX,KAAKwP,kBAAkBiH,aAAazW,KACxC,CACJ,CAEAqS,mBAAmBxS,GACXqX,EAAarX,KACbG,KAAKmX,oBAAsBzF,KAAKC,OAEpC3R,KAAKkP,gCAEL,MAAMkI,EAAapX,KAAKsW,iBAClBe,EAAgBrX,KAAKiP,eAQ3B,GAPImI,GAGApX,KAAKsP,QAAQmF,kBAAkB,KAC3B2C,EAAW9J,iBAAiB,cAAeiJ,GAAsB5H,GAA6B,GAGlG0I,EAAe,CACf,MAAMpS,EAAUjF,KAAK0L,aACfxI,EAAS+B,EAAQqS,WACjBC,EAAevX,KAAK6T,aAAe7T,KAAKwX,4BACxCC,EAAUzX,KAAKoV,QAAUpV,KAAKoV,SAAWpV,KAAKuH,UAAUmQ,cAAc,IAE5ExU,EAAOyU,aAAaF,EAAQxS,GAG5BjF,KAAKgM,kBAAoB/G,EAAQG,MAAMO,WAAa,GAGpD3F,KAAKmM,SAAW,IAAIV,GAAWzL,KAAKuH,UAAWvH,KAAK0L,aAAc1L,KAAK2L,WAAY3L,KAAK4L,gBAAiB5L,KAAK6L,kBAAoB,KAAM7L,KAAK0N,cAAgB,KAAM1N,KAAK+L,sBAAuB/L,KAAKgM,kBAAmBhM,KAAKqP,QAAQuI,QAAU,KAC9O5X,KAAKmM,SAASD,OAAOlM,KAAK6X,0BAA0B3U,EAAQkU,IAI5D/R,GAAiBJ,GAAS,EAAO4J,IACjC7O,KAAKuH,UAAUuQ,KAAKjN,YAAY3H,EAAO6U,aAAaR,EAAatS,IACjEjF,KAAKwQ,QAAQQ,KAAK,CAAEvM,OAAQzE,KAAMH,UAClCwX,EAAcW,QACdhY,KAAKiY,kBAAoBZ,EACzBrX,KAAKkY,cAAgBb,EAAcc,aAAanY,KACpD,MAEIA,KAAKwQ,QAAQQ,KAAK,CAAEvM,OAAQzE,KAAMH,UAClCG,KAAKiY,kBAAoBjY,KAAKkY,mBAAgBxD,EAIlD1U,KAAK0T,iBAAiB/L,MAAM0P,EAAgBA,EAAce,uBAAyB,GACvF,CAOAjH,wBAAwBkH,EAAkBxY,GAGlCG,KAAKkV,gBACLrV,EAAMC,kBAEV,MAAMkS,EAAahS,KAAKgS,aAClBsG,EAAkBpB,EAAarX,GAC/B0Y,GAA0BD,GAAoC,IAAjBzY,EAAM2Y,OACnDjE,EAAcvU,KAAK0L,aACnB5F,KAASsC,MAAgBvI,GACzB4Y,GAAoBH,GACtBtY,KAAKmX,qBACLnX,KAAKmX,oBArhBe,IAqhBiCzF,KAAKC,MACxD+G,EAAcJ,KACdK,MAAiC9Y,IAAK,EACtC+Y,MAAgC/Y,GAWtC,GAJIiG,GAAUA,EAAO+S,WAA4B,cAAfhZ,EAAMoK,MACpCpK,EAAMsS,iBAGNH,GAAcuG,GAA0BE,GAAoBC,EAC5D,OAKJ,GAAI1Y,KAAKmP,SAAS1F,OAAQ,CACtB,MAAMqP,EAAavE,EAAYnP,MAC/BpF,KAAK2W,yBAA2BmC,EAAWpC,yBAA2B,GACtEoC,EAAWpC,wBAA0B,aACzC,CACA1W,KAAK2P,oBAAsB3P,KAAKwS,WAAY,EAG5CxS,KAAKwV,mBACLxV,KAAK4L,gBAAkB5L,KAAK0L,aAAajF,wBACzCzG,KAAK8P,yBAA2B9P,KAAKwP,kBAAkBuJ,YAAYrW,UAAU1C,KAAKoR,cAClFpR,KAAKgQ,uBAAyBhQ,KAAKwP,kBAAkBwJ,UAAUtW,UAAU1C,KAAKqT,YAC9ErT,KAAKiQ,oBAAsBjQ,KAAKwP,kBAC3ByJ,SAASjZ,KAAKsW,kBACd5T,UAAUwW,GAAelZ,KAAKmZ,gBAAgBD,IAC/ClZ,KAAKmQ,mBACLnQ,KAAKoZ,cAAgB7S,EAAqBvG,KAAKmQ,mBAKnD,MAAMxC,EAAkB3N,KAAK6L,iBAC7B7L,KAAKqZ,yBACD1L,GAAmBA,EAAgBC,WAAaD,EAAgBI,UAC1D,CAAE5H,EAAG,EAAGC,EAAG,GACXpG,KAAKsZ,6BAA6BtZ,KAAK4L,gBAAiByM,EAAkBxY,GACpF,MAAMwR,EAAmBrR,KAAK+L,sBAC1B/L,KAAKyS,0BACDzS,KAAKsR,0BAA0BzR,GACvCG,KAAKoT,uBAAyB,CAAEjN,EAAG,EAAGC,EAAG,GACzCpG,KAAKuZ,sCAAwC,CAAEpT,EAAGkL,EAAgBlL,EAAGC,EAAGiL,EAAgBjL,GACxFpG,KAAK4R,eAAiBF,KAAKC,MAC3B3R,KAAKwP,kBAAkBgK,cAAcxZ,KAAMH,EAC/C,CAEAkX,sBAAsBlX,GAKlBwF,GAAiBrF,KAAK0L,cAAc,EAAMmD,IAC1C7O,KAAKoV,QAAQkC,WAAWS,aAAa/X,KAAK0L,aAAc1L,KAAKoV,SAC7DpV,KAAKqV,kBACLrV,KAAKsV,sBACLtV,KAAK4L,gBACD5L,KAAKoZ,cACDpZ,KAAKyZ,aACDzZ,KAAKgM,uBACD0I,EAEhB1U,KAAKsP,QAAQ8C,IAAI,KACb,MAAMN,EAAY9R,KAAKiP,eACjByK,EAAe5H,EAAUqG,aAAanY,MACtCqR,EAAkBrR,KAAKsR,0BAA0BzR,GACjDoT,EAAWjT,KAAKkT,iBAAiB7B,GACjCsI,EAAyB7H,EAAU8H,iBAAiBvI,EAAgBlL,EAAGkL,EAAgBjL,GAC7FpG,KAAK0Q,MAAMM,KAAK,CAAEvM,OAAQzE,KAAMiT,WAAUgE,UAAW5F,EAAiBxR,UACtEG,KAAK6Q,QAAQG,KAAK,CACd6I,KAAM7Z,KACN0Z,eACAI,cAAe9Z,KAAKkY,cACpBpG,UAAWA,EACXiI,kBAAmB/Z,KAAKiY,kBACxB0B,yBACA1G,WACAgE,UAAW5F,EACXxR,UAEJiS,EAAUkI,KAAKha,KAAM0Z,EAAc1Z,KAAKkY,cAAelY,KAAKiY,kBAAmB0B,EAAwB1G,EAAU5B,EAAiBxR,GAClIG,KAAKiP,eAAiBjP,KAAKiY,mBAEnC,CAKAtF,4BAA6BxM,IAAGC,MAAOD,EAAG8T,EAAM7T,EAAG8T,IAE/C,IAAIC,EAAena,KAAKiY,kBAAkBmC,iCAAiCpa,KAAMmG,EAAGC,IAK/E+T,GACDna,KAAKiP,iBAAmBjP,KAAKiY,mBAC7BjY,KAAKiY,kBAAkB2B,iBAAiBzT,EAAGC,KAC3C+T,EAAena,KAAKiY,mBAEpBkC,GAAgBA,IAAiBna,KAAKiP,gBACtCjP,KAAKsP,QAAQ8C,IAAI,KAEbpS,KAAK4Q,OAAOI,KAAK,CAAE6I,KAAM7Z,KAAM8R,UAAW9R,KAAKiP,iBAC/CjP,KAAKiP,eAAeoL,KAAKra,MAEzBA,KAAKiP,eAAiBkL,EACtBna,KAAKiP,eAAeqL,MAAMta,KAAMmG,EAAGC,EAAG+T,IAAiBna,KAAKiY,mBAGxDkC,EAAaI,gBACXva,KAAKkY,mBACLxD,GACN1U,KAAK2Q,QAAQK,KAAK,CACd6I,KAAM7Z,KACN8R,UAAWqI,EACXT,aAAcS,EAAahC,aAAanY,OAC3C,GAILA,KAAKgS,eACLhS,KAAKiP,eAAeuL,2BAA2BP,EAAMC,GACrDla,KAAKiP,eAAewL,UAAUza,KAAMmG,EAAGC,EAAGpG,KAAKoT,wBAC3CpT,KAAK6S,kBACL7S,KAAK0a,uBAAuBvU,EAAGC,GAG/BpG,KAAK0a,uBAAuBvU,EAAInG,KAAKqZ,yBAAyBlT,EAAGC,EAAIpG,KAAKqZ,yBAAyBjT,GAG/G,CAKAyQ,+BAEI,IAAK7W,KAAKwS,UACN,OAAOmI,QAAQC,UAEnB,MAAMC,EAAkB7a,KAAK6T,aAAapN,wBAE1CzG,KAAKmM,SAASM,SAAS,sBAEvBzM,KAAK0a,uBAAuBG,EAAgBpV,KAAMoV,EAAgBtV,KAKlE,MAAMuV,EAAW9a,KAAKmM,SAASS,wBAC/B,OAAiB,IAAbkO,EACOH,QAAQC,UAEZ5a,KAAKsP,QAAQmF,kBAAkB,IAC3B,IAAIkG,QAAQC,IACf,MAAMrN,EAAY1N,MACTA,MACAuI,MAAgBvI,KAAWG,KAAKmM,UAAmC,cAAvBtM,EAAMkb,gBACnD/a,KAAKmM,UAAUqB,oBAAoB,gBAAiBD,GACpDqN,IACAI,aAAaC,GAAO,EAMtBA,EAAUC,WAAW3N,EAAoB,IAAXuN,GACpC9a,KAAKmM,SAASmB,iBAAiB,gBAAiBC,EAAO,GAGnE,CAEAiK,4BACI,MAAM2D,EAAoBnb,KAAKsU,qBACzB8G,EAAsBD,EAAoBA,EAAkBvN,SAAW,KAC7E,IAAI2J,EACJ,OAAI6D,GACApb,KAAKwW,gBAAkB2E,EAAkBnN,cAAcC,mBAAmBmN,EAAqBD,EAAkBhR,SACjHnK,KAAKwW,gBAAgBtI,gBACrBqJ,EAAcjN,GAAYtK,KAAKwW,gBAAiBxW,KAAKuH,YAGrDgQ,EAAcvO,GAAchJ,KAAK0L,cAIrC6L,EAAYnS,MAAMiW,cAAgB,OAClC9D,EAAY5K,UAAUnK,IAAI,wBACnB+U,CACX,CAMA+B,6BAA6BgC,EAAajD,EAAkBxY,GACxD,MAAM0b,EAAgBlD,IAAqBrY,KAAK0L,aAAe,KAAO2M,EAChEmD,EAAgBD,EAAgBA,EAAc9U,wBAA0B6U,EACxEG,EAAQvE,EAAarX,GAASA,EAAM6b,cAAc,GAAK7b,EACvDiI,EAAiB9H,KAAK2b,6BAG5B,MAAO,CACHxV,EAAGqV,EAAc/V,KAAO6V,EAAY7V,MAH9BgW,EAAMG,MAAQJ,EAAc/V,KAAOqC,EAAerC,MAIxDW,EAAGoV,EAAcjW,IAAM+V,EAAY/V,KAH7BkW,EAAMI,MAAQL,EAAcjW,IAAMuC,EAAevC,KAK/D,CAEA+L,0BAA0BzR,GACtB,MAAMiI,EAAiB9H,KAAK2b,6BACtBF,EAAQvE,EAAarX,GAQnBA,EAAMic,QAAQ,IAAMjc,EAAMkc,eAAe,IAAM,CAAEH,MAAO,EAAGC,MAAO,GACpEhc,EACAsG,EAAIsV,EAAMG,MAAQ9T,EAAerC,KACjCW,EAAIqV,EAAMI,MAAQ/T,EAAevC,IAGvC,GAAIvF,KAAK4U,iBAAkB,CACvB,MAAMoH,EAAYhc,KAAK4U,iBAAiBqH,eACxC,GAAID,EAAW,CACX,MAAME,EAAWlc,KAAK4U,iBAAiBuH,iBACvCD,SAAS/V,EAAIA,EACb+V,EAAS9V,EAAIA,EACN8V,EAASE,gBAAgBJ,EAAUK,UAC9C,CACJ,CACA,MAAO,CAAElW,IAAGC,IAChB,CAEAmM,+BAA+BkJ,GAC3B,MAAMa,EAAoBtc,KAAKiP,eAAiBjP,KAAKiP,eAAesN,SAAW,KAC/E,IAAMpW,IAAGC,KAAMpG,KAAK6S,kBACd7S,KAAK6S,kBAAkB4I,EAAOzb,KAAMA,KAAK4L,gBAAiB5L,KAAKqZ,0BAC/DoC,EAWN,GAVsB,MAAlBzb,KAAKuc,UAA0C,MAAtBD,EACzBlW,EACIpG,KAAK+L,sBAAsB3F,GACtBpG,KAAK6S,kBAAoB7S,KAAKqZ,yBAAyBjT,EAAI,IAE7C,MAAlBpG,KAAKuc,UAA0C,MAAtBD,KAC9BnW,EACInG,KAAK+L,sBAAsB5F,GACtBnG,KAAK6S,kBAAoB7S,KAAKqZ,yBAAyBlT,EAAI,IAEpEnG,KAAKoZ,cAAe,CAGpB,MAAQjT,EAAGqW,EAASpW,EAAGqW,GAAazc,KAAK6S,kBAEnC,CAAE1M,EAAG,EAAGC,EAAG,GADXpG,KAAKqZ,yBAELqD,EAAe1c,KAAKoZ,eAClBpT,MAAO2W,EAAc1W,OAAQ2W,GAAkB5c,KAAK6c,kBACtDC,EAAOJ,EAAanX,IAAMkX,EAC1BM,EAAOL,EAAa/V,QAAUiW,EAAgBH,GAGpDtW,EAAI6W,GAAQ7W,EAFCuW,EAAajX,KAAO+W,EACpBE,EAAahW,OAASiW,EAAeH,IAElDpW,EAAI4W,GAAQ5W,EAAG0W,EAAMC,EACzB,CACA,MAAO,CAAE5W,IAAGC,IAChB,CAEAsM,6BAA6BuK,GACzB,MAAQ9W,IAAGC,KAAM6W,EACX9J,EAAQnT,KAAKoT,uBACb8J,EAA0Bld,KAAKuZ,sCAE/B4D,EAAU9W,KAAKkL,IAAIpL,EAAI+W,EAAwB/W,GAC/CiX,EAAU/W,KAAKkL,IAAInL,EAAI8W,EAAwB9W,GAKrD,OAAI+W,EAAUnd,KAAKqP,QAAQgO,kCACvBlK,EAAMhN,EAAIA,EAAI+W,EAAwB/W,EAAI,GAAI,EAC9C+W,EAAwB/W,EAAIA,GAE5BiX,EAAUpd,KAAKqP,QAAQgO,kCACvBlK,EAAM/M,EAAIA,EAAI8W,EAAwB9W,EAAI,GAAI,EAC9C8W,EAAwB9W,EAAIA,GAEzB+M,CACX,CAEAjE,gCACI,IAAKlP,KAAK0L,eAAiB1L,KAAKmP,SAC5B,OAEJ,MAAMmO,EAAetd,KAAKmP,SAAS1F,OAAS,IAAMzJ,KAAKgS,aACnDsL,IAAiBtd,KAAKoQ,6BACtBpQ,KAAKoQ,2BAA6BkN,EAClCtY,EAA6BhF,KAAK0L,aAAc4R,GAExD,CAEA9I,4BAA4BvP,GACxBA,EAAQuI,oBAAoB,YAAaxN,KAAK+Q,aAAcrC,GAC5DzJ,EAAQuI,oBAAoB,aAAcxN,KAAK+Q,aAAcxC,IAC7DtJ,EAAQuI,oBAAoB,YAAaxN,KAAKsT,iBAAkB5E,EACpE,CAMAqE,2BAA2B5M,EAAGC,GAC1B,MAAMT,EAAYO,EAAaC,EAAGC,GAC5BmX,EAASvd,KAAK0L,aAAatG,MAIH,MAA1BpF,KAAKgM,oBACLhM,KAAKgM,kBACDuR,EAAO5X,WAAiC,QAApB4X,EAAO5X,UAAsB4X,EAAO5X,UAAY,IAK5E4X,EAAO5X,UAAYD,EAAkBC,EAAW3F,KAAKgM,kBACzD,CAMA0O,uBAAuBvU,EAAGC,GAGtB,MAAMR,EAAmB5F,KAAK6L,kBAAkB+B,cAAW8G,EAAY1U,KAAKgM,kBACtErG,EAAYO,EAAaC,EAAGC,GAClCpG,KAAKmM,SAASK,aAAa9G,EAAkBC,EAAWC,GAC5D,CAKAsN,iBAAiBsK,GACb,MAAMC,EAAiBzd,KAAK+L,sBAC5B,OAAI0R,EACO,CAAEtX,EAAGqX,EAAgBrX,EAAIsX,EAAetX,EAAGC,EAAGoX,EAAgBpX,EAAIqX,EAAerX,GAErF,CAAED,EAAG,EAAGC,EAAG,EACtB,CAEA4Q,2BACIhX,KAAKoZ,cAAgBpZ,KAAKyZ,kBAAe/E,EACzC1U,KAAK0T,iBAAiBhM,OAC1B,CAKAuN,iCACI,IAAM9O,IAAGC,KAAMpG,KAAKyP,kBACpB,GAAW,IAANtJ,GAAiB,IAANC,GAAYpG,KAAKgS,eAAiBhS,KAAKmQ,iBACnD,OAGJ,MAAMmL,EAActb,KAAK0L,aAAajF,wBAChCiW,EAAe1c,KAAKmQ,iBAAiB1J,wBAG3C,GAA4B,IAAvBiW,EAAa1W,OAAuC,IAAxB0W,EAAazW,QACnB,IAAtBqV,EAAYtV,OAAsC,IAAvBsV,EAAYrV,OACxC,OAEJ,MAAMyX,EAAehB,EAAajX,KAAO6V,EAAY7V,KAC/CkY,EAAgBrC,EAAY5U,MAAQgW,EAAahW,MACjDkX,EAAclB,EAAanX,IAAM+V,EAAY/V,IAC7CsY,EAAiBvC,EAAY3U,OAAS+V,EAAa/V,OAGrD+V,EAAa1W,MAAQsV,EAAYtV,OAC7B0X,EAAe,IACfvX,GAAKuX,GAELC,EAAgB,IAChBxX,GAAKwX,IAITxX,EAAI,EAIJuW,EAAazW,OAASqV,EAAYrV,QAC9B2X,EAAc,IACdxX,GAAKwX,GAELC,EAAiB,IACjBzX,GAAKyX,IAITzX,EAAI,GAEJD,IAAMnG,KAAKyP,kBAAkBtJ,GAAKC,IAAMpG,KAAKyP,kBAAkBrJ,IAC/DpG,KAAKkW,oBAAoB,CAAE9P,IAAGD,KAEtC,CAEA0L,mBAAmBhS,GACf,MAAM+E,EAAQ5E,KAAKsQ,eACnB,MAAqB,iBAAV1L,EACAA,EAEFsS,EAAarX,GACX+E,EAAMkZ,MAEVlZ,EAAQA,EAAMmZ,MAAQ,CACjC,CAEA5E,gBAAgBtZ,GACZ,MAAMme,EAAmBhe,KAAK0T,iBAAiBvL,aAAatI,GAC5D,GAAIme,EAAkB,CAClB,MAAMlY,KAASsC,MAAgBvI,GAG3BG,KAAKoZ,eACLtT,IAAW9F,KAAKmQ,kBAChBrK,EAAO8C,SAAS5I,KAAKmQ,mBACrBrJ,EAAc9G,KAAKoZ,cAAe4E,EAAiBzY,IAAKyY,EAAiBvY,MAE7EzF,KAAK+L,sBAAsB5F,GAAK6X,EAAiBvY,KACjDzF,KAAK+L,sBAAsB3F,GAAK4X,EAAiBzY,IAG5CvF,KAAKiP,iBACNjP,KAAK0P,iBAAiBvJ,GAAK6X,EAAiBvY,KAC5CzF,KAAK0P,iBAAiBtJ,GAAK4X,EAAiBzY,IAC5CvF,KAAK+S,2BAA2B/S,KAAK0P,iBAAiBvJ,EAAGnG,KAAK0P,iBAAiBtJ,GAEvF,CACJ,CAEAuV,6BACI,OAAQ3b,KAAK0T,iBAAiBlM,UAAU/F,IAAIzB,KAAKuH,YAAYO,gBACzD9H,KAAK0T,iBAAiB3L,2BAC9B,CAOAuO,iBACI,YAA+B5B,IAA3B1U,KAAKie,oBACLje,KAAKie,qBAAoB3H,MAAetW,KAAK0L,eAE1C1L,KAAKie,iBAChB,CAEApG,0BAA0BqG,EAAe9G,GACrC,MAAM+G,EAAmBne,KAAKoW,mBAAqB,SACnD,GAAyB,WAArB+H,EACA,OAAOD,EAEX,GAAyB,WAArBC,EAA+B,CAC/B,MAAMC,EAAcpe,KAAKuH,UAIzB,OAAQ6P,GACJgH,EAAYC,mBACZD,EAAYE,yBACZF,EAAYG,sBACZH,EAAYI,qBACZJ,EAAYtG,IACpB,CACA,SAAO5D,MAAciK,EACzB,CAEAtB,kBAGI,QAAK7c,KAAKyZ,eAAkBzZ,KAAKyZ,aAAazT,QAAUhG,KAAKyZ,aAAaxT,UACtEjG,KAAKyZ,aAAezZ,KAAKmM,SACnBnM,KAAKmM,SAAS1F,wBACdzG,KAAK4L,iBAER5L,KAAKyZ,YAChB,CAEAvI,iBAAiBrR,GACb,OAAOG,KAAKmP,SAASlC,KAAKmC,GACfvP,EAAMiG,SAAWjG,EAAMiG,SAAWsJ,GAAUA,EAAOxG,SAAS/I,EAAMiG,SAEjF,EAGJ,SAASkX,GAAQpY,EAAO6Z,EAAKC,GACzB,OAAOrY,KAAKqY,IAAID,EAAKpY,KAAKoY,IAAIC,EAAK9Z,GACvC,CAEA,SAASsS,EAAarX,GAIlB,MAAyB,MAAlBA,EAAMoK,KAAK,EACtB,CAEA,SAASsM,GAAqB1W,GAC1BA,EAAMsS,gBACV,CAQA,SAASwM,GAAgBC,EAAOC,EAAWC,GACvC,MAAMC,EAAOC,EAAMH,EAAWD,EAAMnV,OAAS,GACvCwV,EAAKD,EAAMF,EAASF,EAAMnV,OAAS,GACzC,GAAIsV,IAASE,EACT,OAEJ,MAAMnZ,EAAS8Y,EAAMG,GACf5L,EAAQ8L,EAAKF,GAAO,EAAK,EAC/B,QAASvV,EAAIuV,EAAMvV,IAAMyV,EAAIzV,GAAK2J,EAC9ByL,EAAMpV,GAAKoV,EAAMpV,EAAI2J,GAEzByL,EAAMK,GAAMnZ,CAChB,CA+BA,SAASkZ,EAAMpa,EAAO8Z,GAClB,OAAOrY,KAAKqY,IAAI,EAAGrY,KAAKoY,IAAIC,EAAK9Z,GACrC,CAOA,MAAMsa,GACFpe,YAAYqe,EAAU3P,GAClBxP,KAAKmf,SAAWA,EAChBnf,KAAKwP,kBAAoBA,EAEzBxP,KAAKof,eAAiB,GAEtBpf,KAAKqf,YAAc,WAMnBrf,KAAKsf,cAAgB,CACjBC,KAAM,KACNpM,MAAO,EACPqM,UAAU,EAElB,CAKAxH,MAAMyH,GACFzf,KAAK0f,UAAUD,EACnB,CAQAE,KAAK9F,EAAM3S,EAAUC,EAAUyY,GAC3B,MAAMC,EAAW7f,KAAKof,eAChBU,EAAW9f,KAAK+f,iCAAiClG,EAAM3S,EAAUC,EAAUyY,GACjF,IAAiB,IAAbE,GAAmBD,EAASpW,OAAS,EACrC,OAAO,KAEX,MAAMuW,EAAoC,eAArBhgB,KAAKqf,YACpB3F,EAAemG,EAASI,UAAUC,GAAeA,EAAYX,OAAS1F,GACtEsG,EAAuBN,EAASC,GAEhCM,EAAcD,EAAqBtZ,WACnCsM,EAAQuG,EAAeoG,EAAW,GAAI,EAEtCO,EAAargB,KAAKsgB,iBAJAT,EAASnG,GAAc7S,WAIWuZ,EAAajN,GAEjEoN,EAAgBvgB,KAAKwgB,oBAAoB9G,EAAcmG,EAAU1M,GAGjEsN,EAAWZ,EAASa,QAE1B/B,UAAgBkB,EAAUnG,EAAcoG,GACxCD,EAAS7X,QAAQ,CAAC2Y,EAASC,MAEvB,GAAIH,EAASG,MAAWD,EACpB,OAEJ,MAAME,GAAgBF,EAAQpB,OAAS1F,EACjCjH,EAASiO,GAAgBR,EAAaE,EACtCO,GAAkBD,GAClBhH,EAAKjG,wBACL+M,EAAQpB,KAAKzL,iBAEnB6M,EAAQ/N,QAAUA,EAKdoN,GAGAc,GAAgB1b,MAAMO,UAAYD,EAAmB,eAAcW,KAAKC,MAAMqa,EAAQ/N,mBAAoB+N,EAAQ/a,kBAClHkB,EAAc6Z,EAAQ9Z,WAAY,EAAG+L,KAGrCkO,GAAgB1b,MAAMO,UAAYD,EAAmB,kBAAiBW,KAAKC,MAAMqa,EAAQ/N,gBAAiB+N,EAAQ/a,kBAClHkB,EAAc6Z,EAAQ9Z,WAAY+L,EAAQ,GAAC,GAInD5S,KAAKsf,cAAcE,SAAW5Y,EAAmBwZ,EAAalZ,EAAUC,GACxEnH,KAAKsf,cAAcC,KAAOY,EAAqBZ,KAC/Cvf,KAAKsf,cAAcnM,MAAQ6M,EAAeJ,EAAazZ,EAAIyZ,EAAaxZ,EACjE,CAAE0T,cAAeJ,EAAcA,aAAcoG,EACxD,CASAxF,MAAMT,EAAM3S,EAAUC,EAAUyZ,GAC5B,MAAMd,EAAoB,MAATc,GAAiBA,EAAQ,EAGlC5gB,KAAK+f,iCAAiClG,EAAM3S,EAAUC,GACxDyZ,EACAG,EAAmB/gB,KAAKghB,kBACxBtH,EAAeqH,EAAiB/V,QAAQ6O,GACxCtC,EAAcsC,EAAKjG,wBACzB,IAAIqN,EAAuBF,EAAiBjB,GAqB5C,GAjBImB,IAAyBpH,IACzBoH,EAAuBF,EAAiBjB,EAAW,KAIlDmB,IACY,MAAZnB,IAAiC,IAAbA,GAAmBA,EAAWiB,EAAiBtX,OAAS,IAC7EzJ,KAAKkhB,yBAAyBha,EAAUC,KACxC8Z,EAAuBF,EAAiB,IAIxCrH,GAAe,GACfqH,EAAiBI,OAAOzH,EAAc,GAItCuH,IAAyBjhB,KAAKwP,kBAAkBwC,WAAWiP,GAAuB,CAClF,MAAMhc,EAAUgc,EAAqBnN,iBACrC7O,EAAQmc,cAAczJ,aAAaJ,EAAatS,GAChD8b,EAAiBI,OAAOrB,EAAU,EAAGjG,EACzC,MAEI3F,QAAclU,KAAKmf,UAAUtU,YAAY0M,GACzCwJ,EAAiBM,KAAKxH,GAG1BtC,EAAYnS,MAAMO,UAAY,GAI9B3F,KAAKshB,qBACT,CAEA5B,UAAUD,GACNzf,KAAKghB,kBAAoBvB,EAAMiB,QAC/B1gB,KAAKshB,qBACT,CAEAC,kBAAkBC,GACdxhB,KAAKyhB,eAAiBD,CAC1B,CAEA9L,QAEI1V,KAAKghB,kBAAkBhZ,QAAQ6R,IAC3B,MAAMtF,EAAcsF,EAAK/F,iBACzB,GAAIS,EAAa,CACb,MAAM3O,EAAmB5F,KAAKof,eAAenS,KAAKyU,GAAKA,EAAEnC,OAAS1F,IAAOjU,iBACzE2O,EAAYnP,MAAMO,UAAYC,GAAoB,EACtD,IAEJ5F,KAAKof,eAAiB,GACtBpf,KAAKghB,kBAAoB,GACzBhhB,KAAKsf,cAAcC,KAAO,KAC1Bvf,KAAKsf,cAAcnM,MAAQ,EAC3BnT,KAAKsf,cAAcE,UAAW,CAClC,CAKAmC,yBACI,OAAO3hB,KAAKghB,iBAChB,CAEA7I,aAAa0B,GAOT,OAHmC,eAArB7Z,KAAKqf,aAAmD,QAAnBrf,KAAK+V,UAClD/V,KAAKof,eAAesB,QAAQkB,UAC5B5hB,KAAKof,gBACEa,UAAUC,GAAeA,EAAYX,OAAS1F,EAC/D,CAEAgI,eAAepZ,EAAeC,GAK1B1I,KAAKof,eAAepX,QAAQ,EAAGnB,iBAC3BC,EAAcD,EAAY4B,EAAeC,EAAc,GAI3D1I,KAAKof,eAAepX,QAAQ,EAAGuX,WACvBvf,KAAKwP,kBAAkBwC,WAAWuN,IAGlCA,EAAKlJ,8BAA6B,EAG9C,CAEAiL,sBACI,MAAMtB,EAAoC,eAArBhgB,KAAKqf,YAC1Brf,KAAKof,eAAiBpf,KAAKghB,kBACtBvd,IAAI8b,IACL,MAAMuC,EAAmBvC,EAAKxL,oBAC9B,MAAO,CACHwL,OACA3M,OAAQ,EACRhN,iBAAkBkc,EAAiB1c,MAAMO,WAAa,GACtDkB,WAAYN,EAAqBub,GACrC,GAECnC,KAAK,CAACoC,EAAGC,IACHhC,EACD+B,EAAElb,WAAWpB,KAAOuc,EAAEnb,WAAWpB,KACjCsc,EAAElb,WAAWtB,IAAMyc,EAAEnb,WAAWtB,IAE9C,CAOA+a,iBAAiB9C,EAAiB4C,EAAajN,GAC3C,MAAM6M,EAAoC,eAArBhgB,KAAKqf,YAC1B,IAAIgB,EAAaL,EACXI,EAAY3a,KAAO+X,EAAgB/X,KACnC2a,EAAY7a,IAAMiY,EAAgBjY,IAExC,OAAc,IAAV4N,IACAkN,GAAcL,EACRI,EAAYpa,MAAQwX,EAAgBxX,MACpCoa,EAAYna,OAASuX,EAAgBvX,QAExCoa,CACX,CAOAG,oBAAoB9G,EAAcmG,EAAU1M,GACxC,MAAM6M,EAAoC,eAArBhgB,KAAKqf,YACpB7B,EAAkBqC,EAASnG,GAAc7S,WACzCob,EAAmBpC,EAASnG,GAAuB,EAARvG,GACjD,IAAIoN,EAAgB/C,EAAgBwC,EAAe,QAAU,UAAY7M,EACzE,GAAI8O,EAAkB,CAClB,MAAMjK,EAAQgI,EAAe,OAAS,MAChCrd,EAAMqd,EAAe,QAAU,UAKvB,IAAV7M,EACAoN,GAAiB0B,EAAiBpb,WAAWmR,GAASwF,EAAgB7a,GAGtE4d,GAAiB/C,EAAgBxF,GAASiK,EAAiBpb,WAAWlE,EAE9E,CACA,OAAO4d,CACX,CAMAW,yBAAyBha,EAAUC,GAC/B,IAAKnH,KAAKghB,kBAAkBvX,OACxB,OAAO,EAEX,MAAMyY,EAAgBliB,KAAKof,eACrBY,EAAoC,eAArBhgB,KAAKqf,YAI1B,GADiB6C,EAAc,GAAG3C,OAASvf,KAAKghB,kBAAkB,GACpD,CACV,MAAMmB,EAAeD,EAAcA,EAAczY,OAAS,GAAG5C,WAC7D,OAAOmZ,EAAe9Y,GAAYib,EAAazb,MAAQS,GAAYgb,EAAaxb,MACpF,CACK,CACD,MAAMyb,EAAgBF,EAAc,GAAGrb,WACvC,OAAOmZ,EAAe9Y,GAAYkb,EAAc3c,KAAO0B,GAAYib,EAAc7c,GACrF,CACJ,CAQAwa,iCAAiClG,EAAM3S,EAAUC,EAAUgM,GACvD,MAAM6M,EAAoC,eAArBhgB,KAAKqf,YACpBuB,EAAQ5gB,KAAKof,eAAea,UAAU,EAAGV,OAAM1Y,gBAE7C0Y,IAAS1F,MAGT1G,GAKIoM,IAASvf,KAAKsf,cAAcC,OAC5Bvf,KAAKsf,cAAcE,WALLQ,EAAe7M,EAAMhN,EAAIgN,EAAM/M,KAM/BpG,KAAKsf,cAAcnM,SAIlC6M,EAGC9Y,GAAYb,KAAKgc,MAAMxb,EAAWpB,OAASyB,EAAWb,KAAKgc,MAAMxb,EAAWH,OAC9ES,GAAYd,KAAKgc,MAAMxb,EAAWtB,MAAQ4B,EAAWd,KAAKgc,MAAMxb,EAAWF,WAErF,OAAiB,IAAVia,GAAiB5gB,KAAKyhB,eAAeb,EAAO/G,GAAa+G,GAAL,CAC/D,EAcJ,IAAI0B,EACH,SAAUA,GACPA,SAA4BA,EAA4BC,KAAU,GAAK,OACvED,EAA4BA,EAA4BE,GAAQ,GAAK,KACrEF,EAA4BA,EAA4BG,KAAU,GAAK,OAHhEH,CAIX,CAJC,CAIEA,GAA8D,CAAC,GAE9DI,EACH,SAAUA,GACPA,SAA8BA,EAA8BH,KAAU,GAAK,OAC3EG,EAA8BA,EAA8BC,KAAU,GAAK,OAC3ED,EAA8BA,EAA8BE,MAAW,GAAK,QAHrEF,CAIX,CAJC,CAIEA,GAAkE,CAAC,GAItE,MAAMG,GACF/hB,YAAYmE,EAASuK,EAAmBjI,EAAW+H,EAASC,GACxDvP,KAAKwP,kBAAoBA,EACzBxP,KAAKsP,QAAUA,EACftP,KAAKuP,eAAiBA,EAEtBvP,KAAK+O,UAAW,EAEhB/O,KAAKua,iBAAkB,EAKvBva,KAAK8iB,oBAAqB,EAE1B9iB,KAAK+iB,eAAiB,EAKtB/iB,KAAKgjB,eAAiB,KAAM,EAE5BhjB,KAAKijB,cAAgB,KAAM,EAE3BjjB,KAAKuQ,cAAgB,IAAIV,IAIzB7P,KAAK2Q,QAAU,IAAId,IAKnB7P,KAAK4Q,OAAS,IAAIf,IAElB7P,KAAK6Q,QAAU,IAAIhB,IAEnB7P,KAAKkjB,OAAS,IAAIrT,IAElB7P,KAAKmjB,iBAAmB,IAAItT,IAE5B7P,KAAKojB,iBAAmB,IAAIvT,IAE5B7P,KAAKqjB,aAAc,EAEnBrjB,KAAKsjB,YAAc,GAEnBtjB,KAAKujB,UAAY,GAEjBvjB,KAAKwjB,gBAAkB,IAAIhY,IAE3BxL,KAAKyjB,4BAA8Bvf,KAAa6L,MAEhD/P,KAAK0jB,yBAA2BpB,EAA4BC,KAE5DviB,KAAK2jB,2BAA6BjB,EAA8BH,KAEhEviB,KAAK4jB,kBAAoB,IAAI/T,IAE7B7P,KAAKie,kBAAoB,KAEzBje,KAAK6jB,qBAAuB,KACxB7jB,KAAK4W,iBCz6DV,SAASkN,EAASC,EAAS,EAAGC,EAAYC,KAC7C,OAAIF,EAAS,IACTA,EAAS,MAENG,KAAMH,EAAQA,EAAQC,EACjC,CDq6DYF,CAAS,EAAGK,MACP9gB,QAAK+gB,KAAUpkB,KAAK4jB,oBACpBlhB,UAAU,KACX,MAAMiG,EAAO3I,KAAKqkB,YACZC,EAAatkB,KAAK+iB,eACpB/iB,KAAK0jB,2BAA6BpB,EAA4BE,GAC9D7Z,EAAK4b,SAAS,GAAID,GAEbtkB,KAAK0jB,2BAA6BpB,EAA4BG,MACnE9Z,EAAK4b,SAAS,EAAGD,GAEjBtkB,KAAK2jB,6BAA+BjB,EAA8BC,KAClEha,EAAK4b,UAAUD,EAAY,GAEtBtkB,KAAK2jB,6BAA+BjB,EAA8BE,OACvEja,EAAK4b,SAASD,EAAY,EAAC,EAElC,EAELtkB,KAAKiF,WAAUiP,MAAcjP,GAC7BjF,KAAKuH,UAAYA,EACjBvH,KAAKwkB,sBAAsB,CAACxkB,KAAKiF,UACjCuK,EAAkBiV,sBAAsBzkB,MACxCA,KAAK0T,iBAAmB,IAAIpM,GAAsBC,GAClDvH,KAAK0kB,cAAgB,IAAIxF,GAAuBlf,KAAKiF,QAASuK,GAC9DxP,KAAK0kB,cAAcnD,kBAAkB,CAACX,EAAO/G,IAAS7Z,KAAKijB,cAAcrC,EAAO/G,EAAM7Z,MAC1F,CAEAmV,UACInV,KAAK4W,iBACL5W,KAAK4jB,kBAAkBnO,WACvBzV,KAAKyjB,4BAA4Bpf,cACjCrE,KAAKuQ,cAAckF,WACnBzV,KAAK2Q,QAAQ8E,WACbzV,KAAK4Q,OAAO6E,WACZzV,KAAK6Q,QAAQ4E,WACbzV,KAAKkjB,OAAOzN,WACZzV,KAAKmjB,iBAAiB1N,WACtBzV,KAAKojB,iBAAiB3N,WACtBzV,KAAKwjB,gBAAgB9b,QACrB1H,KAAKqkB,YAAc,KACnBrkB,KAAK0T,iBAAiBhM,QACtB1H,KAAKwP,kBAAkBmV,oBAAoB3kB,KAC/C,CAEAgS,aACI,OAAOhS,KAAKqjB,WAChB,CAEArL,QACIhY,KAAK4kB,mBACL5kB,KAAK6kB,0BACT,CASAvK,MAAMT,EAAM3S,EAAUC,EAAUyZ,GAC5B5gB,KAAK4kB,mBAGQ,MAAThE,GAAiB5gB,KAAKua,kBACtBqG,EAAQ5gB,KAAKsjB,YAAYtY,QAAQ6O,IAErC7Z,KAAK0kB,cAAcpK,MAAMT,EAAM3S,EAAUC,EAAUyZ,GAGnD5gB,KAAK8kB,wBAEL9kB,KAAK6kB,2BACL7kB,KAAK2Q,QAAQK,KAAK,CAAE6I,OAAM/H,UAAW9R,KAAM0Z,aAAc1Z,KAAKmY,aAAa0B,IAC/E,CAKAQ,KAAKR,GACD7Z,KAAK+kB,SACL/kB,KAAK4Q,OAAOI,KAAK,CAAE6I,OAAM/H,UAAW9R,MACxC,CAcAga,KAAKH,EAAMH,EAAcI,EAAeC,EAAmBJ,EAAwB1G,EAAUgE,EAAWpX,EAAQ,CAAC,GAC7GG,KAAK+kB,SACL/kB,KAAK6Q,QAAQG,KAAK,CACd6I,OACAH,eACAI,gBACAhI,UAAW9R,KACX+Z,oBACAJ,yBACA1G,WACAgE,YACApX,SAER,CAKA6f,UAAUD,GACN,MAAMuF,EAAgBhlB,KAAKsjB,YAC3B,OAAAtjB,KAAKsjB,YAAc7D,EACnBA,EAAMzX,QAAQ6R,GAAQA,EAAK7D,mBAAmBhW,OAC1CA,KAAKgS,eACgBgT,EAAc1hB,OAAOuW,GAAQA,EAAK7H,cAGtCiT,MAAMpL,IAAgC,IAAxB4F,EAAMzU,QAAQ6O,IACzC7Z,KAAK+kB,SAGL/kB,KAAK0kB,cAAchF,UAAU1f,KAAKsjB,cAGnCtjB,IACX,CAEA8V,cAAcC,GACV,OAAA/V,KAAK0kB,cAAc3O,UAAYA,EACxB/V,IACX,CAMAklB,YAAYA,GACR,OAAAllB,KAAKujB,UAAY2B,EAAYxE,QACtB1gB,IACX,CAKAmlB,gBAAgB9F,GAGZ,OAAArf,KAAK0kB,cAAcrF,YAAcA,EAC1Brf,IACX,CAKAwkB,sBAAsB5c,GAClB,MAAM3C,KAAUiP,MAAclU,KAAKiF,SAGnC,OAAAjF,KAAKolB,qBAC6B,IAA9Bxd,EAASoD,QAAQ/F,GAAkB,CAACA,KAAY2C,GAAYA,EAAS8Y,QAClE1gB,IACX,CAEAoY,uBACI,OAAOpY,KAAKolB,mBAChB,CAKAjN,aAAa0B,GACT,OAAO7Z,KAAKqjB,YACNrjB,KAAK0kB,cAAcvM,aAAa0B,GAChC7Z,KAAKsjB,YAAYtY,QAAQ6O,EACnC,CAKA5H,cACI,OAAOjS,KAAKwjB,gBAAgB6B,KAAO,CACvC,CAQA5K,UAAUZ,EAAM3S,EAAUC,EAAUyY,GAEhC,GAAI5f,KAAKua,kBACJva,KAAKslB,WACLte,GAAqBhH,KAAKslB,SA7RN,IA6R0Cpe,EAAUC,GACzE,OAEJ,MAAMoe,EAASvlB,KAAK0kB,cAAc/E,KAAK9F,EAAM3S,EAAUC,EAAUyY,GAC7D2F,GACAvlB,KAAKkjB,OAAOlS,KAAK,CACb8I,cAAeyL,EAAOzL,cACtBJ,aAAc6L,EAAO7L,aACrB5H,UAAW9R,KACX6Z,QAGZ,CAOAW,2BAA2BtT,EAAUC,GACjC,GAAInH,KAAK8iB,mBACL,OAEJ,IAAI0C,EACAC,EAA0BnD,EAA4BC,KACtDmD,EAA4BhD,EAA8BH,KAgB9D,GAdAviB,KAAK0T,iBAAiBlM,UAAUQ,QAAQ,CAAC1C,EAAUL,KAG3CA,IAAYjF,KAAKuH,YAAcjC,EAASuB,YAAc2e,GAGtDxe,GAAqB1B,EAASuB,WA9Tb,IA8TmDK,EAAUC,MAC7Ese,EAAyBC,GAyO1C,SAASC,GAA2B1gB,EAAS4B,EAAYkP,EAAW7O,EAAUC,GAC1E,MAAMye,EAAmBC,GAA2Bhf,EAAYM,GAC1D2e,EAAqBC,GAA6Blf,EAAYK,GACpE,IAAIue,EAA0BnD,EAA4BC,KACtDmD,EAA4BhD,EAA8BH,KAK9D,GAAIqD,EAAkB,CAClB,MAAM3d,EAAYhD,EAAQgD,UACtB2d,IAAqBtD,EAA4BE,GAC7Cva,EAAY,IACZwd,EAA0BnD,EAA4BE,IAGrDvd,EAAQ+gB,aAAe/d,EAAYhD,EAAQghB,eAChDR,EAA0BnD,EAA4BG,KAE9D,CACA,GAAIqD,EAAoB,CACpB,MAAM5d,EAAajD,EAAQiD,WACT,QAAd6N,EACI+P,IAAuBpD,EAA8BE,MAEjD1a,EAAa,IACbwd,EAA4BhD,EAA8BE,OAGzD3d,EAAQihB,YAAche,EAAajD,EAAQkhB,cAChDT,EAA4BhD,EAA8BC,MAI1DmD,IAAuBpD,EAA8BC,KACjDza,EAAa,IACbwd,EAA4BhD,EAA8BC,MAGzD1d,EAAQihB,YAAche,EAAajD,EAAQkhB,cAChDT,EAA4BhD,EAA8BE,MAGtE,CACA,MAAO,CAAC6C,EAAyBC,EACrC,CAtRuEC,CAA2B1gB,EAASK,EAASuB,WAAY7G,KAAK0kB,cAAc3O,UAAW7O,EAAUC,IACpJse,GAA2BC,KAC3BF,EAAavgB,OAKpBwgB,IAA4BC,EAA2B,CACxD,MAAQ1f,QAAOC,UAAWjG,KAAKuP,eAAe6W,kBACxCrf,EAAU,CACZf,QACAC,SACAV,IAAK,EACLmB,MAAOV,EACPW,OAAQV,EACRR,KAAM,GAEVggB,EAA0BI,GAA2B9e,EAASI,GAC9Due,EAA4BK,GAA6Bhf,EAASG,GAClEse,EAAa3c,MACjB,CACI2c,IACCC,IAA4BzlB,KAAK0jB,0BAC9BgC,IAA8B1lB,KAAK2jB,4BACnC6B,IAAexlB,KAAKqkB,eACxBrkB,KAAK0jB,yBAA2B+B,EAChCzlB,KAAK2jB,2BAA6B+B,EAClC1lB,KAAKqkB,YAAcmB,GACdC,GAA2BC,IAA8BF,EAC1DxlB,KAAKsP,QAAQmF,kBAAkBzU,KAAK6jB,sBAGpC7jB,KAAK4W,iBAGjB,CAEAA,iBACI5W,KAAK4jB,kBAAkB5S,MAC3B,CAEA4T,mBACI,MAAMrH,KAASrJ,MAAclU,KAAKiF,SAASG,MAC3CpF,KAAKuQ,cAAcS,OACnBhR,KAAKqjB,aAAc,EAInBrjB,KAAKqmB,mBAAqB9I,EAAO+I,kBAAoB/I,EAAOgJ,gBAAkB,GAC9EhJ,EAAOgJ,eAAiBhJ,EAAO+I,iBAAmB,OAClDtmB,KAAK0kB,cAAc1M,MAAMhY,KAAKsjB,aAC9BtjB,KAAK8kB,wBACL9kB,KAAKyjB,4BAA4Bpf,cACjCrE,KAAKwmB,uBACT,CAEA1B,wBACI,MAAM7f,KAAUiP,MAAclU,KAAKiF,SACnCjF,KAAK0T,iBAAiB/L,MAAM3H,KAAKolB,qBAGjCplB,KAAKslB,SAAWtlB,KAAK0T,iBAAiBlM,UAAU/F,IAAIwD,GAAS4B,UACjE,CAEAke,SACI/kB,KAAKqjB,aAAc,EACnB,MAAM9F,KAASrJ,MAAclU,KAAKiF,SAASG,MAC3CmY,EAAOgJ,eAAiBhJ,EAAO+I,iBAAmBtmB,KAAKqmB,mBACvDrmB,KAAKujB,UAAUvb,QAAQ2Y,GAAWA,EAAQ8F,eAAezmB,OACzDA,KAAK0kB,cAAchP,QACnB1V,KAAK4W,iBACL5W,KAAKyjB,4BAA4Bpf,cACjCrE,KAAK0T,iBAAiBhM,OAC1B,CAMAkS,iBAAiBzT,EAAGC,GAChB,OAAwB,MAAjBpG,KAAKslB,UAAoB1e,EAAmB5G,KAAKslB,SAAUnf,EAAGC,EACzE,CAQAgU,iCAAiCP,EAAM1T,EAAGC,GACtC,OAAOpG,KAAKujB,UAAUtW,KAAK0T,GAAWA,EAAQ+F,YAAY7M,EAAM1T,EAAGC,GACvE,CAOAsgB,YAAY7M,EAAM1T,EAAGC,GACjB,IAAKpG,KAAKslB,WACL1e,EAAmB5G,KAAKslB,SAAUnf,EAAGC,KACrCpG,KAAKgjB,eAAenJ,EAAM7Z,MAC3B,OAAO,EAEX,MAAM2mB,EAAmB3mB,KAAKsW,iBAAiBqQ,iBAAiBxgB,EAAGC,GAGnE,IAAKugB,EACD,OAAO,EAEX,MAAMC,KAAgB1S,MAAclU,KAAKiF,SAOzC,OAAO0hB,IAAqBC,GAAiBA,EAAche,SAAS+d,EACxE,CAKAE,gBAAgBlG,EAASlB,GACrB,MAAMqH,EAAiB9mB,KAAKwjB,iBACvBsD,EAAehiB,IAAI6b,IACpBlB,EAAMwF,MAAMpL,GAKD7Z,KAAKgjB,eAAenJ,EAAM7Z,OAASA,KAAKsjB,YAAYtY,QAAQ6O,IAAQ,KAE/EiN,EAAetkB,IAAIme,GACnB3gB,KAAK8kB,wBACL9kB,KAAKwmB,wBACLxmB,KAAKmjB,iBAAiBnS,KAAK,CACvB+V,UAAWpG,EACXqG,SAAUhnB,KACVyf,UAGZ,CAKAgH,eAAe9F,GACX3gB,KAAKwjB,gBAAgB3N,OAAO8K,GAC5B3gB,KAAKyjB,4BAA4Bpf,cACjCrE,KAAKojB,iBAAiBpS,KAAK,CAAE+V,UAAWpG,EAASqG,SAAUhnB,MAC/D,CAKAwmB,wBACIxmB,KAAKyjB,4BAA8BzjB,KAAKwP,kBACnCyJ,SAASjZ,KAAKsW,kBACd5T,UAAU7C,IACX,GAAIG,KAAKgS,aAAc,CACnB,MAAMgM,EAAmBhe,KAAK0T,iBAAiBvL,aAAatI,GACxDme,GACAhe,KAAK0kB,cAAc7C,eAAe7D,EAAiBzY,IAAKyY,EAAiBvY,KAEjF,MACSzF,KAAKiS,eACVjS,KAAK8kB,uBAAsB,EAGvC,CAOAxO,iBACI,IAAKtW,KAAKie,kBAAmB,CACzB,MAAM7G,KAAad,SAAepC,MAAclU,KAAKiF,UACrDjF,KAAKie,kBAAqB7G,GAAcpX,KAAKuH,SACjD,CACA,OAAOvH,KAAKie,iBAChB,CAEA4G,2BACI,MAAMoC,EAAejnB,KAAK0kB,cACrB/C,yBACAre,OAAOuW,GAAQA,EAAK7H,cACzBhS,KAAKujB,UAAUvb,QAAQ2Y,GAAWA,EAAQkG,gBAAgB7mB,KAAMinB,GACpE,EAOJ,SAASpB,GAA2Bhf,EAAYM,GAC5C,MAAQ5B,MAAKoB,SAAQV,UAAWY,EAC1BQ,EAjgByB,IAigBZpB,EACnB,OAAIkB,GAAY5B,EAAM8B,GAAcF,GAAY5B,EAAM8B,EAC3Cib,EAA4BE,GAE9Brb,GAAYR,EAASU,GAAcF,GAAYR,EAASU,EACtDib,EAA4BG,KAEhCH,EAA4BC,IACvC,CAMA,SAASwD,GAA6Blf,EAAYK,GAC9C,MAAQzB,OAAMiB,QAAOV,SAAUa,EACzBO,EAjhByB,IAihBZpB,EACnB,OAAIkB,GAAYzB,EAAO2B,GAAcF,GAAYzB,EAAO2B,EAC7Csb,EAA8BC,KAEhCzb,GAAYR,EAAQU,GAAcF,GAAYR,EAAQU,EACpDsb,EAA8BE,MAElCF,EAA8BH,IACzC,CA0DA,MAAM2E,GAA8B1Y,QAAgC,CAChEC,SAAS,EACTG,SAAS,IAGPuY,EAAa,IAAI3b,IACvB,IAIM4b,GAAa,MAAnB,MAAMA,EAAcrnB,SACPC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwFmnB,EAAa,EAAmDrnB,SACjKC,KAAKqnB,UADkF7mB,MAAE,CAAAyJ,KACJmd,EAAahnB,UAAA,mBAAAknB,UAAA,6BAAmG,IAAEC,YAAA,EAAAC,SAAA,CADhHhnB,OAAEinB,MAAA,EAAAC,KAAA,EAAA9Z,SAAA,SAAAtN,EAAAC,GAAA,EAAAgd,OAAA,8FAAAoK,cAAA,EAAAC,gBAAA,IAErG,OAHKR,CAAa,KAgBbS,GAAgB,MAAtB,MAAMA,EACF/mB,YAAYwO,EAAS/H,GACjBvH,KAAKsP,QAAUA,EACftP,KAAK8nB,WAAUC,OAAOC,OACtBhoB,KAAKioB,wBAAuBF,OAAOG,OAEnCloB,KAAKmoB,eAAiB,IAAI3c,IAE1BxL,KAAKooB,eAAiB,IAAI5c,IAE1BxL,KAAKqoB,qBAAuB,GAE5BroB,KAAKsoB,iBAAmB,IAAI7gB,IAK5BzH,KAAKuoB,mBAAsB1O,GAASA,EAAK7H,aAKzChS,KAAK+Y,YAAc,IAAIlJ,IAKvB7P,KAAKgZ,UAAY,IAAInJ,IAMrB7P,KAAKwoB,OAAS,IAAI3Y,IAKlB7P,KAAKyoB,6BAAgC5oB,IAC7BG,KAAKqoB,qBAAqB5e,OAAS,GACnC5J,EAAMsS,gBAAe,EAI7BnS,KAAK0oB,6BAAgC7oB,IAC7BG,KAAKqoB,qBAAqB5e,OAAS,IAI/BzJ,KAAKqoB,qBAAqBM,KAAK3oB,KAAKuoB,qBACpC1oB,EAAMsS,iBAEVnS,KAAK+Y,YAAY/H,KAAKnR,GAAK,EAGnCG,KAAKuH,UAAYA,CACrB,CAEAkd,sBAAsBzK,GACbha,KAAKmoB,eAAerjB,IAAIkV,IACzBha,KAAKmoB,eAAe3lB,IAAIwX,EAEhC,CAEArG,iBAAiB4L,GACbvf,KAAKooB,eAAe5lB,IAAI+c,GAIS,IAA7Bvf,KAAKooB,eAAe/C,MACpBrlB,KAAKsP,QAAQmF,kBAAkB,KAG3BzU,KAAKuH,UAAU+F,iBAAiB,YAAatN,KAAK0oB,6BAA8BxB,EAA2B,EAGvH,CAEAvC,oBAAoB3K,GAChBha,KAAKmoB,eAAetS,OAAOmE,EAC/B,CAEAzE,eAAegK,GACXvf,KAAKooB,eAAevS,OAAO0J,GAC3Bvf,KAAKyW,aAAa8I,GACe,IAA7Bvf,KAAKooB,eAAe/C,MACpBrlB,KAAKuH,UAAUiG,oBAAoB,YAAaxN,KAAK0oB,6BAA8BxB,EAE3F,CAMA1N,cAAc+F,EAAM1f,GAEhB,KAAIG,KAAKqoB,qBAAqBrd,QAAQuU,IAAQ,KAG9Cvf,KAAK4oB,cACL5oB,KAAKqoB,qBAAqBhH,KAAK9B,GACU,IAArCvf,KAAKqoB,qBAAqB5e,QAAc,CACxC,MAAMyN,EAAerX,EAAMoK,KAAK4e,WAAW,SAI3C7oB,KAAKsoB,iBACAzgB,IAAIqP,EAAe,WAAa,UAAW,CAC5C3J,QAAUub,GAAM9oB,KAAKgZ,UAAUhI,KAAK8X,GACpCC,SAAS,IAERlhB,IAAI,SAAU,CACf0F,QAAUub,GAAM9oB,KAAKwoB,OAAOxX,KAAK8X,GAGjCC,SAAS,IAMRlhB,IAAI,cAAe,CACpB0F,QAASvN,KAAKyoB,6BACdM,QAAS7B,IAIRhQ,GACDlX,KAAKsoB,iBAAiBzgB,IAAI,YAAa,CACnC0F,QAAUub,GAAM9oB,KAAK+Y,YAAY/H,KAAK8X,GACtCC,QAAS7B,IAGjBlnB,KAAKsP,QAAQmF,kBAAkB,KAC3BzU,KAAKsoB,iBAAiBtgB,QAAQ,CAACghB,EAAQ9e,KACnClK,KAAKuH,UAAU+F,iBAAiBpD,EAAM8e,EAAOzb,QAASyb,EAAOD,QAAO,EACvE,EAET,CACJ,CAEAtS,aAAa8I,GACT,MAAMqB,EAAQ5gB,KAAKqoB,qBAAqBrd,QAAQuU,GAC5CqB,GAAQ,IACR5gB,KAAKqoB,qBAAqBlH,OAAOP,EAAO,GACC,IAArC5gB,KAAKqoB,qBAAqB5e,QAC1BzJ,KAAKipB,wBAGjB,CAEAjX,WAAWuN,GACP,OAAOvf,KAAKqoB,qBAAqBrd,QAAQuU,IAAQ,CACrD,CAQAtG,SAAS7B,GACL,MAAM8R,EAAU,CAAClpB,KAAKwoB,QACtB,OAAIpR,GAAcA,IAAepX,KAAKuH,WAIlC2hB,EAAQ7H,KAAK,IAAI8H,IAAYC,GAClBppB,KAAKsP,QAAQmF,kBAAkB,KAElC,MAAMrS,EAAYvC,IACVG,KAAKqoB,qBAAqB5e,QAC1B2f,EAASpY,KAAKnR,EAAK,EAG3BuX,SAAW9J,iBAAiB,SAAUlL,GAAUinB,GACzC,KACHjS,EAAW5J,oBAAoB,SAAUpL,GAAUinB,EAAY,CACnE,MAEN,EAECC,QAASJ,EACpB,CACA/kB,cACInE,KAAKooB,eAAepgB,QAAQuhB,GAAYvpB,KAAKuV,eAAegU,IAC5DvpB,KAAKmoB,eAAengB,QAAQuhB,GAAYvpB,KAAK2kB,oBAAoB4E,IACjEvpB,KAAKipB,wBACLjpB,KAAK+Y,YAAYtD,WACjBzV,KAAKgZ,UAAUvD,UACnB,CAEAwT,wBACIjpB,KAAKsoB,iBAAiBtgB,QAAQ,CAACghB,EAAQ9e,KACnClK,KAAKuH,UAAUiG,oBAAoBtD,EAAM8e,EAAOzb,QAASyb,EAAOD,QAAO,GAE3E/oB,KAAKsoB,iBAAiB5gB,OAC1B,CAGAkhB,cACI,IAAKzB,EAAWriB,IAAI9E,KAAK8nB,SAAU,CAC/BX,EAAW3kB,IAAIxC,KAAK8nB,SACpB,MAAM0B,KAAeC,OAAgBrC,GAAe,CAChDsC,oBAAqB1pB,KAAKioB,uBAE9BjoB,KAAK8nB,QAAQ6B,UAAU,KACnBxC,EAAWtR,OAAO7V,KAAK8nB,SACC,IAApBX,EAAW9B,MACXmE,EAAaplB,SAAQ,EAGjC,CACJ,CAACrE,SACQC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwF4nB,GArOVrnB,MAqO4CA,OArO5CA,MAqOkEopB,MAAQ,EAA6C7pB,SAC9MC,KAAK6pB,WAtOkFrpB,MAAE,CAAAspB,MAsOYjC,EAAgB7jB,QAAhB6jB,EAAgB5jB,UAAA8lB,WAAc,SAC/I,OAxNKlC,CAAgB,KAkOtB,MAAMmC,GAAiB,CACnBxY,mBAAoB,EACpB6L,gCAAiC,GAErC,IAGM4M,GAAQ,MAAd,MAAMA,EACFnpB,YAAYyG,EAAW+H,EAASC,EAAgBC,GAC5CxP,KAAKuH,UAAYA,EACjBvH,KAAKsP,QAAUA,EACftP,KAAKuP,eAAiBA,EACtBvP,KAAKwP,kBAAoBA,CAC7B,CAMA0a,WAAWjlB,EAAS+jB,EAASgB,IACzB,OAAO,IAAIlb,GAAQ7J,EAAS+jB,EAAQhpB,KAAKuH,UAAWvH,KAAKsP,QAAStP,KAAKuP,eAAgBvP,KAAKwP,kBAChG,CAKA2a,eAAellB,GACX,OAAO,IAAI4d,GAAY5d,EAASjF,KAAKwP,kBAAmBxP,KAAKuH,UAAWvH,KAAKsP,QAAStP,KAAKuP,eAC/F,CAACxP,SACQC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwFgqB,GA9QVzpB,MA8QoCopB,MA9QpCppB,MA8QyDA,OA9QzDA,MA8Q+EqD,MA9Q/ErD,MA8Q4GqnB,IAAgB,EAA6C9nB,SAChQC,KAAK6pB,WA/QkFrpB,MAAE,CAAAspB,MA+QYG,EAAQjmB,QAARimB,EAAQhmB,UAAA8lB,WAAc,SACvI,OAxBKE,CAAQ,KAuCd,MAAMG,EAAkB,IAAIC,MAAe,mBAkBrCC,GAAkB,IAAID,MAAe,iBAC3C,IACME,GAAa,MAAnB,MAAMA,EAEF,YAAIxb,GACA,OAAO/O,KAAKgP,SAChB,CACA,YAAID,CAASnK,GACT5E,KAAKgP,UAAYpK,EACjB5E,KAAKwqB,cAAcxZ,KAAKhR,KAC5B,CACAc,YAAYmE,EAASwlB,GACjBzqB,KAAKiF,QAAUA,EACfjF,KAAKyqB,YAAcA,EAEnBzqB,KAAKwqB,cAAgB,IAAI3a,IACzB7P,KAAKgP,WAAY,EAIjByb,GAAaC,WAAW1qB,KAC5B,CACAmE,cACInE,KAAKyqB,aAAaE,cAAc3qB,MAChCA,KAAKwqB,cAAc/U,UACvB,CAAC1V,SACQC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwFsqB,GA3UV/pB,MA2UyCA,OA3UzCA,MA2UmE4pB,EAAe,MAA4ErqB,SACrPC,KAAK4qB,UA5UkFpqB,MAAE,CAAAyJ,KA4UJsgB,EAAanqB,UAAA,0BAAAknB,UAAA,sBAAAuD,OAAA,CAAA9b,SAAA,CA5UXvO,MAAEsqB,2BAAA,mCA4UsHC,QAAgBxD,YAAA,EAAAC,SAAA,CA5UxIhnB,MA4UqM,CAAC,CAAEwqB,QAASV,GAAiBW,YAAaV,KA5U/O/pB,SA6UnG,OA1BK+pB,CAAa,KAqDnB,MAAMW,GAAkB,IAAIb,MAAe,mBAQrCc,GAAgB,IAAId,MAAe,eACzC,IACMe,GAAO,MAAb,MAAMA,EAAQrrB,SACDC,KAAKooB,eAAiB,GAE/B,YAAIrZ,GACA,OAAO/O,KAAKgP,WAAchP,KAAKqX,eAAiBrX,KAAKqX,cAActI,QACvE,CACA,YAAIA,CAASnK,GACT5E,KAAKgP,UAAYpK,EACjB5E,KAAKqrB,SAAStc,SAAW/O,KAAKgP,SAClC,CACAlO,YAEAmE,EAEAoS,EAKA9P,EAAW+H,EAASgc,EAAmBtC,EAAQuC,EAAMC,EAAUC,EAAoBC,EAAajB,GAC5FzqB,KAAKiF,QAAUA,EACfjF,KAAKqX,cAAgBA,EACrBrX,KAAKsP,QAAUA,EACftP,KAAKsrB,kBAAoBA,EACzBtrB,KAAKurB,KAAOA,EACZvrB,KAAKyrB,mBAAqBA,EAC1BzrB,KAAK0rB,YAAcA,EACnB1rB,KAAKyqB,YAAcA,EACnBzqB,KAAK2rB,WAAa,IAAI9b,IACtB7P,KAAKmP,SAAW,IAAIyc,IAAgB,IAEpC5rB,KAAKwQ,QAAU,IAAIqb,MAEnB7rB,KAAKyQ,SAAW,IAAIob,MAEpB7rB,KAAK0Q,MAAQ,IAAImb,MAEjB7rB,KAAK2Q,QAAU,IAAIkb,MAEnB7rB,KAAK4Q,OAAS,IAAIib,MAElB7rB,KAAK6Q,QAAU,IAAIgb,MAKnB7rB,KAAK8Q,MAAQ,IAAIqY,IAAYC,IACzB,MAAM0C,EAAe9rB,KAAKqrB,SAASva,MAC9BzN,QAAKI,MAAIsoB,KACVtnB,OAAQzE,KACRqR,gBAAiB0a,EAAW1a,gBAC5BxR,MAAOksB,EAAWlsB,MAClBsT,MAAO4Y,EAAW5Y,MAClBF,SAAU8Y,EAAW9Y,aAEpBvQ,UAAU0mB,GACf,MAAO,KACH0C,EAAaznB,aAAY,CAC7B,GAEJrE,KAAKqrB,SAAWG,EAAStB,WAAWjlB,EAAS,CACzCuM,mBAAoBwX,GAAuC,MAA7BA,EAAOxX,mBAA6BwX,EAAOxX,mBAAqB,EAC9F6L,gCAAiC2L,GAAoD,MAA1CA,EAAO3L,gCAC5C2L,EAAO3L,gCACP,EACNzF,OAAQoR,GAAQpR,SAEpB5X,KAAKqrB,SAASW,KAAOhsB,KAIrBorB,EAAQhD,eAAe/G,KAAKrhB,MACxBgpB,GACAhpB,KAAKisB,gBAAgBjD,GASrB3R,IACArX,KAAKqrB,SAASrV,mBAAmBqB,EAAc6U,cAC/C7U,EAAc8U,QAAQnsB,OAE1BA,KAAKosB,YAAYpsB,KAAKqrB,UACtBrrB,KAAKqsB,cAAcrsB,KAAKqrB,SAC5B,CAKAzX,wBACI,OAAO5T,KAAKqrB,SAASzX,uBACzB,CAEAE,iBACI,OAAO9T,KAAKqrB,SAASvX,gBACzB,CAEA4B,QACI1V,KAAKqrB,SAAS3V,OAClB,CAIAO,sBACI,OAAOjW,KAAKqrB,SAASpV,qBACzB,CAKAC,oBAAoBtR,GAChB5E,KAAKqrB,SAASnV,oBAAoBtR,EACtC,CACA0nB,kBAGItsB,KAAKsP,QAAQmF,kBAAkB,KAK3BzU,KAAKsP,QAAQid,SAASlpB,QAAKmpB,KAAK,IAAC,EAAGpI,KAAUpkB,KAAK2rB,aAAajpB,UAAU,KACtE1C,KAAKysB,qBACLzsB,KAAK0sB,wBACD1sB,KAAK2sB,kBACL3sB,KAAKqrB,SAASnV,oBAAoBlW,KAAK2sB,iBAAgB,EAE9D,EAET,CACAC,YAAYC,GACR,MAAMC,EAAqBD,EAAQE,oBAC7BC,EAAiBH,EAAQF,iBAG3BG,IAAuBA,EAAmBG,aAC1CjtB,KAAKysB,qBAGLO,IAAmBA,EAAeC,aAAejtB,KAAK2sB,kBACtD3sB,KAAKqrB,SAASnV,oBAAoBlW,KAAK2sB,iBAE/C,CACAxoB,cACQnE,KAAKqX,eACLrX,KAAKqX,cAAc6V,WAAWltB,MAElC,MAAM4gB,EAAQwK,EAAQhD,eAAepd,QAAQhL,MACzC4gB,GAAQ,GACRwK,EAAQhD,eAAejH,OAAOP,EAAO,GAGzC5gB,KAAKsP,QAAQmF,kBAAkB,KAC3BzU,KAAKmP,SAASsG,WACdzV,KAAK2rB,WAAW3a,OAChBhR,KAAK2rB,WAAWlW,WAChBzV,KAAKqrB,SAASlW,SAAQ,EAE9B,CACAuV,WAAWtb,GACP,MAAM6E,EAAUjU,KAAKmP,SAASge,WAC9BlZ,EAAQoN,KAAKjS,GACbpP,KAAKmP,SAAS6B,KAAKiD,EACvB,CACA0W,cAAcvb,GACV,MAAM6E,EAAUjU,KAAKmP,SAASge,WACxBvM,EAAQ3M,EAAQjJ,QAAQoE,GAC1BwR,GAAQ,IACR3M,EAAQkN,OAAOP,EAAO,GACtB5gB,KAAKmP,SAAS6B,KAAKiD,GAE3B,CACAmZ,oBAAoBvf,GAChB7N,KAAK6L,iBAAmBgC,CAC5B,CACAwf,sBAAsBxf,GACdA,IAAY7N,KAAK6L,mBACjB7L,KAAK6L,iBAAmB,KAEhC,CACAyhB,wBAAwB/V,GACpBvX,KAAKsU,qBAAuBiD,CAChC,CACAgW,0BAA0BhW,GAClBA,IAAgBvX,KAAKsU,uBACrBtU,KAAKsU,qBAAuB,KAEpC,CAEAmY,qBACI,MAAMxnB,EAAUjF,KAAKiF,QAAQ2hB,cAC7B,IAAIrS,EAActP,EACdjF,KAAK+sB,sBACLxY,OACwBG,IAApBzP,EAAQuoB,QACFvoB,EAAQuoB,QAAQxtB,KAAK+sB,qBAEnB9nB,EAAQmc,eAAeoM,QAAQxtB,KAAK+sB,sBAKpD/sB,KAAKqrB,SAAS9X,gBAAgBgB,GAAetP,EACjD,CAEAwoB,sBACI,MAAMC,EAAW1tB,KAAK+U,gBACtB,OAAK2Y,EAGmB,iBAAbA,EACA1tB,KAAKiF,QAAQ2hB,cAAc4G,QAAQE,IAAQ,EAE/CxZ,MAAcwZ,GALV,IAMf,CAEAtB,YAAYuB,GACRA,EAAIpd,cAAc7N,UAAU,KACxB,IAAKirB,EAAI3b,aAAc,CACnB,MAAM4b,EAAM5tB,KAAKurB,KACXjb,EAAiBtQ,KAAKsQ,eACtBiH,EAAcvX,KAAKsU,qBACnB,CACE1G,SAAU5N,KAAKsU,qBAAqBuZ,YACpC1jB,QAASnK,KAAKsU,qBAAqB0X,KACnChe,cAAehO,KAAKsrB,mBAEtB,KACAzd,EAAU7N,KAAK6L,iBACf,CACE+B,SAAU5N,KAAK6L,iBAAiBgiB,YAChC1jB,QAASnK,KAAK6L,iBAAiBmgB,KAC/Bje,UAAW/N,KAAK6L,iBAAiBkC,UACjCC,cAAehO,KAAKsrB,mBAEtB,KACNqC,EAAI5e,SAAW/O,KAAK+O,SACpB4e,EAAIpR,SAAWvc,KAAKuc,SACpBoR,EAAIrd,eAC0B,iBAAnBA,GAA+BA,EAChCA,KACAwd,MAAqBxd,GAC/Bqd,EAAI9a,kBAAoB7S,KAAK6S,kBAC7B8a,EAAIjgB,aAAe1N,KAAK0N,aACxBigB,EACK7Y,oBAAoB9U,KAAKytB,uBACzBpZ,wBAAwBkD,GACxBnD,oBAAoBvG,GACpBsI,qBAAqBnW,KAAKme,kBAAoB,UAC/CyP,GACAD,EAAI7X,cAAc8X,EAAIhpB,MAE9B,IAGJ+oB,EAAIpd,cAAclN,QAAKmpB,KAAK,IAAI9pB,UAAU,KAEtC,GAAI1C,KAAKyqB,YAEL,YADAkD,EAAIna,WAAWxT,KAAKyqB,YAAYY,UAKpC,IAAInoB,EAASlD,KAAKiF,QAAQ2hB,cAAcxF,cACxC,KAAOle,GAAQ,CACX,GAAIA,EAAOyJ,UAAU/D,SArRb,YAqRwC,CAC5C+kB,EAAIna,WAAW4X,EAAQhD,eAAenb,KAAKsS,GAChCA,EAAKta,QAAQ2hB,gBAAkB1jB,IACtCmoB,UAAY,MAChB,KACJ,CACAnoB,EAASA,EAAOke,aACpB,GAER,CAEAiL,cAAcsB,GACVA,EAAInd,QAAQ9N,UAAUqrB,IAClB/tB,KAAKwQ,QAAQwd,KAAK,CAAEvpB,OAAQzE,KAAMH,MAAOkuB,EAAWluB,QAGpDG,KAAKyrB,mBAAmBwC,cAAa,GAEzCN,EAAIld,SAAS/N,UAAUwrB,IACnBluB,KAAKyQ,SAASud,KAAK,CAAEvpB,OAAQzE,KAAMH,MAAOquB,EAAaruB,OAAO,GAElE8tB,EAAIjd,MAAMhO,UAAUyrB,IAChBnuB,KAAK0Q,MAAMsd,KAAK,CACZvpB,OAAQzE,KACRiT,SAAUkb,EAASlb,SACnBgE,UAAWkX,EAASlX,UACpBpX,MAAOsuB,EAAStuB,QAIpBG,KAAKyrB,mBAAmBwC,cAAa,GAEzCN,EAAIhd,QAAQjO,UAAU0rB,IAClBpuB,KAAK2Q,QAAQqd,KAAK,CACdlc,UAAWsc,EAAWtc,UAAUka,KAChCnS,KAAM7Z,KACN0Z,aAAc0U,EAAW1U,cAC5B,GAELiU,EAAI/c,OAAOlO,UAAU2rB,IACjBruB,KAAK4Q,OAAOod,KAAK,CACblc,UAAWuc,EAAUvc,UAAUka,KAC/BnS,KAAM7Z,MACT,GAEL2tB,EAAI9c,QAAQnO,UAAU4rB,IAClBtuB,KAAK6Q,QAAQmd,KAAK,CACdlU,cAAewU,EAAUxU,cACzBJ,aAAc4U,EAAU5U,aACxBK,kBAAmBuU,EAAUvU,kBAAkBiS,KAC/Cla,UAAWwc,EAAUxc,UAAUka,KAC/BrS,uBAAwB2U,EAAU3U,uBAClCE,KAAM7Z,KACNiT,SAAUqb,EAAUrb,SACpBgE,UAAWqX,EAAUrX,UACrBpX,MAAOyuB,EAAUzuB,OACpB,EAET,CAEAosB,gBAAgBjD,GACZ,MAAQzM,WAAUjM,iBAAgBuC,oBAAmBnF,eAAcqH,kBAAiBwZ,mBAAkBxB,sBAAqB5O,oBAAsB6K,EACjJhpB,KAAK+O,SAAWwf,IAA2B,EAC3CvuB,KAAKsQ,eAAiBA,GAAkB,EACpCiM,IACAvc,KAAKuc,SAAWA,GAEhB1J,IACA7S,KAAK6S,kBAAoBA,GAEzBnF,IACA1N,KAAK0N,aAAeA,GAEpBqH,IACA/U,KAAK+U,gBAAkBA,GAEvBgY,IACA/sB,KAAK+sB,oBAAsBA,GAE3B5O,IACAne,KAAKme,iBAAmBA,EAEhC,CAEAuO,wBAEI1sB,KAAKmP,SACA9L,QAELmrB,MAAIva,IACA,MAAMwa,EAAiBxa,EAAQxQ,IAAI2L,GAAUA,EAAOnK,SAIhDjF,KAAK0rB,aAAe1rB,KAAK+sB,qBACzB0B,EAAepN,KAAKrhB,KAAKiF,SAE7BjF,KAAKqrB,SAASrX,YAAYya,EAAc,IAC3C,EAEDC,MAAWza,MACAqV,QAASrV,EAAQxQ,IAAIoW,GAAQA,EAAK2Q,cAAcnnB,QAAKG,MAAUqW,QACzE,EAAGuK,KAAUpkB,KAAK2rB,aACdjpB,UAAUisB,IAEX,MAAMC,EAAU5uB,KAAKqrB,SACfjc,EAASuf,EAAe1pB,QAAQ2hB,cACtC+H,EAAe5f,SAAW6f,EAAQjZ,cAAcvG,GAAUwf,EAAQhZ,aAAaxG,EAAM,EAE7F,CAACrP,SACQC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwFmrB,GA7uBV5qB,MA6uBmCA,OA7uBnCA,MA6uB6D2qB,GAAa,IA7uB1E3qB,MA6uBuHopB,MA7uBvHppB,MA6uB4IA,OA7uB5IA,MA6uBkKA,OA7uBlKA,MA6uBkM0qB,GAAe,GA7uBjN1qB,MA6uB8OquB,MAAmB,GA7uBjQruB,MA6uB8RypB,IA7uB9RzpB,MA6uBmTA,OA7uBnTA,MA6uBoV8pB,GAAe,IA7uBnW9pB,MA6uB4Y4pB,EAAe,MAA4ErqB,SAC9jBC,KAAK4qB,UA9uBkFpqB,MAAE,CAAAyJ,KA8uBJmhB,EAAOhrB,UAAA,oBAAAknB,UAAA,eAAAwH,SAAA,EAAAzuB,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GA9uBLE,MAAE,oBAAAD,EAAAwO,SAAFvO,CA8uBK,oBAAPD,EAAA8qB,SAAArZ,aAAO,EAAA6Y,OAAA,CAAAmB,KAAA,CA9uBLxrB,MAAEuuB,KAAA,sBAAAxS,SAAA,CAAF/b,MAAEuuB,KAAA,8BAAAhC,oBAAA,CAAFvsB,MAAEuuB,KAAA,4CAAAha,gBAAA,CAAFvU,MAAEuuB,KAAA,qCAAAze,eAAA,CAAF9P,MAAEuuB,KAAA,sCAAApC,iBAAA,CAAFnsB,MAAEuuB,KAAA,8CAAAhgB,SAAA,CAAFvO,MAAEsqB,2BAAA,6BA8uBuaC,OAAgBlY,kBAAA,CA9uBzbrS,MAAEuuB,KAAA,gDAAArhB,aAAA,CAAFlN,MAAEuuB,KAAA,sCAAA5Q,iBAAA,CAAF3d,MAAEuuB,KAAA,+CAAAC,QAAA,CAAAxe,QAAA,iBAAAC,SAAA,kBAAAC,MAAA,eAAAC,QAAA,iBAAAC,OAAA,gBAAAC,QAAA,iBAAAC,MAAA,gBAAAme,SAAA,YAAA1H,YAAA,EAAAC,SAAA,CAAFhnB,MA8uB49B,CAAC,CAAEwqB,QAASZ,EAAiBa,YAAaG,KA9uBtgC5qB,eA+uBnG,OA7XK4qB,CAAO,KAoeb,MAAM8D,EAAsB,IAAI7E,MAAe,oBAC/C,IAiCI8E,GAAmB,EAEjBC,GAAW,MAAjB,MAAMA,EACFrvB,SACSC,KAAKqvB,WAAa,GAE3B,YAAItgB,GACA,OAAO/O,KAAKgP,aAAgBhP,KAAKsvB,QAAUtvB,KAAKsvB,OAAOvgB,QAC3D,CACA,YAAIA,CAASnK,GAKT5E,KAAKksB,aAAand,SAAW/O,KAAKgP,UAAYpK,CAClD,CACA9D,YAEAmE,EAASumB,EAAUC,EAAoB8D,EAAmBhE,EAAM+D,EAAQtG,GACpEhpB,KAAKiF,QAAUA,EACfjF,KAAKyrB,mBAAqBA,EAC1BzrB,KAAKuvB,kBAAoBA,EACzBvvB,KAAKurB,KAAOA,EACZvrB,KAAKsvB,OAASA,EAEdtvB,KAAK2rB,WAAa,IAAI9b,IAMtB7P,KAAKklB,YAAc,GAKnBllB,KAAKwvB,GAAM,iBAAgBL,KAK3BnvB,KAAKgjB,eAAiB,KAAM,EAE5BhjB,KAAKijB,cAAgB,KAAM,EAE3BjjB,KAAK6Q,QAAU,IAAIgb,MAInB7rB,KAAK2Q,QAAU,IAAIkb,MAKnB7rB,KAAK4Q,OAAS,IAAIib,MAElB7rB,KAAKkjB,OAAS,IAAI2I,MAQlB7rB,KAAKyvB,eAAiB,IAAIjkB,IAI1BxL,KAAKksB,aAAeV,EAASrB,eAAellB,GAC5CjF,KAAKksB,aAAaF,KAAOhsB,KACrBgpB,GACAhpB,KAAKisB,gBAAgBjD,GAEzBhpB,KAAKksB,aAAalJ,eAAiB,CAACzD,EAAMvF,IAC/Bha,KAAKgjB,eAAezD,EAAKyM,KAAMhS,EAAKgS,MAE/ChsB,KAAKksB,aAAajJ,cAAgB,CAACrC,EAAOrB,EAAMvF,IACrCha,KAAKijB,cAAcrC,EAAOrB,EAAKyM,KAAMhS,EAAKgS,MAErDhsB,KAAK0vB,4BAA4B1vB,KAAKksB,cACtClsB,KAAKqsB,cAAcrsB,KAAKksB,cACxBkD,EAAYC,WAAWhO,KAAKrhB,MACxBsvB,GACAA,EAAOK,OAAOntB,IAAIxC,KAE1B,CAEAmsB,QAAQtS,GACJ7Z,KAAKyvB,eAAejtB,IAAIqX,GACpB7Z,KAAKksB,aAAala,cAClBhS,KAAK4vB,mBAEb,CAEA1C,WAAWrT,GACP7Z,KAAKyvB,eAAe5Z,OAAOgE,GACvB7Z,KAAKksB,aAAala,cAClBhS,KAAK4vB,mBAEb,CAEAC,iBACI,OAAOxhB,MAAM0Q,KAAK/e,KAAKyvB,gBAAgB9P,KAAK,CAACoC,EAAGC,IACnBD,EAAEsJ,SACtBtX,oBACA+b,wBAAwB9N,EAAEqJ,SAAStX,qBAIdgc,KAAKC,6BAA8B,EAAK,EAE1E,CACA7rB,cACI,MAAMyc,EAAQwO,EAAYC,WAAWrkB,QAAQhL,MACzC4gB,GAAQ,GACRwO,EAAYC,WAAWlO,OAAOP,EAAO,GAErC5gB,KAAKsvB,QACLtvB,KAAKsvB,OAAOK,OAAO9Z,OAAO7V,MAE9BA,KAAKyvB,eAAe/nB,QACpB1H,KAAKksB,aAAa/W,UAClBnV,KAAK2rB,WAAW3a,OAChBhR,KAAK2rB,WAAWlW,UACpB,CAEAia,4BAA4B/B,GACpB3tB,KAAKurB,MACLvrB,KAAKurB,KAAKvW,OACL3R,QAAKG,MAAUxD,KAAKurB,KAAK3mB,QAAK,EAAGwf,KAAUpkB,KAAK2rB,aAChDjpB,UAAUkC,GAAS+oB,EAAI7X,cAAclR,IAE9C+oB,EAAIpd,cAAc7N,UAAU,KACxB,MAAMmd,KAAWoQ,MAAYjwB,KAAKklB,aAAazhB,IAAIuW,GAC3B,iBAATA,EACuBoV,EAAYC,WAAWpiB,KAAKijB,GAAQA,EAAKV,KAAOxV,GAM3EA,GAWX,GATIha,KAAKsvB,QACLtvB,KAAKsvB,OAAOK,OAAO3nB,QAAQgS,KACQ,IAA3B6F,EAAS7U,QAAQgP,IACjB6F,EAASwB,KAAKrH,EAAI,IAMzBha,KAAKmwB,2BAA4B,CAClC,MAAMC,EAAoBpwB,KAAKuvB,kBAC1Bc,4BAA4BrwB,KAAKiF,SACjCxB,IAAI6sB,GAAcA,EAAWC,gBAAgB3J,eAClD5mB,KAAKksB,aAAa1H,sBAAsB4L,GAGxCpwB,KAAKmwB,4BAA6B,CACtC,CACAxC,EAAI5e,SAAW/O,KAAK+O,SACpB4e,EAAIpR,SAAWvc,KAAKuc,SACpBoR,EAAIpT,gBAAkBva,KAAKua,gBAC3BoT,EAAI7K,mBAAqB9iB,KAAK8iB,mBAC9B6K,EAAI5K,kBAAiB+K,MAAqB9tB,KAAK+iB,eAAgB,GAC/D4K,EACKzI,YAAYrF,EAASvc,OAAO0W,GAAQA,GAAQA,IAASha,MAAMyD,IAAIysB,GAAQA,EAAKhE,eAC5E/G,gBAAgBnlB,KAAKqf,YAAW,EAE7C,CAEAgN,cAAcsB,GACVA,EAAIpd,cAAc7N,UAAU,KACxB1C,KAAK4vB,oBACL5vB,KAAKyrB,mBAAmBwC,cAAa,GAEzCN,EAAIhd,QAAQjO,UAAU7C,IAClBG,KAAK2Q,QAAQqd,KAAK,CACdlc,UAAW9R,KACX6Z,KAAMha,EAAMga,KAAKmS,KACjBtS,aAAc7Z,EAAM6Z,cACvB,GAELiU,EAAI/c,OAAOlO,UAAU7C,IACjBG,KAAK4Q,OAAOod,KAAK,CACblc,UAAW9R,KACX6Z,KAAMha,EAAMga,KAAKmS,OAErBhsB,KAAKyrB,mBAAmBwC,cAAa,GAEzCN,EAAIzK,OAAOxgB,UAAU7C,IACjBG,KAAKkjB,OAAO8K,KAAK,CACblU,cAAeja,EAAMia,cACrBJ,aAAc7Z,EAAM6Z,aACpB5H,UAAW9R,KACX6Z,KAAMha,EAAMga,KAAKmS,MACpB,GAEL2B,EAAI9c,QAAQnO,UAAU4rB,IAClBtuB,KAAK6Q,QAAQmd,KAAK,CACdlU,cAAewU,EAAUxU,cACzBJ,aAAc4U,EAAU5U,aACxBK,kBAAmBuU,EAAUvU,kBAAkBiS,KAC/Cla,UAAWwc,EAAUxc,UAAUka,KAC/BnS,KAAMyU,EAAUzU,KAAKmS,KACrBrS,uBAAwB2U,EAAU3U,uBAClC1G,SAAUqb,EAAUrb,SACpBgE,UAAWqX,EAAUrX,UACrBpX,MAAOyuB,EAAUzuB,QAIrBG,KAAKyrB,mBAAmBwC,cAAa,IACxC,EACD3E,KAAMqE,EAAIxK,iBAAkBwK,EAAIvK,kBAAkB1gB,UAAU,IAAM1C,KAAKyrB,mBAAmBwC,eAC9F,CAEAhC,gBAAgBjD,GACZ,MAAQzM,WAAUgS,mBAAkBhU,kBAAiBiW,yBAAwBC,mBAAoBzH,EACjGhpB,KAAK+O,SAAWwf,IAA2B,EAC3CvuB,KAAKua,gBAAkBA,IAA0B,EACjDva,KAAK8iB,mBAAqB0N,IAAiC,EAC3DxwB,KAAKqf,YAAcoR,GAAmB,WAClClU,IACAvc,KAAKuc,SAAWA,EAExB,CAEAqT,oBACI5vB,KAAKksB,aAAaxM,UAAU1f,KAAK6vB,iBAAiBpsB,IAAIoW,GAAQA,EAAKwR,UACvE,CAACtrB,SACQC,KAAKiE,UAAI,SAAAhE,GAAA,WAAAA,GAAwFmvB,GAhmCV5uB,MAgmCuCA,OAhmCvCA,MAgmCiEypB,IAhmCjEzpB,MAgmCsFA,OAhmCtFA,MAgmCuHqD,KAhmCvHrD,MAgmCuJquB,MAAmB,GAhmC1KruB,MAgmCuM0uB,EAAmB,IAhmC1N1uB,MAgmCuQ0qB,GAAe,KAA4DnrB,SACzaC,KAAK4qB,UAjmCkFpqB,MAAE,CAAAyJ,KAimCJmlB,EAAWhvB,UAAA,0CAAAknB,UAAA,oBAAAwH,SAAA,EAAAzuB,aAAA,SAAAC,EAAAC,GAAA,EAAAD,IAjmCTE,MAAE,KAAAD,EAAAivB,IAAFhvB,MAAE,yBAAAD,EAAAwO,SAAFvO,CAimCS,yBAAXD,EAAA2rB,aAAAla,aAjmCExR,CAimCS,0BAAXD,EAAA2rB,aAAAja,eAAW,EAAA4Y,OAAA,CAAA3F,YAAA,CAjmCT1kB,MAAEuuB,KAAA,wCAAA/C,KAAA,CAAFxrB,MAAEuuB,KAAA,0BAAA1P,YAAA,CAAF7e,MAAEuuB,KAAA,wCAAAS,GAAA,KAAAjT,SAAA,CAAF/b,MAAEuuB,KAAA,kCAAAhgB,SAAA,CAAFvO,MAAEsqB,2BAAA,iCAimC2UC,OAAgBxQ,gBAAA,CAjmC7V/Z,MAAEsqB,2BAAA,+CAimCiaC,OAAgB/H,eAAA,CAjmCnbxiB,MAAEuuB,KAAA,8CAAA9L,cAAA,CAAFziB,MAAEuuB,KAAA,4CAAAjM,mBAAA,CAAFtiB,MAAEsqB,2BAAA,qDAimC+nBC,OAAgBhI,eAAA,CAjmCjpBviB,MAAEuuB,KAAA,+CAAAC,QAAA,CAAAne,QAAA,qBAAAF,QAAA,qBAAAC,OAAA,oBAAAsS,OAAA,qBAAA+L,SAAA,gBAAA1H,YAAA,EAAAC,SAAA,CAAFhnB,MAimC2lC,CAEnrC,CAAEwqB,QAASkE,EAAqBwB,cAAUhc,GAC1C,CAAEsW,QAASG,GAAeF,YAAamE,KApmCiD5uB,SAsmCnG,OA5OK4uB,CAAW","names":["convert","obj","fn","getWith","MousedownStopPropagationDirective","onMousedown","event","stopPropagation","static","this","t","_angular_core__WEBPACK_IMPORTED_MODULE_0__","FsC","selectors","hostBindings","rf","ctx","i0","$event","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","constructor","router","route","super","log","classLog","snapshot","url","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","end","navPath","navigate","navRelative","commands","relativeTo","navParentFirstChild","parent","firstChild","events","pipe","filter","NavigationEnd","startWith","map","pairwise","hadChildBefore","hasChildNow","i1","_angular_core__WEBPACK_IMPORTED_MODULE_7__","jDH","factory","ɵfac","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","extendStyles","dest","source","importantProperties","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","matchElementSize","target","sourceRect","width","height","getTransform","x","y","Math","round","getMutableClientRect","rect","getBoundingClientRect","right","bottom","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","type","name","context","getContext","drawImage","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","_preview","_createPreview","showPopover","remove","_previewEmbeddedView","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","removeEventListener","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","change","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_getShadowRoot","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","itemPositions","lastItemRect","firstItemRect","floor","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","every","connectedTo","withOrientation","_scrollableElements","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","activeApps","_ResetsLoader","ɵcmp","hostAttrs","standalone","features","decls","vars","encapsulation","changeDetection","DragDropRegistry","_appRef","inject","ApplicationRef","_environmentInjector","EnvironmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","startsWith","e","options","config","_clearGlobalListeners","streams","Observable","observer","eventOptions","merge","instance","componentRef","createComponent","environmentInjector","onDestroy","DOCUMENT","ɵprov","token","providedIn","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","_addHandle","_removeHandle","ɵdir","inputs","HasDecoratorInputTransform","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","BehaviorSubject","EventEmitter","subscription","movedEvent","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","ref","dir","templateRef","coerceNumberProperty","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","handleInstance","dragRef","i1$1","hostVars","None","outputs","exportAs","CDK_DROP_LIST_GROUP","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/core/object-utilities.ts","./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n  standalone: true\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if ('showPopover' in this._preview) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._sortStrategy.direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}\"] }]\n        }] });\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"x_google_ignoreList":[4,5]}