{"version":3,"mappings":"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","names":["QueryDefinitionService","constructor","http","context","dnnContext","this","fetchPipeline","pipelineEntityId","dataSources","get","$2sxc","apiUrl","webApiQueryGet","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","eavConstants","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","n","_a","s","Top","Left","fetchDataSources","webApiQueryDataSources","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","TypeNameForUi","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","webApiQuerySave","Id","newPipelineModel","runPipeline","top","webApiQueryRun","debugStream","source","sourceOut","webApiQueryDebugStream","from","out","i0","factory","ctx_r14","QueryResultComponent","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","t","Params","_b","filter","el","testParams","o","TestParameters","_c","_d","parameters","concat","timeUsed","result","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","Streams","closeDialog","close","show","original","MAT_DIALOG_DATA","selectors","ctx","StreamErrorResultComponent","errorData","openInsights","window","open","VisualQueryService","BaseComponent","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","super","BehaviorSubject","Subject","parseInt","snapshot","paramMap","ngOnDestroy","complete","dataSources$","putEntityCountOnConnections$","init","attachKeyboardSave","subscription","add","refreshOnChildClosedShallow","subscribe","refreshPipeline","refreshDataSourceConfigs","editPipelineEntity","formUrl","convertFormToUrl","items","navigate","relativeTo","saveAndRun","save","run","showDataSourceDetails","showDetails","cloneDeep","visualDesignerData","ShowDataSourceDetails","JSON","stringify","next","addDataSource","removeDataSource","pipelineDataSourceGuid","connections","streamsOut","StreamsOut","renameDataSource","name","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","position","Object","calculateDataSourceConfigs","dataSourceConfigs","forEach","Metadata","metadataItem","entries","attributeName","attributeValue","includes","Array","isArray","d","Title","p","dataSourceConfigs$","editDataSource","contentTypeName","key","getMetadata","metadata","Items","retrieveContentType","contentType","duration","ContentTypeName","For","Target","TargetType","Guid","error","callback","pipelineResult","showQueryResult","console","warn","setTimeout","stream","Error","showStreamErrorResult","Count","Source","SourceOut","streamResult","sourceName","showSnackBar","pipelineId","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","fromEvent","firstChild","event","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Unknown","Debug","System","typeInfos","typeInfo","ctx_r13","ctx_r15","ctx_r16","RenameStreamComponent","BaseSubsinkComponent","isSource","buildForm","label","toggleGuidedLabel","guidedLabel","toggleAdvancedMode","advancedMode","checked","rename","formValue","form","getRawValue","FormGroup","FormControl","Validators","scope","controls","pipelineResultExists","valueChanges","startWith","distinctUntilChanged","labelOptions","values","Scope","patchValue","getScopes","scopes","filtered","scopeOptions","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","a","reset","unbindContainer","removeEndpointsOnDataSource","elementId","bulkDelete","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","To","targetId","getStreamsOut","target","each","endpoint","join","putEntityCountOnConnections","sourceElementId","toUuid","outTargets","TargetIn","sEndp","getEndpoint","f","getUuid","setLabel","cssClass","events","click","overlay","AllowEdit","nextLinePaintStyle","uuid","uuidColorMap","assign","linePaintDefault","lineCount","maxCols","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","finalPos","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","guid","pipeDataSource","connect","uuids","paintStyle","e","message","to","endpointName","isIn","isDynamic","getEndpointInfo","r","endpointInfo","style","required","l","model","enabled","fill","radius","anchor","faces","overlays","getEndpointOverlays","endpointOrOverlay","onChangeLabel","isTarget","dropOptions","hoverClass","activeClass","location","width","afterClosed","newLabel","bind","info","targetEndpoint","deleteEndpoint","deleteConnection","fireEvent","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","trimmed","trim","endsWith","substring","oxw","ctx_r20","ctx_r27","ctx_r30","PlumbEditorComponent","loadScripts","test","src","scriptLoaded$","plumber","pipelineDesignerData$","GeneralHelpers","templateModel$","combineLatest","pipelineDesignerData","hardReset","detectChanges","calculateTypeInfos","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","scriptLoaded","domDataSourcesLoaded","Plumber","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","editDescription","newDescription","ctx_r22","ctx_r24","ctx_r25","ctx_r26","ctx_r28","RunExplorerComponent","asObservable","warnings$","warnings","queryParams","param","matched","midMatch","exec","testMid","urlMid","u","moduleId","oldMidMatch","calculateWarnings","visualDesignerData$","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","GoToDevRest","ctx_r7","ctx_r10","ctx_r12","AddExplorerComponent","difficulties","default","sorted$","difficulty$","difficulty","maxDifficulty","cloned","sort","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","toggleDifficulty","advanced","toggleItem","item","toggledItems","trackGroups","index","trackDataSources","routes","path","component","explorer","toggleExplorer","activeExplorer","VisualQueryComponent","decls","children","matcher","edit","loadChildren","Promise","then","m","EditModule","history","VisualQueryRoutingModule","RouterModule","VisualQueryModule","Context","MetadataService","ContentTypesService","imports","CommonModule","SharedComponentsModule","MatIconModule","MatButtonModule","MatSlideToggleModule","MatSnackBarModule","MatDialogModule","MatTabsModule","MatFormFieldModule","ReactiveFormsModule","MatSelectModule","MatInputModule"],"sources":["./projects/eav-ui/src/app/visual-query/services/query-definition.service.ts","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.html","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/eav-ui/src/app/visual-query/services/visual-query.service.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/visual-query-routing.module.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.html","./projects/eav-ui/src/app/visual-query/visual-query.module.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          TypeNameForUi: undefined,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, filter, fromEvent, Subject } from 'rxjs';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { BaseComponent } from '../../shared/components/base-component/base.component';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceConfig, DataSourceConfigs, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService extends BaseComponent implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n  dataSourceConfigs$ = new BehaviorSubject<DataSourceConfigs>({});\r\n  pipelineResult?: PipelineResult;\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private refreshPipeline = false;\r\n  private refreshDataSourceConfigs = false;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline(true, true, false));\r\n    this.attachKeyboardSave();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { \r\n      if (this.refreshPipeline || this.refreshDataSourceConfigs) {\r\n        this.fetchPipeline(this.refreshPipeline, this.refreshDataSourceConfigs, this.refreshPipeline);\r\n      }\r\n      this.refreshPipeline = false;\r\n      this.refreshDataSourceConfigs = false;\r\n     }));\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.refreshPipeline = true;\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  showDataSourceDetails(showDetails: boolean) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const visualDesignerData: Record<string, any> = GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {};\r\n    visualDesignerData.ShowDataSourceDetails = showDetails;\r\n    pipelineModel.Pipeline.VisualDesignerData = JSON.stringify(visualDesignerData);\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  private calculateDataSourceConfigs(dataSources: PipelineDataSource[]) {\r\n    const dataSourceConfigs: DataSourceConfigs = {};\r\n    dataSources.forEach(dataSource => {\r\n      if (dataSource.EntityId == null) { return; }\r\n      dataSourceConfigs[dataSource.EntityId] = [];\r\n      dataSource.Metadata?.forEach(metadataItem => {\r\n        Object.entries(metadataItem).forEach(([attributeName, attributeValue]) => {\r\n          if (attributeValue == null || attributeValue === '') { return; }\r\n          if (['Created', 'Guid', 'Id', 'Modified', 'Title', '_Type'].includes(attributeName)) { return; }\r\n          if (Array.isArray(attributeValue) && attributeValue[0]?.Title != null && attributeValue[0]?.Id != null) {\r\n            attributeValue = `${attributeValue[0].Title} (${attributeValue[0].Id})`;\r\n          }\r\n          const dataSourceConfig: DataSourceConfig = {\r\n            name: attributeName,\r\n            value: attributeValue,\r\n          };\r\n          dataSourceConfigs[dataSource.EntityId].push(dataSourceConfig);\r\n        });\r\n      });\r\n    });\r\n    this.dataSourceConfigs$.next(dataSourceConfigs);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const contentTypeName = dataSource.ContentType;\r\n    const targetType = eavConstants.metadata.entity.targetType;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata(targetType, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.Items.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata.Items[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        this.refreshDataSourceConfigs = true;\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName).subscribe({\r\n        next: contentType => {\r\n          if (contentType == null) {\r\n            this.snackBar.open('DataSource doesn\\'t have any configuration', undefined, { duration: 3000 });\r\n            return;\r\n          }\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                TargetType: eavConstants.metadata.entity.targetType,\r\n                Guid: key,\r\n              },\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n          this.refreshDataSourceConfigs = true;\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          const message = 'Server reports error - this usually means that this DataSource doesn\\'t have any configuration';\r\n          this.snackBar.open(message, undefined, { duration: 3000 });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.pipelineResult = pipelineResult;\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(refreshPipeline: boolean, refreshDataSourceConfigs: boolean, showSnackBar: boolean) {\r\n    if (showSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (showSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n      if (refreshPipeline) {\r\n        this.pipelineModel$.next(pipelineModel);\r\n      }\r\n      if (refreshDataSourceConfigs) {\r\n        this.calculateDataSourceConfigs(pipelineModel.DataSources);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Rename stream</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <p class=\"dialog-description\"></p> -->\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Simple form -->\r\n    <ng-container *ngIf=\"!isSource || !pipelineResultExists\">\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"label\" required>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"isSource && !pipelineResultExists\">\r\n        You will get suggestions for out-streams after you run query\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n\r\n    <!-- Rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedLabel\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <mat-select *ngIf=\"guidedLabel\" formControlName=\"label\" required\r\n          [placeholder]=\"!labelOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let labelOption of labelOptions\" [value]=\"labelOption\">\r\n            {{ labelOption }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedLabel\" formControlName=\"label\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedLabel }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedLabel(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedLabel }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedLabel(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <!-- Extra button for rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n    </ng-container>\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"rename()\">\r\n      Rename\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { distinctUntilChanged, startWith, Subscription } from 'rxjs';\r\nimport { ContentTypesService } from '../../../app-administration/services';\r\nimport { BaseSubsinkComponent } from '../../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { VisualQueryService } from '../../services/visual-query.service';\r\nimport { RenameStreamDialogControls, RenameStreamDialogData, RenameStreamDialogFormValue } from './rename-stream.models';\r\n\r\n@Component({\r\n  selector: 'app-rename-stream',\r\n  templateUrl: './rename-stream.component.html',\r\n  styleUrls: ['./rename-stream.component.scss']\r\n})\r\nexport class RenameStreamComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  controls: RenameStreamDialogControls;\r\n  isSource = this.dialogData.isSource;\r\n  pipelineResultExists = this.visualQueryService.pipelineResult != null;\r\n  scopeOptions: ScopeOption[] = [];\r\n  labelOptions: string[] = [];\r\n  guidedLabel = true;\r\n  advancedMode = false;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: RenameStreamDialogData,\r\n    private dialogRef: MatDialogRef<RenameStreamComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(label?: string): void {\r\n    this.dialogRef.close(label);\r\n  }\r\n\r\n  toggleGuidedLabel(guidedLabel: boolean): void {\r\n    this.guidedLabel = guidedLabel;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  rename(): void {\r\n    const formValue: RenameStreamDialogFormValue = this.form.getRawValue();\r\n    this.closeDialog(formValue.label);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({\r\n      label: new FormControl(this.dialogData.label, Validators.required),\r\n      scope: new FormControl(eavConstants.scopes.default.value),\r\n    });\r\n    this.controls = this.form.controls as any;\r\n\r\n    if (!this.isSource || !this.pipelineResultExists) { return; }\r\n\r\n    this.subscription.add(\r\n      this.controls.scope.valueChanges.pipe(\r\n        startWith<string>(this.controls.scope.value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.labelOptions = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n          .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out\r\n          .filter(out => out.Scope === scope)\r\n          .map(out => out.Name);\r\n        if (!this.labelOptions.includes(this.controls.label.value) && this.controls.label.value != null) {\r\n          this.controls.label.patchValue(null);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      const sourceOut = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n        .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out;\r\n      const filtered = scopes.filter(s => sourceOut.some(o => o.Scope === s.value));\r\n      this.scopeOptions = filtered;\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\nimport { RenameStreamComponent } from './rename-stream/rename-stream.component';\r\nimport { RenameStreamDialogData } from './rename-stream/rename-stream.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n  private dialogRef: MatDialogRef<RenameStreamComponent>;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.dialogRef?.close();\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (overlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint(pipelineDataSource.EntityGuid);\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(pipelineDataSource.EntityGuid), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn\r\n      ? this.buildTargetEndpoint(pipelineDataSource.EntityGuid, style)\r\n      : this.buildSourceEndpoint(pipelineDataSource.EntityGuid, style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endpoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endpoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = true;\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = false;\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: !isSource,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' },\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n        },\r\n      ],\r\n    ];\r\n  }\r\n\r\n  private onChangeLabel(endpointOrOverlay: PlumbType, isSource: boolean, pipelineDataSourceGuid: string) {\r\n    if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n    const overlay: PlumbType = endpointOrOverlay.getOverlay ? endpointOrOverlay.getOverlay('endpointLabel') : endpointOrOverlay;\r\n    const data: RenameStreamDialogData = {\r\n      pipelineDataSourceGuid,\r\n      isSource,\r\n      label: overlay.label,\r\n    };\r\n    this.dialogRef = this.dialog.open(RenameStreamComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.dialogRef.afterClosed().subscribe(newLabel => {\r\n      if (!newLabel) { return; }\r\n      overlay.setLabel(newLabel);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\" [ngClass]=\"{\r\n        'show-details': templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <ng-container\r\n        *ngIf=\"templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\">\r\n        <hr style=\"margin: 0\">\r\n        <table class=\"configs\">\r\n          <tr class=\"config\" *ngFor=\"let config of templateModel.dataSourceConfigs[dataSource.EntityId]\">\r\n            <td class=\"config-name\" [title]=\"config.name\">{{ config.name }}</td>\r\n            <td class=\"config-value\" [title]=\"config.value\">{{ config.value }}</td>\r\n          </tr>\r\n        </table>\r\n      </ng-container>\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <div class=\"add-endpoint sourceEndpoint dynamic\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n      </div>\r\n\r\n      <div class=\"many-in targetEndpoint dynamic\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, Subscription } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent extends BaseSubsinkComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    super();\r\n   }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    const pipelineDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel?.Pipeline.VisualDesignerData) ?? {}),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([\r\n      this.visualQueryService.pipelineModel$,\r\n      this.visualQueryService.dataSources$,\r\n      pipelineDesignerData$,\r\n      this.visualQueryService.dataSourceConfigs$,\r\n    ]).pipe(\r\n      map(([pipelineModel, dataSources, pipelineDesignerData, dataSourceConfigs]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n          showDataSourceDetails: pipelineDesignerData.ShowDataSourceDetails ?? false,\r\n          dataSourceConfigs,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n          this.dialog,\r\n          this.viewContainerRef,\r\n          this.changeDetectorRef,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    const dataSource = this.visualQueryService.dataSources$.value.find(ds => ds.PartAssemblyAndType === partAssemblyAndType);\r\n    return this.queryDefinitionService.typeNameFilter(dataSource?.TypeNameForUi || partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\" *ngIf=\"visualDesignerData$ | async as visualDesignerData\">\r\n      <mat-slide-toggle color=\"primary\" labelPosition=\"before\" [checked]=\"visualDesignerData.ShowDataSourceDetails\"\r\n        (change)=\"showDataSourceDetails($event)\">\r\n        Show DataSource Params\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon>code_curly</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { map, Observable } from 'rxjs';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n  visualDesignerData$: Observable<Record<string, any>>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$.asObservable();\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n    this.visualDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {}),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  showDataSourceDetails(event: MatSlideToggleChange): void {\r\n    this.visualQueryService.showDataSourceDetails(event.checked);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId?.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" color=\"primary\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { edit } from '../edit/edit.matcher';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { RenameStreamComponent } from './plumb-editor/rename-stream/rename-stream.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n    RenameStreamComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_visual-query_visual-query_module_ts.6833954168b2d982.js"}