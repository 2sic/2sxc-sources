{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts--6117d1.bb1c64712b3f95cb.js","mappings":"uXAWO,MAAMA,EAAiB,cAGxBC,EAAmB,oBAOlB,IAAMC,EAAmB,MAA1B,MAAOA,EACXC,YAAoBC,EAA0BC,EAA0BC,GAApDC,KAAAH,OAA0BG,KAAAF,UAA0BE,KAAAD,YAA0B,CAE1FE,OAAOC,GACb,OAAOF,KAAKD,WAAWI,MAAMN,KAAKI,OAAOC,EAC3C,CAEAE,oBAAoBC,GAClB,OAAOL,KAAKH,KAAKS,IAAiBN,KAAKC,OAjBrB,kBAiB4C,CAC5DM,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYC,cAAeL,IAEnE,CAEAM,qBAAqBC,GACnB,OAAOZ,KAAKH,KAAKS,IAAmBN,KAAKC,OAtBzB,mBAsB8C,CAC5DM,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYG,UAEpD,CAGAC,YACE,OAAOb,KAAKH,KAAKS,IAAgEN,KAAKC,OAAOP,GAAmB,CAC9Ga,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,cACnCK,QACDC,KAAIC,IAEF,MAAMC,EAASD,EAAWE,IAE1B,OADoCC,OAAOC,KAAKH,GAAQF,IAAIM,KAAUnB,KAAMe,EAAOI,GAAMC,MAAOD,IAAM,GAI5G,CAEAE,cACE,OAAOvB,KAAKH,KAAKS,IAAgEN,KAAKC,OAAOP,GAAmB,CAC9Ga,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,cACnCK,QACDC,KAAIC,GAAcA,EAAWC,QAEjC,CAEAO,KAAKC,GACH,OAAOzB,KAAKH,KAAK6B,KAAc1B,KAAKC,OAhDjB,mBAgDyCwB,EAAa,CACvElB,OAAQ,CAAEoB,MAAO3B,KAAKF,QAAQU,MAAMC,aAExC,CAEAmB,OAAOH,GACL,OAAOzB,KAAKH,KAAK+B,OAAgB5B,KAAKC,OArDjB,qBAqD2C,CAC9DM,OAAQ,CAAEoB,MAAO3B,KAAKF,QAAQU,MAAMC,WAAYJ,WAAYoB,EAAYI,aAE5E,CAEAC,OAAOC,GACL,MAAMC,EAAW,IAAIC,SACrB,UAAWC,KAAQH,EACjBC,EAASG,OAAO,OAAQD,GAE1B,OAAOlC,KAAKH,KAAK6B,KAAuB1B,KAAKC,OA9DxB,qBA8DkD+B,EAAU,CAC/EzB,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAY2B,OAAQpC,KAAKF,QAAQsC,OAAO3B,aAEhF,CAEA4B,YAAYC,GACV,OAAOtC,KAAKH,KAAK6B,KAAc1B,KAAKC,OAnEb,uBAmEyC,KAAM,CACpEM,OAAQ,CAAEoB,MAAO3B,KAAKF,QAAQU,MAAMC,WAAY6B,qBAEpD,CAACC,SAAAvC,KAAA,mBAAAwC,iBAnEU7C,GAAmB8C,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAAvC,KAAA,WAAA6C,EAAAC,IAAA,OAAnBnD,EAAmBoD,QAAnBpD,EAAmBqD,mBAAnBrD,CAAmB,yHCFzB,IAAMsD,EAAyB,MAAhC,MAAOA,EAIXrD,YACUC,EACAC,EACAoD,GAFAlD,KAAAH,OACAG,KAAAF,UACAE,KAAAkD,sBALVlD,KAAAmD,IAAM,IAAIC,IAZO,6BADH,GAuBNpD,KAAAqD,gBAA8D,GAHpErD,KAAKmD,IAAIG,EAAE,kBAAkBtD,KAAKF,QAAQqD,IAAII,QAChD,CAIAC,WAAWhD,GACT,OAAAR,KAAKmD,IAAIG,EAAE,qBAAuB9C,GAClCR,KAAKqD,gBAAgB7C,KAAWR,KAAKyD,kBAAkBjD,EAAO,cAC3DM,QAAK4C,KAAY,CAAEC,UAAU,KACzB3D,KAAKqD,gBAAgB7C,EAC9B,CAEQiD,kBAAkBjD,EAAgBoD,GACxC,OAAA5D,KAAKmD,IAAIG,EAAE,oBAAqB,CAAC9C,QAAOoD,UACjC5D,KAAKH,KAAKS,IA/BE,wBA+BkC,CACnDC,OAAQ,CAAEC,MAAOA,GAASR,KAAKF,QAAQU,MAAMC,cAC5CK,QACDC,KAAI8C,IACFA,EAAYC,QAAQC,SAASC,KAAOH,EAAYC,QAAQC,SAASC,KAAKC,OAAOC,GAAYA,EAASC,WAC3FN,KACR,EACDO,KAAIP,IACF7D,KAAKkD,oBAAoBmB,WAAWR,EAAYC,QAAQQ,OAAOC,UAAS,GAG9E,CAAChC,SAAAvC,KAAA,mBAAAwC,iBAlCUS,GAAyBR,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,KAAA,EAAAL,SAAAvC,KAAA,WAAAwE,EAAA1B,IAAA,OAAzBG,EAAyBF,QAAzBE,EAAyBD,UAAAyB,WADZ,gBACbxB,CAAyB,uXCTtC,MAGayB,EAAiB,kBACjBC,EAAyB,0BACzBC,EAAkB,mBAClBC,EAAiB,kBACjBC,EAAyB,0BAG/B,IAAMC,EAAgB,MAAvB,MAAOA,EACXnF,YAAoBC,EAA0BC,EAA0BC,GAApDC,KAAAH,OAA0BG,KAAAF,UAA0BE,KAAAD,YAA0B,CAElGiF,OAAOvD,GACL,OAAOzB,KAAKH,KAAKS,IAAaN,KAAKD,WAAWI,MAAMN,KAAKI,OAAOgF,MAAmB,CACjF1E,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYgB,gBAEpD,CAEAyD,YAAYhD,GACV,SAAOiD,QAAKC,KAASlD,IAAOpB,QAC1BuE,KAAUC,GACDtF,KAAKH,KAAK6B,KAAc1B,KAAKD,WAAWI,MAAMN,KAAKI,OAtBxC,sBAsBmE,CACnFsF,MAAOvF,KAAKF,QAAQU,MAAMC,WAC1B+E,cAAeF,MAElB,EACDvE,KAAI0E,KAEAC,QAASD,EACTE,SAAU,MAKlB,CAEAC,cAAcC,GACZ,OAAO7F,KAAKH,KAAKS,IAAUN,KAAKD,WAAWI,MAAMN,KAAKI,OArCjC,qBAqC2D,CAC9EM,OAAQ,CAAEuF,GAAID,EAAGpF,WAAYD,MAAOR,KAAKF,QAAQU,MAAMC,aAE3D,CAEAmB,OAAOiE,GACL,OAAO7F,KAAKH,KAAK+B,OAAgB5B,KAAKD,WAAWI,MAAMN,KAAKI,OA1CtC,sBA0CiE,CACrFM,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYqF,GAAID,EAAGpF,aAE3D,CAAC8B,SAAAvC,KAAA,mBAAAwC,iBArCUuC,GAAgBtC,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAAvC,KAAA,WAAAwE,EAAA1B,IAAA,OAAhBiC,EAAgBhC,QAAhBgC,EAAgB/B,mBAAhB+B,CAAgB,kFCX7B,MAAMgB,EAAiB,cACjBC,EAAcD,EAAiB,MAC/BE,EAAmBF,EAAiB,SACpCG,EAAmBH,EAAiB,SACpCI,EAAsBJ,EAAiB,eACvCK,EAAkBL,EAAiB,QAGlC,IAAMM,EAAY,MAAnB,MAAOA,EACXzG,YAAoBC,EAA0BC,EAA0BC,GAApDC,KAAAH,OAA0BG,KAAAF,UAA0BE,KAAAD,YAA0B,CAElGiF,SACE,OAAOhF,KAAKH,KAAKS,IAAYN,KAAKD,WAAWI,MAAMN,KAAKI,OAAO+F,GAAc,CAC3EzF,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,aAExC,CAEAmB,OAAOiE,GACL,OAAO7F,KAAKH,KAAKS,IAAaN,KAAKD,WAAWI,MAAMN,KAAKI,OAAOgG,GAAmB,CACjF1F,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYqF,GAAID,EAAGpF,aAE3D,CAEAqB,OAAOI,GACL,MAAMF,EAAW,IAAIC,SACrBD,SAASG,OAAO,OAAQD,GACjBlC,KAAKH,KAAK6B,KAAuB1B,KAAKD,WAAWI,MAAMN,KAAKI,OAAOiG,GAAmBlE,EAAU,CACrGzB,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAY2B,OAAQpC,KAAKF,QAAQsC,OAAO3B,aAEhF,CAEA6F,OAAOT,GACL,MAAMU,EAAMvG,KAAKD,WAAWI,MAAMN,KAAKI,OAAO8F,EAAiB,QAC3D,UAAY/F,KAAKF,QAAQU,MACzB,WAAaqF,EAEjBW,OAAOC,KAAKF,EAAK,SAAU,GAC7B,CAEAG,kBACE,OAAO1G,KAAKH,KAAKS,IAAkBN,KAAKD,WAAWI,MAAMN,KAAKI,OAAOkG,GAAsB,CACzF5F,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,aAExC,CAEAkG,SAASC,GACP,OAAO5G,KAAKH,KAAKS,IAAiBN,KAAKD,WAAWI,MAAMN,KAAKI,OAAOmG,GAAkB,CACpF7F,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYmG,SAEpD,CAACrE,SAAAvC,KAAA,mBAAAwC,iBAzCU6D,GAAY5D,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAAvC,KAAA,WAAA6G,EAAA/D,IAAA,OAAZuD,EAAYtD,QAAZsD,EAAYrD,mBAAZqD,CAAY,sICflB,MAAMS,EAAoC,CAC/C,CACE5G,KAAM,SAAU6G,KAAM,SAAUC,KAAM,WAAYC,SAAS,EAAOC,MAAO,cAAeC,MAAO,CAC7F,CAAEjH,KAAM,WAAY6G,KAAM,eAAgBC,KAAM,aAAcC,SAAS,EAAOC,MAAO,0CAGzF,CAAEhH,KAAM,OAAQ6G,KAAM,OAAQC,KAAM,cAAeC,SAAS,EAAOC,MAAO,QAC1E,CAAEhH,KAAM,YAAa6G,KAAM,YAAaC,KAAM,YAAaC,SAAS,EAAOC,MAAO,aAClF,CAAEhH,KAAM,wBAAyB6G,KAAM,UAAWC,KAAM,OAAQC,SAAS,EAAOC,MAAO,6KCI/EzE,MAAA,iBAAkCA,MAAA,mBAAaA,QAC/CA,MAAA,mCAAAA,MAAA,GAAAA,MAAA,IAAA2E,EAAA,+BAJJ3E,MAAA,GACEA,MAAA,EAAA4E,EAAA,kCAAA5E,cAAA,EAAA6E,EAAA,6CAkBF7E,MAAA,+BAAmBA,MAAA,uBCElB,IAAM8E,EAA2B,MAAlC,MAAOA,UAAmCC,IAY9C5H,YACY6H,EACAC,EACFC,EACA7H,EACA8H,GAERC,MAAMJ,EAAQC,GANJ1H,KAAAyH,SACAzH,KAAA0H,QACF1H,KAAA2H,YACA3H,KAAAF,UACAE,KAAA4H,QAdF5H,KAAA8H,yBAAwBC,OAAO9E,MAEvCjD,KAAAoC,OAASpC,KAAKF,QAAQsC,OAEtBpC,KAAAgI,YAA8BhI,KAAK4H,MAAMK,WAAW,uBACpDjI,KAAAkI,eAAiBlI,KAAKgI,YAAYG,QAElCnI,KAAAoI,SAAWtB,CAUX,CAEAuB,WACErI,KAAKsI,sBAGLtI,KAAKuI,cAAcC,IACjBxI,KAAKyI,qBAAqBC,UAAU,IAAM1I,KAAKsI,wBAGjDtI,KAAKgI,YAAYW,iBAAiB,SAAUC,IAC1C5I,KAAK6I,QAAQC,QAAUF,EAAET,QACzBnI,KAAK6I,QAAQE,KAAOH,EAAET,QAAU,OAAS,QAE7C,CAEAa,cACEhJ,KAAK2H,UAAUsB,OACjB,CAEQX,sBACNtI,KAAK8H,sBAAsBtE,WAAW,GAAGkF,WAC3C,CAACnG,SAAAvC,KAAA,mBAAAwC,iBA1CU+E,GAA0B9E,MAAAC,MAAAD,MAAAC,MAAAD,MAAAE,MAAAF,MAAAG,KAAAH,MAAAyG,MAAA,EAAA3G,SAAAvC,KAAA,UAAAmJ,EAAAC,IAAA,MAA1B7B,EAA0B8B,UAAA,8BAAAC,UAAA,SAAAC,EAAAC,MAAA,EAAAD,8fD5BnC9G,MAHJ,kBAGIA,CAHwB,UAGxBA,CAF6B,gBAEIA,MAAA,mBAAAA,MAAAgH,GAAA,MAAAC,EAAAjH,MAAA,WAAAA,MAAAiH,EAAAZ,QAAAY,EAAAZ,OAAA,GAA2CrG,MAAA,UAAIA,QAG9EA,MADF,QACEA,CADG,UACIA,MAAA,GACTA,UAEAA,MAAA,sBACEA,MAAA,EAAAkH,EAAA,sBAOFlH,QACAA,MAAA,EAAAmH,EAAA,yBAAAnH,OACFA,QACAA,MAAA,aACAA,MAAA,eAA6CA,MAAA,mBAAAA,aAAAgH,GAAAhH,MAAS+G,EAAAR,cAAa,GACjEvG,MAAA,eAAUA,MAAA,YAEdA,YAEEA,MADF,6BACEA,CADoC,sBAElCA,MAAA,GAAAoH,EAAA,2BAAAC,GAMErH,MADF,YACEA,CAD+B,QAC5BA,MAAA,wCAEPA,YAGEA,MADF,yBACEA,CADmB,aAEjBA,MAAA,oBAGNA,sCApCaA,MAAA,GAAAA,MAAA,gBAAA+G,EAAApH,OAAA,KAGOK,cAAA,YAAAsH,GAiBItH,MAAA,GAA+CA,MAA/C,OAAA+G,EAAAxB,YAAAG,QAAA,cAA+C1F,CAAD,SAAA+G,EAAAtB,eAClEzF,MAAA,GAAAA,MAAA+G,EAAApB,0BCNA4B,KAAgBC,KAChBC,KAAaC,KACbC,KAAgBC,UAChBC,KAAeC,KACfC,KAAgBC,eAChBC,KACAC,IACAC,KAAoBC,OAAA,g/CAGXtD,CAA2B,wHCzBjC,MAAMuD,EAAgB,aAGtB,IAAMC,EAAgB,MAAvB,MAAOA,EACXnL,YAAoBC,EAA0BC,EAA0BC,GAApDC,KAAAH,OAA0BG,KAAAF,UAA0BE,KAAAD,YAA0B,CAElGiL,UAAU9I,EAAY+I,EAAqBC,GAAmB,GAC5D,MAAMlJ,EAAW,IAAIC,SACrBD,SAASG,OAAO,OAAQD,GACxBF,EAASG,OAAO,OAAQ8I,GAAe,IAChCjL,KAAKH,KAAK6B,KAAuB1B,KAAKD,WAAWI,MAAMN,KAAKI,OAAO6K,EAAgB,UAAW9I,EAAU,CAC7GzB,OAAQ,CAAE6B,OAAQpC,KAAKF,QAAQsC,OAAO3B,cACrCK,QACDuE,KAAU8F,IACR,GAAID,GAAoBC,EAAOxF,SAAS,IAAIyF,cAAgBC,KAAuBC,QAAS,CAC1F,MAAMC,EAAaC,OAAOL,EAAOxF,SAAS,GAAG8F,KAAO,4DACpD,GAAIF,EACF,OAAOvL,KAAKgL,UAAU9I,EAAMqJ,GAAY,GAG5C,SAAOG,MAAGP,EAAM,GAGtB,CAAC5I,SAAAvC,KAAA,mBAAAwC,iBApBUuI,GAAgBtI,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAAvC,KAAA,WAAA2L,EAAA7I,IAAA,OAAhBiI,EAAgBhI,QAAhBgI,EAAgB/H,mBAAhB+H,CAAgB,+GCQvB,MAAgBvD,UAAqCoE,IAEzDhM,YACY6H,EACAC,EACHvE,GAEP0E,QAJU7H,KAAAyH,SACAzH,KAAA0H,QACH1H,KAAAmD,MAGPnD,KAAKmD,MAAQ,IAAIC,IAAU,iBApBf,EAqBd,CAOUqF,qBACR,OAAOzI,KAAKyH,OAAOoE,OAAO/K,QACxBmD,KAAO6H,GAASA,aAAiBC,OAAa,EAC9CC,OAAYhM,KAAK0H,MAAMuE,SAASC,aAAU,EAC1CnL,KAAI,MAAQf,KAAK0H,MAAMuE,SAASC,aAAU,EAC1CC,QAAQ,EACRlI,KAAO,EAAEmI,EAAgBC,KAAiBD,IAAmBC,GAGjE,kBC3CI,SAAUjH,EAASlD,GACvB,OAAO,IAAIoK,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAczK,GACrBuK,EAAOG,OAAS,KACdL,EAASE,EAAOtB,OAAkB0B,MAAM,KAAK,GAAE,EAEjDJ,EAAOK,QAAUC,IACfP,EAAOO,EAAK,CACd,EAEJ,CAEM,SAAUtM,EAASyB,GACvB,OAAO,IAAIoK,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOO,WAAW9K,GAClBuK,EAAOG,OAAS,KACdL,EAAQE,EAAOtB,OAAgB,EAEjCsB,EAAOK,QAAUC,IACfP,EAAOO,EAAK,CACd,EAEJ,+LCdA,MAEaE,EAAmB,gBACnBhI,EAAmB,oBAGxB,IAAMiI,EAAc,MAArB,MAAOA,UAAsBC,IAGlCvN,YAAoBC,EAA0BE,GAE5C8H,MAAM,IAAIzE,IAAU,iBAXR,IASMpD,KAAAH,OAA0BG,KAAAD,aAFtCC,KAAAoN,gBAAeC,KAAUC,IAKjC,CAQAC,aAAahN,GACX,OAAOA,EAAOO,QACZmD,KAAOuJ,GAAU,MAALA,IAAS,EACrBnI,KAAUmI,GAAKxN,KAAKyN,qBAAqBD,EAAEE,iBAAiB5M,QAAK4C,KAAY,KAEjF,CAEQ+J,qBAAqBC,EAAyBC,GACpD,IAAIxK,EAAMnD,KAAKmD,IAAIyK,MAAM,cAAe,CAAEC,SAAS,IACnD,OAAO7N,KAAKoN,aAAaU,YAAY,CACnCC,aAAc,CAACL,GACfM,QAASL,EACTM,OAAQ,gBACR9K,IAAK,yBACJrC,KACDqC,EAAIrC,QAAI,EACRC,KAAImN,GAAQA,EAAKC,SAErB,CAEAvM,OAAOpB,EAAeiB,EAAqB2M,EAAkBC,EAAgBC,EAAmBC,GAC9F,OAAOvO,KAAKH,KAAK+B,OAAa5B,KAAKD,WAAWI,MAAMN,KAAKI,OAAOgN,EAAmB,UAAW,CAC5F1M,OAAQ,CACNkB,cACAoE,GAAIuI,EAAS3N,WACbD,QACA6N,MAAOA,EAAM5N,cACT6N,GAAY,CAAEA,SAAUA,EAAS7N,eACjC6N,GAAYC,GAAe,CAAEA,iBAGvC,CAAChM,SAAAvC,KAAA,mBAAAwC,iBA7CW0K,GAAazK,MAAAC,MAAAD,MAAAE,MAAA,EAAAJ,SAAAvC,KAAA,WAAAwO,EAAA1L,IAAA,OAAboK,EAAanK,QAAbmK,EAAalK,mBAAbkK,CAAc,kFCTrB,IAAMuB,EAAmB,MAA1B,MAAOA,EASX7O,YAAoB8O,GAAA1O,KAAA0O,WAPZ1O,KAAA2O,cAAaC,OAAqB,MAE1C5O,KAAA6O,WAAUC,OAAS,MAAQ9O,KAAK2O,cAAcI,kBAAoB/O,KAAK2O,cAAcK,cAGrFhP,KAAAiP,iBAAgBC,MAAalP,KAAK6O,SAGhC,MAAMM,EAAwB,CAC5BtJ,GAAI,EACJmJ,aAAmD,SAArCI,eAAeC,QAAQC,MACrCP,gBAAgB,GAElB/O,KAAK2O,WAAWY,IAAIJ,EACtB,CAEA9K,WAAWmL,GACT,MAAMC,EAAYzP,KAAK2O,aACvB,GAAIc,EAAUV,iBAAmBS,EAC/B,OAEF,MAAME,EAA0B,IAC3BD,EACHV,eAAgBS,GAElBxP,KAAK2O,WAAWY,IAAIG,EACtB,CAEAC,qBACE,MAAMF,EAAYzP,KAAK2O,aACvB,IAAKc,EAAUV,eAEb,YADA/O,KAAK0O,SAASjI,KAAK,sDAAuD,KAAM,CAAEmJ,SAAU,MAI9F,MAAMF,EAA0B,IAC3BD,EACHT,cAAeS,EAAUT,cAE3BhP,KAAK2O,WAAWY,IAAIG,GACpB1P,KAAK0O,SAASjI,KAAKiJ,EAAUV,aAAe,oBAAsB,qBAAsB,KAAM,CAAEY,SAAU,KAC5G,CAACrN,SAAAvC,KAAA,mBAAAwC,iBA3CUiM,GAAmBhM,MAAAC,MAAA,EAAAH,SAAAvC,KAAA,WAAA6G,EAAA/D,IAAA,OAAnB2L,EAAmB1L,QAAnB0L,EAAmBzL,UAAAyB,WADN,gBACbgK,CAAmB,4FCIzB,IAAMnB,EAAa,MAApB,MAAOA,UAAqBH,IAEhCvN,YAAoBC,EAA0BC,GAC5C+H,MAAM,IAAIzE,IAAU,gBANR,IAKMpD,KAAAH,OAA0BG,KAAAF,SAE9C,CAEA2N,qBAAqBoC,EAAkBtP,EAAgB0N,EAAgBN,GACrE3N,KAAKmD,IAAIG,EAAE,uBAAwB,CAAEuM,WAAUtP,SAAQ0N,SAAQN,mBAE/D,MAAMmC,IAAcvP,EAQdwP,KAPcxP,GAAQyP,qBAAuB,IACtBC,SAAS,UAEtB,GAAK,UAAUjQ,KAAKF,QAAQU,UACvCsP,EAAY,IAAIvP,IAAW,IAC5B,aAAe0N,GAAU,KAEDiC,UAAU,GACtC,OAAOlQ,KAAKH,KAAK6B,KAAmB,kBAAkBmO,KAAYE,IAChE,CACEI,MAAOxC,GAGb,CAEAG,aAAcC,eAAcC,UAASC,SAAQ9K,QAC3CnD,KAAKmD,IAAIG,EAAE,eAAeH,KAAQ,CAAE4K,eAAcC,UAASC,WAO3D,MAAM8B,GALJ,eAAiBhC,GAAcqC,KAAK,MAAQ,IAC1C,UAAUpQ,KAAKF,QAAQU,kBACRwN,GAASoC,KAAK,MAAQ,IACrC,aAAenC,GAAU,KAEDiC,UAAU,GACtC,OAAOlQ,KAAKH,KAAK6B,KACf,8CAA8CqO,IAC9C,GAEJ,CAACxN,SAAAvC,KAAA,mBAAAwC,iBAtCU8K,GAAY7K,MAAAC,MAAAD,MAAAE,KAAA,EAAAJ,SAAAvC,KAAA,WAAAqQ,EAAAvN,IAAA,OAAZwK,EAAYvK,QAAZuK,EAAYtK,mBAAZsK,CAAa,wEC+G1B,SAAS4B,EAAaoB,EAAQC,IACzBA,GAASC,aAAYC,OAAyBvB,GAC/C,MAAMsB,EAAWD,GAASC,aAAYzI,OAAO2I,OACvCC,EAAU,IAAIC,IAAc,GAC5BC,KAAUC,OAAO,KACnB,IAAIxP,EACJ,IACIA,EAAQgP,GACZ,OACOS,GAEH,YADAC,SAAU,IAAML,EAAQ5D,MAAMgE,GAElC,EACAC,SAAU,IAAML,EAAQM,KAAK3P,GAAM,EACpC,CAAEkP,WAAUU,eAAe,IAC9BV,SAASlQ,IAAI6Q,OAAYC,UAAU,KAC/BP,EAAQQ,UACRV,EAAQW,UAAS,GAEdX,EAAQY,cACnB,CA0BA,SAASC,EAASlB,EAAQC,GAItB,MAAMkB,GAAmBlB,GAASW,cAClCO,IAAoBlB,GAASC,aAAYC,OAAyBe,GAClE,MAAME,EAAaD,EAAkBlB,GAASC,UAAUlQ,IAAI6Q,SAAU,EAAKpJ,OAAOoJ,OAAc,KAGhG,IAAIQ,EAGAA,KAAQ/C,OAFR2B,GAASqB,YAEM,CAAEC,KAAM,GAIR,CAAEA,KAAM,EAAyBvQ,MAAOiP,GAASuB,eAQpE,MAAMC,EAAMzB,EAAO5H,UAAU,CACzBuI,KAAM3P,GAASqQ,EAAMpC,IAAI,CAAEsC,KAAM,EAAyBvQ,UAC1DyL,MAAOA,IACH,GAAIwD,GAASyB,aAGT,MAAMjF,EAEV4E,EAAMpC,IAAI,CAAEsC,KAAM,EAAyB9E,SAAO,IAS1D2E,UAAYN,UAAUW,EAAIE,YAAYC,KAAKH,KAAI,EAGxCjD,OAAS,KACZ,MAAMqD,EAAUR,IAChB,OAAQQ,EAAQN,MACZ,KAAK,EACD,OAAOM,EAAQ7Q,MACnB,KAAK,EACD,MAAM6Q,EAAQpF,MAClB,KAAK,EAGD,MAAM,IAAIqF,MAAc,IAA4D,uFAC5F,EAER","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","GlobalDialogConfigService","globalConfigService","log","EavLogger","dialogSettings$","a","svcId","getShared$","getDialogSettings","shareReplay","refCount","reqBy","dlgSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","url","window","open","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","AppsManagementNavItems","path","icon","svgIcon","tippy","child","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","BaseWithChildDialogComponent","router","route","dialogRef","media","super","globalDialogConfigSvc","inject","smallScreen","matchMedia","sideNavOpened","matches","navItems","ngOnInit","fetchDialogSettings","subscriptions","add","childDialogClosed$","subscribe","addEventListener","c","sidenav","opened","mode","closeDialog","close","i4","core","VBU","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i5","MatIconModule","i6","BreadcrumbModule","i7","MatButtonModule","i8","MatSidenavModule","i9","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","webApiAppRoot","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","BaseComponent","events","event","NavigationEnd","startWith","snapshot","firstChild","pairwise","hadChildBefore","hasChildNow","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","webApiEntityRoot","EntityService","ServiceBase","queryService","transient","QueryService","getEntities$","p","getAvailableEntities","contentTypeName","entitiesFilter","rxTap","enabled","getEntities","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","_angular_core__WEBPACK_IMPORTED_MODULE_8__","GlobalConfigService","snackBar","debugState","signal","isDebug","computed","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","set","allow","oldConfig","newConfig","toggleDebugEnabled","duration","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","join","_angular_core__WEBPACK_IMPORTED_MODULE_3__","source","options","injector","assertInInjectionContext","Injector","subject","ReplaySubject","watcher","effect","err","untracked","next","manualCleanup","DestroyRef","onDestroy","destroy","complete","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","rejectErrors","unsubscribe","bind","current","ɵRuntimeError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/global-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/base-with-child-dialog.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'GlobalDialogConfigService';\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n/**\r\n * Service for getting dialog settings for the current app.\r\n * \r\n * Note that it should normally be shared, to save resources / network calls.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$')\r\n      .pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  private getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', svgIcon: false, tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', svgIcon: false, tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star_border', svgIcon: false, tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', svgIcon: false, tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', svgIcon: false, tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { Component, inject, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BaseWithChildDialogComponent } from '../../shared/components/base-with-child-dialog.component';\r\nimport { Context } from '../../shared/services/context';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport { GlobalDialogConfigService } from '../../app-administration/services';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    BreadcrumbModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    RouterOutlet,\r\n    NavItemListComponent,\r\n    ToggleDebugDirective,\r\n  ],\r\n})\r\nexport class AppsManagementNavComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  private globalDialogConfigSvc = inject(GlobalDialogConfigService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => this.fetchDialogSettings())\r\n    );\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { BaseComponent } from './base.component';\r\nimport { EavLogger } from '../logging/eav-logger';\r\n\r\nconst logThis = false;\r\n\r\n// 2024-06-12 2dm experimental - remove comments if all is good mid of June\r\n// - previously had\r\n// @Directive()   // Needs the @Directive() so the compiler allows OnDestroy to be implemented\r\n// ...then tried this\r\n// @Component({\r\n//   selector: 'app-base-component-with-child',\r\n//   template: ''\r\n// })\r\n// ...but then added abstract, so I think it doesn't actually need all that\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseWithChildDialogComponent extends BaseComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', logThis);\r\n  }\r\n\r\n  // 2024-06-12 2dm - don't think this is needed since it's already on the base class\r\n  // ngOnDestroy() {\r\n  //   super.ngOnDestroy();\r\n  // }\r\n\r\n  protected childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n      // tap(() => console.log('2dm ' + 'childDialogClosed$'))\r\n    )\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService extends ServiceBase {\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext)\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { ServiceBase } from './service-base';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\n\r\nconst logThis = false;\r\n\r\n@Injectable()\r\nexport class QueryService extends ServiceBase {\r\n\r\n  constructor(private http: HttpClient, private context: Context) {\r\n    super(new EavLogger('QueryService', logThis));\r\n  }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.a('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.a(`getEntities(${log})`, { contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","/**\n * @license Angular v17.3.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"x_google_ignoreList":[13]}