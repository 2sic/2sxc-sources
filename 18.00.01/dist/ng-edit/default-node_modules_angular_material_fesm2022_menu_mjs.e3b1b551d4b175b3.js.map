{"version":3,"file":"default-node_modules_angular_material_fesm2022_menu_mjs.e3b1b551d4b175b3.js","mappings":"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","names":["_c0","_c1","_c2","MatMenuItem_Conditional_4_Template","rf","ctx","i0","_c3","MatMenu_ng_template_0_Template","_r1","$event","ctx_r1","_handleKeydown","closed","emit","_onAnimationStart","_onAnimationDone","_classList","panelId","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","MAT_MENU_PANEL","InjectionToken","MatMenuItem","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","this","role","disabled","disableRipple","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","static","ɵfac","t","DOCUMENT","i1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","inputs","HasDecoratorInputTransform","booleanAttribute","exportAs","standalone","features","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","MatRipple","encapsulation","changeDetection","MAT_MENU_CONTENT","MatMenuContent","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","context","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","ɵdir","provide","useExisting","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","MatMenu","_xPosition","value","setPositionClasses","_yPosition","panelClass","classes","previousPanelClass","_previousPanelClass","newClassList","split","forEach","className","classList","_ngZone","defaultOptions","_elevationPrefix","_baseElevation","_directDescendantItems","QueryList","_animationDone","EventEmitter","close","overlayPanelClass","hasBackdrop","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusSubscription","unsubscribe","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","onStable","take","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","newElevation","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","filter","notifyOnChanges","contentQueries","dirIndex","_t","lazyContent","viewQuery","TemplateRef","templateRef","None","outputs","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","overlay","inject","Overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","MatMenuTrigger","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMaterialMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","EMPTY","_hoverSubscription","ChangeDetectorRef","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","i1$1","i3","MatMenuModule","ɵmod","ɵinj","providers","imports","CommonModule","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Whether the menu item is disabled. */\n        this.disabled = false;\n        /** Whether ripples are disabled on the menu item. */\n        this.disableRipple = false;\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"17.2.0\", type: MatMenuItem, isStandalone: true, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, standalone: true, imports: [MatRipple], template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuContent, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatMenuContent, isStandalone: true, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nclass MatMenu {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        const newClassList = { ...this._classList };\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                newClassList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                newClassList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n        this._classList = newClassList;\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Classes to be applied to the menu panel. */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            const newClassList = { ...this._classList };\n            if (this._previousElevation) {\n                newClassList[this._previousElevation] = false;\n            }\n            newClassList[newElevation] = true;\n            this._previousElevation = newElevation;\n            this._classList = newClassList;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        this._classList = {\n            ...this._classList,\n            ['mat-menu-before']: posX === 'before',\n            ['mat-menu-after']: posX === 'after',\n            ['mat-menu-above']: posY === 'above',\n            ['mat-menu-below']: posY === 'below',\n        };\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatMenu, isStandalone: true, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-divider{color:var(--mat-menu-divider-color);margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:var(--mat-menu-item-trailing-spacing);padding-right:var(--mat-menu-item-leading-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]),.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon])[dir=rtl]{padding-left:var(--mat-menu-item-with-icon-trailing-spacing);padding-right:var(--mat-menu-item-with-icon-leading-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], standalone: true, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-divider{color:var(--mat-menu-divider-color);margin-bottom:var(--mat-menu-divider-bottom-spacing);margin-top:var(--mat-menu-divider-top-spacing)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:var(--mat-menu-item-leading-spacing);padding-right:var(--mat-menu-item-trailing-spacing);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:var(--mat-menu-item-trailing-spacing);padding-right:var(--mat-menu-item-leading-spacing)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing);padding-right:var(--mat-menu-item-with-icon-trailing-spacing)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]),.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon])[dir=rtl]{padding-left:var(--mat-menu-item-with-icon-trailing-spacing);padding-right:var(--mat-menu-item-with-icon-leading-spacing)}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing);height:var(--mat-menu-item-icon-size);width:var(--mat-menu-item-icon-size)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof MatMenu) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof MatMenu) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof MatMenu && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuTrigger, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatMenuTrigger, isStandalone: true, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuModule, imports: [CommonModule,\n            MatRippleModule,\n            MatCommonModule,\n            OverlayModule,\n            MatMenu,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule,\n            MatRippleModule,\n            MatCommonModule,\n            OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        MatRippleModule,\n                        MatCommonModule,\n                        OverlayModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n"],"x_google_ignoreList":[0]}