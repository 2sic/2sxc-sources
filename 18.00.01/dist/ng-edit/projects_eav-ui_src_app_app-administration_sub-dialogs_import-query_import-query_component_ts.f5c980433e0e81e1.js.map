{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_import-query_import-query_component_ts.f5c980433e0e81e1.js","mappings":"sVAUA,MAGaA,EAAiB,kBACjBC,EAAyB,0BACzBC,EAAkB,mBAClBC,EAAiB,kBACjBC,EAAyB,0BAG/B,IAAMC,EAAgB,MAAvB,MAAOA,EACXC,YAAoBC,EAA0BC,EAA0BC,GAApDC,KAAAH,OAA0BG,KAAAF,UAA0BE,KAAAD,YAA0B,CAElGE,OAAOC,GACL,OAAOF,KAAKH,KAAKM,IAAaH,KAAKD,WAAWK,MAAMP,KAAKQ,OAAOC,MAAmB,CACjFC,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYP,gBAEpD,CAEAQ,YAAYC,GACV,SAAOC,QAAKC,KAASF,IAAOG,QAC1BC,KAAUC,GACDhB,KAAKH,KAAKoB,KAAcjB,KAAKD,WAAWK,MAAMP,KAAKQ,OAtBxC,sBAsBmE,CACnFa,MAAOlB,KAAKF,QAAQU,MAAMC,WAC1BU,cAAeH,MAElB,EACDI,KAAIC,KAEAC,QAASD,EACTE,SAAU,MAKlB,CAEAC,cAAcC,GACZ,OAAOzB,KAAKH,KAAKM,IAAUH,KAAKD,WAAWK,MAAMP,KAAKQ,OArCjC,qBAqC2D,CAC9EE,OAAQ,CAAEmB,GAAID,EAAGhB,WAAYD,MAAOR,KAAKF,QAAQU,MAAMC,aAE3D,CAEAkB,OAAOF,GACL,OAAOzB,KAAKH,KAAK8B,OAAgB3B,KAAKD,WAAWK,MAAMP,KAAKQ,OA1CtC,sBA0CiE,CACrFE,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYiB,GAAID,EAAGhB,aAE3D,CAACmB,SAAA5B,KAAA,mBAAA6B,iBArCUlC,GAAgBmC,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA5B,KAAA,WAAAkC,EAAAC,IAAA,OAAhBxC,EAAgByC,QAAhBzC,EAAgB0C,mBAAhB1C,CAAgB,sHCPtB,IAAM2C,EAAoB,MAA3B,MAAOA,EAKX1C,YAAqC2C,GAJrCvC,KAAAwC,WAAaC,KAAYC,MAEjB1C,KAAA2C,oBAAmBC,KAAUjD,MAGnC4C,EAAWM,QAAU,eACrBN,EAAWO,cAAgB,2DAC3BP,EAAWQ,mBAAqB,OAChCR,EAAWS,UAAaC,GAAUjD,KAAK2C,iBAAiBjC,YAAYuC,EAAM,GAC5E,CAACrB,SAAA5B,KAAA,mBAAA6B,iBAVUS,GAAoBR,MAKXoB,MAAe,EAAAtB,SAAA5B,KAAA,UAAAmD,EAAAC,IAAA,MALxBd,EAAoBe,UAAA,uBAAAC,YAAA,EAAAC,SAAA,CAAAzB,OAAA0B,MAAA,EAAAC,KAAA,EAAAC,OAAA,mBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GCbjC9B,MAAA,mCAAwBA,MAAA,aAAA+B,EAAArB,2BDWZsB,eAECxB,CAAoB,oBEb3B,SAAUzB,EAASF,GACvB,OAAO,IAAIoD,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAczD,GACrBuD,EAAOG,OAAS,KACdL,EAASE,EAAOI,OAAkBC,MAAM,KAAK,GAAE,EAEjDL,EAAOM,QAAUC,IACfR,EAAOQ,EAAK,CACd,EAEJ,CAEM,SAAUhE,EAASE,GACvB,OAAO,IAAIoD,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOQ,WAAW/D,GAClBuD,EAAOG,OAAS,KACdL,EAAQE,EAAOI,OAAgB,EAEjCJ,EAAOM,QAAUC,IACfR,EAAOQ,EAAK,CACd,EAEJ","names":["webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","constructor","http","context","dnnContext","this","getAll","contentType","get","$2sxc","apiUrl","webApiEntityList","params","appId","toString","importQuery","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","clonePipeline","id","Id","delete","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_6__","jDH","factory","Éµfac","ImportQueryComponent","dialogData","uploadType","UploadTypes","Query","pipelinesService","transient","title","description","allowedFileTypes","upload$","files","MAT_DIALOG_DATA","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FileUploadDialogComponent","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-query/import-query.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-query/import-query.component.html","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../../shared/components/file-upload-dialog';\r\nimport { PipelinesService } from '../../services/pipelines.service';\r\nimport { transient } from '../../../core';\r\n\r\n@Component({\r\n  selector: 'app-import-query',\r\n  templateUrl: './import-query.component.html',\r\n  styleUrls: ['./import-query.component.scss'],\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportQueryComponent {\r\n  uploadType = UploadTypes.Query;\r\n\r\n  private pipelinesService = transient(PipelinesService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Query`;\r\n    dialogData.description ??= `Select a Query file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.pipelinesService.importQuery(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}