{"version":3,"file":"projects_eav-ui_src_app_app-administration_queries_queries_component_ts.88615cb1df6672f9.js","mappings":"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","names":["QueryActions","Edit","Metadata","Rest","Clone","Permissions","Export","Delete","AgActionsComponent","agInit","params","this","item","data","refresh","i0","_r2","ctx_r2","do","actions","length","_r4","_Permissions","Count","_r5","_EditInfo","DisableDelete","QueriesActionsComponent","constructor","super","enablePermissions","getEnablePermissions","static","t","fesm2022_core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","QueriesActionsComponent_Conditional_4_Template","QueriesActionsComponent_Conditional_5_Template","QueriesActionsComponent_Conditional_6_Template","QueriesActionsComponent_Conditional_7_Template","QueriesActionsComponent_ng_template_13_Template","DisableMetadata","DisableEdit","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","encapsulation","$event","ctx_r1","importQuery","editQuery","queries","gridOptions","QueriesComponent","BaseWithChildDialogComponent","router","route","snackBar","pipelinesService","transient","PipelinesService","contentExportService","ContentExportService","dialogService","DialogService","queries$","BehaviorSubject","undefined","buildGridOptions","viewModel$","combineLatest","pipe","map","dialogConfigSvc","AppDialogConfigService","ngOnInit","fetchQueries","subscriptions","add","childDialogClosed$","subscribe","getCurrent$","settings","Context","Enable","AppPermissions","ngOnDestroy","complete","getAll","eavConstants","contentTypes","query","next","files","navigate","relativeTo","parent","firstChild","state","doMenuAction","action","openMetadata","GoToDevRest","getUrlQueryInAdmin","Guid","cloneQuery","openPermissions","exportQuery","deleteQuery","formUrl","convertFormToUrl","items","ContentTypeName","Prefill","TestParameters","pipelineDesigner","testParameters","EntityId","Id","enablePermissionsGetter","openVisualQueryDesigner","ReadOnly","openQueryDesigner","url","GoToMetadata","getUrlEntity","Name","open","clonePipeline","duration","GoToPermissions","exportEntity","confirm","delete","res","defaultGridOptions","columnDefs","ColumnDefinitions","cellClass","split","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","TextWide","field","sort","onCellClicked","TextWideFlex3","ActionsPinnedRight4","QueriesComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","MatButtonModule","RouterOutlet","AsyncPipe","SxcGridModule","i5","DragAndDropDirective","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","http","context","dnnContext","contentType","get","$2sxc","apiUrl","webApiEntityList","appId","toString","file","from","toBase64","switchMap","fileBase64","post","AppId","ContentBase64","success","Success","Messages","id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","jDH","factory","ɵfac","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","readAsText","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","styles","changeDetection","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.ts","./projects/eav-ui/src/app/app-administration/queries/ag-actions/ag-actions-component.ts","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.html","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.html","./projects/eav-ui/src/app/app-administration/queries/queries.component.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Query } from '../../models/query.model';\r\nimport { IAgActions } from '../ag-actions';\r\n\r\n// Test 2dm 2020-11-20 - I believe the current model has way too much ceremony\r\n// I need to change ca. 10 places just to get one more action to work\r\n// that's not great\r\nexport enum QueryActions {\r\n  Edit,\r\n  Metadata,\r\n  Rest,\r\n  Clone,\r\n  Permissions,\r\n  Export,\r\n  Delete,\r\n}\r\n\r\nexport interface QueriesActionsParams extends IAgActions<QueryActions, Query> {\r\n  getEnablePermissions(): boolean;\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\n\r\nexport class AgActionsComponent<TParams extends ICellRendererParams, TData> implements ICellRendererAngularComp {\r\n  item: TData;\r\n  params: TParams;\r\n\r\n  agInit(params: TParams): void {\r\n    this.params = params;\r\n    this.item = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Edit\" (click)=\"params.do(actions.Edit, item)\">\r\n    <mat-icon>edit</mat-icon>\r\n  </div>\r\n\r\n  @if (!item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Metadata\"\r\n      (click)=\"params.do(actions.Metadata, item)\">\r\n      <mat-icon [matBadge]=\"item.Metadata?.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"item.Metadata?.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!item._EditInfo.DisableEdit && enablePermissions) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Permissions\" (click)=\"params.do(actions.Permissions, item)\">\r\n      <mat-icon [matBadge]=\"item._Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (item._EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"item._Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item (click)=\"params.do(actions.Rest, item)\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"params.do(actions.Clone, item)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n      <span>Copy</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\" params.do(actions.Export, item)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"params.do(actions.Delete, item)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Query } from '../../models/query.model';\r\nimport { AgActionsComponent } from '../ag-actions';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-queries-actions',\r\n  templateUrl: './queries-actions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class QueriesActionsComponent extends AgActionsComponent<ICellRendererParams & QueriesActionsParams, Query> {\r\n  enablePermissions: boolean;\r\n  actions = QueryActions;\r\n\r\n  agInit(params: ICellRendererParams & QueriesActionsParams): void {\r\n    super.agInit(params);\r\n    this.enablePermissions = this.params.getEnablePermissions();\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.queries\" [gridOptions]=\"gridOptions\" appDragAndDrop\r\n      [allowedFileTypes]=\"'json'\" (filesDropped)=\"importQuery($event)\">\r\n    </ag-grid-angular>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import query\" (click)=\"importQuery()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Query</span>\r\n      </button>\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new query\" (click)=\"editQuery(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { BaseWithChildDialogComponent } from '../../shared/components/base-with-child-dialog.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { Query } from '../models/query.model';\r\nimport { PipelinesService } from '../services/pipelines.service';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions/queries-actions';\r\nimport { QueriesActionsComponent } from './queries-actions/queries-actions.component';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../../core';\r\nimport { AppDialogConfigService } from '../services/app-dialog-config.service';\r\n\r\n@Component({\r\n  selector: 'app-queries',\r\n  templateUrl: './queries.component.html',\r\n  styleUrls: ['./queries.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class QueriesComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n\r\n  private pipelinesService = transient(PipelinesService);\r\n  private contentExportService = transient(ContentExportService);\r\n  private dialogService = transient(DialogService);\r\n\r\n  enablePermissions!: boolean;\r\n  queries$ = new BehaviorSubject<Query[]>(undefined);\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  viewModel$ = combineLatest([this.queries$]).pipe(\r\n    map(([queries]) => ({ queries }))\r\n  );\r\n\r\n  private dialogConfigSvc = transient(AppDialogConfigService);\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchQueries();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchQueries(); }));\r\n    this.dialogConfigSvc.getCurrent$().subscribe(settings => {\r\n      this.enablePermissions = settings.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.queries$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  private fetchQueries() {\r\n    this.pipelinesService.getAll(eavConstants.contentTypes.query).subscribe((queries: Query[]) => {\r\n      this.queries$.next(queries);\r\n    });\r\n  }\r\n\r\n  importQuery(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route.parent.firstChild, state: dialogData });\r\n  }\r\n\r\n  /**\r\n   * Experiment by 2dm 2020-11-20 - trying to reduce the ceremony around menus\r\n   * Once this works, we would then remove all the 3-line functions below, as they\r\n   * would just be added here (if that's the only place they are used)\r\n   */\r\n  private doMenuAction(action: QueryActions, query: Query) {\r\n    switch (action) {\r\n      case QueryActions.Edit:\r\n        return this.editQuery(query);\r\n      case QueryActions.Metadata:\r\n        return this.openMetadata(query);\r\n      case QueryActions.Rest:\r\n        return this.router.navigate([GoToDevRest.getUrlQueryInAdmin(query.Guid)], { relativeTo: this.route.parent.firstChild });\r\n      case QueryActions.Clone:\r\n        return this.cloneQuery(query);\r\n      case QueryActions.Permissions:\r\n        return this.openPermissions(query);\r\n      case QueryActions.Export:\r\n        return this.exportQuery(query);\r\n      case QueryActions.Delete:\r\n        return this.deleteQuery(query);\r\n    }\r\n  }\r\n\r\n  editQuery(query: Query) {\r\n    const form: EditForm = {\r\n      items: [\r\n        query == null\r\n          ? {\r\n            ContentTypeName: eavConstants.contentTypes.query,\r\n            Prefill: {\r\n              TestParameters: eavConstants.pipelineDesigner.testParameters\r\n            }\r\n          }\r\n          : { EntityId: query.Id },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private enablePermissionsGetter() {\r\n    return this.enablePermissions;\r\n  }\r\n\r\n  private openVisualQueryDesigner(query: Query) {\r\n    if (query._EditInfo.ReadOnly) { return; }\r\n    this.dialogService.openQueryDesigner(query.Id);\r\n  }\r\n\r\n  private openMetadata(query: Query) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      query.Guid,\r\n      `Metadata for Query: ${query.Name} (${query.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private cloneQuery(query: Query) {\r\n    this.snackBar.open('Copying...');\r\n    this.pipelinesService.clonePipeline(query.Id).subscribe(() => {\r\n      this.snackBar.open('Copied', null, { duration: 2000 });\r\n      this.fetchQueries();\r\n    });\r\n  }\r\n\r\n  private openPermissions(query: Query) {\r\n    this.router.navigate([GoToPermissions.getUrlEntity(query.Guid)], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private exportQuery(query: Query) {\r\n    this.contentExportService.exportEntity(query.Id, 'Query', true);\r\n  }\r\n\r\n  private deleteQuery(query: Query) {\r\n    if (!confirm(`Delete Pipeline '${query.Name}' (${query.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.pipelinesService.delete(query.Id).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchQueries();\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          cellClass: (params) => {\r\n            const query: Query = params.data;\r\n            return `id-action no-padding no-outline ${query._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<Query> = {\r\n              tooltipGetter: (query) => `ID: ${query.Id}\\nGUID: ${query.Guid}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Name',\r\n          sort: 'asc',\r\n          cellClass: (params) => {\r\n            const query: Query = params.data;\r\n            return `${query._EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' ');\r\n          },\r\n          onCellClicked: (params) => {\r\n            const query: Query = params.data;\r\n            this.openVisualQueryDesigner(query);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: QueriesActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: QueriesActionsParams = {\r\n              getEnablePermissions: () => this.enablePermissionsGetter(),\r\n              do: (action, query) => this.doMenuAction(action, query),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[8]}