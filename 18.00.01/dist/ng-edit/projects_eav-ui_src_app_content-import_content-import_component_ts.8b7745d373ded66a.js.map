{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.8b7745d373ded66a.js","mappings":"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","names":["AppDialogConfigService","constructor","contextSvcShared","context","this","log","EavLogger","getCurrent$","appId","a","getShared$","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","jDH","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","http","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","GlobalDialogConfigService","globalConfigService","dialogSettings$","svcId","getDialogSettings","shareReplay","refCount","reqBy","dlgSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn","ContentImportService","evaluateContent","formValues","from","toBase64","switchMap","fileBase64","requestData","AppId","DefaultLanguage","defaultLanguage","ContentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","webApiEntityRoot","result","Success","Errors","Detail","importContent","core","_r3","fileInput_r4","click","$event","ctx_r1","fileChange","closeDialog","vm_r6","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r7","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r5","back","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Template","_r8","ContentImportComponent_Conditional_0_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Template","tmp_3_0","viewStateSelected","_r1","filesDropped","ContentImportComponent_Conditional_0_Conditional_10_Template","Name","ContentImportComponent","dialogData","dialogRef","route","hostClass","contentImportService","transient","contentTypesService","dialogConfigSvc","contentType$","BehaviorSubject","loading$","viewStates","waiting","default","evaluated","imported","viewStateSelected$","evaluationResult$","importResult$","viewModel$","combineLatest","loading","contentTypeStaticName","snapshot","paramMap","ngOnInit","next","forkJoin","subscribe","dialogSettings","Primary","ngOnDestroy","complete","close","event","target","MAT_DIALOG_DATA","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentImportComponent_Conditional_0_Template","tmp_0_0","FormsModule","MatButtonModule","i4","MatRadioModule","i5","MatDialogActions","AsyncPipe","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","elementRef","zone","snackBar","super","markStyle","allowedFileTypes","EventEmitter","dropAreaClass","dragClass","timeouts","element","nativeElement","markStyleClass","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","readAsText","webApiEntityList","EntityService","ServiceBase","queryService","QueryService","getEntities$","p","getAvailableEntities","contentTypeName","entitiesFilter","rxTap","enabled","getEntities","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","id","_angular_core__WEBPACK_IMPORTED_MODULE_8__","GlobalConfigService","debugState","signal","isDebug","computed","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","set","allow","oldConfig","newConfig","toggleDebugEnabled","queryUrl","hasParams","urlParams","Guids","source","options","injector","assertInInjectionContext","inject","Injector","subject","ReplaySubject","watcher","effect","err","untracked","manualCleanup","DestroyRef","onDestroy","destroy","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","rejectErrors","bind","current","ɵRuntimeError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/global-dialog-config.service.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalDialogConfigService } from './global-dialog-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'DialogConfigService';\r\n\r\n/**\r\n * Context aware dialog configuration service.\r\n * \r\n * It uses the shared service so the settings are cached when re-requested by anything else.\r\n */\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(private contextSvcShared: GlobalDialogConfigService, private context: Context) {\r\n  }\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.contextSvcShared.getShared$(appId);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'GlobalDialogConfigService';\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n/**\r\n * Service for getting dialog settings for the current app.\r\n * \r\n * Note that it should normally be shared, to save resources / network calls.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$')\r\n      .pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  private getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ vm.contentType?.Name }} Import Data</div>\r\n  </div>\r\n  <div class=\"eav-dialog-description\">\r\n    <p>\r\n      This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n      importing, and that you created the import-file using the template provided by the Export. Please visit\r\n      <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n    </p>\r\n  </div>\r\n  @if (formValues != null) {\r\n  @switch (vm.viewStateSelected) {\r\n  <!-- FORM -->\r\n  @case (1) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div>\r\n        <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\"\r\n          name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n  <!-- END FORM -->\r\n  <!-- WAITING -->\r\n  @case (0) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p>Please wait while processing...</p>\r\n  </div>\r\n  }\r\n  <!-- END WAITING -->\r\n  <!-- EVALUATION RESULT -->\r\n  @case (2) {\r\n  @if (vm.evaluationResult) {\r\n  <!-- DETAILS / STATISTICS -->\r\n  @if (vm.evaluationResult.Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <p class=\"eav-evaluation__title\">File contains:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>{{ vm.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n      <li>{{ vm.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n      <li>{{ vm.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n        {{ vm.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>Create {{ vm.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n      <li>Update {{ vm.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n      <li>Delete {{ vm.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n      <li>Ignore {{ vm.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n        {{ vm.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n  </div>\r\n  }\r\n  <!-- END DETAILS / STATISTICS -->\r\n  <!-- ERRORS -->\r\n  @if (!vm.evaluationResult.Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      @for (error of vm.evaluationResult.Errors; track error) {\r\n      <li>\r\n        <div>{{ errors[error.ErrorCode] }}</div>\r\n        @if (error.ErrorDetail) {\r\n        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n        }\r\n        @if (error.LineNumber) {\r\n        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n        }\r\n        @if (error.LineDetail) {\r\n        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n        }\r\n      </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n  }\r\n  <!-- END ERRORS -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"back()\">Back</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!vm.evaluationResult.Success\" (click)=\"importContent()\">\r\n      Import\r\n    </button>\r\n  </mat-dialog-actions>\r\n  }\r\n  }\r\n  <!-- END EVALUATION RESULT -->\r\n  <!-- IMPORT RESULT -->\r\n  @case (3) {\r\n  @if (vm.importResult) {\r\n  <div class=\"eav-dialog-content\">\r\n    @if (vm.importResult.Success) {\r\n    <p>Import done.</p>\r\n    }\r\n    @if (!vm.importResult.Success) {\r\n    <p>Import failed.</p>\r\n    }\r\n  </div>\r\n  }\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n  }\r\n  <!-- END IMPORT RESULT -->\r\n  }\r\n  }\r\n</div>\r\n}\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, map } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../core';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentImportService = transient(ContentImportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(AppDialogConfigService);\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  viewModel$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({ selector: '[appDragAndDrop]', standalone: true })\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService extends ServiceBase {\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext)\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { ServiceBase } from './service-base';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\n\r\nconst logThis = false;\r\n\r\n@Injectable()\r\nexport class QueryService extends ServiceBase {\r\n\r\n  constructor(private http: HttpClient, private context: Context) {\r\n    super(new EavLogger('QueryService', logThis));\r\n  }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.a('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.a(`getEntities(${log})`, { contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","/**\n * @license Angular v17.3.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"x_google_ignoreList":[12]}