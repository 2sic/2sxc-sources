{"version":3,"file":"projects_eav-ui_src_app_app-administration_queries-rest-api_queries-rest-api_component_ts.b0c101d5a86ad842.js","mappings":"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","names":["i0","contentType_r1","Guid","Name","QueriesRestApiComponent_Conditional_5_For_1_Template","ctx","sort","QueriesRestApiComponent","constructor","fb","router","route","this","pipelinesService","transient","PipelinesService","queryTypes$","BehaviorSubject","undefined","ngOnInit","fetchQueries","queryTypeForm","group","queryType","getAll","eavConstants","contentTypes","query","subscribe","queries","next","urlSegments","url","split","urlGuidName","length","selectedContentType","find","get","setValue","openRestApi","event","navigate","relativeTo","parent","firstChild","static","t","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","standalone","features","decls","vars","consts","template","rf","$event","QueriesRestApiComponent_Conditional_5_Template","tmp_1_0","MatSelectModule","i3","i4","i5","MatButtonModule","MatCardModule","MatIconModule","ReactiveFormsModule","AsyncPipe","RouterOutlet","SxcGridModule","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","http","context","dnnContext","contentType","$2sxc","apiUrl","webApiEntityList","params","appId","toString","importQuery","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","clonePipeline","id","Id","delete","_angular_core__WEBPACK_IMPORTED_MODULE_6__","jDH","factory","Éµfac","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","formData","FormData","append","zoneId","export","window","open","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/queries-rest-api/queries-rest-api.component.html","./projects/eav-ui/src/app/app-administration/queries-rest-api/queries-rest-api.component.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["<form [formGroup]=\"queryTypeForm\">\r\n  <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n    <mat-label>Query</mat-label>\r\n    <mat-select formControlName=\"queryType\" (valueChange)=\"openRestApi($event)\">\r\n      @if (queryTypes$ | async; as contentTypes) {\r\n        @for (contentType of contentTypes.sort() ; track contentType) {\r\n        <mat-option [value]=\"contentType.Guid\">\r\n          {{ contentType.Name }}\r\n        </mat-option>\r\n        }\r\n      }\r\n    </mat-select>\r\n  </mat-form-field>\r\n</form>\r\n\r\n<router-outlet></router-outlet>\r\n","import { AsyncPipe } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormBuilder, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { PipelinesService } from '../services';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { DevRestQueryComponent } from '../../dev-rest/query/query.component';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Query } from '../models';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../core';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\n\r\n@Component({\r\n  selector: 'app-web-api-rest-api',\r\n  standalone: true,\r\n  imports: [\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    ReactiveFormsModule,\r\n    AsyncPipe,\r\n    DevRestQueryComponent,\r\n    RouterOutlet,\r\n    SxcGridModule,\r\n  ],\r\n  templateUrl: './queries-rest-api.component.html',\r\n  styleUrl: './queries-rest-api.component.scss'\r\n})\r\nexport class QueriesRestApiComponent {\r\n  private pipelinesService = transient(PipelinesService);\r\n\r\n  queryTypes$ = new BehaviorSubject<Query[]>(undefined);\r\n  queryTypeForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchQueries();\r\n    this.queryTypeForm = this.fb.group({\r\n      queryType: ['']\r\n    });\r\n  }\r\n\r\n  fetchQueries() {\r\n    this.pipelinesService.getAll(eavConstants.contentTypes.query).subscribe((queries: Query[]) => {\r\n      this.queryTypes$.next(queries);\r\n\r\n      // When Route are reload and have some Guid in the Route\r\n      const urlSegments = this.router.url.split('/');\r\n      const urlGuidName = urlSegments[urlSegments.length - 1]\r\n\r\n      const selectedContentType = queries.find(query => query.Guid === urlGuidName);\r\n      if (selectedContentType)\r\n        this.queryTypeForm.get('queryType').setValue(selectedContentType.Guid);\r\n    });\r\n  }\r\n\r\n  openRestApi(event: string): void {\r\n    if (!event) return;\r\n    this.router.navigate([`${event}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}