{"version":3,"file":"projects_eav-ui_src_app_shared_components_base-with-child-dialog_component_ts-projects_eav-ui-105347.0f0cb6059ee0f92a.js","mappings":"4RAkBM,MAAgBA,UAAqCC,IAEzDC,YACYC,EACAC,EACHC,GAEPC,QAJUC,KAAAJ,SACAI,KAAAH,QACHG,KAAAF,MAGPE,KAAKF,MAAQ,IAAIG,IAAU,iBApBf,EAqBd,CAOUC,qBACR,OAAOF,KAAKJ,OAAOO,OAAOC,QACxBC,KAAOC,GAASA,aAAiBC,OAAa,EAC9CC,OAAYR,KAAKH,MAAMY,SAASC,aAAU,EAC1CC,KAAI,MAAQX,KAAKH,MAAMY,SAASC,aAAU,EAC1CE,QAAQ,EACRP,KAAO,EAAEQ,EAAgBC,KAAiBD,IAAmBC,GAGjE,kLChCF,MAEaC,EAAmB,gBACnBC,EAAmB,oBAGxB,IAAMC,EAAc,MAArB,MAAOA,UAAsBC,IAGlCvB,YAAoBwB,EACVC,EACAC,GAGRtB,MAAM,IAAIE,IAAU,iBAdR,IASMD,KAAAmB,OACVnB,KAAAoB,aACApB,KAAAqB,aAJFrB,KAAAsB,gBAAeC,KAAUC,IAQjC,CAQAC,aAAaC,GACX,OAAOA,EAAOtB,QACZC,KAAOsB,GAAU,MAALA,IAAS,EACrBC,KAAUD,GAAK3B,KAAK6B,qBAAqBF,EAAEG,iBAAiB1B,QAAK2B,KAAY,KAEjF,CAEQF,qBAAqBC,EAAyBE,GACpD,IAAIlC,EAAME,KAAKF,IAAImC,MAAM,cAAe,CAAEC,SAAS,IACnD,OAAOlC,KAAKsB,aAAaa,YAAY,CACnCC,aAAc,CAACN,GACfO,QAASL,EACTM,OAAQ,gBACRxC,IAAK,yBACJM,KACDN,EAAIM,QAAI,EACRO,KAAI4B,GAAQA,EAAKC,SAErB,CAEAC,OAAOC,EAAqBC,EAAkBC,EAAgBC,EAAmBC,GAC/E,OAAO9C,KAAKmB,KAAKsB,OAAazC,KAAKqB,WAAW0B,MAAM5B,KAAK6B,OAAOjC,EAAmB,UAAW,CAC5FW,OAAQ,CACNgB,cACAO,GAAIN,EAASO,WACbC,MAAOnD,KAAKoB,WAAWgC,OAAOD,MAC9BP,MAAOA,EAAMM,cACTL,GAAY,CAAEA,SAAUA,EAASK,eACjCL,GAAYC,GAAe,CAAEA,iBAGvC,CAACO,SAAArD,KAAA,mBAAAsD,iBAhDWrC,GAAasC,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAArD,KAAA,WAAA2D,EAAAC,IAAA,OAAb3C,EAAa4C,QAAb5C,EAAa6C,mBAAb7C,CAAc","names":["BaseWithChildDialogComponent","BaseComponent","constructor","router","route","log","super","this","EavLogger","childDialogClosed$","events","pipe","filter","event","NavigationEnd","startWith","snapshot","firstChild","map","pairwise","hadChildBefore","hasChildNow","webApiEntityRoot","webApiEntityList","EntityService","ServiceBase","http","formConfig","dnnContext","queryService","transient","QueryService","getEntities$","params","p","switchMap","getAvailableEntities","contentTypeName","shareReplay","entitiesFilter","rxTap","enabled","getEntities","contentTypes","itemIds","fields","data","Default","delete","contentType","entityId","force","parentId","parentField","$2sxc","apiUrl","id","toString","appId","config","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_9__","jDH","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/base-with-child-dialog.component.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts"],"sourcesContent":["import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { BaseComponent } from './base.component';\r\nimport { EavLogger } from '../logging/eav-logger';\r\n\r\nconst logThis = false;\r\n\r\n// 2024-06-12 2dm experimental - remove comments if all is good mid of June\r\n// - previously had\r\n// @Directive()   // Needs the @Directive() so the compiler allows OnDestroy to be implemented\r\n// ...then tried this\r\n// @Component({\r\n//   selector: 'app-base-component-with-child',\r\n//   template: ''\r\n// })\r\n// ...but then added abstract, so I think it doesn't actually need all that\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseWithChildDialogComponent extends BaseComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', logThis);\r\n  }\r\n\r\n  // 2024-06-12 2dm - don't think this is needed since it's already on the base class\r\n  // ngOnDestroy() {\r\n  //   super.ngOnDestroy();\r\n  // }\r\n\r\n  protected childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n      // tap(() => console.log('2dm ' + 'childDialogClosed$'))\r\n    )\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { FormConfigService } from '../../edit/state/form-config.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService extends ServiceBase {\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient,\r\n    private formConfig: FormConfigService,\r\n    private dnnContext: DnnContext,\r\n  )\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId: this.formConfig.config.appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}