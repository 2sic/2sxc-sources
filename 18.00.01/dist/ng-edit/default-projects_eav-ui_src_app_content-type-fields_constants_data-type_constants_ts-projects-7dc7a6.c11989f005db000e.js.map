{"version":3,"file":"default-projects_eav-ui_src_app_content-type-fields_constants_data-type_constants_ts-projects-7dc7a6.c11989f005db000e.js","mappings":"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","names":["DataTypeConstants","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","i0","FeatureIconIndicatorComponent","FeatureComponentBase","static","this","t","_angular_core__WEBPACK_IMPORTED_MODULE_1__","VBU","selectors","standalone","features","FeatureComponentProviders","decls","vars","consts","template","rf","ctx","FeatureIconIndicatorComponent_Conditional_0_Template","show$","MatIconModule","i1","AsyncPipe","TranslateModule","i2","TippyDirective","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","FeatureDetailService","constructor","http","dnnContext","getFeatureDetails","featureNameId","get","$2sxc","apiUrl","webApiRoot","params","nameId","_angular_core__WEBPACK_IMPORTED_MODULE_0__","jDH","factory","Éµfac","id_r3","_r2","ctx_r3","copyToClipboard","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","feature_r5","_r1","findOutMore","link","closeDialog","name","description","isEnabled","tmp_6_0","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","viewModel$","text","open","duration","window","close","MAT_DIALOG_DATA","i3","core","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","MatCardModule","i4","MatButtonModule","i5","i6","i7","SafeHtmlPipe","value","featureNameId$","next","showIf","showIf$","BehaviorSubject","dialog","inject","MatDialog","viewContainerRef","ViewContainerRef","changeDetectorRef","ChangeDetectorRef","featuresService","FeaturesService","feature$","pipe","switchMap","featName","get$","combineLatest","map","feat","openDialog","openFeatureDialog","FsC","inputs","featureId","autoFocus","data","width","markForCheck","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","hostBindings","$event","SignalHelpers","boolEquals","equal","RxHelpers","valueEquals","numberEquals","stringEquals","objectEquals","objectsEqual","sanitizer","transform","html","bypassSecurityTrustHtml","EJ8","pure","ServiceBase","super","EavLogger","dialogContext$","ReplaySubject","dialogContextSignal","signal","loadFromService","configService","getCurrent$","subscribe","ds","load","Context","dialogContext","set","getAll","computed","Features","arraysEqual","dc","find","f","getSignal","isEnabled$","_angular_core__WEBPACK_IMPORTED_MODULE_4__","providedIn","GlobalConfigService","debugState","isDebug","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","id","sessionStorage","getItem","keyDebug","allowDebug","allow","oldConfig","newConfig"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/constants/data-type.constants.ts","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.html","./projects/eav-ui/src/app/features/feature-icon-indicator/feature-icon-indicator.component.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/signal.helpers.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/services/features.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts"],"sourcesContent":["export const DataTypeConstants = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const;\r\n\r\nexport type DataTypeConstant = typeof DataTypeConstants[keyof typeof DataTypeConstants];\r\n","@if (show$ | async) {\r\n  <mat-icon [tippy]=\"'Features.NotActivated' | translate\">diamond</mat-icon>\r\n}","import { Component } from '@angular/core';\r\nimport { FeatureComponentBase, FeatureComponentProviders } from '../shared/base-feature.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-feature-icon-indicator',\r\n  templateUrl: './feature-icon-indicator.component.html',\r\n  styleUrls: ['./feature-icon-indicator.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n  providers: [\r\n    ...FeatureComponentProviders,\r\n  ],\r\n})\r\nexport class FeatureIconIndicatorComponent extends FeatureComponentBase { }\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","@if (viewModel$ | async; as feature) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature.name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature.description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (feature.isEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (feature.nameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button mat-raised-button color=\"accent\"\r\n        class=\"eav-card-action-button\" (click)=\"findOutMore(feature.link)\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        {{ \"Features.FindOutMore\" | translate }}\r\n      </button>\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../shared/pipes/safe-html.pipe';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<Feature>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = this.featureDetailService.getFeatureDetails(this.dialogData);\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void {\r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, Input, ViewContainerRef, inject } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\nexport const FeatureComponentProviders = [\r\n  FeatureDetailService,\r\n];\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  private dialog = inject(MatDialog);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private changeDetectorRef = inject(ChangeDetectorRef);\r\n  protected featuresService = inject(FeaturesService);\r\n\r\n  constructor() {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n      ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat, showIf]) => showIf == (feat?.isEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n}\r\n\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef.markForCheck();\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { CreateComputedOptions } from '@angular/core';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\nimport { ValueEqualityFn } from '@angular/core/primitives/signals';\r\n\r\nexport class SignalHelpers {\r\n  /** Options for number signal to ensure equality only on value difference */\r\n  static boolEquals: CreateComputedOptions<boolean> = {\r\n    equal: RxHelpers.valueEquals<boolean>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static numberEquals: CreateComputedOptions<number> = {\r\n    equal: RxHelpers.valueEquals<number>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static stringEquals: CreateComputedOptions<string> = {\r\n    equal: RxHelpers.valueEquals<string>\r\n  };\r\n\r\n  // note: this doesn't work as expected; leaving in so nobody tries to repeat this\r\n  // /** Options for string signal to ensure equality only on value difference */\r\n  // static valueEquals: CreateComputedOptions<boolean | string | number> = {\r\n  //   equal: RxHelpers.valueEquals<boolean | string | number>\r\n  // };\r\n\r\n  /** Options for object signal to ensure equality only on value difference */\r\n  static objectEquals = { equal: RxHelpers.objectsEqual };\r\n}\r\n\r\n// export class SignalEquals<T>: CreateComputedOptions<T> {\r\n//   equal: RxHelpers.objectsEqual<T>;\r\n// }\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml', standalone: true })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { Injectable, Signal, computed, signal } from '@angular/core';\r\nimport { map, Observable, ReplaySubject } from 'rxjs';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { DialogContext } from '../models/dialog-settings.model';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { FeatureSummary } from '../../features/models/feature-summary.model';\r\nimport { SignalHelpers } from '../helpers/signal.helpers';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\n\r\nconst logThis = false;\r\n\r\n/**\r\n * Singleton Service to provide information about enabled/disabled features.\r\n *\r\n * It currently has a strange architecture, since it's singleton,\r\n * but needs context data.\r\n * So the AppDialogConfigService seems to call the loadFromService.\r\n * TODO: 2dm: I don't like this, should rethink the architecture, feels a bit flaky.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeaturesService extends ServiceBase {\r\n  // new 2dm WIP\r\n  // Provide context information and ensure that previously added data is always available\r\n  private dialogContext$ = new ReplaySubject<DialogContext>(1);\r\n  private dialogContextSignal = signal<DialogContext>(null);\r\n\r\n  constructor() {\r\n    super(new EavLogger('FeaturesService', logThis));\r\n  }\r\n\r\n  loadFromService(configService: AppDialogConfigService) {\r\n    configService.getCurrent$().subscribe(ds => this.load(ds.Context));\r\n  }\r\n\r\n  load(dialogContext: DialogContext) {\r\n    // new 2dm WIP\r\n    this.dialogContext$.next(dialogContext);\r\n    this.dialogContextSignal.set(dialogContext);\r\n  }\r\n\r\n  getAll(): Signal<FeatureSummary[]> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features ?? [],\r\n      { equal: RxHelpers.arraysEqual }\r\n    );\r\n  }\r\n\r\n  // new 2dm WIP\r\n  get$(featureNameId: string): Observable<FeatureSummary> {\r\n    return this.dialogContext$.pipe(\r\n      // tap(f => console.log('2dm', f, featureNameId)),\r\n      map(dc => dc?.Features.find(f => f.nameId === featureNameId))\r\n    );\r\n  }\r\n\r\n  getSignal(featureNameId: string): Signal<FeatureSummary> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === featureNameId),\r\n      { equal: RxHelpers.objectsEqual }\r\n    );\r\n  }\r\n\r\n  isEnabled$(nameId: string): Observable<boolean> {\r\n    return this.get$(nameId).pipe(map(f => f?.isEnabled ?? false));\r\n  }\r\n\r\n  isEnabled(nameId: string): Signal<boolean> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === nameId)?.isEnabled ?? false,\r\n      SignalHelpers.boolEquals\r\n    );\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n"],"x_google_ignoreList":[]}