{"version":3,"sources":["./src/app/item-history/item-history.helpers.ts","./src/app/item-history/item-history.component.html","./src/app/item-history/item-history.component.ts"],"names":["calcHistoryAttributes","version","versions","compareWith","currentDataTypes","JSON","parse","Json","Entity","Attributes","previousItem","liveVersion","VersionNumber","findLive","find","v","previousDataTypes","allAttributes","Object","entries","forEach","dataType","keys","attributeName","a","name","push","map","attribute","currentValues","previousValues","change","calcChangeType","values","calcHistoryValues","allLangKeys","lang","includes","langKey","currentValue","previousValue","value","oldValue","sortObjectKeys","sortKeysAlphabetically","stringify","obj","sort","reduce","acc","key","dialogRef","route","versionsService","snackBar","hostClass","pageSizeOptions","expandedPanels","expandedAttributes","itemId","parseInt","this","snapshot","paramMap","get","versions$","BehaviorSubject","page$","pageSize$","compareWith$","historyItems$","combineLatest","pipe","page","pageSize","filteredVersions","changeSetId","ChangeSetId","attributes","historyId","HistoryId","timeStamp","TimeStamp","user","User","versionNumber","isLastVersion","some","calcHistoryItems","slice","templateVars$","length","historyItems","ngOnInit","fetchVersions","subscribe","next","ngOnDestroy","complete","closeDialog","close","compareChange","newCompareWith","panelExpandedChange","expand","attributeExpandedToggle","pageChange","event","newPage","pageIndex","newPageSize","restore","changeId","open","res","duration","refreshEdit","ItemHistoryComponent"],"mappings":"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","file":"item-history-component.e60bf9e5585969e1d9df.js","sourcesContent":["import { CompareWith } from './models/compare-with.model';\r\nimport { HistoryAttribute, HistoryAttributeValue, HistoryItem } from './models/history-item.model';\r\nimport { Version, VersionEntityAttributeValues, VersionJsonParsed } from './models/version.model';\r\n\r\nexport function getHistoryItems(versions: Version[], page: number, pageSize: number, compareWith: CompareWith) {\r\n  if (versions == null || page == null || pageSize == null || compareWith == null) { return null; }\r\n  const filtered = versions.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n  const historyItems = calcHistoryItems(filtered, versions, compareWith);\r\n  return historyItems;\r\n}\r\n\r\nfunction calcHistoryItems(filteredVersions: Version[], versions: Version[], compareWith: CompareWith) {\r\n  return filteredVersions.map(version => {\r\n    const historyItem: HistoryItem = {\r\n      changeSetId: version.ChangeSetId,\r\n      attributes: calcHistoryAttributes(version, versions, compareWith),\r\n      historyId: version.HistoryId,\r\n      timeStamp: version.TimeStamp,\r\n      user: version.User,\r\n      versionNumber: version.VersionNumber,\r\n      isLastVersion: !versions.some(v => v.VersionNumber === version.VersionNumber + 1),\r\n    };\r\n    return historyItem;\r\n  });\r\n}\r\n\r\nfunction calcHistoryAttributes(version: Version, versions: Version[], compareWith: CompareWith) {\r\n  const currentDataTypes = (JSON.parse(version.Json) as VersionJsonParsed).Entity.Attributes;\r\n  const previousItem = compareWith === 'live' ? findLive(versions) : versions.find(v => v.VersionNumber === version.VersionNumber - 1);\r\n  const previousDataTypes = previousItem ? (JSON.parse(previousItem.Json) as VersionJsonParsed).Entity.Attributes : null;\r\n\r\n  const allAttributes: { name: string, dataType: string }[] = [];\r\n  if (currentDataTypes != null) {\r\n    Object.entries(currentDataTypes).forEach(([dataType, attributes]) => {\r\n      Object.keys(attributes).forEach(attributeName => {\r\n        if (allAttributes.find(a => a.name === attributeName && a.dataType === dataType) != null) { return; }\r\n        allAttributes.push({ name: attributeName, dataType });\r\n      });\r\n    });\r\n  }\r\n  if (previousDataTypes != null) {\r\n    Object.entries(previousDataTypes).forEach(([dataType, attributes]) => {\r\n      Object.keys(attributes).forEach(attributeName => {\r\n        if (allAttributes.find(a => a.name === attributeName && a.dataType === dataType) != null) { return; }\r\n        allAttributes.push({ name: attributeName, dataType });\r\n      });\r\n    });\r\n  }\r\n\r\n  const historyAttributes = allAttributes.map(attribute => {\r\n    const currentValues = currentDataTypes?.[attribute.dataType]?.[attribute.name];\r\n    const previousValues = previousDataTypes?.[attribute.dataType]?.[attribute.name];\r\n\r\n    const historyAttribute: HistoryAttribute = {\r\n      name: attribute.name,\r\n      dataType: attribute.dataType,\r\n      change: calcChangeType(currentValues, previousValues, true),\r\n      values: calcHistoryValues(currentValues, previousValues),\r\n    };\r\n    return historyAttribute;\r\n  });\r\n\r\n  return historyAttributes;\r\n}\r\n\r\nfunction findLive(versions: Version[]) {\r\n  let liveVersion = versions[0];\r\n  for (const version of versions) {\r\n    if (version.VersionNumber <= liveVersion.VersionNumber) { continue; }\r\n    liveVersion = version;\r\n  }\r\n  return liveVersion;\r\n}\r\n\r\nfunction calcHistoryValues(values: VersionEntityAttributeValues, previousValues: VersionEntityAttributeValues) {\r\n  const allLangKeys: string[] = [];\r\n  if (values != null) {\r\n    Object.keys(values).forEach(lang => {\r\n      if (allLangKeys.includes(lang)) { return; }\r\n      allLangKeys.push(lang);\r\n    });\r\n  }\r\n  if (previousValues != null) {\r\n    Object.keys(previousValues).forEach(lang => {\r\n      if (allLangKeys.includes(lang)) { return; }\r\n      allLangKeys.push(lang);\r\n    });\r\n  }\r\n\r\n  const historyValues = allLangKeys.map(langKey => {\r\n    const currentValue = values?.[langKey];\r\n    const previousValue = previousValues?.[langKey];\r\n\r\n    const historyValue: HistoryAttributeValue = {\r\n      langKey,\r\n      value: currentValue,\r\n      oldValue: previousValue,\r\n      change: calcChangeType(currentValue, previousValue),\r\n    };\r\n    return historyValue;\r\n  });\r\n\r\n  return historyValues;\r\n}\r\n\r\nfunction calcChangeType(currentValue: any, previousValue: any, sortObjectKeys = false) {\r\n  let change: 'new' | 'deleted' | 'changed' | 'none';\r\n\r\n  if (sortObjectKeys) {\r\n    if (typeof currentValue === 'object') {\r\n      currentValue = sortKeysAlphabetically(currentValue);\r\n    }\r\n    if (typeof previousValue === 'object') {\r\n      previousValue = sortKeysAlphabetically(previousValue);\r\n    }\r\n  }\r\n\r\n  if (currentValue != null && previousValue != null) {\r\n    if (JSON.stringify(currentValue) !== JSON.stringify(previousValue)) {\r\n      change = 'changed';\r\n    } else {\r\n      change = 'none';\r\n    }\r\n  } else if (currentValue != null) {\r\n    change = 'new';\r\n  } else {\r\n    change = 'deleted';\r\n  }\r\n\r\n  return change;\r\n}\r\n\r\nfunction sortKeysAlphabetically(obj: object) {\r\n  if (typeof obj !== 'object') { return obj; }\r\n\r\n  return Object.keys(obj)\r\n    .sort()\r\n    .reduce(\r\n      (acc, key) => ({\r\n        ...acc,\r\n        [key]: (obj as any)[key],\r\n      }),\r\n      {},\r\n    );\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Item History</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">Check version history for this item and restore the version you need.</p>\r\n\r\n  <div *ngIf=\"data.historyItems?.length > 0\" class=\"compare-box\">\r\n    <mat-form-field appearance=\"standard\" color=\"accent\" class=\"compare-box__dropdown\">\r\n      <mat-select [value]=\"data.compareWith\" name=\"Scope\" (selectionChange)=\"compareChange($event.value)\">\r\n        <mat-option value=\"previous\">Compare with: Previous</mat-option>\r\n        <mat-option value=\"live\">Compare with: Live</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light\">\r\n    <div *ngIf=\"data.historyItems === null\">Loading...</div>\r\n    <div *ngIf=\"data.historyItems?.length === 0\">No previous versions of this item found</div>\r\n\r\n    <mat-accordion multi *ngIf=\"data.historyItems?.length > 0\" class=\"history-tables\">\r\n      <mat-expansion-panel *ngFor=\"let historyItem of data.historyItems\"\r\n        [expanded]=\"expandedPanels[historyItem.versionNumber]\"\r\n        (expandedChange)=\"panelExpandedChange($event, historyItem.versionNumber)\">\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>Version {{ historyItem.versionNumber }}</mat-panel-title>\r\n          <mat-panel-description>{{ historyItem.timeStamp | date:'yyyy-MM-dd hh:mm' }}</mat-panel-description>\r\n        </mat-expansion-panel-header>\r\n\r\n        <ng-container *ngIf=\"expandedPanels[historyItem.versionNumber]\">\r\n          <div class=\"table-row\" *ngFor=\"let attribute of historyItem.attributes\">\r\n            <div class=\"table-row__main row-main\"\r\n              (click)=\"attributeExpandedToggle(historyItem.versionNumber, attribute.name)\">\r\n              <div class=\"row-main__label history-{{ attribute.change }}\">\r\n                {{ attribute.name }}\r\n              </div>\r\n              <div class=\"row-main__value history-{{ attribute.change }}\">\r\n                <ng-container *ngIf=\"!expandedAttributes[historyItem.versionNumber + attribute.name]\">\r\n                  {{ attribute.values[0]?.value }}\r\n                </ng-container>\r\n              </div>\r\n              <div class=\"row-main__type\">\r\n                <i>[{{ attribute.dataType }}]</i>\r\n              </div>\r\n            </div>\r\n\r\n            <div class=\"table-row__details\" *ngIf=\"expandedAttributes[historyItem.versionNumber + attribute.name]\">\r\n              <div class=\"detail-row\" *ngFor=\"let value of attribute.values\">\r\n                <div class=\"detail-row__label history-{{ value.change }}\">{{ value.langKey }}:</div>\r\n                <div class=\"detail-row__value\">\r\n                  <div class=\"history-{{ value.change }}\" *ngIf=\"value.change !== 'changed'\">\r\n                    {{ value.change === 'deleted' ? value.oldValue : value.value }}\r\n                  </div>\r\n                  <ng-container *ngIf=\"value.change === 'changed'\">\r\n                    <div class=\"history-new\">{{ value.value }}</div>\r\n                    <div class=\"history-deleted history-deleted__value\">{{ value.oldValue }}</div>\r\n                  </ng-container>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div class=\"row-actions\">\r\n            <button mat-raised-button color=\"accent\" *ngIf=\"!historyItem.isLastVersion\"\r\n              (click)=\"restore(historyItem.changeSetId)\">\r\n              Restore\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </div>\r\n\r\n  <mat-paginator color=\"accent\" showFirstLastButtons=\"true\" [length]=\"data.length\" [pageSize]=\"data.pageSize\"\r\n    [pageSizeOptions]=\"pageSizeOptions\" (page)=\"pageChange($event)\" *ngIf=\"data.historyItems?.length > 0\">\r\n  </mat-paginator>\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { PageEvent } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { getHistoryItems } from './item-history.helpers';\r\nimport { CompareWith } from './models/compare-with.model';\r\nimport { ExpandedPanels } from './models/expanded-panels.model';\r\nimport { ItemHistoryResult } from './models/item-history-result.model';\r\nimport { Version } from './models/version.model';\r\nimport { VersionsService } from './services/versions.service';\r\n\r\n@Component({\r\n  selector: 'app-item-history',\r\n  templateUrl: './item-history.component.html',\r\n  styleUrls: ['./item-history.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ItemHistoryComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  pageSizeOptions = [10, 20, 50];\r\n  expandedPanels: ExpandedPanels = {};\r\n  expandedAttributes: ExpandedPanels = {};\r\n\r\n  private itemId = parseInt(this.route.snapshot.paramMap.get('itemId'), 10);\r\n  private versions$ = new BehaviorSubject<Version[]>(null);\r\n  private page$ = new BehaviorSubject(1);\r\n  private pageSize$ = new BehaviorSubject(this.pageSizeOptions[0]);\r\n  private compareWith$ = new BehaviorSubject<CompareWith>('live');\r\n  private historyItems$ = combineLatest([this.versions$, this.page$, this.pageSize$, this.compareWith$]).pipe(\r\n    map(([versions, page, pageSize, compareWith]) => getHistoryItems(versions, page, pageSize, compareWith)),\r\n  );\r\n  templateVars$ = combineLatest([this.versions$, this.historyItems$, this.pageSize$, this.compareWith$]).pipe(\r\n    map(([versions, historyItems, pageSize, compareWith]) => ({\r\n      length: versions?.length,\r\n      historyItems,\r\n      pageSize,\r\n      compareWith,\r\n    })),\r\n  );\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ItemHistoryComponent>,\r\n    private route: ActivatedRoute,\r\n    private versionsService: VersionsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.versionsService.fetchVersions(this.itemId).subscribe(versions => {\r\n      this.versions$.next(versions);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.versions$.complete();\r\n    this.page$.complete();\r\n    this.pageSize$.complete();\r\n    this.compareWith$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  compareChange(newCompareWith: CompareWith) {\r\n    this.compareWith$.next(newCompareWith);\r\n  }\r\n\r\n  panelExpandedChange(expand: boolean, versionNumber: number) {\r\n    this.expandedPanels[versionNumber] = expand;\r\n  }\r\n\r\n  attributeExpandedToggle(versionNumber: number, name: string) {\r\n    this.expandedAttributes[versionNumber + name] = !this.expandedAttributes[versionNumber + name];\r\n  }\r\n\r\n  pageChange(event: PageEvent) {\r\n    const newPage = event.pageIndex + 1;\r\n    if (newPage !== this.page$.value) {\r\n      this.expandedPanels = {};\r\n      this.expandedAttributes = {};\r\n      this.page$.next(newPage);\r\n    }\r\n    const newPageSize = event.pageSize;\r\n    if (newPageSize !== this.pageSize$.value) {\r\n      this.pageSize$.next(newPageSize);\r\n    }\r\n  }\r\n\r\n  restore(changeId: number) {\r\n    this.snackBar.open('Restoring previous version...');\r\n    this.versionsService.restore(this.itemId, changeId).subscribe(res => {\r\n      this.snackBar.open('Previous version restored. Will reload edit dialog', null, { duration: 3000 });\r\n      const result: ItemHistoryResult = {\r\n        refreshEdit: true,\r\n      };\r\n      this.dialogRef.close(result);\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}