{"version":3,"sources":["./src/app/dev-rest/dev-rest-custom/dev-rest-custom.component.html","./src/app/dev-rest/dev-rest-custom/dev-rest-custom.component.ts","./src/app/dev-rest/dev-rest-tab-introduction/dev-rest-tab-introduction.component.html","./src/app/dev-rest/dev-rest-tab-introduction/dev-rest-tab-introduction.component.ts","./src/app/dev-rest/info-box/info-box.component.html","./src/app/dev-rest/info-box/info-box.component.ts","./src/app/dev-rest/dev-rest-tab-examples/dev-rest-tab-examples.component.html","./src/app/dev-rest/dev-rest-tab-examples/dev-rest-tab-examples.component.ts","./src/app/dev-rest/dev-rest-urls-and-code/dev-rest-urls-and-code.component.html","./src/app/dev-rest/dev-rest-urls-and-code/dev-rest-urls-and-code.component.ts","./src/app/dev-rest/dev-rest-tab-permissions/dev-rest-tab-permissions.component.html","./src/app/dev-rest/dev-rest-tab-permissions/dev-rest-tab-permissions.component.ts","./src/app/dev-rest/dev-rest-tab-headers/dev-rest-tab-headers.component.ts","./src/app/dev-rest/dev-rest-tab-headers/dev-rest-tab-headers.component.html","./src/app/dev-rest/dev-rest-data/dev-rest-data.component.html","./src/app/dev-rest/dev-rest-query/dev-rest-query.component.html","./src/app/dev-rest/dev-rest-query/dev-rest-query.component.ts","./src/app/dev-rest/dev-rest-routing.module.ts","./src/app/dev-rest/dev-rest-dialog.config.ts","./src/app/dev-rest/dev-rest-data/dev-rest-data.component.ts","./src/app/dev-rest/dev-rest.module.ts"],"names":["dialogRef","router","route","webApisService","hostClass","webApi$","Subject","subscription","Subscription","this","templateVars$","combineLatest","pipe","map","webApi","ngOnInit","fetchData","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","webApiPath","decodeURIComponent","snapshot","parent","paramMap","get","getAll","subscribe","webApis","find","w","path","next","add","events","filter","event","startWith","firstChild","pairwise","DevRestCustomComponent","scenarios","DevRestTabIntroductionComponent","getIcon","type","InfoBoxComponent","DevRestTabExamplesComponent","snackBar","http","callApiGet","url","res","console","log","openSnackBar","copyCode","text","message","action","open","duration","DevRestUrlsAndCodeComponent","modules","gridOptions","columnDefs","headerName","field","width","headerClass","cellClass","flex","minWidth","openPermissions","contentTypeStaticName","paramTypeName","navigate","goContentType","relativeTo","DevRestTabPermissionsComponent","DevRestHttpHeadersComponent","routes","component","data","dialog","name","initContext","panelSize","panelClass","getComponent","title","children","contentTypesService","appDialogConfigService","permissionsService","entityService","context","dnnContext","scenario$","BehaviorSubject","contentType$","pm","switchMap","ctName","retrieveContentType","share","dialogSettings$","getDialogSettings","permissions$","metadata","entity","keyTypes","guid","root$","scenario","dialogSettings","resolved","replace","Name","inSameContext","encodeURI","Context","App","Folder","domainPrefix","document","location","protocol","host","useVirtual","inSameSite","$2sxc","apiUrl","itemOfThisType$","reactiveEntities","ct","contentTypeName","StaticName","list","length","i","contentType","permissions","root","item","diag","currentScenario","itemId","Id","itemGuid","Value","apiCalls","folder","moduleId","permissionsHasAnonymous","p","Condition","indexOf","changeScenario","DevRestDataComponent","paramQuery","pipelinesService","query$","contentTypes","query","queryGuid","q","Guid","DevRestQueryComponent","paramApiPath","DevRestRoutingModule","forChild","DevRestModule","withComponents"],"mappings":"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","file":"dev-rest-module.5bc12d948c97a6e59b44.js","sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Using REST with {{ data.webApi?.name }}</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <!-- Template below this line -->\r\n\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { combineLatest, Observable, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { WebApi } from '../../app-administration/models/web-api.model';\r\nimport { WebApisService } from '../../app-administration/services/web-apis.service';\r\nimport { DevRestCustomTemplateVars } from './dev-rest-custom-template-vars';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-custom',\r\n  templateUrl: './dev-rest-custom.component.html',\r\n  styleUrls: ['../dev-rest-all.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DevRestCustomComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  templateVars$: Observable<DevRestCustomTemplateVars>;\r\n\r\n  private webApi$ = new Subject<WebApi>();\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<DevRestCustomComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private webApisService: WebApisService,\r\n  ) {\r\n    this.templateVars$ = combineLatest([this.webApi$]).pipe(\r\n      map(([webApi]) => ({ webApi })),\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchData();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.webApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchData() {\r\n    const webApiPath = decodeURIComponent(this.route.snapshot.parent.paramMap.get('webApiPath'));\r\n\r\n    this.webApisService.getAll().subscribe(webApis => {\r\n      const webApi = webApis.find(w => w.path === webApiPath);\r\n      this.webApi$.next(webApi);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchData();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<p>\n  All data can be used in JavaScript, SPAs or anywhere with the REST API\n  (see <a href=\"https://docs.2sxc.org/specs/web-api/intro.html\" target=\"_blank\">docs</a>).\n  Use this for things like:\n</p>\n<ul>\n  <li>Creating SPAs in DNN/2sxc</li>\n  <li>Getting data for mobile apps</li>\n  <li>Sharing data to other platforms</li>\n  <li>Using DNN/2sxc as a headless CMS</li>\n</ul>\n<p>\n  Just set off HTTP <code>GET</code> requests or similar\n  to the endpoint like <code>{{ data.root }}</code>. You can find the full list with example code\n  in the next tabs.\n  Make sure you also read about permissions and HTTP headers.\n</p>\n<h3>Scenarios</h3>\n<ng-container *ngFor=\"let scenario of scenarios\">\n  <h4>Scenario: {{ scenario.name }}</h4>\n  <p>\n    {{ scenario.description }}\n  </p>\n  <p *ngIf=\"scenario.notes\">\n    <em>\n      {{ scenario.notes }}\n    </em>\n  </p>\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { AllScenarios, DevRestDataTemplateVars } from '..';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-tab-introduction',\r\n  templateUrl: './dev-rest-tab-introduction.component.html',\r\n  styleUrls: ['./dev-rest-tab-introduction.component.scss']\r\n})\r\nexport class DevRestTabIntroductionComponent implements OnInit {\r\n\r\n  @Input() data: DevRestDataTemplateVars;\r\n\r\n  /** List of scenarios */\r\n  scenarios = AllScenarios;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p class=\"icon-box {{ type }}\">\r\n  <mat-icon>{{ getIcon() }}</mat-icon>\r\n  <strong *ngIf=\"title\" [innerHTML]=\"title\"></strong>\r\n  <br *ngIf=\"title\">\r\n  <ng-content></ng-content>\r\n</p>\r\n","import { Component, Input } from '@angular/core';\r\nimport { infoBoxIconMap, infoBoxType } from './hint';\r\n\r\n@Component({\r\n    selector: 'app-info-box',\r\n    templateUrl: './info-box.component.html',\r\n    styleUrls: ['./info-box.component.scss']\r\n})\r\nexport class InfoBoxComponent {\r\n  @Input() type: infoBoxType;\r\n  @Input() title: string;\r\n  constructor () {}\r\n\r\n  getIcon() {\r\n    return infoBoxIconMap[this.type];\r\n  }\r\n}\r\n","<app-info-box type=\"info\" *ngIf=\"data.scenario.useVirtual\">\r\n  Virtual REST URLs are short. They will be resolved internally\r\n  to the full length (based on the dnn-version, current portal, etc.)\r\n  thanks to $2sxc JS API. This happens when you use the\r\n  <a href=\"https://docs.2sxc.org/specs/js/sxcewebapi.html\" target=\"_blank\">\r\n    $2sxc(<em>id-or-htmlnode</em>).webApi.get(...)\r\n  </a>\r\n  or if you use\r\n  <a href=\"https://https://www.npmjs.com/package/@2sic.com/dnn-sxc-angular\" target=\"_blank\">\r\n    dnn-sxc-angular (npm package)\r\n  </a>\r\n  (which also passes url-resolving through $2sxc).\r\n</app-info-box>\r\n\r\n<app-info-box *ngIf=\"data.scenario.needsAnonymous && !data.permissionsHasAnonymous\" type=\"warning\">\r\n  To use the REST API from external, you usually will want to set some permissions for <code>Anonymous</code>.\r\n  As of now, no such permissions are configured.\r\n</app-info-box>\r\n\r\n<app-info-box *ngIf=\"data.scenario.needsAnonymous && data.permissionsHasAnonymous\" type=\"alert\">\r\n  It seems that you have some permissions configured for <code>Anonymous</code>.\r\n  This is correct if you plan on using the REST endpoints from externaly.\r\n  Please make sure that they are the ones you need, and that you don't accidentally open up too much.\r\n</app-info-box>\r\n\r\n<p>\r\n  The examples below use real values to make it easier to get started.\r\n  The values used are the current content-type <code>{{ data.contentType.Name }}</code>,\r\n  the current Module ID <code>{{ data.moduleId }}</code>\r\n  and the folder of the current App folder <code>{{ data.folder }}</code> (where needed).\r\n  The code also looked up an item of this type and will use it's ID <code>{{ data.itemId }}</code> in the\r\n  examples.\r\n</p>\r\n","import { Component, Input } from '@angular/core';\r\nimport { DevRestDataTemplateVars } from '..';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-tab-examples',\r\n  templateUrl: './dev-rest-tab-examples.component.html',\r\n  styleUrls: ['./dev-rest-tab-examples.component.scss']\r\n})\r\nexport class DevRestTabExamplesComponent {\r\n  @Input() data: DevRestDataTemplateVars;\r\n  constructor() { }\r\n}\r\n","<mat-accordion multi class=\"rest-urls-accordion\">\r\n  <mat-expansion-panel *ngFor=\"let apiCall of data.apiCalls\">\r\n\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <div class=\"rest-urls-title\">\r\n          <code>{{ apiCall.verb }}</code>: <code>{{ apiCall.url }}</code>\r\n          <span>&nbsp;to {{ apiCall.teaser }}</span>\r\n        </div>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n\r\n    <mat-panel-description style=\"display: block;\">\r\n      <h4>{{ apiCall.instructions }}</h4>\r\n      <p>\r\n        HTTP Verb: <code>{{ apiCall.verb }}</code> <br>\r\n        {{ data.scenario.useVirtual ? 'Virtual' : 'Absolute' }} Url: <code>{{ apiCall.url }}</code>\r\n      </p>\r\n      <p *ngIf=\"apiCall.enableButton\">\r\n        <button mat-raised-button (click)=\"callApiGet(apiCall.url)\">Call and Output to Console</button>\r\n        <ng-container *ngIf=\"apiCall.browseUrl\">\r\n          &nbsp;\r\n          <a [href]=\"apiCall.browseUrl\" target=\"_blank\">Open in Browser</a>\r\n          <span *ngIf=\"data.scenario.useVirtual\">\r\n            (for the demo to work it will add context parameters)\r\n          </span>\r\n        </ng-container>\r\n      </p>\r\n\r\n      <!-- show the code examples -->\r\n      <ng-container *ngFor=\"let code of apiCall.code\">\r\n        <h4>{{ code.title }}</h4>\r\n        <p>{{ code.description }}</p>\r\n        <div class=\"code-example\">\r\n          <pre class=\"code-example__text\">{{ code.code }}</pre>\r\n          <button mat-icon-button class=\"code-example__copy\" matTooltip=\"Copy to clipboard\"\r\n            (click)=\"copyCode(code.code)\">\r\n            <mat-icon>copy</mat-icon>\r\n          </button>\r\n        </div>\r\n\r\n        <!-- show hints / warnings -->\r\n        <app-info-box *ngFor=\"let hint of code.hints\" [type]=\"hint.type\">\r\n          <span [innerHtml]=\"hint.message\"></span>\r\n        </app-info-box>\r\n\r\n      </ng-container>\r\n\r\n    </mat-panel-description>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { DevRestDataTemplateVars } from '..';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-urls-and-code',\r\n  templateUrl: './dev-rest-urls-and-code.component.html',\r\n  styleUrls: ['./dev-rest-urls-and-code.component.scss']\r\n})\r\nexport class DevRestUrlsAndCodeComponent {\r\n  @Input() data: DevRestDataTemplateVars;\r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n    private http: HttpClient,\r\n  ) { }\r\n\r\n  callApiGet(url: string) {\r\n    this.http.get<any>(url).subscribe(res => {\r\n      console.log(`Called ${url} and got this:`, res);\r\n      this.openSnackBar(`Called ${url}. You can see the full result in the F12 console`, 'API call returned');\r\n    });\r\n    this.openSnackBar(`Calling ${url}. You can see the full result in the F12 console`, 'API call sent');\r\n  }\r\n\r\n  copyCode(text: string) {\r\n    copyToClipboard(text);\r\n    this.openSnackBar('Copied to clipboard');\r\n  }\r\n\r\n  private openSnackBar(message: string, action?: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n","\n<h3>Permissions ({{ data.permissions.length }})</h3>\n<p>\n  This content-type ({{ data.contentType.Name }}) has {{ data.permissions.length }} permissions\n  configured.\n  <button mat-icon-button matTooltip=\"Open permissions\" (click)=\"openPermissions()\">\n    <mat-icon [matBadge]=\"data.permissions.length\" matBadgePosition=\"after\" matBadgeColor=\"accent\"\n      matBadgeSize=\"small\" *ngIf=\"data.permissions.length\">\n      person\n    </mat-icon>\n    <mat-icon *ngIf=\"!data.permissions.length\">person</mat-icon>\n  </button>\n</p>\n<p *ngIf=\"!data.permissions.length\" class=\"warning info-box\">\n  <mat-icon>warning</mat-icon>\n  Warning: you don't have any permissions configured. So only Super-Users (Host) will be able to use the API\n  endpoints.\n</p>\n\n<ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.permissions\" [modules]=\"modules\"\n  [gridOptions]=\"gridOptions\" [style.height]=\"(33 + data.permissions.length * 48) + 'px'\">\n</ag-grid-angular>\n\n<h4>Super-Users (Host) can use all Endpoints</h4>\n<p>\n  As a super-user you can always access these REST endpoints, so this will make development easy.\n  Just remember to change the content-type permissions when you publish your work to public pages.\n</p>\n\n<h4>Set permissions for visitors to use this</h4>\n<p>\n  To let JavaScript access the REST endpoints for normal users, you must set the permissions of the\n  content-type.\n  Usually you will just want to set it like <em>if user has view-permissions, let him read this\n    content-type</em>.\n  In rare cases (eg. JS based forms) you may also want to give it some write permissions. Just be careful.\n  If you give write permissions, you will usually <em>only</em> want to give create, but not edit.\n</p>\n\n<h4>Setting permissions for use outside of DNN</h4>\n<p>\n  When calling API endpoints from a DNN page you will usually use the <code>$2sxc</code> or the DNN\n  Services-Framework.\n  These automatically add some HTTP-Headers (see tab about HTTP Headers) which let DNN determine that the\n  API-Call\n  was made on a specific page/module - and DNN uses this to check the permissions.\n</p>\n<p>\n  IF you are calling the endpoint from outside of DNN then these headers will be missing.\n  Because of this, permissions saying \"If has VIEW permissions, allow read\" will fail - because DNN cannot\n  determine\n  if the user has view permissions.\n</p>\n<p>\n  So to enable use from external, the condition must be \"If has ANONYMOUS permissions, allow ...\".\n  Because the ANONYMOUS check passes even if DNN doesn't know what page the module is on.\n</p>\n","import { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { Component, Input, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { DevRestDataTemplateVars, GoToDevRest } from '..';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-tab-permissions',\r\n  templateUrl: './dev-rest-tab-permissions.component.html',\r\n  styleUrls: ['./dev-rest-tab-permissions.component.scss']\r\n})\r\nexport class DevRestTabPermissionsComponent implements OnInit {\r\n\r\n  @Input() data: DevRestDataTemplateVars;\r\n\r\n  /** AgGrid modules */\r\n  modules = AllCommunityModules;\r\n  /** AgGrid options */\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    columnDefs: [\r\n      { headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'no-padding no-outline' },\r\n      { headerName: 'Name', field: 'Title', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Identity', field: 'Identity', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Condition', field: 'Condition', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Grant', field: 'Grant', width: 70, headerClass: 'dense', cellClass: 'no-outline' },\r\n    ],\r\n  };\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  openPermissions() {\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get(GoToDevRest.paramTypeName);\r\n    this.router.navigate([GoToPermissions.goContentType(contentTypeStaticName)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Component, Input, OnInit } from '@angular/core';\r\nimport { DevRestDataTemplateVars } from '..';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-tab-headers',\r\n  templateUrl: './dev-rest-tab-headers.component.html',\r\n  styleUrls: ['./dev-rest-tab-headers.component.scss']\r\n})\r\nexport class DevRestHttpHeadersComponent implements OnInit {\r\n\r\n  @Input() data: DevRestDataTemplateVars;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<h2>HTTP Headers, Security and Context</h2>\n<!-- Background about Context -->\n<p>\n  HTTP headers and url-parameters are used for <strong>Security</strong> and <strong>Context</strong>.\n  We'll explain the <em>Security</em> part further below, and start with <em>Context</em>.\n  When you work with WebApi endpoints, there are two distinct scenarios:\n</p>\n<h3>Using WebApi with Context</h3>\n<p>\n    In this case the endpoint knows what <strong>Page</strong> and what <strong>module</strong> the request is for.\n    This <strong>Context</strong> is then used to <em>auto-detect</em> the app (so you can use <code>/auto/</code> in the url).\n    <br>\n    It can also be used for for security checks - so you can set <strong>Permissions</strong>\n    like <code>Allow READ If the user may see the module</code>.\n</p>\n<app-info-box type=\"tip\">\n  TIP: In the case of <strong>Queries</strong> the <strong>Context</strong> can also provide parameters which were configured in the module.\n</app-info-box>\n\n<h3>Using WebApi without Context</h3>\n<p>\n  If the <strong>Context</strong> is not known, the endpoint cannot <em>auto-detect</em> the the app, so instead of <code>/auto/</code>\n  you must supply the correct app-name in the url, in this case <code>{{ data.folder }}</code>.\n  <br>\n  You also must specify more specific <strong>Permissions</strong> like <code>Allow READ if user is in group Members</code> or\n  <code>Allow READ for all ANONYMOUS users</code>.\n</p>\n\n<app-info-box type=\"info\" title=\"Site & Language are <em>not</em> part of the Context.\">\n  Technically the context needs more information than we just talked about, like what <strong>Site</strong> are we on and what\n  <strong>Language</strong> is being used. This information is already in the URL. So the root (before any <code>/api/</code>)\n  paths already contains that information.\n</app-info-box>\n\n<!-- Defining the Context -->\n<h2>How to get the Context</h2>\n<h3>How the Context is Defined</h3>\n<p>\n  The context always requires a <code>PageId</code> (in DNN it is hisorically called the <code>TabId</code>) and the <code>ModuleId</code>.\n  This lets the system look up the configuration for this module and figure out everything else.\n</p>\n\n<h3>Supplying Context in HTTP Headers (default)</h3>\n<p>\n  The standard behavior is to include the Context information in hidden <strong>HTTP headers</strong>.\n  This requires a bit more JavaScript code to attach the headers, but most of the APIs like the <code>$2sxc</code>\n  will do this automatically when used from within a 2sxc-App.\n  These are the context headers provided by $2sxc:\n</p>\n<ul>\n  <li>\n    <code>PageId</code> - this is the page we're on (number). <em>this header is new in v11.11</em>\n  </li>\n  <li>\n    <s><code>TabId</code></s> - <em>obsolete</em> this is also the page id (number). <em>just but for backward compatibility</em>\n  </li>\n  <li>\n    <code>ModuleId</code> - this is the module id (number)\n  </li>\n  <li>\n    <code>ContentBlockId</code> - this in an internal ID for working in inner-content (number). You will usually not care about this.\n  </li>\n</ul>\n\n<h3>Supplying Context as URL Parameters <code>?PageId=...</code></h3>\n<p>\n  The headers above (<code>PageId</code>, <code>ModuleId</code>) can also be added to the URL and will have the same effect.\n</p>\n\n<!-- Security -->\n<h2>Security Headers</h2>\n<p>\n  In addition to context headers, a request can also include <strong>Security</strong> headers:\n</p>\n<ol>\n  <li>\n    <code>RequestVerificationToken</code> - this is a crypto key to prove that the request originated from the\n    same site. It's only included in POST/PUT/DELETE but not GET requests.\n  </li>\n</ol>\n<p>\n  These are only used on <code>PUT</code>, <code>POST</code>, <code>DELETE</code> etc. but not on <code>GET</code> requests.\n</p>\n<app-info-box type=\"tip\">\n  This header is only usefull to verify that the request came from a real DNN page.\n  The 2sxc-api <code>$2sxc</code> will add this automatically for you, so you don't need to do anything if you use that.\n</app-info-box>\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Using REST with {{ data.contentType?.Name }}</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <app-selector-with-help label=\"Choose Scenario\" [items]=\"scenarios\" [value]=\"data.scenario.key\"\r\n    (valueChange)=\"changeScenario($event)\">\r\n  </app-selector-with-help>\r\n\r\n  <mat-tab-group dynamicHeight color=\"accent\"\r\n    class=\"mat-tab-group-fit-height mat-tab-group-fancy-scrollbar default-fonts\">\r\n\r\n    <!-- Introduction -->\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Introduction\">\r\n        <mat-icon>emoji_objects</mat-icon>\r\n        <span>Introduction</span>\r\n      </div>\r\n      <app-dev-rest-tab-introduction [data]=\"data\"></app-dev-rest-tab-introduction>\r\n    </mat-tab>\r\n\r\n    <!-- Absolute / Virtual URLs -->\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\"\r\n        [matTooltip]=\"(data.scenario.useVirtual ? 'Virtual ' : 'Absolute ') + 'REST URLs'\">\r\n        <mat-icon>code</mat-icon>\r\n        <span>{{ data.scenario.useVirtual ? 'Virtual' : 'Absolute' }} REST URLs</span>\r\n      </div>\r\n\r\n      <app-dev-rest-tab-examples [data]=\"data\"></app-dev-rest-tab-examples>\r\n\r\n      <!-- REST Tab showing the urls and code snippets -->\r\n      <app-dev-rest-urls-and-code [data]=\"data\"></app-dev-rest-urls-and-code>\r\n    </mat-tab>\r\n\r\n    <!-- Permissions explained -->\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Permissions\">\r\n        <mat-icon>person</mat-icon>\r\n        <span>Permissions ({{ data.permissions.length }})</span>\r\n        <mat-icon *ngIf=\"!data.permissions.length\">warning</mat-icon>\r\n      </div>\r\n      <app-dev-rest-tab-permissions [data]=\"data\"></app-dev-rest-tab-permissions>\r\n    </mat-tab>\r\n\r\n    <!-- HTTP Headers Explained -->\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"HTTP headers and auto\">\r\n        <mat-icon>perm_device_information</mat-icon>\r\n        <span>HTTP headers & &nbsp;<code>/auto/</code></span>\r\n      </div>\r\n      <app-dev-rest-tab-headers [data]=\"data\"></app-dev-rest-tab-headers>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</ng-container>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Using REST with {{ data.query?.Name }}</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <!-- Template below this line -->\r\n\r\n</ng-container>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { map, share, switchMap } from 'rxjs/operators';\r\nimport { GoToDevRest, fireOnStartAndWhenSubDialogCloses } from '..';\r\nimport { PipelinesService } from '../../app-administration/services';\r\nimport { PermissionsService } from '../../permissions/services/permissions.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DevRestQueryTemplateVars } from './dev-rest-query-template-vars';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-query',\r\n  templateUrl: './dev-rest-query.component.html',\r\n  styleUrls: ['../dev-rest-all.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DevRestQueryComponent implements OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  templateVars$: Observable<DevRestQueryTemplateVars>;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<DevRestQueryComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    pipelinesService: PipelinesService,\r\n    permissionsService: PermissionsService,\r\n  ) {\r\n\r\n    // Build Query Stream\r\n    const query$ = combineLatest([\r\n      route.paramMap.pipe(map(pm => pm.get(GoToDevRest.paramQuery))),\r\n      pipelinesService.getAll(eavConstants.contentTypes.query).pipe(share()),\r\n    ]).pipe(\r\n      map(([queryGuid, all]) => all.find(q => q.Guid === queryGuid)),\r\n      share()\r\n    );\r\n\r\n    // Build Permissions Stream\r\n    // This is triggered on start and everything a sub-dialog closes\r\n    const permissions$ = combineLatest([\r\n      fireOnStartAndWhenSubDialogCloses(this.router, this.route),\r\n      route.paramMap.pipe(map(pm => pm.get(GoToDevRest.paramQuery))),\r\n    ]).pipe(\r\n      switchMap(([_, queryName])  => {\r\n        return permissionsService.getAll(eavConstants.metadata.entity.type, eavConstants.keyTypes.guid, queryName);\r\n      }),\r\n      share()\r\n    );\r\n\r\n    // Build variables for template\r\n    this.templateVars$ = combineLatest([query$, permissions$]).pipe(\r\n      map(([query, permissions]) => ({ query, permissions })),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { DevRestCustomComponent } from './dev-rest-custom/dev-rest-custom.component';\r\nimport { DevRestDataComponent } from './dev-rest-data/dev-rest-data.component';\r\nimport { devRestDialog } from './dev-rest-dialog.config';\r\nimport { DevRestQueryComponent } from './dev-rest-query/dev-rest-query.component';\r\nimport { GoToDevRest } from './go-to-dev-rest';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: devRestDialog, title: 'REST API' }, children: [\r\n      // New: Moved full responbility of sub-routes to here (2dm 2020-11-23)\r\n      {\r\n        path: `data/:${GoToDevRest.paramTypeName}`, component: DevRestDataComponent, children: [\r\n          GoToPermissions.route,\r\n        ]\r\n      },\r\n      {\r\n        path: `query/:${GoToDevRest.paramQuery}`, component: DevRestQueryComponent, children: [\r\n          GoToPermissions.route,\r\n        ]\r\n      },\r\n      { path: `custom/:${GoToDevRest.paramApiPath}`, component: DevRestCustomComponent },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DevRestRoutingModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const devRestDialog: DialogConfig = {\r\n  name: 'DEV_REST_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { DevRestEntryComponent } = await import('./dev-rest-entry/dev-rest-entry.component');\r\n    return DevRestEntryComponent;\r\n  }\r\n};\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, OnDestroy } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, share, switchMap } from 'rxjs/operators';\r\nimport { AllScenarios, generateApiCalls, Scenario } from '..';\r\nimport { EntityService } from '../../../../../edit/shared/services';\r\nimport { AppDialogConfigService } from '../../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { PermissionsService } from '../../permissions/services/permissions.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { GoToDevRest } from '../go-to-dev-rest';\r\nimport { fireOnStartAndWhenSubDialogCloses } from '../routing-helpers';\r\nimport { DevRestDataTemplateVars } from './dev-rest-data-template-vars';\r\n\r\nconst pathToContent = 'app/{appname}/content/{typename}';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-data',\r\n  templateUrl: './dev-rest-data.component.html',\r\n  styleUrls: ['../dev-rest-all.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // we need preserve whitespace - otherwise spaces are missing in some conditional HTML\r\n  preserveWhitespaces: true,\r\n})\r\nexport class DevRestDataComponent implements OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  /** Template variables for the HTML template */\r\n  templateVars$: Observable<DevRestDataTemplateVars>;\r\n\r\n  /** List of scenarios */\r\n  scenarios = AllScenarios;\r\n\r\n  /** Currently selected scenario */\r\n  private scenario$ = new BehaviorSubject<Scenario>(AllScenarios[0]);\r\n\r\n  /** Subscription Sink */\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<DevRestDataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    contentTypesService: ContentTypesService,\r\n    appDialogConfigService: AppDialogConfigService,\r\n    permissionsService: PermissionsService,\r\n    entityService: EntityService,\r\n    /** Context for this dialog. Used for appId, zoneId, tabId, etc. */\r\n    context: Context,\r\n    /** dnn-sxc-angular context. Used to resolve urls */\r\n    dnnContext: DnnContext,\r\n  ) {\r\n\r\n    // Build ContentType Stream\r\n    const contentType$ = route.paramMap.pipe(\r\n      map(pm => pm.get(GoToDevRest.paramTypeName)),\r\n      switchMap(ctName => contentTypesService.retrieveContentType(ctName)),\r\n      share()\r\n    );\r\n\r\n    // Build Dialog Settings Stream\r\n    // Note: this is probably already loaded somewhere, so I'm not sure why we're getting it again\r\n    const dialogSettings$ = appDialogConfigService.getDialogSettings().pipe(share());\r\n\r\n    // Build Permissions Stream\r\n    // This is triggered on start and everything a sub-dialog closes\r\n    const permissions$ = combineLatest([\r\n      fireOnStartAndWhenSubDialogCloses(this.router, this.route),\r\n      route.paramMap.pipe(map(pm => pm.get(GoToDevRest.paramTypeName))),\r\n    ]).pipe(\r\n      switchMap(([_, typeName]) => {\r\n        // TODO: 2dm - something looks wrong here, we're getting Entity-metadata for content-type!\r\n        return permissionsService.getAll(eavConstants.metadata.entity.type, eavConstants.keyTypes.guid, typeName);\r\n      }),\r\n      share()\r\n    );\r\n\r\n    // Build Root Stream (for the root folder)\r\n    const root$ = combineLatest([contentType$, this.scenario$, dialogSettings$]).pipe(\r\n      map(([contentType, scenario, dialogSettings]) => {\r\n        const resolved = pathToContent\r\n          .replace('{typename}', contentType.Name)\r\n          .replace('{appname}', scenario.inSameContext ? 'auto' : encodeURI(dialogSettings.Context.App.Folder));\r\n        const domainPrefix = document.location.protocol + '//' + document.location.host;\r\n        return scenario.useVirtual\r\n          ? resolved\r\n          : (scenario.inSameSite ? '' : domainPrefix) + dnnContext.$2sxc.http.apiUrl(resolved);\r\n      }),\r\n    );\r\n\r\n    // Get an item of this type for building urls\r\n    const itemOfThisType$ = entityService.reactiveEntities(\r\n      contentType$.pipe(filter(ct => !!ct), map(ct => ({ contentTypeName: ct.StaticName, filter: '' })))\r\n    ).pipe(\r\n      map(list => list.length ? list[0] : null),\r\n      filter(i => !!i)\r\n    );\r\n\r\n    // Prepare everything for use in the template\r\n    // Note that we need to mix multiple combineLatest, because a combineLatest can only take 6 streams\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([contentType$, this.scenario$, permissions$]),\r\n      combineLatest([root$, itemOfThisType$, dialogSettings$]),\r\n    ]).pipe(\r\n      map(([[contentType, scenario, permissions], [root, item, diag]]) => ({\r\n        contentType,\r\n        currentScenario: scenario,\r\n        root,\r\n        itemId: item.Id,\r\n        itemGuid: item.Value,\r\n        apiCalls: generateApiCalls(dnnContext.$2sxc, scenario, context, root, item.Id),\r\n        folder: encodeURI(diag.Context.App.Folder),\r\n        moduleId: context.moduleId,\r\n        scenario,\r\n        permissions,\r\n        permissionsHasAnonymous: permissions.filter(p => p.Condition.indexOf('.Anonymous') > 0).length > 0,\r\n      })),\r\n    );\r\n\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.scenario$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  changeScenario(scenario: Scenario) {\r\n    this.scenario$.next(scenario);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { HelpPopupComponent, SelectorWithHelpComponent } from '.';\r\nimport { EntityService } from '../../../../edit/shared/services';\r\nimport { PipelinesService } from '../app-administration/services';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { PermissionsService } from '../permissions/services/permissions.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { DevRestCustomComponent } from './dev-rest-custom/dev-rest-custom.component';\r\nimport { DevRestDataComponent } from './dev-rest-data/dev-rest-data.component';\r\nimport { DevRestEntryComponent } from './dev-rest-entry/dev-rest-entry.component';\r\nimport { DevRestQueryComponent } from './dev-rest-query/dev-rest-query.component';\r\nimport { DevRestRoutingModule } from './dev-rest-routing.module';\r\nimport { DevRestTabExamplesComponent } from './dev-rest-tab-examples/dev-rest-tab-examples.component';\r\nimport { DevRestHttpHeadersComponent } from './dev-rest-tab-headers/dev-rest-tab-headers.component';\r\nimport { DevRestTabIntroductionComponent } from './dev-rest-tab-introduction/dev-rest-tab-introduction.component';\r\nimport { DevRestTabPermissionsComponent } from './dev-rest-tab-permissions/dev-rest-tab-permissions.component';\r\nimport { DevRestUrlsAndCodeComponent } from './dev-rest-urls-and-code/dev-rest-urls-and-code.component';\r\nimport { InfoBoxComponent } from './info-box/info-box.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InfoBoxComponent,\r\n    DevRestTabExamplesComponent,\r\n    DevRestUrlsAndCodeComponent,\r\n    DevRestDataComponent,\r\n    SelectorWithHelpComponent,\r\n    HelpPopupComponent,\r\n    DevRestHttpHeadersComponent,\r\n    DevRestTabPermissionsComponent,\r\n    DevRestTabIntroductionComponent,\r\n    DevRestTabExamplesComponent,\r\n    DevRestQueryComponent,\r\n    DevRestEntryComponent,\r\n    DevRestCustomComponent,\r\n  ],\r\n  entryComponents: [\r\n    DevRestDataComponent,\r\n    SelectorWithHelpComponent,\r\n    HelpPopupComponent,\r\n    DevRestQueryComponent,\r\n    DevRestEntryComponent,\r\n    DevRestCustomComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    DevRestRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatTabsModule,\r\n    MatListModule,\r\n    MatIconModule,\r\n    MatExpansionModule,\r\n    AgGridModule.withComponents([]),\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    AppDialogConfigService,\r\n    PermissionsService,\r\n    MetadataService,\r\n    EntitiesService,\r\n    EntityService,\r\n    PipelinesService,\r\n  ]\r\n})\r\nexport class DevRestModule { }\r\n"],"sourceRoot":"webpack:///"}