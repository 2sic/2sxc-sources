{"version":3,"mappings":"gRASO,MAAMA,EAAiB,cAGvB,IAAMC,EAAb,MAAM,QACJC,YAAoBC,EAA0BC,EAA0BC,GAApDC,YAA0BA,eAA0BA,kBAEhEC,OAAOC,GACb,OAAOF,KAAKD,WAAWI,MAAMN,KAAKI,OAAOC,GAG3CE,oBAAoBC,GAClB,OAAOL,KAAKH,KAAKS,IAAiBN,KAAKC,OAAOP,EAAiB,OAAQ,CACrEa,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYC,cAAeL,KAInEM,qBAAqBC,GACnB,OAAOZ,KAAKH,KAAKS,IAAmBN,KAAKC,OAAOP,EAAiB,QAAS,CACxEa,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYG,WAIpDC,YACE,OAAOb,KAAKH,KAAKS,IAA4BN,KAAKC,OAAOP,EAAiB,UAAW,CACnFa,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,cACnCK,QACDC,KAAIC,GACkCC,OAAOC,KAAKF,GAAQD,IAAII,IAAQ,CAAEjB,KAAMc,EAAOG,GAAMC,MAAOD,OAMtGE,KAAKC,GACH,OAAOtB,KAAKH,KAAK0B,KAAcvB,KAAKC,OAAOP,EAAiB,QAAS4B,EAAa,CAChFf,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,cAIxCgB,OAAOH,GACL,OAAOtB,KAAKH,KAAK4B,OAAgBzB,KAAKC,OAAOP,EAAiB,UAAW,CACvEa,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAAYJ,WAAYiB,EAAYI,cAI5EC,OAAOC,GACL,MAAMC,EAAW,IAAIC,SACrB,UAAWC,KAAQH,EACjBC,EAASG,OAAO,OAAQD,GAE1B,OAAO/B,KAAKH,KAAK0B,KAAuBvB,KAAKC,OAAOP,EAAiB,UAAWmC,EAAU,CACxFtB,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYwB,OAAQjC,KAAKF,QAAQmC,OAAOxB,cAIhFyB,YAAYC,GACV,OAAOnC,KAAKH,KAAK0B,KAAcvB,KAAKC,OAAOP,EAAiB,YAAa,KAAM,CAC7Ea,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAAY0B,oEAtDzCxC,GAAmByC,+DAAnBzC,EAAmB0C,QAAnB1C,EAAmB,YAAnBA,GAAb,yYCXEyC,SACEA,eAAKA,SAAwFA,QAC7FA,cACFA,8BAFOA,sIAKLA,SACEA,SACFA,+BADEA,kGAGFA,SACEA,yEACFA,mCAPFA,eACEA,iCAGAA,SACAA,iCAGAA,iBAAIA,eAAyDA,gBAAIA,QAAIA,cACvEA,8BARiBA,8CAGfA,gHACeA,yFAQjBA,oBAAiEA,iDAASE,mBACxEF,mCACFA,SCZK,IAAMG,GAAb,MAAM,QACJ3C,YACU4C,EAC2BC,GAD3BzC,gBAC2BA,oBAGrC0C,iBACE1C,KAAKyC,aAAaC,gBAAiB,EACnC1C,KAAKwC,SAASG,kEARLJ,GAA+BH,kBAGhCQ,gCAHCL,EAA+BM,4SDT5CT,iBACEA,iCAKAA,wBAUFA,QAEAA,iBACEA,2BAGFA,eArBiBA,+CAKTA,oDAa8BA,wRCVzBG,GAAb,GCaO,MAAMO,EAAY,CACvBC,UAAW,YACXC,SAAU,sECXL,IAAMC,EAAb,MAAM,QAEJrD,YAAoBC,EAA0BE,EAAgCmD,GAA1DlD,YAA0BA,kBAAgCA,iBAE9EmD,YAAYC,GACV,OAAOpD,KAAKH,KAAKS,IAA6B,iCAAiCQ,MAC7EC,OAAIsC,IACF,MAAMC,EAAWtD,KAAKuD,gCAAgCF,EAAIG,SAAUJ,GAC9DK,EAAwBzD,KAAK0D,yBAAyBJ,GACtDK,EAAO3D,KAAK4D,uBAAuBH,EAAsBI,cAAeT,EAAMK,EAAsBK,mBAK1G,MAJyD,CACvDC,KAAMN,EAAsBI,cAC5BF,WAQAJ,gCAAgCQ,EAAiBX,GACvD,MAAMY,EAAc,CAAC,IAAK,KACpBC,EAAkBC,GAAmBA,EAAEC,KAAKC,QAAQ,UAAW,EAAM,EAAI,EAEzEC,EAAqB,GAC3B,UAAWC,KAAOP,EAAM,CACtB,MAAMQ,EAAeP,EAAYI,QAAQE,EAAIE,IAAI,MAC5B,IAAjBD,GAAwBA,IAAiBN,EAAeb,MAEtDmB,IAAiBN,EAAeb,KAClCkB,EAAIE,IAAMF,EAAIE,IAAIC,UAAU,IAE9BJ,EAAQK,KAAKJ,IAGjB,OAAOD,EAGDX,yBAAyBK,GAC/B,MAAMF,EAA2B,GAC3Bc,EAA4B,GAElC,UAAWL,KAAOP,EACqB,OAAfO,EAAIE,IAAI,IAI5BF,EAAIE,IAAMF,EAAIE,IAAIC,UAAU,GAC5BE,EAAeD,KAAKJ,IAHpBT,EAAca,KAAKJ,GAWvB,MAJ+F,CAC7FT,gBACAC,kBAHwB9D,KAAK4E,yBAAyBD,IAQlDC,yBAAyBb,GAC/B,MAAMc,EAA2C,GACjD,UAAWP,KAAOP,OACkBe,IAA9BD,EAAcP,EAAIS,UACpBF,EAAcP,EAAIS,QAAU,IAE9BF,EAAcP,EAAIS,QAAQL,KAAKJ,GAEjC,OAAOO,EAGDjB,uBACNC,EACAmB,EACAlB,GAEA,MAAMH,EAAO3D,KAAKiF,SAASpB,GAG3BF,SAAKuB,QAAUjE,OAAOkE,OAAO,GAAIxB,EAAKuB,QAAS,CAAEE,OAAQ,GAAIC,mBAAoB,KAC7EL,EAAsBM,aACxBtF,KAAKuF,gBACH5B,EAAKuB,QAAQE,OACbJ,EAAsBM,YACtB,UACAN,EACAlB,GAGAkB,EAAsBQ,yBACxBxF,KAAKuF,gBACH5B,EAAKuB,QAAQG,mBACbL,EAAsBQ,wBACtB,uBACAR,EACAlB,GAIAkB,EAAsBS,SACxB9B,EAAK+B,KAAOzE,OAAOkE,OAAO,GAAIxB,EAAK+B,KAAM,CAAEN,OAAQ,GAAIC,mBAAoB,KACvEL,EAAsBW,UACxB3F,KAAKuF,gBACH5B,EAAK+B,KAAKN,OACVJ,EAAsBW,SACtB,SACAX,EACAlB,GAGAkB,EAAsBY,sBACxB5F,KAAKuF,gBACH5B,EAAK+B,KAAKL,mBACVL,EAAsBY,qBACtB,sBACAZ,EACAlB,WAIGH,EAAK+B,KAIVV,EAAsBa,SACxBlC,EAAKmC,IAAIC,UAAY,GACrBpC,EAAKmC,IAAIE,SAAW,GACpBhG,KAAKuF,gBAAgB5B,EAAKmC,IAAIC,UAAW,gBAAiB,gBAAiBf,EAAuBlB,GAClG9D,KAAKuF,gBAAgB5B,EAAKmC,IAAIE,SAAU,eAAgB,eAAgBhB,EAAuBlB,IAG1FH,EAIDsB,SAASlB,GACf,MAAMkC,EAAqB,GAC3B,UAAWC,KAAKnC,EAAM,MACAe,IAAhBmB,EAAKC,EAAE1B,OACTyB,EAAKC,EAAE1B,KAAO,SAEcM,IAA1BmB,EAAKC,EAAE1B,KAAK0B,EAAEnB,UAChBkB,EAAKC,EAAE1B,KAAK0B,EAAEnB,QAAU,IAE1B,MAAMoB,EAA0B,CAC9BhF,IAAK+E,EAAEhG,KACPkG,MAAOpG,KAAKoG,MAAMF,EAAE1B,IAAK0B,EAAEnB,OAAQmB,EAAEhG,MACrCmG,KAAMH,EAAEI,QACRC,KAAML,EAAEK,MAAQvG,KAAKuG,KAAKL,EAAE1B,IAAK0B,EAAEnB,OAAQmB,EAAEhG,MAC7CsG,MAAOxG,KAAKyG,UAAUP,EAAEM,QAGzBP,EAAKC,EAAE1B,KAAK0B,EAAEnB,QAAyBL,KAAKyB,GAE/C,OAAOF,EAGDG,MAAM5B,EAAaO,EAAgBsB,GACzC,MAAMlF,EAAMnB,KAAK0G,WAAWlC,EAAKO,EAAQsB,EAAM,QAE/C,IAAIM,EAAiB3G,KAAKkD,UAAU0D,QAAQzF,GAC5C,OAAIwF,IAAWxF,IACbwF,EAASN,GAEJM,EAGDD,WAAWlC,EAAaO,EAAgBsB,EAAcQ,GAC5D,MAAO,wBAA+BrC,EAAM,IAAMO,EAAS,IAAMsB,EAAOQ,EAGlEN,KAAK/B,EAAaO,EAAgBsB,GACxC,MAAMlF,EAAMnB,KAAK0G,WAAWlC,EAAKO,EAAQsB,EAAM,SAE/C,IAAIM,EAAiB3G,KAAKkD,UAAU0D,QAAQzF,GAC5C,OAAIwF,IAAWxF,IACbwF,EAAS,IAEJA,EAGDF,UAAUK,GAChB,IAAKA,EAAe,OAAO,KAE3B,MAAMN,EAA0B,GAC1BO,EAAQD,EAAYE,MAAM,MAChC,UAAWC,KAAKF,EAAO,CACrB,MAAMG,EAAOD,EAAED,MAAM,KACrB,GAAoB,IAAhBE,EAAKC,OAAc,CACrB,MAAMC,EAAuB,CAC3BlH,KAAMgH,EAAK,GAAGG,OACdC,IAAKJ,EAAK,GAAGG,OAAS,IAAMH,EAAK,GAAGG,QAEtCb,EAAM9B,KAAK0C,IAGf,OAAqB,IAAjBZ,EAAMW,OAAuB,KAC1BX,EAIDjB,gBACNgC,EACAC,EACAC,EACAzC,EACAlB,GAEA9D,KAAK0H,UAAU1C,EAAsB2C,MAAOH,GAAMI,UAAUC,IAE1D,UAAWC,KAASD,EAAQ,CAC1B,MAAME,EAAYD,EAAMpG,WACxB6F,EAAOQ,GAAa,CAClB5G,IAAK4G,EACL3B,MAAO2B,EACP1B,KAAMrG,KAAKgI,iBAAiBP,EAAQM,EAAW/C,GAC/CuB,KAAMuB,EAAMG,SAASC,OAAOC,OAAS,KAAOL,EAAM3D,KAAKiE,cAAgB,MAGzE,MAAMC,GAAeC,QAAUf,EAAOQ,IACtC/H,KAAKuI,eAAehB,EAAQE,EAAQM,EAAWD,EAAMU,UAAWH,EAAcvE,GAGhF,GAAI+D,EAAOV,OAAQ,CACjB,MAAMsB,EAAM,CAAC,WAAY,cAAe,aAAc,aAAc,cAAe,YAEnF,QAASC,EAAI,EAAGA,EAAID,EAAItB,OAAQuB,IAC9BnB,EAAOkB,EAAIC,IAAM,CACfvH,IAAKsH,EAAIC,GACTtC,MAAOqC,EAAIC,GACXrC,KAAMrG,KAAKgI,iBAAiBP,EAAQgB,EAAIC,GAAI1D,GAC5CuB,KAAMvG,KAAKkD,UAAU0D,QAAQ,uCAAyC6B,EAAIC,GAAK,aAOjFV,iBAAiBW,EAAaC,EAAa5D,GACjD,OAAQA,EAAsBb,KAAKC,QAAQ,UAAW,EAClD,IAAMuE,EAAM,IAAMC,EAClB,IAAMD,EAAIE,QAAQ,IAAK,KAAO,IAAMD,EAAM,IAGxClB,UAAUlH,EAAeH,GAC/B,OAAOL,KAAKH,KAAKS,IAAaN,KAAKD,WAAWI,MAAMN,KAAKI,OAAO6I,OAAkB,CAChFvI,OAAQ,CAAEiB,MAAOhB,EAAMC,WAAYJ,gBAClCS,MACDC,OAAI8G,IACFA,EAASA,EAAOkB,OAAOjB,GAASA,EAAM3D,OAAS6E,YAC/C,UAAWC,KAAOpB,EAAQ,CACxB,IAAKoB,EAAIhB,SAAY,SACrB,MAAMiB,EAAKD,EAAIhB,SAETkB,EAASD,EAAGD,EAAI9E,MAChBiF,EAAUF,EAAGD,EAAIT,WACvBU,EAAGhB,OAAMjH,6CAHKiI,EAAGG,KAGUF,GAAWC,GAExC,OAAOvB,KAKLU,eACNhB,EACAE,EACAM,EACAuB,EACAjB,EACAvE,GAEA,IAAIyF,EAAiBzF,EAAkBwF,GACvC,GAAIA,EAAUlF,QAAQ,KAAM,CAC1B,MAAMoF,EAAYF,EAAU7E,UAAU,EAAG6E,EAAUlF,QAAQ,MAC3D,GAAIoF,EAAW,CACb,MAAMC,EAAY3F,EAAkB0F,GAChCC,IACFF,EAAiBA,EAAiBA,EAAeG,OAAOD,GAAaA,IAI3E,IAAKF,EAAkB,YAEQzE,IAA3ByC,EAAOQ,GAAW4B,OACpBpC,EAAOQ,GAAW4B,KAAO,IAE3B,MAAMC,EAAarC,EAAOQ,GAAW4B,KAErC,QAASE,EAAI,EAAGA,EAAIN,EAAepC,OAAQ0C,IACzC,IACED,EAAW7B,EAAY,IAAMwB,EAAeM,GAAG3J,MAAQe,OAAOkE,OAAO,GAAIkD,EAAc,CACrFlH,IAAK4G,EAAY,MAAQwB,EAAeM,GAAG3J,KAC3CkG,MAAOmD,EAAeM,GAAG3J,KACzBmG,KAAMrG,KAAK8J,uBAAuBP,EAAeM,GAAGvD,QAASmB,EAAQM,GACrEgC,UAAU,cAMVD,uBAAuBzD,EAAc2D,EAAiBC,GAC5D5D,OAAOA,EACJwC,QAAQ,0BAA2B,KAAOmB,EAAU,MACpDnB,QAAQ,2BAA4B,KAAOoB,EAAY,oDA9SjDhH,GAAeb,kEAAfa,EAAeZ,QAAfY,EAAe,YAAfA,GAAb,+CCaA,WAAuBiH,GACrB,IAAKA,EAAa,MAAO,GAEzB,MAAMjE,EAAmB,GACzB,UAAWkE,KAAYD,EAAW,CAChC,IAAIE,EAAqBnE,EACzB,MAAMoE,EAAQF,EAASG,KAAKtD,MAAM,KAC5BuD,EAAOF,EAAMA,EAAMlD,OAAS,GAClC,IAAIqD,EAAe,GACnB,QAAS9B,EAAI,EAAGA,EAAI2B,EAAMlD,OAAQuB,IAAK,CACrC,MAAM+B,EAAOJ,EAAM3B,GACnB8B,GAAgB9B,EAAI,IAAI+B,IAASA,EACjC,MAAMC,EAAWN,EAAOO,KAAKC,GAAQA,EAAK1K,OAASuK,GACnD,GAAIC,EACFN,EAASM,EAASG,aACb,CACL,MAAMD,EAAI3J,eACR6J,MAAOpC,EACPxI,KAAMuK,EACND,eACAO,SAAUZ,EAASa,OACnBC,SAAUR,IAASF,GACfE,IAASF,GAAQ,CAAEM,SAAU,KAEnCT,EAAO1F,KAAKkG,GACZR,EAASQ,EAAKC,WAKpB,OAAO5E,gBCnDF,IAAMiF,GAAb,MAAM,QAEJC,UAAUC,GACR,OAAa,MAATA,GAEJA,EAAMC,KAAK,CAACC,EAAOC,IACbD,EAAML,SAAWM,EAAMN,SAClB,EACEK,EAAML,SAAWM,EAAMN,UACzB,EAEA,GAGJG,gDAdEF,gDAAaM,UAAbN,GAAb,GCDaO,GAAb,MAAM,QAEJ7L,YAAoB8L,oBAEpBP,UAAUL,EAAeG,GACvB,IAAIU,EACJ,OACEA,EADEV,EACgB,EAARH,EAEW,IAAVA,EAAe,EAAa,EAARA,EAAY,GAEtC9K,KAAK0L,UAAUE,yBAAyB,iBAAiBD,sDAXvDF,GAAgBrJ,8DAAhBqJ,EAAgBD,UAAhBC,GAAb,yBCAMrJ,wEADFA,SACEA,iCACFA,2DADiBA,qCAAgC,0HAK/CA,iBAEEA,8DAASyJ,EAATC,MAASD,kEACTzJ,SACFA,+CAJyCA,qCACvCA,oEAAoE,gBAEpEA,sDAoBIA,mCADFA,SACEA,iCACFA,4DADiBA,qCAAgC,oEAFnDA,SACEA,sDAGFA,oCAHkCA,4IAhBpCA,eAA2B,WAEgCA,8DAAS2J,EAATD,MAASC,gEAChE3J,kBAAkE,cAE9DA,SACFA,QACAA,gBAAMA,SAAeA,UAEvBA,kBACEA,8DAAS4J,EAATF,MAASE,qCACT5J,oBAAUA,gBAAGA,YAIjBA,kCAKFA,+CAlBIA,gDAD+BA,wCAENA,+BAErBA,4GAEIA,uBAQKA,yFArBjBA,yBAMAA,+CANmBA,0BAMbA,mCCDL,IAAM6J,GAAb,MAAM,QASJrM,cANUI,cAAkC,IAAIkM,MACtClM,oBAAqD,IAAIkM,MAEnElM,qBAA4B,GAC5BA,wBAA+B,GAI/BmM,YAAYC,SAIV,GAHyB,MAArBA,EAAQlC,YACVlK,KAAKiG,KJvBL,YAAiCiE,GAmBrC,MAlByB,CACvB,CACEY,OAAO,EACP5K,KAAM,YACNsK,aKTuB,GLUvBO,UAAU,EACVE,UAAU,EACVJ,SAAUwB,EAAcnC,EAAUnB,OAAOuD,IAAMA,EAAEtB,UAEnD,CACEF,OAAO,EACP5K,KAAM,mBACNsK,aKjBuB,GLkBvBO,UAAU,EACVE,UAAU,EACVJ,SAAUwB,EAAcnC,EAAUnB,OAAOuD,GAAKA,EAAEtB,WIOpCuB,CAAuBvM,KAAKkK,YAEtB,MAAhBkC,EAAQhJ,KAAc,CACxB,MAAMoJ,EAAuC,QAAZC,IAAQrJ,YAAIsJ,eAAEC,cAC3CH,GACFxM,KAAK4M,WAAWJ,EAAaK,SAAUL,EAAaM,UAElD9M,KAAKoD,MACPpD,KAAK+M,eAAe/M,KAAKoD,KAAKyJ,SAAU7M,KAAKoD,KAAK0J,WAKxDE,UAAUvC,EAAcM,GAEtB,OADqBA,EAAW/K,KAAKiN,mBAAqBjN,KAAKkN,iBAC3CC,SAAS1C,GAG/B2C,aAAa3C,EAAcM,GAEzB/K,KAAKqN,SAASC,KADW,CAAEnM,IAAKsJ,EAAM8C,OAAQxC,IAIhD6B,WAAWnC,EAAcM,GAEvByC,mBAA6B/C,EADRM,EAAW/K,KAAKiN,mBAAqBjN,KAAKkN,iBAIjEO,QAAQC,EAAiB3C,GAEvB/K,KAAK2N,eAAeL,KADiB,CAAEI,SAAQ3C,aAIzCgC,eAAehL,EAAcgJ,GACnC,GAAY,MAARhJ,EAAgB,OACpB,MAAM6L,EAAe7C,EAAW/K,KAAKiN,mBAAqBjN,KAAKkN,gBAC/D,GAAIU,EAAaT,SAASpL,GAAS,OAEnC,MAAMsI,EAAQ,CCjEW,MDiEQtI,EAAKiF,MAAM,MAC5C,IAAIwD,EAAe,GACnB,UAAWC,KAAQJ,EACjBG,EAAgBA,EAAsB,GAAGA,KAAgBC,IAA1BA,GAC3BmD,EAAaT,SAAS3C,IAC1BxK,KAAK4M,WAAWpC,EAAcO,iDAxDvBkB,8BAAsBpJ,yzBDdnCT,iBAA0E,SAGtEA,sDAIAA,2CA+BFA,QAEAA,iBAAmC,cACWA,gCAASyL,cACnDzL,oBAAUA,eAAGA,qBAvCgBA,42CCWtB6J,GAAb,GEXa6B,GAAb,MAAM,QACJ3C,UAAUxC,GACR,GAAW,MAAPA,EAEJ,OAAIoF,MAAMC,QAAQrF,GAAeA,EAE1B1H,OAAOgN,OAAOtF,iDANZmF,oDAAiBtC,UAAjBsC,GAAb,2DC4Bc1L,uBAAsEA,mEAAS8L,EAATpC,OAASoC,oBAC7E9L,SACFA,qDADEA,2GAUFA,eAAwC,UACDA,SAAeA,oCAAjDA,mCAAkCA,kDAHzCA,kBACEA,sCACAA,wBAGFA,wCAJoBA,oDACIA,6DAqBlBA,eAAqC,UACEA,SAAeA,oCAAjDA,mCAAkCA,kDAHzCA,kBACEA,sCACAA,wBAGFA,wCAJoBA,oDACIA,4EAf1BA,eAAyD,UAAzDA,CAAyD,YAInDA,2DAAS+L,EAATrC,OAASqC,qBACT/L,SACFA,QACAA,uBACEA,2DAASgM,EAATtC,OAASsC,oBACThM,kBACFA,UAGFA,yBAOFA,+CAjB0CA,+BAEpCA,gCAQyCA,iFAdjDA,SACEA,iDAqBFA,wCArBwBA,sFAxB1BA,iBAA4E,UAA5EA,CAA4E,WAItEA,2DAASiM,EAATvC,OAASuC,qBACTjM,SACFA,QACAA,6BAGAA,uBACEA,2DAASkM,EAATxC,OAASwC,oBACTlM,kBACFA,UAGFA,yBAOAA,iCAwBFA,+CA5CgCA,+BAE1BA,gCAESA,8BAScA,sDAOZA,iFAxBnBA,SACEA,iDAgDFA,wCAhD2CA,uFAZ7CA,eAAqD,WAIjDA,2DAASmM,EAATzC,OAASyC,2CACTnM,oBACEA,SACFA,QACAA,gBAAMA,8BAAqFA,UAG7FA,iCAmDFA,mEA3DIA,mFAGEA,sGAEIA,4EAGOA,mFAZnBA,SACEA,4CA+DFA,wCA/D0BA,uFAX5BA,eAAiD,WAGxBA,2DAASoM,EAAT1C,MAAS0C,4CAC9BpM,oBACEA,SACFA,QACAA,gBAAMA,8BAAkEA,UAG1EA,iCAkEFA,8CA1E0CA,yEAGpCA,uGAEIA,kEAGOA,0DCFZ,IAAMqM,GAAb,MAAM,QAQJ7O,cANUI,mBAAsC,IAAIkM,MACpDlM,qBAA4B,GAC5BA,oBAA2B,GAC3BA,kBAAyB,GACzBA,kBAAyB,GAIzB0O,WAAWC,GACT3O,KAAK4O,cAActB,KAAKqB,GAG1BE,cAAc1N,GACZqM,mBAA6BrM,EAAKnB,KAAK8O,iBAGzCC,aAAa5N,GACXqM,mBAA6BrM,EAAKnB,KAAKgP,gBAGzCC,WAAW9N,GACTqM,mBAA6BrM,EAAKnB,KAAKkP,cAGzCC,WAAWhO,GACTqM,mBAA6BrM,EAAKnB,KAAKoP,4DA3B9BX,8BAAqB5L,q/BDTlCT,iBACEA,4CA6EFA,eA7E2BA,8hDCQdqM,GAAb,yCCmBUrM,uBAAyDA,iBAAKA,gCAI9DA,uBACEA,oBACFA,+BACAA,mIAbJA,kBAIGA,2DAASiN,EAATvD,OAASuD,sBACVjN,kBACEA,8BACAA,mBAAwBA,SAAeA,UAEzCA,kBACEA,8BAGAA,iCAEAA,uBACEA,2DAASkN,EAATxD,OAASwD,yBACTlN,mBACFA,wCAlB2CA,iEAKZA,gCACAA,wCACPA,wBAGbA,oCAGGA,8DAdpBA,kBACEA,2BAqBFA,mCArBmCA,2EAsBnCA,gCACEA,sEAAgBmN,EAAhBzD,MAAgByD,2BAElBnN,+CAHqCA,kCAA+B,oBAA/BA,CAA+B,0BAA/BA,CAA+B,0BAA/BA,CAA+B,0DAMtEA,qBAA4FA,kDAASoN,SACnGpN,oBAAUA,gBAAIA,gIAnDlBA,iBACwC,UADxCA,CACwC,WAGlCA,yDAAS4J,0CACT5J,oBAAUA,qBAASA,UAErBA,iBACEA,yDAASqN,yCACTrN,oBAAUA,gBAAIA,YAIlBA,gCACEA,qDAAYsN,aAAZtN,CAA6B,qDAAmB+L,oBAClD/L,QACAA,+BACEA,0DAAiBuN,mBACnBvN,QAEAA,kBACEA,yBAuBAA,uCAIFA,QAEAA,6BAGFA,yCArDwCA,kEAGhBA,gFAIAA,+EAMFA,kEAAiD,cAAjDA,CAAiD,yBAGlDA,iEAAgD,6BAKfA,uCAuB9BA,8BAM+CA,qCC9CvE,MAAMwN,GAAiB,CACrB,CAAEnF,KAAM,GAAIoF,UCuBd,MAAM,QAmBJjQ,YACUE,EACAgQ,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,SARArQ,eACAA,aACAA,gBACAA,qBACAA,uBACAA,YACAA,oBACAA,cACAA,wBAzBVA,eAAY8C,EACZ9C,oBAAiC8C,YACjC9C,mBAAoE,CAClEsQ,MAAO,YACPC,QAAS,EACTC,sBAAsB,GAsBtBxQ,KAAKF,QAAQ2Q,KAAKzQ,KAAK8P,OACvB,MAAMY,EAA0BC,KAAKC,MAAMC,eAAeC,QAAQC,OAC5DhG,EAAyD,QAA9CiG,EAAwC,SAAxCH,eAAeC,QAAQG,aAAuBvE,SAC/DgE,EAAUQ,QAAQC,UAEZA,EAAS7G,KAAK8G,WAAW,OAC3BD,EAAS7G,KAAO6G,EAAS7G,KAAK7F,UAAU,IAEzB,QAAjB4M,IAASvE,gBAAQJ,QAAjB4E,EAASxE,SAAa/B,KAExB/K,KAAKuR,SAAWb,EAGlBc,WACExR,KAAKyR,aAAe,IAAIC,KACxB1R,KAAK2R,WAAa,IAAIC,IAA6B,IACnD,MAAMC,EAAe7R,KAAKuR,SAASxQ,IAAI6J,YAErC,MADyB,CAAEzJ,IAA8B,QAAzB2Q,EAAa,QAAbpJ,IAAKqJ,gBAAQrF,eAAEjM,kBAAUuR,QAAIpH,EAAKN,KAAMiD,OAAQ3C,EAAKkC,YAGvF9M,KAAKiS,YAAc,IAAIL,IAAyBC,EAAa,IAC7D7R,KAAKkS,WAAa,IAAIN,IAA2BC,GACjD7R,KAAKmS,WAAa,IAAIP,IAA4B,IAElD5R,KAAKoS,kBAELpS,KAAKgQ,cAAcqC,SAASzK,UAAUsC,IACpClK,KAAK2R,WAAWW,KAAKpI,KAGvBlK,KAAKyR,aAAac,KAChBC,OAAc,CAACxS,KAAK2R,WAAY3R,KAAKkS,aAAatK,UAAU,EAAEsC,EAAWuI,MACvE,GAAyB,IAArBvI,EAAU/C,OAAgB,OAE9B,IAAIuL,EAAY1S,KAAKmS,WAAW/Q,MAChC,MAAMuR,EAAYF,EAAU1J,OAAO6J,IAAYF,EAAUG,KAAK3O,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,KACjF,IAArBD,EAAUxL,YAEd2L,KACEH,EAAU5R,IAAI6R,IAEZ,MAAMG,EAAwB,CAC5BH,WAEFF,EAAY,IAAIA,EAAWK,GAE3B,MAAMC,EAAQhT,KAAKgQ,cAAc1P,IAAIsS,EAAQzR,IAAKyR,EAAQrF,OAAQvN,KAAKuR,UAAUzQ,MAAKmS,UAChFC,EAAYF,EAAMlS,MAAKqS,QAAU/P,GAAQpD,KAAKiQ,gBAAgB9M,YAAYC,KAChF,SAAO0P,KAAS,EAACM,SAAGR,GAAUI,EAAOE,OAEvCtL,UAAUyL,IACV,IAAIC,EAAatT,KAAKmS,WAAW/Q,MAEjCiS,EAAQnC,QAAQ,EAAE0B,EAASxP,EAAMI,MAC/B,MAAM+P,EAAgBD,EAAWE,UAAUtP,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,IACvF,GAAIW,EAAgB,EAAK,OAEzB,MAAMR,EAAwB,CAC5BH,UACAxP,OACAqQ,eAAgBjQ,EAASG,KACzB+P,aAAclQ,EAASO,KACvB4P,UAAWvQ,EAAKwQ,MAElBN,EAAa,IAAIA,EAAWO,MAAM,EAAGN,GAAgBR,KAAgBO,EAAWO,MAAMN,EAAgB,IACtGvT,KAAK8T,2BAA2BlB,EAASxP,EAAM8G,KAGjDlK,KAAKmS,WAAWG,KAAKgB,KAGvBtT,KAAKmS,WAAWG,KAAKI,OAIzB1S,KAAKyR,aAAac,KAChBC,OAAc,CAACxS,KAAKiS,YAAajS,KAAKmS,aAAavK,UAAU,EAAEmM,EAAYrB,YACzE,MAAMsB,EAAStB,EAAU/H,KAAKzG,GAAKsJ,kBAA4BtJ,EAAE0O,QAASmB,IACpEE,EAAe,cACfC,EAAqB,MAAVF,EAAiBC,EAAe,GAAc,QAAXnC,IAAO1O,YAAIsJ,eAAEG,cAAcoH,IAE3EC,IADalU,KAAKmQ,aAAagE,YAEjCnU,KAAKmQ,aAAaiE,SAASF,MAKjClU,KAAKqU,iBAAgB7B,KAAc,CAACxS,KAAK2R,WAAY3R,KAAKiS,YAAajS,KAAKkS,WAAYlS,KAAKmS,aAAarR,QACxGC,KAAI,EAAEmJ,EAAW6J,EAAYtB,EAAWC,MACtC,MAAM4B,EAAO7B,EAAU1R,IAAI6R,cACzB,MAAM2B,EAAW7B,EAAU/H,KAAKzG,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,IAQ5E,MAPmB,CACjBA,UACAxM,MAA+B,QAAxBoO,EAAc,QAAdxD,EAAQ,MAARM,OAAQ,EAARA,EAAUlO,YAAIsJ,eAAEG,gBAAQmF,QAAIY,EAAQzR,IAC3CsT,SAAUjH,kBAA4BoF,EAASmB,GAC/CW,YAA0B,QAAdC,EAAQ,MAARrD,OAAQ,EAARA,EAAUlO,YAAIwR,eAAEhB,SAAiB,MAARW,OAAQ,EAARjD,EAAUqC,WAC/CkB,UAA6B,OAAV,MAARvD,OAAQ,EAARA,EAAUlO,SAInB0R,EAAiBpC,EAAU/H,KAAKzG,GAAKsJ,kBAA4BtJ,EAAE0O,QAASmB,IAWlF,MAT6C,CAC3CA,aACAO,OACA1B,QAAuB,MAAdkC,OAAc,EAAdC,EAAgBnC,QACzBxP,KAAoB,MAAd0R,OAAc,EAAdC,EAAgB3R,KACtB8G,YACAuJ,eAA8B,MAAdqB,OAAc,EAAdC,EAAgBtB,eAChCC,aAA4B,MAAdoB,OAAc,EAAdC,EAAgBrB,iBAOtCsB,cACEhV,KAAK2R,WAAWsD,WAChBjV,KAAKiS,YAAYgD,WACjBjV,KAAKkS,WAAW+C,WAChBjV,KAAKmS,WAAW8C,WAChBjV,KAAKyR,aAAayD,cAGpBC,eAAeC,GACbpV,KAAKqV,eAAkBrV,KAAKqV,iBAAmBD,EAAYA,EAAW,KAGxEzH,eAAepN,SACb,GAAuB,MAAnBA,EAAOwK,SAWT,YAV8B/K,KAAKoQ,OAAOkF,KAAKC,KAA6B,CAC1EC,WAAW,EACXnF,iBAAkBrQ,KAAKqQ,iBACvBoF,MAAO,UAEaC,cAAc9N,UAAWmD,IAC7B,MAAZA,IACJxK,EAAOwK,SAAWA,EAClB/K,KAAK2N,eAAepN,MAKxB,MAAMoV,EAA6C,CACjDjI,OAAQnN,EAAOmN,OACfkI,OAAQrV,EAAOwK,SACf8K,QAA2B,QAAlBtV,EAAOmN,SAAiC,QAAbjB,IAAOiB,cAAMhB,eAAE0E,WAAW,SAAU,WAAQtM,GAEtD9E,KAAKoQ,OAAOkF,KAAKQ,KAA2B,CACtEN,WAAW,EACXO,KAAMJ,EACNtF,iBAAkBrQ,KAAKqQ,iBACvBoF,MAAO,UAGWC,cAAc9N,UAAWjB,KACtCA,GAEL3G,KAAKgQ,cAAcgG,OAAOrP,EAAOzG,KAAMK,EAAOwK,SAAUpE,EAAOsP,aAAarO,UAAU,KACpF5H,KAAKgQ,cAAcqC,SAASzK,UAAUhG,IACpC5B,KAAK2R,WAAWW,KAAK1Q,SAM7BgN,cAAcD,SACQ,QAApBlC,OAAKyJ,uBAAexJ,SAAEkC,cAAcD,GAGtCwH,YAAYC,EAAcxD,GACxB,IAAIF,EAAY1S,KAAKmS,WAAW/Q,MAChC,MAAMmS,EAAgBb,EAAUc,UAAUtP,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,IAChFyD,EAAmB3D,EAAUa,GAC7BR,EAAW9R,+BACZoV,GAAgB,CACnBjT,KAAInC,+BACCoV,EAAiBjT,MAAI,CACxBwQ,KAAMwC,MAGV1D,EAAY,IAAIA,EAAUmB,MAAM,EAAGN,GAAgBR,KAAgBL,EAAUmB,MAAMN,EAAgB,IACnGvT,KAAKmS,WAAWG,KAAKI,GAGvBrF,SAASuF,WAEPA,EAEU,QAFAlK,EAET,QAFS+D,OAAK0F,WAAW/Q,MAAMuJ,KAC9BzG,IAAI,QAAC,OAACsJ,kBAA4BtJ,EAAE0O,QAASA,KAAkB,QAANmC,IAAE3R,YAAIsJ,eAAEG,YAAa+F,EAAQzR,MAAa,QAANmV,IAAElT,YAAI4O,eAAElF,YAAa8F,EAAQrF,gBAC3Hb,eAAEkG,eAAOZ,QAAIY,EAGTpF,kBADiBxN,KAAKiS,YAAY7Q,MACSwR,IAC9C5S,KAAKiS,YAAYK,KAAKM,GAExB,MAAM2D,EAAevW,KAAKkS,WAAW9Q,MACrC,IAAKmV,EAAa1D,KAAK3O,GAAKsJ,kBAA4BtJ,EAAG0O,IAAW,CACpE,MAAM4D,EAAe,IAAID,EAAc3D,GACvC5S,KAAKkS,WAAWI,KAAKkE,IAIzBC,YAAY7D,SACV,MAAM2D,EAAevW,KAAKkS,WAAW9Q,MAC/BoV,EAAeD,EAAaxN,OAAO5H,IAAQqM,kBAA4BrM,EAAKyR,IAE5E8D,EAAgB1W,KAAKiS,YAAY7Q,MACvC,GAAIoM,kBAA4BkJ,EAAe9D,GAAU,CACvD,MAAM+D,EAA4G,QAA5FlK,IAAa8J,EAAa/C,UAAUtP,GAAKsJ,kBAA4BtJ,EAAGwS,IAAkB,UAAEhK,QAAI8J,EAAa,GACnIxW,KAAKiS,YAAYK,KAAKqE,GAGxB3W,KAAKkS,WAAWI,KAAKkE,GAGvBnV,KAAKuR,GACI,MAAPA,MAAY5S,KAAKiS,YAAY7Q,OAC7B,MAAMmT,EAAWvU,KAAKmS,WAAW/Q,MAAMuJ,KAAKzG,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,IACxF,GAAsB,OAAV,MAARnG,OAAQ,EAARA,EAAUrJ,MAAgB,OAE9BpD,KAAK+P,SAASuF,KAAK,aACnB,MAAMsB,EAAarC,EAASnR,KAAKwQ,KACjC5T,KAAKgQ,cAAc3O,KAAKuR,EAAQzR,IAAKyR,EAAQrF,OAAQgH,EAASnR,KAAMpD,KAAKuR,UAAU3J,UAAU,CAC3F0K,KAAMjP,IACJ,IAAKA,EAEH,YADArD,KAAK+P,SAASuF,KAAK,SAAU,KAAM,CAAEuB,SAAU,MAIjD,IAAIC,EAAe,IAAI9W,KAAKmS,WAAW/Q,OACvC,MAAMmS,EAAgBuD,EAAatD,UAAUtP,GAAKsJ,kBAA4BtJ,EAAE0O,QAASA,IACzF,GAAIW,EAAgB,EAAK,OAEzB,MACMR,EAAW9R,+BADQ6V,EAAavD,IAEjB,CACnBI,UAAWiD,IAEbE,EAAe,IAAIA,EAAajD,MAAM,EAAGN,GAAgBR,KAAgB+D,EAAajD,MAAMN,EAAgB,IAC5GvT,KAAKmS,WAAWG,KAAKwE,GACrB9W,KAAK+P,SAASuF,KAAK,QAAS,KAAM,CAAEuB,SAAU,OAEhDE,MAAO,KACL/W,KAAK+P,SAASuF,KAAK,SAAU,KAAM,CAAEuB,SAAU,SAM7C/C,2BAA2BlB,EAAkBxP,EAAkBxB,SACrE,MAAMoV,EAAc5T,EAAKyJ,SACnBoK,EAAgBD,EAAY5S,QAAQ,MAAO,EAAK4S,EAAYE,YAAY,KAAO,EAAI,EACnFC,EAAkC,IAAlBF,EAAsB,GAAKD,EAAYvS,UAAU,EAAGwS,GACpEG,EAAWJ,EAAYvS,UAAUwS,GAEjCI,EAAWnX,EADKuE,UAAU,EAAG2S,EAASjQ,OAAS/D,EAAKkU,UAAUnQ,QAC5C,QAAU/D,EAAKkU,UAEjCC,EAAW3V,EAAM+I,KAAK5I,GAAQA,EAAKuI,OAAS6M,EAAgBE,GAAYtV,EAAKiJ,SAAW5H,EAAK0J,UAC7F0K,EAAgB5V,EAAMmH,OAAOhH,GAAQA,EAAKuI,KAAKmN,SAASL,IAAarV,EAAKiJ,SAAW5H,EAAK0J,UAAU3F,OAAS,EAEnH,GAAIoQ,GAAYC,EAAe,CAC7B,MAAM/U,EAAmD,CACvDiV,SAAUN,EACVG,SAAkB,MAARA,OAAQ,EAAR/C,EAAUlK,KACpBqN,QACgH,QADvG7F,OAAKP,SACX5G,KAAKjC,IAAI,MAAC,OAAU,QAAVkP,IAAE7F,gBAAQrF,eAAEjM,cAAemS,EAAQzR,KAAOuH,EAAEoE,WAAa1J,EAAK0J,UAAYpE,EAAE4B,OAASlH,EAAKyJ,kBAASH,eAAEmL,QAClHL,gBACA9U,gBAAgB,GAEZoV,EAAc9X,KAAK+P,SAASgI,kBAAkBxV,GAAiC,CACnFwT,KAAMtT,EACNoU,SAAU,MAGZiB,EAAYE,WAAWpQ,UAAU,KAC1BkQ,EAAYG,kBAAkBC,eAAenC,KAA4CrT,gBAE5F1C,KAAKqN,SADwB,CAAElM,IAAa,MAARoW,OAAQ,EAAR/C,EAAUlK,KAAMiD,OAAgB,MAARgK,OAAQ,EAAR/C,EAAUxJ,YAOtEoH,kBACNpS,KAAKkQ,KAAKiI,kBAAkB,KAC1BnY,KAAKyR,aAAac,KAChB6F,OAA6BC,OAAQ,gBAAgBzQ,UAAU0Q,KAC3CtY,KAAKmS,WAAW/Q,MAAMyR,KAAK3O,GAAe,MAAVA,EAAEd,MAAgBc,EAAEd,KAAKwQ,OAAS1P,EAAEyP,aAEtF2E,EAAMC,iBACND,EAAME,YAAc,OAGxBxY,KAAKyR,aAAac,KAChB6F,OAAyBC,OAAQ,WAAWzQ,UAAU0Q,IACnB,KAAlBA,EAAMG,WAAmBC,UAAUC,SAASC,MAAM,OAASN,EAAMO,QAAUP,EAAMQ,WAEhGR,EAAMC,iBACNvY,KAAKkQ,KAAK6I,IAAI,KAAQ/Y,KAAKqB,6DAxUxB2X,GAAmB5W,mIAAnB4W,EAAmBnW,qEACnBoW,IAAqB,g/CF7BlC7W,iDACGA,0+FE2BU4W,GAAb,KDhBO,IAAME,GAAb,MAAM,sDAAOA,4DAHF,CAACC,cAAsBvJ,KACtBuJ,QAECD,GAAb,GEmBM,YAAqCrZ,GACzC,OAAO,IAAIuZ,IAAiCvZ,EAAM,sBAAuB,OAAOwY,OAAOgB,cAkClF,IAAMC,GAAb,MAAM,sDAAOA,6DAPA,CACTC,IACAC,IACAvW,EACAwW,MACDC,SAnBQ,CACPR,GACAS,IACAC,KACAC,KACAC,KACAC,KACAC,KACAC,KACAC,iBAAyBC,KAA4BC,KACrDC,IACAC,KACAC,SASSjB,GAAb,4GCvDO,MAAMkB,EAAmB,eACnB1R,EAAkB0R,EAAmB,MAG3C,IAAMC,EAAb,MAAM,QACJ7a,YAAoBC,EAA0BC,EAA0BC,GAApDC,YAA0BA,eAA0BA,kBAEhEC,OAAOC,GACb,OAAOF,KAAKD,WAAWI,MAAMN,KAAKI,OAAOC,GAG3Cwa,mBACE,OAAO1a,KAAKH,KAAKS,IAAcN,KAAKC,OAAOua,EAAmB,aAAc,CAC1Eja,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,cAIxCka,oBACE,OAAO3a,KAAKH,KACTS,IAAiBN,KAAKC,OAAOua,EAAmB,cAAe,CAAEja,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,cACrGK,MACCC,OAAI6Z,GACuBA,EAAa7Z,IAAI8Z,IACH,CACnCC,SAAUD,EAAO1W,KAAKM,UAAU,EAAGoW,EAAO1W,KAAKC,QAAQ,MACvDkF,UAAWuR,EAAO1W,KAClBiC,MAAOyU,EAAOE,MACdC,YAAaH,EAAOI,YACpBC,UAAWL,EAAOM,UAClBC,WAAYP,EAAOQ,WACnBC,cAAeT,EAAOU,cACtBC,gBAAiBX,EAAOY,gBACxBC,KAAMb,EAAOM,UAAY,OAASN,EAAOU,cAAgB,gBAAkB,UASvFI,mBACE,OAAO3b,KAAKH,KAAKS,IAAmBN,KAAKC,OAAOua,EAAmB,kBAGrE9S,UAAUkU,GACR,OAAO5b,KAAKH,KACTS,IAAaN,KAAKC,OAAO6I,GAAkB,CAC1CvI,OAAQ,CAAEiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAAYJ,WAAYub,KAE7D9a,MACCC,OAAI8G,IACF,GAAIA,EACF,UAAWoB,KAAOpB,EAAQ,CACxB,IAAKoB,EAAIhB,SAAY,SACrB,MAAMiB,EAAKD,EAAIhB,SAETkB,EAASD,EAAGD,EAAI9E,MAChBiF,EAAUF,EAAGD,EAAIT,WACvBU,EAAGhB,OAAMjH,6CAHKiI,EAAGG,KAGUF,GAAWC,GAG1C,OAAOvB,KAKfgU,QAAQC,EAAmBxa,GACzB,OAAOtB,KAAKH,KAAK0B,KAAcvB,KAAKC,OAAOua,EAAmB,QAAS,KAAM,CAC3Eja,OAAQ,CACNiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAC1BC,cAAeY,EAAYya,GAAGtb,WAC9Bub,MAAOrL,KAAKsL,UAAUH,MAK5B1H,SAASxJ,EAAatJ,GACpB,OAAOtB,KAAKH,KAAK0B,KAAWvB,KAAKC,OAAOP,IAAiB,YAAa,KAAM,CAC1Ea,OAAQ,CACNiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAC1BC,cAAeY,EAAYya,GAAGtb,WAC9Byb,YAAatR,EAAKmR,GAAGtb,cAK3B0b,OAAOC,EAAiB1b,EAAuB2b,GAC7C,OAAOrc,KAAKH,KAAK0B,KAAWvB,KAAKC,OAAOua,EAAmB,UAAW,KAAM,CAC1Eja,OAAQ,CACNiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAC1BC,cAAeA,EAAcD,WAC7Byb,YAAaE,EAAQ3b,WACrB4b,aAKN5a,OAAOmJ,EAAatJ,GAClB,GAAIsJ,EAAK0R,QACP,MAAM,IAAIC,MAAM,sBAGlB,OAAOvc,KAAKH,KAAK4B,OAAgBzB,KAAKC,OAAOua,EAAmB,UAAW,CACzEja,OAAQ,CACNiB,MAAOxB,KAAKF,QAAQU,MAAMC,WAC1BC,cAAeY,EAAYya,GAAGtb,WAC9Byb,YAAatR,EAAKmR,GAAGtb,cAK3B8R,IAAIiK,EAA0B9b,GAC5B,OAAOV,KAAKH,KAAK0B,KAAavB,KAAKC,OAAOua,EAAmB,OAAQ,KAAM,CACzEja,OAAQ,CACNoH,MAAO3H,KAAKF,QAAQU,MAAMC,WAC1Bgc,cAAe/b,EAAcD,WAC7Bsb,GAAIS,EAAST,GAAGtb,WAChB0D,KAAMqY,EAASrY,KACfqE,UAAWgU,EAAShU,UACpB9G,WAAY8a,EAAS9a,WACrB4a,QAASE,EAASF,QAAQ7b,WAC1Bic,MAAOF,EAASG,UAAUlc,cAKhCmc,gBAAgBC,EAAYxc,EAAoBiJ,GAC9C,OAAOtJ,KAAKH,KAAK0B,KAAcvB,KAAKC,OAAOua,EAAmB,aAAc,KAAM,CAChFja,OAAQ,CAAEC,MAAOR,KAAKF,QAAQU,MAAMC,WAAYyb,YAAaW,EAAGpc,WAAYqH,MAAOzH,EAAYiJ,6DA7HxFmR,GAAyBrY,+DAAzBqY,EAAyBpY,QAAzBoY,EAAyB,YAAzBA,GAAb,gFCAO,IAAMJ,EAAb,MAAM,sDAAOA,4DAVF,CACPT,SASSS,GAAb,kDCXO,MAAMyC,EAAe,oFACzB9V,MAAM,KACNjG,IAAIgc,GAAMA,EAAG1V,OAAO2V,qBAEjB,QAWJpd,YAEUqd,EACRC,EACA9b,EACA+b,EACAC,EACQ5Z,GALAxD,cAKAA,gBAERA,KAAKqd,YAAcrd,KAAKsd,kBAAkBL,GAC1Cjd,KAAKud,aAAavd,KAAKqd,YAAard,KAAKid,QACzCjd,KAAKwd,YAAcpc,EACnBpB,KAAKyd,eAAiBzd,KAAK0d,eAAe1d,KAAKid,OAAQC,EAAU9b,EAAO+b,EAAWC,GACnFpd,KAAK2d,wBAA0B3d,KAAK4d,YAAY5d,KAAKid,OAAQjd,KAAKyd,gBAClEzd,KAAK6d,eAAiB7d,KAAK8d,qBAAqBX,EAAWnd,KAAKyd,gBAChEzd,KAAK+d,aAAa/d,KAAKqd,YAAard,KAAKyd,gBACzCzd,KAAKge,UAAUhe,KAAKyd,gBAGtBQ,UACEje,KAAKke,UAAUle,KAAKqd,YAAard,KAAKyd,gBACtCzd,KAAK6d,eAAeM,aACpBne,KAAK2d,wBAAwBzM,QAAQkN,GAA0BA,EAAuBC,WACtFre,KAAKyd,eAAea,WAAWD,UAC/Bre,KAAKyd,eAAeY,UAGtBE,YAAYnd,GACNpB,KAAKwd,cAAgBpc,IACzBpB,KAAKwd,YAAcpc,EACnBpB,KAAKyd,eAAea,WAAWE,SAASpd,IAG1Cqd,QACEze,KAAKyd,eAAegB,QAGtBC,cAAcC,GACZ3e,KAAK4e,qBAAuBD,EAG9BE,QAAQF,GACN3e,KAAK8e,gBAAkBH,EAGzBI,OAAOJ,GACL3e,KAAKgf,gBAAkBL,EAGzB/P,cAAcD,GACc3O,KAAKyd,eAC5BwB,gBAAqH,sBACtGC,OAAOvQ,GAG3BwQ,YAAY3b,GACVxD,KAAKwD,SAAWA,EAGlB4b,cAAcC,aACZ,MAAMC,EAAMtf,KAAKyd,eAAea,WAAWgB,IAAI7e,WACzC8e,EAAqBvf,KAAKid,OAAOuC,UAAUC,KAAKC,aAAaC,mBAC7DC,EAAgF,QAAvE1b,EAA0B,QAA1B2b,IAAmBC,eAAOpT,eAAEmG,KAAKkN,GAAUA,EAAOC,UAAU,KAAOV,UAAItN,SAEhFiO,EAAyF,UAAX,MAAVC,OAAU,EAAVA,EAAY1Y,MAClF,CAAE8X,IAAKD,EAAWje,MAAO4e,UAAW,CAACV,IAChB,SAAX,MAAVY,OAAU,EAAVA,EAAY1Y,MACV,CAAE8X,MAAKU,UAAW,CAACV,GAAMS,OAAQpP,KAAKC,MAAMyO,EAAWje,aACvD0D,EAEN,IAAK8a,IAAWK,EAAa,OAE7B,MAAME,EAAkBlf,+BACnBse,GAAkB,CACrBa,qBAAqB,EACrBN,QAASF,IAAWK,EAChBV,EAAmBO,QAAQ/W,OAAOgX,GAAUA,EAAOC,UAAU,KAAOV,GACpEM,EACEL,EAAmBO,QAAQ/e,IAAIgf,GAAUA,EAAOC,UAAU,KAAOV,EAAMW,EAAYF,GACnF,IAA+B,QAA1BM,IAAmBP,eAAOlL,QAAI,GAAKqL,KAGhDjgB,KAAKid,OAAOuC,UAAUC,KAAKC,aAAaY,sBAAsBH,GAGhEI,gBAAgBC,GACd,IAAKA,EAAY,OAEjB,MAAMC,EAAexf,+BAChBjB,KAAKid,OAAOuC,UAAUC,KAAKC,aAAaC,oBAAkB,CAC7Da,aAEFxgB,KAAKid,OAAOuC,UAAUC,KAAKC,aAAaY,sBAAsBG,GAGhEC,yBAAyBtD,GACvB,IAAKA,EAAW,OAEhB,MAAMuD,EAAqB1f,+BACtBjB,KAAKid,OAAOuC,UAAUoB,WAAWC,mBAAmBC,yBACpD1D,GAELpd,KAAKid,OAAOuC,UAAUoB,WAAWC,mBAAmBP,sBAAsBK,GAGpErD,kBAAkBL,GAQxB,OAPoB,MAAhBA,EAAO8D,QAKT9D,EAAO8D,MAJmB,CACxBC,kBAAkB,EAClBC,YAAa,KAIVhE,EAAO8D,MAIRxD,aAAaF,EAAyBJ,GAExCI,EAAY2D,mBAChB3D,EAAY2D,kBAAmB,EAE/B/D,EAAOiE,OAAOC,YAAY,YAAa,CACrCC,KAAM,UACNC,SAAS,EACTC,MAAO,CACL,CAAEC,MAAO,aAAcC,WAAY,WAErCC,OAAQ,MAKJ/D,eACNT,EACAC,EACA9b,EACA+b,EACAC,GAEA,MAAMK,EAAiBR,EAAOiE,OAAOlL,OAAOmH,EAAWC,GACjDsE,EAAiBzE,EAAO0E,IAAI5f,KAAKmb,GACjC0E,EAAc3E,EAAOiE,OAAOW,YAAYzgB,OAAO0D,EAAW4c,GAChEjE,SAAeqE,SAASF,GACjBnE,EAGDS,UAAUb,EAAyBI,GACzC,MAAM6B,EAAM7B,EAAea,WAAWgB,IAAI7e,WACpCshB,EAAYpR,KAAKsL,UAAUwB,EAAeuE,iBAEZ,MAAhC3E,EAAY4D,YAAY3B,GAC1BjC,EAAY4D,YAAY3B,GAAO,CAAEyC,aAEjC1E,EAAY4D,YAAY3B,GAAKyC,UAAYA,EAIrChE,aAAaV,EAAyBI,GAC5C,MAAM6B,EAAM7B,EAAea,WAAWgB,IAAI7e,WACpCwhB,EAAa5E,EAAY4D,YAAY3B,GAC3C,GAAkB,MAAd2C,EAAsB,OAE1B,MAAMF,EAAgDpR,KAAKC,MAAMqR,EAAWF,WAC5EtE,EAAeyE,iBAAiBH,GAG1BnE,YAAYX,EAAuBQ,GA+GzC,MA9GgC,CAC9BR,EAAOuC,UAAU2C,+BAA+B1E,EAAea,WAAW8D,gBAAiB,CACzFC,kBAAmB,CAAC,KACpBC,uBAAwB,CAACC,EAAOC,KAC9B,GAAI/E,EAAea,aAAeiE,EAAS,MAAO,CAAEE,YAAa,IAEjE,MAAMC,EAA4BH,EAAMI,gBAAgB,CACtDC,gBAAiBJ,EAASK,WAC1BC,YAAa,EACbC,cAAeP,EAASK,WACxBG,UAAWR,EAASS,SAKtB,GAAgB,MAAZC,EAD8BR,EAAkBvb,OAAS,GACtC,MAAO,CAAEsb,YAAa,IAE7C,MAAMU,EAAgBT,EAAkBxL,YAAY,KACpD,IAAsB,IAAlBiM,EAAwB,MAAO,CAAEV,YAAa,IAElD,MAAMW,EAAYV,EAAkBje,UAAU0e,GAE9C,IAAIE,EAAS,EAIb,GAHAtV,MAAMuV,KAAKF,GAAWlS,QAAQ2O,IAClB,MAANA,GAAawD,MAEfA,EAAS,GAAM,EAAK,MAAO,CAAEZ,YAAa,IAE9C,GAAIW,EAAUhS,WAAW,MAAS,MAAO,CAAEqR,YAAa,IAExD,GAAIW,EAAUhf,QAAQ,OAASgf,EAAUjc,OAAS,EAAK,MAAO,CAAEsb,YAAa,IAG7E,IAAIc,EAAcH,EAAUhf,QAAQ,KAIpC,IAHoB,IAAhBmf,IACFA,EAAcH,EAAUhf,QAAQ,OAEd,IAAhBmf,EAAsB,MAAO,CAAEd,YAAa,IAEhD,MAAMe,EAAMJ,EAAU3e,UAAU,EAAG8e,GACnC,OAAKC,EACD1G,EAAa3P,SAASqW,EAAIxG,qBAA+B,CAAEyF,YAAa,IACvE,gBAAgBgB,KAAKD,GAcnB,CAAEf,YAZ8C,CAAC,CACtDrc,MAAO,KAAKod,KACZE,KAAMzG,EAAOuC,UAAUmE,mBAAmBC,QAC1CC,WAAY,OAAQL,KACpBM,gBAAiB7G,EAAOuC,UAAUuE,6BAA6BC,gBAC/DC,MAAO,CACLrB,gBAAiBJ,EAASK,WAC1BE,cAAeP,EAASK,WACxBC,YAAaN,EAASS,OACtBD,UAAWR,EAASS,WAXiB,CAAER,YAAa,IAFrC,CAAEA,YAAa,OAoBtCxF,EAAOuC,UAAU2C,+BAA+B1E,EAAea,WAAW8D,gBAAiB,CACzFE,uBAAwB,CAACC,EAAOC,KAC9B,GAAqB,MAAjBxiB,KAAKwD,UAAoBia,EAAea,aAAeiE,EAAS,MAAO,CAAEE,YAAa,IAE1F,MAAMyB,EAAO3B,EAAM4B,qBAAqB3B,GAkBxC,MAAO,CAAEC,YAjBWziB,KAAKwD,SAASzC,IAAI4N,cACpC,OAAKA,EAAQrI,QACuC,CAClDF,MAAOuI,EAAQzO,KACfwjB,KAAMzG,EAAOuC,UAAUmE,mBAAmBC,QAC1CQ,cAAe,GAAgB,QAAbC,IAAQC,aAAK5X,QAAI,OAAmB,QAAZ6X,IAAQhe,YAAIyL,QAAI,OAAoB,QAAbwS,IAAQhe,aAAKoO,QAAI,KAClFiP,WAAYlV,EAAQrI,QACpBwd,gBAAiB7G,EAAOuC,UAAUuE,6BAA6BC,gBAC/DC,MAAO,CACLrB,gBAAiBJ,EAASK,WAC1BE,cAAeP,EAASK,WACxBC,YAAaoB,EAAKpB,YAClBE,UAAWkB,EAAKlB,iBAXI,IAevBja,OAAO0b,KAAgBA,QAgC1B3G,qBAAqBX,EAAwBM,GACnD,MAAMI,EAAiB,IAAI6G,eAAe,KACxCjH,EAAekH,WAEjB9G,SAAe+G,QAAQzH,GAChBU,EAGDG,UAAUP,GAChBA,EAAea,WAAWuG,mBAAmB,WAC3C,MAAMC,EAAWrH,EAAea,WAAWyG,WACvCD,IAAa9kB,KAAKwd,cACtBxd,KAAKwd,YAAcsH,EACM,QAAzBjF,OAAKjB,4BAAoBlS,mBAAGoY,MAG9BrH,EAAeuH,uBAAuB,WAChB,QAApBnF,OAAKf,uBAAepS,sBAGtB+Q,EAAewH,sBAAsB,WACf,QAApBpF,OAAKb,uBAAetS,0CCnTnB,IAAMuM,EAAb,MAAM,QAiBJrZ,cARSI,gBAAY,EACHA,kBAAe,IAAIkM,MACnBlM,aAAU,IAAIkM,MACdlM,aAAU,IAAIkM,MAOhCgZ,kBACE7M,OAAO8M,QAAQtK,OAAO,CACpBxQ,MAAO,CACL+a,GAAI,CAAC,yEAIT/M,OAAO8M,QAAQ,CAAC,yBAA2BlI,IACzCjd,KAAKid,OAASA,EACdjd,KAAKqlB,aAAarlB,KAAKwV,aAI3BrJ,YAAYC,iBACc,MAApBA,EAAQ8Q,UAA2C,MAAvBld,KAAKslB,iBACnCtlB,KAAKslB,eAAerH,UACpBje,KAAKqlB,cAAa,IAEC,MAAjBjZ,EAAQhL,QACS,QAAnB8C,OAAKohB,sBAAc5Y,SAAE6R,YAAYve,KAAKoB,QAEd,MAAtBgL,EAAQiT,aACS,QAAnBgB,OAAKiF,sBAActT,SAAEoN,cAAcpf,KAAKqf,aAEd,MAAxBjT,EAAQmZ,eACS,QAAnBC,OAAKF,sBAAc1Q,SAAE2L,gBAAgBvgB,KAAKulB,eAEpB,MAApBnZ,EAAQ5I,WACS,QAAnBiiB,OAAKH,sBAAcI,SAAEvG,YAAYnf,KAAKwD,WAEG,MAAvC4I,EAAQuZ,8BACS,QAAnBC,OAAKN,sBAAcO,SAAEnF,yBAAyB1gB,KAAK2gB,wBAIvD/R,cAAcD,WACO,QAAnBzK,OAAKohB,sBAAc5Y,SAAEkC,cAAcD,GAChB,QAAnB0R,OAAKiF,sBAActT,SAAEyM,QAGvBzJ,oBACqB,QAAnB6K,OAAKyF,sBAAc5Y,SAAEuR,UAGfoH,aAAa7P,GACnBxV,KAAKslB,eAAiB,IAAIQ,EACxB9lB,KAAKid,OAAQjd,KAAKkd,SAAUld,KAAKoB,MAAOpB,KAAK+lB,UAAUC,cAAehmB,KAAKod,QAASpd,KAAKwD,UAG3FxD,KAAKslB,eAAelG,cAAcpf,KAAKqf,YACvCrf,KAAKslB,eAAe/E,gBAAgBvgB,KAAKulB,cACzCvlB,KAAKslB,eAAe5E,yBAAyB1gB,KAAK2gB,uBAElD3gB,KAAKslB,eAAe5G,cAActd,IAChCpB,KAAKimB,aAAa3Y,KAAKlM,KAGzBpB,KAAKslB,eAAezG,QAAQ,KAC1B7e,KAAKkmB,QAAQ5Y,SAGftN,KAAKslB,eAAevG,OAAO,KACzB/e,KAAKmmB,QAAQ7Y,SAGXkI,GACFxV,KAAKslB,eAAe7G,sDArFbxF,8BAAqBpW,ofCdlCT,0KDca6W,GAAb,2FEZI7W,kCADFA,oBACEA,gCACFA,uCADiBA,2DAIfA,kCADFA,qBACEA,gCACFA,uCADiBA,2DAKjBA,kECJK,IAAMgkB,EAAb,MAAM,QAIJxmB,cAHSI,cAAU,EACnBA,cAAU,EAIVqmB,gBACErmB,KAAKsmB,SAAWtmB,KAAKsmB,sDAPZF,8BAAkBvjB,mPDP/BT,iBAAsBA,gCAASyL,oBAC7BzL,4BAIAA,6BAGFA,QAEAA,iDAVgDA,sCAA0C,sBAC7EA,kCAICA,keCEDgkB,GAAb,0DCHO,IAAMG,EAAb,MAAM,QAEJ3mB,YAAoB4mB,8BAGpBC,QAAQnO,IACwBI,UAAUC,SAASC,MAAM,OAASN,EAAMO,QAAUP,EAAMQ,UAAYR,EAAMoO,UAAYpO,EAAMqO,SAExH3mB,KAAKwmB,oBAAoBI,qBACzBvO,OAAOwO,eAAeC,iEATfP,GAAoBnkB,sCAApBmkB,EAAoB1jB,sGAApBgL,qBAAb,2DCAO,IAAMkZ,EAAb,MAAM,QAEJnnB,YAAoB8L,oBAEpBP,UAAU6b,GACR,OAAOhnB,KAAK0L,UAAUub,wBAAwBD,iDALrCD,GAAY3kB,0DAAZ2kB,EAAYvb,UAAZub,GAAb,4DCDM,WAAsC1kB,GAU1C,MATsC,CACpC6kB,OAAQ,CACNC,QAASC,KACTC,WAAYhlB,EACZilB,KAAM,CAACC,OAETC,gBAAiB,KACjBC,SAAS,4DCHP,QACJ7nB,YAAoBC,EAA0B4H,EAAwBigB,GAAlD1nB,YAA0BA,cAAwBA,cAEtE2nB,eAAeC,GACb,OAAO5nB,KAAKH,KAAKS,IAAyB,GAAGN,KAAKyH,SAASmgB,IAAO5nB,KAAK0nB,UAAU5mB,MAC/E+mB,OAAW9Q,IACT+Q,QAAQC,KAAK,wCAAwCH,WAAc5nB,KAAKyH,SAAUsP,MAC3E3D,MAAG","names":["webApiTypeRoot","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopes","Object","keys","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","i0","factory","ctx_r5","CodeAndEditionWarningsComponent","snackRef","snackBarData","openCodeBehind","dismissWithAction","MAT_SNACK_BAR_DATA","selectors","Explorers","Templates","Snippets","SnippetsService","translate","getSnippets","view","res","relevant","filterAwayNotNeededSnippetsList","snippets","standardAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","keyPrefixes","keyPrefixIndex","v","Type","indexOf","newList","itm","setHasPrefix","set","substring","push","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","l","pair","length","link","trim","url","target","type","prefix","getFields","AppId","subscribe","fields","field","fieldname","valuePlaceholder","Metadata","merged","Notes","toLowerCase","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","replace","webApiFieldsAll","filter","DataTypeConstants","fld","md","typeMd","inputMd","All","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","templates","template","parent","paths","Path","last","pathFromRoot","path","existing","find","item","children","depth","isShared","Shared","isFolder","SortItemsPipe","transform","items","sort","item1","item2","pure","DepthPaddingPipe","sanitizer","padding","bypassSecurityTrustStyle","ctx_r8","oxw","ctx_r17","ctx_r20","CodeTemplatesComponent","EventEmitter","ngOnChanges","changes","calculateTree","f","calculateTreeAppShared","previousView","n","_a","previousValue","toggleItem","FileName","IsShared","showFileInTree","isToggled","toggledItemsShared","toggledItemsApp","includes","openTemplate","openView","emit","shared","GeneralHelpers","addFile","folder","createTemplate","toggledItems","ctx","ObjectToArrayPipe","Array","isArray","values","ctx_r11","ctx_r24","ctx_r26","ctx_r28","ctx_r30","ctx_r32","ctx_r36","CodeSnippetsComponent","addSnippet","snippet","insertSnippet","toggleSection","toggledSections","toggleFolder","toggledFolders","toggleInfo","toggledInfos","toggleMore","toggledMores","ctx_r10","ctx_r12","ctx_r14","ctx_r18","ctx_r22","ctx_r23","ctx_r25","routes","component","route","snackBar","sourceService","snippetsService","zone","titleService","dialog","viewContainerRef","theme","tabSize","fixedOverflowWidgets","init","codeItems","JSON","parse","sessionStorage","getItem","keyItems","F","keyIsShared","forEach","codeItem","startsWith","J","I","urlItems","ngOnInit","subscription","Subscription","templates$","BehaviorSubject","initialViews","s","EntityId","_b","activeView$","openViews$","viewInfos$","attachListeners","getAll","next","add","combineLatest","openViews","viewInfos","notLoaded","viewKey","some","forkJoin","newViewInfo","view$","share","snippets$","switchMap","of","results","viewInfos1","selectedIndex","findIndex","explorerSnipps","editorSnipps","savedCode","Code","slice","showCodeAndEditionWarnings","activeView","active","defaultTitle","newTitle","getTitle","setTitle","templateVars$","tabs","viewInfo","E","isActive","isModified","N","_c","isLoading","activeViewInfo","_","ngOnDestroy","complete","unsubscribe","toggleExplorer","explorer","activeExplorer","open","FileLocationDialogComponent","autoFocus","width","afterClosed","createFileDialogData","global","purpose","CreateFileDialogComponent","data","create","templateKey","monacoEditorRef","codeChanged","code","selectedViewInfo","C","oldOpenViews","newOpenViews","closeEditor","oldActiveView","newActiveView","codeToSave","duration","newViewInfos","error","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","fullName","nameCode","Extension","codeFile","otherEditions","endsWith","fileName","edition","Q","Edition","snackBarRef","openFromComponent","onAction","containerInstance","snackBarConfig","runOutsideAngular","fromEvent","window","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","run","CodeEditorComponent","MonacoEditorComponent","CodeEditorRoutingModule","RouterModule","TranslateLoaderWithErrorHandling","sxcVersion","CodeEditorModule","Context","SourceService","TranslateService","imports","SharedComponentsModule","CommonModule","MatDialogModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatRippleModule","TranslateModule","buildTranslateConfiguration","translateLoaderFactoryCode","MonacoEditorModule","MatProgressSpinnerModule","CreateFileDialogModule","webApiFieldsRoot","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","contentTypeStaticName","reOrder","idArray","Id","order","stringify","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","id","voidElements","el","toLocaleLowerCase","monaco","filename","container","options","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","getContribution","insert","setSnippets","setJsonSchema","jsonSchema","uri","oldJsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","exists","c","schemas","schema","fileMatch","newSchema","r","newJsonDiagnostics","enableSchemaRequest","h","setDiagnosticsOptions","setJsonComments","comments","jsonDiagnostics","setJavascriptDiagnostics","javascriptDiagnostics","typescript","javascriptDefaults","getDiagnosticsOptions","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","colors","editorModelUri","Uri","editorModel","createModel","setModel","viewState","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getLanguageId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","trigger","tagStartIndex","codeInTag","quotes","from","tagEndIndex","tag","test","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","documentation","w","title","k","D","suggestion","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","ngAfterViewInit","require","vs","createEditor","monacoInstance","jsonComments","x","p","_d","disableJavascriptValidation","T","_e","MonacoInstance","editorRef","nativeElement","valueChanged","focused","blurred","FieldHintComponent","toggleIsShort","isShort","ToggleDebugDirective","globalConfigService","onClick","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","SafeHtmlPipe","html","bypassSecurityTrustHtml","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","suffix","getTranslation","lang","catchError","console","warn"],"sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.html","./projects/eav-ui/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.ts","./projects/eav-ui/src/app/code-editor/code-editor.models.ts","./projects/eav-ui/src/app/code-editor/services/snippets.service.ts","./projects/eav-ui/src/app/code-editor/code-templates/code-templates.helpers.ts","./projects/eav-ui/src/app/code-editor/code-templates/order-items.pipe.ts","./projects/eav-ui/src/app/code-editor/code-templates/depth-padding.pipe.ts","./projects/eav-ui/src/app/code-editor/code-templates/code-templates.component.html","./projects/eav-ui/src/app/code-editor/code-templates/code-templates.component.ts","./projects/eav-ui/src/app/code-editor/code-templates/code-templates.models.ts","./projects/eav-ui/src/app/code-editor/code-snippets/object-to-array.pipe.ts","./projects/eav-ui/src/app/code-editor/code-snippets/code-snippets.component.html","./projects/eav-ui/src/app/code-editor/code-snippets/code-snippets.component.ts","./projects/eav-ui/src/app/code-editor/code-editor.component.html","./projects/eav-ui/src/app/code-editor/code-editor-routing.module.ts","./projects/eav-ui/src/app/code-editor/code-editor.component.ts","./projects/eav-ui/src/app/code-editor/code-editor.module.ts","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.module.ts","./projects/eav-ui/src/app/monaco-editor/monaco-instance.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"messages\">\r\n  <ng-container *ngIf=\"snackBarData.codeFile\">\r\n    <div>\"{{ snackBarData.fileName }}\" also has a code-behind file \"{{ snackBarData.codeFile }}\".</div>\r\n    <br>\r\n  </ng-container>\r\n\r\n  <div *ngIf=\"snackBarData.otherEditions\">\r\n    <ng-container *ngIf=\"snackBarData.edition\">\r\n      You are editing \"{{ snackBarData.edition }}\" edition.\r\n    </ng-container>\r\n    There are {{ snackBarData.otherEditions }} other editions of \"{{ snackBarData.fileName }}\".\r\n    <ng-container *ngIf=\"!snackBarData.edition\">\r\n      You may be editing an edition which is not the one you see.\r\n    </ng-container>\r\n    See <a href=\"http://r.2sxc.org/polymorphism\" target=\"_blank\">docs</a>.\r\n  </div>\r\n</div>\r\n\r\n<div class=\"actions\">\r\n  <button mat-button color=\"primary\" *ngIf=\"snackBarData.codeFile\" (click)=\"openCodeBehind()\">\r\n    Open code-behind file\r\n  </button>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings.models';\r\n\r\n@Component({\r\n  selector: 'app-code-and-edition-warnings',\r\n  templateUrl: './code-and-edition-warnings.component.html',\r\n  styleUrls: ['./code-and-edition-warnings.component.scss'],\r\n})\r\nexport class CodeAndEditionWarningsComponent {\r\n  constructor(\r\n    private snackRef: MatSnackBarRef<CodeAndEditionWarningsComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA) public snackBarData: CodeAndEditionWarningsSnackBarData,\r\n  ) { }\r\n\r\n  openCodeBehind(): void {\r\n    this.snackBarData.openCodeBehind = true;\r\n    this.snackRef.dismissWithAction();\r\n  }\r\n}\r\n","import { FileAsset } from './models/file-asset.model';\r\nimport { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\n\r\nexport interface Tab {\r\n  viewKey: ViewKey;\r\n  label: string;\r\n  isActive: boolean;\r\n  isModified: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface CodeEditorTemplateVars {\r\n  activeView: ViewKey;\r\n  tabs: Tab[];\r\n  viewKey: ViewKey;\r\n  view?: SourceView;\r\n  templates: FileAsset[];\r\n  explorerSnipps: SnippetsSets;\r\n  editorSnipps: Snippet[];\r\n}\r\n\r\nexport const Explorers = {\r\n  Templates: 'Templates',\r\n  Snippets: 'Snippets',\r\n} as const;\r\n\r\nexport type ExplorerOption = typeof Explorers[keyof typeof Explorers];\r\n\r\nexport interface ViewInfo {\r\n  viewKey: ViewKey;\r\n  view?: SourceView;\r\n  explorerSnipps?: SnippetsSets;\r\n  editorSnipps?: Snippet[];\r\n  savedCode?: string;\r\n}\r\n\r\nexport interface ViewKey {\r\n  /** ViewKey is templateId or path */\r\n  key: string;\r\n  shared: boolean;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { map, Observable } from 'rxjs';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { MoreSnippet, SetSnippet, SetSnippetLink, Snippet, SnippetsSets, SnippetsSubSubSets } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext, private translate: TranslateService) { }\r\n\r\n  getSnippets(view: SourceView): Observable<{ list: Snippet[]; sets: SnippetsSets; }> {\r\n    return this.http.get<{ snippets: Snippet[] }>('../ng-assets/snippets.json.js').pipe(\r\n      map(res => {\r\n        const relevant = this.filterAwayNotNeededSnippetsList(res.snippets, view);\r\n        const standardAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n        const sets = this.initSnippetsWithConfig(standardAndInputSnips.standardArray, view, standardAndInputSnips.inputTypeSnippets);\r\n        const sorted: { list: Snippet[]; sets: SnippetsSets; } = {\r\n          list: standardAndInputSnips.standardArray,\r\n          sets\r\n        };\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** Scan the list for sets starting with @ or [ and filter if not needed right now */\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView): Snippet[] {\r\n    const keyPrefixes = ['@', '['];\r\n    const keyPrefixIndex = (v: SourceView) => (v.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n    const newList: Snippet[] = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substring(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]): { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substring(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    const extracted: { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } = {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n    return extracted;\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]): Record<string, Snippet[]> {\r\n    const inputTypeList: Record<string, Snippet[]> = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(\r\n    standardArray: Snippet[],\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): SnippetsSets {\r\n    const sets = this.makeTree(standardArray);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(\r\n        sets.Content.Fields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContent,\r\n        'Content',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(\r\n          sets.List.Fields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeList,\r\n          'Header',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  /** Convert the list into a tree with set/subset/item */\r\n  private makeTree(list: Snippet[]): SnippetsSets {\r\n    const tree: SnippetsSets = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted: SetSnippet = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      (tree[o.set][o.subset] as SetSnippet[]).push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: string, subset: string, snip: string, addition: string): string {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: string): SetSnippetLink[] {\r\n    if (!linksString) { return null; }\r\n\r\n    const links: SetSnippetLink[] = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        const link: SetSnippetLink = {\r\n          name: pair[0].trim(),\r\n          url: pair[1].trim() + ':' + pair[2].trim(),\r\n        };\r\n        links.push(link);\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  /** spm TODO: this happens after snippets are calculated for the first time. Needs to be fixed */\r\n  private loadContentType(\r\n    target: SnippetsSubSubSets,\r\n    type: string,\r\n    prefix: string,\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    this.getFields(templateConfiguration.AppId, type).subscribe(fields => {\r\n      // first add common items if the content-type actually exists\r\n      for (const field of fields) {\r\n        const fieldname = field.StaticName;\r\n        target[fieldname] = {\r\n          key: fieldname,\r\n          label: fieldname,\r\n          snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n          help: field.Metadata.merged.Notes || ' (' + field.Type.toLowerCase() + ') '\r\n        };\r\n        // try to add generic snippets specific to this input-type\r\n        const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n        this.attachSnippets(target, prefix, fieldname, field.InputType, snipDefaults, inputTypeSnippets);\r\n      }\r\n\r\n      if (fields.length) {\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < std.length; i++) {\r\n          target[std[i]] = {\r\n            key: std[i],\r\n            label: std[i],\r\n            snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n            help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private valuePlaceholder(obj: string, val: string, templateConfiguration: SourceView): string {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string): Observable<Field[]> {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    }).pipe(\r\n      map(fields => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) { continue; }\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n        return fields;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private attachSnippets(\r\n    target: SnippetsSubSubSets,\r\n    prefix: string,\r\n    fieldname: string,\r\n    inputType: string,\r\n    snipDefaults: SetSnippet,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) { // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substring(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) { return; }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = {};\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true,\r\n        } as MoreSnippet);\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: string, objName: string, fieldName: string): string {\r\n    snip = snip\r\n      .replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { FileAsset } from '../models/file-asset.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { appSharedRoot } from './code-templates.models';\r\n\r\nexport function calculateTreeAppShared(templates: FileAsset[]): TreeItem[] {\r\n  const tree: TreeItem[] = [\r\n    {\r\n      depth: -1,\r\n      name: 'App Files',\r\n      pathFromRoot: appSharedRoot,\r\n      isShared: false,\r\n      isFolder: true,\r\n      children: calculateTree(templates.filter(f => !f.Shared)),\r\n    },\r\n    {\r\n      depth: -1,\r\n      name: 'Shared App Files',\r\n      pathFromRoot: appSharedRoot,\r\n      isShared: true,\r\n      isFolder: true,\r\n      children: calculateTree(templates.filter(f => f.Shared)),\r\n    },\r\n  ];\r\n  return tree;\r\n}\r\n\r\nfunction calculateTree(templates: FileAsset[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.Path.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isShared: template.Shared,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean): SafeStyle {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': isToggled(item.pathFromRoot, item.isShared) }\" [tippy]=\"item.name\" tippyShowDelay=\"750\"\r\n        (click)=\"openTemplate(item.pathFromRoot, item.isShared)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [ngClass]=\"{'app-shared-root': item.depth < 0}\"\r\n          [style]=\"item.depth + 1 | depthPadding: item.isFolder\" (click)=\"toggleItem(item.pathFromRoot, item.isShared)\">\r\n          <div class=\"folder-name\" [tippy]=\"item.name\" tippyShowDelay=\"750\">\r\n            <mat-icon>\r\n              {{ isToggled(item.pathFromRoot, item.isShared) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" tippy=\"Create file in this folder\" tippyShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"addFile(item.pathFromRoot, item.isShared)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"isToggled(item.pathFromRoot, item.isShared)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button tippy=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { ViewKey } from '../code-editor.models';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTreeAppShared } from './code-templates.helpers';\r\nimport { appSharedRoot, CreateTemplateParams } from './code-templates.models';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n})\r\nexport class CodeTemplatesComponent implements OnChanges {\r\n  @Input() view?: SourceView;\r\n  @Input() templates: FileAsset[];\r\n  @Output() openView: EventEmitter<ViewKey> = new EventEmitter();\r\n  @Output() createTemplate: EventEmitter<CreateTemplateParams> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItemsApp: string[] = [];\r\n  toggledItemsShared: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.templates != null) {\r\n      this.tree = calculateTreeAppShared(this.templates);\r\n    }\r\n    if (changes.view != null) {\r\n      const previousView: SourceView = changes.view?.previousValue;\r\n      if (previousView) {\r\n        this.toggleItem(previousView.FileName, previousView.IsShared);\r\n      }\r\n      if (this.view) {\r\n        this.showFileInTree(this.view.FileName, this.view.IsShared);\r\n      }\r\n    }\r\n  }\r\n\r\n  isToggled(path: string, isShared: boolean): boolean {\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    return toggledItems.includes(path);\r\n  }\r\n\r\n  openTemplate(path: string, isShared: boolean): void {\r\n    const viewKey: ViewKey = { key: path, shared: isShared };\r\n    this.openView.emit(viewKey);\r\n  }\r\n\r\n  toggleItem(path: string, isShared: boolean): void {\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    GeneralHelpers.toggleInArray(path, toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string, isShared?: boolean): void {\r\n    const params: CreateTemplateParams = { folder, isShared };\r\n    this.createTemplate.emit(params);\r\n  }\r\n\r\n  private showFileInTree(file: string, isShared: boolean): void {\r\n    if (file == null) { return; }\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    if (toggledItems.includes(file)) { return; }\r\n\r\n    const paths = [appSharedRoot, ...file.split('/')];\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot, isShared);\r\n    }\r\n  }\r\n}\r\n","export const appSharedRoot = '' as const;\r\n\r\nexport interface CreateTemplateParams {\r\n  folder?: string;\r\n  isShared?: boolean;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Record<string, any> | Record<string, any>[]): Record<string, any>[] {\r\n    if (obj == null) { return; }\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [tippy]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      tippyShowDelay=\"750\" (click)=\"toggleSection(section.key)\">\r\n      <mat-icon>\r\n        {{ toggledSections.includes(section.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n      </mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section.key)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [tippy]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\" tippyShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder.key)\">\r\n          <mat-icon>\r\n            {{ toggledFolders.includes(folder.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder.key)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [tippy]=\"snippet.snip\" tippyShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" tippy=\"Show More\" tippyShowDelay=\"750\" (click)=\"toggleMore(snippet.key)\">\r\n                {{ toggledMores.includes(snippet.key) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet.key)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet.key)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet.key)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [tippy]=\"more.snip\" tippyShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more.key)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more.key)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { SnippetsSets } from '../models/snippet.model';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n})\r\nexport class CodeSnippetsComponent {\r\n  @Input() snippets: SnippetsSets;\r\n  @Output() insertSnippet: EventEmitter<string> = new EventEmitter();\r\n  toggledSections: string[] = [];\r\n  toggledFolders: string[] = [];\r\n  toggledInfos: string[] = [];\r\n  toggledMores: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  addSnippet(snippet: string): void {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledMores);\r\n  }\r\n}\r\n","<div class=\"editor-root\" appToggleDebug [ngClass]=\"{ 'sxc-dark': monacoOptions.theme === '2sxc-dark' }\"\r\n  *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Templates }\" tippy=\"Templates\"\r\n      (click)=\"toggleExplorer(Explorers.Templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Snippets }\" tippy=\"Snippets\"\r\n      (click)=\"toggleExplorer(Explorers.Snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== Explorers.Templates\" [view]=\"data.view\" [templates]=\"data.templates\"\r\n    (openView)=\"openView($event)\" (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== Explorers.Snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"insertSnippet($event)\">\r\n  </app-code-snippets>\r\n\r\n  <div class=\"editor-group\">\r\n    <div class=\"tabs-container fancy-scrollbar-dark\" *ngIf=\"data.tabs.length > 0\">\r\n      <div class=\"tab\" *ngFor=\"let tab of data.tabs\" [ngClass]=\"{\r\n        'active': tab.isActive,\r\n        'modified': tab.isModified,\r\n        'loading': tab.isLoading\r\n      }\" (click)=\"openView(tab.viewKey)\">\r\n        <div class=\"tab-label-container\" [tippy]=\"tab.label\" tippyShowDelay=\"750\">\r\n          <mat-icon class=\"icon-shared\" *ngIf=\"tab.viewKey.shared\">share</mat-icon>\r\n          <span class=\"tab-label\">{{ tab.label }}</span>\r\n        </div>\r\n        <div class=\"tab-actions-container\">\r\n          <mat-icon *ngIf=\"tab.isModified\" class=\"tab-action icon-modified\" fontSet=\"material-icons\">\r\n            circle\r\n          </mat-icon>\r\n          <mat-spinner *ngIf=\"tab.isLoading\" class=\"spinner\" mode=\"indeterminate\" diameter=\"14\" color=\"white\">\r\n          </mat-spinner>\r\n          <mat-icon class=\"tab-action icon-close\" tippy=\"Close\" appClickStopPropagation\r\n            (click)=\"closeEditor(tab.viewKey)\">\r\n            close\r\n          </mat-icon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <app-monaco-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [value]=\"data.view.Code\"\r\n      (valueChanged)=\"codeChanged($event, data.viewKey)\" [options]=\"monacoOptions\" [snippets]=\"data.editorSnipps\"\r\n      [autoFocus]=\"true\">\r\n    </app-monaco-editor>\r\n  </div>\r\n\r\n  <button mat-fab mat-elevation-z24 tippy=\"Click to save or CTRL + S\" *ngIf=\"data.activeView\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, map, Observable, of, share, Subscription, switchMap } from 'rxjs';\r\n// tslint:disable-next-line:max-line-length\r\nimport { CreateFileDialogComponent, CreateFileDialogData, CreateFileDialogResult, FileLocationDialogComponent } from '../create-file-dialog';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { MonacoEditorComponent } from '../monaco-editor';\r\nimport { keyIsShared, keyItems } from '../shared/constants/session.constants';\r\nimport { SourceItem } from '../shared/models/edit-form.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings/code-and-edition-warnings.models';\r\nimport { CodeEditorTemplateVars, ExplorerOption, Explorers, Tab, ViewInfo, ViewKey } from './code-editor.models';\r\nimport { CreateTemplateParams } from './code-templates/code-templates.models';\r\nimport { FileAsset } from './models/file-asset.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MonacoEditorComponent) private monacoEditorRef: MonacoEditorComponent;\r\n\r\n  Explorers = Explorers;\r\n  activeExplorer: ExplorerOption = Explorers.Templates;\r\n  monacoOptions: Monaco.editor.IStandaloneEditorConstructionOptions = {\r\n    theme: '2sxc-dark',\r\n    tabSize: 2,\r\n    fixedOverflowWidgets: true,\r\n  };\r\n  templateVars$: Observable<CodeEditorTemplateVars>;\r\n\r\n  private templates$: BehaviorSubject<FileAsset[]>;\r\n  private activeView$: BehaviorSubject<ViewKey>;\r\n  private openViews$: BehaviorSubject<ViewKey[]>;\r\n  private viewInfos$: BehaviorSubject<ViewInfo[]>;\r\n  private subscription: Subscription;\r\n  private urlItems: SourceItem[];\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    this.context.init(this.route);\r\n    const codeItems: SourceItem[] = JSON.parse(sessionStorage.getItem(keyItems));\r\n    const isShared = sessionStorage.getItem(keyIsShared) === 'true' ?? false;\r\n    codeItems.forEach(codeItem => {\r\n      // remove leading \"/\" from path\r\n      if (codeItem.Path.startsWith('/')) {\r\n        codeItem.Path = codeItem.Path.substring(1);\r\n      }\r\n      codeItem.IsShared ??= isShared;\r\n    });\r\n    this.urlItems = codeItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.templates$ = new BehaviorSubject<FileAsset[]>([]);\r\n    const initialViews = this.urlItems.map(item => {\r\n      const viewKey: ViewKey = { key: item.EntityId?.toString() ?? item.Path, shared: item.IsShared };\r\n      return viewKey;\r\n    });\r\n    this.activeView$ = new BehaviorSubject<ViewKey>(initialViews[0]);\r\n    this.openViews$ = new BehaviorSubject<ViewKey[]>(initialViews);\r\n    this.viewInfos$ = new BehaviorSubject<ViewInfo[]>([]);\r\n\r\n    this.attachListeners();\r\n\r\n    this.sourceService.getAll().subscribe(templates => {\r\n      this.templates$.next(templates);\r\n    });\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.templates$, this.openViews$]).subscribe(([templates, openViews]) => {\r\n        if (templates.length === 0) { return; }\r\n\r\n        let viewInfos = this.viewInfos$.value;\r\n        const notLoaded = openViews.filter(viewKey => !viewInfos.some(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey)));\r\n        if (notLoaded.length === 0) { return; }\r\n\r\n        forkJoin(\r\n          notLoaded.map(viewKey => {\r\n            // set viewKey in viewInfos to mark that view is being fetched\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n            };\r\n            viewInfos = [...viewInfos, newViewInfo];\r\n\r\n            const view$ = this.sourceService.get(viewKey.key, viewKey.shared, this.urlItems).pipe(share());\r\n            const snippets$ = view$.pipe(switchMap(view => this.snippetsService.getSnippets(view)));\r\n            return forkJoin([of(viewKey), view$, snippets$]);\r\n          })\r\n        ).subscribe(results => {\r\n          let viewInfos1 = this.viewInfos$.value;\r\n\r\n          results.forEach(([viewKey, view, snippets]) => {\r\n            const selectedIndex = viewInfos1.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n            if (selectedIndex < 0) { return; }\r\n\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n              view,\r\n              explorerSnipps: snippets.sets,\r\n              editorSnipps: snippets.list,\r\n              savedCode: view.Code,\r\n            };\r\n            viewInfos1 = [...viewInfos1.slice(0, selectedIndex), newViewInfo, ...viewInfos1.slice(selectedIndex + 1)];\r\n            this.showCodeAndEditionWarnings(viewKey, view, templates);\r\n          });\r\n\r\n          this.viewInfos$.next(viewInfos1);\r\n        });\r\n\r\n        this.viewInfos$.next(viewInfos);\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.activeView$, this.viewInfos$]).subscribe(([activeView, viewInfos]) => {\r\n        const active = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, activeView));\r\n        const defaultTitle = 'Code Editor';\r\n        const newTitle = active == null ? defaultTitle : `${active.view?.FileName} - ${defaultTitle}`;\r\n        const oldTitle = this.titleService.getTitle();\r\n        if (newTitle !== oldTitle) {\r\n          this.titleService.setTitle(newTitle);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([this.templates$, this.activeView$, this.openViews$, this.viewInfos$]).pipe(\r\n      map(([templates, activeView, openViews, viewInfos]) => {\r\n        const tabs = openViews.map(viewKey => {\r\n          const viewInfo = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n          const label: Tab = {\r\n            viewKey,\r\n            label: viewInfo?.view?.FileName ?? viewKey.key,\r\n            isActive: GeneralHelpers.objectsEqual(viewKey, activeView),\r\n            isModified: viewInfo?.view?.Code !== viewInfo?.savedCode,\r\n            isLoading: viewInfo?.view == null,\r\n          };\r\n          return label;\r\n        });\r\n        const activeViewInfo = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, activeView));\r\n\r\n        const templateVars: CodeEditorTemplateVars = {\r\n          activeView,\r\n          tabs,\r\n          viewKey: activeViewInfo?.viewKey,\r\n          view: activeViewInfo?.view,\r\n          templates,\r\n          explorerSnipps: activeViewInfo?.explorerSnipps,\r\n          editorSnipps: activeViewInfo?.editorSnipps,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.templates$.complete();\r\n    this.activeView$.complete();\r\n    this.openViews$.complete();\r\n    this.viewInfos$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: ExplorerOption): void {\r\n    this.activeExplorer = (this.activeExplorer !== explorer) ? explorer : null;\r\n  }\r\n\r\n  createTemplate(params: CreateTemplateParams): void {\r\n    if (params.isShared == null) {\r\n      const fileLocationDialogRef = this.dialog.open(FileLocationDialogComponent, {\r\n        autoFocus: false,\r\n        viewContainerRef: this.viewContainerRef,\r\n        width: '650px',\r\n      });\r\n      fileLocationDialogRef.afterClosed().subscribe((isShared?: boolean) => {\r\n        if (isShared == null) { return; }\r\n        params.isShared = isShared;\r\n        this.createTemplate(params);\r\n      });\r\n      return;\r\n    }\r\n\r\n    const createFileDialogData: CreateFileDialogData = {\r\n      folder: params.folder,\r\n      global: params.isShared,\r\n      purpose: params.folder === 'api' || params.folder?.startsWith('api/') ? 'Api' : undefined,\r\n    };\r\n    const createFileDialogRef = this.dialog.open(CreateFileDialogComponent, {\r\n      autoFocus: false,\r\n      data: createFileDialogData,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n\r\n    createFileDialogRef.afterClosed().subscribe((result?: CreateFileDialogResult) => {\r\n      if (!result) { return; }\r\n\r\n      this.sourceService.create(result.name, params.isShared, result.templateKey).subscribe(() => {\r\n        this.sourceService.getAll().subscribe(files => {\r\n          this.templates$.next(files);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoEditorRef?.insertSnippet(snippet);\r\n  }\r\n\r\n  codeChanged(code: string, viewKey: ViewKey): void {\r\n    let viewInfos = this.viewInfos$.value;\r\n    const selectedIndex = viewInfos.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n    const selectedViewInfo = viewInfos[selectedIndex];\r\n    const newViewInfo: ViewInfo = {\r\n      ...selectedViewInfo,\r\n      view: {\r\n        ...selectedViewInfo.view,\r\n        Code: code,\r\n      },\r\n    };\r\n    viewInfos = [...viewInfos.slice(0, selectedIndex), newViewInfo, ...viewInfos.slice(selectedIndex + 1)];\r\n    this.viewInfos$.next(viewInfos);\r\n  }\r\n\r\n  openView(viewKey: ViewKey): void {\r\n    // fix viewKey because it can be a templateId or a path, and file might already be open\r\n    viewKey = this.viewInfos$.value.find(\r\n      v => !GeneralHelpers.objectsEqual(v.viewKey, viewKey) && v.view?.FileName === viewKey.key && v.view?.IsShared === viewKey.shared\r\n    )?.viewKey ?? viewKey;\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (!GeneralHelpers.objectsEqual(oldActiveView, viewKey)) {\r\n      this.activeView$.next(viewKey);\r\n    }\r\n    const oldOpenViews = this.openViews$.value;\r\n    if (!oldOpenViews.some(v => GeneralHelpers.objectsEqual(v, viewKey))) {\r\n      const newOpenViews = [...oldOpenViews, viewKey];\r\n      this.openViews$.next(newOpenViews);\r\n    }\r\n  }\r\n\r\n  closeEditor(viewKey: ViewKey): void {\r\n    const oldOpenViews = this.openViews$.value;\r\n    const newOpenViews = oldOpenViews.filter(key => !GeneralHelpers.objectsEqual(key, viewKey));\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (GeneralHelpers.objectsEqual(oldActiveView, viewKey)) {\r\n      const newActiveView = oldOpenViews[oldOpenViews.findIndex(v => GeneralHelpers.objectsEqual(v, oldActiveView)) - 1] ?? newOpenViews[0];\r\n      this.activeView$.next(newActiveView);\r\n    }\r\n\r\n    this.openViews$.next(newOpenViews);\r\n  }\r\n\r\n  save(viewKey?: ViewKey): void {\r\n    viewKey ??= this.activeView$.value;\r\n    const viewInfo = this.viewInfos$.value.find(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n    if (viewInfo?.view == null) { return; }\r\n\r\n    this.snackBar.open('Saving...');\r\n    const codeToSave = viewInfo.view.Code;\r\n    this.sourceService.save(viewKey.key, viewKey.shared, viewInfo.view, this.urlItems).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n\r\n        let newViewInfos = [...this.viewInfos$.value];\r\n        const selectedIndex = newViewInfos.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n        if (selectedIndex < 0) { return; }\r\n\r\n        const selectedViewInfo = newViewInfos[selectedIndex];\r\n        const newViewInfo: ViewInfo = {\r\n          ...selectedViewInfo,\r\n          savedCode: codeToSave,\r\n        };\r\n        newViewInfos = [...newViewInfos.slice(0, selectedIndex), newViewInfo, ...newViewInfos.slice(selectedIndex + 1)];\r\n        this.viewInfos$.next(newViewInfos);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(viewKey: ViewKey, view: SourceView, files: FileAsset[]): void {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file.Path === pathWithSlash + nameCode && file.Shared === view.IsShared);\r\n    const otherEditions = files.filter(file => file.Path.endsWith(fullName) && file.Shared === view.IsShared).length - 1;\r\n\r\n    if (codeFile || otherEditions) {\r\n      const snackBarData: CodeAndEditionWarningsSnackBarData = {\r\n        fileName: fullName,\r\n        codeFile: codeFile?.Path,\r\n        edition: this.urlItems\r\n          .find(i => i.EntityId?.toString() === viewKey.key && i.IsShared === view.IsShared && i.Path === view.FileName)?.Edition,\r\n        otherEditions,\r\n        openCodeBehind: false,\r\n      };\r\n      const snackBarRef = this.snackBar.openFromComponent(CodeAndEditionWarningsComponent, {\r\n        data: snackBarData,\r\n        duration: 10000,\r\n      });\r\n\r\n      snackBarRef.onAction().subscribe(() => {\r\n        if ((snackBarRef.containerInstance.snackBarConfig.data as CodeAndEditionWarningsSnackBarData).openCodeBehind) {\r\n          const openViewKey: ViewKey = { key: codeFile?.Path, shared: codeFile?.Shared };\r\n          this.openView(openViewKey);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private attachListeners(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<BeforeUnloadEvent>(window, 'beforeunload').subscribe(event => {\r\n          const allSaved = !this.viewInfos$.value.some(v => v.view != null && v.view.Code !== v.savedCode);\r\n          if (allSaved) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').subscribe(event => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { CreateFileDialogModule } from '../create-file-dialog';\r\nimport { MonacoEditorModule } from '../monaco-editor';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n    CodeAndEditionWarningsComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n    MonacoEditorModule,\r\n    MatProgressSpinnerModule,\r\n    CreateFileDialogModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ],\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outlined' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema, Monaco2sxc } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: Monaco.editor.IStandaloneCodeEditor;\r\n  private completionItemProviders: Monaco.IDisposable[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: typeof Monaco,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n    private snippets: Snippet[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => completionItemProvider.dispose());\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance\r\n      .getContribution<Monaco.editor.IEditorContribution & { insert(template: string, opts?: Record<string, any>): void; }>('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema?: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const oldJsonDiagnostics = this.monaco.languages.json.jsonDefaults.diagnosticsOptions;\r\n    const exists = oldJsonDiagnostics.schemas?.some(schema => schema.fileMatch[0] === uri) ?? false;\r\n\r\n    const newSchema: Monaco.languages.json.DiagnosticsOptions['schemas'][0] = jsonSchema?.type === 'link'\r\n      ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n      : jsonSchema?.type === 'raw'\r\n        ? { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) }\r\n        : undefined;\r\n\r\n    if (!exists && !newSchema) { return; }\r\n\r\n    const newJsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...oldJsonDiagnostics,\r\n      enableSchemaRequest: true,\r\n      schemas: exists && !newSchema\r\n        ? oldJsonDiagnostics.schemas.filter(schema => schema.fileMatch[0] !== uri)\r\n        : exists\r\n          ? oldJsonDiagnostics.schemas.map(schema => schema.fileMatch[0] === uri ? newSchema : schema)\r\n          : [...(oldJsonDiagnostics.schemas ?? []), newSchema],\r\n    };\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(newJsonDiagnostics);\r\n  }\r\n\r\n  setJsonComments(comments?: Monaco.languages.json.SeverityLevel): void {\r\n    if (!comments) { return; }\r\n\r\n    const jsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      comments,\r\n    };\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  setJavascriptDiagnostics(options: Monaco.languages.typescript.DiagnosticsOptions): void {\r\n    if (!options) { return; }\r\n\r\n    const javascriptDiagnostics: Monaco.languages.typescript.DiagnosticsOptions = {\r\n      ...this.monaco.languages.typescript.javascriptDefaults.getDiagnosticsOptions(),\r\n      ...options,\r\n    };\r\n    this.monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions(javascriptDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: typeof Monaco & { _2sxc?: Monaco2sxc }): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: typeof Monaco): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n      colors: {\r\n      },\r\n    });\r\n  }\r\n\r\n  private createInstance(\r\n    monaco: typeof Monaco,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n  ): Monaco.editor.IStandaloneCodeEditor {\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState: Monaco.editor.ICodeEditorViewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: typeof Monaco, editorInstance: Monaco.editor.IStandaloneCodeEditor): Monaco.IDisposable[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model, position) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions: Monaco.languages.CompletionItem[] = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        provideCompletionItems: (model, position) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            const suggestion: Monaco.languages.CompletionItem = {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range: {\r\n                startLineNumber: position.lineNumber,\r\n                endLineNumber: position.lineNumber,\r\n                startColumn: word.startColumn,\r\n                endColumn: word.endColumn\r\n              },\r\n            };\r\n            return suggestion;\r\n          }).filter(suggestion => !!suggestion);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      // monaco.languages.registerHoverProvider(editorInstance.getModel().getLanguageId(), {\r\n      //   provideHover: (model, position) => {\r\n      //     const word = model.getWordAtPosition(position);\r\n      //     if (!word) { return; }\r\n      //     if (word.word.toLocaleLowerCase() === '2sxc') {\r\n      //       const contents = [\r\n      //         { value: '2sxc - Dynamic Content and Apps for DNN' },\r\n      //         { value: '[2sxc - Dynamic Content and Apps for DNN](https://2sxc.org)' },\r\n      //         { value: '**BOLD**  \\nLine2' },\r\n      //       ];\r\n      //       return {\r\n      //         contents,\r\n      //         range: {\r\n      //           startLineNumber: position.lineNumber,\r\n      //           endLineNumber: position.lineNumber,\r\n      //           startColumn: word.startColumn,\r\n      //           endColumn: word.endColumn,\r\n      //         },\r\n      //       };\r\n      //     }\r\n      //   }\r\n      // }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: Monaco.editor.IStandaloneCodeEditor): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations(e => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     marker => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() options?: Monaco.editor.IStandaloneEditorConstructionOptions;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() jsonComments?: Monaco.languages.json.SeverityLevel;\r\n  @Input() javascriptDiagnostics?: Monaco.languages.typescript.DiagnosticsOptions;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: typeof Monaco;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: typeof Monaco) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.jsonComments != null) {\r\n      this.monacoInstance?.setJsonComments(this.jsonComments);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n    if (changes.disableJavascriptValidation != null) {\r\n      this.monacoInstance?.setJavascriptDiagnostics(this.javascriptDiagnostics);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n    );\r\n\r\n    this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    this.monacoInstance.setJsonComments(this.jsonComments);\r\n    this.monacoInstance.setJavascriptDiagnostics(this.javascriptDiagnostics);\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_code-editor_code-editor_module_ts-projects_eav-ui_src_app_shared_comp-2b2737.9fb92e933b05fc0c.js"}