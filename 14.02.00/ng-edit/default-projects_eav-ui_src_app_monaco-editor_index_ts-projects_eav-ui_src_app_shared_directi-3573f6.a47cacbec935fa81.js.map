{"version":3,"mappings":"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","names":["MonacoEditorModule","CommonModule","voidElements","split","map","el","trim","toLocaleLowerCase","constructor","monaco","filename","value","container","options","snippets","tooltips","this","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","forEach","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","insertSnippet","snippet","getContribution","insert","setSnippets","setTooltips","setJsonSchema","jsonSchema","uri","toString","oldJsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","exists","s","t","schemas","_a","some","schema","fileMatch","_b","newSchema","e","type","JSON","parse","undefined","newJsonDiagnostics","Object","enableSchemaRequest","filter","n","_c","setDiagnosticsOptions","setJsonComments","comments","jsonDiagnostics","setJavascriptDiagnostics","javascriptDiagnostics","typescript","javascriptDefaults","getDiagnosticsOptions","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","colors","create","editorModelUri","Uri","file","editorModel","createModel","setModel","viewState","stringify","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getLanguageId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","trigger","length","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","includes","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","content","name","documentation","g","title","h","help","C","links","suggestion","registerHoverProvider","provideHover","getWordAtPosition","tooltip","find","i","Term","contents","Help","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","MonacoEditorComponent","EventEmitter","ngAfterViewInit","window","require","config","paths","vs","createEditor","autoFocus","ngOnChanges","changes","monacoInstance","jsonComments","o","_d","d","_e","disableJavascriptValidation","a","_f","ngOnDestroy","MonacoInstance","editorRef","nativeElement","valueChanged","emit","focused","blurred","selectors","i0","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ctx","factory","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","http","prefix","suffix","getTranslation","lang","get","pipe","catchError","error","console","warn","of"],"sources":["./projects/eav-ui/src/app/monaco-editor/monaco-editor.module.ts","./projects/eav-ui/src/app/monaco-editor/monaco-instance.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.html","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema, Monaco2sxc } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { Tooltip } from '../code-editor/models/tooltip.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: Monaco.editor.IStandaloneCodeEditor;\r\n  private completionItemProviders: Monaco.IDisposable[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: typeof Monaco,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n    private snippets: Snippet[],\r\n    private tooltips: Tooltip[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => completionItemProvider.dispose());\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance\r\n      .getContribution<Monaco.editor.IEditorContribution & { insert(template: string, opts?: Record<string, any>): void; }>('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setTooltips(tooltips: Tooltip[]): void {\r\n    this.tooltips = tooltips;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema?: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const oldJsonDiagnostics = this.monaco.languages.json.jsonDefaults.diagnosticsOptions;\r\n    const exists = oldJsonDiagnostics.schemas?.some(schema => schema.fileMatch[0] === uri) ?? false;\r\n\r\n    const newSchema: Monaco.languages.json.DiagnosticsOptions['schemas'][0] = jsonSchema?.type === 'link'\r\n      ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n      : jsonSchema?.type === 'raw'\r\n        ? { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) }\r\n        : undefined;\r\n\r\n    if (!exists && !newSchema) { return; }\r\n\r\n    const newJsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...oldJsonDiagnostics,\r\n      enableSchemaRequest: true,\r\n      schemas: exists && !newSchema\r\n        ? oldJsonDiagnostics.schemas.filter(schema => schema.fileMatch[0] !== uri)\r\n        : exists\r\n          ? oldJsonDiagnostics.schemas.map(schema => schema.fileMatch[0] === uri ? newSchema : schema)\r\n          : [...(oldJsonDiagnostics.schemas ?? []), newSchema],\r\n    };\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(newJsonDiagnostics);\r\n  }\r\n\r\n  setJsonComments(comments?: Monaco.languages.json.SeverityLevel): void {\r\n    if (!comments) { return; }\r\n\r\n    const jsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      comments,\r\n    };\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  setJavascriptDiagnostics(options: Monaco.languages.typescript.DiagnosticsOptions): void {\r\n    if (!options) { return; }\r\n\r\n    const javascriptDiagnostics: Monaco.languages.typescript.DiagnosticsOptions = {\r\n      ...this.monaco.languages.typescript.javascriptDefaults.getDiagnosticsOptions(),\r\n      ...options,\r\n    };\r\n    this.monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions(javascriptDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: typeof Monaco & { _2sxc?: Monaco2sxc }): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: typeof Monaco): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n      colors: {\r\n      },\r\n    });\r\n  }\r\n\r\n  private createInstance(\r\n    monaco: typeof Monaco,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n  ): Monaco.editor.IStandaloneCodeEditor {\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState: Monaco.editor.ICodeEditorViewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: typeof Monaco, editorInstance: Monaco.editor.IStandaloneCodeEditor): Monaco.IDisposable[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model, position) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions: Monaco.languages.CompletionItem[] = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        provideCompletionItems: (model, position) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            const suggestion: Monaco.languages.CompletionItem = {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range: {\r\n                startLineNumber: position.lineNumber,\r\n                endLineNumber: position.lineNumber,\r\n                startColumn: word.startColumn,\r\n                endColumn: word.endColumn\r\n              },\r\n            };\r\n            return suggestion;\r\n          }).filter(suggestion => !!suggestion);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerHoverProvider(editorInstance.getModel().getLanguageId(), {\r\n        provideHover: (model, position) => {\r\n          if (this.tooltips == null || editorInstance.getModel() !== model) { return; }\r\n\r\n          const word = model.getWordAtPosition(position);\r\n          if (!word) { return; }\r\n\r\n          const tooltip = this.tooltips.find(i => i.Term === word.word);\r\n          if (!tooltip) { return; }\r\n\r\n          return {\r\n            contents: tooltip.Help.map(value => {\r\n              const content: Monaco.IMarkdownString = {\r\n                value,\r\n              };\r\n              return content;\r\n            }),\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: word.startColumn,\r\n              endColumn: word.endColumn,\r\n            },\r\n          };\r\n        }\r\n      }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: Monaco.editor.IStandaloneCodeEditor): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations(e => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     marker => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { Tooltip } from '../code-editor/models/tooltip.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() tooltips?: Tooltip[];\r\n  @Input() options?: Monaco.editor.IStandaloneEditorConstructionOptions;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() jsonComments?: Monaco.languages.json.SeverityLevel;\r\n  @Input() javascriptDiagnostics?: Monaco.languages.typescript.DiagnosticsOptions;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: typeof Monaco;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: typeof Monaco) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.jsonComments != null) {\r\n      this.monacoInstance?.setJsonComments(this.jsonComments);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n    if (changes.tooltips != null) {\r\n      this.monacoInstance?.setTooltips(this.tooltips);\r\n    }\r\n    if (changes.disableJavascriptValidation != null) {\r\n      this.monacoInstance?.setJavascriptDiagnostics(this.javascriptDiagnostics);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets, this.tooltips,\r\n    );\r\n\r\n    this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    this.monacoInstance.setJsonComments(this.jsonComments);\r\n    this.monacoInstance.setJavascriptDiagnostics(this.javascriptDiagnostics);\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_monaco-editor_index_ts-projects_eav-ui_src_app_shared_directi-3573f6.a47cacbec935fa81.js"}