{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///../core/index.ts","webpack:///./src/constants/index.ts","webpack:///./src/index.ts","webpack:///./src/sxc-root/context-identifier.ts","webpack:///./src/tools/total-popup.ts","webpack:///./src/tools/url-params.ts","webpack:///./src/Stats.ts","webpack:///./src/data/index.ts","webpack:///../core/plumbing/index.ts","webpack:///./src/sxc-instance/web-api/sxc-web-api.ts","webpack:///./src/sxc-instance/web-api/ajax-promise.ts","webpack:///./src/sxc-root/sxc-global-get.ts","webpack:///./src/sxc-root/http-global.ts","webpack:///./src/sxc-root/sxc-global-bootstrap.ts","webpack:///./src/data/target-types.ts","webpack:///./src/tools/index.ts","webpack:///./src/environment/index.ts","webpack:///../core/constants/index.ts","webpack:///../core/plumbing/obj.ts","webpack:///../core/plumbing/no-jquery.ts","webpack:///./src/sxc-instance/index.ts","webpack:///./src/sxc-root/index.ts","webpack:///./src/sxc-root/debug.ts","webpack:///../core/logging/log-entry-options.ts","webpack:///../core/logging/has-log.ts","webpack:///../core/logging/Log.ts","webpack:///../core/logging/log-call.ts","webpack:///../core/logging/entry.ts","webpack:///../core/logging/insights.ts","webpack:///./src/sxc-instance/sxc-part.ts","webpack:///./src/sxc-instance/data/sxc-data-service-base.ts","webpack:///./src/sxc-instance/data/sxc-data.ts","webpack:///./src/sxc-instance/data/sxc-query.ts","webpack:///./src/sxc-instance/sxc-cms.ts","webpack:///./src/sxc-instance/sxc.ts","webpack:///./src/environment/env-loader-dnn-sf.ts","webpack:///./src/environment/env-loader-dynamic.ts","webpack:///./src/environment/env-loader-meta.ts","webpack:///./src/environment/root-environment.ts","webpack:///./src/2sxc.api.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","ApiExtensionPlaceholder","MetaHeaderJsApi","DnnUiRoot","PlatformOqtane","PlatformDnn","AntiForgeryTokenHeaderNameDnn","is","original","origAsContextId","undefined","zoneId","appId","ensureCompleteOrThrow","ctx","msg","console","error","frame","callback","open","url","z","window","top","parent","wrapper","document","createElement","setAttribute","body","appendChild","ifrm","className","this","close","replace","frm","parentNode","removeChild","closeThis","$2sxc","totalPopup","strResult","results","RegExp","exec","location","search","hash","matches","pathname","match","length","reverse","decodeURIComponent","require","found","message","alert","isDebug","toLocaleLowerCase","watchDomChanges","sxc","env","root","settingsOrUrl","params","data","preventAutoFail","request","post","delete","put","settings","method","id","controllerAction","split","controllerName","actionName","warn","controller","action","defaults","http","assign","makePromise","fetchRaw","ctxParams","urlLower","_ignoreHeaders","includes","headers","JSON","parse","stringify","fetch","fetchJson","then","response","json","cbid","toLocaleUpperCase","urlAndParams","urlParts","apiUrl","param","filter","join","api","$","Error","promise","ajax","async","dataType","contentType","type","getActionUrl","beforeSend","xhr","setRequestHeader","fail","showDetailedHttpError","endpoint","$2sxcGet","log","add","_controllers","ctxId","HTMLElement","closest","contextAttribute","getAttribute","idTuple","domElement","containerTag","iid","parseInt","autoFind","cacheKey","cl","fHeaders","pageId","page","toString","ModuleId","ContentBlockId","TabId","PageId","rvtHeader","rvt","return","apiRoot","endpointName","result","appApiRoot","appApi","indexOf","baseUrl","startsWith","slice","buildSxcRoot","rootApiV2","sysinfo","version","description","urlManager","debug","stats","Stats","addOn","beta","urlParams","insights","partName","index","start","show","_insights","merged","TargetTypes","ToSxcName","SxcVersion","SxcApiUrlRoot","HeaderNames","ApiUrlRoots","AppApiMarker","TypeSafeAssign","args","reduce","current","keys","target","DeepClone","ignoreCircular","str","getCircularReplacer","seen","WeakSet","_","has","ready","readyState","addEventListener","once","obj","entries","map","k","v","encodeURIComponent","domFromString","string","dummyParent","insertAdjacentHTML","Array","from","querySelectorAll","forEach","brokenScript","workingScript","attributes","attribute","nodeName","nodeValue","textContent","NoJQ","replaceWith","elements","children","element","offset","clientRect","getBoundingClientRect","scrollY","left","scrollX","width","computedStyle","getComputedStyle","offsetWidth","getPropertyValue","height","offsetHeight","outerWidth","empty","childNodes","toBeReplaced","newElement","runScripts","parentElement","scripts","restores","script","push","replaceChild","restore","AssetsLoader","append","newElements","tagName","restoreType","others","copy","src","listener","onload","onerror","head","setTimeout","urlDebugState","load","uncache","LogEntryOptions","logName","parentLog","initialMessage","initLog","initLogInternal","rename","linkLog","keepData","depth","callDepths","maxEntries","liveDump","_parentHasLiveDump","_parentHasKeepData","fullIdentifier","identifier","scope","idCache","randomString","startTime","Date","getTime","dot","substr","Math","min","rest","e","_prepareMessage","_addEntry","_prepareEntry","entry","addData","logData","time","Function","callParams","_callDepthAdd","_callDepthRemove","last","pop","dump","one","separator","dumpOne","dumpList","line","source","repeat","stringLength","chars","randomstring","rnum","floor","random","substring","initialEntry","behavior","lastMessage","processExtraBehavior","onlyAddIfNew","done","throw","_data","history","setName","InsightsLogSet","logs","part","logSet","autoLimit","logNames","Insights","InsightsSingleton","nameInError","webApi","SxcPart","SxcData","getAll","getInternal","getOne","getMany","criteria","fields","path","ContentApiRoot","values","metadataFor","Target","Entity","Guid","For","update","idOrGuid","SxcDataServiceBase","getStream","stream","getStreams","streams","run","runParams","_isSxcInstance","manage","cms","SxcCms","_manage","initInstance","on","warning","patchDataWithWarnings","_translateInit","context","app","currentLanguage","thing","query","SxcQuery","resolveServiceUrl","virtualPath","toLowerCase","status","config","infoText","srvResp","responseText","Message","msgDet","MessageDetail","ExceptionMessage","isEditMode","_isEditMode","recreate","resetCache","helpAutoDetect","dnnSfFallback","dnnSfLoadWhenDocumentReady","sf","ServicesFramework","dnnSf","getServiceRoot","sfJsInfo","getTabId","getAntiForgeryValue","uiRoot","platform","mainLoader","startMetaTagObserver","observer","MutationObserver","mutationsList","mut","attributeName","updateEnv","getMetaContent","observe","getJsApiMetaTag","childList","subtree","startInputRvtObserver","inputRvtObserver","loadRvtFromHiddenInput","hiddenField","querySelector","input","updateRvt","retries","dynamicPageHelper","loadMetaFromHeader","forceFallback","meta","newJsInfo","ourMeta","metaLoader","_jsApi","envSpecs","addSlash","endsWith","header","replacedRvt","newRvt","ensureReadyOrThrow","partRequested"],"mappings":"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","file":"2sxc.api.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 33);\n","\r\nexport * from './constants';\r\nexport * from './logging';\r\nexport * from './plumbing';\r\n","\r\n/**\r\n * This is a placeholder in the settings, which must be replaced with \"2sxc\" or another term for other dnn extensions\r\n * @internal\r\n */\r\nexport const ApiExtensionPlaceholder = 'e.x.t';\r\n\r\n/**\r\n * The special header meta tag containing settings for 2sxc\r\n * @internal\r\n */\r\nexport const MetaHeaderJsApi = '_jsApi';\r\n\r\n/**\r\n * The fallback path to the UI\r\n * @internal\r\n */\r\nexport const DnnUiRoot = '/desktopmodules/tosic_sexycontent/';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformOqtane = 'oqtane';\r\n\r\n/**\r\n * @internal\r\n */\r\nexport const PlatformDnn = 'dnn';\r\n\r\n/**\r\n * The fallback AntiForgery token header name (as in Dnn)\r\n * @internal\r\n */\r\nexport const AntiForgeryTokenHeaderNameDnn = 'RequestVerificationToken';\r\n","/* \r\n    This is just a type-index entry point.\r\n    The purpose is that other 2sxc projects in this repo can access all the types\r\n    in this project from here, without having to know the exact code files\r\n\r\n    Note that the order of things in this file can cause trouble\r\n    As webpack needs the order to be correct, meaning some depedencies need to be early\r\n*/\r\n\r\n// early things without dependencies, which may be needed by others\r\nexport * from './_/window';\r\nexport * from './data';\r\nexport * from './tools';\r\nexport * from './constants';\r\nexport * from './Stats';\r\n\r\nexport * from './environment';\r\n\r\nexport * from './sxc-instance';\r\n\r\nexport * from './sxc-root/';\r\n\r\nexport * from './sxc-instance/sxc-manage';\r\n\r\n","/**\r\n * ContextIdentifier is used to initialize a Sxc object outside of the default context.\r\n */\r\nexport class ContextIdentifier {\r\n  /**\r\n   * ZoneId of this Context\r\n   * @requires zoneId\r\n   */\r\n  zoneId: number;\r\n\r\n  /**\r\n   * AppId of this Context\r\n   * @requires appId\r\n   */\r\n  appId: number;\r\n\r\n  /** \r\n   * PageId of this Context (optional)\r\n   * @optional\r\n   */\r\n  pageId?: number;\r\n\r\n  /**\r\n   * ModuleId of this Context (optional)\r\n   * @optional\r\n   */\r\n  moduleId?: number;\r\n\r\n  /**\r\n   * Exclude pageId and moduleId headers in web requests\r\n   * @internal\r\n   */\r\n  _ignoreHeaders?: boolean;\r\n\r\n  /**\r\n   * Marks the context as complete, so it won't merge in anything else \r\n   * WIP #CustomContext ATM for the updated edit-ui\r\n   * @internal\r\n   */\r\n  complete?: boolean;\r\n\r\n  /**\r\n   * WIP #CustomContext not really used yet\r\n   * @internal\r\n   */\r\n  blockId?: number;\r\n\r\n  /**\r\n   * Type Guard to determine if an object is a ContextIdentifier\r\n   * @param original \r\n   * @returns \r\n   * @internal\r\n   */\r\n  static is(original: unknown): original is ContextIdentifier {\r\n    const origAsContextId = original as ContextIdentifier;\r\n    return origAsContextId.zoneId !== undefined && origAsContextId.appId !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Internal\r\n   * @param ctx \r\n   * @internal\r\n   */\r\n  static ensureCompleteOrThrow(ctx: ContextIdentifier): ContextIdentifier {\r\n    // if it's fulfills the minimum requirements\r\n    if (ctx.zoneId && ctx.appId) return ctx; \r\n  \r\n    const msg = `It looks like the id given is a ContextIdentifier, but it's missing either zoneId or appId.`;\r\n    console.error(msg, ctx);\r\n    throw msg;\r\n  }\r\n  \r\n}\r\n","/** @internal */\r\nexport class TotalPopup {\r\n    frame: any = undefined;\r\n    callback: any = undefined;\r\n\r\n    open(url: string, callback: () => void): void {\r\n        // count parents to see how high the z-index needs to be\r\n        let z = 10000010; // Needs at least 10000000 to be on top of the DNN9 bar\r\n        let p = window as Window;\r\n        while (p !== window.top && z < 10000100) {\r\n            z++;\r\n            p = p.parent;\r\n        }\r\n\r\n        const wrapper = document.createElement('div');\r\n        wrapper.setAttribute('style', ' top: 0;left: 0;width: 100%;height: 100%; position:fixed; z-index:' + z);\r\n        document.body.appendChild(wrapper);\r\n\r\n        const ifrm = document.createElement('iframe');\r\n        ifrm.setAttribute('allowtransparency', 'true');\r\n        ifrm.setAttribute('style', 'top: 0;left: 0;width: 100%;height: 100%;');\r\n        ifrm.setAttribute('src', url);\r\n        wrapper.appendChild(ifrm);\r\n        document.body.className += ' sxc-popup-open';\r\n        this.frame = ifrm;\r\n        this.callback = callback;\r\n    }\r\n\r\n    close(): void {\r\n        if (this.frame) {\r\n            document.body.className = document.body.className.replace('sxc-popup-open', '');\r\n            const frm = this.frame;\r\n            frm.parentNode.parentNode.removeChild(frm.parentNode);\r\n            this.callback();\r\n        }\r\n    }\r\n\r\n    closeThis(): void {\r\n        (window.parent as any).$2sxc.totalPopup.close();\r\n    }\r\n\r\n}\r\n","/**\r\n * Helper object to read url params. \r\n * Available on `$2sxc.urlParams`\r\n */\r\nexport class UrlParams {\r\n    /**\r\n     * Get a param from the url, no matter if it's behind ? or #\r\n     * If not found, will return an empty string `''`\r\n     * @param {string} name\r\n     * @memberof QueryParams\r\n     */\r\n    get(name: string) {\r\n        // warning: this method is duplicated in 2 places - keep them in sync.\r\n        // locations are eav and 2sxc4ng\r\n        name = name.replace(/[\\[]/, '\\\\[').replace(/[\\]]/, '\\\\]');\r\n        const searchRx = new RegExp('[\\\\?&]' + name + '=([^&#]*)', 'i');\r\n        let results = searchRx.exec(location.search);\r\n        let strResult: string;\r\n\r\n        if (results === null) {\r\n            const hashRx = new RegExp('[#&]' + name + '=([^&#]*)', 'i');\r\n            results = hashRx.exec(location.hash);\r\n        }\r\n\r\n        // if nothing found, try normal URL because DNN places parameters in /key/value notation\r\n        if (results === null) {\r\n            // Otherwise try parts of the URL\r\n            const matches = window.location.pathname.match(new RegExp('/' + name + '/([^/]+)', 'i'));\r\n\r\n            // Check if we found anything, if we do find it, we must reverse the\r\n            // results so we get the \"last\" one in case there are multiple hits\r\n            if (matches && matches.length > 1)\r\n                strResult = matches.reverse()[0];\r\n        } else\r\n            strResult = results[1];\r\n\r\n        return strResult === null || strResult === undefined\r\n            ? ''\r\n            : decodeURIComponent(strResult.replace(/\\+/g, ' '));\r\n    }\r\n\r\n    /**\r\n     * Get a required param from the url, no matter if it's behind ? or #\r\n     * Will throw an error if not found\r\n     * @param {string} name\r\n     * @memberof QueryParams\r\n     */\r\n    require(name: string) {\r\n        const found = this.get(name);\r\n        if (found === '') {\r\n            const message = `Required parameter (${name}) missing from url - cannot continue`;\r\n            alert(message);\r\n            throw message;\r\n        }\r\n        return found;\r\n    }\r\n\r\n    /**\r\n     * Checks if debug is enabled in the URL\r\n     * @returns \r\n     */\r\n    isDebug(): boolean {\r\n        return this.get('debug')?.toLocaleLowerCase() === 'true'\r\n    }\r\n}\r\n","/** @internal */\r\nexport class Stats {\r\n    watchDomChanges = 0;\r\n}\r\n","\r\nexport * from './target-types';\r\nexport * from './metadata-for';","//\r\n// Plumbing contains some object manipulation helpers and similarly\r\n// re-used bits of code\r\n//\r\n\r\nexport * from './obj';\r\nexport * from './type-value';\r\nexport * from './dictionary-value';\r\nexport * from './url';\r\nexport * from './no-jquery';\r\n","import { Sxc } from '../sxc';\r\nimport { AjaxPromise } from './ajax-promise';\r\nimport { Environment } from '../../environment';\r\nimport { AjaxSettings } from './ajax-settings';\r\nimport { NoJQ } from '../../../../core';\r\n\r\n/**\r\n * helper API to run ajax / REST calls to the server\r\n * it will ensure that the headers etc. are set correctly\r\n * and that urls are rewritten\r\n */\r\nexport class SxcWebApi {\r\n    /**\r\n     * @type {Environment}\r\n     * @memberof SxcWebApi\r\n     * @internal\r\n     */\r\n    public readonly env: Environment;\r\n\r\n    /**\r\n     * \r\n     * @param sxc \r\n     * @internal\r\n     */\r\n    constructor(private readonly sxc: Sxc) {\r\n        this.env = sxc.root.env;\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** \r\n     * Please use [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchJson) \r\n     * or [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchRaw) instead.\r\n     * \r\n     * Returns an http-get promise using jQuery\r\n     * @param settingsOrUrl the url to get\r\n     * @param params jQuery style ajax parameters\r\n     * @param data jQuery style data for post/put requests\r\n     * @param preventAutoFail\r\n     * @returns jQuery ajax promise object\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    get(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'GET');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** \r\n     * Please use [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchJson) \r\n     * or [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchRaw) instead.\r\n     * \r\n     * Returns an http-post promise using jQuery\r\n     * @param settingsOrUrl the url to get\r\n     * @param params jQuery style ajax parameters\r\n     * @param data jQuery style data for post/put requests\r\n     * @param preventAutoFail\r\n     * @returns jQuery ajax promise object\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    post(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'POST');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** \r\n     * Please use [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchJson) \r\n     * or [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchRaw) instead.\r\n     * \r\n     * Returns an http-delete promise using jQuery\r\n     * @param settingsOrUrl the url to talk to\r\n     * @param params jQuery style ajax parameters\r\n     * @param data jQuery style data for post/put requests\r\n     * @param preventAutoFail\r\n     * @returns jQuery ajax promise object\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    delete(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'DELETE');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** \r\n     * Please use [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchJson) \r\n     * or [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchRaw) instead.\r\n     * \r\n     * Returns an http-put promise using jQuery\r\n     * @param settingsOrUrl the url to put\r\n     * @param params jQuery style ajax parameters\r\n     * @param data jQuery style data for post/put requests\r\n     * @param preventAutoFail\r\n     * @returns jQuery ajax promise object\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    put(settingsOrUrl: string | AjaxSettings, params?: any, data?: any, preventAutoFail?: boolean): JQueryPromise<any> {\r\n        return this.request(settingsOrUrl, params, data, preventAutoFail, 'PUT');\r\n    }\r\n\r\n    /**\r\n     * **Deprecated** \r\n     * Please use [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchJson) \r\n     * or [fetchJson()](xref:Api.Js.SxcJs.SxcWebApi.fetchRaw) instead.\r\n     * \r\n     * Generic http request using jQuery\r\n     * @param settingsOrUrl the url to get\r\n     * @param params jQuery style ajax parameters\r\n     * @param data jQuery style data for post/put requests\r\n     * @param preventAutoFail\r\n     * @param method the http verb name\r\n     * @returns jQuery ajax promise object\r\n     * @deprecated use fetchJson instead\r\n     */\r\n    request(settings: string | AjaxSettings, params: any, data: any, preventAutoFail: boolean, method: string): JQueryPromise<any> {\r\n\r\n        // url parameter: auto convert a single value (instead of object of values) to an id=... parameter\r\n        // tslint:disable-next-line:curly\r\n        if (typeof params !== 'object' && typeof params !== 'undefined')\r\n            params = { id: params };\r\n\r\n        // if the first parameter is a string, resolve settings\r\n        if (typeof settings === 'string') {\r\n            const controllerAction = settings.split('/');\r\n            const controllerName = controllerAction[0];\r\n            const actionName = controllerAction[1];\r\n\r\n            if (controllerName === '' || actionName === '')\r\n                console.warn('Error: controller or action not defined. Will continue with likely errors.');\r\n\r\n            settings = {\r\n                controller: controllerName,\r\n                action: actionName,\r\n                params,\r\n                data,\r\n                url: controllerAction.length > 2 ? settings : null,\r\n                preventAutoFail,\r\n            };\r\n        }\r\n\r\n        const defaults = {\r\n            method: method === null ? 'POST' : method,\r\n            params: null as any,\r\n            preventAutoFail: false,\r\n        };\r\n        // new 10.25\r\n        var http = new AjaxPromise(this, this.sxc);\r\n\r\n        settings = Object.assign({}, defaults, settings);\r\n\r\n        const promise = http.makePromise(settings as AjaxSettings);\r\n\r\n        return promise;\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing a Response object, just like a normal fetch would. \r\n     * example: webApi.fetchRaw('Rss/Feed');\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 })); // url params\r\n     * example: webApi.fetchRaw('Rss/Feed', { id: 47 }); // post params\r\n     * example: webApi.fetchRaw(webApi.url('Rss/Feed', { id: 47 }), { something: 'this is a test' }); // url & post params\r\n     * maybe: webApi.fetchRaw({url: 'Rss/Feed', params: { id: 47 }})\r\n     * maybe: webApi.fetchRaw({url: ..., params: { ...}, body: { ...}, method: 'GET' })\r\n     */\r\n    fetchRaw(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        const ctxParams = {} as { appId?: number; zoneId?: number; };\r\n        const ctx = this.sxc.ctx;\r\n        const urlLower = url.toLocaleLowerCase();\r\n        if (ctx?._ignoreHeaders && urlLower.includes('app/auto/')) {\r\n            if (ctx?.appId && !urlLower.includes('appid=')) ctxParams.appId = ctx.appId;\r\n            if (ctx?.zoneId && !urlLower.includes('zoneId=')) ctxParams.zoneId = ctx.zoneId;\r\n        }\r\n        url = this.url(url, ctxParams);\r\n        method = method || (data ? 'POST' : 'GET');\r\n        const headers = this.headers(method);\r\n\r\n        if (data) {\r\n            // test if data is a json. If it's not, convert it to json\r\n            try {\r\n                JSON.parse(data as string);\r\n            } catch {\r\n                data = JSON.stringify(data);\r\n            }\r\n        }\r\n\r\n        return fetch(url, {\r\n            headers,\r\n            method,\r\n            ...(data && { body: data as string }),\r\n        });\r\n    }\r\n\r\n    // Note: fetch was documented in v12.10 (December 2021) but will probably never be used externally\r\n    // So we rename it to fetchRaw and later will make fetch just be the json implementation.\r\n    // Renamed and added this warning in 13.04 (2022-03-14), will drop in v14 and probably make it do fetchJson by default\r\n    // Changed functionality in 13.10 (2022-05-04) to make it do fetchJson by default\r\n    // Changed functionality back in 13.11 (2022-05-10) because it seems that Mobius was published using fetch\r\n    // Important: Do not document in the docs, as it shouldn't be used\r\n    /** @internal */\r\n    fetch(url: string, data?: string | Record<string, any>, method?: string): Promise<Response> {\r\n        console.warn(`You are calling 'fetch' on the sxc.webApi. This is deprecated will stop in 2sxc v15, please use fetchRaw(...) or fetchJson(...) instead.`)\r\n        return this.fetchJson(url, data, method);\r\n    }\r\n\r\n    /**\r\n     * Will retrieve data from the backend using a standard fetch and give you an object. \r\n     * @param url a full url or short-hand like `controller/method?params` `app/auto/api/controller/method?params`. Note that params would also be specified on the url. \r\n     * @param data optional POST data\r\n     * @param method optional method, defaults to `GET` unless it has data, in which case it defaults to `POST`\r\n     * @returns a Promise containing any object.\r\n     */\r\n    fetchJson<T = any>(url: string, data?: string | Record<string, any>, method?: string): Promise<T> {\r\n        return this.fetchRaw(url, data, method).then(response => response.json());\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call for this to work reliably.\r\n     * Use this if you need to get a list of headers in another system\r\n     */\r\n    headers(method?: string): Record<string, string> {\r\n        const headers = this.sxc.root.http.headers(this.sxc.id, this.sxc.cbid, this.sxc.ctx);\r\n        if (!method) {\r\n            return headers;\r\n        }\r\n\r\n        switch (method.toLocaleUpperCase()) {\r\n            case 'GET':\r\n                headers['Accept'] = 'application/json';\r\n                break;\r\n            default:\r\n                headers['Accept'] = 'application/json';\r\n                headers['Content-Type'] = 'application/json';\r\n        }\r\n        return headers;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param url A short, medium or long url. \r\n     * Short like `controller/method`, \r\n     * medium like `app/auto/api/controller/method`\r\n     * long like `https://xyz.\r\n     * In all cases it can also have ?params etc.\r\n     * @param params Optional parameters as string or object, will be added to url-params. \r\n     * @returns In the cases of a short/medium url, \r\n     * it will auto-expand to have the full url as needed for an API call. \r\n     */\r\n    url(url: string, params?: string | Record<string, any>): string {\r\n        if (url == null) return url;\r\n\r\n        const urlAndParams = url.split('#')[0].split('?');\r\n\r\n        // url fixes\r\n        url = urlAndParams[0];\r\n        const urlParts = url.split('/');\r\n        if (urlParts.length === 2 && urlParts[0] && urlParts[1]) {\r\n            const controller = urlParts[0];\r\n            const action = urlParts[1];\r\n            url = `app/auto/api/${controller}/${action}`;\r\n        }\r\n        url = this.sxc.root.http.apiUrl(url);\r\n\r\n        // params fixes\r\n        params = `${urlAndParams[1] || ''}&${params ? typeof params === 'string' ? params : NoJQ.param(params) : ''}`\r\n            .split('&')\r\n            .filter(p => !!p)\r\n            .join('&');\r\n\r\n        // result\r\n        url = [url, params].filter(p => !!p).join('?');\r\n        return url;\r\n    }\r\n}\r\n","import { Sxc, SxcWebApi } from '..';\r\nimport { NoJQ } from '../../../../core';\r\nimport { AjaxSettings } from './ajax-settings';\r\n\r\ndeclare const window: Window;\r\n\r\n/** @internal */\r\nexport class AjaxPromise {\r\n  constructor(private api: SxcWebApi, private sxc: Sxc) {\r\n  }\r\n\r\n  /**\r\n   * Make a jQuery style promise request\r\n   * @param {AjaxSettings} settings\r\n   * @returns {JQueryPromise<any>}\r\n   * @memberof AjaxPromise\r\n   */\r\n  public makePromise(settings: AjaxSettings): JQueryPromise<any> {\r\n    var headers = this.api.headers();\r\n    // debugger;\r\n    if (window.$ == null) {\r\n      throw new Error('JQuery is now removed from 2sxc installation. Please use newer api like fetch or include JQuery in your project');\r\n    }\r\n    const promise = window.$.ajax({\r\n      async: true,\r\n      dataType: settings.dataType || 'json', // default is json if not specified\r\n      data: JSON.stringify(settings.data),\r\n      contentType: 'application/json',\r\n      type: settings.method,\r\n      url: this.getActionUrl(settings),\r\n      beforeSend(xhr: JQueryXHR) {\r\n        for (var key in headers)\r\n          if (headers.hasOwnProperty(key))\r\n            xhr.setRequestHeader(key, headers[key]);\r\n      },\r\n    }) as JQueryPromise<any>;\r\n\r\n    if (!settings.preventAutoFail)\r\n      promise.fail(this.sxc.showDetailedHttpError);\r\n\r\n    return promise;\r\n  }\r\n\r\n\r\n  /**\r\n   * Generate the correct WebApi url\r\n   * @param settings the settings as they would be in jQuery\r\n   */\r\n  private getActionUrl(settings: AjaxSettings): string {\r\n    var url = settings.url || 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n    // 2020-03-13 stop adding 2sxc endpoint-name, it's already happening in apiUrl so with this it happens 2x\r\n    // var endpoint = settings.endpoint || ToSxcName;\r\n    var base = this.sxc.root.http.apiUrl(url, settings.endpoint);\r\n    // let base = (settings.url)\r\n    //   ? this.sxc.root.http.apiUrl(settings.url) // this.sxc.resolveServiceUrl(settings.url)  // use url -> TODO: change this to use the new root.http.apiUrl\r\n    //   : env.apiRoot('2sxc')               // use controller/action\r\n    //     + 'app/auto/api/' + settings.controller + '/' + settings.action;\r\n\r\n    // if(settings.endpoint)\r\n    //     base = base.replace(env.apiRoot('2sxc'), \r\n    //         env.apiRoot(settings.endpoint));\r\n\r\n    return base + (!settings.params ? '' : ('?' + NoJQ.param(settings.params)));\r\n  }\r\n}\r\n","import { Sxc, SxcGlobal } from '..';\r\nimport { ContextIdentifier } from './context-identifier';\r\n\r\ndeclare const window: Window;\r\n// TODO: copied from selectors in inpage project. Probably best to move selectors from inpage to core\r\nconst toolbarSelector = `.sc-menu[toolbar],.sc-menu[data-toolbar],[sxc-toolbar]`;\r\nconst sxcDivsSelector = 'div[data-edit-context]';\r\n\r\n/**\r\n * returns a 2sxc-instance of the id or html-tag passed in\r\n * @param id\r\n * @param cbid\r\n * @returns {}\r\n * @internal\r\n */\r\nexport function $2sxcGet(id: number | ContextIdentifier | HTMLElement | Sxc, cbid?: number): Sxc {\r\n    const $2sxc = window.$2sxc as SxcGlobal;\r\n    $2sxc.log.add('FindSxcInstance(' + id + ',' + cbid);\r\n    if (!$2sxc._controllers)\r\n        throw new Error('$2sxc not initialized yet');\r\n\r\n    // Test if it already is such an instance, in which case we just preserve it and return it\r\n    // Used in cases where the $2sxc(something) is just used to ensure it really is this\r\n    if (Sxc.is(id)) return id;\r\n\r\n    // check if it's a context identifier\r\n    let ctxId: ContextIdentifier = null;\r\n    if (ContextIdentifier.is(id)) {\r\n        id = ContextIdentifier.ensureCompleteOrThrow(id);\r\n        ctxId = id;\r\n        // create a fake id, based on zone and app because this is used to identify the object in the cache\r\n        id = id.zoneId * 100000 + id.appId;\r\n    } else if (id instanceof HTMLElement && id.matches(toolbarSelector) && !id.closest(sxcDivsSelector)) {\r\n        // for toolbars that are not inside 2sxc modules (e.g. in skin)\r\n        const contextAttribute = id.getAttribute('sxc-context');\r\n        ctxId = JSON.parse(contextAttribute);\r\n        return $2sxcGet(ctxId);\r\n    } else if (typeof id === 'object') {\r\n        // if it's a dom-element, use auto-find\r\n        const idTuple = autoFind(id);\r\n        id = idTuple[0];\r\n        cbid = idTuple[1];\r\n    }\r\n\r\n    // if content-block is unknown, use id of module, and create an ID in the cache\r\n    if (!cbid) cbid = id;\r\n    const cacheKey = id + ':' + cbid;\r\n\r\n    // either get the cached controller from previous calls, or create a new one\r\n    if ($2sxc._controllers[cacheKey]) {\r\n        $2sxc.log.add('Cache found for: ' + cacheKey);\r\n        return $2sxc._controllers[cacheKey];\r\n    }\r\n\r\n    // 2022-06-01 2dm disabled, believe this is for the old .data\r\n    // not found, so also init the data-cache in case it's ever needed\r\n    // if (!$2sxc._data[cacheKey]) $2sxc._data[cacheKey] = {};\r\n\r\n    return ($2sxc._controllers[cacheKey]\r\n        = new Sxc(id, cbid, cacheKey, $2sxc, ctxId));\r\n}\r\n\r\nfunction autoFind(domElement: HTMLElement): [number, number] {\r\n    const containerTag = domElement.closest('.sc-content-block');\r\n    if (!containerTag) return null;\r\n    const iid = containerTag.getAttribute('data-cb-instance');\r\n    const cbid = containerTag.getAttribute('data-cb-id');\r\n    if (!iid || !cbid) return null;\r\n    return [parseInt(iid, 10), parseInt(cbid, 10)];\r\n}\r\n","import { ApiExtensionPlaceholder } from '../constants';\r\nimport { AppApiMarker, HasLog, HeaderNames, ToSxcName } from '../../../core';\r\nimport { ContextIdentifier, Environment } from '..';\r\n\r\n/**\r\n * Global HTTP Service for information and helpers on `$2sxc.http`\r\n */\r\nexport class HttpGlobal extends HasLog {\r\n    /** @internal */\r\n    constructor(private env: Environment) {\r\n        super('Sxc.Http');\r\n    }\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module context.\r\n     * @param id _optional_ module ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call - within a module and content-block context.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id: number, cbid: number, ctx: ContextIdentifier): Record<string, string>;\r\n\r\n    /**\r\n     * All the headers which are needed in an ajax call.\r\n     * Uses a module and content-block context (but these could also be null) \r\n     * and a full context identifier for advanced operations.\r\n     * @param id _optional_ module ID\r\n     * @param cbid _optional_ content block ID\r\n     * @param ctx _optional_ context information to include in the header\r\n     * @returns Dictionary / Record of headers\r\n     */\r\n    headers(id?: number, cbid?: number, ctx?: ContextIdentifier): Record<string, string> {\r\n        const cl = this.log.call('headers', `${id}, ${cbid}`);\r\n        const fHeaders: Record<string, string> = {};\r\n        const pageId = this.env.page().toString();\r\n        if (!ctx?._ignoreHeaders) {\r\n            if (id) fHeaders[HeaderNames.ModuleId] = id.toString();\r\n            if (cbid) fHeaders[HeaderNames.ContentBlockId] = cbid.toString();\r\n            fHeaders[HeaderNames.TabId] = pageId;\r\n            fHeaders[HeaderNames.PageId] = pageId;\r\n        }\r\n        fHeaders[this.env.rvtHeader()] = this.env.rvt();\r\n        return cl.return(fHeaders, `headers(id:${id}, cbid:${cbid})`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for a specific extension/endpoint\r\n     * @param endpointName \r\n     * @returns {string}\r\n     * @memberof Http\r\n     * @internal Not relevant for 2sxc, only used if calling platform endpoints\r\n     */\r\n    apiRoot(endpointName: string): string {\r\n        const cl = this.log.call('apiRoot');\r\n        var result = this.env.api().replace(ApiExtensionPlaceholder, endpointName);\r\n        return cl.return(result, `apiRoot('${endpointName}')`);\r\n    }\r\n\r\n    /**\r\n     * Get the API-Root path for Apps\r\n     * new in v12\r\n     * @param {string} endpointName\r\n     * @returns {string}\r\n     * @memberof SxcHttp\r\n     * @internal\r\n     */\r\n     appApiRoot(): string {\r\n        const cl = this.log.call('appApiRoot');\r\n        // try to get it, or fall back to the previous / old convention\r\n        var result = this.env.appApi() ?? this.apiRoot(ToSxcName);\r\n        return cl.return(result, `appApiRoot()`);\r\n    }\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName: string): string;\r\n\r\n    /**\r\n     * Convert short urls like `app/auto/api/Posts/All` to the full URL needed.\r\n     * Will ignore urls which clearly already are the full url.\r\n     * @param url short URL like `app/auto/api/Posts/All`\r\n     * @param endpointName _optional_ endpoint name if accessing a different exotic endpoint\r\n     * @returns the converted, long url with the full endpoint\r\n     */\r\n    apiUrl(url: string, endpointName?: string): string\r\n    {\r\n        const cl = this.log.call('apiUrl');\r\n        this.log.add(`apiUrl(url:'${url}', endpointName:'${endpointName}')`);\r\n\r\n        // null/undefined check\r\n        if(url == null) return url;\r\n\r\n        // if starts with http: or https: then ignore\r\n        if(!url || url.indexOf('http:') == 0 || url.indexOf('https:') == 0 || url.indexOf('//') == 0)\r\n            return cl.return(url);\r\n\r\n        // if no endpoint specified, then also skip absolute and relative urls\r\n        if(!endpointName && (url.indexOf('/') == 0 || url.indexOf('.') == 0))\r\n            return cl.return(url);\r\n\r\n        var baseUrl = url.toLocaleLowerCase().startsWith(AppApiMarker)\r\n            ? this.appApiRoot()\r\n            : this.apiRoot(endpointName || ToSxcName);\r\n\r\n\r\n        // ensure base ends with slash\r\n        if(baseUrl[baseUrl.length-1] != '/') baseUrl += '/';\r\n        // ensure url doesn't start with slash\r\n        if(url[0] == '/') url = url.slice(1);\r\n        return cl.return(baseUrl + url);\r\n    }\r\n}\r\n","import { TotalPopup } from '../tools/total-popup';\r\nimport { UrlParams } from '../tools/url-params';\r\nimport { Stats } from '../Stats';\r\nimport { Debug, SxcGlobal, Environment } from '..';\r\nimport { Insights, Log, SxcVersion } from '../../../core';\r\nimport { $2sxcGet } from './sxc-global-get';\r\nimport { HttpGlobal } from './http-global';\r\n\r\n\r\n/**\r\n * Build a SXC Controller for the page. Should only ever be executed once\r\n * @internal\r\n */\r\nexport function buildSxcRoot(): SxcGlobal {\r\n    const rootApiV2 = getRootPartsV2();\r\n\r\n    const urlManager = new UrlParams();\r\n    const debug = new Debug();\r\n    const stats = new Stats();\r\n\r\n\r\n    const addOn: Partial<SxcGlobal> = {\r\n        get: $2sxcGet,\r\n        _controllers: {} as any,\r\n        beta: {},\r\n        // 2022-06-01 2dm disabled, believe this is for the old .data\r\n        // _data: {},\r\n        // this creates a full-screen iframe-popup and provides a close-command to finish the dialog as needed\r\n        totalPopup: new TotalPopup(),\r\n        urlParams: urlManager,\r\n        // note: I would like to remove this from $2sxc, but it's currently\r\n        // used both in the inpage-edit and in the dialogs\r\n        // debug state which is needed in various places\r\n        debug,\r\n        stats: stats,\r\n        insights: (partName: string, index?: number, start?: number, length?: number) => Insights.show(partName, index, start, length),\r\n        _insights: Insights,\r\n\r\n        // 2022-06-01 2dm removed, don't think this is used anywhere\r\n        // mini-helpers to manage 2sxc parts, a bit like a dependency loader\r\n        // which will optimize to load min/max depending on debug state\r\n        // parts: {\r\n        //     getUrl(url: string, preventUnmin: boolean) {\r\n        //         // let r = url;// (preventUnmin || !debug.load) ? url : url.replace('.min', ''); // use min or not\r\n        //         if (debug.uncache && url.indexOf('sxcver') === -1)\r\n        //             return url + ((url.indexOf('?') === -1) ? '?' : '&') + 'sxcver=' + debug.uncache;\r\n        //         return url;\r\n        //     },\r\n        // },\r\n    };\r\n\r\n    const merged = Object.assign($2sxcGet, addOn, rootApiV2) as SxcGlobal;\r\n    merged.log.add('sxc controller built');\r\n\r\n    console.log(`$2sxc ${SxcVersion} with insights-logging - see https://r.2sxc.org/insights`)\r\n\r\n    return merged;\r\n}\r\n\r\n/** @internal */\r\nfunction getRootPartsV2(): Partial<SxcGlobal> {\r\n    const log = new Log('$2sxc', null, 'building');\r\n    var env = new Environment();\r\n    return {\r\n        sysinfo: {\r\n            version: SxcVersion,\r\n            description: 'The 2sxc Controller - read more about it on docs.2sxc.org',\r\n        },\r\n        env: env,\r\n        http: new HttpGlobal(env),\r\n        log: log,\r\n    };\r\n}\r\n","/**\r\n * Metadata Target Types\r\n * \r\n * These are constants to determine what something is assigned to (e.g. it describes an Entity, a file, etc.)\r\n * \r\n * Use it for the @see MetadataFor objects\r\n */\r\nexport enum TargetTypes {\r\n  /** \r\n   * Undefined Type (0) - included for completeness.\r\n   * Not usually used, actually None (1) is the default\r\n   */\r\n  Undefined = 0,\r\n\r\n  /** \r\n   * Things that are not used as Metadata (1). This is the default for most Entities.\r\n   */\r\n  None = 1,\r\n\r\n  /** \r\n   * Metadata of attributes / fields (2). This is used to store configuration like the field label, amount-of-rows, etc.\r\n   * Remarks = \r\n   * The key is always a number (int) pointing to the Attribute ID in the DB.\r\n   */\r\n  Attribute = 2,\r\n\r\n  /** \r\n   * App metadata (3). Used to give Apps additional properties. \r\n   * Remarks = \r\n   * The key should always be an int ID of the App.\r\n   */\r\n  App = 3,\r\n\r\n  /** \r\n   * Metadata of entities / data-items (4). \r\n   * This lets us enhance entities with additional information. \r\n   * Remarks = \r\n   * The Key should always be a GUID\r\n   */\r\n  Entity = 4,\r\n\r\n  /** \r\n   * Metadata of a content-type / data-schema (5). Used to give it a description etc. \r\n  */\r\n  ContentType = 5,\r\n\r\n  /** \r\n   * Zone metadata (6) - used to give a Zone additional information. \r\n   * Only used in very special cases, best not use.\r\n   */\r\n  Zone = 6,\r\n\r\n  /** \r\n   * Item / Object of the Platform, like a File or Folder etc. (10)\r\n   * Remarks = \r\n   * * The key is usually a string to further specify what it's describing, like \"file:72\"\r\n   * * The text equivalent is CmsObject\r\n   */\r\n  CmsItem = 10,\r\n\r\n  /** \r\n   * The entire system / platform - so Metadata for the current Dnn/Oqtane installation (11).\r\n   * Remarks = \r\n   * This is not in use as of now, just added for completeness sakes.\r\n   * New in v13\r\n   */\r\n  System = 11,\r\n\r\n  /** \r\n   * A Site - like the current site (12)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Site = 12,\r\n\r\n  /** \r\n   * A Site - like the current site (13)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  SiteVariant = 13,\r\n\r\n  /** \r\n   * A Page - like the current page (14)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Page = 14,\r\n\r\n  /** \r\n   * A Page - like the current page (15) \r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  PageVariant = 15,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (16) \r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  Module = 16,\r\n\r\n  /** \r\n   * A Module - like a module containing some content (17)\r\n   * Remarks = New in v13 / beta</remarks>\r\n   */\r\n  // [PrivateApi]\r\n  ModuleVariant = 17,\r\n\r\n  /** \r\n   * A User - like the admin-user (18)\r\n   * Remarks = New in v13</remarks>\r\n   */\r\n  User = 18,\r\n\r\n  /** Custom target (90). This is what you should use for basic apps which have a custom target that's none of the other defaults. */\r\n  Custom = 90,\r\n\r\n  /** Custom target (91). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom1 = 91,\r\n  /** Custom target (92). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom2 = 92,\r\n  /** Custom target (93). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom3 = 93,\r\n  /** Custom target (94). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom4 = 94,\r\n  /** Custom target (95). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom5 = 95,\r\n  /** Custom target (96). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom6 = 96,\r\n  /** Custom target (97). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom7 = 97,\r\n  /** Custom target (98). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom8 = 98,\r\n  /** Custom target (99). Use this for basic apps which need multiple different custom targets (advanced, rare use case) */\r\n  Custom9 = 99,\r\n}\r\n","\r\nexport * from './url-params';\r\nexport * from './total-popup';","\r\nexport * from './environment-specs';\r\nexport * from './root-environment';\r\n","/**\r\n * Special version which is filled in during compile by the definePlugin\r\n * The real version comes from the main package.json file in this repo\r\n * The sub-projects also use this version\r\n */\r\ndeclare const ROOTVERSION: string;\r\n\r\n/** @internal */\r\nexport const ToSxcName = \"2sxc\";\r\n\r\n/** @internal */\r\nexport const SxcVersion = ROOTVERSION;\r\n\r\n/** @internal */\r\nexport const SxcApiUrlRoot = 'desktopmodules/2sxc/api/';\r\n\r\n/** @internal */\r\nexport const HeaderNames = {\r\n    // 2sxc specific header\r\n    ContentBlockId: \"ContentBlockId\",\r\n\r\n    // headers as defined by DNN\r\n    ModuleId: \"ModuleId\",\r\n    TabId: \"TabId\",\r\n\r\n    // Header which should replace \"TabId\" in the long run\r\n    PageId: \"PageId\",\r\n};\r\n\r\n/** @internal */\r\nexport const ApiUrlRoots = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n/** @internal */\r\nexport const AppApiMarker = 'app';\r\n\r\n// TODO: this should later lead to remapping of old url calls, but it's not in use yet\r\n// note that these were always 'auto' so `app-content` would need to be come `app/auto/content`\r\n/** @internal */\r\nexport const AppApiMap = {\r\n    'app-api': 'app/[name]/api',\r\n    'app-query': 'app/[name]/query',\r\n    'app-content': 'app/[name]/content'\r\n};\r\n\r\n// These are Not-Defined-IDs.\r\n// Because\r\n\r\n/**\r\n * This is a marker for an ID which is not defined\r\n * This is for situations where a 0 or even a negative number\r\n * could be real numbers, so this number is so big, it should never be a real ID\r\n * @internal\r\n */\r\nexport const NumberNotDefinedHuge = 274200000000;\r\n","\r\n/**\r\n * Object manipulator helpers\r\n * @internal\r\n */\r\nexport class Obj {\r\n    /**\r\n     * This is the same as Object.assign, but type-safe.\r\n     * Use it as a replacetment for Object.Assign(this, ... ) in constructors\r\n     */\r\n    static TypeSafeAssign <T, K extends keyof T>(...args: T[]) {\r\n        args.reduce( (result, current) =>\r\n            (Object.keys(current) as K[]).reduce((target, key) => {\r\n                target[key] = current[key];\r\n                return target;\r\n            }, result)\r\n        , args[0]);\r\n    }\r\n\r\n    static DeepClone<T>(original: T, ignoreCircular = false): T {\r\n        if(original === undefined || original === null)\r\n            return original;\r\n        const str = ignoreCircular ? JSON.stringify(original, getCircularReplacer) : JSON.stringify(original);\r\n        if(str === undefined || str === null)\r\n            return original;\r\n        return JSON.parse(str) as T;\r\n    }\r\n}\r\n\r\n\r\nconst getCircularReplacer = () => {\r\n    const seen = new WeakSet();\r\n    return (_:any, value: any) => {\r\n      if (typeof value === \"object\" && value !== null) {\r\n        if (seen.has(value)) {\r\n          return;\r\n        }\r\n        seen.add(value);\r\n      }\r\n      return value;\r\n    };\r\n  };\r\n","/** @internal */\r\nexport class NoJQ {\r\n\r\n    /** https://api.jquery.com/ready/ */\r\n    static ready(callback: () => void): void {\r\n        if (document.readyState === 'complete') {\r\n            callback();\r\n        } else {\r\n            document.addEventListener('DOMContentLoaded', () => callback(), { once: true });\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/jquery.param/ */\r\n    static param(obj: any): string {\r\n        const param = Object.entries(obj)\r\n            .map(([k, v]) => `${encodeURIComponent(k)}=${v == null ? '' : typeof v === 'string' ? encodeURIComponent(v) : encodeURIComponent(JSON.stringify(v))}`)\r\n            .join('&');\r\n        return param;\r\n    }\r\n\r\n    /** Build DOM elements from string */\r\n    static domFromString(string: string): HTMLElement[] {\r\n        // build elements from string into dummy parent\r\n        const dummyParent = document.createElement('div');\r\n        dummyParent.insertAdjacentHTML('afterbegin', string);\r\n\r\n        // scripts created from string are not executable and have to recreated manually to be executable\r\n        Array.from(dummyParent.querySelectorAll('script')).forEach((brokenScript) => {\r\n            const workingScript = document.createElement('script');\r\n            // copy attributes\r\n            Array.from(brokenScript.attributes).forEach((attribute) => {\r\n                workingScript.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n            });\r\n            // copy inline part\r\n            workingScript.textContent = brokenScript.textContent;\r\n            // replace a non executable script with executable one\r\n            NoJQ.replaceWith(brokenScript, workingScript, false);\r\n        });\r\n\r\n        // remove created elements from dummy parent so it can be garbage collected\r\n        const elements = Array.from(dummyParent.children) as HTMLElement[];\r\n        elements.forEach((element) => {\r\n            dummyParent.removeChild(element);\r\n        });\r\n        return elements;\r\n    }\r\n\r\n    /** https://api.jquery.com/offset/ */\r\n    static offset(element: HTMLElement): { left: number; top: number; } {\r\n        const clientRect = element.getBoundingClientRect();\r\n        const offset: { left: number; top: number; } = {\r\n            top: clientRect.top + window.scrollY,\r\n            left: clientRect.left + window.scrollX,\r\n        };\r\n        return offset;\r\n    }\r\n\r\n    /** https://api.jquery.com/width/ */\r\n    static width(element: HTMLElement): number {\r\n        // jquery width === offsetWidth - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const width = element.offsetWidth === 0\r\n            ? 0\r\n            : element.offsetWidth\r\n            - (parseInt(computedStyle.getPropertyValue('border-left-width'), 10) + parseInt(computedStyle.getPropertyValue('border-right-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-left'), 10) + parseInt(computedStyle.getPropertyValue('padding-right'), 10));\r\n        return width;\r\n    }\r\n\r\n    /** https://api.jquery.com/height/ */\r\n    static height(element: HTMLElement): number {\r\n        // jquery height === offsetHeight - borders - padding\r\n        const computedStyle = getComputedStyle(element);\r\n        const height = element.offsetHeight === 0\r\n            ? 0\r\n            : element.offsetHeight\r\n            - (parseInt(computedStyle.getPropertyValue('border-top-width'), 10) + parseInt(computedStyle.getPropertyValue('border-bottom-width'), 10))\r\n            - (parseInt(computedStyle.getPropertyValue('padding-top'), 10) + parseInt(computedStyle.getPropertyValue('padding-bottom'), 10));\r\n        return height;\r\n    }\r\n\r\n    /** https://api.jquery.com/outerWidth/ */\r\n    static outerWidth(element: HTMLElement): number {\r\n        const outerWidth = element.offsetWidth;\r\n        return outerWidth;\r\n    }\r\n\r\n    /** https://api.jquery.com/empty/ */\r\n    static empty(element: HTMLElement): void {\r\n        Array.from(element.childNodes).forEach((n) => {\r\n            element.removeChild(n);\r\n        });\r\n    }\r\n\r\n    /** https://api.jquery.com/replacewith/ */\r\n    static replaceWith(toBeReplaced: HTMLElement, newElement: HTMLElement, runScripts: boolean): void {\r\n        const parent = toBeReplaced.parentElement;\r\n\r\n        // disable scripts before replacing dom\r\n        const scripts = Array.from(newElement.querySelectorAll('script'));\r\n        const restores: ScriptTypeRestore[] = [];\r\n        scripts.forEach((script) => {\r\n            restores.push({ script, type: script.type });\r\n            script.type = null;\r\n        });\r\n\r\n        // replace dom\r\n        parent.replaceChild(newElement, toBeReplaced);\r\n\r\n        // enable scripts\r\n        restores.forEach((restore) => {\r\n            restore.script.type = restore.type;\r\n        });\r\n\r\n        if (runScripts) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n\r\n    /** https://api.jquery.com/append/ */\r\n    static append(parent: HTMLElement, newElements: HTMLElement[], runScripts: boolean): void {\r\n        const scripts: HTMLScriptElement[] = [];\r\n\r\n        newElements.forEach((element) => {\r\n            if (element.tagName.toLocaleLowerCase() === 'script') {\r\n                const script = element as HTMLScriptElement;\r\n                // disable script before inserting to the dom\r\n                const restoreType = script.type;\r\n                script.type = null;\r\n                // insert to dom\r\n                parent.appendChild(script);\r\n                // enable script\r\n                script.type = restoreType;\r\n                scripts.push(script);\r\n            } else {\r\n                parent.appendChild(element);\r\n            }\r\n        });\r\n\r\n        if (runScripts && scripts.length > 0) {\r\n            // run scripts manually to ensure proper timing\r\n            AssetsLoader.runScripts(scripts, undefined);\r\n        }\r\n    }\r\n}\r\n\r\n/** @internal */\r\nexport class AssetsLoader {\r\n\r\n    /** Asynchronously runs external and inline scripts in series */\r\n    static runScripts(scripts: HTMLScriptElement[], callback: () => void): void {\r\n        const script = scripts[0];\r\n        const others = scripts.slice(1);\r\n        if (script == null) {\r\n            callback?.();\r\n            return;\r\n        }\r\n\r\n        // create copy\r\n        const copy = document.createElement('script');\r\n        // attributes\r\n        Array.from(script.attributes).forEach((attribute) => {\r\n            copy.setAttribute(attribute.nodeName, attribute.nodeValue);\r\n        });\r\n        // inline part\r\n        copy.textContent = script.textContent;\r\n\r\n        // if src then insert in head, wait for onload or onerror, remove from head and move to next one\r\n        if (copy.type && copy.src) {\r\n            const listener = () => {\r\n                copy.onload = null;\r\n                copy.onerror = null;\r\n                document.head.removeChild(copy);\r\n                this.runScripts(others, callback);\r\n            };\r\n            copy.onload = listener;\r\n            copy.onerror = listener;\r\n            document.head.appendChild(copy);\r\n            return;\r\n        }\r\n\r\n        // if no src then inline, insert to head and remove instantly and move to next one\r\n        setTimeout(() => {\r\n            document.head.appendChild(copy);\r\n            document.head.removeChild(copy);\r\n            this.runScripts(others, callback);\r\n        });\r\n    }\r\n}\r\n\r\ninterface ScriptTypeRestore {\r\n    script: HTMLScriptElement;\r\n    type: string;\r\n}\r\n","\r\nexport * from './sxc';\r\nexport * from './sxc-manage';\r\nexport * from './web-api/sxc-web-api';\r\nexport * from './web-api/ajax-promise';\r\nexport * from './web-api/ajax-settings';\r\n","\r\nexport * from './context-identifier';\r\nexport * from './sxc-global';\r\nexport * from './debug';\r\nexport * from './sxc-global-bootstrap';","import { UrlParams } from '..';\r\n\r\nconst urlManager = new UrlParams();\r\nconst urlDebugState = urlManager.isDebug() === true;\r\n\r\n/** @internal */\r\nexport class Debug {\r\n    /**\r\n     * The load-debug state (provided by the url with debug=true)\r\n     */\r\n    load: boolean;\r\n\r\n    /**\r\n     * Cache breaker string, contans the version number of 2sxc if one is provided with sxcver=...\r\n     */\r\n    uncache: string;\r\n\r\n    constructor() {\r\n        this.load = urlDebugState;\r\n        this.uncache = urlManager.get('sxcver');\r\n    }\r\n}\r\n","/** @internal */\r\nexport enum LogEntryOptions {\r\n    log = 'log',\r\n    warn = 'warn',\r\n    error = 'error',\r\n    throw = 'throw',\r\n}\r\n","import { Log } from '.';\r\n\r\n/**\r\n * Any object that has an own log object\r\n * @export\r\n * @interface HasLog\r\n */\r\nexport abstract class HasLog {\r\n  /**\r\n   * The logger for this object\r\n   * @type {Log}\r\n   * @memberof HasLog\r\n   * @internal usually not relevant and could make docs confusing\r\n   */\r\n  log: Log;\r\n\r\n  /**\r\n   * initialize the logger\r\n   * ideally it has a parent-logger to attach to\r\n   * @param logName name to show in the logger\r\n   * @param parentLog parent-logger to attach to\r\n   * @param initialMessage optional start-message to log\r\n   * @internal\r\n   */\r\n  constructor(\r\n    logName: string,\r\n    /** @internal */\r\n    private parentLog?: Log,\r\n    initialMessage?: string,\r\n  ) {\r\n    this.initLogInternal(logName, parentLog, initialMessage);\r\n  }\r\n\r\n  /** @internal */\r\n  public initLog = (name: string, parentLog?: Log, initialMessage?: string)\r\n    : void => this.initLogInternal(name, parentLog, initialMessage)\r\n\r\n  /** @internal */\r\n  private initLogInternal(name: string, parentLog?: Log, initialMessage?: string): void {\r\n    if (this.log == null)\r\n        // standard & most common case: just create log\r\n        this.log = new Log(name, parentLog, initialMessage);\r\n    else {\r\n    // late-init case, where the log was already created - just reconfig keeping what was in it\r\n      this.log.rename(name);\r\n      this.log.linkLog(parentLog);\r\n      if (initialMessage != null)\r\n        this.log.add(initialMessage);\r\n    }\r\n  }\r\n\r\n}\r\n","import { LogEntry, LogCall } from '.';\r\n\r\nconst keepData = location.search.indexOf(\"debug=true\") !== -1;\r\n\r\nconst maxScopeLen = 3;\r\nconst maxNameLen = 6;\r\nconst liveDump = false;\r\nconst maxEntriesReached = 'Maximum amount of entries added to log, will stop adding more';\r\n\r\n/**\r\n * A log object which will collect log entries for another ojbect\r\n * @export\r\n * @interface Log\r\n */\r\nexport class Log {\r\n\r\n    /**\r\n     * List of all entries added to this log\r\n     */\r\n    entries = new Array<LogEntry>();\r\n    /** @internal */\r\n    private depth = 0;\r\n    /** @internal */\r\n    private callDepths: string[] = [];\r\n    /** @internal */\r\n    startTime: number;\r\n\r\n    /**\r\n     * Maximum amount of entries to add - to prevent memory hoging\r\n     */\r\n    maxEntries = 1000;\r\n\r\n    /**\r\n     * Create a logger and optionally attach it to a parent logger\r\n     * @param string name this logger should use\r\n     * @param Log optional parrent logger to attach to\r\n     * @param string optional initial message to log\r\n     * @internal\r\n     */\r\n    constructor(name: string, parent?: Log, initialMessage?: string) {\r\n        this.rename(name);\r\n        this.linkLog(parent);\r\n        this.startTime = new Date().getTime();\r\n        if (initialMessage != null) this.add(initialMessage);\r\n    }\r\n\r\n    /* if we should live-dump, can be selectively activated */\r\n    /** @internal */\r\n    liveDump: boolean = liveDump;\r\n    /** @internal */\r\n    _parentHasLiveDump: boolean = false;\r\n    /** @internal */\r\n    keepData: boolean = keepData;\r\n    /** @internal */\r\n    _parentHasKeepData: boolean = false;\r\n\r\n    /**\r\n     * Full identifier of this log-object, with full hierarchy\r\n     * @internal\r\n     */\r\n    fullIdentifier = (): string =>\r\n        `${(this.parent ? this.parent.fullIdentifier() : '')}${this.identifier()}`\r\n\r\n    /**\r\n     * give this logger a new name\r\n     * usually happens in constructor, but in rare cases\r\n     * it's called manually\r\n     * @param name\r\n     * @internal\r\n     */\r\n    rename(name: string): void {\r\n        try {\r\n            const dot = name.indexOf('.');\r\n            this.scope = dot > 0 ? name.substr(0, Math.min(dot, maxScopeLen)) + '.' : '';\r\n            const rest = dot > 0 ? name.substr(dot + 1) : name;\r\n            this.name = rest.substr(0, Math.min(rest.length, maxNameLen));\r\n            this.name = this.name.substr(0, Math.min(this.name.length, maxNameLen));\r\n        } catch (e) {\r\n            /* ignore */\r\n        }\r\n    }\r\n\r\n    /**\r\n     * link this log to a parent\r\n     * usually happens in constructor, but in rare cases\r\n     * this must be called manually\r\n     * @internal\r\n     */\r\n    linkLog = (parent: Log): void => {\r\n        this.parent = parent || this.parent; // if new parent isn't defined, don't replace\r\n        if (this.parent) {\r\n            this._parentHasLiveDump = this.parent.liveDump || this.parent._parentHasLiveDump;\r\n            this._parentHasKeepData = this.parent.keepData || this.parent._parentHasKeepData;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add a simple message to the log\r\n     * @param {string} message\r\n     * @memberof Log\r\n     *\r\n     * preferred usage is with string parameter:\r\n     * log.add(`description ${ parameter }`);\r\n     *\r\n     * in case that we experience error with normal string parameter, we can use arrow function to enclose parameter like this () => parameter\r\n     * but use it very rarely, because there is certainly a performance implication!\r\n     * log.add(`description ${() => parameter}`);\r\n     */\r\n    add(message: (() => string) | string, data?: unknown): string {\r\n        // check if the log is already too big\r\n        if(this.entries.length > this.maxEntries) \r\n            return this._prepareMessage(message);\r\n\r\n        // if we just reached the max, add special message\r\n        if(this.entries.length === this.maxEntries) \r\n            this._addEntry(this._prepareEntry(maxEntriesReached));\r\n\r\n        const entry = this._prepareEntry(message, data);\r\n        this._addEntry(entry);\r\n        return entry.message;\r\n    }\r\n\r\n    /** @internal */\r\n    addData(message: (() => string) | string, data: unknown): void {\r\n        if (this.logData()) this.add(message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    logData(): boolean {\r\n        return this.keepData || this._parentHasKeepData;\r\n    }\r\n\r\n    /** @internal */\r\n    _prepareEntry(message: (() => string) | string, data?: unknown): LogEntry {\r\n        const msg = this._prepareMessage(message);\r\n        const time = new Date().getTime() - this.startTime;\r\n        const entry = new LogEntry(this, msg, this.depth, time, data);\r\n        return entry;\r\n    }\r\n\r\n    /** @internal */\r\n    private _prepareMessage(message: (() => string) | string): string {\r\n        if (message instanceof Function) {\r\n            try {\r\n                return ((message as () => string)());\r\n            } catch (e) {\r\n                return 'err: message undefined';\r\n            }\r\n        }\r\n        return message.toString();\r\n    }\r\n\r\n    /** @internal */\r\n    call(name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }): LogCall {\r\n        return new LogCall(this, name, callParams, message, data);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthAdd(name: string): void {\r\n        this.depth++;\r\n        this.callDepths.push(name);\r\n    }\r\n\r\n    /** @internal */\r\n    _callDepthRemove(name: string): void {\r\n        this.depth--;\r\n        const last = this.callDepths.pop();\r\n        if (last !== name) {\r\n            console.warn(`log: call depth reduced by '${name}' but last was '${last}'`);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * helper to create a text-output of the log info\r\n     * @param separator\r\n     * @param start\r\n     * @param end\r\n     * @internal\r\n     */\r\n    dump(one: LogEntry = null, separator = ' - '): void {\r\n        if (one) this.dumpOne(0, one, separator);\r\n        else this.dumpList();\r\n    }\r\n\r\n    /** @internal */\r\n    dumpList(start: number = 0, length?: number) {\r\n        let index = start;\r\n        this.entries\r\n            .slice(start, length ? start + length : undefined           )\r\n            .forEach((e) => this.dumpOne(index++, e));\r\n    }\r\n\r\n    /** @internal */\r\n    private dumpOne(index: number, e: LogEntry, separator = ' - '): void {\r\n        const result = (e.result) ? ' =' + e.result : '';\r\n        const line = ('0000' + index).slice(-4) + ' ' + e.source() + separator + '..'.repeat(e.depth) + e.message + result;\r\n        if (e.data) console.log(line, e.data);\r\n        else console.log(line);\r\n    }\r\n\r\n\r\n    /**\r\n     * add an entry-object to this logger\r\n     * this is often called by sub-loggers to add to parent\r\n     * @param entry\r\n     * @internal\r\n     */\r\n    _addEntry(entry: LogEntry): void {\r\n        if (this.liveDump) this.dump(entry);\r\n        this.entries.push(entry);\r\n        if (this.parent) this.parent._addEntry(entry);\r\n    }\r\n\r\n    /**\r\n     * helper to generate a random 2-char ID\r\n     * @param stringLength\r\n     * @internal\r\n     */\r\n    private randomString(stringLength: number): string {\r\n        const chars = '0123456789abcdefghiklmnopqrstuvwxyz';\r\n        let randomstring = '';\r\n        for (let i = 0; i < stringLength; i++) {\r\n            const rnum = Math.floor(Math.random() * chars.length);\r\n            randomstring += chars.substring(rnum, rnum + 1);\r\n        }\r\n        return randomstring;\r\n    }\r\n\r\n    /**\r\n     * parent logger - important if loggers are chained\r\n     * @internal\r\n     */\r\n    private parent: Log;\r\n\r\n    /**\r\n     * scope of this logger - to easily see which ones\r\n     * are about the same topic\r\n     * @internal\r\n     */\r\n    private scope = 'tdo';\r\n\r\n    /**\r\n     * The name of this log, for scenarios where multiple loggers are mixed\r\n     */\r\n    public name = 'unknwn';\r\n\r\n\r\n    /**\r\n     * Unique 2-character ID of this specific log object\r\n     * @internal\r\n     */\r\n    private id = (): string => this.idCache || (this.idCache = this.randomString(2));\r\n    /** @internal */\r\n    private idCache: string;\r\n\r\n    /**\r\n     * Unique identifier of this log object, with name and ID\r\n     * @internal\r\n     */\r\n    private identifier = (): string => `${this.scope}${this.name}(${this.id()})`;\r\n\r\n}\r\n","import { LogEntry, Log, LogEntryOptions as LEO } from '.';\r\n\r\n/** @internal */\r\nexport class LogCall {\r\n    /** The initial entry created - important for later attaching the final result of the call */\r\n    public initialEntry: LogEntry;\r\n\r\n    constructor(public log: Log, public name: string, callParams?: string, message?: string, data?: {[key:string]: unknown }) {\r\n        this.initialEntry = this.log._prepareEntry(name + '(' + (callParams || '') + ')');\r\n        this.log._callDepthAdd(name);\r\n        this.log._addEntry(this.initialEntry);\r\n        if (typeof message === 'string') this.add(message);\r\n        if (data) for (let key in data) this.data('initial:' + key, data[key]);\r\n    }\r\n\r\n    private lastMessage: string;\r\n\r\n    add(message: string, data?: unknown, behavior?: LEO) {\r\n        this.lastMessage = message;\r\n        this.log.add(message, data);\r\n        if (behavior) this.processExtraBehavior(behavior, message, data);\r\n    }\r\n\r\n    onlyAddIfNew(message: string, behavior?: LEO) {\r\n        if (this.lastMessage !== message)\r\n        this.add(message);\r\n        if (behavior) this.processExtraBehavior(behavior, message, undefined);\r\n    }\r\n\r\n    /** Add data - but only if data logging is enabled */\r\n    data(message: string, data: unknown) {\r\n        this.log.addData(message, data);\r\n    }\r\n\r\n    done(message?: string, behavior?: LEO): void {\r\n        this.return(null, message || '👍', behavior);\r\n    }\r\n\r\n    return<T>(result: T, message?: string, behavior?: LEO) {\r\n        message = message || '👍';\r\n        this.initialEntry.result = message;\r\n        this.log._callDepthRemove(this.name);\r\n\r\n        // if we're in keep-data / debug mode, keep that\r\n        this.initialEntry.data = result;\r\n\r\n        // if we're in live-dump mode, then the entry was already dumped, show again\r\n        if (this.log.liveDump || this.log._parentHasLiveDump)\r\n            this.add(this.name + ' = ' + message, result);\r\n\r\n        if (behavior) this.processExtraBehavior<T>(behavior, message, result);\r\n        return result;\r\n    }\r\n\r\n    /* \r\n     * treat all extra output or errors\r\n     * to allow setting a debug stop point when needed\r\n     * then you can trace the stack-call to see where the error originated\r\n     */\r\n    private processExtraBehavior<T>(behavior: LEO, message: string, data: T) {\r\n        if (behavior === LEO.log) console.log(message, data);\r\n        if (behavior === LEO.warn) console.warn(message, data);\r\n        if (behavior === LEO.error || behavior === LEO.throw) console.error(message, data);\r\n        if (behavior === LEO.throw) throw message;\r\n    }\r\n}\r\n","import { Obj } from '../plumbing';\r\nimport { Log } from '.';\r\n\r\n/**\r\n * A log entry item\r\n * @export\r\n * @interface LogEntry\r\n */\r\nexport class LogEntry {\r\n\r\n    /**\r\n     * The result of an operation - treated differently in the output\r\n     * @internal\r\n     */\r\n    public result: string;\r\n\r\n\r\n    /**\r\n     * Data which is logged - if data-logging is enabled\r\n     * @internal\r\n     */\r\n    get data(): unknown {\r\n        return this._data;\r\n    }\r\n    /** @internal */\r\n    set data(data: unknown) {\r\n        if (data === undefined) return;\r\n        if (this.log.logData())\r\n            this._data = Obj.DeepClone(data, true);\r\n    }\r\n    /** @internal */\r\n    private _data?: unknown;\r\n\r\n    /** @internal */\r\n    public source = (): string => this.log.fullIdentifier();\r\n\r\n    /** @internal */\r\n    constructor(\r\n        /** @internal */\r\n        private log: Log,\r\n        public message: string,\r\n        /** @internal */\r\n        public depth: number,\r\n        /** A timestamp for this entry to better see sequences of things happening */\r\n        public time: number,\r\n        data?: unknown,\r\n        ) {\r\n            if (data) {\r\n                // #2492 - jQuery isn't used any more in 2sxc\r\n                // if (data instanceof jQuery) {\r\n                //     const jq = data as JQuery;\r\n                //     this.data = {\r\n                //         isJQuery: true,\r\n                //         original: jq,\r\n                //         html: jq.length && jq[0].outerHTML,\r\n                //     };\r\n                // } \r\n                // else\r\n                    this.data = data;\r\n            }\r\n    }\r\n\r\n}\r\n","import { HasLog, Log } from '.';\r\n\r\ndeclare const window: Window;\r\n\r\ntype LogList = Array<{ key: string, log: Log}>;\r\n\r\nconst msgIntro = 'This is the $2sxc JS Insights - see https://r.2sxc.org/insights \\n'\r\n    + 'Add ?debug=true to the url to log more data. \\n'\r\n    + 'Copy/paste code lines below to see details. \\n'\r\n    + '----------------------------------------------------------------------\\n';\r\n\r\nclass InsightsSingleton extends HasLog {\r\n\r\n    constructor() {\r\n        super('Sys.Insght');\r\n        this.add('system', 'insights', this.log);\r\n        this.log.add(`this log is usually empty, as it's just a helper tool`)\r\n    }\r\n\r\n    history: { [key: string]: InsightsLogSet } = {};\r\n\r\n    add(setName: string, logName: string, log: Log ) {\r\n        if (!(setName in this.history))\r\n            this.history[setName] = new InsightsLogSet(setName);\r\n        this.history[setName].logs.push({key: logName, log: log});\r\n    }\r\n\r\n    show(partName: string, index?: number, start?: number, length?: number): void {\r\n        // if nothing specified, list what to do to see inner parts\r\n        if (!partName) {\r\n            const keys = Object.keys(this.history);\r\n            console.log(`${msgIntro}${keys.length} insights-sections found: \\n` + keys.map((p) => `$2sxc.insights('${p}');`).join('\\n'));\r\n            return;\r\n        }\r\n\r\n        // partName found, check if it exists\r\n        const part = this.history[partName];\r\n        if (!part) {\r\n            console.error(`part '${partName}' not found`);\r\n            return;\r\n        }\r\n\r\n        // We have a partName, but no index - show list and how to get details\r\n        if (index === undefined) {\r\n            let count = 0;\r\n            const logNames = part.logs\r\n                .map((s) => `$2sxc.insights('${partName}', ${count++}); - will show for '${s.key}'`)\r\n                .join('\\n');\r\n            console.log(`'${partName}' contains ${part.logs.length} entries. Copy/paste the code to to see the logs: \\n` + logNames);\r\n            return;\r\n        }\r\n\r\n        // verify the entry exists\r\n        const logSet = part.logs.length >= index && part.logs[index];\r\n        if (!logSet) {\r\n            console.error(`index ${index} not found in part '${partName}'`);\r\n            return;\r\n        }\r\n\r\n        if (!logSet.log) {\r\n            console.error(`found index ${index} on part '${partName}' but it has no logs`);\r\n            return;\r\n        }\r\n\r\n        console.log(`Will dump the log for ${partName}[${index}] '${logSet.key}'`);\r\n        let autoLimit = false;\r\n        if (start === undefined) {\r\n            autoLimit = true;\r\n            start = 0;\r\n            length = 25;\r\n        }\r\n        logSet.log.dumpList(start || 0, length);\r\n        if (autoLimit && logSet.log.entries.length > length)\r\n            console.warn(`Only showing ${length} of ${logSet.log.entries.length} logs. To show all, add start param '..., 0)' or start/length '..., 0, 100)'`)\r\n}\r\n}\r\n\r\n// tslint:disable-next-line: max-classes-per-file\r\nclass InsightsLogSet {\r\n    logs: LogList = [];\r\n    constructor(public name: string) {}\r\n}\r\n\r\n// ensure it's only created once\r\n// this is important, because the inpage code also uses this class\r\n// and would otherwise create the object separately\r\nconst singleton: InsightsSingleton = \r\n    window.$2sxc && window.$2sxc._insights   // try to load existing\r\n    || new InsightsSingleton();             // otherwise create new\r\n\r\n/** @internal */\r\nexport const Insights = singleton;\r\n","import { Sxc } from '..';\r\n\r\n/**\r\n* Base class for anything attached to an sxc-instance\r\n* @internal\r\n*/\r\nexport class SxcPart {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {Sxc} sxc\r\n  * @param {string} partName name of the part\r\n  * @memberof SxcData\r\n  */\r\n  constructor(public sxc: Sxc, public partName: string) {\r\n      \r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { SxcPart } from '../sxc-part';\r\nimport { SxcWebApi } from '../web-api/sxc-web-api';\r\n\r\n/**\r\n* Base class doing common checks\r\n* @internal\r\n*/\r\nexport class SxcDataServiceBase extends SxcPart {\r\n  protected readonly webApi: SxcWebApi;\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {Sxc} sxc\r\n  * @param {string} name the content-type name\r\n  * @memberof SxcData\r\n  */\r\n  constructor(\r\n    sxc: Sxc,\r\n    readonly name: string,\r\n    nameInError: string\r\n  ) {\r\n    super(sxc, 'data');\r\n    this.webApi = sxc.webApi;\r\n    \r\n    // Fail early if something is wrong\r\n    nameInError += ' name ';\r\n    if (name == null) throw nameInError + 'is empty';\r\n    if (name.indexOf(\"/\") != -1 || name.indexOf(\"\\\\\") != -1) throw nameInError + 'has slashes - not allowed';\r\n    if (name.indexOf(\"?\") != -1) throw nameInError + 'has \"?\" - not allowed';\r\n  }\r\n\r\n}\r\n  ","import { Sxc } from '..';\r\nimport { TargetTypes } from '../../data';\r\nimport { MetadataFor } from '../../data/metadata-for';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\nconst ContentApiRoot = 'app/auto/data';\r\n\r\n/**\r\n* Data Service for an App / Sxc-Instance to get/create data of a specific Content-Type\r\n*/\r\nexport class SxcData<T = unknown> extends SxcDataServiceBase {\r\n  /**\r\n  * Creates an instance of SxcData.\r\n  * @param {Sxc} sxc\r\n  * @param {string} name the content-type name\r\n  * @memberof SxcData\r\n  * @internal\r\n  */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'ContentType');\r\n  }\r\n\r\n  /**\r\n   * Get all items of this type.\r\n   */\r\n  getAll(): Promise<T[]> {\r\n    return this.getInternal<T[]>();\r\n  }\r\n\r\n  /**\r\n   * Get the specific item with the ID. It will return null if not found\r\n   */\r\n  getOne(id: number): Promise<T> | null {\r\n    return this.getInternal<T>(id);\r\n  };\r\n\r\n  /** Future\r\n   *  @internal \r\n   */\r\n  private getMany(criteria: Record<string, unknown>, fields: Array<string>): Promise<T[]> {\r\n    throw 'not implemented - probably v13.5 or something';\r\n  }\r\n\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<TCall>(id?: string | number, params?: string | Record<string, unknown>): Promise<TCall> {\r\n    let path = `${ContentApiRoot}/${this.name}`;\r\n    if (id && (typeof id === 'string' || typeof id === 'number')) path += \"/\" + id;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params));\r\n  }\r\n\r\n  /**\r\n   * Create a new entity with the values supplied\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>): Promise<Record<string, unknown>>;\r\n\r\n  /**\r\n   * Create a new entity with the values supplied and also a metadata-for reference\r\n   * @param values a simple object containing the values to create\r\n   */\r\n  create(values: Record<string, unknown>, metadataFor: MetadataFor | string): Promise<Record<string, unknown>>;\r\n\r\n  /** @internal */\r\n  create(values: Record<string, unknown>, metadataFor?: MetadataFor | string): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}`;\r\n    if (metadataFor != null) {\r\n      if (typeof(metadataFor) === 'string')\r\n        metadataFor = { Target: TargetTypes.Entity, Guid: metadataFor } as MetadataFor;\r\n      try {\r\n        values.For = metadataFor;\r\n      } catch { }\r\n    }\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Update an existing entity with the values supplied\r\n   */\r\n  update(id: number, values: Record<string, unknown>): Promise<Record<string, unknown>> {\r\n    const path = `${ContentApiRoot}/${this.name}/${id}`;\r\n    return this.webApi.fetchJson(this.webApi.url(path), values, 'POST');\r\n  }\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param id id of the item to delete\r\n   */\r\n  delete(id: number): Promise<null>;\r\n\r\n  /**\r\n   * Delete an entity\r\n   * @param guid GUID of the item to delete\r\n   */\r\n  delete(guid: string): Promise<null>;\r\n\r\n  /** @internal */\r\n  delete(idOrGuid: number | string): Promise<null> {\r\n    const path = `${ContentApiRoot}/${this.name}/${idOrGuid}`;\r\n    return this.webApi.fetchRaw(this.webApi.url(path), undefined, 'DELETE').then(response => null);\r\n  }\r\n}\r\n\r\n","import { Sxc } from '..';\r\nimport { SxcDataServiceBase } from './sxc-data-service-base';\r\n\r\n/**\r\n * Instance Query Service\r\n */\r\nexport class SxcQuery extends SxcDataServiceBase {\r\n\r\n  /**\r\n   * Creates an instance of SxcQuery.\r\n   * @param {Sxc} sxc\r\n   * @param {string} name\r\n   * @memberof SxcQuery\r\n   * @internal\r\n   */\r\n  constructor(sxc: Sxc, readonly name: string) {\r\n    super(sxc, name, 'Query');\r\n  }\r\n\r\n  getAll<T = unknown>(): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getAll<T = unknown>(urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Retrieve the entire query with all streams\r\n   *\r\n   * @template T\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   * @memberof SxcQuery\r\n   */\r\n  getAll<T = unknown>(urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(undefined, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get just one stream, returning an array of items in that stream\r\n   *\r\n   * @template T\r\n   * @param {string} stream\r\n   * @returns {Promise<T[]>} containing an array of items - or empty if stream not found or nothing returned\r\n   * @memberof SxcQuery\r\n   */\r\n  getStream<T = unknown>(stream: string): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>): Promise<T[]>;\r\n  getStream<T = unknown>(stream: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T[]>;\r\n  \r\n  getStream<T = unknown>(stream: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T[]> {\r\n    if (stream.indexOf(',') !== -1) throw \"parameter 'stream' can only contain one stream name for 'getStream'\";\r\n    return this.getInternal<unknown>(stream, urlParams, data).then((data) => {\r\n      if (data == null || !data.hasOwnProperty(stream)) return [];\r\n      return (data as any)[stream] as T[];\r\n    })\r\n  }\r\n\r\n  getStreams<T = unknown>(streams: string): Promise<T>;\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>): Promise<T>;\r\n  getStreams<T = unknown>(streams: string, urlParams: string | Record<string, unknown>, data: string | Record<string, unknown>): Promise<T>;\r\n  /**\r\n   * Get a query but only the selected streams.\r\n   *\r\n   * @template T\r\n   * @param {string} streams\r\n   * @returns {Promise<T>} containing a object with stream-names and items in the streams.\r\n   * @memberof SxcQuery\r\n   */\r\n  getStreams<T = unknown>(streams: string, urlParams?: string | Record<string, unknown>, data?: string | Record<string, unknown>): Promise<T> {\r\n    return this.getInternal<T>(streams, urlParams, data);\r\n  }\r\n\r\n  /**\r\n   * Get all or one data entity from the backend\r\n   * @param id optional id as number or string - if not provided, will get all\r\n   * @param params optional parameters - ATM not usefuly but we plan to support more filters etc. \r\n   * @returns an array with 1 or n entities in the simple JSON format\r\n   * @internal\r\n   */\r\n  private getInternal<T = unknown>(streams?: string, params?: string | Record<string, any>, data?: string | Record<string, unknown>): Promise<T> {\r\n    let path = \"app/auto/query/\" + this.name;\r\n    if (streams && (typeof streams === 'string')) path += \"?stream=\" + streams;\r\n    return this.webApi.fetchJson(this.webApi.url(path, params), data);\r\n  }\r\n}\r\n","import { SxcPart } from './sxc-part';\r\n\r\n/**\r\n * This is in charge of sxc.cms on the instance level.\r\n * ATM it just has the run command.\r\n * In future, it may also have dedicated command like `layout` etc.\r\n * @internal\r\n */\r\nexport class SxcCms extends SxcPart {\r\n  /**\r\n   * Run a command on this sxc-instance. \r\n   * Requires the Cms parts to be loaded. \r\n   * @param runParams - real type is actually RunParams\r\n   */\r\n  run<T>(runParams: unknown): Promise<void | T> { \r\n    throw 'sxc instance cms.run() requires cms features \"2sxc.JsCms\" to be enabled to work';\r\n  }\r\n}\r\n","import { ContextIdentifier } from '../sxc-root/context-identifier';\r\nimport { SxcWebApi } from './web-api/sxc-web-api';\r\nimport { ApiUrlRoots, HasLog, ToSxcName } from '../../../core';\r\nimport { SxcManage } from './sxc-manage';\r\nimport { SxcData } from './data/sxc-data';\r\nimport { SxcQuery } from './data/sxc-query';\r\nimport { SxcCms } from './sxc-cms';\r\nimport { SxcGlobal } from '..';\r\n\r\n// const serviceScopes = ['app', 'app-sys', 'app-api', 'app-query', 'app-content', 'eav', 'view', 'dnn'];\r\n\r\n/**\r\n* The typical sxc-instance object for a specific DNN module or content-block\r\n*/\r\nexport class Sxc extends HasLog {\r\n  /** @internal */\r\n  private _isSxcInstance = true;\r\n\r\n\r\n  webApi: SxcWebApi;\r\n\r\n  /**\r\n   * manage object which provides access to additional content-management features\r\n   * it only exists if 2sxc is in edit mode (otherwise the JS are not included for these features)\r\n   * @memberof SxcInstance\r\n   * @internal\r\n   */\r\n  manage: SxcManage = null; // initialize correctly later on\r\n\r\n  /**\r\n   * CMS operations on this sxc-instance.\r\n   */\r\n  cms = new SxcCms(this, 'cms');\r\n  \r\n  /** @internal */\r\n  constructor(\r\n    /** the sxc-instance ID, which is usually the DNN Module Id */\r\n    public id: number,\r\n    /**\r\n     * content-block ID, which is either the module ID, or the content-block definition entity ID\r\n     * this is an advanced concept you usually don't care about, otherwise you should research it\r\n     */\r\n    public cbid: number,\r\n    /** \r\n     * the id/key of this instance in the cache for reset\r\n     * @internal\r\n     */\r\n    public cacheKey: string,\r\n    /** \r\n     * The environment information, important for http-calls \r\n     * @internal\r\n     */\r\n    public readonly root: SxcGlobal,\r\n    /** \r\n     * Custom context information provided by the constructor - will replace auto-context detection\r\n     * @internal\r\n     */\r\n    public ctx?: ContextIdentifier,\r\n  ) {\r\n    super('SxcInstance', null, 'Generating for ' + id + ':' + cbid);\r\n    this.webApi = new SxcWebApi(this);\r\n    \r\n    // add manage property, but not within initializer, because inside the manage-initializer it may reference 2sxc again\r\n    try { // sometimes the manage can't be built, like before installing\r\n      if (root._manage) root._manage.initInstance(this);\r\n    } catch (e) {\r\n      console.error('error in 2sxc - will only log but not throw', e);\r\n    }\r\n\r\n    // ensure that data-APIs used incorrectly shows good warnings\r\n    patchDataWithWarnings(this.data);\r\n    \r\n    // this only works when manage exists (not installing) and translator exists too\r\n    if (root._translateInit && this.manage)\r\n    // ensure that we really have a manage context, otherwise we can't initialize i18n and it doesn't make sense\r\n    if (this.manage.context && this.manage.context.app && this.manage.context.app.currentLanguage)\r\n    root._translateInit(this.manage);    // init translate, not really nice, but ok for now\r\n  }\r\n\r\n  /**\r\n   * TypeGuard for TypeScript to verify this is a SxcInstance\r\n   * @param thing \r\n   * @returns \r\n   */\r\n  public static is(thing: unknown): thing is Sxc {\r\n    const maybe = thing as Sxc;\r\n    return maybe._isSxcInstance;\r\n  }\r\n\r\n  /**\r\n   * Get a data service for a specific content-type.\r\n   *\r\n   * @param {string} contentType name of the content type which this service will get\r\n   * @returns SxcData<T>\r\n   * @memberof SxcInstance\r\n   */\r\n  data<T = unknown>(contentType: string) : SxcData<T> {\r\n    return new SxcData<T>(this, contentType);\r\n  }\r\n  \r\n  /**\r\n   * \r\n   * @param query \r\n   * @returns SxcQuery\r\n   * @memberof SxcInstance\r\n   */\r\n  query(query: string) : SxcQuery {\r\n    return new SxcQuery(this, query);\r\n  }\r\n    \r\n    \r\n  /**\r\n  * converts a short api-call path like \"/app/Blog/query/xyz\" to the DNN full path\r\n  * which varies from installation to installation like \"/desktopmodules/api/2sxc/app/...\"\r\n  * @deprecated use http.apiUrl instead\r\n  * @param virtualPath\r\n  * @returns mapped path\r\n  * @internal\r\n  */\r\n  resolveServiceUrl(virtualPath: string) {\r\n    const scope = virtualPath.split('/')[0].toLowerCase();\r\n    \r\n    // stop if it's not one of our special paths\r\n    if (ApiUrlRoots.indexOf(scope) === -1)\r\n    return virtualPath;\r\n    \r\n    return this.root.http.apiRoot(ToSxcName) + scope + '/' + virtualPath.substring(virtualPath.indexOf('/') + 1);\r\n  }\r\n    \r\n    \r\n  /**\r\n   * Show a nice error with more infos around 2sxc\r\n   * @param result \r\n   * @returns \r\n   * @internal\r\n   */\r\n  showDetailedHttpError(result: any): any {\r\n    if (window.console)\r\n    console.log(result);\r\n    \r\n    // check if the error was just because a language file couldn't be loaded - then don't show a message\r\n    if (result.status === 404 &&\r\n      result.config &&\r\n      result.config.url &&\r\n      result.config.url.indexOf('/dist/i18n/') > -1) {\r\n        if (window.console)\r\n        console.log('just fyi: failed to load language resource; will have to use default');\r\n        return result;\r\n    }\r\n      \r\n    // if it's an unspecified 0-error, it's probably not an error but a cancelled request,\r\n    // (happens when closing popups containing angularJS)\r\n    if (result.status === 0 || result.status === -1)\r\n    return result;\r\n    \r\n    // let's try to show good messages in most cases\r\n    let infoText = 'Had an error talking to the server (status ' + result.status + ').';\r\n    const srvResp = result.responseText\r\n    ? JSON.parse(result.responseText) // for jquery ajax errors\r\n    : result.data; // for angular $http\r\n    if (srvResp) {\r\n      const msg = srvResp.Message;\r\n      if (msg) infoText += '\\nMessage: ' + msg;\r\n      const msgDet = srvResp.MessageDetail || srvResp.ExceptionMessage;\r\n      if (msgDet) infoText += '\\nDetail: ' + msgDet;\r\n      \r\n      \r\n      if (msgDet && msgDet.indexOf('No action was found') === 0)\r\n      if (msgDet.indexOf('that matches the name') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: you probably got the action-name wrong in your JS.';\r\n      else if (msgDet.indexOf('that matches the request.') > 0)\r\n      infoText += '\\n\\nTip from 2sxc: Seems like the parameters are the wrong amount or type.';\r\n      \r\n      if (msg && msg.indexOf('Controller') === 0 && msg.indexOf('not found') > 0)\r\n      infoText +=\r\n      // tslint:disable-next-line:max-line-length\r\n      \"\\n\\nTip from 2sxc: you probably spelled the controller name wrong or forgot to remove the word 'controller' from the call in JS. To call a controller called 'DemoController' only use 'Demo'.\";\r\n      \r\n    }\r\n    // tslint:disable-next-line:max-line-length\r\n    infoText += '\\n\\nif you are an advanced user you can learn more about what went wrong - discover how on 2sxc.org/help?tag=debug';\r\n    alert(infoText);\r\n    \r\n    return result;\r\n  }\r\n    \r\n  /**\r\n   * Test if the current code is in edit-mode and additional javascripts have been loaded to make it work\r\n   * @returns true if we are in edit-mode\r\n   */\r\n  isEditMode(): boolean {\r\n    return this.manage?._isEditMode() === true;\r\n  }\r\n\r\n  /**\r\n   * \r\n   * @param resetCache \r\n   * @returns \r\n   * @internal\r\n   */\r\n  recreate(resetCache: boolean): Sxc {\r\n    if (resetCache) delete this.root._controllers[this.cacheKey]; // clear cache\r\n    return this.root(this.id, this.cbid) as any as Sxc; // generate new\r\n  }\r\n}\r\n\r\n// Help cach error on call of old code\r\n// Background: From v3 to v12 data had a unusualy system for retrieving data belonging to the module\r\n// We believe it's almost never used, but the TimelineJs App always used it, and we believe\r\n// 2-3 other examples may have as well. \r\n// Now in v13 sxc.data is used to get any kind of data,\r\n// and we want to make sure that old code will show a warning helping people fix this\r\n// All the old code would have started with sxc.data.on('load', ...) so this is where we give them the error\r\n// We only do this if it hasn't been done already\r\nfunction patchDataWithWarnings(data: any) {\r\n  if (!(data as any).on) {\r\n    (data as any).on = () => { throw warning };\r\n    Object.defineProperty(data, 'sourceUrl', {\r\n        get: function() { throw warning }\r\n    });\r\n  }\r\n}\r\n\r\nconst warning = 'Warning Obsolete Feature on 2sxc JS: the .data has been obsolete for a long time and is repurposed. \\n'\r\n+ 'If you are calling \".data.on(...)\" or \".data.sourceUrl\" you are running very old code. \\n' \r\n+ 'Guidance to fix this: https://r.2sxc.org/brc-13-id.';","import { Environment } from '.';\r\nimport { HasLog, NoJQ } from '../../../core';\r\nimport { EnvironmentSpecs } from '..';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\nconst helpAutoDetect = 'You must either include jQuery on the page or inject the jsApi parameters to prevent auto-detection.';\r\ndeclare const window: Window;\r\n\r\n/**\r\n * This helps load environment information from DNN ServicesFramework - it's a fallback in case the other mechanisms fail\r\n * @internal\r\n */\r\nexport class EnvironmentDnnSfLoader extends HasLog {\r\n    constructor(public env: Environment) {\r\n        super('Env.DnnLdr', env.log);\r\n    }\r\n\r\n\r\n    /**\r\n     * This will assume the new parameter injection failed and it will attempt to fallback\r\n     * it's for backward compatibility, in case something is using $2sxc and doesn't provide the new\r\n     * implementation\r\n     */\r\n    dnnSfFallback(): void {\r\n        const cl = this.log.call('dnnSfFallback');\r\n        // await page-ready to then initialize the stuff\r\n        NoJQ.ready(() => this.dnnSfLoadWhenDocumentReady());\r\n        cl.done('started dom-ready watcher')\r\n    }\r\n\r\n    private dnnSfLoadWhenDocumentReady(): void {\r\n        const cl = this.log.call('dnnSfLoadWhenDocumentReady');\r\n        if (typeof window.$ === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid, etc. and $ is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n\r\n        const sf = window.$.ServicesFramework;\r\n        if (typeof sf === 'undefined') {\r\n            cl.done('error');\r\n            throw `Can't load pageid, moduleid etc. and DNN SF is not available. \\n ${helpAutoDetect}`;\r\n        }\r\n        const dnnSf = sf(0);\r\n        var apiRoot = dnnSf.getServiceRoot('2sxc');\r\n        var sfJsInfo: EnvironmentSpecs = {\r\n            page: dnnSf.getTabId(),\r\n            root: 'unknown',\r\n            api: apiRoot,\r\n            appApi: apiRoot,\r\n            rvtHeader: AntiForgeryTokenHeaderNameDnn,\r\n            rvt: dnnSf.getAntiForgeryValue(),\r\n            uiRoot: DnnUiRoot,\r\n            platform: PlatformDnn,\r\n        };\r\n        this.env.load(sfJsInfo, 'dnn SF');\r\n        cl.done();\r\n    }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { Log } from '../../../core';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\n\r\nconst InputValue = 'value';\r\n\r\nconst SelectorInputRvt = `input[name=__RequestVerificationToken]`;\r\n\r\n/**\r\n * Special loader for dynamic pages like Oqtane, where content can change at runtime\r\n * @internal\r\n */\r\nexport class EnvironmentLoaderDynamic {\r\n\r\n  public log: Log;\r\n\r\n  constructor(\r\n      private mainLoader: EnvironmentMetaLoader\r\n  ) {\r\n    this.log = new Log('ldr.dynmic', mainLoader.log);\r\n  }\r\n\r\n  /**\r\n   * Watch for changes in our special meta header, to update the variables.\r\n   * Important for Oqtane, which changes the page on the fly without reloading.\r\n   */\r\n  public startMetaTagObserver(attribute: string): void {\r\n    if (!!this.observer) return;\r\n    this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === attribute)\r\n          this.mainLoader.updateEnv(JSON.parse(this.mainLoader.getMetaContent()) as EnvironmentSpecs)\r\n    });\r\n    this.log.add('start observing meta tag');\r\n    this.observer.observe(this.mainLoader.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private observer: MutationObserver;\r\n\r\n  /**\r\n   * Load RequestVerificationToken from the hidden form-field in Oqtane\r\n   */\r\n  public startInputRvtObserver(): void {\r\n    if (!!this.inputRvtObserver) return;\r\n    this.inputRvtObserver = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n      for(const mut of mutationsList)\r\n        if (mut.type === 'attributes' && mut.attributeName === InputValue)\r\n          this.loadRvtFromHiddenInput(mut.target as HTMLInputElement);\r\n    });\r\n    this.log.add('start observing Rvt Input');\r\n    const hiddenField = document.querySelector(SelectorInputRvt);\r\n    this.loadRvtFromHiddenInput(hiddenField as HTMLInputElement);\r\n    this.inputRvtObserver.observe(hiddenField, { attributes: true, childList: false, subtree: false });\r\n  }\r\n  private inputRvtObserver: MutationObserver;\r\n\r\n  private loadRvtFromHiddenInput(input: HTMLInputElement){\r\n    this.log.add('Input Rvt updated');\r\n    if(input && input.value)\r\n      this.mainLoader.env.updateRvt(input.value);\r\n  }\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { Environment } from '.';\r\nimport { EnvironmentDnnSfLoader } from './env-loader-dnn-sf';\r\nimport { MetaHeaderJsApi, PlatformOqtane } from '../constants';\r\nimport { HasLog, Log } from '../../../core';\r\nimport { EnvironmentLoaderDynamic } from './env-loader-dynamic';\r\n\r\n// temp: usually 10, but because Oqtane has some delays, we'll temporarily increase to 100 till we're safe\r\nconst maxRetries = 100;\r\nconst retryMs = 10;\r\n\r\nconst MetaSourceId = 'meta header';\r\n\r\nconst MetaProperty = 'content';\r\n\r\n\r\nfunction logTest(): boolean\r\n{\r\n    console.log('test');\r\n    return true;\r\n}\r\n/**\r\n * This loads environment information from the meta-header tag.\r\n * Because of timing issues, it will try multiple times\r\n * @internal\r\n */\r\nexport class EnvironmentMetaLoader extends HasLog {\r\n    public retries = 0;\r\n\r\n    public log: Log;\r\n\r\n    private dynamicPageHelper: EnvironmentLoaderDynamic;\r\n\r\n    constructor(public env: Environment) {\r\n        super('Env.MetaLd', logTest ? env.log : env.log);\r\n        this.dynamicPageHelper = new EnvironmentLoaderDynamic(this);\r\n    }\r\n\r\n    public loadMetaFromHeader(forceFallback = false): void {\r\n        const cl = this.log.call('loadMetaFromHeader', `${forceFallback}`);\r\n        // avoid duplicate execution\r\n        if(this.env.ready) return cl.done('loadMeta - ready');\r\n\r\n        this.log.add('loadMetaFromHeader: start, retry:' + this.retries + ', force fallback: ' + forceFallback);\r\n        const meta = this.getMetaContent();\r\n        if(!meta) {\r\n            this.retries++;\r\n            if(forceFallback || this.retries >= maxRetries) {\r\n                new EnvironmentDnnSfLoader(this.env).dnnSfFallback();\r\n                return cl.done()\r\n            }\r\n            setTimeout(() => { this.loadMetaFromHeader(); }, retryMs);\r\n            return cl.done('will retry');\r\n        }\r\n        // Load the settings\r\n        this.updateEnv(JSON.parse(meta) as EnvironmentSpecs);\r\n\r\n        // monitor setting changes - important for Oqtane\r\n        this.dynamicPageHelper.startMetaTagObserver(MetaProperty);\r\n        cl.done();\r\n    }\r\n\r\n    public updateEnv(newJsInfo: EnvironmentSpecs) {\r\n        this.log.add('meta env info updated');\r\n        this.env.load(newJsInfo, MetaSourceId);\r\n        if(newJsInfo.platform === PlatformOqtane)\r\n            this.dynamicPageHelper.startInputRvtObserver();\r\n    }\r\n\r\n    public getMetaContent(): string {\r\n        const ourMeta = this.getJsApiMetaTag();\r\n        if (!ourMeta) return null;\r\n        return ourMeta.getAttribute(MetaProperty)\r\n    }\r\n\r\n    public getJsApiMetaTag() {\r\n        return document.querySelector(`meta[name=${MetaHeaderJsApi}]`);\r\n    }\r\n\r\n\r\n    /**\r\n     * Watch for changes in our special meta header, to update the variables.\r\n     * Important for Oqtane, which changes the page on the fly without reloading.\r\n     */\r\n    public startMetaTagObserver(): void {\r\n      if (!!this.observer) return;\r\n      this.observer = new MutationObserver((mutationsList: MutationRecord[]) => {\r\n        for(const mut of mutationsList)\r\n          if (mut.type === 'attributes' && mut.attributeName === MetaProperty)\r\n            this.updateEnv(JSON.parse(this.getMetaContent()) as EnvironmentSpecs)\r\n      });\r\n      this.log.add('start observing meta tag');\r\n      this.observer.observe(this.getJsApiMetaTag(), { attributes: true, childList: false, subtree: false });\r\n    }\r\n    private observer: MutationObserver;\r\n\r\n}\r\n","import { EnvironmentSpecs } from '..';\r\nimport { EnvironmentMetaLoader } from './env-loader-meta';\r\nimport { HasLog, Insights, SxcApiUrlRoot } from '../../../core';\r\nimport { AntiForgeryTokenHeaderNameDnn, DnnUiRoot, PlatformDnn } from '../constants';\r\n\r\ndeclare const _jsApi: EnvironmentSpecs;\r\n\r\n/**\r\n * Provides environment information to $2sxc - usually page-id, api-root and stuff like that\r\n */\r\nexport class Environment extends HasLog {\r\n    /** @internal */\r\n    private header: EnvironmentSpecs;\r\n    public ready = false;\r\n    public source = '';\r\n\r\n    /** @internal */\r\n    public metaLoader: EnvironmentMetaLoader;\r\n\r\n    /** @internal */\r\n    constructor() {\r\n        super('Environment', null, 'starting');\r\n        this.log.keepData = true;   // always keep here for clarity\r\n        Insights.add('system', 'environment', this.log);\r\n        this.metaLoader = new EnvironmentMetaLoader(this);\r\n\r\n        // check if a global variable was already set which we should use\r\n        if(typeof _jsApi !== typeof undefined) {\r\n            this.log.add('found _jsApi, will use');\r\n            this.load(_jsApi, 'global variable _jsApi');\r\n        } else {\r\n            this.log.add('will start initializing');\r\n            this.metaLoader.loadMetaFromHeader();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Manually load a new EnvironmentSpecs in cases where the page cannot provide them. \r\n     * This is only used in scenarios outside of Dnn / Oqtane, you will usually not need this. \r\n     * @param envSpecs new info to load\r\n     * @param source _optional_ name where the data came from\r\n     */\r\n    public load(envSpecs: EnvironmentSpecs, source?: string) {\r\n        const cl = this.log.call('load');\r\n        if(envSpecs.root && !envSpecs.api) {\r\n            cl.add('root provided, api missing, will auto-complete');\r\n            const addSlash = (envSpecs.root.endsWith('/') ? '' : '/');\r\n            envSpecs.api = `${envSpecs.root}${addSlash}${SxcApiUrlRoot}`;\r\n        }\r\n        this.header = envSpecs;\r\n\r\n        // in some cases the UpdateRvt may already have been called before\r\n        // in which case it's probably more relevant\r\n        // so we should set it again\r\n        if(this.replacedRvt) this.header.rvt = this.replacedRvt;\r\n\r\n        this.ready = true;\r\n        this.source = source || 'external/unknown' + (this.replacedRvt ? '+rvt': '');\r\n        cl.return(envSpecs, 'loaded from ' + this.source);\r\n    }\r\n\r\n    /** @internal */\r\n    private replacedRvt: string;\r\n\r\n    /** @internal */\r\n    public updateRvt(newRvt: string) {\r\n        if(!newRvt) return;\r\n        this.replacedRvt = newRvt;\r\n        this.header.rvt = newRvt;\r\n    }\r\n\r\n    /**\r\n     * The API endpoint url from the environment\r\n     */\r\n    public api(): string {\r\n        this.ensureReadyOrThrow('api');\r\n        return this.header.api;\r\n    }\r\n\r\n    // WIP - may return undefined\r\n    /** @internal */\r\n    public appApi(): string {\r\n        // WIP - must get it to work without 'appApi' but only 'api' to ensure ...\r\n        this.ensureReadyOrThrow('appApi');\r\n        return this.header.appApi;\r\n    }\r\n\r\n    /**\r\n     * The current page ID - often needed in API calls\r\n     */\r\n    public page(): number {\r\n        this.ensureReadyOrThrow('page');\r\n        return this.header.page;\r\n    }\r\n\r\n    /**\r\n     * The request verification token header name for internal WebAPI calls\r\n     */\r\n    public rvtHeader(): string {\r\n        this.ensureReadyOrThrow('rvtHeader');\r\n        return this.header.rvtHeader || AntiForgeryTokenHeaderNameDnn;\r\n    }\r\n\r\n    /**\r\n     * The request-verification token for internal WebAPI calls\r\n     */\r\n    public rvt(): string {\r\n        this.ensureReadyOrThrow('rvt');\r\n        return this.header.rvt;\r\n    }\r\n\r\n    /**\r\n     * The uiRoot path\r\n     * @internal\r\n     */\r\n    public uiRoot(): string {\r\n        this.ensureReadyOrThrow('uiRoot');\r\n        return this.header.uiRoot || DnnUiRoot;\r\n    }\r\n\r\n    /**\r\n     * The platform code like 'oqt' or 'dnn' in case the JS needs to know the difference\r\n     */\r\n    public platform(): string {\r\n        this.ensureReadyOrThrow('platform');\r\n        return this.header.platform || PlatformDnn;\r\n    }\r\n\r\n    /** @internal */\r\n    private ensureReadyOrThrow(partRequested: string): void {\r\n        if(this.ready) return;\r\n\r\n        // try one last time - usually it should really be ready by now\r\n        this.log.add('ensureReady - force last attempt to load MetaHeader for ' + partRequested)\r\n        this.metaLoader.loadMetaFromHeader(true);\r\n\r\n        // if still not ready, throw exception to console log\r\n        if(this.ready) return;\r\n        throw `Can't find ${partRequested} - something went wrong, pls contact 2sxc.org`;\r\n    }\r\n\r\n}\r\n\r\n","// this is the 2sxc-javascript API\r\n// 2sxc will include this automatically when a user has edit-rights\r\n// a template developer will typically use this to use the data-api to read 2sxc-data from the server\r\n// read more about this in the wiki: https://github.com/2sic/2sxc/wiki/JavaScript-%242sxc\r\n\r\nimport { buildSxcRoot } from './sxc-root/sxc-global-bootstrap';\r\n\r\nif (!window.$2sxc) // prevent double execution\r\n  window.$2sxc = buildSxcRoot();\r\n"],"sourceRoot":""}