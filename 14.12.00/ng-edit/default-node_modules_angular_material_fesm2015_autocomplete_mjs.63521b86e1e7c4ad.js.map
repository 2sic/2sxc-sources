{"version":3,"mappings":"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","names":["i0","_uniqueAutocompleteIdCounter","constructor","source","option","this","_MatAutocompleteMixinBase","mixinDisableRipple","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","super","_activeOptionChanges","Subscription","showPanel","_isOpen","displayWith","optionSelected","EventEmitter","opened","closed","optionActivated","_classList","id","inertGroups","SAFARI","_autoActiveFirstOption","isOpen","value","coerceBooleanProperty","classList","length","coerceStringArray","reduce","className","_setVisibilityClasses","nativeElement","ngAfterContentInit","_keyManager","ActiveDescendantKeyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","ngOnDestroy","unsubscribe","_setScrollTop","scrollTop","panel","_getScrollTop","markForCheck","_emitSelectEvent","event","MatAutocompleteSelectedEvent","_getPanelAriaLabelledby","labelId","ariaLabel","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","i1","ɵdir","viewQuery","TemplateRef","x","o","e","MatAutocomplete","arguments","ɵcmp","selectors","MAT_OPTGROUP","MatOption","s","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","directives","i2","styles","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","Subject","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","defer","autocomplete","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","onStable","take","_scrollStrategy","autocompleteDisabled","ngAfterViewInit","window","_getWindow","runOutsideAngular","addEventListener","ngOnChanges","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","openPanel","_attachOverlay","_floatLabel","closePanel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","panelClosingActions","tabOut","filter","_getOutsideClickStream","detachments","of","MatOptionSelectionChange","activeOption","activeItem","fromEvent","clickTarget","_getEventTarget","formField","customOrigin","connectedTo","elementRef","contains","overlayElement","writeValue","Promise","resolve","then","_setTriggerValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","keyCode","hasModifier","hasModifierKey","ESCAPE","preventDefault","ENTER","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","type","parseFloat","_previousValue","_handleFocus","_handleClick","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","firstStable","optionChanges","tap","reapplyLastPosition","delay","run","wasOpen","_setValueAndClose","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","skip","forEach","selected","deselect","_a","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","TemplatePortal","template","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","attach","OverlayConfig","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","positions","withPositions","getConnectedOverlayOrigin","panelWidth","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_countGroupLabelsBeforeOption","optionGroups","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","i1$1","i2$1","MAT_FORM_FIELD","DOCUMENT","i3","inputs","MatAutocompleteModule","ɵmod","ɵinj","imports","OverlayModule","MatOptionModule","MatCommonModule","CommonModule","CdkScrollableModule"],"sources":["./node_modules/@angular/material/fesm2015/autocomplete.mjs"],"sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, TemplateRef, Directive, Inject, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getEventTarget } from '@angular/cdk/platform';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { hasModifierKey, ESCAPE, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as i4 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { startWith, switchMap, take, filter, map, tap, delay } from 'rxjs/operators';\nimport * as i2$1 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nconst _MatAutocompleteMixinBase = mixinDisableRipple(class {\n});\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() {\n        return this._autoActiveFirstOption;\n    }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS }, { token: i1.Platform }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteBase, inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", panelWidth: \"panelWidth\", classList: [\"class\", \"classList\"] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                    }] }, { type: i1.Platform }];\n    }, propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }] } });\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatAutocomplete.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocomplete, selector: \"mat-autocomplete\", inputs: { disableRipple: \"disableRipple\" }, host: { classAttribute: \"mat-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }], exportAs: [\"matAutocomplete\"], usesInheritance: true, ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], directives: [{ type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', inputs: ['disableRipple'], host: {\n                        'class': 'mat-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"] }]\n        }], propDecorators: { optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }] } });\n\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of changes to the selection state of the autocomplete options. */\n        this.optionSelections = defer(() => {\n            const options = this.autocomplete ? this.autocomplete.options : null;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable.pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() {\n        return this._autocompleteDisabled;\n    }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend')).pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = _getEventTarget(event);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return (this._overlayAttached &&\n                clickTarget !== this._element.nativeElement &&\n                // Normally focus moves inside `mousedown` so this condition will almost always be\n                // true. Its main purpose is to handle the case where the input is focused from an\n                // outside click which propagates up to the `body` listener within the same sequence\n                // and causes the panel to close immediately (see #3106).\n                this._document.activeElement !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                !!this._overlayRef &&\n                !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve().then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this.openPanel();\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return (merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            // The `NgZone.onStable` always emits outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            this._zone.run(() => {\n                const wasOpen = this.panelOpen;\n                this._resetActiveItem();\n                this.autocomplete._setVisibility();\n                this._changeDetectorRef.detectChanges();\n                if (this.panelOpen) {\n                    this._overlayRef.updatePosition();\n                    // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                    // event, because we may not have emitted it when the panel was attached. This\n                    // can happen if the users opens the panel and there are no options, but the\n                    // options come in slightly later or as a result of the value changing.\n                    if (wasOpen !== this.panelOpen) {\n                        this.autocomplete.opened.emit();\n                    }\n                }\n            });\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith\n            ? this.autocomplete.displayWith(value)\n            : value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const source = event && event.source;\n        if (source) {\n            this._clearPreviousSelectedOption(source);\n            this._setTriggerValue(source.value);\n            this._onChange(source.value);\n            this.autocomplete._emitSelectEvent(source);\n            this._element.nativeElement.focus();\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId(),\n            });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._closeKeyEventStream.next();\n                    this._resetActiveItem();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay\n            .position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, deps: [{ token: i0.ElementRef }, { token: i1$1.Overlay }, { token: i0.ViewContainerRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: MAT_AUTOCOMPLETE_SCROLL_STRATEGY }, { token: i2$1.Directionality, optional: true }, { token: MAT_FORM_FIELD, host: true, optional: true }, { token: DOCUMENT, optional: true }, { token: i3.ViewportRuler }, { token: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteTriggerBase, inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"] }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteTriggerBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1$1.Overlay }, { type: i0.ViewContainerRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n                    }] }, { type: i2$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }, {\n                        type: Host\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: ['matAutocompleteDisabled']\n            }] } });\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAutocompleteTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteTrigger, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-owns\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatAutocompleteOriginBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatAutocompleteOriginBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatAutocompleteOriginBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatAutocompleteOrigin.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatAutocompleteOrigin, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatAutocompleteModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin], imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule], exports: [MatAutocomplete,\n        MatAutocompleteTrigger,\n        MatAutocompleteOrigin,\n        CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\nMatAutocompleteModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[OverlayModule, MatOptionModule, MatCommonModule, CommonModule], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, CommonModule],\n                    exports: [\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                        CdkScrollableModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_material_fesm2015_autocomplete_mjs.63521b86e1e7c4ad.js"}