{"version":3,"mappings":"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","names":["MonacoEditorModule","CommonModule","voidElements","split","map","el","trim","toLocaleLowerCase","constructor","monaco","filename","value","container","options","snippets","tooltips","this","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","forEach","completionItemProvider","dispose","t","jsTypingsLib","_a","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","insertSnippet","snippet","getContribution","insert","setSnippets","setTooltips","setJsonSchema","jsonSchema","uri","toString","oldJsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","exists","s","e","schemas","some","schema","fileMatch","_b","newSchema","type","JSON","parse","undefined","newJsonDiagnostics","Object","enableSchemaRequest","filter","n","_c","setDiagnosticsOptions","setJsonComments","comments","jsonDiagnostics","setJsDiagnostics","javascriptDiagnostics","typescript","javascriptDefaults","getDiagnosticsOptions","setJsTypings","typings","addExtraLib","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","colors","create","editorModelUri","Uri","file","editorModel","createModel","setModel","viewState","stringify","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getLanguageId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","trigger","length","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","includes","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","content","name","documentation","r","title","h","help","f","links","suggestion","registerHoverProvider","provideHover","getWordAtPosition","tooltip","find","i","Term","contents","Help","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","MonacoEditorComponent","EventEmitter","ngAfterViewInit","window","require","config","paths","vs","createEditor","autoFocus","ngOnChanges","changes","monacoInstance","jsonComments","o","_d","l","_e","a","_f","jsTypings","_g","jsDiagnostics","ngOnDestroy","MonacoInstance","editorRef","nativeElement","valueChanged","emit","focused","blurred","selectors","i0","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ctx"],"sources":["./projects/eav-ui/src/app/monaco-editor/monaco-editor.module.ts","./projects/eav-ui/src/app/shared/typescript-helpers/name-of.ts","./projects/eav-ui/src/app/monaco-editor/monaco-instance.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.ts","./projects/eav-ui/src/app/monaco-editor/monaco-editor.component.html","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","// Inspired by https://schneidenbach.gitbooks.io/typescript-cookbook/content/nameof-operator.html\r\nexport const nameof = <T>(name: keyof T) => name;\r\n","import type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema, Monaco2sxc } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { Tooltip } from '../code-editor/models/tooltip.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: Monaco.editor.IStandaloneCodeEditor;\r\n  private completionItemProviders: Monaco.IDisposable[];\r\n  private jsTypingsLib?: Monaco.IDisposable;\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: typeof Monaco,\r\n    private filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n    private snippets: Snippet[],\r\n    private tooltips: Tooltip[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => completionItemProvider.dispose());\r\n    this.jsTypingsLib?.dispose();\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance\r\n      .getContribution<Monaco.editor.IEditorContribution & { insert(template: string, opts?: Record<string, any>): void; }>('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setTooltips(tooltips: Tooltip[]): void {\r\n    this.tooltips = tooltips;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema?: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const oldJsonDiagnostics = this.monaco.languages.json.jsonDefaults.diagnosticsOptions;\r\n    const exists = oldJsonDiagnostics.schemas?.some(schema => schema.fileMatch[0] === uri) ?? false;\r\n\r\n    const newSchema: Monaco.languages.json.DiagnosticsOptions['schemas'][0] = jsonSchema?.type === 'link'\r\n      ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n      : jsonSchema?.type === 'raw'\r\n        ? { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) }\r\n        : undefined;\r\n\r\n    if (!exists && !newSchema) { return; }\r\n\r\n    const newJsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...oldJsonDiagnostics,\r\n      enableSchemaRequest: true,\r\n      schemas: exists && !newSchema\r\n        ? oldJsonDiagnostics.schemas.filter(schema => schema.fileMatch[0] !== uri)\r\n        : exists\r\n          ? oldJsonDiagnostics.schemas.map(schema => schema.fileMatch[0] === uri ? newSchema : schema)\r\n          : [...(oldJsonDiagnostics.schemas ?? []), newSchema],\r\n    };\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(newJsonDiagnostics);\r\n  }\r\n\r\n  setJsonComments(comments?: Monaco.languages.json.SeverityLevel): void {\r\n    if (!comments) { return; }\r\n\r\n    const jsonDiagnostics: Monaco.languages.json.DiagnosticsOptions = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      comments,\r\n    };\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  setJsDiagnostics(options: Monaco.languages.typescript.DiagnosticsOptions): void {\r\n    if (!options) { return; }\r\n\r\n    const javascriptDiagnostics: Monaco.languages.typescript.DiagnosticsOptions = {\r\n      ...this.monaco.languages.typescript.javascriptDefaults.getDiagnosticsOptions(),\r\n      ...options,\r\n    };\r\n    this.monaco.languages.typescript.javascriptDefaults.setDiagnosticsOptions(javascriptDiagnostics);\r\n  }\r\n\r\n  setJsTypings(typings: string): void {\r\n    if (!typings) {\r\n      this.jsTypingsLib?.dispose();\r\n      return;\r\n    }\r\n    this.jsTypingsLib = this.monaco.languages.typescript.javascriptDefaults.addExtraLib(typings, `js-typings-${this.filename}`);\r\n  }\r\n\r\n  private createGlobalCache(monaco: typeof Monaco & { _2sxc?: Monaco2sxc }): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: typeof Monaco): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n      colors: {\r\n      },\r\n    });\r\n  }\r\n\r\n  private createInstance(\r\n    monaco: typeof Monaco,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: Monaco.editor.IStandaloneEditorConstructionOptions,\r\n  ): Monaco.editor.IStandaloneCodeEditor {\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState: Monaco.editor.ICodeEditorViewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: typeof Monaco, editorInstance: Monaco.editor.IStandaloneCodeEditor): Monaco.IDisposable[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model, position) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions: Monaco.languages.CompletionItem[] = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getLanguageId(), {\r\n        provideCompletionItems: (model, position) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            const suggestion: Monaco.languages.CompletionItem = {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range: {\r\n                startLineNumber: position.lineNumber,\r\n                endLineNumber: position.lineNumber,\r\n                startColumn: word.startColumn,\r\n                endColumn: word.endColumn\r\n              },\r\n            };\r\n            return suggestion;\r\n          }).filter(suggestion => !!suggestion);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerHoverProvider(editorInstance.getModel().getLanguageId(), {\r\n        provideHover: (model, position) => {\r\n          if (this.tooltips == null || editorInstance.getModel() !== model) { return; }\r\n\r\n          const word = model.getWordAtPosition(position);\r\n          if (!word) { return; }\r\n\r\n          const tooltip = this.tooltips.find(i => i.Term === word.word);\r\n          if (!tooltip) { return; }\r\n\r\n          return {\r\n            contents: tooltip.Help.map(value => {\r\n              const content: Monaco.IMarkdownString = {\r\n                value,\r\n              };\r\n              return content;\r\n            }),\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: word.startColumn,\r\n              endColumn: word.endColumn,\r\n            },\r\n          };\r\n        }\r\n      }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: Monaco.editor.IStandaloneCodeEditor): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: Monaco.editor.IStandaloneCodeEditor): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations(e => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     marker => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter(marker => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some(marker => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { JsonSchema } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { Tooltip } from '../code-editor/models/tooltip.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { nameof } from '../shared/typescript-helpers';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() tooltips?: Tooltip[];\r\n  @Input() options?: Monaco.editor.IStandaloneEditorConstructionOptions;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() jsonComments?: Monaco.languages.json.SeverityLevel;\r\n  @Input() jsTypings?: string;\r\n  @Input() jsDiagnostics?: Monaco.languages.typescript.DiagnosticsOptions;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco?: typeof Monaco;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.33.0/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: typeof Monaco) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes[nameof<MonacoEditorComponent>('filename')] != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('value')] != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('jsonSchema')] != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('jsonComments')] != null) {\r\n      this.monacoInstance?.setJsonComments(this.jsonComments);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('snippets')] != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('tooltips')] != null) {\r\n      this.monacoInstance?.setTooltips(this.tooltips);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('jsTypings')] != null) {\r\n      this.monacoInstance?.setJsTypings(this.jsTypings);\r\n    }\r\n    if (changes[nameof<MonacoEditorComponent>('jsDiagnostics')] != null) {\r\n      this.monacoInstance?.setJsDiagnostics(this.jsDiagnostics);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets, this.tooltips,\r\n    );\r\n\r\n    this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    this.monacoInstance.setJsonComments(this.jsonComments);\r\n    this.monacoInstance.setJsTypings(this.jsTypings);\r\n    this.monacoInstance.setJsDiagnostics(this.jsDiagnostics);\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_monaco-editor_index_ts-projects_eav-ui_src_app_shared_directi-e88d8b.1116212e3114c2ed.js"}