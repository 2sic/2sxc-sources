{"version":3,"mappings":"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","names":["i0","ctx_r5","ctx_r7","ctx_r8","ctx_r9","ctx_r10","ReplaceContentComponent","constructor","dialogRef","contentGroupService","router","route","snackBar","this","ngOnInit","guid","snapshot","paramMap","get","part","index","parseInt","add","queryParamMap","subscription","Subscription","filterText$","BehaviorSubject","options$","filteredOptions$","combineLatest","pipe","map","filterText","options","filter","option","label","toLocaleLowerCase","includes","templateVars$","filteredOptions","isAddMode","isMatch","fetchConfig","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","setFilter","next","select","event","value","copySelected","contentGroup","buildContentGroup","formUrl","convertFormToUrl","items","ContentTypeName","contentTypeName","DuplicateEntity","id","navigate","relativeTo","save","open","saveItem","subscribe","duration","isRefresh","cloneId","getItems","replaceConfig","Object","entries","Items","itemId","itemName","newId","SelectedId","newFilter","r","find","_a","events","NavigationEnd","startWith","firstChild","pairwise","hadChild","hasChild","editResult","n","getCurrentNavigation","extras","state","i","keys","e","_b","selectors"],"sources":["./projects/eav-ui/src/app/replace-content/replace-content.component.html","./projects/eav-ui/src/app/replace-content/replace-content.component.ts"],"sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.isAddMode ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <p class=\"dialog-description\">\r\n    {{\r\n    data.isAddMode\r\n    ? 'Select a content-item to add to this list.'\r\n    : 'By replacing a content-item you can make other content appear in the slot of the original content.'\r\n    }}\r\n  </p>\r\n\r\n  <div class=\"options-box\">\r\n    <mat-form-field appearance=\"standard\" color=\"accent\">\r\n      <mat-label>Choose item</mat-label>\r\n      <input matInput [matAutocomplete]=\"auto\" [ngModel]=\"data.filterText\" (ngModelChange)=\"setFilter($event)\">\r\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\">\r\n        <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n          [style.height.px]=\"data.filteredOptions.length < 6 ? data.filteredOptions.length * 48 : 240\">\r\n          <mat-option *cdkVirtualFor=\"let option of data.filteredOptions\" [value]=\"option\">{{ option }}</mat-option>\r\n        </cdk-virtual-scroll-viewport>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n    <button mat-icon-button class=\"options-box__copy\" tippy=\"Copy\" [disabled]=\"!data.isMatch\" (click)=\"copySelected()\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\" dialog-component-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!data.isMatch\" (click)=\"save()\">Save</button>\r\n  </div>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\nimport { ReplaceContentTemplateVars } from './replace-content.models';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  templateVars$: Observable<ReplaceContentTemplateVars>;\r\n\r\n  private guid: string;\r\n  private part: string;\r\n  private index: number;\r\n  private add: boolean;\r\n  private filterText$: BehaviorSubject<string>;\r\n  private options$: BehaviorSubject<ReplaceOption[]>;\r\n  private contentTypeName: string;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.guid = this.route.snapshot.paramMap.get('guid');\r\n    this.part = this.route.snapshot.paramMap.get('part');\r\n    this.index = parseInt(this.route.snapshot.paramMap.get('index'), 10);\r\n    this.add = !!this.route.snapshot.queryParamMap.get('add');\r\n\r\n    this.subscription = new Subscription();\r\n    this.filterText$ = new BehaviorSubject('');\r\n    this.options$ = new BehaviorSubject([]);\r\n\r\n    const filteredOptions$ = combineLatest([this.filterText$, this.options$]).pipe(\r\n      map(([filterText, options]) =>\r\n        options.filter(option => option.label.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).map(option => option.label)\r\n      ),\r\n    );\r\n    this.templateVars$ = combineLatest([this.filterText$, filteredOptions$]).pipe(\r\n      map(([filterText, filteredOptions]) => {\r\n        const templateVars: ReplaceContentTemplateVars = {\r\n          filterText,\r\n          filteredOptions,\r\n          isAddMode: this.add,\r\n          isMatch: filteredOptions.includes(filterText),\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n\r\n    this.fetchConfig(false, null);\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filterText$.complete();\r\n    this.options$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setFilter(filterText: string) {\r\n    this.filterText$.next(filterText);\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText$.next(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeName, DuplicateEntity: contentGroup.id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  private fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.getItems(contentGroup).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items).map(([itemId, itemName]) => {\r\n        const option: ReplaceOption = {\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        };\r\n        return option;\r\n      });\r\n      this.options$.next(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.options$.value.find(option => option.id === newId)?.label || '';\r\n        this.filterText$.next(newFilter);\r\n      }\r\n      this.contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        const navigation = this.router.getCurrentNavigation();\r\n        const editResult = navigation.extras?.state;\r\n        const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n        this.fetchConfig(true, cloneId);\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildContentGroup() {\r\n    const id = this.options$.value.find(option => option.label === this.filterText$.value)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      guid: this.guid,\r\n      part: this.part,\r\n      index: this.index,\r\n      add: this.add,\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_replace-content_replace-content_component_ts.e24dc85261bf258c.js"}