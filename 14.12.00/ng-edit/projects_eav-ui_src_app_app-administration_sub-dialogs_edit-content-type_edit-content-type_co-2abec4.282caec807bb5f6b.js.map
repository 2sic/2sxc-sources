{"version":3,"mappings":"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","names":["contentTypeNamePattern","i0","ctx_r12","ctx_r14","oxw","ctx_r15","ctx_r16","ctx_r17","EditContentTypeComponent","constructor","dialogRef","route","contentTypesService","snackBar","this","snapshot","paramMap","get","dropdownInsertValue","BehaviorSubject","combineLatest","contentType$","lockScope$","scopeOptions$","disableAnimation$","loading$","pipe","map","contentType","lockScope","scopeOptions","disableAnimation","loading","parent","ngOnInit","contentTypeStaticName","retrieveContentType","Object","ChangeStaticName","NewStaticName","StaticName","of","Name","Description","Scope","scope","scopes$","getScopes","subscribe","next","newScopes","h","value","_a","forEach","scopeOption","some","push","name","ngOnDestroy","complete","ngAfterViewInit","setTimeout","closeDialog","close","changeContentTypeName","newName","changeScope","newScope","prompt","eavConstants","option","unlockScope","save","open","result","duration","document","activeElement","HTMLElement","blur","selectors","ClickStopPropagationDirective","onClick","event","stopPropagation","ctx"],"sources":["./projects/eav-ui/src/app/app-administration/constants/content-type.patterns.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts"],"sourcesContent":["/**\r\n * The pattern determines what content-type names are allowed.\r\n * Basically it's A-Z and numbers after the first digit.\r\n * But there are two exceptions:\r\n *  - types describing an input-type begin with an `@` and can also contain `-` chars\r\n *  - types beginning with an `|` are very old type names for data-sources, they can contain anything!\r\n */\r\nexport const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)/;\r\nexport const contentTypeNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n\r\n// 2020-04-29 2dm - temporarily used this pattern while renaming unique named types containing '|' chars\r\n// export const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)|(^\\|.*$)/;\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">{{ contentTypeStaticName ? 'Edit Content Type' : 'New Content Type' }}</div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <form class=\"dialog-form\" *ngIf=\"data.contentType\" #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput type=\"text\" required [pattern]=\"contentTypeNamePattern\" [ngModel]=\"data.contentType.Name\"\r\n            (ngModelChange)=\"changeContentTypeName($event)\" name=\"Name\" #name=\"ngModel\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"name.touched && name.errors\">\r\n          <app-field-hint *ngIf=\"name.errors.required\" [isError]=\"true\">This field is required</app-field-hint>\r\n          <app-field-hint *ngIf=\"name.errors.pattern\" [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n      <mat-accordion [@.disabled]=\"data.disableAnimation\">\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>Advanced</mat-panel-title>\r\n            <mat-panel-description></mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Scope</mat-label>\r\n              <mat-select [ngModel]=\"data.contentType.Scope\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\"\r\n                [disabled]=\"data.lockScope\">\r\n                <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n                <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n              </mat-select>\r\n              <button mat-icon-button type=\"button\" matSuffix [tippy]=\"data.lockScope ? 'Unlock' : 'Lock'\">\r\n                <mat-icon appClickStopPropagation (click)=\"unlockScope()\">\r\n                  {{ data.lockScope ? 'lock' : 'lock_open' }}\r\n                </mat-icon>\r\n              </button>\r\n            </mat-form-field>\r\n            <app-field-hint>\r\n              The scope should almost never be changed -\r\n              <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n            </app-field-hint>\r\n          </div>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Static Name</mat-label>\r\n              <input matInput type=\"text\" [ngModel]=\"data.contentType.StaticName\" name=\"StaticName\" disabled>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div *ngIf=\"data.contentType.SharedDefId\" class=\"edit-input\">\r\n            <h3>Shared Content Type (Ghost)</h3>\r\n            <p>Note: this can't be edited in the UI, for now if you really know what you're doing, do it in the DB</p>\r\n            <p>Uses Type Definition of: {{ data.contentType.SharedDefId }}</p>\r\n          </div>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || data.loading\">\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { AfterViewInit, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, of } from 'rxjs';\r\nimport { dropdownInsertValue } from '../../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { contentTypeNameError, contentTypeNamePattern } from '../../constants/content-type.patterns';\r\nimport { ContentTypeEdit } from '../../models/content-type.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type',\r\n  templateUrl: './edit-content-type.component.html',\r\n  styleUrls: ['./edit-content-type.component.scss'],\r\n})\r\nexport class EditContentTypeComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  contentTypeNamePattern = contentTypeNamePattern;\r\n  contentTypeNameError = contentTypeNameError;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n\r\n  private contentType$ = new BehaviorSubject<ContentTypeEdit>(null);\r\n  private lockScope$ = new BehaviorSubject(true);\r\n  private scopeOptions$ = new BehaviorSubject<ScopeOption[]>(null);\r\n  private disableAnimation$ = new BehaviorSubject(true);\r\n  private loading$ = new BehaviorSubject(false);\r\n  templateVars$ = combineLatest([this.contentType$, this.lockScope$, this.scopeOptions$, this.disableAnimation$, this.loading$]).pipe(\r\n    map(([contentType, lockScope, scopeOptions, disableAnimation, loading]) =>\r\n      ({ contentType, lockScope, scopeOptions, disableAnimation, loading })),\r\n  );\r\n  private scope = this.route.snapshot.parent.paramMap.get('scope');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentType$ = this.contentTypeStaticName\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n        .pipe(\r\n          map(contentType => {\r\n            const contentTypeEdit: ContentTypeEdit = {\r\n              ...contentType,\r\n              ChangeStaticName: false,\r\n              NewStaticName: contentType.StaticName,\r\n            };\r\n            return contentTypeEdit;\r\n          }),\r\n        )\r\n      : of({\r\n        StaticName: '',\r\n        Name: '',\r\n        Description: '',\r\n        Scope: this.scope,\r\n        ChangeStaticName: false,\r\n        NewStaticName: '',\r\n      } as ContentTypeEdit);\r\n    const scopes$ = this.contentTypesService.getScopes();\r\n    combineLatest([contentType$, scopes$]).subscribe(([contentType, scopeOptions]) => {\r\n      this.contentType$.next(contentType);\r\n\r\n      const newScopes = [...(this.scopeOptions$.value ?? [])];\r\n      scopeOptions.forEach(scopeOption => {\r\n        if (!newScopes.some(scope => scope.value === scopeOption.value)) {\r\n          newScopes.push(scopeOption);\r\n        }\r\n      });\r\n      if (!newScopes.some(scope => scope.value === this.scope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: this.scope,\r\n          value: this.scope,\r\n        };\r\n        newScopes.push(newScopeOption);\r\n      }\r\n      this.scopeOptions$.next(newScopes);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.lockScope$.complete();\r\n    this.scopeOptions$.complete();\r\n    this.disableAnimation$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  // workaround for angular component issue #13870\r\n  ngAfterViewInit() {\r\n    // timeout required to avoid ExpressionChangedAfterItHasBeenCheckedError\r\n    setTimeout(() => this.disableAnimation$.next(false));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeContentTypeName(newName: string) {\r\n    this.contentType$.next({ ...this.contentType$.value, Name: newName });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n      if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n      }\r\n    }\r\n    this.contentType$.next({ ...this.contentType$.value, Scope: newScope });\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope$.next(!this.lockScope$.value);\r\n    if (this.lockScope$.value) {\r\n      this.contentType$.next({ ...this.contentType$.value, Scope: this.scope });\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    this.contentTypesService.save(this.contentType$.value).subscribe(result => {\r\n      this.loading$.next(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_app-administration_sub-dialogs_edit-content-type_edit-content-type_co-2abec4.282caec807bb5f6b.js"}