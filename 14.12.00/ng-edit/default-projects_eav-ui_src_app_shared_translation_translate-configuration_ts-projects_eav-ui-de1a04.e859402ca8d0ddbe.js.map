{"version":3,"mappings":"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","names":["factory","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","http","TranslateLoaderWithErrorHandling","window","sxcVersion","constructor","prefix","suffix","this","getTranslation","lang","get","pipe","catchError","error","console","warn","of","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","element","enable","userSelect","extendStyles","style","position","top","opacity","left","transform","initialTransform","multiplier","toLowerCase","indexOf","parseFloat","computedStyle","name","getPropertyValue","split","map","part","trim","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","getMutableClientRect","handleScroll","event","target","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","adjustClientRect","scrollY","scrollX","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_dropContainer","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","ParentPositionTracker","registerDragItem","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","handle","toggleNativeDragInteractions","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","_b","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","toggleVisibility","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","e","matchElementSize","getTransform","deepCloneNode","margin","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","parseCssTimeUnitsToMs","getTransformTransitionDurationInMs","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","combineTransforms","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","array","fromIndex","toIndex","from","clamp","to","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","period","scheduler","asyncScheduler","timer","interval","animationFrameScheduler","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","_cacheParentPositions","_reset","withItems","items","previousItems","draggedItems","filter","every","_cacheItems","connectedTo","slice","withOrientation","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","isPointerNearClientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","moveItemInArray","sibling","isDraggedItem","offset","elementToOffset","a","isInsideClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getElementScrollDirections","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","sort","b","current","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","options","config","_clearGlobalListeners","streams","Observable","observer","eventOptions","merge","ngOnDestroy","instance","ɵfac","i0","DOCUMENT","ɵprov","DEFAULT_CONFIG","DragDrop","createDrag","DragRef","createDropList","DropListRef","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","id","EventEmitter","_unsortedItems","_dropListRef","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","addItem","_syncItemsWithRef","removeItem","getSortedItems","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","ref","startWith","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","coerceNumberProperty","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","i3","ɵdir","selectors","useValue","useExisting","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","subscription","movedEvent","_syncInputs","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","closest","_getBoundaryElement","boundary","dir","templateRef","tap","childHandleElements","switchMap","handleInstance","dragRef","s","n","DragDropModule","ɵmod","ɵinj","imports","CdkScrollableModule"],"sources":["./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/cdk/fesm2015/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, Optional, SkipSelf, Output, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, (importantProperties === null || importantProperties === void 0 ? void 0 : importantProperties.has(key)) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        var _a, _b;\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            (_a = this._rootElement) === null || _a === void 0 ? void 0 : _a.remove();\n        }\n        (_b = this._anchor) === null || _b === void 0 ? void 0 : _b.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        var _a, _b;\n        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = this._previewRef) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        var _a, _b;\n        (_a = this._placeholder) === null || _a === void 0 ? void 0 : _a.remove();\n        (_b = this._placeholderRef) === null || _b === void 0 ? void 0 : _b.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    var _a;\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        (_a = this._preview) === null || _a === void 0 ? void 0 : _a.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        var _a;\n        return (((_a = this._parentPositions.positions.get(this._document)) === null || _a === void 0 ? void 0 : _a.scrollPosition) ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item,\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions.find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this.sortPredicate(index, item, this) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDropRegistry.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable });\nDragDrop.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () {\n        return [{ type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropListGroup.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDropListGroup, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i3.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDropList.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDropList, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n        // Prevent child drop lists from picking up the same group as their parent.\n        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n    ], exportAs: [\"cdkDropList\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: CdkDropListGroup, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DROP_LIST_GROUP]\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_CONFIG]\n                    }] }];\n    }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragHandle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDragHandle, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_DRAG_PARENT]\n                    }, {\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }];\n    }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPlaceholder.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDragPlaceholder, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n}\nCdkDragPreview.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDragPreview.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDragPreview, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        var _a;\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        (_a = element.parentElement) === null || _a === void 0 ? void 0 : _a.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_a = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _a === void 0 ? void 0 : _a._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n}\nCdkDrag._dragInstances = [];\nCdkDrag.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i3.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });\nCdkDrag.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: CdkDrag, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [CDK_DROP_LIST]\n                    }, {\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_CONFIG]\n                    }] }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_HANDLE]\n                    }] }, { type: CdkDrag, decorators: [{\n                        type: Optional\n                    }, {\n                        type: SkipSelf\n                    }, {\n                        type: Inject,\n                        args: [CDK_DRAG_PARENT]\n                    }] }];\n    }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nDragDropModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropModule, declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkScrollableModule,\n        CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] });\nDragDropModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        CdkDropList,\n                        CdkDropListGroup,\n                        CdkDrag,\n                        CdkDragHandle,\n                        CdkDragPreview,\n                        CdkDragPlaceholder,\n                    ],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_shared_translation_translate-configuration_ts-projects_eav-ui-de1a04.e859402ca8d0ddbe.js"}