{"version":3,"mappings":"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","names":["arrReducer","arr","value","push","fieldNamePattern","dataTypeLabels","Boolean","label","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ReservedNamesValidatorDirective","constructor","this","validate","control","controlValue","toLocaleLowerCase","reservedName","Object","keys","reservedNames","find","name","selectors","provide","NG_VALIDATORS","useExisting","multi","i0","ctx_r20","ctx_r22","oxw","ctx_r24","ctx_r26","EditContentTypeFieldsComponent","dialogRef","route","contentTypesService","contentTypesFieldsService","snackBar","calculateTypeIcon","BehaviorSubject","Subscription","disableClose","subscription","add","backdropClick","subscribe","event","form","dirty","confirm","closeDialog","ngOnInit","editMode","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","pipe","share","fields$","switchMap","contentType","getFields","StaticName","dataTypes$","typeListRetrieve","map","rawDataTypes","dataTypes","rawDataType","icon","calculateDataTypes","inputTypes$","getInputTypesList","reservedNames$","getReservedNames","forkJoin","fields","inputTypes","inputTypeOptions","existingFields","forEach","field","editFieldId","parseInt","editField","Id","i","Type","DataTypeConstants","InputType","InputTypeConstants","IsTitle","length","SortOrder","filterInputTypeOptions","calculateHints","loading$","next","ngOnDestroy","complete","saving$","unsubscribe","close","index","filteredInputTypeOptions","filter","option","dataType","resetInputType","defaultInputType","defaultExists","some","inputType","selectedDataType","selectedInputType","inputTypeOption","dataTypeHints","a","_a","inputTypeHints","p","isObsolete","obsoleteMessage","l","_b","getInputTypeOption","inputName","save","open","rename","duration","updateInputType","of","concatMap","catchError","error","operate","source","subscriber","accumulator","seed","scanInternals","arguments","reduce","toArray","responses","NgForm","FieldHintComponent","toggleIsShort","isShort","ctx"],"sources":["./node_modules/rxjs/dist/esm/internal/operators/toArray.js","./projects/eav-ui/src/app/app-administration/constants/field-name.patterns.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: 'Boolean (yes/no)', description: 'Yes/no or true/false values' },\r\n  Custom: { label: 'Custom - ui-tools or custom types', description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: 'Date and/or time', description: 'For date, time or combined values' },\r\n  Empty: { label: 'Empty - for form-titles etc.', description: 'Use to structure your form' },\r\n  Entity: { label: 'Entity (other content-items)', description: 'One or more other content-items' },\r\n  Hyperlink: { label: 'Link / file reference', description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: 'Number', description: 'Any kind of number' },\r\n  String: { label: 'Text / string', description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\n@Directive({\r\n  selector: '[appReservedNames]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true }],\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: ReservedNames = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <ng-container *ngIf=\"editMode === undefined\">Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode === null\">Add Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode != null\">Edit Field</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<form #ngForm=\"ngForm\" class=\"dialog-form\" *ngIf=\"(loading$ | async) === false\" (ngSubmit)=\"save()\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n    <div class=\"row-container\" *ngFor=\"let field of fields; index as i\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n            [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n          <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n          <app-field-hint *ngIf=\"staticName.errors.reservedNames\" [isError]=\"true\">\r\n            {{ staticName.errors.reservedNames }}\r\n          </app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Data Type</mat-label>\r\n          <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n            [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n            <mat-select-trigger>\r\n              <mat-icon class=\"type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n              <span>{{ field.Type }}</span>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n              <mat-icon class=\"type-icon\">{{ dataType.icon }}</mat-icon>\r\n              <span>{{ dataType.label }}</span>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Input Type</mat-label>\r\n          <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n            [disabled]=\"editMode === 'name'\">\r\n            <mat-select-trigger>\r\n              <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n              <mat-icon class=\"input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\"\r\n              [ngClass]=\"{ 'input-obsolete': option.isObsolete }\">\r\n              <span>{{ option.label }}</span>\r\n              <mat-icon class=\"input-icon\" *ngIf=\"option.icon\">{{ option.icon }}</mat-icon>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n      Save\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { Component, HostBinding, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, catchError, concatMap, filter, forkJoin, map, of, share, Subscription, switchMap, toArray } from 'rxjs';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n})\r\nexport class EditContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  reservedNames: ReservedNames;\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(switchMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n\r\n        const existingFields: ReservedNames = {};\r\n        fields.forEach(field => {\r\n          existingFields[field.StaticName] = 'Field with this name already exists';\r\n        });\r\n        this.reservedNames = {\r\n          ...reservedNames,\r\n          ...existingFields,\r\n        };\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name') {\r\n            delete this.reservedNames[editField.StaticName];\r\n          }\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeConstants.String,\r\n              InputType: InputTypeConstants.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeConstants.DefaultSuffix;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists) {\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    }\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fields-f4d799.31e2ff43aeef3997.js"}