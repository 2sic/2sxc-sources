{"version":3,"mappings":"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","names":["BaseMainComponent","constructor","router","route","this","subscription","Subscription","ngOnDestroy","unsubscribe","refreshOnChildClosed","events","pipe","filter","event","NavigationEnd","startWith","snapshot","firstChild","map","pairwise","hadChild","hasChild","i0","ctx_r11","oxw","ctx_r20","ctx_r30","ctx_r32","ctx_r34","ctx_r35","ctx_r36","SystemInfoComponent","zoneService","snackBar","dialogService","sxcInsightsService","super","ngOnInit","systemInfoSet$","BehaviorSubject","undefined","languages$","loading$","buildTemplateVars","getSystemInfo","getLanguages","add","subscribe","complete","copyToClipboard","text","open","duration","openSiteSettings","sitePrimaryApp","dialogSettings","Context","Site","PrimaryApp","openAppAdministration","ZoneId","AppId","openGlobalSettings","globalPrimaryApp","System","openInsights","window","$2sxc","http","apiUrl","activatePageLog","form","next","pageLogDuration","res","document","activeElement","HTMLElement","blur","resetForm","error","systemInfoSet","languages","systemInfos$","label","value","EavVersion","Platform","PlatformVersion","Zones","toString","Fingerprint","License","Owner","link","url","GoToRegistration","target","siteInfos$","combineLatest","allLanguages","length","activeLanguages","l","IsEnabled","SiteId","Apps","warningIcon$","Messages","WarningsObsolete","WarningsOther","warningInfos$","templateVars$","systemInfos","siteInfos","loading","warningIcon","warningInfos","selectors","ctx_r6","ctx_r8","ctx_r10","AppsListActionsComponent","agInit","params","app","data","refresh","openLightspeed","onOpenLightspeed","flushCache","onFlush","deleteApp","onDelete","AppsListShowComponent","AppsListComponent","appsListService","context","buildGridOptions","Subject","apps$","refreshApps$","switchMap","getAll","catchError","of","share","fabOpen$","openChange","browseCatalog","createApp","navigate","relativeTo","createInheritedApp","addFromFolder","importApp","files","state","result","prompt","Name","Id","delete","alert","flushApp","confirm","Lightspeed","formUrl","convertFormToUrl","items","EntityId","zoneId","openApp","Object","defaultGridOptions","columnDefs","headerName","field","width","headerClass","cellClass","split","sortable","valueGetter","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","Guid","BooleanFilterComponent","IsHidden","flex","minWidth","sort","onCellClicked","Thumbnail","Folder","Version","Items","pinned","ctx","SiteLanguagesStatusComponent","toggleLanguage","onToggleLanguage","checked","SiteLanguagesComponent","refreshLanguages$","language","enable","Code","Culture","ctx_r4","ctx_r7","FeatureDetailsDialogComponent","dialogData","dialogRef","closeDialog","close","MAT_DIALOG_DATA","FeaturesListEnabledReasonComponent","feature","FeaturesListEnabledComponent","FeaturesStatusComponent","disabled","isDisabled","toggle","nextValue","onToggle","AgGridHeightDirective","elementRef","element","nativeElement","ngOnChanges","changes","itemsCount","style","height","headerHeight","maxRows","rowHeight","extraHeight","LicensesOrderPipe","transform","licenses","Array","isArray","a","b","Priority","pure","ActiveFeaturesCountPipe","license","Features","f","Enabled","LicenseInfoComponent","featuresConfigService","dialog","viewContainerRef","changeDetectorRef","licenses$","refreshLicenses$","getLicenses","tap","disabled$","trackLicenses","index","openRegistration","showFeatureDetails","autoFocus","markForCheck","toggleFeature","enabled","forkJoin","saveFeatures","FeatureGuid","timer","NameId","EnabledReason","expires","Expires","_a","startsWith","EnabledStored","AgGridAngular","AppsManagementNavComponent","appDialogConfigService","tabs","indexOf","path","tabIndex","fetchDialogSettings","dialogSettings$","changeTab","getShared$","FieldHintComponent","toggleIsShort","isShort","id","align","tooltip","copy","accentedSort","animateRows","enableCellTextSelection","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns","ToggleDebugDirective","globalConfigService","onClick","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","str","el","createElement","setAttribute","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange"],"sources":["./projects/eav-ui/src/app/shared/components/base-component/baseMain.component.ts","./projects/eav-ui/src/app/apps-management/system-info/system-info.component.html","./projects/eav-ui/src/app/apps-management/system-info/system-info.component.ts","./projects/eav-ui/src/app/apps-management/apps-list/apps-list-actions/apps-list-actions.component.html","./projects/eav-ui/src/app/apps-management/apps-list/apps-list-actions/apps-list-actions.component.ts","./projects/eav-ui/src/app/apps-management/apps-list/apps-list-show/apps-list-show.component.ts","./projects/eav-ui/src/app/apps-management/apps-list/apps-list-show/apps-list-show.component.html","./projects/eav-ui/src/app/apps-management/apps-list/apps-list.component.ts","./projects/eav-ui/src/app/apps-management/apps-list/apps-list.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.html","./projects/eav-ui/src/app/apps-management/licence-info/ag-grid-height.directive.ts","./projects/eav-ui/src/app/apps-management/licence-info/licenses-order.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/active-features-count.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.html","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// sdv TODO rename this class to BaseComponent when BaseComponent gets renamed to BaseFieldComponent\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport class BaseMainComponent implements OnDestroy {\r\n  subscription: Subscription;\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute,\r\n  ) {\r\n    this.subscription = new Subscription();\r\n   }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  protected refreshOnChildClosed() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild.firstChild),\r\n      pairwise(),\r\n      filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n    )\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>settings_applications</mat-icon>\r\n      </div>\r\n      <mat-card-title>Platform</mat-card-title>\r\n      <mat-card-subtitle>What you are running</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"info-row\" *ngFor=\"let info of data.systemInfos\">\r\n        <div class=\"info-row__label\">{{ info.label }}</div>\r\n        <div class=\"info-row__value\">\r\n          <span [tippy]=\"info.value\" (click)=\"copyToClipboard(info.value)\">{{ info.value }}</span>\r\n          <ng-container *ngIf=\"info.link\">\r\n            <a class=\"info-row__link\" [routerLink]=\"info.link.url\">{{ info.link.label }}</a>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Global Settings</h4>\r\n      <p>\r\n        This includes both pre-defined SystemSettings as well as custom Settings.\r\n        It will affect the entire Installation.\r\n        See <a href=\"http://r.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openGlobalSettings()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open Global Settings</span>\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>public</mat-icon>\r\n      </div>\r\n      <mat-card-title>This Site</mat-card-title>\r\n      <mat-card-subtitle>The current Site you're on</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"info-row\" *ngFor=\"let info of data.siteInfos\">\r\n        <div class=\"info-row__label\">{{ info.label }}</div>\r\n        <div class=\"info-row__value\">\r\n          <span [tippy]=\"info.value\" (click)=\"copyToClipboard(info.value)\">{{ info.value }}</span>\r\n          <ng-container *ngIf=\"info.link\">\r\n            <a class=\"info-row__link\" *ngIf=\"info.link.target === 'angular'\" [routerLink]=\"info.link.url\">{{\r\n              info.link.label\r\n              }}</a>\r\n            <a class=\"info-row__link\" *ngIf=\"info.link.target !== 'angular'\" [href]=\"info.link.url\"\r\n              [target]=\"info.link.target\">{{ info.link.label }}</a>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Site Settings</h4>\r\n      <p>\r\n        This includes both pre-defined SystemSettings as well as custom Settings.\r\n        It will affect the entire Site / Portal.\r\n        See <a href=\"http://r.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openSiteSettings()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open Site Settings</span>\r\n        </button>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>speed</mat-icon>\r\n      </div>\r\n      <mat-card-title>2sxc Insights</mat-card-title>\r\n      <mat-card-subtitle>See what's happening under the hood</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <h4>2sxc Insights for Super Users</h4>\r\n      <p>\r\n        This is to access a special section to see what is really in the server memory.\r\n        It's intended for extensive debugging - see also\r\n        <a href=\"https://2sxc.org/en/blog/post/using-2sxc-insights\" target=\"_blank\">this blog post</a>.\r\n      </p>\r\n      <div class=\"card-actions\">\r\n        <button mat-button (click)=\"openInsights()\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          <span>Open 2sxc Insights</span>\r\n        </button>\r\n      </div>\r\n      <div class=\"card-content-separator\"></div>\r\n      <h4>Activate Page Level Logging</h4>\r\n      <form #activateLogForm=\"ngForm\" class=\"activate-log-form\" (ngSubmit)=\"activatePageLog(activateLogForm)\">\r\n        <div>\r\n          This will place insights-logs in the HTML of the user output for users with ?debug=true in the url.\r\n          It can only be activated for short periods of time.\r\n        </div>\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Duration in Minutes</mat-label>\r\n          <input matInput type=\"number\" min=\"0\" required [pattern]=\"positiveWholeNumber\" [(ngModel)]=\"pageLogDuration\"\r\n            name=\"Duration\" #duration=\"ngModel\" [disabled]=\"data.loading\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"duration.touched && duration.errors\">\r\n          <app-field-hint *ngIf=\"duration.errors.pattern\" [isError]=\"true\">\r\n            Only positive whole numbers\r\n          </app-field-hint>\r\n        </ng-container>\r\n        <div class=\"form-actions\">\r\n          <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!activateLogForm.valid || data.loading\">\r\n            Activate\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>\r\n\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <div mat-card-avatar>\r\n        <mat-icon>{{ data.warningIcon }}</mat-icon>\r\n      </div>\r\n      <mat-card-title>Warnings</mat-card-title>\r\n      <mat-card-subtitle>System and Code Warnings</mat-card-subtitle>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <div class=\"info-row\" *ngFor=\"let info of data.warningInfos\">\r\n        <div class=\"info-row__label\">{{ info.label }}</div>\r\n        <div class=\"info-row__value\">\r\n          <span [tippy]=\"info.value\" (click)=\"copyToClipboard(info.value)\">{{ info.value }}</span>\r\n          <ng-container *ngIf=\"info.link\">\r\n            <a class=\"info-row__link\" *ngIf=\"info.link.target === 'angular'\" [routerLink]=\"info.link.url\">{{\r\n              info.link.label\r\n              }}</a>\r\n            <a class=\"info-row__link\" *ngIf=\"info.link.target !== 'angular'\" [href]=\"info.link.url\"\r\n              [target]=\"info.link.target\">{{ info.link.label }}</a>\r\n          </ng-container>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n  </mat-card>\r\n</ng-container>","import { Component, Input, OnDestroy, OnInit } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable} from 'rxjs';\r\nimport { DialogSettings } from '../../app-administration/models';\r\nimport { BaseMainComponent } from '../../shared/components/base-component/baseMain.component';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { SystemInfoSet } from '../models/system-info.model';\r\nimport { SxcInsightsService } from '../services/sxc-insights.service';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { GoToRegistration } from '../sub-dialogs/registration/go-to-registration';\r\nimport { InfoTemplate, SystemInfoTemplateVars } from './system-info.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-system-info',\r\n  templateUrl: './system-info.component.html',\r\n  styleUrls: ['./system-info.component.scss'],\r\n})\r\nexport class SystemInfoComponent extends BaseMainComponent implements OnInit, OnDestroy {\r\n  @Input() dialogSettings: DialogSettings;\r\n\r\n  pageLogDuration: number;\r\n  positiveWholeNumber = /^[1-9][0-9]*$/;\r\n  templateVars$: Observable<SystemInfoTemplateVars>;\r\n\r\n  private systemInfoSet$: BehaviorSubject<SystemInfoSet | undefined>;\r\n  private languages$: BehaviorSubject<SiteLanguage[] | undefined>;\r\n  private loading$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    router: Router,\r\n    route: ActivatedRoute,\r\n    private zoneService: ZoneService,\r\n    private snackBar: MatSnackBar,\r\n    private dialogService: DialogService,\r\n    private sxcInsightsService: SxcInsightsService,\r\n  ) {\r\n    super(router, route)\r\n   }\r\n\r\n  ngOnInit(): void {\r\n    this.systemInfoSet$ = new BehaviorSubject<SystemInfoSet | undefined>(undefined);\r\n    this.languages$ = new BehaviorSubject<SiteLanguage[] | undefined>(undefined);\r\n    this.loading$ = new BehaviorSubject<boolean>(false);\r\n\r\n    this.buildTemplateVars();\r\n    this.getSystemInfo();\r\n    this.getLanguages();\r\n    this.subscription.add(this.refreshOnChildClosed().subscribe(() => {\r\n      this.buildTemplateVars();\r\n      this.getSystemInfo();\r\n      this.getLanguages();\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.systemInfoSet$.complete();\r\n    this.languages$.complete();\r\n    this.loading$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  openSiteSettings(): void {\r\n    const sitePrimaryApp = this.dialogSettings.Context.Site.PrimaryApp;\r\n    this.dialogService.openAppAdministration(sitePrimaryApp.ZoneId, sitePrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings(): void {\r\n    const globalPrimaryApp = this.dialogSettings.Context.System.PrimaryApp;\r\n    this.dialogService.openAppAdministration(globalPrimaryApp.ZoneId, globalPrimaryApp.AppId, 'app');\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/help'), '_blank');\r\n  }\r\n\r\n  activatePageLog(form: NgForm) {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Activating...');\r\n    this.sxcInsightsService.activatePageLog(this.pageLogDuration).subscribe(res => {\r\n      this.loading$.next(false);\r\n      this.snackBar.open(res, null, { duration: 4000 });\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n    form.resetForm();\r\n  }\r\n\r\n  private getSystemInfo(): void {\r\n    this.zoneService.getSystemInfo().subscribe({\r\n      error: () => {\r\n        this.systemInfoSet$.next(undefined);\r\n      },\r\n      next: (systemInfoSet) => {\r\n        this.systemInfoSet$.next(systemInfoSet);\r\n      },\r\n    });\r\n  }\r\n\r\n  private getLanguages(): void {\r\n    this.zoneService.getLanguages().subscribe({\r\n      error: () => {\r\n        this.languages$.next(undefined);\r\n      },\r\n      next: (languages) => {\r\n        this.languages$.next(languages);\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildTemplateVars(): void {\r\n    const systemInfos$ = this.systemInfoSet$.pipe(\r\n      map(systemInfoSet => {\r\n        if (systemInfoSet == null) { return; }\r\n        const info: InfoTemplate[] = [\r\n          { label: 'CMS', value: `2sxc v.${systemInfoSet.System.EavVersion}` },\r\n          { label: 'Platform', value: `${systemInfoSet.System.Platform} v.${systemInfoSet.System.PlatformVersion}` },\r\n          { label: 'Zones', value: systemInfoSet.System.Zones.toString() },\r\n          { label: 'Fingerprint', value: systemInfoSet.System.Fingerprint },\r\n          {\r\n            label: 'Registered to',\r\n            value: systemInfoSet.License.Owner || '(unregistered)',\r\n            link: systemInfoSet.License.Owner\r\n              ? {\r\n                url: this.router.url + \"/\" + GoToRegistration.getUrl(),\r\n                label: 'manage',\r\n                target: 'angular',\r\n              }\r\n              : {\r\n                url: this.router.url + \"/\" + GoToRegistration.getUrl(),\r\n                label: 'register',\r\n                target: 'angular',\r\n              },\r\n          },\r\n        ];\r\n        return info;\r\n      })\r\n    );\r\n    const siteInfos$ = combineLatest([this.systemInfoSet$, this.languages$]).pipe(\r\n      map(([systemInfoSet, languages]) => {\r\n        if (systemInfoSet == null || languages == null) { return; }\r\n        const allLanguages = languages.length;\r\n        const activeLanguages = languages.filter(l => l.IsEnabled).length;\r\n        const info: InfoTemplate[] = [\r\n          { label: 'Zone', value: systemInfoSet.Site.ZoneId.toString() },\r\n          { label: 'Site', value: systemInfoSet.Site.SiteId.toString() },\r\n          {\r\n            label: 'Languages',\r\n            value: `${activeLanguages}/${allLanguages}`,\r\n            link: {\r\n              url: 'languages',\r\n              label: 'manage',\r\n              target: 'angular',\r\n            },\r\n          },\r\n          {\r\n            label: 'Apps',\r\n            value: systemInfoSet.Site.Apps.toString(),\r\n            link: {\r\n              url: 'list',\r\n              label: 'manage',\r\n              target: 'angular',\r\n            },\r\n          },\r\n        ];\r\n        return info;\r\n      })\r\n    );\r\n    const warningIcon$ = this.systemInfoSet$.pipe(\r\n      map(systemInfoSet => {\r\n        if (systemInfoSet == null) { return; }\r\n        if (systemInfoSet.Messages.WarningsObsolete || systemInfoSet.Messages.WarningsOther) {\r\n          return 'warning';\r\n        }\r\n        return 'check';\r\n      }),\r\n    );\r\n    const warningInfos$ = this.systemInfoSet$.pipe(\r\n      map(systemInfoSet => {\r\n        if (systemInfoSet == null) { return; }\r\n        const info: InfoTemplate[] = [\r\n          {\r\n            label: 'Warnings Obsolete',\r\n            value: systemInfoSet.Messages.WarningsObsolete.toString(),\r\n            link: !systemInfoSet.Messages.WarningsObsolete\r\n              ? undefined\r\n              : {\r\n                url: window.$2sxc.http.apiUrl('sys/insights/logs?key=warnings-obsolete'),\r\n                label: 'review',\r\n                target: '_blank',\r\n              },\r\n          },\r\n          {\r\n            label: 'Warnings Other',\r\n            value: systemInfoSet.Messages.WarningsOther.toString(),\r\n            link: !systemInfoSet.Messages.WarningsOther\r\n              ? undefined\r\n              : {\r\n                url: window.$2sxc.http.apiUrl('sys/insights/logs'),\r\n                label: 'review',\r\n                target: '_blank',\r\n              },\r\n          },\r\n        ];\r\n        return info;\r\n      }),\r\n    );\r\n    this.templateVars$ = combineLatest([systemInfos$, siteInfos$, this.loading$, warningIcon$, warningInfos$]).pipe(\r\n      map(([systemInfos, siteInfos, loading, warningIcon, warningInfos]) => {\r\n        const templateVars: SystemInfoTemplateVars = {\r\n          systemInfos,\r\n          siteInfos,\r\n          loading,\r\n          warningIcon,\r\n          warningInfos,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\"\r\n    [tippy]=\"app.IsGlobal ? 'This app is global' : app.IsInherited ? 'This app is inherited' : ''\"\r\n    [tippyDisabled]=\"!app.IsGlobal && !app.IsInherited\">\r\n    <mat-icon *ngIf=\"app.IsGlobal\">foundation</mat-icon>\r\n    <mat-icon *ngIf=\"app.IsInherited\">holiday_village</mat-icon>\r\n  </div>\r\n  <div class=\"like-button\" *ngIf=\"app.Lightspeed?.IsEnabled\" matRipple [tippy]=\"app.Lightspeed.Title\"\r\n    (click)=\"openLightspeed()\">\r\n    <mat-icon>bolt</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" tippy=\"Lightspeed is disabled\" *ngIf=\"!app.Lightspeed?.IsEnabled\">\r\n    <mat-icon>bolt</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item (click)=\"flushCache()\">\r\n      <mat-icon>cached</mat-icon>\r\n      <span>Flush cache</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"!app.IsApp\" (click)=\"deleteApp()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { App } from '../../models/app.model';\r\nimport { AppsListActionsParams } from './apps-list-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-apps-list-actions',\r\n  templateUrl: './apps-list-actions.component.html',\r\n  styleUrls: ['./apps-list-actions.component.scss'],\r\n})\r\nexport class AppsListActionsComponent implements ICellRendererAngularComp {\r\n  app: App;\r\n\r\n  private params: ICellRendererParams & AppsListActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & AppsListActionsParams): void {\r\n    this.params = params;\r\n    this.app = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openLightspeed(): void {\r\n    this.params.onOpenLightspeed(this.app);\r\n  }\r\n\r\n  flushCache(): void {\r\n    this.params.onFlush(this.app);\r\n  }\r\n\r\n  deleteApp(): void {\r\n    this.params.onDelete(this.app);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-apps-list-show',\r\n  templateUrl: './apps-list-show.component.html',\r\n  styleUrls: ['./apps-list-show.component.scss'],\r\n})\r\nexport class AppsListShowComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <div class=\"like-button icon\" [tippy]=\"value ? 'Show this app to users' : 'Don\\'t show this app to users'\">\r\n    <mat-icon>{{ value ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n</div>","import { GridOptions, ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, catchError, Observable, of, share, startWith, Subject, switchMap } from 'rxjs';\r\nimport { BaseMainComponent } from '../../shared/components/base-component/baseMain.component';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { App } from '../models/app.model';\r\nimport { AppsListService } from '../services/apps-list.service';\r\nimport { AppsListActionsComponent } from './apps-list-actions/apps-list-actions.component';\r\nimport { AppsListActionsParams } from './apps-list-actions/apps-list-actions.models';\r\nimport { AppsListShowComponent } from './apps-list-show/apps-list-show.component';\r\n\r\n@Component({\r\n  selector: 'app-apps-list',\r\n  templateUrl: './apps-list.component.html',\r\n  styleUrls: ['./apps-list.component.scss'],\r\n})\r\nexport class AppsListComponent extends BaseMainComponent implements OnInit, OnDestroy {\r\n  apps$: Observable<App[]>;\r\n  fabOpen$ = new BehaviorSubject(false);\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n\r\n  constructor(\r\n    router: Router,\r\n    route: ActivatedRoute,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n    private context: Context,\r\n  ) { \r\n    super(router, route)\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.apps$ = this.refreshApps$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.appsListService.getAll().pipe(catchError(() => of(undefined)))),\r\n      share(),\r\n    );\r\n    this.subscription.add(this.refreshOnChildClosed().subscribe(() => { this.refreshApps$.next(); }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.fabOpen$.complete();\r\n    this.refreshApps$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  openChange(open: boolean): void {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  browseCatalog(): void {\r\n    window.open('https://2sxc.org/apps', '_blank');\r\n  }\r\n\r\n  createApp(): void {\r\n    this.router.navigate(['create'], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  createInheritedApp(): void {\r\n    this.router.navigate(['create-inherited'], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  addFromFolder(): void {\r\n    this.router.navigate(['add-app-from-folder'], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  importApp(files?: File[]): void {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route.firstChild, state: dialogData });\r\n  }\r\n\r\n  private deleteApp(app: App): void {\r\n    const result = prompt(`This cannot be undone. To really delete this app, type 'yes!' or type/paste the app-name here. Are you sure want to delete '${app.Name}' (${app.Id})?`);\r\n    if (result === null) { return; }\r\n    if (result === app.Name || result === 'yes!') {\r\n      this.snackBar.open('Deleting...');\r\n      this.appsListService.delete(app.Id).subscribe({\r\n        error: () => {\r\n          this.snackBar.open('Delete failed. Please check console for more information', undefined, { duration: 3000 });\r\n          this.refreshApps$.next();\r\n        },\r\n        next: () => {\r\n          this.snackBar.open('Deleted', undefined, { duration: 2000 });\r\n          this.refreshApps$.next();\r\n        },\r\n      });\r\n    } else {\r\n      alert('Input did not match - will not delete');\r\n    }\r\n  }\r\n\r\n  private flushApp(app: App): void {\r\n    if (!confirm(`Flush the App Cache for ${app.Name} (${app.Id})?`)) { return; }\r\n    this.snackBar.open('Flushing cache...');\r\n    this.appsListService.flushCache(app.Id).subscribe({\r\n      error: () => {\r\n        this.snackBar.open('Cache flush failed. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.snackBar.open('Cache flushed', undefined, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private openLightspeed(app: App): void {\r\n    if (!app.Lightspeed) { return; }\r\n    const form: EditForm = { items: [{ EntityId: app.Lightspeed.Id }] };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`${this.context.zoneId}/${app.Id}/edit/${formUrl}`], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  private openApp(app: App): void {\r\n    this.router.navigate([app.Id.toString()], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'ID',\r\n          field: 'Id',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'id-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return app.Id;\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<App> = {\r\n              tooltipGetter: (app) => `ID: ${app.Id}\\nGUID: ${app.Guid}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Show',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'icons no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return !app.IsHidden;\r\n          },\r\n          cellRenderer: AppsListShowComponent,\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'apps-list-primary-action highlight'.split(' '),\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return app.Name;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const app: App = params.data;\r\n            this.openApp(app);\r\n          },\r\n          cellRenderer: (params: ICellRendererParams) => {\r\n            const app: App = params.data;\r\n            return `\r\n            <div class=\"container\">\r\n              ${app.Thumbnail\r\n                ? `<img class=\"image logo\" src=\"${app.Thumbnail}?w=40&h=40&mode=crop\"></img>`\r\n              : `<div class=\"image logo\"><span class=\"material-icons-outlined\">star_border</span></div>`\r\n              }\r\n              <div class=\"text\">${params.value}</div>\r\n            </div>\r\n            `;\r\n          },\r\n        },\r\n        {\r\n          field: 'Folder',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return app.Folder;\r\n          },\r\n        },\r\n        {\r\n          field: 'Version',\r\n          width: 78,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return app.Version;\r\n          },\r\n        },\r\n        {\r\n          field: 'Items',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'number-cell no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const app: App = params.data;\r\n            return app.Items;\r\n          },\r\n        },\r\n        {\r\n          width: 122,\r\n          cellClass: 'secondary-action no-padding'.split(' '),\r\n          pinned: 'right',\r\n          cellRenderer: AppsListActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: AppsListActionsParams = {\r\n              onDelete: (app) => this.deleteApp(app),\r\n              onFlush: (app) => this.flushApp(app),\r\n              onOpenLightspeed: (app) => this.openLightspeed(app),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"apps$ | async\" [gridOptions]=\"gridOptions\" appDragAndDrop\r\n    [allowedFileTypes]=\"'zip'\" (filesDropped)=\"importApp($event)\">\r\n  </ag-grid-angular>\r\n\r\n  <div class=\"grid-more-actions-box\"></div>\r\n\r\n  <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': (fabOpen$ | async) }\"\r\n    (openChange)=\"openChange($event)\">\r\n    <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n      <button mat-fab>\r\n        <mat-icon class=\"spin180\">{{ (fabOpen$ | async) ? 'close' : 'add' }}</mat-icon>\r\n      </button>\r\n    </eco-fab-speed-dial-trigger>\r\n\r\n    <eco-fab-speed-dial-actions>\r\n      <button mat-mini-fab label=\"Find more apps\" (click)=\"browseCatalog()\">\r\n        <mat-icon>search</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Create inherited app\" (click)=\"createInheritedApp()\">\r\n        <mat-icon>holiday_village</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Add from folder (beta)\" (click)=\"addFromFolder()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Import app\" (click)=\"importApp()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n      </button>\r\n      <button mat-mini-fab label=\"Create app\" (click)=\"createApp()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </eco-fab-speed-dial-actions>\r\n  </eco-fab-speed-dial>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages-status',\r\n  templateUrl: './site-languages-status.component.html',\r\n  styleUrls: ['./site-languages-status.component.scss'],\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private params: ICellRendererParams & SiteLanguagesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & SiteLanguagesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage(event: MatSlideToggleChange): void {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onToggleLanguage(language, event.checked);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage($event)\"></mat-slide-toggle>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { catchError, Observable, of, share, startWith, Subject, switchMap } from 'rxjs';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { SiteLanguagesStatusComponent } from './site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status/site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages',\r\n  templateUrl: './site-languages.component.html',\r\n  styleUrls: ['./site-languages.component.scss'],\r\n})\r\nexport class SiteLanguagesComponent implements OnInit, OnDestroy {\r\n  languages$: Observable<SiteLanguage[]>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshLanguages$ = new Subject<void>();\r\n\r\n  constructor(private zoneService: ZoneService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.languages$ = this.refreshLanguages$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.zoneService.getLanguages().pipe(catchError(() => of(undefined)))),\r\n      share(),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshLanguages$.complete();\r\n  }\r\n\r\n  private toggleLanguage(language: SiteLanguage, enable: boolean): void {\r\n    this.zoneService.toggleLanguage(language.Code, enable).subscribe({\r\n      error: () => {\r\n        this.refreshLanguages$.next();\r\n      },\r\n      next: () => {\r\n        this.refreshLanguages$.next();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'ID',\r\n          field: 'Id',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'id-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            return language.Code;\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguage> = {\r\n              tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action highlight no-outline'.split(' '),\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            return language.Culture;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            this.toggleLanguage(language, !language.IsEnabled);\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            return language.IsEnabled;\r\n          },\r\n          cellRenderer: SiteLanguagesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: SiteLanguagesStatusParams = {\r\n              onToggleLanguage: (language, enable) => this.toggleLanguage(language, enable),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"languages$ | async\" [gridOptions]=\"gridOptions\">\r\n  </ag-grid-angular>\r\n\r\n  <div class=\"grid-more-actions-box\"></div>\r\n</div>\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>{{ dialogData.feature.Name }}</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\" [innerHtml]=\"dialogData.feature.Description | safeHtml\"></p>\r\n\r\n<div class=\"info-box\">\r\n  <div class=\"info-row\" *ngIf=\"dialogData.feature.NameId as id\">\r\n    <div class=\"info-row__label\">ID</div>\r\n    <div class=\"info-row__value click\">\r\n      <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"info-row\" *ngIf=\"dialogData.feature.Guid as guid\">\r\n    <div class=\"info-row__label\">GUID</div>\r\n    <div class=\"info-row__value click\">\r\n      <span [tippy]=\"guid\" (click)=\"copyToClipboard(guid)\">{{ guid }}</span>\r\n    </div>\r\n  </div>\r\n  <div class=\"info-row\"\r\n    *ngIf=\"(dialogData.feature.Security.Impact + ': ' + dialogData.feature.Security.Message) as security\">\r\n    <div class=\"info-row__label\">Security Rating</div>\r\n    <div class=\"info-row__value\">\r\n      <span>{{ security }}</span>\r\n    </div>\r\n  </div>\r\n</div>","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  styleUrls: ['./feature-details-dialog.component.scss']\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FeatureDetailsDialogData,\r\n    private dialogRef: MatDialogRef<FeatureDetailsDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../models/feature.model';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled-reason',\r\n  templateUrl: './features-list-enabled-reason.component.html',\r\n  styleUrls: ['./features-list-enabled-reason.component.scss'],\r\n})\r\nexport class FeaturesListEnabledReasonComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  feature: Feature;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n    this.feature = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div [tippy]=\"feature.EnabledReasonDetailed\">{{ value }}</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled',\r\n  templateUrl: './features-list-enabled.component.html',\r\n  styleUrls: ['./features-list-enabled.component.scss'],\r\n})\r\nexport class FeaturesListEnabledComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ value ? 'check_box' : 'check_box_outline_blank' }}</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../models/feature.model';\r\nimport { FeaturesStatusParams } from './features-status.models';\r\n\r\n@Component({\r\n  selector: 'app-features-status',\r\n  templateUrl: './features-status.component.html',\r\n  styleUrls: ['./features-status.component.scss'],\r\n})\r\nexport class FeaturesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean | null;\r\n  disabled: boolean;\r\n\r\n  private params: ICellRendererParams & FeaturesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & FeaturesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n    this.disabled = this.params.isDisabled();\r\n  }\r\n\r\n  refresh(params: ICellRendererParams & FeaturesStatusParams): boolean {\r\n    this.disabled = this.params.isDisabled();\r\n    return true;\r\n  }\r\n\r\n  toggle(): void {\r\n    const feature: Feature = this.params.data;\r\n    let nextValue: boolean;\r\n    switch (this.value) {\r\n      case false:\r\n        nextValue = null;\r\n        break;\r\n      case null:\r\n        nextValue = true;\r\n        break;\r\n      case true:\r\n        nextValue = false;\r\n        break;\r\n    }\r\n    this.value = nextValue;\r\n    this.params.onToggle(feature, nextValue);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" [disabled]=\"disabled\" (change)=\"toggle()\" [ngClass]=\"{\r\n  'toggle-false': value === false,\r\n  'toggle-null': value === null\r\n  }\">\r\n</mat-slide-toggle>\r\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({ selector: '[appAgGridHeight]' })\r\nexport class AgGridHeightDirective implements OnChanges {\r\n  @Input() itemsCount = 0;\r\n  @Input() headerHeight = 32;\r\n  @Input() rowHeight = 48;\r\n  @Input() maxRows = 100;\r\n\r\n  /** Fixes a bug where scrollbar appears when then is no overflow */\r\n  private extraHeight = 2;\r\n\r\n  private element: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.itemsCount != null) {\r\n      const rows = this.itemsCount === 0 ? 2 : this.itemsCount > this.maxRows ? this.maxRows : this.itemsCount;\r\n      this.element.style.height = `${this.headerHeight + rows * this.rowHeight + this.extraHeight}px`;\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({ name: 'licensesOrder' })\r\nexport class LicensesOrderPipe implements PipeTransform {\r\n\r\n  transform(licenses: License[]): any {\r\n    if (!Array.isArray(licenses)) { return licenses; }\r\n\r\n    const sorted = [...licenses].sort((a: License, b: License) => {\r\n      if (a.Priority < b.Priority) {\r\n        return -1;\r\n      } else if (a.Priority > b.Priority) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return sorted;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({ name: 'activeFeaturesCount' })\r\nexport class ActiveFeaturesCountPipe implements PipeTransform {\r\n\r\n  transform(license: License) {\r\n    return `${license.Features.filter(f => f.Enabled).length}/${license.Features.length}`;\r\n  }\r\n}\r\n","<mat-accordion multi *ngIf=\"licenses$ | async as licenses\">\r\n  <mat-expansion-panel #panel *ngFor=\"let license of licenses | licensesOrder; trackBy: trackLicenses\">\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <mat-icon class=\"panel-icon\" [tippy]=\"license.IsEnabled ? 'License is active' : 'License is not active'\">{{\r\n          license.IsEnabled ? 'check_circle_outline' : 'cancel' }}</mat-icon>\r\n        <div>\r\n          <div class=\"panel-title\">\r\n            <span>{{ license.Name }}</span>\r\n            <span class=\"active-features-count\">{{ license | activeFeaturesCount }}</span>\r\n          </div>\r\n          <div class=\"panel-description\" [ngClass]=\"{ 'expanded': panel.expanded }\">\r\n            {{ license.Description }}\r\n          </div>\r\n        </div>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n\r\n    <ng-container *ngIf=\"panel.expanded\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"license.Features\" [gridOptions]=\"gridOptions\"\r\n        appAgGridHeight [itemsCount]=\"license.Features?.length\">\r\n      </ag-grid-angular>\r\n    </ng-container>\r\n  </mat-expansion-panel>\r\n</mat-accordion>\r\n\r\n<div class=\"spacer\"></div>\r\n\r\n<div class=\"actions-box\">\r\n  <button mat-button tippy=\"Registration\" (click)=\"openRegistration()\">\r\n    <mat-icon>app_registration</mat-icon>\r\n    <span>Registration</span>\r\n  </button>\r\n</div>","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { GridOptions } from '@ag-grid-community/core';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\n// tslint:disable-next-line:max-line-length\r\nimport { BehaviorSubject, catchError, filter, forkJoin, map, Observable, of, pairwise, share, startWith, Subject, Subscription, switchMap, tap, timer } from 'rxjs';\r\nimport { BaseMainComponent } from '../../shared/components/base-component/baseMain.component';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { Feature, FeatureState } from '../models/feature.model';\r\nimport { License } from '../models/license.model';\r\nimport { FeaturesConfigService } from '../services/features-config.service';\r\nimport { GoToRegistration } from '../sub-dialogs/registration/go-to-registration';\r\nimport { FeatureDetailsDialogComponent } from './feature-details-dialog/feature-details-dialog.component';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog/feature-details-dialog.models';\r\nimport { FeaturesListEnabledReasonComponent } from './features-list-enabled-reason/features-list-enabled-reason.component';\r\nimport { FeaturesListEnabledComponent } from './features-list-enabled/features-list-enabled.component';\r\nimport { FeaturesStatusComponent } from './features-status/features-status.component';\r\nimport { FeaturesStatusParams } from './features-status/features-status.models';\r\n\r\n@Component({\r\n  selector: 'app-license-info',\r\n  templateUrl: './license-info.component.html',\r\n  styleUrls: ['./license-info.component.scss'],\r\n})\r\nexport class LicenseInfoComponent extends BaseMainComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AgGridAngular) private gridRef?: AgGridAngular;\r\n\r\n  licenses$: Observable<License[]>;\r\n  disabled$ = new BehaviorSubject(false);\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshLicenses$ = new Subject<void>();\r\n\r\n  constructor(\r\n    router: Router,\r\n    route: ActivatedRoute,\r\n    private featuresConfigService: FeaturesConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.licenses$ = this.refreshLicenses$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.featuresConfigService.getLicenses().pipe(catchError(() => of(undefined)))),\r\n      tap(() => this.disabled$.next(false)),\r\n      share(),\r\n    );\r\n    this.subscription.add(this.refreshOnChildClosed().subscribe(() => { this.refreshLicenses$.next(); }));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.disabled$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  trackLicenses(index: number, license: License): string {\r\n    return license.Guid;\r\n  }\r\n\r\n  openRegistration(): void {\r\n    this.router.navigate([GoToRegistration.getUrl()], { relativeTo: this.route.firstChild });\r\n  }\r\n\r\n  private showFeatureDetails(feature: Feature): void {\r\n    const data: FeatureDetailsDialogData = {\r\n      feature,\r\n    };\r\n    this.dialog.open(FeatureDetailsDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private toggleFeature(feature: Feature, enabled: boolean): void {\r\n    this.disabled$.next(true);\r\n    const state: FeatureState = {\r\n      FeatureGuid: feature.Guid,\r\n      Enabled: enabled,\r\n    };\r\n    forkJoin([this.featuresConfigService.saveFeatures([state]), timer(100)]).subscribe({\r\n      error: () => {\r\n        this.refreshLicenses$.next();\r\n      },\r\n      next: () => {\r\n        this.refreshLicenses$.next();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'ID',\r\n          field: 'Id',\r\n          width: 200,\r\n          headerClass: 'dense',\r\n          cellClass: 'id-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            return feature.NameId;\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<Feature> = {\r\n              tooltipGetter: (feature: Feature) => feature.NameId,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 3,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          onCellClicked: (params) => {\r\n            const feature: Feature = params.data;\r\n            this.showFeatureDetails(feature);\r\n          },\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            return feature.Name;\r\n          },\r\n        },\r\n        {\r\n          field: 'Enabled',\r\n          width: 80,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          cellRenderer: FeaturesListEnabledComponent,\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            return feature.Enabled;\r\n          },\r\n        },\r\n        {\r\n          field: 'EnabledReason',\r\n          headerName: 'Reason',\r\n          flex: 1,\r\n          minWidth: 150,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: FeaturesListEnabledReasonComponent,\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            return feature.EnabledReason;\r\n          },\r\n        },\r\n        {\r\n          field: 'Expires',\r\n          width: 100,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            const expires = feature.Expires?.split('T')[0];\r\n            return expires?.startsWith('9999') ? 'never' : expires;\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          headerName: '',\r\n          width: 62,\r\n          cellClass: 'secondary-action no-outline no-padding'.split(' '),\r\n          pinned: 'right',\r\n          cellRenderer: FeaturesStatusComponent,\r\n          valueGetter: (params) => {\r\n            const feature: Feature = params.data;\r\n            return feature.EnabledStored;\r\n          },\r\n          cellRendererParams: (() => {\r\n            const params: FeaturesStatusParams = {\r\n              isDisabled: () => this.disabled$.value,\r\n              onToggle: (feature, enabled) => this.toggleFeature(feature, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\" appToggleDebug>\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Manage Zone {{ zoneId }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <!-- spm NOTE: we use mat-tab-group because mat-tab-nav-bar doesn't have animations and doesn't look pretty -->\r\n  <mat-tab-group class=\"mat-tab-group-max-height\" dynamicHeight color=\"accent\"\r\n    *ngIf=\"dialogSettings$ | async as dialogSettings\" (selectedTabChange)=\"changeTab($event)\"\r\n    [selectedIndex]=\"tabIndex$ | async\">\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"System Info\">\r\n        <mat-icon>settings</mat-icon>\r\n        <span>System</span>\r\n      </div>\r\n      <app-system-info *matTabContent [dialogSettings]=\"dialogSettings\"></app-system-info>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Apps\">\r\n        <mat-icon>star_border</mat-icon>\r\n        <span>Apps</span>\r\n      </div>\r\n      <app-apps-list *matTabContent></app-apps-list>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Languages\">\r\n        <mat-icon>translate</mat-icon>\r\n        <span>Languages</span>\r\n      </div>\r\n      <app-site-languages *matTabContent></app-site-languages>\r\n    </mat-tab>\r\n\r\n    <mat-tab>\r\n      <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Extensions and Features\">\r\n        <mat-icon>tune</mat-icon>\r\n        <span>Extensions / Features</span>\r\n      </div>\r\n      <app-license-info *matTabContent></app-license-info>\r\n    </mat-tab>\r\n  </mat-tab-group>\r\n</div>","import { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatTabChangeEvent } from '@angular/material/tabs';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, filter, map, pairwise, startWith, Subscription } from 'rxjs';\r\nimport { DialogSettings } from '../../app-administration/models';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n})\r\nexport class AppsManagementNavComponent implements OnInit, OnDestroy {\r\n  zoneId = this.context.zoneId;\r\n  dialogSettings$ = new BehaviorSubject<DialogSettings>(undefined);\r\n\r\n  private tabs = ['system', 'list', 'languages', 'license']; // tabs order has to match template\r\n  tabIndex$ = this.router.events.pipe(\r\n    filter(event => event instanceof NavigationEnd),\r\n    map(() => this.tabs.indexOf(this.route.snapshot.firstChild.url[0].path)),\r\n    filter(tabIndex => tabIndex >= 0),\r\n    startWith(this.tabs.indexOf(this.route.snapshot.firstChild.url[0].path)),\r\n  );\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogSettings$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeTab(event: MatTabChangeEvent) {\r\n    const path = this.tabs[event.index];\r\n    this.router.navigate([path], { relativeTo: this.route });\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.appDialogConfigService.getShared$(0)/*.getDialogSettings(0)*/.subscribe(dialogSettings => {\r\n      this.dialogSettings$.next(dialogSettings);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchDialogSettings();\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.76718f44c502966c.js"}