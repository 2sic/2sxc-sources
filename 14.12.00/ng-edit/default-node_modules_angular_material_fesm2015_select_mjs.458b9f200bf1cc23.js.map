{"version":3,"mappings":"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","names":["i0","e","i","_panelDoneAnimatingStream","_handleKeydown","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","transform","minWidth","opacity","animate","nextUniqueId","SELECT_PANEL_MAX_HEIGHT","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","constructor","source","value","this","_MatSelectMixinBase","mixinDisableRipple","mixinTabIndex","mixinDisabled","mixinErrorState","_elementRef","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MAT_SELECT_TRIGGER","MatSelectTrigger","ɵfac","ɵdir","selectors","useExisting","_MatSelectBase","_viewportRuler","_changeDetectorRef","_ngZone","elementRef","_dir","_parentFormField","tabIndex","scrollStrategyFactory","_liveAnnouncer","_defaultOptions","_a","_b","_c","super","_panelOpen","_compareWith","o1","o2","_uid","_triggerAriaLabelledBy","_destroy","Subject","_onChange","_onTouched","_valueId","_overlayPanelClass","overlayPanelClass","_focused","controlType","_multiple","_disableOptionCentering","disableOptionCentering","ariaLabel","optionSelectionChanges","defer","options","changes","pipe","startWith","switchMap","merge","map","option","onSelectionChange","onStable","take","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","valueAccessor","typeaheadDebounceInterval","_typeaheadDebounceInterval","_scrollStrategyFactory","_scrollStrategy","parseInt","id","focused","placeholder","_placeholder","stateChanges","next","required","_d","_required","control","hasValidator","Validators","coerceBooleanProperty","multiple","compareWith","fn","_selectionModel","_initializeSelection","_value","newValue","hasAssigned","_assignValue","coerceNumberProperty","_id","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","ngAfterContentInit","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","element","nativeElement","setAttribute","removeAttribute","_previousControl","undefined","disabled","updateErrorState","ngOnChanges","_keyManager","withTypeAhead","ngOnDestroy","complete","toggle","close","open","_canOpen","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","triggerValue","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","activeItemIndex","shiftKey","_onFocus","_onBlur","_onAttached","_overlayDir","positionChange","detectChanges","_positioningSettled","_getPanelTheme","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withAllowedModifierKeys","tabOut","focus","change","panel","_scrollOptionIntoView","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","toArray","sort","a","b","sortComparator","indexOf","fallbackValue","valueToEmit","emit","_getChangeEvent","setFirstItemActive","length","_getPanelAriaLabelledby","labelId","getLabelId","ariaLabelledby","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","_ariaDescribedby","onContainerClick","shouldLabelFloat","i1","i2","i3","i4","MAT_FORM_FIELD","i5","viewQuery","Q","$","CdkConnectedOverlay","n","t","MatSelect","arguments","_scrollTop","_triggerFontSize","_transformOrigin","_offsetY","_positions","originX","originY","overlayX","overlayY","_calculateOverlayScroll","selectedIndex","scrollBuffer","maxScroll","itemHeight","_getItemHeight","Math","min","max","_triggerRect","getBoundingClientRect","getComputedStyle","fontSize","_calculateOverlayPosition","overlayRef","overlayElement","index","labelCount","_countGroupLabelsBeforeOption","optionGroups","scrollTop","_getOptionScrollPosition","_calculateOverlayOffsetX","offsetX","MatSelectChange","overlayRect","viewportSize","getViewportSize","isRtl","paddingWidth","SELECT_MULTIPLE_PANEL_PADDING_X","SELECT_PANEL_PADDING_X","first","group","leftOverflow","left","rightOverflow","right","width","round","updatePosition","_calculateOverlayOffsetY","optionHeightAdjustment","height","maxOptionsDisplayed","floor","optionOffsetFromPanelTop","_getItemCount","_checkOverlayWithinViewport","topSpaceAvailable","top","bottomSpaceAvailable","bottom","panelHeightTop","abs","panelHeightBottom","_adjustPanelUp","_adjustPanelDown","_getOriginBasedOnOption","distanceBelowViewport","distanceAboveViewport","items","panelHeight","selectedOptionOffset","ɵcmp","MatOption","MAT_OPTGROUP","MatFormFieldControl","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","se","directives","i7","i8","styles","changeDetection","MatSelectModule","ɵmod","ɵinj","imports","CommonModule","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"sources":["./node_modules/@angular/material/fesm2015/select.mjs"],"sourcesContent":["import * as i7 from '@angular/cdk/overlay';\nimport { Overlay, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i8 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, EventEmitter, Optional, Inject, Self, Attribute, ViewChild, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinTabIndex, mixinDisabled, mixinErrorState, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport * as i6 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport * as i5 from '@angular/cdk/a11y';\nimport { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport * as i4 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, take, filter, map, distinctUntilChanged, takeUntil } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport * as i3 from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /**\n     * This animation transforms the select's overlay panel on and off the page.\n     *\n     * When the panel is attached to the DOM, it expands its width by the amount of padding, scales it\n     * up to 100% on the Y axis, fades in its border, and translates slightly up and to the\n     * side to ensure the option text correctly overlaps the trigger text.\n     *\n     * When the panel is removed from the DOM, it simply fades out linearly.\n     */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            transform: 'scaleY(0.8)',\n            minWidth: '100%',\n            opacity: 0,\n        })),\n        state('showing', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 32px)',\n            transform: 'scaleY(1)',\n        })),\n        state('showing-multiple', style({\n            opacity: 1,\n            minWidth: 'calc(100% + 64px)',\n            transform: 'scaleY(1)',\n        })),\n        transition('void => *', animate('120ms cubic-bezier(0, 0, 0.2, 1)')),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nlet nextUniqueId = 0;\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the alignment of the selected option over\n * the trigger element.\n */\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n/** The panel's padding on the x-axis. */\nconst SELECT_PANEL_PADDING_X = 16;\n/** The panel's x axis padding if it is indented (e.g. there is an option group). */\nconst SELECT_PANEL_INDENT_PADDING_X = SELECT_PANEL_PADDING_X * 2;\n/** The height of the select items in `em` units. */\nconst SELECT_ITEM_HEIGHT_EM = 3;\n// TODO(josephperrott): Revert to a constant after 2018 spec updates are fully merged.\n/**\n * Distance between the panel edge and the option text in\n * multi-selection mode.\n *\n * Calculated as:\n * (SELECT_PANEL_PADDING_X * 1.5) + 16 = 40\n * The padding is multiplied by 1.5 because the checkbox's margin is half the padding.\n * The checkbox width is 16px.\n */\nconst SELECT_MULTIPLE_PANEL_PADDING_X = SELECT_PANEL_PADDING_X * 1.5 + 16;\n/**\n * The select panel will only \"fit\" inside the viewport if it is positioned at\n * this value or more away from the viewport boundary.\n */\nconst SELECT_PANEL_VIEWPORT_PADDING = 8;\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy');\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\n// Boilerplate for applying mixins to MatSelect.\n/** @docs-private */\nconst _MatSelectMixinBase = mixinDisableRipple(mixinTabIndex(mixinDisabled(mixinErrorState(class {\n    constructor(_elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) {\n        this._elementRef = _elementRef;\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}))));\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n}\nMatSelectTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nMatSelectTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelectTrigger, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n/** Base class with all of the `MatSelect` functionality. */\nclass _MatSelectBase extends _MatSelectMixinBase {\n    constructor(_viewportRuler, _changeDetectorRef, _ngZone, _defaultErrorStateMatcher, elementRef, _dir, _parentForm, _parentFormGroup, _parentFormField, ngControl, tabIndex, scrollStrategyFactory, _liveAnnouncer, _defaultOptions) {\n        var _a, _b, _c;\n        super(elementRef, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._viewportRuler = _viewportRuler;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._ngZone = _ngZone;\n        this._dir = _dir;\n        this._parentFormField = _parentFormField;\n        this._liveAnnouncer = _liveAnnouncer;\n        this._defaultOptions = _defaultOptions;\n        /** Whether or not the overlay panel is open. */\n        this._panelOpen = false;\n        /** Comparison function to specify which option is displayed. Defaults to object equality. */\n        this._compareWith = (o1, o2) => o1 === o2;\n        /** Unique id for this input. */\n        this._uid = `mat-select-${nextUniqueId++}`;\n        /** Current `ariar-labelledby` value for the select trigger. */\n        this._triggerAriaLabelledBy = null;\n        /** Emits whenever the component is destroyed. */\n        this._destroy = new Subject();\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when select has been touched` */\n        this._onTouched = () => { };\n        /** ID for the DOM node containing the select's value. */\n        this._valueId = `mat-select-value-${nextUniqueId++}`;\n        /** Emits when the panel element is finished transforming in. */\n        this._panelDoneAnimatingStream = new Subject();\n        this._overlayPanelClass = ((_a = this._defaultOptions) === null || _a === void 0 ? void 0 : _a.overlayPanelClass) || '';\n        this._focused = false;\n        /** A name for this control that can be used by `mat-form-field`. */\n        this.controlType = 'mat-select';\n        this._multiple = false;\n        this._disableOptionCentering = (_c = (_b = this._defaultOptions) === null || _b === void 0 ? void 0 : _b.disableOptionCentering) !== null && _c !== void 0 ? _c : false;\n        /** Aria label of the select. */\n        this.ariaLabel = '';\n        /** Combined stream of all of the child options' change events. */\n        this.optionSelectionChanges = defer(() => {\n            const options = this.options;\n            if (options) {\n                return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n            }\n            return this._ngZone.onStable.pipe(take(1), switchMap(() => this.optionSelectionChanges));\n        });\n        /** Event emitted when the select panel has been toggled. */\n        this.openedChange = new EventEmitter();\n        /** Event emitted when the select has been opened. */\n        this._openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n        /** Event emitted when the select has been closed. */\n        this._closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n        /** Event emitted when the selected value has been changed by the user. */\n        this.selectionChange = new EventEmitter();\n        /**\n         * Event that emits whenever the raw value of the select changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if ((_defaultOptions === null || _defaultOptions === void 0 ? void 0 : _defaultOptions.typeaheadDebounceInterval) != null) {\n            this._typeaheadDebounceInterval = _defaultOptions.typeaheadDebounceInterval;\n        }\n        this._scrollStrategyFactory = scrollStrategyFactory;\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    /** Whether the component is required. */\n    get required() {\n        var _a, _b, _c, _d;\n        return (_d = (_a = this._required) !== null && _a !== void 0 ? _a : (_c = (_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.control) === null || _c === void 0 ? void 0 : _c.hasValidator(Validators.required)) !== null && _d !== void 0 ? _d : false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n        this.stateChanges.next();\n    }\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = coerceBooleanProperty(value);\n    }\n    /** Whether to center the active option over the trigger. */\n    get disableOptionCentering() {\n        return this._disableOptionCentering;\n    }\n    set disableOptionCentering(value) {\n        this._disableOptionCentering = coerceBooleanProperty(value);\n    }\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    get typeaheadDebounceInterval() {\n        return this._typeaheadDebounceInterval;\n    }\n    set typeaheadDebounceInterval(value) {\n        this._typeaheadDebounceInterval = coerceNumberProperty(value);\n    }\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n    }\n    ngAfterContentInit() {\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by `mixinDisabled`, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this._typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (this._canOpen()) {\n            this._panelOpen = true;\n            this._keyManager.withHorizontalOrientation(null);\n            this._highlightCorrectOption();\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        var _a, _b;\n        return this.multiple ? ((_a = this._selectionModel) === null || _a === void 0 ? void 0 : _a.selected) || [] : (_b = this._selectionModel) === null || _b === void 0 ? void 0 : _b.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this._selectionModel.selected.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this._typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withAllowedModifierKeys(['shiftKey']);\n        this._keyManager.tabOut.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.pipe(takeUntil(this._destroy)).subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit = null;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first item instead.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                this._keyManager.setFirstItemActive();\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        var _a;\n        return !this._panelOpen && !this.disabled && ((_a = this.options) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        var _a;\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = (_a = this._parentFormField) === null || _a === void 0 ? void 0 : _a.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        this._ariaDescribedby = ids.join(' ');\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        return this._panelOpen || !this.empty || (this._focused && !!this._placeholder);\n    }\n}\n_MatSelectBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, deps: [{ token: i1.ViewportRuler }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: i2.ErrorStateMatcher }, { token: i0.ElementRef }, { token: i3.Directionality, optional: true }, { token: i4.NgForm, optional: true }, { token: i4.FormGroupDirective, optional: true }, { token: MAT_FORM_FIELD, optional: true }, { token: i4.NgControl, optional: true, self: true }, { token: 'tabindex', attribute: true }, { token: MAT_SELECT_SCROLL_STRATEGY }, { token: i5.LiveAnnouncer }, { token: MAT_SELECT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\n_MatSelectBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatSelectBase, inputs: { panelClass: \"panelClass\", placeholder: \"placeholder\", required: \"required\", multiple: \"multiple\", disableOptionCentering: \"disableOptionCentering\", compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: \"typeaheadDebounceInterval\", sortComparator: \"sortComparator\", id: \"id\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatSelectBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i1.ViewportRuler }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: i2.ErrorStateMatcher }, { type: i0.ElementRef }, { type: i3.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.NgForm, decorators: [{\n                        type: Optional\n                    }] }, { type: i4.FormGroupDirective, decorators: [{\n                        type: Optional\n                    }] }, { type: i6.MatFormField, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_FORM_FIELD]\n                    }] }, { type: i4.NgControl, decorators: [{\n                        type: Self\n                    }, {\n                        type: Optional\n                    }] }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_SELECT_SCROLL_STRATEGY]\n                    }] }, { type: i5.LiveAnnouncer }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_SELECT_CONFIG]\n                    }] }];\n    }, propDecorators: { trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], multiple: [{\n                type: Input\n            }], disableOptionCentering: [{\n                type: Input\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\nclass MatSelect extends _MatSelectBase {\n    constructor() {\n        super(...arguments);\n        /** The scroll position of the overlay panel, calculated to center the selected option. */\n        this._scrollTop = 0;\n        /** The cached font-size of the trigger element. */\n        this._triggerFontSize = 0;\n        /** The value of the select panel's transform-origin property. */\n        this._transformOrigin = 'top';\n        /**\n         * The y-offset of the overlay panel in relation to the trigger's top start corner.\n         * This must be adjusted to align the selected option text over the trigger text.\n         * when the panel opens. Will change based on the y-position of the selected option.\n         */\n        this._offsetY = 0;\n        this._positions = [\n            {\n                originX: 'start',\n                originY: 'top',\n                overlayX: 'start',\n                overlayY: 'top',\n            },\n            {\n                originX: 'start',\n                originY: 'bottom',\n                overlayX: 'start',\n                overlayY: 'bottom',\n            },\n        ];\n    }\n    /**\n     * Calculates the scroll position of the select's overlay panel.\n     *\n     * Attempts to center the selected option in the panel. If the option is\n     * too high or too low in the panel to be scrolled to the center, it clamps the\n     * scroll position to the min or max scroll positions respectively.\n     */\n    _calculateOverlayScroll(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionOffsetFromScrollTop = itemHeight * selectedIndex;\n        const halfOptionHeight = itemHeight / 2;\n        // Starts at the optionOffsetFromScrollTop, which scrolls the option to the top of the\n        // scroll container, then subtracts the scroll buffer to scroll the option down to\n        // the center of the overlay panel. Half the option height must be re-added to the\n        // scrollTop so the option is centered based on its middle, not its top edge.\n        const optimalScrollPosition = optionOffsetFromScrollTop - scrollBuffer + halfOptionHeight;\n        return Math.min(Math.max(0, optimalScrollPosition), maxScroll);\n    }\n    ngOnInit() {\n        super.ngOnInit();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n                this._changeDetectorRef.markForCheck();\n            }\n        });\n    }\n    open() {\n        if (super._canOpen()) {\n            super.open();\n            this._triggerRect = this.trigger.nativeElement.getBoundingClientRect();\n            // Note: The computed font-size will be a string pixel value (e.g. \"16px\").\n            // `parseInt` ignores the trailing 'px' and converts this to a number.\n            this._triggerFontSize = parseInt(getComputedStyle(this.trigger.nativeElement).fontSize || '0');\n            this._calculateOverlayPosition();\n            // Set the font size on the panel element once it exists.\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n                if (this._triggerFontSize &&\n                    this._overlayDir.overlayRef &&\n                    this._overlayDir.overlayRef.overlayElement) {\n                    this._overlayDir.overlayRef.overlayElement.style.fontSize = `${this._triggerFontSize}px`;\n                }\n            });\n        }\n    }\n    /** Scrolls the active option into view. */\n    _scrollOptionIntoView(index) {\n        const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n        const itemHeight = this._getItemHeight();\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            this.panel.nativeElement.scrollTop = 0;\n        }\n        else {\n            this.panel.nativeElement.scrollTop = _getOptionScrollPosition((index + labelCount) * itemHeight, itemHeight, this.panel.nativeElement.scrollTop, SELECT_PANEL_MAX_HEIGHT);\n        }\n    }\n    _positioningSettled() {\n        this._calculateOverlayOffsetX();\n        this.panel.nativeElement.scrollTop = this._scrollTop;\n    }\n    _panelDoneAnimating(isOpen) {\n        if (this.panelOpen) {\n            this._scrollTop = 0;\n        }\n        else {\n            this._overlayDir.offsetX = 0;\n            this._changeDetectorRef.markForCheck();\n        }\n        super._panelDoneAnimating(isOpen);\n    }\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /**\n     * Sets the x-offset of the overlay panel in relation to the trigger's top start corner.\n     * This must be adjusted to align the selected option text over the trigger text when\n     * the panel opens. Will change based on LTR or RTL text direction. Note that the offset\n     * can't be calculated until the panel has been attached, because we need to know the\n     * content width in order to constrain the panel within the viewport.\n     */\n    _calculateOverlayOffsetX() {\n        const overlayRect = this._overlayDir.overlayRef.overlayElement.getBoundingClientRect();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const isRtl = this._isRtl();\n        const paddingWidth = this.multiple\n            ? SELECT_MULTIPLE_PANEL_PADDING_X + SELECT_PANEL_PADDING_X\n            : SELECT_PANEL_PADDING_X * 2;\n        let offsetX;\n        // Adjust the offset, depending on the option padding.\n        if (this.multiple) {\n            offsetX = SELECT_MULTIPLE_PANEL_PADDING_X;\n        }\n        else if (this.disableOptionCentering) {\n            offsetX = SELECT_PANEL_PADDING_X;\n        }\n        else {\n            let selected = this._selectionModel.selected[0] || this.options.first;\n            offsetX = selected && selected.group ? SELECT_PANEL_INDENT_PADDING_X : SELECT_PANEL_PADDING_X;\n        }\n        // Invert the offset in LTR.\n        if (!isRtl) {\n            offsetX *= -1;\n        }\n        // Determine how much the select overflows on each side.\n        const leftOverflow = 0 - (overlayRect.left + offsetX - (isRtl ? paddingWidth : 0));\n        const rightOverflow = overlayRect.right + offsetX - viewportSize.width + (isRtl ? 0 : paddingWidth);\n        // If the element overflows on either side, reduce the offset to allow it to fit.\n        if (leftOverflow > 0) {\n            offsetX += leftOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        else if (rightOverflow > 0) {\n            offsetX -= rightOverflow + SELECT_PANEL_VIEWPORT_PADDING;\n        }\n        // Set the offset directly in order to avoid having to go through change detection and\n        // potentially triggering \"changed after it was checked\" errors. Round the value to avoid\n        // blurry content in some browsers.\n        this._overlayDir.offsetX = Math.round(offsetX);\n        this._overlayDir.overlayRef.updatePosition();\n    }\n    /**\n     * Calculates the y-offset of the select's overlay panel in relation to the\n     * top start corner of the trigger. It has to be adjusted in order for the\n     * selected option to be aligned over the trigger when the panel opens.\n     */\n    _calculateOverlayOffsetY(selectedIndex, scrollBuffer, maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const maxOptionsDisplayed = Math.floor(SELECT_PANEL_MAX_HEIGHT / itemHeight);\n        let optionOffsetFromPanelTop;\n        // Disable offset if requested by user by returning 0 as value to offset\n        if (this.disableOptionCentering) {\n            return 0;\n        }\n        if (this._scrollTop === 0) {\n            optionOffsetFromPanelTop = selectedIndex * itemHeight;\n        }\n        else if (this._scrollTop === maxScroll) {\n            const firstDisplayedIndex = this._getItemCount() - maxOptionsDisplayed;\n            const selectedDisplayIndex = selectedIndex - firstDisplayedIndex;\n            // The first item is partially out of the viewport. Therefore we need to calculate what\n            // portion of it is shown in the viewport and account for it in our offset.\n            let partialItemHeight = itemHeight - ((this._getItemCount() * itemHeight - SELECT_PANEL_MAX_HEIGHT) % itemHeight);\n            // Because the panel height is longer than the height of the options alone,\n            // there is always extra padding at the top or bottom of the panel. When\n            // scrolled to the very bottom, this padding is at the top of the panel and\n            // must be added to the offset.\n            optionOffsetFromPanelTop = selectedDisplayIndex * itemHeight + partialItemHeight;\n        }\n        else {\n            // If the option was scrolled to the middle of the panel using a scroll buffer,\n            // its offset will be the scroll buffer minus the half height that was added to\n            // center it.\n            optionOffsetFromPanelTop = scrollBuffer - itemHeight / 2;\n        }\n        // The final offset is the option's offset from the top, adjusted for the height difference,\n        // multiplied by -1 to ensure that the overlay moves in the correct direction up the page.\n        // The value is rounded to prevent some browsers from blurring the content.\n        return Math.round(optionOffsetFromPanelTop * -1 - optionHeightAdjustment);\n    }\n    /**\n     * Checks that the attempted overlay position will fit within the viewport.\n     * If it will not fit, tries to adjust the scroll position and the associated\n     * y-offset so the panel can open fully on-screen. If it still won't fit,\n     * sets the offset back to 0 to allow the fallback position to take over.\n     */\n    _checkOverlayWithinViewport(maxScroll) {\n        const itemHeight = this._getItemHeight();\n        const viewportSize = this._viewportRuler.getViewportSize();\n        const topSpaceAvailable = this._triggerRect.top - SELECT_PANEL_VIEWPORT_PADDING;\n        const bottomSpaceAvailable = viewportSize.height - this._triggerRect.bottom - SELECT_PANEL_VIEWPORT_PADDING;\n        const panelHeightTop = Math.abs(this._offsetY);\n        const totalPanelHeight = Math.min(this._getItemCount() * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const panelHeightBottom = totalPanelHeight - panelHeightTop - this._triggerRect.height;\n        if (panelHeightBottom > bottomSpaceAvailable) {\n            this._adjustPanelUp(panelHeightBottom, bottomSpaceAvailable);\n        }\n        else if (panelHeightTop > topSpaceAvailable) {\n            this._adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll);\n        }\n        else {\n            this._transformOrigin = this._getOriginBasedOnOption();\n        }\n    }\n    /** Adjusts the overlay panel up to fit in the viewport. */\n    _adjustPanelUp(panelHeightBottom, bottomSpaceAvailable) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceBelowViewport = Math.round(panelHeightBottom - bottomSpaceAvailable);\n        // Scrolls the panel up by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel up into the viewport.\n        this._scrollTop -= distanceBelowViewport;\n        this._offsetY -= distanceBelowViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very top, it won't be able to fit the panel\n        // by scrolling, so set the offset to 0 to allow the fallback position to take\n        // effect.\n        if (this._scrollTop <= 0) {\n            this._scrollTop = 0;\n            this._offsetY = 0;\n            this._transformOrigin = `50% bottom 0px`;\n        }\n    }\n    /** Adjusts the overlay panel down to fit in the viewport. */\n    _adjustPanelDown(panelHeightTop, topSpaceAvailable, maxScroll) {\n        // Browsers ignore fractional scroll offsets, so we need to round.\n        const distanceAboveViewport = Math.round(panelHeightTop - topSpaceAvailable);\n        // Scrolls the panel down by the distance it was extending past the boundary, then\n        // adjusts the offset by that amount to move the panel down into the viewport.\n        this._scrollTop += distanceAboveViewport;\n        this._offsetY += distanceAboveViewport;\n        this._transformOrigin = this._getOriginBasedOnOption();\n        // If the panel is scrolled to the very bottom, it won't be able to fit the\n        // panel by scrolling, so set the offset to 0 to allow the fallback position\n        // to take effect.\n        if (this._scrollTop >= maxScroll) {\n            this._scrollTop = maxScroll;\n            this._offsetY = 0;\n            this._transformOrigin = `50% top 0px`;\n            return;\n        }\n    }\n    /** Calculates the scroll position and x- and y-offsets of the overlay panel. */\n    _calculateOverlayPosition() {\n        const itemHeight = this._getItemHeight();\n        const items = this._getItemCount();\n        const panelHeight = Math.min(items * itemHeight, SELECT_PANEL_MAX_HEIGHT);\n        const scrollContainerHeight = items * itemHeight;\n        // The farthest the panel can be scrolled before it hits the bottom\n        const maxScroll = scrollContainerHeight - panelHeight;\n        // If no value is selected we open the popup to the first item.\n        let selectedOptionOffset;\n        if (this.empty) {\n            selectedOptionOffset = 0;\n        }\n        else {\n            selectedOptionOffset = Math.max(this.options.toArray().indexOf(this._selectionModel.selected[0]), 0);\n        }\n        selectedOptionOffset += _countGroupLabelsBeforeOption(selectedOptionOffset, this.options, this.optionGroups);\n        // We must maintain a scroll buffer so the selected option will be scrolled to the\n        // center of the overlay panel rather than the top.\n        const scrollBuffer = panelHeight / 2;\n        this._scrollTop = this._calculateOverlayScroll(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._offsetY = this._calculateOverlayOffsetY(selectedOptionOffset, scrollBuffer, maxScroll);\n        this._checkOverlayWithinViewport(maxScroll);\n    }\n    /** Sets the transform origin point based on the selected option. */\n    _getOriginBasedOnOption() {\n        const itemHeight = this._getItemHeight();\n        const optionHeightAdjustment = (itemHeight - this._triggerRect.height) / 2;\n        const originY = Math.abs(this._offsetY) - optionHeightAdjustment + itemHeight / 2;\n        return `50% ${originY}px 0px`;\n    }\n    /** Calculates the height of the select's options. */\n    _getItemHeight() {\n        return this._triggerFontSize * SELECT_ITEM_HEIGHT_EM;\n    }\n    /** Calculates the amount of items in the select. This includes options and group labels. */\n    _getItemCount() {\n        return this.options.length + this.optionGroups.length;\n    }\n}\nMatSelect.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, deps: null, target: i0.ɵɵFactoryTarget.Component });\nMatSelect.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatSelect, selector: \"mat-select\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", tabIndex: \"tabIndex\" }, host: { attributes: { \"role\": \"combobox\", \"aria-autocomplete\": \"none\", \"aria-haspopup\": \"true\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-describedby\": \"_ariaDescribedby || null\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-select-disabled\": \"disabled\", \"class.mat-select-invalid\": \"errorState\", \"class.mat-select-required\": \"required\", \"class.mat-select-empty\": \"empty\", \"class.mat-select-multiple\": \"multiple\" }, classAttribute: \"mat-select\" }, providers: [\n        { provide: MatFormFieldControl, useExisting: MatSelect },\n        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n    ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], exportAs: [\"matSelect\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"], directives: [{ type: i7.CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { type: i8.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i8.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }, { type: i8.NgSwitchDefault, selector: \"[ngSwitchDefault]\" }, { type: i7.CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { type: i8.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', inputs: ['disabled', 'disableRipple', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-autocomplete': 'none',\n                        // TODO(crisbeto): the value for aria-haspopup should be `listbox`, but currently it's difficult\n                        // to sync into Google, because of an outdated automated a11y check which flags it as an invalid\n                        // value. At some point we should try to switch it back to being `listbox`.\n                        'aria-haspopup': 'true',\n                        'class': 'mat-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-describedby]': '_ariaDescribedby || null',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-select-disabled]': 'disabled',\n                        '[class.mat-select-invalid]': 'errorState',\n                        '[class.mat-select-required]': 'required',\n                        '[class.mat-select-empty]': 'empty',\n                        '[class.mat-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanelWrap, matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], template: \"<!--\\n Note that the select trigger element specifies `aria-owns` pointing to the listbox overlay.\\n While aria-owns is not required for the ARIA 1.2 `role=\\\"combobox\\\"` interaction pattern,\\n it fixes an issue with VoiceOver when the select appears inside of an `aria-model=\\\"true\\\"`\\n element (e.g. a dialog). Without this `aria-owns`, the `aria-modal` on a dialog prevents\\n VoiceOver from \\\"seeing\\\" the select's listbox overlay for aria-activedescendant.\\n Using `aria-owns` re-parents the select overlay so that it works again.\\n See https://github.com/angular/components/issues/20694\\n-->\\n<div cdk-overlay-origin\\n     [attr.aria-owns]=\\\"panelOpen ? id + '-panel' : null\\\"\\n     class=\\\"mat-select-trigger\\\"\\n     (click)=\\\"toggle()\\\"\\n     #origin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n  <div class=\\\"mat-select-value\\\" [ngSwitch]=\\\"empty\\\" [attr.id]=\\\"_valueId\\\">\\n    <span class=\\\"mat-select-placeholder mat-select-min-line\\\" *ngSwitchCase=\\\"true\\\">{{placeholder}}</span>\\n    <span class=\\\"mat-select-value-text\\\" *ngSwitchCase=\\\"false\\\" [ngSwitch]=\\\"!!customTrigger\\\">\\n      <span class=\\\"mat-select-min-line\\\" *ngSwitchDefault>{{triggerValue}}</span>\\n      <ng-content select=\\\"mat-select-trigger\\\" *ngSwitchCase=\\\"true\\\"></ng-content>\\n    </span>\\n  </div>\\n\\n  <div class=\\\"mat-select-arrow-wrapper\\\"><div class=\\\"mat-select-arrow\\\"></div></div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"origin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayMinWidth]=\\\"_triggerRect?.width!\\\"\\n  [cdkConnectedOverlayOffsetY]=\\\"_offsetY\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div class=\\\"mat-select-panel-wrap\\\" [@transformPanelWrap]>\\n    <div\\n      #panel\\n      role=\\\"listbox\\\"\\n      tabindex=\\\"-1\\\"\\n      class=\\\"mat-select-panel {{ _getPanelTheme() }}\\\"\\n      [attr.id]=\\\"id + '-panel'\\\"\\n      [attr.aria-multiselectable]=\\\"multiple\\\"\\n      [attr.aria-label]=\\\"ariaLabel || null\\\"\\n      [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n      [ngClass]=\\\"panelClass\\\"\\n      [@transformPanel]=\\\"multiple ? 'showing-multiple' : 'showing'\\\"\\n      (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n      [style.transformOrigin]=\\\"_transformOrigin\\\"\\n      [style.font-size.px]=\\\"_triggerFontSize\\\"\\n      (keydown)=\\\"_handleKeydown($event)\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-select{display:inline-block;width:100%;outline:none}.mat-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-select-disabled .mat-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-select-arrow-wrapper{height:16px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-outline .mat-select-arrow-wrapper{transform:translateY(-25%)}.mat-form-field-appearance-standard.mat-form-field-has-label .mat-select:not(.mat-select-empty) .mat-select-arrow-wrapper{transform:translateY(-50%)}.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable.mat-form-field-appearance-standard .mat-select.mat-select-empty .mat-select-arrow-wrapper{transition:none}.mat-select-arrow{width:0;height:0;border-left:5px solid transparent;border-right:5px solid transparent;border-top:5px solid;margin:0 4px}.mat-form-field.mat-focused .mat-select-arrow{transform:translateX(0)}.mat-select-panel-wrap{flex-basis:100%}.mat-select-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;padding-top:0;padding-bottom:0;max-height:256px;min-width:100%;border-radius:4px;outline:0}.cdk-high-contrast-active .mat-select-panel{outline:solid 1px}.mat-select-panel .mat-optgroup-label,.mat-select-panel .mat-option{font-size:inherit;line-height:3em;height:3em}.mat-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-form-field-flex{cursor:pointer}.mat-form-field-type-mat-select .mat-form-field-label{width:calc(100% - 18px)}.mat-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}._mat-animation-noopable .mat-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-select-placeholder{color:transparent;-webkit-text-fill-color:transparent;transition:none;display:block}.mat-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}\\n\"] }]\n        }], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectModule {\n}\nMatSelectModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatSelectModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, declarations: [MatSelect, MatSelectTrigger], imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule], exports: [CdkScrollableModule,\n        MatFormFieldModule,\n        MatSelect,\n        MatSelectTrigger,\n        MatOptionModule,\n        MatCommonModule] });\nMatSelectModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [[CommonModule, OverlayModule, MatOptionModule, MatCommonModule], CdkScrollableModule,\n        MatFormFieldModule,\n        MatOptionModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, OverlayModule, MatOptionModule, MatCommonModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    declarations: [MatSelect, MatSelectTrigger],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, _MatSelectBase, matSelectAnimations };\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_material_fesm2015_select_mjs.458b9f200bf1cc23.js"}