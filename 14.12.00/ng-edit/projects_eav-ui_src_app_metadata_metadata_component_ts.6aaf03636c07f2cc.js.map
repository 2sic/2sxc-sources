{"version":3,"mappings":"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","names":["ContentItemsService","constructor","http","context","dnnContext","this","getAll","contentTypeStaticName","get","$2sxc","apiUrl","webApiEntityList","params","appId","toString","contentType","getColumns","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","post","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","i0","factory","ConfirmDeleteDialogComponent","dialogData","dialogRef","closeDialog","confirm","close","MAT_DIALOG_DATA","selectors","ctx","MetadataActionsComponent","agInit","refresh","deleteMetadata","onDelete","data","MetadataContentTypeComponent","value","metadata","ctx_r12","ctx_r14","ctx_r15","ctx_r16","ctx_r17","MetadataSaveDialogComponent","contentTypesService","dropdownInsertValue","ngOnInit","contentTypes$","BehaviorSubject","scopeOptions$","buildForm","fetchScopes","templateVars$","combineLatest","contentTypes","scopeOptions","ngOnDestroy","complete","toggleGuidedContentType","guidedContentType","toggleAdvancedMode","event","advancedMode","checked","formValues","form","getRawValue","FormGroup","addControl","FormControl","Validators","eavConstants","controls","scope","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","patchValue","prompt","some","option","next","name","fetchContentTypes","retrieveContentTypes","getScopes","scopes","ctx_r25","oxw","ctx_r27","ctx_r29","ctx_r31","MetadataComponent","router","route","metadataService","snackBar","entitiesService","contentItemsService","dialog","viewContainerRef","changeDetectorRef","buildGridOptions","undefined","Subscription","parseInt","snapshot","paramMap","decodeURIComponent","J","_a","fetchFor","fetchMetadata","refreshOnChildClosed","filteredRecommendations$","metadata$","recommendations$","metadataItems","recommendations","filter","r","i","_Type","Id","length","Count","itemFor$","fabOpen$","itemFor","fabOpen","subscription","unsubscribe","openChange","open","createMetadata","recommendation","CreateEmpty","Name","create","For","calculateItemFor","error","duration","createMetadataForm","autoFocus","width","afterClosed","items","ContentTypeName","formUrl","convertFormToUrl","navigate","relativeTo","markForCheck","Object","Target","o","e","values","find","m","targetType","target","_b","TargetType","keyType","Guid","key","Number","String","item","getMetadata","Recommendations","forEach","Icon","startsWith","replace","window","atob","tap","Items","editMetadata","EntityId","confirmed","delete","entityId","entityTitle","Title","message","DeleteWarning","isConfirmed","add","events","NavigationEnd","firstChild","pairwise","hadChild","hasChild","defaultGridOptions","columnDefs","headerName","field","headerClass","cellClass","split","sortable","valueGetter","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","flex","minWidth","sort","onCellClicked","pinned","FieldHintComponent","toggleIsShort","isShort","ClickStopPropagationDirective","onClick","stopPropagation","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","readAsText"],"sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.html","./projects/eav-ui/src/app/metadata/confirm-delete-dialog/confirm-delete-dialog.component.ts","./projects/eav-ui/src/app/metadata/metadata-actions/metadata-actions.component.ts","./projects/eav-ui/src/app/metadata/metadata-actions/metadata-actions.component.html","./projects/eav-ui/src/app/metadata/metadata-content-type/metadata-content-type.component.ts","./projects/eav-ui/src/app/metadata/metadata-content-type/metadata-content-type.component.html","./projects/eav-ui/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/eav-ui/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/eav-ui/src/app/metadata/metadata.component.html","./projects/eav-ui/src/app/metadata/metadata.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Delete {{ dialogData.entityTitle }} ({{ dialogData.entityId }})?</div>\r\n</div>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\" *ngIf=\"dialogData.message\"\r\n  [innerHtml]=\"dialogData.message | safeHtml\">\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button (click)=\"closeDialog(true)\">Delete</button>\r\n</div>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-confirm-delete-dialog',\r\n  templateUrl: './confirm-delete-dialog.component.html',\r\n  styleUrls: ['./confirm-delete-dialog.component.scss'],\r\n})\r\nexport class ConfirmDeleteDialogComponent {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: ConfirmDeleteDialogData,\r\n    private dialogRef: MatDialogRef<ConfirmDeleteDialogComponent>,\r\n  ) { }\r\n\r\n  closeDialog(confirm?: boolean) {\r\n    this.dialogRef.close(confirm);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: ICellRendererParams & MetadataActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & MetadataActionsParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata(): void {\r\n    const metadata: MetadataItem = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata-content-type',\r\n  templateUrl: './metadata-content-type.component.html',\r\n  styleUrls: ['./metadata-content-type.component.scss'],\r\n})\r\nexport class MetadataContentTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  metadata: MetadataItem;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.metadata = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"container\" [tippy]=\"metadata._Type.Description\" [tippyDisabled]=\"!metadata._Type.Description\">\r\n  {{ value }}\r\n</div>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogTemplateVars, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  templateVars$: Observable<MetadataSaveDialogTemplateVars>;\r\n  guidedContentType = true;\r\n  advancedMode = false;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.templateVars$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const templateVars: MetadataSaveDialogTemplateVars = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(eavConstants.scopes.default.value));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>{{ title || 'Metadata' }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"!data.itemFor\">This item is not metadata for anything else.</ng-container>\r\n      <ng-container *ngIf=\"data.itemFor\">\r\n        This item is metadata for:\r\n        <br>Target: {{ data.itemFor.Target }}\r\n        <br>TargetType: {{ data.itemFor.TargetType }}\r\n        <ng-container *ngIf=\"data.itemFor.Number\"><br>Number: {{ data.itemFor.Number }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Guid\"><br>Guid: {{ data.itemFor.Guid }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.String\"><br>String: {{ data.itemFor.String }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Title\"><br>Title: {{ data.itemFor.String }}</ng-container>\r\n      </ng-container>\r\n    </p>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.metadata\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n\r\n      <div class=\"grid-more-actions-box\"></div>\r\n\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" *ngIf=\"data.recommendations.length === 0\"\r\n        tippy=\"Create a new metadata for this item\" (click)=\"createMetadata()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': data.fabOpen }\"\r\n        *ngIf=\"data.recommendations.length > 0\" (openChange)=\"openChange($event)\">\r\n        <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n          <button mat-fab>\r\n            <mat-icon class=\"spin180\">{{ data.fabOpen ? 'close' : 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-trigger>\r\n\r\n        <eco-fab-speed-dial-actions>\r\n          <button mat-mini-fab label=\"Other Content Type\" (click)=\"createMetadata()\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-mini-fab *ngFor=\"let recommendation of data.recommendations\" [attr.label]=\"recommendation.Title\"\r\n            (click)=\"createMetadata(recommendation)\">\r\n            <div *ngIf=\"recommendation.Icon; then svgIcon else matIcon\"></div>\r\n            <ng-template #svgIcon>\r\n              <div [innerHTML]=\"recommendation.Icon | safeHtml\"></div>\r\n            </ng-template>\r\n            <!-- this is for all recommendations which don't have an own icon - they use the standard add-icon -->\r\n            <ng-template #matIcon>\r\n              <mat-icon>add</mat-icon>\r\n            </ng-template>\r\n          </button>\r\n        </eco-fab-speed-dial-actions>\r\n      </eco-fab-speed-dial>\r\n    </div>\r\n  </div>\r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subscription, tap } from 'rxjs';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { EavFor } from '../edit/shared/models/eav';\r\nimport { MetadataService } from '../permissions';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ConfirmDeleteDialogComponent } from './confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from './confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { MetadataActionsComponent } from './metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './metadata-actions/metadata-actions.models';\r\nimport { MetadataContentTypeComponent } from './metadata-content-type/metadata-content-type.component';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataItem, MetadataRecommendation, MetadataTemplateVars } from './models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent implements OnInit, OnDestroy {\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private metadata$ = new BehaviorSubject<MetadataItem[]>([]);\r\n  private recommendations$ = new BehaviorSubject<MetadataRecommendation[]>([]);\r\n  private itemFor$ = new BehaviorSubject<EavFor | undefined>(undefined);\r\n  private fabOpen$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('targetType'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  templateVars$: Observable<MetadataTemplateVars>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.refreshOnChildClosed();\r\n\r\n    const filteredRecommendations$ = combineLatest([this.metadata$, this.recommendations$]).pipe(\r\n      map(([metadataItems, recommendations]) =>\r\n        recommendations.filter(r => metadataItems.filter(i => i._Type.Id === r.Id).length < r.Count)),\r\n    );\r\n    this.templateVars$ = combineLatest([this.metadata$, filteredRecommendations$, this.itemFor$, this.fabOpen$]).pipe(\r\n      map(([metadata, recommendations, itemFor, fabOpen]) => {\r\n        const templateVars: MetadataTemplateVars = {\r\n          metadata,\r\n          recommendations,\r\n          itemFor,\r\n          fabOpen,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.recommendations$.complete();\r\n    this.itemFor$.complete();\r\n    this.fabOpen$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  createMetadata(recommendation?: MetadataRecommendation) {\r\n    if (recommendation) {\r\n      if (recommendation.CreateEmpty) {\r\n        this.snackBar.open(`Creating ${recommendation.Name}...`);\r\n        this.entitiesService.create(recommendation.Id, { For: this.calculateItemFor() }).subscribe({\r\n          error: () => {\r\n            this.snackBar.open(`Creating ${recommendation.Name} failed. Please check console for more info`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n          next: () => {\r\n            this.snackBar.open(`Created ${recommendation.Name}`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n        });\r\n      } else {\r\n        this.createMetadataForm(recommendation.Id);\r\n      }\r\n      return;\r\n    }\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n      this.createMetadataForm(contentType);\r\n    });\r\n  }\r\n\r\n  private createMetadataForm(contentType: string) {\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: contentType,\r\n        For: this.calculateItemFor(),\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private calculateItemFor(): EavFor {\r\n    const itemFor: EavFor = {\r\n      Target: Object.values(eavConstants.metadata).find(m => m.targetType === this.targetType)?.target ?? this.targetType.toString(),\r\n      TargetType: this.targetType,\r\n      ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n      ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n      ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n    };\r\n    return itemFor;\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      if (item?.For) {\r\n        this.itemFor$.next(item.For);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata(this.targetType, this.keyType, this.key).pipe(\r\n      map(metadata => {\r\n        metadata.Recommendations.forEach(recommendation => { \r\n          if (recommendation.Icon.startsWith(\"base64:\")) {\r\n            recommendation.Icon = recommendation.Icon.replace(\"base64:\", \"\");\r\n            recommendation.Icon = window.atob(recommendation.Icon);\r\n          }\r\n        })\r\n        return metadata;\r\n      }),\r\n      tap(metadata => {\r\n        this.metadata$.next(metadata.Items);\r\n        this.recommendations$.next(metadata.Recommendations);\r\n      })).subscribe();\r\n  }\r\n\r\n  private editMetadata(metadata: MetadataItem) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: MetadataItem, confirmed = false) {\r\n    if (!confirmed) {\r\n      const data: ConfirmDeleteDialogData = {\r\n        entityId: metadata.Id,\r\n        entityTitle: metadata.Title,\r\n        message: this.recommendations$.value.find(r => r.Id === metadata._Type.Id)?.DeleteWarning,\r\n      };\r\n      const confirmationDialogRef = this.dialog.open(ConfirmDeleteDialogComponent, {\r\n        autoFocus: false,\r\n        data,\r\n        viewContainerRef: this.viewContainerRef,\r\n        width: '650px',\r\n      });\r\n      confirmationDialogRef.afterClosed().subscribe((isConfirmed: boolean) => {\r\n        if (isConfirmed) {\r\n          this.deleteMetadata(metadata, true);\r\n        }\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchMetadata();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          headerName: 'ID',\r\n          field: 'Id',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'id-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return metadata.Id;\r\n          },\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<MetadataItem> = {\r\n              tooltipGetter: (metadata: MetadataItem) => `ID: ${metadata.Id}\\nGUID: ${metadata.Guid}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return metadata.Title;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            this.editMetadata(metadata);\r\n          },\r\n        },\r\n        {\r\n          headerName: 'Content Type',\r\n          field: 'ContentType',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const metadata: MetadataItem = params.data;\r\n            return `${metadata._Type.Name}${metadata._Type.Title !== metadata._Type.Name ? ` (${metadata._Type.Title})` : ''}`;\r\n          },\r\n          cellRenderer: MetadataContentTypeComponent,\r\n        },\r\n        {\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding'.split(' '),\r\n          pinned: 'right',\r\n          cellRenderer: MetadataActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: MetadataActionsParams = {\r\n              onDelete: (metadata) => this.deleteMetadata(metadata),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_metadata_metadata_component_ts.6aaf03636c07f2cc.js"}