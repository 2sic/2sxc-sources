{"version":3,"sources":["./src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["dialog","viewContainerRef","router","route","context","changeDetectorRef","navigation","this","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","name","id","getComponent","then","component","initContext","init","dialogRef","open","backdropClass","panelClass","panelSize","showScrollbar","autoFocus","closeOnNavigation","position","top","afterClosed","pipe","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","$2sxc","totalPopup","close","error","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent"],"mappings":"sNASA,aAUE,WACUA,EACAC,EACAC,EACAC,EACAC,EACAC,G,MALA,KAAAL,SACA,KAAAC,mBACA,KAAAC,SACA,KAAAC,QACA,KAAAC,UACA,KAAAC,oBAER,IAAMC,EAAaC,KAAKL,OAAOM,uBAC/BD,KAAKE,YAA+B,QAAlB,EAAAH,aAAU,EAAVA,EAAYI,cAAM,eAAEC,QAAS,G,OAGjD,YAAAC,SAAA,sBACQC,EAA6BN,KAAKJ,MAAMW,SAASC,KAAKf,OAC5D,GAAoB,MAAhBa,EACF,MAAM,IAAIG,MAAM,uFAElB,YAAkB,eAAgBH,EAAaI,KAAM,cAAeV,KAAKH,QAAQc,GAAI,WAAYX,KAAKH,SAEtGS,EAAaM,eAAeC,MAAK,SAAAC,GAC3BR,EAAaS,aACf,EAAKlB,QAAQmB,KAAK,EAAKpB,OAGzB,EAAKqB,UAAY,EAAKxB,OAAOyB,KAAKJ,EAAW,CAC3CN,KAAM,EAAKN,WACXiB,cAAe,kBACfC,WAAY,YAAF,CACR,eACA,gBAAgBd,EAAae,UAC7Bf,EAAagB,cAAgB,iBAAmB,gBAC5ChB,EAAac,WAAad,EAAac,WAAa,IAE1D1B,iBAAkB,EAAKA,iBACvB6B,WAAW,EACXC,mBAAmB,EAGnBC,SAAU,CAAEC,IAAK,OAGnB,EAAKT,UAAUU,cAAcC,KAAK,YAAK,IAAIC,WAAU,SAACrB,GACpD,YAAkB,qBAAsBF,EAAaI,KAAM,QAASF,GAEpE,IAAMsB,EAAStB,EACf,GAA2B,OAAvBsB,aAAM,EAANA,EAAQC,aAKZ,GAAI,EAAKnC,MAAMoC,aAAaC,QAAU,EACpC,IACGC,OAAOC,OAAeC,MAAMC,WAAWC,QACxC,MAAOC,SAKT,EAAK5C,OAAO6C,SAAS,CAAC,MADpB,EAAK5C,MAAMW,SAASkC,IAAIR,OAAS,EACN,CAAES,WAAY,EAAK9C,MAAMuC,OAAQ/B,MAAOI,GAExC,CAAEkC,WAAY,EAAK9C,MAAMuC,OAAOA,OAAQ/B,MAAOI,SAd5E,EAAKb,OAAO6C,SAAS,CAACV,EAAOC,iBAkBjC,EAAKjC,kBAAkB6C,mBAI3B,YAAAC,YAAA,WACE5C,KAAKiB,UAAUqB,S,sCAzENO,GAAoB,8D,uBAApBA,EAAoB,yG,EANjC","file":"permissions-permissions-module.b1ec31b2e3d75098057c.js","sourcesContent":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Context } from '../../services/context';\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: { [key: string]: any; };\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        data: this.dialogData,\r\n        backdropClass: 'dialog-backdrop',\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        viewContainerRef: this.viewContainerRef,\r\n        autoFocus: false,\r\n        closeOnNavigation: false,\r\n        // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' }\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            (window.parent as any).$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}