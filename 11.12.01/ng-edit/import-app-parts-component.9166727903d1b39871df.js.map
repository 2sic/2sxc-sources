{"version":3,"sources":["./src/app/app-administration/sub-dialogs/import-app-parts/import-app-parts.component.html","./src/app/app-administration/sub-dialogs/import-app-parts/import-app-parts.component.ts"],"names":["dialogData","dialogRef","importAppPartsService","snackBar","hostClass","isImporting$","importFile$","importResult$","templateVars$","this","pipe","isImporting","importFile","importResult","ngOnInit","files","next","importAppParts","ngOnDestroy","complete","closeDialog","close","filesDropped","fileChange","event","target","value","subscribe","result","error","open","duration","ImportAppPartsComponent"],"mappings":"kVAOE,yB,sBAiBE,iBACE,mFACF,Q,sBACA,iBACE,4EACF,Q,8HACA,iBAKE,QACF,Q,uBAN4E,gFAK1E,8B,yBAZJ,iBACE,uBAGA,uBAGA,uBAOF,Q,uBAbO,4CAGA,6CAGA,iD,qCAUL,QACE,oBAA0B,iEAAwB,iBAAM,OACxD,oBACE,oEACA,mBACF,OACF,O,0BAJ2C,uE,qCAK3C,QACE,oBAAyC,iEAAwB,gBAAK,OACxE,Q,qCAjDJ,gBAA+C,0EAG7C,gBACE,gBAA8B,qDAA0C,OAC1E,OAEA,8BAEA,cACE,mNAE+C,aAAI,0BAAe,OAAK,oCAChD,eAA8D,qBAAS,OAAI,cACpG,OAEA,eACE,oBAAuF,iDAAS,WAC9F,gBAAM,SAAoE,OAC5E,OACA,qBAA8B,kEAA9B,OACF,OAEA,wBAgBA,kBACE,iCAOA,iCAGF,OACF,O,qBAnDoB,+BAOL,mCAU8C,wCACjD,mEAKoE,oCAiB9D,qEAOA,uECrClB,iBAgBE,WACmCA,EACzBC,EACAC,EACAC,GAHyB,KAAAH,aACzB,KAAAC,YACA,KAAAC,wBACA,KAAAC,WAbgB,KAAAC,UAAY,mBAE9B,KAAAC,aAAe,IAAI,KAAgB,GACnC,KAAAC,YAAc,IAAI,IAAsB,MACxC,KAAAC,cAAgB,IAAI,IAAiC,MAC7D,KAAAC,cAAgB,YAAc,CAACC,KAAKJ,aAAcI,KAAKH,YAAaG,KAAKF,gBAAgBG,KACvF,aAAI,SAAC,G,IAAA,mBAA4C,OAAGC,YAAnC,KAAgDC,WAApC,KAAgDC,aAAlC,U,OAU7C,YAAAC,SAAA,WAC+B,MAAzBL,KAAKT,WAAWe,QAClBN,KAAKH,YAAYU,KAAKP,KAAKT,WAAWe,MAAM,IAC5CN,KAAKQ,mBAIT,YAAAC,YAAA,WACET,KAAKJ,aAAac,WAClBV,KAAKH,YAAYa,WACjBV,KAAKF,cAAcY,YAGrB,YAAAC,YAAA,WACEX,KAAKR,UAAUoB,SAGjB,YAAAC,aAAA,SAAaP,GAEXN,KAAKH,YAAYU,KADED,EAAM,IAEzBN,KAAKF,cAAcS,KAAK,MACxBP,KAAKQ,kBAGP,YAAAM,WAAA,SAAWC,GAETf,KAAKH,YAAYU,KADGQ,EAAMC,OAA4BV,MAAM,IAE5DN,KAAKF,cAAcS,KAAK,OAG1B,YAAAC,eAAA,sBACER,KAAKJ,aAAaW,MAAK,GACvBP,KAAKP,sBAAsBe,eAAeR,KAAKH,YAAYoB,OAAOC,UAAU,CAC1EX,KAAM,SAAAY,GACJ,EAAKvB,aAAaW,MAAK,GACvB,EAAKT,cAAcS,KAAKY,IAE1BC,MAAO,SAACA,GACN,EAAKxB,aAAaW,MAAK,GACvB,EAAKT,cAAcS,KAAK,MACxB,EAAKb,SAAS2B,KAAK,2DAA4D,KAAM,CAAEC,SAAU,U,sCAzD5FC,GAAuB,KAWxB,KAAe,gC,uBAXdA,EAAuB,gF,ksCDhBpC,uB,sBACE,wC,iJCSF","file":"import-app-parts-component.9166727903d1b39871df.js","sourcesContent":["<div appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Import Content and Templates into this App</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isImporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">\r\n    Import content and templates from a content export (zip) or partial export (xml) to this app.\r\n    The entire content of the selected file will be imported.\r\n    If you want to import an entire app, go to the <em>Apps Management</em>.\r\n    For further help visit <a href=\"https://2sxc.org/en/help?tag=import\" target=\"_blank\">2sxc Help</a>.\r\n  </p>\r\n\r\n  <div>\r\n    <button mat-raised-button matTooltip=\"Open file browser\" [disabled]=\"data.isImporting\" (click)=\"fileInput.click()\">\r\n      <span>{{ data.importFile ? data.importFile.name : 'Select or drop file' }}</span>\r\n    </button>\r\n    <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light import-result-box\" *ngIf=\"data.importResult\">\r\n    <div *ngIf=\"data.importResult.Success\" class=\"sxc-message sxc-message-info\">\r\n      The import has been done. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.importResult.Success\" class=\"sxc-message sxc-message-error\">\r\n      The import failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.importResult.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === 0,\r\n      'sxc-message-success': message.MessageType === 1,\r\n      'sxc-message-error': message.MessageType === 2\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.importResult?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.importFile || data.isImporting || data.importResult\"\r\n        (click)=\"importAppParts()\">\r\n        Import\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.importResult?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../../import-app/models/import-app-result.model';\r\nimport { ImportAppPartsService } from '../../services/import-app-parts.service';\r\nimport { ImportAppPartsDialogData } from './import-app-parts-dialog.config';\r\n\r\n@Component({\r\n  selector: 'app-import-app-parts',\r\n  templateUrl: './import-app-parts.component.html',\r\n  styleUrls: ['./import-app-parts.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ImportAppPartsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private isImporting$ = new BehaviorSubject(false);\r\n  private importFile$ = new BehaviorSubject<File>(null);\r\n  private importResult$ = new BehaviorSubject<ImportAppResult>(null);\r\n  templateVars$ = combineLatest([this.isImporting$, this.importFile$, this.importResult$]).pipe(\r\n    map(([isImporting, importFile, importResult]) => ({ isImporting, importFile, importResult })),\r\n  );\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ImportAppPartsDialogData,\r\n    private dialogRef: MatDialogRef<ImportAppPartsComponent>,\r\n    private importAppPartsService: ImportAppPartsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.dialogData.files != null) {\r\n      this.importFile$.next(this.dialogData.files[0]);\r\n      this.importAppParts();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.isImporting$.complete();\r\n    this.importFile$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n    this.importAppParts();\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    const importFile = (event.target as HTMLInputElement).files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n  }\r\n\r\n  importAppParts() {\r\n    this.isImporting$.next(true);\r\n    this.importAppPartsService.importAppParts(this.importFile$.value).subscribe({\r\n      next: result => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(result);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(null);\r\n        this.snackBar.open('Import failed. Please check console for more information', null, { duration: 3000 });\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}