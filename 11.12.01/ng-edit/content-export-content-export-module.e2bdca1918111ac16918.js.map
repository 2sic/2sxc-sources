{"version":3,"sources":["./src/app/content-export/content-export-dialog.config.ts","./src/app/content-export/content-export-routing.module.ts","./src/app/content-export/content-export.module.ts","./src/app/content-export/services/content-export.service.ts","./src/app/app-administration/services/content-types.service.ts"],"names":["contentExportDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentExportRoutingModule","forChild","ContentExportModule","context","dnnContext","exportContent","values","selectedIds","selectedIdsString","join","url","this","$2sxc","http","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","ContentExportService","webApiTypeRoot","retrieveContentType","staticName","get","params","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService"],"mappings":"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","file":"content-export-content-export-module.e2bdca1918111ac16918.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map((scopes: { [key: string]: string }) => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}