{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_analyze-settings_analyze-settings_comp-6cd38e.a563a0826758cd9f.js","mappings":"kWAWO,IAAMA,EAA2B,MAAlC,MAAOA,EAGXC,YAAoBC,GAAAC,KAAAD,UAAyB,CAE7CE,OAAOC,GACLF,KAAKG,IAAMD,EAAOE,KACpB,CAEAC,QAAQH,GACN,OAAO,CACT,CAEAI,QACEC,OAAgBP,KAAKG,KACrBH,KAAKD,SAASS,KAAK,sBAAuB,KAAM,CAAEC,SAAU,KAC9D,CAACC,SAAAV,KAAA,mBAAAW,iBAhBUd,GAA2Be,MAAAC,MAAA,EAAAH,SAAAV,KAAA,UAAAc,EAAAC,IAAA,MAA3BlB,EAA2BmB,UAAA,+BAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,uEAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICXxCT,MAAA,WAAuDA,MAAA,0BAASU,EAAAhB,MAAM,GACpEM,MAAA,YAAkBA,MAAA,GAASA,iBADYA,MAAA,QAAAU,EAAAnB,KACrBS,MAAA,GAAAA,MAAAU,EAAAnB,kPDUPN,CAA2B,4CEVtCe,MAAA,UAAAA,CAAsC,SAC/BA,MAAA,GAAkBA,QACvBA,MAAA,UAAAA,CAA6C,cACjCA,MAAA,YAAMA,kCAFbA,MAAA,GAAAA,MAAAW,EAAAC,uDAQPZ,MAAA,WAAsEA,MAAA,mBAAAA,MAAAa,GAAA,MAAAC,EAAAd,QAAA,OAASA,MAAAc,EAAAC,cAAa,GAC1Ff,MAAA,WAAkBA,MAAA,GAAkBA,QACpCA,MAAA,UAAAA,CAAoC,cACxBA,MAAA,YAAMA,oCAFAA,MAAA,GAAAA,MAAAgB,EAAAJ,eCAf,IAAMK,EAAoC,MAA3C,MAAOA,EAMX5B,OAAOC,GACLF,KAAKwB,aAAetB,EAAOE,MAC3BJ,KAAKE,OAASA,EACdF,KAAK8B,UAAY9B,KAAKE,OAAO6B,IAC/B,CAEA1B,QAAQH,GACN,OAAO,CACT,CAEAyB,cACE3B,KAAKE,OAAOyB,YAAY3B,KAAK8B,UAC/B,CAACpB,SAAAV,KAAA,mBAAAW,iBAlBUkB,EAAoC,EAAAnB,SAAAV,KAAA,UAAAc,EAAAC,IAAA,MAApCc,EAAoCb,UAAA,yCAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,sTAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,GDXjDT,MAAA,EAAAoB,EAAA,YAAApB,CAOC,EAAAqB,EAAA,mBAPDrB,MAAA,EAAAU,EAAAE,cAAA,QASAZ,MAAA,GAAAA,MAAA,EAAAU,EAAAE,aAAA,wJCEaK,CAAoC,yHCQvCjB,MAAA,kBAAgCA,MAAA,GAAeA,kCAAnCA,MAAA,QAAAsB,EAAAC,MAAoBvB,MAAA,GAAAA,MAAAsB,EAAAE,+CAlBxCxB,MAAA,UAAAA,CAAmC,UAAnCA,CAAmC,UAAnCA,CAAmC,SAGxBA,MAAA,GAAkBA,QACvBA,MAAA,cAA6CA,MAAA,mBAAAA,MAAAyB,GAAA,MAAAC,EAAA1B,QAAA,OAASA,MAAA0B,EAAAC,cAAa,GACjE3B,MAAA,cAAUA,MAAA,WAAKA,cAIrBA,MAAA,SACEA,MAAA,mHACFA,QACAA,MAAA,oBACAA,MAAA,sBAAAA,CAAuD,gBAC1CA,MAAA,2CAAoCA,QAC/CA,MAAA,mBAAwCA,MAAA,yBAAA4B,GAAA5B,MAAAyB,GAAA,MAAAI,EAAA7B,QAAA,OAAiBA,MAAA6B,EAAAC,WAAAF,GAAkB,GACzE5B,MAAA,mBAAgCA,MAAA,uDAAgDA,QAChFA,MAAA,GAAA+B,EAAA,mBAAA/B,OAGFA,UAEFA,MAAA,YACEA,MAAA,wBAAAA,CACkB,aAEpBA,kCAvBSA,MAAA,GAAAA,MAAA,WAAAW,EAAAqB,KAAA,IAYKhC,MAAA,IAAAA,MAAA,UAAAU,EAAAuB,cACEjC,MAAA,GAAAA,MAAA,aAAAkC,GACZlC,MAAA,GAAAA,MAAAU,EAAAyB,OAMyCnC,MAAA,GAAAA,MAAA,UAAAU,EAAA0B,MAAApC,CAAoB,cAAAW,EAAA0B,cCJ9D,IAAMC,EAAwB,MAA/B,MAAOA,EASXpD,YACUqD,EACAC,EACAC,EACAC,EACAC,GAJAvD,KAAAmD,YACAnD,KAAAoD,QACApD,KAAAqD,SACArD,KAAAsD,eACAtD,KAAAuD,yBAXVvD,KAAAiD,YAAcjD,KAAKwD,mBAajBxD,KAAK4C,KAAO5C,KAAKoD,MAAMK,SAASC,SAASC,IAAI,OAC/C,CAEAC,WACE5D,KAAK6D,OAAS,IAAIC,IAAwB,IAC1C9D,KAAK+D,cAAgB,IAAID,SAAwBhB,GACjD9C,KAAKgE,OAAS,IAAIF,IAAqC,IAEvD9D,KAAKiE,WACLjE,KAAKkE,WAELlE,KAAKmE,cAAaC,KAAc,CAACpE,KAAK6D,OAAQ7D,KAAK+D,cAAe/D,KAAKgE,SAASK,QAC9EC,KAAI,EAAEvB,EAAOF,EAAcG,MAAK,CAE5BD,QACAF,eACAG,WAKR,CAEAuB,cACEvE,KAAK6D,OAAOW,WACZxE,KAAK+D,cAAcS,WACnBxE,KAAKgE,OAAOQ,UACd,CAEAjC,cACEvC,KAAKmD,UAAUsB,OACjB,CAEA/B,WAAWgC,GACT1E,KAAK+D,cAAcY,KAAKD,GACxB1E,KAAKkE,UACP,CAEQD,WACNjE,KAAKsD,aAAasB,SAASC,UAAU9B,IACnC/C,KAAK6D,OAAOc,KAAK5B,EAAK,EAE1B,CAEQmB,WACNlE,KAAKuD,uBAAuBW,SAASlE,KAAK4C,UAAME,EAAW9C,KAAK+D,cAAc3D,OAAO,GAAMyE,UAAU7B,IACnGhD,KAAKgE,OAAOW,KAAK3B,EAAK,EAE1B,CAEQQ,mBAiEN,MAhEiC,IAC5BsB,IACHC,WAAY,CACV,CACEC,MAAO,MACPC,KAAM,EACNC,SAAU,IACVC,UAAW,uCAAuCC,MAAM,KACxDC,UAAU,EACVC,OAAQ,qBACRC,YAAcrF,GACoBA,EAAO6B,KAC3ByD,KAEdC,aAAc5F,GAEhB,CACEmF,MAAO,QACPC,KAAM,EACNC,SAAU,IACVC,UAAW,uCAAuCC,MAAM,KACxDC,UAAU,EACVC,OAAQ,qBACRC,YAAcrF,GACoBA,EAAO6B,KAC3B2D,OAEdD,aAAcE,KAEhB,CACEX,MAAO,SACPC,KAAM,EACNC,SAAU,IACVC,UAAW,aACXE,UAAU,EACVC,OAAQ,qBACRC,YAAcrF,GACoBA,EAAO6B,KAC3B6D,QAGhB,CACEZ,MAAO,QACPa,MAAO,GACPC,YAAa,QACbX,UAAW,yCAAyCC,MAAM,KAC1DC,UAAU,EACVC,OAAQ,uBACRC,YAAcrF,GACoBA,EAAO6B,KAC3BgE,aAEdN,aAAc5D,EACdmE,mBACoD,CAChDrE,YAAcG,IACZ9B,KAAKqD,OAAO4C,SAAS,CAAC,WAAWjG,KAAK+D,cAAc3D,SAAS0B,EAAU0D,QAAS,CAAEU,WAAYlG,KAAKoD,OAAO,KASxH,CAAC1C,SAAAV,KAAA,mBAAAW,iBApIUuC,GAAwBtC,MAAAC,MAAAD,MAAAuF,MAAAvF,MAAAuF,MAAAvF,MAAAwF,MAAAxF,MAAAyF,KAAA,EAAA3F,SAAAV,KAAA,UAAAc,EAAAC,IAAA,MAAxBmC,EAAwBlC,UAAA,2BAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,sXAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,IDpBrCT,MAAA,EAAA0F,EAAA,2CAAA1F,MAAA,GAAA2F,EAAA3F,MAAA,IAAAU,EAAA6C,aAAA,KAAAoC,mJCoBarD,CAAwB","names":["AnalyzeSettingsKeyComponent","constructor","snackBar","this","agInit","params","key","value","refresh","copy","copyToClipboard","open","duration","static","t","i0","i1","core","In1","selectors","decls","vars","consts","template","rf","ctx","ctx_r0","totalResults","_r3","ctx_r2","openDetails","ctx_r1","AnalyzeSettingsTotalResultsComponent","stackItem","data","AnalyzeSettingsTotalResultsComponent_Conditional_0_Template","AnalyzeSettingsTotalResultsComponent_Conditional_1_Template","view_r3","Guid","Name","_r9","ctx_r8","closeDialog","$event","ctx_r10","changeView","AnalyzeSettingsComponent_Conditional_0_For_18_Template","part","selectedView","undefined","views","stack","gridOptions","AnalyzeSettingsComponent","dialogRef","route","router","viewsService","analyzeSettingsService","buildGridOptions","snapshot","paramMap","get","ngOnInit","views$","BehaviorSubject","selectedView$","stack$","getViews","getStack","viewModel$","combineLatest","pipe","map","ngOnDestroy","complete","close","viewGuid","next","getAll","subscribe","defaultGridOptions","columnDefs","field","flex","minWidth","cellClass","split","sortable","filter","valueGetter","Path","cellRenderer","_value","AnalyzeSettingsValueComponent","Source","width","headerClass","TotalResults","cellRendererParams","navigate","relativeTo","i2","i3","i4","AnalyzeSettingsComponent_Conditional_0_Template","AnalyzeSettingsComponent_contFlowTmp"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-key',\r\n  templateUrl: './analyze-settings-key.component.html',\r\n  styleUrls: ['./analyze-settings-key.component.scss'],\r\n})\r\nexport class AnalyzeSettingsKeyComponent implements ICellRendererAngularComp {\r\n  key: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.key = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.key);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"key-box highlight\" [tippy]=\"key\" (click)=\"copy()\">\r\n  <span class=\"key\">{{ key }}</span>\r\n</div>\r\n","@if (totalResults <= 1) {\r\n  <div class=\"input-component no-click\">\r\n    <div>{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (totalResults > 1) {\r\n  <div matRipple class=\"input-component highlight\" tippy=\"Open details\" (click)=\"openDetails()\">\r\n    <div class=\"text\">{{ totalResults }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>search</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { SettingsStackItem } from '../analyze-settings.models';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-total-results',\r\n  templateUrl: './analyze-settings-total-results.component.html',\r\n  styleUrls: ['./analyze-settings-total-results.component.scss'],\r\n})\r\nexport class AnalyzeSettingsTotalResultsComponent implements ICellRendererAngularComp {\r\n  totalResults: number;\r\n\r\n  private stackItem: SettingsStackItem;\r\n  private params: ICellRendererParams & AnalyzeSettingsTotalResultsParams;\r\n\r\n  agInit(params: ICellRendererParams & AnalyzeSettingsTotalResultsParams): void {\r\n    this.totalResults = params.value;\r\n    this.params = params;\r\n    this.stackItem = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openDetails(): void {\r\n    this.params.openDetails(this.stackItem);\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-mdc-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>Analyze {{ part }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n    <p class=\"dialog-description\">\r\n      Settings and Resources are consolidated from many sources. Here you see what the resulting values would be.\r\n    </p>\r\n    <router-outlet></router-outlet>\r\n    <mat-form-field color=\"accent\" class=\"view-select-box\">\r\n      <mat-label>Merge settings / resources of a View</mat-label>\r\n      <mat-select [ngModel]=\"vm.selectedView\" (ngModelChange)=\"changeView($event)\">\r\n        <mat-option [value]=\"undefined\">No view selected - this is how APIs see the data</mat-option>\r\n        @for (view of vm.views; track view) {\r\n          <mat-option [value]=\"view.Guid\">{{ view.Name }}</mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.stack\" [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n      <div class=\"grid-more-actions-box\"></div>\r\n    </div>\r\n  </div>\r\n}","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { View } from '../../models';\r\nimport { ViewsService } from '../../services';\r\nimport { AnalyzeSettingsService } from '../../services/analyze-settings.service';\r\nimport { AnalyzeSettingsKeyComponent } from './analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from './analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results/analyze-settings-total-results.models';\r\nimport { AnalyzeSettingsValueComponent } from './analyze-settings-value/analyze-settings-value.component';\r\nimport { AnalyzePart, AnalyzeSettingsViewModel, SettingsStackItem } from './analyze-settings.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings',\r\n  templateUrl: './analyze-settings.component.html',\r\n  styleUrls: ['./analyze-settings.component.scss'],\r\n})\r\nexport class AnalyzeSettingsComponent implements OnInit, OnDestroy {\r\n  part: AnalyzePart;\r\n  viewModel$: Observable<AnalyzeSettingsViewModel>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private views$: BehaviorSubject<View[]>;\r\n  private selectedView$: BehaviorSubject<string>;\r\n  private stack$: BehaviorSubject<SettingsStackItem[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AnalyzeSettingsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private viewsService: ViewsService,\r\n    private analyzeSettingsService: AnalyzeSettingsService,\r\n  ) {\r\n    this.part = this.route.snapshot.paramMap.get('part') as AnalyzePart;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.views$ = new BehaviorSubject<View[]>([]);\r\n    this.selectedView$ = new BehaviorSubject<string>(undefined);\r\n    this.stack$ = new BehaviorSubject<SettingsStackItem[]>([]);\r\n\r\n    this.getViews();\r\n    this.getStack();\r\n\r\n    this.viewModel$ = combineLatest([this.views$, this.selectedView$, this.stack$]).pipe(\r\n      map(([views, selectedView, stack]) => {\r\n        const viewModel: AnalyzeSettingsViewModel = {\r\n          views,\r\n          selectedView,\r\n          stack,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.views$.complete();\r\n    this.selectedView$.complete();\r\n    this.stack$.complete();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeView(viewGuid: string): void {\r\n    this.selectedView$.next(viewGuid);\r\n    this.getStack();\r\n  }\r\n\r\n  private getViews(): void {\r\n    this.viewsService.getAll().subscribe(views => {\r\n      this.views$.next(views);\r\n    });\r\n  }\r\n\r\n  private getStack(): void {\r\n    this.analyzeSettingsService.getStack(this.part, undefined, this.selectedView$.value, true).subscribe(stack => {\r\n      this.stack$.next(stack);\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: 'Key',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.Path;\r\n          },\r\n          cellRenderer: AnalyzeSettingsKeyComponent,\r\n        },\r\n        {\r\n          field: 'Value',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item._value;\r\n          },\r\n          cellRenderer: AnalyzeSettingsValueComponent,\r\n        },\r\n        {\r\n          field: 'Source',\r\n          flex: 1,\r\n          minWidth: 150,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.Source;\r\n          },\r\n        },\r\n        {\r\n          field: 'Total',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.TotalResults;\r\n          },\r\n          cellRenderer: AnalyzeSettingsTotalResultsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: AnalyzeSettingsTotalResultsParams = {\r\n              openDetails: (stackItem) => {\r\n                this.router.navigate([`details/${this.selectedView$.value}/${stackItem.Path}`], { relativeTo: this.route });\r\n              },\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}