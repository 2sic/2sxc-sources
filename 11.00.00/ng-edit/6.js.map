{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/rxjs/_esm5/internal/observable/interval.js","C:/Projects/eav-item-dialog-angular/node_modules/@angular/cdk/__ivy_ngcc__/fesm5/drag-drop.js"],"names":["dispatch","state","subscriber","counter","period","next","this","schedule","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","passiveEventListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_document","_ngZone","_viewportRuler","_dragDropRegistry","_this","_passiveTransform","x","y","_activeTransform","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","event","length","targetHandle","find","handle","target","contains","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","_hasStartedDragging","_previewRect","width","height","_preview","getBoundingClientRect","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","setAttribute","observers","run","pointerPosition","distance","_getDragDistance","delta","_pointerDirectionDelta","_getPointerPositionOnPage","Math","abs","dragStartThreshold","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","isDragging","_startDragSequence","_pointerUp","withRootElement","registerDragItem","Object","defineProperty","prototype","get","set","newValue","_toggleNativeDragInteractions","enumerable","configurable","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","forEach","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","addEventListener","_initialTransform","undefined","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","clear","reset","transform","disableHandle","add","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","position","setFreeDragPosition","_sortFromLastPointerPosition","_pointerPositionAtLastDirectionChange","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","parent_1","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","start","_initialContainer","_initialIndex","getItemIndex","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","pipe","startWith","_scrollPosition","getViewportScrollPosition","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","_a","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","viewRef","viewContainer","createEmbeddedView","context","detectChanges","getRootNode","matchElementSize","deepCloneNode","pointerEvents","margin","top","left","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","runOutsideAngular","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","pageX","pageY","touches","changedTouches","constrainedPoint","constrainPosition","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","bottom","clamp","right","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","round","node","clone","cloneNode","descendantsWithId","querySelectorAll","descendantCanvases","removeAttribute","i","cloneCanvases","correspondingCloneContext","getContext","drawImage","min","max","removeChild","rootNode","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_parentPositions","Map","_previousSwap","drag","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","scheduler","animationFrame","isNumeric","Observable","takeUntil","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","pointerX","pointerY","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","push","_cacheItemPositions","_reset","withItems","items","connectedTo","slice","withOrientation","orientation","elements","_scrollableElements","findIndex","reverse","currentItem","isReceiving","size","pointerDelta","isPointerNearClientRect","_clientRect","siblings","isHorizontal","siblingAtNewPosition","clientRect","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","adjustClientRect","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollTop","scrollHeight","clientHeight","scrollLeft","scrollWidth","clientWidth","getElementScrollDirections","getViewportSize","window","_cacheParentPositions","scrollPosition","getMutableClientRect","elementToMeasure","sort","a","b","_stopReceiving","immediateSibling","end","_","floor","_updateAfterScroll","scrolledParent","newTop","newLeft","scrolledParentNode","documentElement","topDifference","leftDifference","isInsideClientRect","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","shadowRoot","rect","xThreshold","yThreshold","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","upEvent","e","options","config","_clearGlobalListeners","ngOnDestroy","instance","ɵprov","factory","token","providedIn","ɵfac","t","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","ɵdir","selectors","hostAttrs","inputs","CdkDragPlaceholder","templateRef","data","CdkDragPreview","_matchSize","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","dropContainer","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_destroyed","observer","subscription","_dragRef","movedEvent","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","changes","tap","childHandleElements","filter","switchMap","merge","apply","handleInstance","dragRef","freeDragPosition","ngOnChanges","rootSelectorChange","positionChange","firstChange","removeItem","rootElementSelector","getClosestMatchingAncestor","Error","nodeName","_getBoundaryElement","boundary","ref","dir","emit","markForCheck","draggingDisabled","contentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","outputs","exportAs","features","provide","useExisting","selector","currentElement","matches","msMatchesSelector","CdkDropListGroup","_items","_uniqueIdCounter","CdkDropList","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","ngAfterContentInit","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","list","listAutoScrollDisabled","listOrientation","useValue","DragDropModule","ɵmod","ɵinj","providers"],"mappings":"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","file":"6.js","sourcesContent":["/** PURE_IMPORTS_START _Observable,_scheduler_async,_util_isNumeric PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period, scheduler) {\n    if (period === void 0) {\n        period = 0;\n    }\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(function (subscriber) {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber: subscriber, counter: 0, period: period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    var subscriber = state.subscriber, counter = state.counter, period = state.period;\n    subscriber.next(counter);\n    this.schedule({ subscriber: subscriber, counter: counter + 1, period: period }, period);\n}\n//# sourceMappingURL=interval.js.map\n","import { Injectable, NgZone, Inject, ɵɵdefineInjectable, ɵɵinject, InjectionToken, Directive, ElementRef, Optional, Input, TemplateRef, EventEmitter, isDevMode, SkipSelf, ViewContainerRef, ChangeDetectorRef, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { startWith, takeUntil, map, take, tap, switchMap } from 'rxjs/operators';\nimport { __spread, __read } from 'tslib';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (var key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    var userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    var multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    var computedStyle = getComputedStyle(element);\n    var transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    var property = transitionedProperties.find(function (prop) { return prop === 'transform' || prop === 'all'; });\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    var propertyIndex = transitionedProperties.indexOf(property);\n    var rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    var rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    var value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(function (part) { return part.trim(); });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nvar passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nvar activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nvar MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nvar DragRef = /** @class */ (function () {\n    function DragRef(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        var _this = this;\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = function (event) {\n            _this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (_this._handles.length) {\n                var targetHandle = _this._handles.find(function (handle) {\n                    var target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !_this._disabledHandles.has(targetHandle) && !_this.disabled) {\n                    _this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!_this.disabled) {\n                _this._initializeDragSequence(_this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = function (event) {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            if (!_this._hasStartedDragging) {\n                var pointerPosition = _this._getPointerPositionOnPage(event);\n                var distanceX = Math.abs(pointerPosition.x - _this._pickupPositionOnPage.x);\n                var distanceY = Math.abs(pointerPosition.y - _this._pickupPositionOnPage.y);\n                var isOverThreshold = distanceX + distanceY >= _this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    var isDelayElapsed = Date.now() >= _this._dragStartTime + _this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        _this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!_this._dropContainer || !_this._dropContainer.isDragging()) {\n                        _this._hasStartedDragging = true;\n                        _this._ngZone.run(function () { return _this._startDragSequence(event); });\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (_this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!_this._previewRect || (!_this._previewRect.width && !_this._previewRect.height)) {\n                    _this._previewRect = (_this._preview || _this._rootElement).getBoundingClientRect();\n                }\n            }\n            var constrainedPointerPosition = _this._getConstrainedPointerPosition(event);\n            _this._hasMoved = true;\n            _this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (_this._dropContainer) {\n                _this._updateActiveDropContainer(constrainedPointerPosition);\n            }\n            else {\n                var activeTransform = _this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - _this._pickupPositionOnPage.x + _this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - _this._pickupPositionOnPage.y + _this._passiveTransform.y;\n                _this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && _this._rootElement instanceof SVGElement) {\n                    var appliedTransform = \"translate(\" + activeTransform.x + \" \" + activeTransform.y + \")\";\n                    _this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (_this._moveEvents.observers.length) {\n                _this._ngZone.run(function () {\n                    _this._moveEvents.next({\n                        source: _this,\n                        pointerPosition: constrainedPointerPosition,\n                        event: event,\n                        distance: _this._getDragDistance(constrainedPointerPosition),\n                        delta: _this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = function (event) {\n            _this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    Object.defineProperty(DragRef.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: function () {\n            return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n        },\n        set: function (value) {\n            var newValue = coerceBooleanProperty(value);\n            if (newValue !== this._disabled) {\n                this._disabled = newValue;\n                this._toggleNativeDragInteractions();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    DragRef.prototype.getPlaceholderElement = function () {\n        return this._placeholder;\n    };\n    /** Returns the root draggable element. */\n    DragRef.prototype.getRootElement = function () {\n        return this._rootElement;\n    };\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    DragRef.prototype.getVisibleElement = function () {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    };\n    /** Registers the handles that can be used to drag the element. */\n    DragRef.prototype.withHandles = function (handles) {\n        this._handles = handles.map(function (handle) { return coerceElement(handle); });\n        this._handles.forEach(function (handle) { return toggleNativeDragInteractions(handle, false); });\n        this._toggleNativeDragInteractions();\n        return this;\n    };\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    DragRef.prototype.withPreviewTemplate = function (template) {\n        this._previewTemplate = template;\n        return this;\n    };\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    DragRef.prototype.withPlaceholderTemplate = function (template) {\n        this._placeholderTemplate = template;\n        return this;\n    };\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    DragRef.prototype.withRootElement = function (rootElement) {\n        var element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n            element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        return this;\n    };\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    DragRef.prototype.withBoundaryElement = function (boundaryElement) {\n        var _this = this;\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(function () { return _this._containInsideBoundaryOnResize(); });\n        }\n        return this;\n    };\n    /** Removes the dragging functionality from the DOM element. */\n    DragRef.prototype.dispose = function () {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._boundaryElement = this._rootElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    };\n    /** Checks whether the element is currently being dragged. */\n    DragRef.prototype.isDragging = function () {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    };\n    /** Resets a standalone drag item to its initial position. */\n    DragRef.prototype.reset = function () {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    };\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    DragRef.prototype.disableHandle = function (handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    };\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    DragRef.prototype.enableHandle = function (handle) {\n        this._disabledHandles.delete(handle);\n    };\n    /** Sets the layout direction of the draggable item. */\n    DragRef.prototype.withDirection = function (direction) {\n        this._direction = direction;\n        return this;\n    };\n    /** Sets the container that the item is part of. */\n    DragRef.prototype._withDropContainer = function (container) {\n        this._dropContainer = container;\n    };\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    DragRef.prototype.getFreeDragPosition = function () {\n        var position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    };\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    DragRef.prototype.setFreeDragPosition = function (value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    };\n    /** Updates the item's sort order based on the last-known pointer position. */\n    DragRef.prototype._sortFromLastPointerPosition = function () {\n        var position = this._pointerPositionAtLastDirectionChange;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(position);\n        }\n    };\n    /** Unsubscribes from the global subscriptions. */\n    DragRef.prototype._removeSubscriptions = function () {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    };\n    /** Destroys the preview element and its ViewRef. */\n    DragRef.prototype._destroyPreview = function () {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    };\n    /** Destroys the placeholder element and its ViewRef. */\n    DragRef.prototype._destroyPlaceholder = function () {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    DragRef.prototype._endDragSequence = function (event) {\n        var _this = this;\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(function () {\n                _this._cleanupDragArtifacts(event);\n                _this._cleanupCachedDimensions();\n                _this._dragDropRegistry.stopDragging(_this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(function () {\n                _this.ended.next({\n                    source: _this,\n                    distance: _this._getDragDistance(_this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    };\n    /** Starts the dragging sequence. */\n    DragRef.prototype._startDragSequence = function (event) {\n        // Emit the event on the item before the one on the container.\n        this.started.next({ source: this });\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        if (this._dropContainer) {\n            var element = this._rootElement;\n            var parent_1 = element.parentNode;\n            var preview = this._preview = this._createPreviewElement();\n            var placeholder = this._placeholder = this._createPlaceholderElement();\n            var anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent_1.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent_1.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this._dropContainer.start();\n            this._initialContainer = this._dropContainer;\n            this._initialIndex = this._dropContainer.getItemIndex(this);\n        }\n        else {\n            this._initialContainer = this._initialIndex = undefined;\n        }\n    };\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    DragRef.prototype._initializeDragSequence = function (referenceElement, event) {\n        var _this = this;\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        var isDragging = this.isDragging();\n        var isTouchSequence = isTouchEvent(event);\n        var isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        var rootElement = this._rootElement;\n        var isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor;\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.pipe(startWith(null)).subscribe(function () {\n            _this._scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = this._boundaryElement.getBoundingClientRect();\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        var previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        var pointerPosition = this._pickupPositionOnPage = this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    };\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    DragRef.prototype._cleanupDragArtifacts = function (event) {\n        var _this = this;\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(function () {\n            var container = _this._dropContainer;\n            var currentIndex = container.getItemIndex(_this);\n            var pointerPosition = _this._getPointerPositionOnPage(event);\n            var distance = _this._getDragDistance(_this._getPointerPositionOnPage(event));\n            var isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            _this.ended.next({ source: _this, distance: distance });\n            _this.dropped.next({\n                item: _this,\n                currentIndex: currentIndex,\n                previousIndex: _this._initialIndex,\n                container: container,\n                previousContainer: _this._initialContainer,\n                isPointerOverContainer: isPointerOverContainer,\n                distance: distance\n            });\n            container.drop(_this, currentIndex, _this._initialContainer, isPointerOverContainer, distance, _this._initialIndex);\n            _this._dropContainer = _this._initialContainer;\n        });\n    };\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    DragRef.prototype._updateActiveDropContainer = function (_a) {\n        var _this = this;\n        var x = _a.x, y = _a.y;\n        // Drop container that draggable has been moved into.\n        var newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(function () {\n                // Notify the old container that the item has left.\n                _this.exited.next({ item: _this, container: _this._dropContainer });\n                _this._dropContainer.exit(_this);\n                // Notify the new container that the item has entered.\n                _this._dropContainer = newContainer;\n                _this._dropContainer.enter(_this, x, y, newContainer === _this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? _this._initialIndex : undefined);\n                _this.entered.next({\n                    item: _this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(_this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(x, y);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    };\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    DragRef.prototype._createPreviewElement = function () {\n        var previewConfig = this._previewTemplate;\n        var previewClass = this.previewClass;\n        var previewTemplate = previewConfig ? previewConfig.template : null;\n        var preview;\n        if (previewTemplate) {\n            var viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, this._rootElement);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            var element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element);\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: '1000'\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(function (className) { return preview.classList.add(className); });\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    };\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    DragRef.prototype._animatePreviewToPlaceholder = function () {\n        var _this = this;\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        var placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        var duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(function () {\n            return new Promise(function (resolve) {\n                var handler = (function (event) {\n                    if (!event || (event.target === _this._preview && event.propertyName === 'transform')) {\n                        _this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                var timeout = setTimeout(handler, duration * 1.5);\n                _this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    };\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    DragRef.prototype._createPlaceholderElement = function () {\n        var placeholderConfig = this._placeholderTemplate;\n        var placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        var placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    };\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    DragRef.prototype._getPointerPositionInElement = function (referenceElement, event) {\n        var elementRect = this._rootElement.getBoundingClientRect();\n        var handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        var referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        var point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        var x = point.pageX - referenceRect.left - this._scrollPosition.left;\n        var y = point.pageY - referenceRect.top - this._scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    };\n    /** Determines the point of the page that was touched by the user. */\n    DragRef.prototype._getPointerPositionOnPage = function (event) {\n        // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n        var point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n        return {\n            x: point.pageX - this._scrollPosition.left,\n            y: point.pageY - this._scrollPosition.top\n        };\n    };\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    DragRef.prototype._getConstrainedPointerPosition = function (event) {\n        var point = this._getPointerPositionOnPage(event);\n        var constrainedPoint = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        var dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            constrainedPoint.y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            constrainedPoint.x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            var _a = this._pickupPositionInElement, pickupX = _a.x, pickupY = _a.y;\n            var boundaryRect = this._boundaryRect;\n            var previewRect = this._previewRect;\n            var minY = boundaryRect.top + pickupY;\n            var maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            var minX = boundaryRect.left + pickupX;\n            var maxX = boundaryRect.right - (previewRect.width - pickupX);\n            constrainedPoint.x = clamp(constrainedPoint.x, minX, maxX);\n            constrainedPoint.y = clamp(constrainedPoint.y, minY, maxY);\n        }\n        return constrainedPoint;\n    };\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    DragRef.prototype._updatePointerDirectionDelta = function (pointerPositionOnPage) {\n        var x = pointerPositionOnPage.x, y = pointerPositionOnPage.y;\n        var delta = this._pointerDirectionDelta;\n        var positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        var changeX = Math.abs(x - positionSinceLastChange.x);\n        var changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    };\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    DragRef.prototype._toggleNativeDragInteractions = function () {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        var shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    };\n    /** Removes the manually-added event listeners from the root element. */\n    DragRef.prototype._removeRootElementListeners = function (element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    };\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    DragRef.prototype._applyRootElementTransform = function (x, y) {\n        var transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    };\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    DragRef.prototype._getDragDistance = function (currentPosition) {\n        var pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    };\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    DragRef.prototype._cleanupCachedDimensions = function () {\n        this._boundaryRect = this._previewRect = undefined;\n    };\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    DragRef.prototype._containInsideBoundaryOnResize = function () {\n        var _a = this._passiveTransform, x = _a.x, y = _a.y;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        var boundaryRect = this._boundaryElement.getBoundingClientRect();\n        var elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        var leftOverflow = boundaryRect.left - elementRect.left;\n        var rightOverflow = elementRect.right - boundaryRect.right;\n        var topOverflow = boundaryRect.top - elementRect.top;\n        var bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y: y, x: x });\n        }\n    };\n    /** Gets the drag start delay, based on the event type. */\n    DragRef.prototype._getDragStartDelay = function (event) {\n        var value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    };\n    return DragRef;\n}());\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return \"translate3d(\" + Math.round(x) + \"px, \" + Math.round(y) + \"px, 0)\";\n}\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    var clone = node.cloneNode(true);\n    var descendantsWithId = clone.querySelectorAll('[id]');\n    var descendantCanvases = node.querySelectorAll('canvas');\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (var i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    // `cloneNode` won't transfer the content of `canvas` elements so we have to do it ourselves.\n    // We match up the cloned canvas to their sources using their index in the DOM.\n    if (descendantCanvases.length) {\n        var cloneCanvases = clone.querySelectorAll('canvas');\n        for (var i = 0; i < descendantCanvases.length; i++) {\n            var correspondingCloneContext = cloneCanvases[i].getContext('2d');\n            if (correspondingCloneContext) {\n                correspondingCloneContext.drawImage(descendantCanvases[i], 0, 0);\n            }\n        }\n    }\n    return clone;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    var rootNode = viewRef.rootNodes[0];\n    if (rootNode.nodeType !== _document.ELEMENT_NODE) {\n        var wrapper = _document.createElement('div');\n        wrapper.appendChild(rootNode);\n        return wrapper;\n    }\n    return rootNode;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param source Element whose size needs to be matched.\n */\nfunction matchElementSize(target, source) {\n    var sourceRect = source.getBoundingClientRect();\n    target.style.width = sourceRect.width + \"px\";\n    target.style.height = sourceRect.height + \"px\";\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    var from = clamp$1(fromIndex, array.length - 1);\n    var to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    var target = array[from];\n    var delta = to < from ? -1 : 1;\n    for (var i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    var from = clamp$1(currentIndex, currentArray.length - 1);\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    var to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nvar DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nvar SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nvar AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nvar DropListRef = /** @class */ (function () {\n    function DropListRef(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        var _this = this;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = function () { return true; };\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Cached positions of the scrollable parent elements. */\n        this._parentPositions = new Map();\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as\n         * well as what direction the pointer was moving in when the swap occured.\n         */\n        this._previousSwap = { drag: null, delta: 0 };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = function () {\n            _this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(_this._stopScrollTimers))\n                .subscribe(function () {\n                var node = _this._scrollNode;\n                if (_this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (_this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (_this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (_this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    DropListRef.prototype.dispose = function () {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    };\n    /** Whether an item from this list is currently being dragged. */\n    DropListRef.prototype.isDragging = function () {\n        return this._isDragging;\n    };\n    /** Starts dragging an item. */\n    DropListRef.prototype.start = function () {\n        var _this = this;\n        var styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(function (sibling) { return sibling._startReceiving(_this); });\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    DropListRef.prototype.enter = function (item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        var newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        var activeDraggables = this._activeDraggables;\n        var currentIndex = activeDraggables.indexOf(item);\n        var placeholder = item.getPlaceholderElement();\n        var newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            var element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed.\n        this._cacheItemPositions();\n        this.entered.next({ item: item, container: this, currentIndex: this.getItemIndex(item) });\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    DropListRef.prototype.exit = function (item) {\n        this._reset();\n        this.exited.next({ item: item, container: this });\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    DropListRef.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item: item,\n            currentIndex: currentIndex,\n            previousIndex: previousIndex,\n            container: this,\n            previousContainer: previousContainer,\n            isPointerOverContainer: isPointerOverContainer,\n            distance: distance\n        });\n    };\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    DropListRef.prototype.withItems = function (items) {\n        var _this = this;\n        this._draggables = items;\n        items.forEach(function (item) { return item._withDropContainer(_this); });\n        if (this.isDragging()) {\n            this._cacheItems();\n        }\n        return this;\n    };\n    /** Sets the layout direction of the drop list. */\n    DropListRef.prototype.withDirection = function (direction) {\n        this._direction = direction;\n        return this;\n    };\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    DropListRef.prototype.connectedTo = function (connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    };\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    DropListRef.prototype.withOrientation = function (orientation) {\n        this._orientation = orientation;\n        return this;\n    };\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    DropListRef.prototype.withScrollableParents = function (elements) {\n        var element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? __spread([element], elements) : elements.slice();\n        return this;\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    DropListRef.prototype.getItemIndex = function (item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        var items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, function (currentItem) { return currentItem.drag === item; });\n    };\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    DropListRef.prototype.isReceiving = function () {\n        return this._activeSiblings.size > 0;\n    };\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    DropListRef.prototype._sortItem = function (item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !isPointerNearClientRect(this._clientRect, pointerX, pointerY)) {\n            return;\n        }\n        var siblings = this._itemPositions;\n        var newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        var isHorizontal = this._orientation === 'horizontal';\n        var currentIndex = findIndex(siblings, function (currentItem) { return currentItem.drag === item; });\n        var siblingAtNewPosition = siblings[newIndex];\n        var currentPosition = siblings[currentIndex].clientRect;\n        var newPosition = siblingAtNewPosition.clientRect;\n        var delta = currentIndex > newIndex ? 1 : -1;\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        // How many pixels the item's placeholder should be offset.\n        var itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        var siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        var oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item: item\n        });\n        siblings.forEach(function (sibling, index) {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            var isDraggedItem = sibling.drag === item;\n            var offset = isDraggedItem ? itemOffset : siblingOffset;\n            var elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = \"translate3d(\" + Math.round(sibling.offset) + \"px, 0, 0)\";\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = \"translate3d(0, \" + Math.round(sibling.offset) + \"px, 0)\";\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    DropListRef.prototype._startScrollingIfNecessary = function (pointerX, pointerY) {\n        var _this = this;\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        var scrollNode;\n        var verticalScrollDirection = 0 /* NONE */;\n        var horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.forEach(function (position, element) {\n            var _a;\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === _this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, pointerX, pointerY)) {\n                _a = __read(getElementScrollDirections(element, position.clientRect, pointerX, pointerY), 2), verticalScrollDirection = _a[0], horizontalScrollDirection = _a[1];\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            var _a = this._viewportRuler.getViewportSize(), width = _a.width, height = _a.height;\n            var clientRect = { width: width, height: height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    };\n    /** Stops any currently-running auto-scroll sequences. */\n    DropListRef.prototype._stopScrolling = function () {\n        this._stopScrollTimers.next();\n    };\n    /** Caches the positions of the configured scrollable parents. */\n    DropListRef.prototype._cacheParentPositions = function () {\n        var _this = this;\n        this._parentPositions.clear();\n        this._parentPositions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        this._scrollableElements.forEach(function (element) {\n            var clientRect = getMutableClientRect(element);\n            // We keep the ClientRect cached in two properties, because it's referenced in a lot of\n            // performance-sensitive places and we want to avoid the extra lookups. The `element` is\n            // guaranteed to always be in the `_scrollableElements` so this should always match.\n            if (element === _this.element) {\n                _this._clientRect = clientRect;\n            }\n            _this._parentPositions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: clientRect\n            });\n        });\n    };\n    /** Refreshes the position cache of the items and sibling containers. */\n    DropListRef.prototype._cacheItemPositions = function () {\n        var isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(function (drag) {\n            var elementToMeasure = drag.getVisibleElement();\n            return { drag: drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort(function (a, b) {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    };\n    /** Resets the container to its initial state. */\n    DropListRef.prototype._reset = function () {\n        var _this = this;\n        this._isDragging = false;\n        var styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(function (item) { return item.getRootElement().style.transform = ''; });\n        this._siblings.forEach(function (sibling) { return sibling._stopReceiving(_this); });\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    };\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    DropListRef.prototype._getSiblingOffsetPx = function (currentIndex, siblings, delta) {\n        var isHorizontal = this._orientation === 'horizontal';\n        var currentPosition = siblings[currentIndex].clientRect;\n        var immediateSibling = siblings[currentIndex + delta * -1];\n        var siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            var start = isHorizontal ? 'left' : 'top';\n            var end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    };\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    DropListRef.prototype._getItemOffsetPx = function (currentPosition, newPosition, delta) {\n        var isHorizontal = this._orientation === 'horizontal';\n        var itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    };\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    DropListRef.prototype._getItemIndexFromPointerPosition = function (item, pointerX, pointerY, delta) {\n        var _this = this;\n        var isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, function (_a, _, array) {\n            var drag = _a.drag, clientRect = _a.clientRect;\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                var direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, and they didn't change\n                // the direction in which they're dragging, we don't consider it a direction swap.\n                if (drag === _this._previousSwap.drag && direction === _this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX <= Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY <= Math.floor(clientRect.bottom);\n        });\n    };\n    /** Caches the current items in the list and their positions. */\n    DropListRef.prototype._cacheItems = function () {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    };\n    /**\n     * Updates the internal state of the container after a scroll event has happened.\n     * @param scrolledParent Element that was scrolled.\n     * @param newTop New top scroll position.\n     * @param newLeft New left scroll position.\n     */\n    DropListRef.prototype._updateAfterScroll = function (scrolledParent, newTop, newLeft) {\n        var _this = this;\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support `contains`\n        // on the `document`.\n        var scrolledParentNode = scrolledParent === this._document ? scrolledParent.documentElement : scrolledParent;\n        var scrollPosition = this._parentPositions.get(scrolledParent).scrollPosition;\n        var topDifference = scrollPosition.top - newTop;\n        var leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this._parentPositions.forEach(function (position, node) {\n            if (position.clientRect && scrolledParent !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        // Since we know the amount that the user has scrolled we can shift all of the client rectangles\n        // ourselves. This is cheaper than re-measuring everything and we can avoid inconsistent\n        // behavior where we might be measuring the element before its position has changed.\n        this._itemPositions.forEach(function (_a) {\n            var clientRect = _a.clientRect;\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(function (_a) {\n            var drag = _a.drag;\n            if (_this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    DropListRef.prototype._isOverContainer = function (x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    };\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    DropListRef.prototype._getSiblingContainerFromPosition = function (item, x, y) {\n        return this._siblings.find(function (sibling) { return sibling._canReceive(item, x, y); });\n    };\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    DropListRef.prototype._canReceive = function (item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        var elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        var nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    };\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    DropListRef.prototype._startReceiving = function (sibling) {\n        var activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    };\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    DropListRef.prototype._stopReceiving = function (sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    };\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    DropListRef.prototype._listenToScrollEvents = function () {\n        var _this = this;\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(function (event) {\n            if (_this.isDragging()) {\n                var target = event.target;\n                var position = _this._parentPositions.get(target);\n                if (position) {\n                    var newTop = void 0;\n                    var newLeft = void 0;\n                    if (target === _this._document) {\n                        var scrollPosition = _this._viewportRuler.getViewportScrollPosition();\n                        newTop = scrollPosition.top;\n                        newLeft = scrollPosition.left;\n                    }\n                    else {\n                        newTop = target.scrollTop;\n                        newLeft = target.scrollLeft;\n                    }\n                    _this._updateAfterScroll(target, newTop, newLeft);\n                }\n            }\n            else if (_this.isReceiving()) {\n                _this._cacheParentPositions();\n            }\n        });\n    };\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    DropListRef.prototype._getShadowRoot = function () {\n        if (!this._cachedShadowRoot) {\n            var shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    };\n    return DropListRef;\n}());\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, pointerX, pointerY) {\n    var top = rect.top, right = rect.right, bottom = rect.bottom, left = rect.left, width = rect.width, height = rect.height;\n    var xThreshold = width * DROP_PROXIMITY_THRESHOLD;\n    var yThreshold = height * DROP_PROXIMITY_THRESHOLD;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (var i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    var top = clientRect.top, bottom = clientRect.bottom, left = clientRect.left, right = clientRect.right;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    var clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    var top = clientRect.top, bottom = clientRect.bottom, height = clientRect.height;\n    var yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    var left = clientRect.left, right = clientRect.right, width = clientRect.width;\n    var xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    var computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    var computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    var verticalScrollDirection = 0 /* NONE */;\n    var horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        var scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        var scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nvar activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nvar DragDropRegistry = /** @class */ (function () {\n    function DragDropRegistry(_ngZone, _document) {\n        var _this = this;\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = function (event) {\n            if (_this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    DragDropRegistry.prototype.registerDropContainer = function (drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    };\n    /** Adds a drag item instance to the registry. */\n    DragDropRegistry.prototype.registerDragItem = function (drag) {\n        var _this = this;\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(function () {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                _this._document.addEventListener('touchmove', _this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            });\n        }\n    };\n    /** Removes a drop container from the registry. */\n    DragDropRegistry.prototype.removeDropContainer = function (drop) {\n        this._dropInstances.delete(drop);\n    };\n    /** Removes a drag item instance from the registry. */\n    DragDropRegistry.prototype.removeDragItem = function (drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    };\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    DragDropRegistry.prototype.startDragging = function (drag, event) {\n        var _this = this;\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            var isTouchEvent = event.type.startsWith('touch');\n            var moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            var upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: function (e) { return _this.pointerMove.next(e); },\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: function (e) { return _this.pointerUp.next(e); },\n                options: true\n            })\n                .set('scroll', {\n                handler: function (e) { return _this.scroll.next(e); },\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular(function () {\n                _this._globalListeners.forEach(function (config, name) {\n                    _this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    };\n    /** Stops dragging a drag item instance. */\n    DragDropRegistry.prototype.stopDragging = function (drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    };\n    /** Gets whether a drag item instance is currently being dragged. */\n    DragDropRegistry.prototype.isDragging = function (drag) {\n        return this._activeDragInstances.has(drag);\n    };\n    DragDropRegistry.prototype.ngOnDestroy = function () {\n        var _this = this;\n        this._dragInstances.forEach(function (instance) { return _this.removeDragItem(instance); });\n        this._dropInstances.forEach(function (instance) { return _this.removeDropContainer(instance); });\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    };\n    /** Clears out the global event listeners from the `document`. */\n    DragDropRegistry.prototype._clearGlobalListeners = function () {\n        var _this = this;\n        this._globalListeners.forEach(function (config, name) {\n            _this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    };\n    /** @nocollapse */\n    DragDropRegistry.ctorParameters = function () { return [\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    DragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n    return DragDropRegistry;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nvar DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nvar DragDrop = /** @class */ (function () {\n    function DragDrop(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    DragDrop.prototype.createDrag = function (element, config) {\n        if (config === void 0) { config = DEFAULT_CONFIG; }\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    };\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    DragDrop.prototype.createDropList = function (element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    };\n    /** @nocollapse */\n    DragDrop.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewportRuler },\n        { type: DragDropRegistry }\n    ]; };\n    DragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n    return DragDrop;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nvar CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Handle that can be used to drag and CdkDrag instance. */\nvar CdkDragHandle = /** @class */ (function () {\n    function CdkDragHandle(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    Object.defineProperty(CdkDragHandle.prototype, \"disabled\", {\n        /** Whether starting to drag through this handle is disabled. */\n        get: function () { return this._disabled; },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._stateChanges.next(this);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkDragHandle.prototype.ngOnDestroy = function () {\n        this._stateChanges.complete();\n    };\n    /** @nocollapse */\n    CdkDragHandle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }] }\n    ]; };\n    CdkDragHandle.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n    };\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 8)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n    return CdkDragHandle;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nvar CdkDragPlaceholder = /** @class */ (function () {\n    function CdkDragPlaceholder(templateRef) {\n        this.templateRef = templateRef;\n    }\n    /** @nocollapse */\n    CdkDragPlaceholder.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPlaceholder.propDecorators = {\n        data: [{ type: Input }]\n    };\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n    return CdkDragPlaceholder;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nvar CdkDragPreview = /** @class */ (function () {\n    function CdkDragPreview(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    Object.defineProperty(CdkDragPreview.prototype, \"matchSize\", {\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        get: function () { return this._matchSize; },\n        set: function (value) { this._matchSize = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    /** @nocollapse */\n    CdkDragPreview.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\n    CdkDragPreview.propDecorators = {\n        data: [{ type: Input }],\n        matchSize: [{ type: Input }]\n    };\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n    return CdkDragPreview;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nvar CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n/**\n * @deprecated No longer being used. To be removed.\n * @breaking-change 10.0.0\n * @docs-private\n */\nfunction CDK_DRAG_CONFIG_FACTORY() {\n    return { dragStartThreshold: 5, pointerDirectionChangeThreshold: 5 };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that is used to provide a CdkDropList instance to CdkDrag.\n * Used for avoiding circular imports.\n */\nvar CDK_DROP_LIST = new InjectionToken('CDK_DROP_LIST');\n/** Element that can be moved inside a CdkDropList container. */\nvar CdkDrag = /** @class */ (function () {\n    function CdkDrag(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef) {\n        var _this = this;\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable(function (observer) {\n            var subscription = _this._dragRef.moved.pipe(map(function (movedEvent) { return ({\n                source: _this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }); })).subscribe(observer);\n            return function () {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    Object.defineProperty(CdkDrag.prototype, \"disabled\", {\n        /** Whether starting to drag this element is disabled. */\n        get: function () {\n            return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n        },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            this._dragRef.disabled = this._disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    CdkDrag.prototype.getPlaceholderElement = function () {\n        return this._dragRef.getPlaceholderElement();\n    };\n    /** Returns the root draggable element. */\n    CdkDrag.prototype.getRootElement = function () {\n        return this._dragRef.getRootElement();\n    };\n    /** Resets a standalone drag item to its initial position. */\n    CdkDrag.prototype.reset = function () {\n        this._dragRef.reset();\n    };\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    CdkDrag.prototype.getFreeDragPosition = function () {\n        return this._dragRef.getFreeDragPosition();\n    };\n    CdkDrag.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(function () {\n            _this._updateRootElement();\n            // Listen for any newly-added handles.\n            _this._handles.changes.pipe(startWith(_this._handles), \n            // Sync the new handles with the DragRef.\n            tap(function (handles) {\n                var childHandleElements = handles\n                    .filter(function (handle) { return handle._parentDrag === _this; })\n                    .map(function (handle) { return handle.element; });\n                _this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap(function (handles) {\n                return merge.apply(void 0, __spread(handles.map(function (item) {\n                    return item._stateChanges.pipe(startWith(item));\n                })));\n            }), takeUntil(_this._destroyed)).subscribe(function (handleInstance) {\n                // Enabled/disable the handle that changed in the DragRef.\n                var dragRef = _this._dragRef;\n                var handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (_this.freeDragPosition) {\n                _this._dragRef.setFreeDragPosition(_this.freeDragPosition);\n            }\n        });\n    };\n    CdkDrag.prototype.ngOnChanges = function (changes) {\n        var rootSelectorChange = changes['rootElementSelector'];\n        var positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    };\n    CdkDrag.prototype.ngOnDestroy = function () {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    };\n    /** Syncs the root element with the `DragRef`. */\n    CdkDrag.prototype._updateRootElement = function () {\n        var element = this.element.nativeElement;\n        var rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(\"cdkDrag must be attached to an element node. \" +\n                (\"Currently attached to \\\"\" + rootElement.nodeName + \"\\\".\"));\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    };\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    CdkDrag.prototype._getBoundaryElement = function () {\n        var boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        var element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    };\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    CdkDrag.prototype._syncInputs = function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe(function () {\n            if (!ref.isDragging()) {\n                var dir = _this._dir;\n                var dragStartDelay = _this.dragStartDelay;\n                var placeholder = _this._placeholderTemplate ? {\n                    template: _this._placeholderTemplate.templateRef,\n                    context: _this._placeholderTemplate.data,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                var preview = _this._previewTemplate ? {\n                    template: _this._previewTemplate.templateRef,\n                    context: _this._previewTemplate.data,\n                    matchSize: _this._previewTemplate.matchSize,\n                    viewContainer: _this._viewContainerRef\n                } : null;\n                ref.disabled = _this.disabled;\n                ref.lockAxis = _this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = _this.constrainPosition;\n                ref.previewClass = _this.previewClass;\n                ref\n                    .withBoundaryElement(_this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    };\n    /** Handles the events from the underlying `DragRef`. */\n    CdkDrag.prototype._handleEvents = function (ref) {\n        var _this = this;\n        ref.started.subscribe(function () {\n            _this.started.emit({ source: _this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(function () {\n            _this.released.emit({ source: _this });\n        });\n        ref.ended.subscribe(function (event) {\n            _this.ended.emit({ source: _this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            _this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n            _this.entered.emit({\n                container: event.container.data,\n                item: _this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(function (event) {\n            _this.exited.emit({\n                container: event.container.data,\n                item: _this\n            });\n        });\n        ref.dropped.subscribe(function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: _this,\n                distance: event.distance\n            });\n        });\n    };\n    /** Assigns the default input values based on a provided config object. */\n    CdkDrag.prototype._assignDefaults = function (config) {\n        var lockAxis = config.lockAxis, dragStartDelay = config.dragStartDelay, constrainPosition = config.constrainPosition, previewClass = config.previewClass, boundaryElement = config.boundaryElement, draggingDisabled = config.draggingDisabled, rootElementSelector = config.rootElementSelector;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    };\n    /** @nocollapse */\n    CdkDrag.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: NgZone },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: DragDrop },\n        { type: ChangeDetectorRef }\n    ]; };\n    CdkDrag.propDecorators = {\n        _handles: [{ type: ContentChildren, args: [CdkDragHandle, { descendants: true },] }],\n        _previewTemplate: [{ type: ContentChild, args: [CdkDragPreview,] }],\n        _placeholderTemplate: [{ type: ContentChild, args: [CdkDragPlaceholder,] }],\n        data: [{ type: Input, args: ['cdkDragData',] }],\n        lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n        rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n        boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n        dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n        freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n        disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n        constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n        previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n        started: [{ type: Output, args: ['cdkDragStarted',] }],\n        released: [{ type: Output, args: ['cdkDragReleased',] }],\n        ended: [{ type: Output, args: ['cdkDragEnded',] }],\n        entered: [{ type: Output, args: ['cdkDragEntered',] }],\n        exited: [{ type: Output, args: ['cdkDragExited',] }],\n        dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n        moved: [{ type: Output, args: ['cdkDragMoved',] }]\n    };\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPreview, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragPlaceholder, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CdkDragHandle, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CdkDragHandle, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPreview]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CdkDragPlaceholder]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n    return CdkDrag;\n}());\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    var currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nvar CdkDropListGroup = /** @class */ (function () {\n    function CdkDropListGroup() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    Object.defineProperty(CdkDropListGroup.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        get: function () { return this._disabled; },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkDropListGroup.prototype.ngOnDestroy = function () {\n        this._items.clear();\n    };\n    CdkDropListGroup.propDecorators = {\n        disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n    };\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup'\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n    return CdkDropListGroup;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nvar _uniqueIdCounter = 0;\nvar ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nvar CdkDropList = /** @class */ (function () {\n    function CdkDropList(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        var _this = this;\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = \"cdk-drop-list-\" + _uniqueIdCounter++;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = function () { return true; };\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = function (drag, drop) {\n            return _this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    Object.defineProperty(CdkDropList.prototype, \"disabled\", {\n        /** Whether starting a dragging sequence from this container is disabled. */\n        get: function () {\n            return this._disabled || (!!this._group && this._group.disabled);\n        },\n        set: function (value) {\n            // Usually we sync the directive and ref state right before dragging starts, in order to have\n            // a single point of failure and to avoid having to use setters for everything. `disabled` is\n            // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n            // the user in a disabled state, so we also need to sync it as it's being set.\n            this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkDropList.prototype.ngAfterContentInit = function () {\n        // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n        if (this._scrollDispatcher) {\n            var scrollableParents = this._scrollDispatcher\n                .getAncestorScrollContainers(this.element)\n                .map(function (scrollable) { return scrollable.getElementRef().nativeElement; });\n            this._dropListRef.withScrollableParents(scrollableParents);\n        }\n    };\n    /** Registers an items with the drop list. */\n    CdkDropList.prototype.addItem = function (item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    };\n    /** Removes an item from the drop list. */\n    CdkDropList.prototype.removeItem = function (item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    };\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    CdkDropList.prototype.getSortedItems = function () {\n        return Array.from(this._unsortedItems).sort(function (a, b) {\n            var documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    };\n    CdkDropList.prototype.ngOnDestroy = function () {\n        var index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Starts dragging an item.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     */\n    CdkDropList.prototype.start = function () {\n        this._dropListRef.start();\n    };\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     *\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     */\n    CdkDropList.prototype.drop = function (item, currentIndex, previousContainer, isPointerOverContainer) {\n        this._dropListRef.drop(item._dragRef, currentIndex, previousContainer._dropListRef, isPointerOverContainer, { x: 0, y: 0 });\n    };\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     */\n    CdkDropList.prototype.enter = function (item, pointerX, pointerY) {\n        this._dropListRef.enter(item._dragRef, pointerX, pointerY);\n    };\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     */\n    CdkDropList.prototype.exit = function (item) {\n        this._dropListRef.exit(item._dragRef);\n    };\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 10.0.0\n     */\n    CdkDropList.prototype.getItemIndex = function (item) {\n        return this._dropListRef.getItemIndex(item._dragRef);\n    };\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    CdkDropList.prototype._setupInputSyncSubscription = function (ref) {\n        var _this = this;\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(function (value) { return ref.withDirection(value); });\n        }\n        ref.beforeStarted.subscribe(function () {\n            var siblings = coerceArray(_this.connectedTo).map(function (drop) {\n                return typeof drop === 'string' ?\n                    CdkDropList._dropLists.find(function (list) { return list.id === drop; }) : drop;\n            });\n            if (_this._group) {\n                _this._group._items.forEach(function (drop) {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            ref.disabled = _this.disabled;\n            ref.lockAxis = _this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(_this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(_this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(function (drop) { return drop && drop !== _this; }).map(function (list) { return list._dropListRef; }))\n                .withOrientation(_this.orientation);\n        });\n    };\n    /** Handles events from the underlying DropListRef. */\n    CdkDropList.prototype._handleEvents = function (ref) {\n        var _this = this;\n        ref.beforeStarted.subscribe(function () {\n            _this._syncItemsWithRef();\n            _this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(function (event) {\n            _this.entered.emit({\n                container: _this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(function (event) {\n            _this.exited.emit({\n                container: _this,\n                item: event.item.data\n            });\n            _this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(function (event) {\n            _this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: _this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(function (event) {\n            _this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            _this._changeDetectorRef.markForCheck();\n        });\n    };\n    /** Assigns the default input values based on a provided config object. */\n    CdkDropList.prototype._assignDefaults = function (config) {\n        var lockAxis = config.lockAxis, draggingDisabled = config.draggingDisabled, sortingDisabled = config.sortingDisabled, listAutoScrollDisabled = config.listAutoScrollDisabled, listOrientation = config.listOrientation;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    };\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    CdkDropList.prototype._syncItemsWithRef = function () {\n        this._dropListRef.withItems(this.getSortedItems().map(function (item) { return item._dragRef; }));\n    };\n    /** Keeps track of the drop lists that are currently on the page. */\n    CdkDropList._dropLists = [];\n    /** @nocollapse */\n    CdkDropList.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: DragDrop },\n        { type: ChangeDetectorRef },\n        { type: Directionality, decorators: [{ type: Optional }] },\n        { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ScrollDispatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n    ]; };\n    CdkDropList.propDecorators = {\n        connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n        data: [{ type: Input, args: ['cdkDropListData',] }],\n        orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n        id: [{ type: Input }],\n        lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n        disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n        sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n        enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n        autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n        dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n        entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n        exited: [{ type: Output, args: ['cdkDropListExited',] }],\n        sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n    };\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CdkDropListGroup, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CdkDropListGroup, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CdkDropListGroup, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc1.ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n    return CdkDropList;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar DragDropModule = /** @class */ (function () {\n    function DragDropModule() {\n    }\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder], exports: [CdkDropList,\n        CdkDropListGroup,\n        CdkDrag,\n        CdkDragHandle,\n        CdkDragPreview,\n        CdkDragPlaceholder] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], function () { return []; }, null); })();\n    return DragDropModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_CONFIG_FACTORY, CDK_DROP_LIST, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_b };\n\n//# sourceMappingURL=drag-drop.js.map"],"sourceRoot":"webpack:///"}