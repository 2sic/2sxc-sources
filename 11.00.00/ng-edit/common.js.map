{"version":3,"sources":["./src/app/content-export/content-export-dialog.config.ts","./src/app/content-export/content-export-routing.module.ts","./src/app/content-export/content-export.module.ts","./src/app/content-type-fields/services/content-types-fields.service.ts","./src/app/content-type-fields/content-type-fields.helpers.ts","./src/app/content-items/content-items-dialog.config.ts","./src/app/content-items/ag-grid-components/content-item-import/content-item-import-dialog.config.ts","./src/app/content-items/content-items-routing.module.ts","./src/app/content-items/content-items.module.ts","./src/app/content-items/services/entities.service.ts","./src/app/shared/components/id-field/id-field.component.ts","./src/app/shared/helpers/copyToClipboard.ts","./src/app/shared/components/id-field/id-field.component.html","./src/app/manage-content-list/services/content-group.service.ts","./src/app/permissions/services/permissions.service.ts","./src/app/app-administration/shared/constants/content-type.ts","./src/app/permissions/permissions-dialog.config.ts","./src/app/permissions/permissions-routing.module.ts","./src/app/permissions/permissions.module.ts","./src/app/content-type-fields/content-type-fields-dialog.config.ts","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./src/app/content-type-fields/content-type-fields-routing.module.ts","./src/app/content-type-fields/content-type-fields.module.ts","./src/app/permissions/services/metadata.service.ts","./src/app/shared/constants/eav-constants.ts"],"names":["contentExportDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentExportRoutingModule","forChild","ContentExportModule","http","context","dnnContext","typeListRetrieve","this","get","$2sxc","apiUrl","params","appid","appId","toString","getInputTypesList","pipe","inputConfigs","map","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","getFields","contentType","staticName","StaticName","fields","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","reOrder","idArray","contentTypeId","Id","newSortOrder","JSON","stringify","setTitle","item","attributeId","rename","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","SortOrder","updateInputType","id","field","ContentTypesFieldsService","calculateTypeIcon","typeName","contentItemsDialog","contentItemImportDialog","children","loadChildren","then","m","matcher","EditModule","ContentItemsRoutingModule","ContentItemsModule","withComponents","type","tryForce","force","EntitiesService","snackBar","agInit","tooltip","value","Code","refresh","copy","str","el","document","createElement","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","copyToClipboard","open","duration","IdFieldComponent","getItems","guid","part","index","saveItem","post","entityId","getList","contentGroup","saveList","resortedList","getHeader","ContentGroupService","metadataService","entitiesService","getAll","targetType","keyType","key","getMetadata","contentTypes","permissions","PermissionsService","contentTypeNamePattern","contentTypeNameError","permissionsDialog","PermissionsRoutingModule","PermissionsModule","contentTypeFieldsDialog","editContentTypeFieldsDialog","ContentTypeFieldsRoutingModule","ContentTypeFieldsModule","typeId","contentTypeName","MetadataService","eavConstants","metadata","attribute","target","app","entity","zone","cmsObject","keyTypes","string","number","scopes","default","cmsSystem","system","template","query","settings","resources","pipelineDesigner","testParameters"],"mappings":"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","file":"common.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from '../app-administration/shared/services/content-export.service';\r\nimport { Context } from '../shared/services/context';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { ContentType } from '../../app-administration/shared/models/content-type.model';\r\nimport { Field, FieldInputTypeConfig, FieldInputTypeOption } from '../models/field.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/datatypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/inputtypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map((inputConfigs: FieldInputTypeConfig[]) => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      ) as Observable<FieldInputTypeOption[]>;\r\n  }\r\n\r\n  getFields(contentType: ContentType): Observable<Field[]> {\r\n    return this.http\r\n      .get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/getfields'), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map((fields: Field[]) => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      ) as Observable<Field[]>;\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/reorder'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        newSortOrder: JSON.stringify(idArray),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/setTitle'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  rename(item: Field, contentType: ContentType, newName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/rename'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n        newName,\r\n      },\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/deletefield'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/addfield'), {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        SortOrder: newField.SortOrder.toString(),\r\n      }\r\n    }) as Observable<number>;\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/updateinputtype'), {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    }) as Observable<boolean>;\r\n  }\r\n}\r\n","export function calculateTypeIcon(typeName: string): string {\r\n  switch (typeName) {\r\n    case 'String':\r\n      return 'text_fields';\r\n    case 'Entity':\r\n      return 'share';\r\n    case 'Boolean':\r\n      return 'toggle_on';\r\n    case 'Number':\r\n      return 'dialpad';\r\n    case 'Custom':\r\n      return 'extension';\r\n    case 'DateTime':\r\n      return 'today';\r\n    case 'Hyperlink':\r\n      return 'link';\r\n    case 'Empty':\r\n      return 'crop_free';\r\n    default:\r\n      return 'device_unknown';\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentItemsDialog: DialogConfig = {\r\n  name: 'CONTENT_ITEMS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemsComponent } = await import('./content-items.component');\r\n    return ContentItemsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const contentItemImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_ITEM_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemImportComponent } = await import('./content-item-import.component');\r\n    return ContentItemImportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentItemsDialog } from './content-items-dialog.config';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { contentItemImportDialog } from './ag-grid-components/content-item-import/content-item-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentItemsDialog }, children: [\r\n      {\r\n        path: 'export/:contentTypeStaticName',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      {\r\n        path: 'export/:contentTypeStaticName/:selectedIds',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      { path: 'import', component: DialogEntryComponent, data: { dialog: contentItemImportDialog } },\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentItemsRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial';\r\n\r\nimport { ContentItemsRoutingModule } from './content-items-routing.module';\r\nimport { ContentItemsComponent } from './content-items.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemImportComponent } from './ag-grid-components/content-item-import/content-item-import.component';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\nimport { ContentExportService } from '../app-administration/shared/services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentItemsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatTooltipModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatProgressSpinnerModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    EcoFabSpeedDialModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentItemsService,\r\n    EntitiesService,\r\n    ContentExportService,\r\n  ]\r\n})\r\nexport class ContentItemsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/entities/delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    }) as Observable<null>;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { copyToClipboard } from '../../helpers/copyToClipboard';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss']\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  private params: ICellRendererParams;\r\n  tooltip: string;\r\n  id: number;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.params = params;\r\n    this.tooltip = this.params.value;\r\n    const data: any = this.params.data;\r\n    if (data.Id !== undefined && data.Id !== null) {\r\n      this.id = data.Id;\r\n    } else if (data.id !== undefined && data.id !== null) {\r\n      this.id = data.id;\r\n    } else if (data.Code !== undefined && data.Code !== null) {\r\n      this.id = data.Code;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" matTooltip=\"{{ tooltip }}\" (click)=\"copy()\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentGroup } from '../models/content-group.model';\r\nimport { ReplaceConfig } from '../../replace-content/models/replace-config.model';\r\nimport { GroupHeader } from '../models/group-header.model';\r\n\r\n@Injectable()\r\nexport class ContentGroupService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getItems(item: ContentGroup) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/contentgroup/replace'), {\r\n      params: { appId: this.context.appId.toString(), guid: item.guid, part: item.part, index: item.index.toString() }\r\n    }) as Observable<ReplaceConfig>;\r\n  }\r\n\r\n  saveItem(item: ContentGroup) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/contentgroup/replace'), {}, {\r\n      params: { guid: item.guid, part: item.part, index: item.index.toString(), entityId: item.id.toString() }\r\n    }) as Observable<null>;\r\n  }\r\n\r\n  getList(contentGroup: ContentGroup) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/contentgroup/itemlist'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    }) as Observable<GroupHeader[]>;\r\n  }\r\n\r\n  saveList(contentGroup: ContentGroup, resortedList: GroupHeader[]) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/contentgroup/itemlist'), resortedList, {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  getHeader(contentGroup: ContentGroup) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/contentgroup/header'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    }) as Observable<GroupHeader>;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\n\r\nimport { MetadataService } from './metadata.service';\r\nimport { EntitiesService } from '../../content-items/services/entities.service';\r\nimport { Permission } from '../models/permission.model';\r\nimport { eavConstants } from '../../shared/constants/eav-constants';\r\n\r\n@Injectable()\r\nexport class PermissionsService {\r\n  constructor(private metadataService: MetadataService, private entitiesService: EntitiesService) { }\r\n\r\n  getAll(targetType: number, keyType: string, key: string) {\r\n    return this.metadataService.getMetadata(targetType, keyType, key, eavConstants.contentTypes.permissions) as Observable<Permission[]>;\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.entitiesService.delete(eavConstants.contentTypes.permissions, id, false) as Observable<null>;\r\n  }\r\n}\r\n","export const contentTypeNamePattern = /^[A-Za-z](?:[A-Za-z0-9]+)*$/;\r\nexport const contentTypeNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const permissionsDialog: DialogConfig = {\r\n  name: 'SET_PERMISSIONS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { PermissionsComponent } = await import('./permissions.component');\r\n    return PermissionsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { permissionsDialog } from './permissions-dialog.config';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: permissionsDialog }, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class PermissionsRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\n\r\nimport { PermissionsRoutingModule } from './permissions-routing.module';\r\nimport { PermissionsComponent } from './permissions.component';\r\nimport { PermissionsActionsComponent } from './ag-grid-components/permissions-actions/permissions-actions.component';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { PermissionsService } from './services/permissions.service';\r\nimport { MetadataService } from './services/metadata.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    PermissionsComponent,\r\n    PermissionsActionsComponent,\r\n  ],\r\n  entryComponents: [\r\n    PermissionsComponent,\r\n    PermissionsActionsComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    PermissionsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    AgGridModule.withComponents([]),\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    PermissionsService,\r\n    MetadataService,\r\n    EntitiesService,\r\n  ]\r\n})\r\nexport class PermissionsModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      { path: 'update/:contentTypeStaticName/:id', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      {\r\n        path: 'permissions/:type/:keyType/:key',\r\n        loadChildren: () => import('../permissions/permissions.module').then(m => m.PermissionsModule)\r\n      },\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { AgGridModule } from '@ag-grid-community/angular';\r\n\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypesService } from '../app-administration/shared/services/content-types.service';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class MetadataService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Fetches metadata for given key in metadata content type\r\n   * @param typeId metadataOf something. For more info checkout out eavConstants file\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of content type for which we search for permissions. Key is connected with keyType\r\n   * @param contentTypeName name of content type where permissions are stored\r\n   */\r\n  getMetadata(typeId: number, keyType: string, key: string, contentTypeName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/metadata/get'), {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        targetType: typeId.toString(),\r\n        keyType,\r\n        key,\r\n        contentType: contentTypeName,\r\n      },\r\n    });\r\n  }\r\n}\r\n","export type EavMetadataKey = 'attribute' | 'app' | 'entity' | 'contentType' | 'zone' | 'cmsObject';\r\nexport type EavKeyTypeKey = 'guid' | 'string' | 'number';\r\nexport type EavScopesKey = 'default' | 'app' | 'cmsSystem' | 'system';\r\nexport interface EavScopeOption { name: string; value: string; }\r\n\r\nexport const eavConstants = {\r\n  metadata: {\r\n    /** metadataOfAttribute */\r\n    attribute: { type: 2, target: 'EAV Field Properties' },\r\n    /** metadataOfApp */\r\n    app: { type: 3, target: 'App' },\r\n    /** metadataOfEntity */\r\n    entity: { type: 4, target: 'Entity' },\r\n    /** metadataOfContentType */\r\n    contentType: { type: 5, target: 'ContentType' },\r\n    /** metadataOfZone */\r\n    zone: { type: 6, target: 'Zone' },\r\n    /** metadataOfCmsObject */\r\n    cmsObject: { type: 10, target: 'CmsObject' },\r\n  },\r\n\r\n  /** Loopup type for the metadata, e.g. key=80adb152-efad-4aa4-855e-74c5ef230e1f is keyType=guid */\r\n  keyTypes: {\r\n    guid: 'guid',\r\n    string: 'string',\r\n    number: 'number',\r\n  },\r\n\r\n  /** Scopes */\r\n  scopes: {\r\n    /** This is the main schema and the data you usually see is from here */\r\n    default: { name: 'Default', value: '2SexyContent' },\r\n    /** This contains content-types for configuration, settings and resources of the app */\r\n    app: { name: 'App', value: '2SexyContent-App' },\r\n    /** This contains view-definitions, content-types etc. */\r\n    cmsSystem: { name: 'CMS System', value: '2SexyContent-System' },\r\n    /** This contains core EAV data like input-field configurations and similar */\r\n    system: { name: 'System', value: 'System' },\r\n  },\r\n\r\n  /** Content types where templates, permissions, etc. are stored */\r\n  contentTypes: {\r\n    /** Content type containing app templates (views) */\r\n    template: '2SexyContent-Template',\r\n    /** Content type containing permissions */\r\n    permissions: 'PermissionConfiguration',\r\n    /** Content type containing queries */\r\n    query: 'DataPipeline',\r\n    /** Content type containing content type metadata (app administration > data > metadata) */\r\n    contentType: 'ContentType',\r\n    /** Content type containing app settings */\r\n    settings: 'App-Settings',\r\n    /** Content type containing app resources */\r\n    resources: 'App-Resources',\r\n  },\r\n\r\n  pipelineDesigner: {\r\n    testParameters: '[Demo:Demo]=true',\r\n  },\r\n};\r\n"],"sourceRoot":"webpack:///"}