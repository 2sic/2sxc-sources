{"version":3,"sources":["./src/app/content-items/services/content-items.service.ts","./src/app/shared/helpers/fileToBase64.helper.ts","./src/app/app-administration/shared/services/content-export.service.ts"],"names":["http","context","dnnContext","getAll","contentTypeStaticName","this","get","$2sxc","apiUrl","params","appId","toString","contentType","getColumns","staticName","importItem","file","post","AppId","ContentBase64","ContentItemsService","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","exportContent","values","selectedIds","selectedIdsString","join","url","language","defaultLanguage","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","ContentExportService"],"mappings":"4MAUA,aAEE,WAAoBA,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAExE,YAAAC,OAAA,SAAOC,GACL,OAAOC,KAAKL,KAAKM,IAAID,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,qCAAsC,CAC3FC,OAAQ,CAAEC,MAAOL,KAAKJ,QAAQS,MAAMC,WAAYC,YAAaR,MAIjE,YAAAS,WAAA,SAAWT,GACT,OAAOC,KAAKL,KAAKM,IAAID,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,6BAA8B,CACnFC,OAAQ,CAAEC,MAAOL,KAAKJ,QAAQS,MAAMC,WAAYG,WAAYV,MAI1D,YAAAW,WAAN,SAAiBC,G,0HAGE,OAFV,KAAAX,KAAKL,MAAKiB,K,GAAKZ,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,6B,GACtDU,MAAOb,KAAKJ,QAAQS,MAAMC,YACX,GAAM,YAASK,I,OAFhC,MAAO,CAAP,EAAO,qBAEL,EAAAG,cAAe,S,qDAlBRC,GAAmB,gC,yBAAnBA,EAAmB,QAAnBA,EAAmB,Y,EADhC,I,oCCVO,SAASC,EAASL,GACvB,OAAO,IAAIM,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcX,GACrBS,EAAOG,OAAS,WAAM,OAAAL,EAASE,EAAOI,OAAkBC,MAAM,KAAK,KACnEL,EAAOM,QAAU,SAAAC,GAAS,OAAAR,EAAOQ,OALrC,mC,4GCMA,aAEE,WAAoB/B,EAA0BC,GAA1B,KAAAD,UAA0B,KAAAC,a,OAE9C,YAAA+B,cAAA,SAAcC,EAAuBC,GACnC,IAAMC,EAAoBD,EAAc,gBAAkBA,EAAYE,OAAS,GACzEC,EAAMjC,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,mCAC1C,UAAYH,KAAKJ,QAAQS,MACzB,aAAewB,EAAOK,SACtB,oBAAsBL,EAAOM,gBAC7B,gBAAkBN,EAAO9B,sBACzB,iBAAmB8B,EAAOO,aAC1B,wBAA0BP,EAAOQ,oBACjC,uBAAyBR,EAAOS,mBAChCP,EAEJQ,OAAOC,KAAKP,EAAK,SAAU,KAG7B,YAAAQ,WAAA,SAAWC,GACT,IAAMT,EAAMjC,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,wCAC1C,UAAYH,KAAKJ,QAAQS,MACzB,SAAWqC,EAEfH,OAAOC,KAAKP,EAAK,SAAU,KAG7B,YAAAU,aAAA,SAAaC,EAAYC,EAAgBC,GACvC,IAAMb,EAAMjC,KAAKH,WAAWK,MAAMP,KAAKQ,OAAO,0CAC1C,UAAYH,KAAKJ,QAAQS,MACzB,OAASuC,EACT,WAAaC,EACb,iBAAmBC,EAEvBP,OAAOC,KAAKP,EAAK,SAAU,K,sCAjClBc,GAAoB,sB,yBAApBA,EAAoB,QAApBA,EAAoB,Y,EADjC","file":"24.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { toBase64 } from '../../shared/helpers/fileToBase64.helper';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/entities/GetAllOfTypeForAdmin'), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    }) as Observable<ContentItem[]>;\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/getfields'), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    }) as Observable<Field[]>;\r\n  }\r\n\r\n  async importItem(file: File) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('eav/contentimport/import'), {\r\n      AppId: this.context.appId.toString(),\r\n      ContentBase64: await toBase64(file),\r\n    }) as Observable<boolean>;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve((reader.result as string).split(',')[1]);\r\n    reader.onerror = error => reject(error);\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { ContentExport } from '../models/content-export.model';\r\nimport { Context } from '../../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl('eav/ContentExport/ExportContent')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl('eav/ContentExport/DownloadTypeAsJson')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl('eav/ContentExport/DownloadEntityAsJson')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}