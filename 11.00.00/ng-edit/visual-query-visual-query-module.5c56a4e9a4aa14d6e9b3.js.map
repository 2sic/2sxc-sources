{"version":3,"sources":["./src/app/visual-query/services/query-definition.service.ts","./src/app/visual-query/services/plumb-gui.service.ts","./src/app/visual-query/run-explorer/run-explorer.component.html","./src/app/visual-query/run-explorer/run-explorer.component.ts","./src/app/visual-query/run-explorer/run-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.component.html","./src/app/visual-query/add-explorer/add-explorer.component.ts","./src/app/visual-query/plumb-editor/plumb-editor.component.html","./src/app/visual-query/plumb-editor/plumb-editor.component.ts","./src/app/visual-query/visual-query.component.html","./src/app/visual-query/visual-query-routing.module.ts","./src/app/visual-query/visual-query.component.ts","./src/app/visual-query/visual-query.module.ts"],"names":["http","context","dnnContext","loadQuery","pipelineEntityId","this","get","$2sxc","apiUrl","params","appId","toString","id","toPromise","model","InstalledDataSources","Pipeline","AllowEdit","push","PartAssemblyAndType","outDs","pipelineDesigner","outDataSource","className","Name","name","In","in","Out","allowNew","PrimaryType","DynamicOut","Difficulty","postProcessDataSources","queryDef","data","readOnly","DataSources","length","loadQueryFromDefaultTemplate","dataSourceIsPersisted","dataSource","EntityGuid","indexOf","find","d","Description","description","VisualDesignerData","visualDesignerData","ReadOnly","Definition","getDataSourceDefinitionProperty","Top","Left","definition","filter","Error","templateForNew","defaultPipeline","dataSources","addDataSource","partAssemblyAndType","entityGuid","StreamWiring","streamWiring","newDataSource","typeNameFilter","dsCount","Object","assign","getNewDataSource","input","format","globalParts","match","classFullName","dataSourceBase","dsTypeInfo","cacheKey","_typeInfos","typeInfo","found","ids","guiTypes","buildGuiTypes","def","primType","Unknown","Icon","icon","iconPrefix","dynamicOut","HelpLink","helpLink","EnableConfig","config","addGuiType","notes","save","dataSourcesPrepared","forEach","dataSourceClone","cloneDeep","pipeline","post","Id","EntityId","queryPipeline","QueryDefinitionService","linePaintDefault","lineWidth","strokeStyle","joinstyle","outlineColor","outlineWidth","lineCount","lineColors","uuidColorMap","maxCols","nextLinePaintStyle","uuid","instanceTemplate","Connector","curviness","HoverPaintStyle","PaintStyle","Container","connectionsInitialized","buildInstance","instance","jsPlumb","getInstance","bind","info","dataSrcIdPrefix","targetId","fixedEndpoints","findDataSourceOfElement","target","label","targetEndpoint","getOverlay","setTimeout","deleteEndpoint","targetEndpointHavingSameLabel","endpointLabel","labelPrompt","getLabel","getEndpoints","endpoint","canvas","classList","contains","setLabel","Math","floor","random","element","guid","fixElementNodeList","attributes","value","el","initWirings","wire","sourceElementId","From","fromUuid","targetElementId","To","toUuid","getEndpoint","addEndpoint","getSelector","connect","uuids","paintStyle","e","console","error","message","from","to","isIn","enabled","buildTargetEndpoint","buildSourceEndpoint","selector","fillStyle","radius","cssClass","maxConnections","isSource","anchor","faces","overlays","getEndpointOverlays","isTarget","dropOptions","hoverClass","activeClass","readOnlyMode","location","events","dblclick","labelOverlay","newLabel","prompt","makeSource","dragHandler","batch","draggable","grid","drag","dataSourceDefinition","targetEndpointUnlimited","makeTarget","pushPlumbConfigToQueryDef","connectionInfos","getAllConnections","connection","sourceId","substr","endpoints","streamsOut","selectEndpoints","each","StreamsOut","join","putEntityCountOnConnection","result","Streams","stream","Target","TargetIn","sEndp","Source","SourceOut","connections","getUuid","Count","NodeList","PlumbGuiService","editPipelineEntity","saveAndRun","repaint","ngOnInit","ngOnChanges","changes","currentValue","warnings","pipelineData","testMid","exec","TestParameters","urlMid","moduleId","calculateWarnings","editPipeline","emit","openParamsHelp","window","open","saveAndRunQuery","run","doRepaint","RunExplorerComponent","filterAndSortDataSources","maxDifficulty","filtered","sort","a","b","toLocaleLowerCase","localeCompare","sorted","type","addSelectedDataSource","difficulty","default","advanced","activeDiff","toggledItems","onDifficultyChanged","event","checked","toggleItem","item","array","index","splice","toggleInArray","AddExplorerComponent","queryDefinitionService","plumbGuiService","zone","editDataSourcePart","instanceChanged","eventListeners","attachListeners","stopKeyboardSave","detachListeners","ngOnDestroy","ngAfterViewInit","ready","jsPlumbReady","dataSourceElements","subscribe","t","reset","dsEl","nativeElement","makeDataSource","repaintEverything","draggedWrapper","dataSourceDrag","offset","getElementOffset","round","top","left","configureDataSource","remove","confirm","editName","newName","trim","editDescription","newDescription","de","document","documentElement","box","getBoundingClientRect","pageYOffset","clientTop","pageXOffset","clientLeft","runOutsideAngular","keyboardSave","addEventListener","listener","removeEventListener","keyCode","navigator","platform","metaKey","ctrlKey","preventDefault","PlumbEditorComponent","routes","path","component","router","route","titleService","snackBar","metadataService","contentTypesService","explorer","add","subscription","Subscription","init","hasChild","snapshot","firstChild","pipelineId","paramMap","parseInt","refreshOnChildClosed","unsubscribe","toggleExplorer","activeExplorer","openHelp","savePipeline","callback","next","success","duration","newQueryDef","navigateByUrl","url","replace","reason","sourceDef","source","contentTypeName","ContentType","keyGuid","getMetadata","metadata","entity","keyTypes","form","items","navigate","JSON","stringify","relativeTo","getDetails","ignoreErrors","res","ContentTypeName","For","Guid","alert","runQuery","warn","then","setTitle","pipe","hadChild","VisualQueryComponent","children","matcher","loadChildren","m","EditModule","VisualQueryRoutingModule","forChild","VisualQueryModule"],"mappings":"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","file":"visual-query-visual-query-module.5c56a4e9a4aa14d6e9b3.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Observable } from 'rxjs';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { eavConstants } from '../../shared/constants/eav-constants';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  async loadQuery(pipelineEntityId: number): Promise<any> {\r\n    const model: any = await this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/GetPipeline'), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).toPromise();\r\n\r\n    model.InstalledDataSources = await this.http.get(\r\n      this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/GetInstalledDataSources')\r\n    ).toPromise();\r\n\r\n    // Init new Pipeline Object\r\n    if (!pipelineEntityId) {\r\n      model.Pipeline = {\r\n        AllowEdit: 'True',\r\n      };\r\n    }\r\n\r\n    const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n    // Add Out-DataSource for the UI\r\n    model.InstalledDataSources.push({\r\n      PartAssemblyAndType: outDs.className,\r\n      Name: outDs.name || outDs.className,\r\n      In: outDs.in,\r\n      Out: null,\r\n      allowNew: false,\r\n      PrimaryType: 'Target',\r\n      DynamicOut: false,\r\n      Difficulty: 100,\r\n    });\r\n\r\n    this.postProcessDataSources(model);\r\n\r\n    const queryDef = {\r\n      id: pipelineEntityId,\r\n      data: model,\r\n      readOnly: false,\r\n    };\r\n\r\n    // If a new (empty) Pipeline is made, init new Pipeline\r\n    if (!queryDef.id || queryDef.data.DataSources.length === 1) {\r\n      queryDef.readOnly = false;\r\n      this.loadQueryFromDefaultTemplate(queryDef);\r\n    } else {\r\n      // if read only, show message\r\n      queryDef.readOnly = !model.Pipeline.AllowEdit;\r\n    }\r\n\r\n    return queryDef;\r\n  }\r\n\r\n  // Test wether a DataSource is persisted on the Server\r\n  dataSourceIsPersisted(dataSource: any) {\r\n    return dataSource.EntityGuid.indexOf('unsaved') === -1;\r\n  }\r\n\r\n  // Extend Pipeline-Model retrieved from the Server\r\n  postProcessDataSources(model: any) {\r\n    // stop Post-Process if the model already contains the Out-DataSource\r\n    if (model.DataSources.find((d: any) => d.EntityGuid === 'Out')) { return; }\r\n\r\n    const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n    // Append Out-DataSource for the UI\r\n    model.DataSources.push({\r\n      Name: outDs.name,\r\n      Description: outDs.description,\r\n      EntityGuid: 'Out',\r\n      PartAssemblyAndType: outDs.className,\r\n      VisualDesignerData: outDs.visualDesignerData,\r\n      ReadOnly: true,\r\n      Difficulty: 100\r\n    });\r\n\r\n    // Extend each DataSource with Definition-Property and ReadOnly Status\r\n    for (const dataSource of model.DataSources) {\r\n      dataSource.Definition = () => this.getDataSourceDefinitionProperty(model, dataSource);\r\n      dataSource.ReadOnly = dataSource.ReadOnly || !model.Pipeline.AllowEdit;\r\n      // in case server returns null, use a default setting\r\n      dataSource.VisualDesignerData = dataSource.VisualDesignerData || { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  // Get the Definition of a DataSource\r\n  private getDataSourceDefinitionProperty(model: any, dataSource: any) {\r\n    const definition = model.InstalledDataSources.filter((d: any) => d.PartAssemblyAndType === dataSource.PartAssemblyAndType)[0];\r\n    if (!definition) {\r\n      throw new Error(`DataSource Definition not found: ${dataSource.PartAssemblyAndType}`);\r\n    }\r\n    return definition;\r\n  }\r\n\r\n  // Init a new Pipeline with DataSources and Wirings from Configuration\r\n  private loadQueryFromDefaultTemplate(queryDef: any) {\r\n    const templateForNew = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const dataSource of templateForNew) {\r\n      this.addDataSource(queryDef, dataSource.partAssemblyAndType, dataSource.visualDesignerData, dataSource.entityGuid, null);\r\n    }\r\n\r\n    // attach template wiring\r\n    queryDef.data.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  addDataSource(queryDef: any, partAssemblyAndType: any, visualDesignerData: any, entityGuid: any, name: any) {\r\n    if (!visualDesignerData) {\r\n      visualDesignerData = { Top: 100, Left: 100 };\r\n    }\r\n\r\n    let newDataSource = {\r\n      VisualDesignerData: visualDesignerData,\r\n      Name: name || this.typeNameFilter(partAssemblyAndType, 'className'),\r\n      Description: '',\r\n      PartAssemblyAndType: partAssemblyAndType,\r\n      EntityGuid: entityGuid || 'unsaved' + (queryDef.dsCount + 1)\r\n    };\r\n    // Extend it with a Property to it's Definition\r\n    newDataSource = Object.assign(newDataSource, this.getNewDataSource(queryDef.data, newDataSource));\r\n\r\n    queryDef.data.DataSources.push(newDataSource);\r\n  }\r\n\r\n  typeNameFilter(input: any, format: any) {\r\n    const globalParts = input.match(/[^,\\s]+/g);\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        if (globalParts) {\r\n          return globalParts[0];\r\n        }\r\n        break;\r\n      case 'className':\r\n        if (globalParts) {\r\n          const classFullName = globalParts[0].match(/[^\\.]+/g);\r\n          return classFullName[classFullName.length - 1];\r\n        }\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  // Get a JSON for a DataSource with Definition-Property\r\n  private getNewDataSource(model: any, dataSourceBase: any) {\r\n    return {\r\n      Definition: () => this.getDataSourceDefinitionProperty(model, dataSourceBase)\r\n    };\r\n  }\r\n\r\n  dsTypeInfo(dataSource: any, queryDef: any) {\r\n    // maybe we already retrieved it before...\r\n    const cacheKey = dataSource.EntityGuid;\r\n    if (!queryDef._typeInfos) { queryDef._typeInfos = {}; }\r\n    if (queryDef._typeInfos[cacheKey]) { return queryDef._typeInfos[cacheKey]; }\r\n\r\n    let typeInfo = null;\r\n    // try to find the type on the source\r\n    const found = queryDef.data.InstalledDataSources.find((ids: any) => ids.PartAssemblyAndType === dataSource.PartAssemblyAndType);\r\n    const guiTypes = this.buildGuiTypes();\r\n    if (found) {\r\n      const def = found;\r\n      const primType = def.PrimaryType;\r\n      typeInfo = Object.assign({}, primType ? guiTypes[primType] : guiTypes.Unknown);\r\n      if (def.Icon) { typeInfo.icon = guiTypes.iconPrefix + def.Icon; }\r\n      if (def.DynamicOut) { typeInfo.dynamicOut = true; }\r\n      if (def.HelpLink) { typeInfo.helpLink = def.HelpLink; }\r\n      if (def.EnableConfig) { typeInfo.config = def.EnableConfig; }\r\n    }\r\n    if (!typeInfo) { typeInfo = guiTypes.Unknown; }\r\n\r\n    queryDef._typeInfos[cacheKey] = typeInfo;\r\n    return typeInfo;\r\n  }\r\n\r\n  private buildGuiTypes() {\r\n    const guiTypes: { [key: string]: any } = {\r\n      iconPrefix: ''\r\n    };\r\n\r\n    function addGuiType(name: any, icon: any, notes: any) {\r\n      guiTypes[name] = {\r\n        name,\r\n        icon: guiTypes.iconPrefix + icon,\r\n        notes\r\n      };\r\n    }\r\n\r\n    addGuiType('Unknown', 'fiber_manual_record', 'unknown type');\r\n    addGuiType('Cache', 'history', 'caching of data');\r\n    addGuiType('Filter', 'filter_list', 'filter data - usually returning less items than came in');\r\n    addGuiType('Logic', 'share', 'logic operations - usually choosing between different streams');\r\n    addGuiType('Lookup', 'search', 'lookup operation - usually looking for other data based on a criteria');\r\n    addGuiType('Modify', 'star_half', 'modify data - usually changing, adding or removing values'); // todo\r\n    addGuiType('Security', 'account_circle', 'security - usually limit what the user sees based on his identity');\r\n    addGuiType('Sort', 'sort', 'sort the items');\r\n    addGuiType('Source', 'cloud_upload', 'source of new data - usually SQL, CSV or similar');\r\n    addGuiType('Target', 'adjust', 'target - usually just a destination of data');\r\n\r\n    return guiTypes;\r\n  }\r\n\r\n  // save the current query and reload entire definition as returned from server\r\n  save(queryDef: any) {\r\n    // Remove some Properties from the DataSource before Saving\r\n    const dataSourcesPrepared: any[] = [];\r\n    queryDef.data.DataSources.forEach((dataSource: any) => {\r\n      const dataSourceClone = cloneDeep(dataSource);\r\n      delete dataSourceClone.ReadOnly;\r\n      dataSourcesPrepared.push(dataSourceClone);\r\n    });\r\n\r\n    const pipeline = queryDef.data.Pipeline;\r\n    return this.http.post(\r\n      this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/SavePipeline'),\r\n      { pipeline, dataSources: dataSourcesPrepared },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId } }\r\n    ) as Observable<any>;\r\n  }\r\n\r\n  queryPipeline(id: number) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/QueryPipeline'), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString() }\r\n    }) as Observable<any>;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\ndeclare const jsPlumb: any;\r\n\r\nconst linePaintDefault = {\r\n  lineWidth: 4,\r\n  strokeStyle: '#61B7CF',\r\n  joinstyle: 'round',\r\n  outlineColor: 'white',\r\n  outlineWidth: 2\r\n};\r\nlet lineCount = 0;\r\nconst lineColors = [\r\n  '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n  '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n  '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n  '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n  '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n  '#76608a', '#a0522d'\r\n];\r\nconst uuidColorMap: any = {};\r\nconst maxCols = lineColors.length - 1;\r\n\r\nfunction nextLinePaintStyle(uuid: any) {\r\n  return uuidColorMap[uuid]\r\n    || (uuidColorMap[uuid] = Object.assign({}, linePaintDefault, { strokeStyle: lineColors[lineCount++ % maxCols] }));\r\n}\r\n\r\nconst instanceTemplate = {\r\n  Connector: ['Bezier', { curviness: 70 }],\r\n  HoverPaintStyle: {\r\n    lineWidth: 4,\r\n    strokeStyle: '#216477',\r\n    outlineWidth: 2,\r\n    outlineColor: 'white'\r\n  },\r\n  PaintStyle: nextLinePaintStyle('dummy'),\r\n  Container: 'pipelineContainer'\r\n};\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\n@Injectable()\r\nexport class PlumbGuiService {\r\n  connectionsInitialized = false;\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  buildInstance(queryDef: any) {\r\n    const instance = jsPlumb.getInstance(instanceTemplate);\r\n\r\n    // If connection on Out-DataSource was removed, remove custom Endpoint\r\n    instance.bind('connectionDetached', (info: any) => {\r\n      if (info.targetId === dataSrcIdPrefix + 'Out') {\r\n        const element = info.target;\r\n        const fixedEndpoints = this.findDataSourceOfElement(element, queryDef).dataSource.Definition().In;\r\n        const label = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n        if (fixedEndpoints.indexOf(label) === -1) {\r\n          setTimeout(() => { instance.deleteEndpoint(info.targetEndpoint); }, 0);\r\n        }\r\n      }\r\n    });\r\n\r\n    instance.bind('connection', (info: any) => {\r\n      if (!this.connectionsInitialized) { return; }\r\n\r\n      const endpointLabel = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt = endpointLabel.getLabel();\r\n      const endpoints = instance.getEndpoints(info.target.id);\r\n      let targetEndpointHavingSameLabel;\r\n      endpoints.forEach((endpoint: any) => {\r\n        const label = endpoint.getOverlay('endpointLabel').getLabel();\r\n        if (label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLElement).classList.contains('targetEndpoint')) {\r\n          targetEndpointHavingSameLabel = endpoint;\r\n        }\r\n      });\r\n      if (targetEndpointHavingSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n    });\r\n\r\n    return instance;\r\n  }\r\n\r\n  // this will retrieve the dataSource info-object for a DOM element\r\n  findDataSourceOfElement(element: HTMLElement, queryDef: any) {\r\n    element = this.fixElementNodeList(element);\r\n    const guid = (element.attributes as any).guid.value;\r\n    const list = queryDef.data.DataSources;\r\n    const found = list.find((el: any) => el.EntityGuid === guid);\r\n    return found;\r\n  }\r\n\r\n  initWirings(queryDef: any, instance: any) {\r\n    queryDef.data.Pipeline.StreamWiring?.forEach((wire: any) => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In- and Out-Endpoint exist\r\n      if (!instance.getEndpoint(fromUuid)) {\r\n        this.addEndpoint(jsPlumb.getSelector('#' + sourceElementId), wire.Out, false, queryDef, instance);\r\n      }\r\n      if (!instance.getEndpoint(toUuid)) {\r\n        this.addEndpoint(jsPlumb.getSelector('#' + targetElementId), wire.In, true, queryDef, instance);\r\n      }\r\n\r\n      try {\r\n        instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: nextLinePaintStyle(fromUuid)\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  // Add a jsPlumb Endpoint to an Element\r\n  addEndpoint(element: HTMLElement, name: any, isIn: any, queryDef: any, instance: any) {\r\n    element = this.fixElementNodeList(element);\r\n    if (!element) {\r\n      console.error({ message: 'Element not found', selector: element });\r\n      return;\r\n    }\r\n\r\n    const dataSource = this.findDataSourceOfElement(element, queryDef);\r\n\r\n    const uuid = element.id + (isIn ? '_in_' : '_out_') + name;\r\n    const params = {\r\n      uuid,\r\n      enabled:\r\n        !dataSource.ReadOnly ||\r\n        dataSource.EntityGuid === 'Out' // Endpoints on Out-DataSource must be always enabled\r\n    };\r\n    const endPoint = instance.addEndpoint(element,\r\n      (isIn ? this.buildTargetEndpoint(queryDef) : this.buildSourceEndpoint(queryDef)),\r\n      params);\r\n    endPoint.getOverlay('endpointLabel').setLabel(name);\r\n  }\r\n\r\n  // the definition of source endpoints (the small blue ones)\r\n  buildSourceEndpoint(queryDef: any) {\r\n    return {\r\n      paintStyle: { fillStyle: 'transparent', radius: 10, lineWidth: 0 },\r\n      cssClass: 'sourceEndpoint',\r\n      maxConnections: -1,\r\n      isSource: true,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(true, queryDef.readOnly)\r\n    };\r\n  }\r\n\r\n  // the definition of target endpoints (will appear when the user drags a connection)\r\n  buildTargetEndpoint(queryDef: any) {\r\n    return {\r\n      paintStyle: { fillStyle: 'transparent', radius: 10, lineWidth: 0 },\r\n      cssClass: 'targetEndpoint',\r\n      maxConnections: 1,\r\n      isTarget: true,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(false, queryDef.readOnly),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' }\r\n    };\r\n  }\r\n\r\n  // #region jsPlumb Endpoint Definitions\r\n  getEndpointOverlays(isSource: any, readOnlyMode: any) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          // location: [0.5, isSource ? -0.5 : 1.5],\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: 'noselect ' + (isSource ? 'endpointSourceLabel' : 'endpointTargetLabel'),\r\n          events: {\r\n            dblclick: (labelOverlay: any) => {\r\n              if (readOnlyMode) { return; }\r\n\r\n              const newLabel = prompt('Rename Stream', labelOverlay.label);\r\n              if (newLabel) {\r\n                labelOverlay.setLabel(newLabel);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    ];\r\n  }\r\n\r\n  makeSource(dataSource: any, element: HTMLElement, dragHandler: any, queryDef: any, instance: any) {\r\n    // suspend drawing and initialise\r\n    element = this.fixElementNodeList(element);\r\n    instance.batch(() => {\r\n\r\n      // make DataSources draggable. Must happen before makeSource()!\r\n      if (!queryDef.readOnly) {\r\n        instance.draggable(element,\r\n          {\r\n            grid: [20, 20],\r\n            drag: dragHandler\r\n          });\r\n      }\r\n\r\n      // Add Out- and In-Endpoints from Definition\r\n      const dataSourceDefinition = dataSource.Definition();\r\n      if (dataSourceDefinition) {\r\n        // Add Out-Endpoints\r\n        dataSourceDefinition.Out?.forEach((name: any) => {\r\n          this.addEndpoint(element, name, false, queryDef, instance);\r\n        });\r\n        // Add In-Endpoints\r\n        dataSourceDefinition.In?.forEach((name: any) => {\r\n          this.addEndpoint(element, name, true, queryDef, instance);\r\n        });\r\n        // make the DataSource a Target for new Endpoints (if .In is an Array)\r\n        if (dataSourceDefinition.In) {\r\n          const targetEndpointUnlimited = this.buildTargetEndpoint(queryDef);\r\n          targetEndpointUnlimited.maxConnections = -1;\r\n          instance.makeTarget(element, targetEndpointUnlimited);\r\n        }\r\n\r\n        if (dataSourceDefinition.DynamicOut) {\r\n          instance.makeSource(element,\r\n            this.buildSourceEndpoint(queryDef),\r\n            { filter: '.add-endpoint .new-connection' });\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  pushPlumbConfigToQueryDef(instance: any, queryDef: any) {\r\n    const connectionInfos: any[] = [];\r\n    instance.getAllConnections().forEach((connection: any) => {\r\n      connectionInfos.push({\r\n        From: connection.sourceId.substr(dataSrcIdPrefix.length),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.substr(dataSrcIdPrefix.length),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      });\r\n    });\r\n    queryDef.data.Pipeline.StreamWiring = connectionInfos;\r\n\r\n    const streamsOut: any[] = [];\r\n    instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: any) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    queryDef.data.Pipeline.StreamsOut = streamsOut.join(',');\r\n  }\r\n\r\n  putEntityCountOnConnection(result: any, queryDef: any, instance: any) {\r\n    result.Streams?.forEach((stream: any) => {\r\n      // Find jsPlumb Connection for the current Stream\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      let targetElementId = dataSrcIdPrefix + stream.Target;\r\n      if (stream.Target === '00000000-0000-0000-0000-000000000000'\r\n        || stream.Target === queryDef.data.Pipeline.EntityGuid) {\r\n        targetElementId = dataSrcIdPrefix + 'Out';\r\n      }\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp = instance.getEndpoint(fromUuid);\r\n      if (sEndp) {\r\n        sEndp.connections?.forEach((connection: any) => {\r\n          if (connection.endpoints[1].getUuid() === toUuid) {\r\n            // when connection found, update it's label with the Entities-Count\r\n            connection.setLabel({\r\n              label: stream.Count.toString(),\r\n              cssClass: 'streamEntitiesCount'\r\n            });\r\n            return;\r\n          }\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  /** selectors in jsPlumb return array */\r\n  private fixElementNodeList(element: HTMLElement | NodeList) {\r\n    const el = (element instanceof NodeList ? element[0] : element) as HTMLElement;\r\n    return el;\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\" *ngIf=\"queryDef\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">Run</button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">Save</button>\r\n      <button mat-raised-button class=\"action\" (click)=\"doRepaint()\">Repaint</button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Parameters</div>\r\n        <div>\r\n          <button mat-icon-button matTooltip=\"Edit parameters\">\r\n            <mat-icon (click)=\"editPipeline()\">edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button matTooltip=\"Query Params Docs\">\r\n            <mat-icon (click)=\"openParamsHelp()\">info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\">\r\n        <li *ngFor=\"let param of queryDef.data.Pipeline.Params?.split('\\n')\">{{ param }}</li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\">\r\n        <li *ngFor=\"let param of queryDef.data.Pipeline.TestParameters?.split('\\n')\">{{ param }}</li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n      <div class=\"title\">\r\n        <span>Warnings</span>\r\n        <mat-icon style=\"color: red\">warning</mat-icon>\r\n      </div>\r\n      <ol class=\"values\">\r\n        <li *ngFor=\"let warn of warnings\">{{ warn }}</li>\r\n      </ol>\r\n    </div>\r\n\r\n    <div class=\"description\" *ngIf=\"queryDef.data.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ queryDef.data.Pipeline.Description }}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RunExplorerComponent implements OnInit, OnChanges {\r\n  @Input() queryDef: any;\r\n  @Output() editPipelineEntity: EventEmitter<null> = new EventEmitter();\r\n  @Output() saveAndRun: EventEmitter<{ save: boolean, run: boolean }> = new EventEmitter();\r\n  @Output() repaint: EventEmitter<null> = new EventEmitter();\r\n  warnings: any[];\r\n\r\n  constructor(private context: Context, ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.queryDef?.currentValue) {\r\n      this.warnings = calculateWarnings(this.queryDef.data, this.context);\r\n    }\r\n  }\r\n\r\n  editPipeline() {\r\n    this.editPipelineEntity.emit();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('https://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.saveAndRun.emit({ save, run });\r\n  }\r\n\r\n  doRepaint() {\r\n    this.repaint.emit();\r\n  }\r\n\r\n}\r\n","import { Context } from '../../shared/services/context';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test-module-id is different from the one we're currently\r\n * working on, or if no test-module-id is provided\r\n */\r\nexport function calculateWarnings(pipelineData: any, context: Context): any[] {\r\n  const warnings = [];\r\n\r\n  try { // catch various not-initialized errors\r\n    const regex = /^\\[module:moduleid\\]=([0-9]*)$/gmi; // capture the mod-id\r\n    const testParams = pipelineData.Pipeline.TestParameters;\r\n    const matches = regex.exec(testParams);\r\n    const testMid = matches[1];\r\n    const urlMid = context.moduleId.toString();\r\n    if (testMid !== urlMid) {\r\n      // tslint:disable-next-line:max-line-length\r\n      warnings.push(`Your test moduleid (${testMid}) is different from the current moduleid (${urlMid}). Note that 2sxc 9.33 automatically provides the moduleid - so you usually do not need to set it any more.`);\r\n    }\r\n  } catch (error) { }\r\n\r\n  return warnings;\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataSource, SortedDataSources } from './data-sources.model';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number): SortedDataSources {\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    (dataSource.Difficulty <= maxDifficulty) && (dataSource.allowNew == null)\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    sorted[type] ? sorted[type].push(dataSource) : sorted[type] = [dataSource];\r\n  }\r\n\r\n  return sorted;\r\n}\r\n\r\nexport function toggleInArray(item: string, array: string[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\" *ngIf=\"dataSources\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"onDifficultyChanged($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let item of sorted | keyvalue\">\r\n    <div class=\"collapsible\" [matTooltip]=\"item.key\" matTooltipShowDelay=\"750\" (click)=\"toggleItem(item.key)\">\r\n      <mat-icon>{{ toggledItems.includes(item.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(item.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let value of item.value\" [matTooltip]=\"value.Name\" matTooltipShowDelay=\"750\"\r\n        (click)=\"addDataSource(value)\">\r\n        {{ value.Name }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, Output, EventEmitter } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\n\r\nimport { filterAndSortDataSources, toggleInArray } from './add-explorer.helpers';\r\nimport { DataSource } from './data-sources.model';\r\nimport { SortedDataSources } from './data-sources.model';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss']\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnChanges {\r\n  @Input() dataSources: DataSource[];\r\n  @Output() addSelectedDataSource: EventEmitter<DataSource> = new EventEmitter();\r\n  difficulty = {\r\n    default: 100,\r\n    advanced: 200,\r\n  };\r\n  activeDiff = this.difficulty.default;\r\n  sorted: SortedDataSources;\r\n  toggledItems: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.dataSources?.currentValue) {\r\n      this.sorted = filterAndSortDataSources(this.dataSources, this.activeDiff);\r\n    }\r\n  }\r\n\r\n  onDifficultyChanged(event: MatSlideToggleChange) {\r\n    this.activeDiff = event.checked ? this.difficulty.advanced : this.difficulty.default;\r\n    this.sorted = filterAndSortDataSources(this.dataSources, this.activeDiff);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.addSelectedDataSource.emit(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n}\r\n","<div id=\"pipelineContainer\" *ngIf=\"queryDef.data.DataSources\">\r\n  <div #dataSourceElement *ngFor=\"let dataSource of queryDef.data.DataSources; index as index\" datasource\r\n    [attr.guid]=\"dataSource.EntityGuid\" id=\"dataSource_{{dataSource.EntityGuid}}\" class=\"dataSource\" [ngStyle]=\"{\r\n      'top': dataSource.VisualDesignerData.Top + 'px',\r\n      'left': dataSource.VisualDesignerData.Left + 'px',\r\n      'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n    }\">\r\n    <div class=\"configure\" appMousedownStopPropagation (click)=\"configureDataSource(dataSource)\"\r\n      title=\"Configure this DataSource\" *ngIf=\"!dataSource.ReadOnly && typeInfo(dataSource).config\">\r\n      <mat-icon class=\"eav-icon-settings\">settings</mat-icon>\r\n    </div>\r\n    <mat-icon class=\"type-info\" title=\"{{typeInfo(dataSource).notes}}\">{{typeInfo(dataSource).icon}}</mat-icon>\r\n    <div class=\"name noselect\" title=\"Click to edit the Name\" appMousedownStopPropagation\r\n      (click)=\"editName(dataSource)\">\r\n      {{dataSource.Name || '(no name)'}}<mat-icon class=\"show-hover-inline eav-icon-pencil\">edit\r\n      </mat-icon>\r\n    </div>\r\n    <br />\r\n    <div class=\"description noselect\" title=\"Click to edit the Description\" appMousedownStopPropagation\r\n      (click)=\"editDescription(dataSource)\">\r\n      {{dataSource.Description}}<mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n    </div>\r\n    <br />\r\n    <div class=\"typename\" title=\"{{dataSource.PartAssemblyAndType}}\">\r\n      Type: {{typeNameFilter(dataSource.PartAssemblyAndType, 'className')}}\r\n    </div>\r\n    <div class=\"add-endpoint\" title=\"Drag a new Out-Connection from here\"\r\n      *ngIf=\"!dataSource.ReadOnly && typeInfo(dataSource).dynamicOut\">\r\n      <mat-icon class=\"new-connection eav-icon-up-dir\">arrow_drop_up</mat-icon>\r\n    </div>\r\n    <mat-icon class=\"delete eav-icon-cancel\" title=\"delete this\" appMousedownStopPropagation (click)=\"remove(index)\"\r\n      *ngIf=\"!dataSource.ReadOnly\">\r\n      delete\r\n    </mat-icon>\r\n    <a class=\"help eav-icon-help-circled\" title=\"help for this data source\" href=\"{{typeInfo(dataSource).helpLink}}\"\r\n      target=\"_blank\" *ngIf=\"typeInfo(dataSource).helpLink\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </a>\r\n  </div>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { Component, OnInit, Input, AfterViewInit, ViewChildren, QueryList, ElementRef, ChangeDetectionStrategy, Output, EventEmitter, OnDestroy, NgZone, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { PlumbGuiService, dataSrcIdPrefix } from '../services/plumb-gui.service';\r\nimport { ElementEventListener } from '../../../../../shared/element-event-listener-model';\r\ndeclare const jsPlumb: any;\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy, OnChanges {\r\n  @Input() queryDef: any;\r\n  @Input() stopKeyboardSave: boolean;\r\n  @Output() save: EventEmitter<any> = new EventEmitter();\r\n  @Output() editDataSourcePart: EventEmitter<any> = new EventEmitter();\r\n  @Output() instanceChanged: EventEmitter<any> = new EventEmitter();\r\n  @ViewChildren('dataSourceElement') dataSourceElements: QueryList<ElementRef>;\r\n  instance: any;\r\n\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private plumbGuiService: PlumbGuiService,\r\n    private zone: NgZone,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.stopKeyboardSave?.currentValue) {\r\n      if (this.stopKeyboardSave) {\r\n        // spm TODO: move to parent\r\n        this.detachListeners();\r\n      } else {\r\n        this.attachListeners();\r\n      }\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachListeners();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // Initialize plumbing. In Angular JS this was done with ngRepeatFinished which Angular 2 doesn't provide.\r\n    // Alternative is described here:\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    // Since there is an *ngIf on <app-plumb-editor> in VisualQueryComponent, *ngFor will for sure be executed\r\n    // before ngAfterViewInit is called so initializing plumbing shouldn't have any problems, but if there are, use solution\r\n    // above to run plumbing initialization again if *ngFor runs again\r\n\r\n    jsPlumb.ready(() => { this.jsPlumbReady(); });\r\n\r\n    this.dataSourceElements.changes.subscribe(t => {\r\n      this.instance.reset();\r\n      this.plumbGuiService.connectionsInitialized = false;\r\n      jsPlumb.ready(() => { this.jsPlumbReady(); });\r\n    });\r\n  }\r\n\r\n  private jsPlumbReady() {\r\n    this.instance = this.plumbGuiService.buildInstance(this.queryDef);\r\n    this.instanceChanged.emit(this.instance);\r\n    if (this.plumbGuiService.connectionsInitialized) { return; }\r\n    this.dataSourceElements.forEach(dsEl => {\r\n      const dataSource = this.plumbGuiService.findDataSourceOfElement(dsEl.nativeElement, this.queryDef);\r\n      this.makeDataSource(dataSource, dsEl.nativeElement);\r\n    });\r\n    this.instance.batch(() => { this.plumbGuiService.initWirings(this.queryDef, this.instance); }); // suspend drawing and initialise\r\n    this.instance.repaintEverything(); // repaint so continuous connections are aligned correctly\r\n    this.plumbGuiService.connectionsInitialized = true;\r\n  }\r\n\r\n  makeDataSource(dataSource: any, element: HTMLElement) {\r\n    this.plumbGuiService.makeSource(\r\n      dataSource, element, (draggedWrapper: any) => { this.dataSourceDrag(draggedWrapper); }, this.queryDef, this.instance\r\n    );\r\n    this.queryDef.dsCount++; // unclear what this is for, probably to name/number new sources\r\n  }\r\n\r\n  dataSourceDrag(draggedWrapper: any) {\r\n    const offset = this.getElementOffset(draggedWrapper.el);\r\n    const dataSource = this.plumbGuiService.findDataSourceOfElement(draggedWrapper.el, this.queryDef);\r\n    dataSource.VisualDesignerData.Top = Math.round(offset.top);\r\n    dataSource.VisualDesignerData.Left = Math.round(offset.left);\r\n  }\r\n\r\n  configureDataSource(dataSource: any) {\r\n    if (dataSource.ReadOnly) { return; }\r\n\r\n    // Ensure dataSource Entity is saved\r\n    if (!this.queryDefinitionService.dataSourceIsPersisted(dataSource)) {\r\n      this.save.emit();\r\n    } else {\r\n      this.editDataSourcePart.emit(dataSource);\r\n    }\r\n  }\r\n\r\n  typeInfo(dataSource: any) {\r\n    const typeInfo = this.queryDefinitionService.dsTypeInfo(dataSource, this.queryDef);\r\n    return typeInfo;\r\n  }\r\n\r\n  typeNameFilter(input: any, format: any) {\r\n    const filtered = this.queryDefinitionService.typeNameFilter(input, format);\r\n    return filtered;\r\n  }\r\n\r\n  remove(index: number) {\r\n    const dataSource = this.queryDef.data.DataSources[index];\r\n    if (!confirm(`Delete DataSource ${dataSource.Name || '(unnamed)'}?`)) { return; }\r\n    const elementId = dataSrcIdPrefix + dataSource.EntityGuid;\r\n    this.instance.selectEndpoints({ element: elementId }).remove();\r\n    this.queryDef.data.DataSources.splice(index, 1);\r\n  }\r\n\r\n  editName(dataSource: any) {\r\n    if (dataSource.ReadOnly) { return; }\r\n\r\n    const newName = prompt('Rename DataSource', dataSource.Name);\r\n    if (newName && newName.trim()) {\r\n      dataSource.Name = newName.trim();\r\n    }\r\n  }\r\n\r\n  // Edit Description of a DataSource\r\n  editDescription(dataSource: any) {\r\n    if (dataSource.ReadOnly) { return; }\r\n\r\n    const newDescription = prompt('Edit Description', dataSource.Description);\r\n    if (newDescription && newDescription.trim()) {\r\n      dataSource.Description = newDescription.trim();\r\n    }\r\n  }\r\n\r\n  // helper method to find the offset\r\n  getElementOffset(element: any) {\r\n    const de = document.documentElement;\r\n    const box = element.getBoundingClientRect();\r\n    const top = box.top + window.pageYOffset - de.clientTop;\r\n    const left = box.left + window.pageXOffset - de.clientLeft;\r\n    return { top, left };\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      const save = this.keyboardSave.bind(this);\r\n      window.addEventListener('keydown', save);\r\n      this.eventListeners.push({ element: window, type: 'keydown', listener: save });\r\n    });\r\n  }\r\n\r\n  private detachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(listener => {\r\n        listener.element.removeEventListener(listener.type, listener.listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private keyboardSave(e: KeyboardEvent) {\r\n    const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n    if (!CTRL_S) { return; }\r\n    e.preventDefault();\r\n    this.zone.run(() => {\r\n      this.save.emit();\r\n    });\r\n  }\r\n\r\n}\r\n","<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.run}\" matTooltip=\"Run\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.add}\" matTooltip=\"Add\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" matTooltip=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\" *ngIf=\"queryDef\" [queryDef]=\"queryDef\"\r\n    (editPipelineEntity)=\"editPipelineEntity()\" (saveAndRun)=\"saveAndRun($event)\" (repaint)=\"repaint()\">\r\n  </app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\" *ngIf=\"queryDef\"\r\n    [dataSources]=\"queryDef.data.InstalledDataSources\" (addSelectedDataSource)=\"addSelectedDataSource($event)\">\r\n  </app-add-explorer>\r\n\r\n  <app-plumb-editor *ngIf=\"queryDef\" [queryDef]=\"queryDef\" (save)=\"savePipeline()\"\r\n    (editDataSourcePart)=\"editDataSourcePart($event)\" (instanceChanged)=\"instanceChanged($event)\"></app-plumb-editor>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { VisualQueryComponent } from './visual-query.component';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nimport { Context } from '../shared/services/context';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { ContentTypesService } from '../app-administration/shared/services/content-types.service';\r\nimport { eavConstants } from '../shared/constants/eav-constants';\r\nimport { EditForm } from '../app-administration/shared/models/edit-form.model';\r\nimport { DataSource } from './add-explorer/data-sources.model';\r\nimport { PlumbGuiService } from './services/plumb-gui.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss']\r\n})\r\nexport class VisualQueryComponent implements OnInit, OnDestroy {\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer: string;\r\n  queryDef: any;\r\n  stopKeyboardSave = false;\r\n  instance: any;\r\n\r\n  private pipelineId: number;\r\n  private subscription = new Subscription();\r\n  private hasChild: boolean;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private plumbGuiService: PlumbGuiService,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.hasChild = !!this.route.snapshot.firstChild;\r\n    const pipelineId = this.route.snapshot.paramMap.get('pipelineId');\r\n    this.pipelineId = parseInt(pipelineId, 10);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadQuery();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.subscription = null;\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://2sxc.org/help', '_blank');\r\n  }\r\n\r\n  instanceChanged(instance: any) {\r\n    this.instance = instance;\r\n  }\r\n\r\n  savePipeline(callback?: () => any) {\r\n    this.snackBar.open('Saving...');\r\n    this.stopKeyboardSave = true;\r\n    this.queryDef.readOnly = true;\r\n    this.plumbGuiService.pushPlumbConfigToQueryDef(this.instance, this.queryDef);\r\n    this.queryDefinitionService.save(this.queryDef).subscribe({\r\n      next: (success: any) => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        // Update PipelineData with data retrieved from the Server\r\n        const newQueryDef = cloneDeep(this.queryDef);\r\n        newQueryDef.data.Pipeline = success.Pipeline;\r\n        newQueryDef.data.TestParameters = success.TestParameters;\r\n        newQueryDef.id = success.Pipeline.EntityId;\r\n        this.router.navigateByUrl(this.router.url.replace('pipelineId', success.Pipeline.EntityId));\r\n        newQueryDef.readOnly = !success.Pipeline.AllowEdit;\r\n        newQueryDef.data.DataSources = success.DataSources;\r\n        this.queryDefinitionService.postProcessDataSources(newQueryDef.data);\r\n        this.queryDef = newQueryDef;\r\n        this.stopKeyboardSave = false;\r\n        if (callback) { callback(); }\r\n      },\r\n      error: (reason: any) => {\r\n        this.snackBar.open(`Save Pipeline failed`, null, { duration: 2000 });\r\n        this.queryDef.readOnly = false;\r\n        this.stopKeyboardSave = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // Get the URL to configure a DataSource\r\n  editDataSourcePart(dataSource: any) {\r\n    const sourceDef = this.queryDef.data.InstalledDataSources\r\n      .find((source: any) => source.PartAssemblyAndType === dataSource.PartAssemblyAndType);\r\n    const contentTypeName = (sourceDef && sourceDef.ContentType)\r\n      ? sourceDef.ContentType\r\n      : '|Config ' + this.queryDefinitionService.typeNameFilter(dataSource.PartAssemblyAndType, 'classFullName');\r\n\r\n    const assignmentObjectTypeId = eavConstants.metadata.entity.type;\r\n    const keyGuid = dataSource.EntityGuid;\r\n\r\n    // Query for existing Entity\r\n    this.metadataService\r\n      .getMetadata(assignmentObjectTypeId, eavConstants.keyTypes.guid, keyGuid, contentTypeName).subscribe((success: any) => {\r\n        if (success.length) { // Edit existing Entity\r\n          const form: EditForm = {\r\n            items: [{ EntityId: success[0].Id.toString() }],\r\n          };\r\n          this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n        } else { // Check if the type exists, and if yes, create new Entity\r\n          this.contentTypesService.getDetails(contentTypeName, { ignoreErrors: true }).subscribe({\r\n            next: (res: any) => {\r\n              const form: EditForm = {\r\n                items: [{\r\n                  ContentTypeName: contentTypeName,\r\n                  For: {\r\n                    Target: eavConstants.metadata.entity.target,\r\n                    Guid: keyGuid\r\n                  }\r\n                }],\r\n              };\r\n              this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n            },\r\n            error: () => {\r\n              alert('Server reports error - this usually means that this data-source doesn\\'t have any configuration');\r\n            }\r\n          });\r\n        }\r\n      });\r\n  }\r\n\r\n  addSelectedDataSource(dataSource: DataSource) {\r\n    this.queryDefinitionService.addDataSource(this.queryDef, dataSource.PartAssemblyAndType, null, null, dataSource.Name);\r\n    this.savePipeline();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      this.stopKeyboardSave = true;\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.queryDef.id.toString() }],\r\n      };\r\n      this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n    });\r\n  }\r\n\r\n  repaint() {\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  saveAndRun(saveAndRun: { save: boolean, run: boolean }) {\r\n    const save = saveAndRun.save;\r\n    const run = saveAndRun.run;\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runQuery(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runQuery();\r\n    }\r\n  }\r\n\r\n  runQuery() {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.queryPipeline(this.queryDef.id).subscribe({\r\n      next: (success: any) => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        // open modal with the results\r\n        console.warn(success);\r\n        setTimeout(() => { this.plumbGuiService.putEntityCountOnConnection(success, this.queryDef, this.instance); }, 0);\r\n      },\r\n      error: (reason: any) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private loadQuery() {\r\n    this.queryDefinitionService.loadQuery(this.pipelineId).then(res => {\r\n      this.queryDef = res;\r\n      this.titleService.setTitle(`${this.queryDef.data.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n        const hadChild = this.hasChild;\r\n        this.hasChild = !!this.route.snapshot.firstChild;\r\n        if (!this.hasChild && hadChild) {\r\n          this.loadQuery();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\n\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { PlumbGuiService } from './services/plumb-gui.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { ContentTypesService } from '../app-administration/shared/services/content-types.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n  ],\r\n  entryComponents: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    PlumbGuiService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}