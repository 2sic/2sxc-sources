{"version":3,"sources":["./src/app/shared/services/dialog.service.ts","./src/app/code-editor/services/source.service.ts","./src/app/code-editor/services/snippets.service.ts","./src/app/code-editor/code-templates/code-templates.helpers.ts","./src/app/code-editor/code-templates/code-templates.component.html","./src/app/code-editor/code-templates/code-templates.component.ts","./src/app/code-editor/code-snippets/code-snippets.helpers.ts","./src/app/code-editor/code-snippets/toarray.pipe.ts","./src/app/code-editor/code-snippets/code-snippets.component.html","./src/app/code-editor/code-snippets/code-snippets.component.ts","./src/app/code-editor/ace-editor/ace-options.ts","./src/app/code-editor/ace-editor/ace-editor.component.ts","./src/app/code-editor/ace-editor/ace-editor.helpers.ts","./src/app/code-editor/code-editor.component.html","./src/app/code-editor/code-editor-routing.module.ts","./src/app/code-editor/code-editor.component.ts","./src/app/code-editor/code-editor.module.ts","./src/app/shared/directives/click-stop-propagination.directive.ts"],"names":["context","openCode","form","oldHref","sessionStorage","getItem","oldUrl","URL","newHref","origin","pathname","search","newHash","this","buildHashParam","zoneId","toString","replace","appId","tabId","moduleId","contentBlockId","JSON","stringify","items","window","open","openQueryDesigner","queryId","key","value","rawKey","valueTemp","undefined","encodeURIComponent","DialogService","http","dnnContext","get","$2sxc","apiUrl","params","calcParams","pipe","map","view","Type","toLowerCase","Extension","save","post","getTemplates","global","withSubfolders","templateId","path","SourceService","keyPrefixes","keyPrefixIndex","indexOf","getSnippets","toPromise","res","relevant","filterAwayNotNeededSnippetsList","snippets","standAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","newList","itm","setHasPrefix","set","substr","push","inputTypeArray","catalogInputTypeSnippets","inputTypeList","subset","templateConfiguration","makeTree","Content","Object","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","name","label","snip","content","help","links","linksList","getHelpKey","result","addition","linksString","llist","split","pair","length","trim","url","target","type","prefix","getFields","AppId","then","fields","fieldname","StaticName","valuePlaceholder","Metadata","merged","Notes","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","staticName","appid","fld","md","allMd","All","typeMd","inputMd","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","calculateOpenItems","filename","openItems","paths","parent","existing","find","item","children","dialogService","toggledItems","ngOnInit","ngOnChanges","changes","templates","currentValue","template","last","pathFromRoot","calculateTree","FileName","openTemplate","Path","toggleItem","array","index","splice","toggleInArray","CodeTemplatesComponent","transform","keys","ToArrayPipe","insertSnippet","selected","toggledInfos","activeSet","onSetChange","event","addSnippet","snippet","emit","toggleInfo","info","CodeSnippetsComponent","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","propagateChange","propagateTouched","loadScripts","scriptObjects","callback","iteration","newCallback","bind","scrObj","globalVar","scriptInDom","document","querySelector","src","addEventListener","once","scriptEl","createElement","head","appendChild","aceLoaded","updateValues","editor","toggleResize","previousValue","runOutsideAngular","setTimeout","resize","ace","require","snippetManager","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","ngOnDestroy","destroy","container","remove","config","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","onEditorBlurred","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","routes","component","route","snackBar","sourceService","snippetsService","titleService","explorer","eventListeners","init","calculateViewKey","attachListeners","viewKey","subscribe","savedCode","Code","setTitle","explorerSnipps","editorSnipps","detachListeners","toggleExplorer","activeExplorer","changeInsertSnipp","insertSnipp","codeToSave","next","duration","error","itemsRaw","parse","EntityId","closing","stopClose","keyboardSave","element","listener","forEach","removeEventListener","e","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","forChild","CodeEditorModule","onClick","stopPropagation","ClickStopPropagationDirective"],"mappings":"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","file":"27.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { Context } from './context';\r\nimport { EditForm } from '../../app-administration/shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyZoneId, keyAppId, keyTabId, keyModuleId, keyContentBlockId, keyLang, keyLangPri, keyLangs, keyPortalRoot, keyWebsiteRoot, keyPartOfPage, keyAppRoot, keyFa, keyRequestToken, keyDebug, keyUserCanDesign, keyUserCanDevelop, keyUrl, prefix, keyDialog, keyItems, keyPipelineId } from '../constants/sessions-keys';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCode(form: EditForm) {\r\n    const dialog = 'develop';\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n    const newHash =\r\n      this.buildHashParam(keyZoneId, this.context.zoneId.toString()).replace('&', '#') +\r\n      this.buildHashParam(keyAppId, this.context.appId.toString()) +\r\n      this.buildHashParam(keyTabId, this.context.tabId.toString()) +\r\n      this.buildHashParam(keyModuleId, this.context.moduleId.toString()) +\r\n      this.buildHashParam(keyContentBlockId, this.context.contentBlockId.toString()) +\r\n      this.buildHashParam(keyLang) +\r\n      this.buildHashParam(keyLangPri) +\r\n      this.buildHashParam(keyLangs) +\r\n      this.buildHashParam(keyPortalRoot) +\r\n      this.buildHashParam(keyWebsiteRoot) +\r\n      this.buildHashParam(keyPartOfPage) +\r\n      this.buildHashParam(keyUserCanDesign) +\r\n      this.buildHashParam(keyUserCanDevelop) +\r\n      this.buildHashParam(keyAppRoot) +\r\n      this.buildHashParam(keyFa) +\r\n      this.buildHashParam(keyRequestToken) +\r\n      this.buildHashParam(keyDialog, dialog) +\r\n      this.buildHashParam(keyItems, JSON.stringify(form.items)) +\r\n      (sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : '') +\r\n      '';\r\n\r\n    const url = newHref + newHash;\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(form: EditForm, queryId: number) {\r\n    const dialog = 'pipeline-designer';\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n    const newHash =\r\n      this.buildHashParam(keyZoneId, this.context.zoneId.toString()).replace('&', '#') +\r\n      this.buildHashParam(keyAppId, this.context.appId.toString()) +\r\n      this.buildHashParam(keyTabId, this.context.tabId.toString()) +\r\n      this.buildHashParam(keyModuleId, this.context.moduleId.toString()) +\r\n      this.buildHashParam(keyContentBlockId, this.context.contentBlockId.toString()) +\r\n      this.buildHashParam(keyLang) +\r\n      this.buildHashParam(keyLangPri) +\r\n      this.buildHashParam(keyLangs) +\r\n      this.buildHashParam(keyPortalRoot) +\r\n      this.buildHashParam(keyWebsiteRoot) +\r\n      this.buildHashParam(keyPartOfPage) +\r\n      this.buildHashParam(keyUserCanDesign) +\r\n      this.buildHashParam(keyUserCanDevelop) +\r\n      this.buildHashParam(keyAppRoot) +\r\n      this.buildHashParam(keyFa) +\r\n      this.buildHashParam(keyRequestToken) +\r\n      this.buildHashParam(keyDialog, dialog) +\r\n      this.buildHashParam(keyPipelineId, queryId.toString()) +\r\n      this.buildHashParam(keyItems, JSON.stringify(form.items)) +\r\n      (sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : '') +\r\n      '';\r\n\r\n    const url = newHref + newHash;\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value !== undefined) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam = `&${rawKey}=${rawValue}`;\r\n    return hashParam;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), {\r\n      params: this.calcParams(key)\r\n    }).pipe(\r\n      map((view: SourceView) => {\r\n        if (view.Type.toLowerCase() === 'auto') {\r\n          switch (view.Extension.toLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    ) as Observable<SourceView>;\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/asset'), view, {\r\n      params: this.calcParams(key),\r\n    }) as Observable<boolean>;\r\n  }\r\n\r\n  getTemplates() {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('app-sys/appassets/list'), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', withSubfolders: 'true' },\r\n    }) as Observable<string[]>;\r\n  }\r\n\r\n  private calcParams(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n  private keyPrefixes = ['@', '['];\r\n  private keyPrefixIndex = (view: SourceView) => (view.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext,\r\n  ) { }\r\n\r\n  async getSnippets(view: SourceView) {\r\n    const res: any = await this.http.get('../sxc-develop/snippets.json.js').toPromise();\r\n    const snippets: Snippet[] = res.snippets;\r\n    const relevant = this.filterAwayNotNeededSnippetsList(snippets, view);\r\n    const standAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n    const sets = this.initSnippetsWithConfig(standAndInputSnips.standardArray, view, standAndInputSnips.inputTypeSnippets);\r\n    return { sets, list: standAndInputSnips.standardArray };\r\n  }\r\n\r\n  // scan the list for sets starting with @ or [ and filter if not needed right now\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView) {\r\n    const newList = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = this.keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === this.keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === this.keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]) {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    return {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]) {\r\n    const inputTypeList: any = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(sets: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    sets = this.makeTree(sets);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, 'Content', templateConfiguration, inputTypeSnippets);\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation', templateConfiguration, inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(sets.List.Fields, templateConfiguration.TypeList, 'ListContent', templateConfiguration, inputTypeSnippets);\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields, templateConfiguration.TypeListPresentation,\r\n          'ListContent.Presentation', templateConfiguration, inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  // Convert the list into a tree with set/subset/item\r\n  private makeTree(list: Snippet[]) {\r\n    const tree: any = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      tree[o.set][o.subset].push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result = key;\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: any, subset: any, snip: any, addition: any) {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result = key;\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: any) {\r\n    if (!linksString) {\r\n      return null;\r\n    }\r\n    const links = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        links.push({ name: pair[0].trim(), url: pair[1].trim() + ':' + pair[2].trim() });\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  // get fields in content types\r\n  private loadContentType(target: any, type: any, prefix: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    this.getFields(templateConfiguration.AppId, type)\r\n      .then(fields => {\r\n        // first add common items if the content-type actually exists\r\n        for (const value of fields) {\r\n          const fieldname = value.StaticName;\r\n          target[fieldname] = {\r\n            key: fieldname,\r\n            label: fieldname,\r\n            snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n            help: value.Metadata.merged.Notes || '' + ' (' + value.Type.toLowerCase() + ') '\r\n          };\r\n          // try to add generic snippets specific to this input-type\r\n          const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n          this.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults, inputTypeSnippets);\r\n        }\r\n\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        if (fields.length) {\r\n          // tslint:disable-next-line:prefer-for-of\r\n          for (let i = 0; i < std.length; i++) {\r\n            target[std[i]] = {\r\n              key: std[i],\r\n              label: std[i],\r\n              snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n              help: 'SourceEditorSnippets.StandardFields.' + std[i] + '.Help'\r\n            };\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private valuePlaceholder(obj: any, val: any, templateConfiguration: any) {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/contenttype/getfields'), {\r\n      params: { appid: appId.toString(), staticName },\r\n    })\r\n      .toPromise()\r\n      .then((fields: Field[]) => {\r\n        if (fields) {\r\n          for (const fld of fields) {\r\n            if (!fld.Metadata) { continue; }\r\n            const md = fld.Metadata;\r\n            const allMd = md.All;\r\n            const typeMd = md[fld.Type];\r\n            const inputMd = md[fld.InputType];\r\n            md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n          }\r\n        }\r\n        return fields;\r\n      });\r\n  }\r\n\r\n  private attachSnippets(target: any, prefix: any, fieldname: any, inputType: any, snipDefaults: any, inputTypeSnippets: any) {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) {   // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) {\r\n      return;\r\n    }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = [];\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true\r\n        });\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: any, objName: any, fieldName: any) {\r\n    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    for (const path of paths) {\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          name: path,\r\n          children: (path !== last) ? [] : null,\r\n          pathFromRoot: template,\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nexport function calculateOpenItems(filename: string, tree: TreeItem[]): TreeItem[] {\r\n  if (!filename || !tree) { return []; }\r\n\r\n  const openItems: TreeItem[] = [];\r\n  const paths = filename.split('/');\r\n  let parent = tree;\r\n  for (const path of paths) {\r\n    const existing = parent.find(item => item.name === path);\r\n    if (!existing) { break; }\r\n    openItems.push(existing);\r\n    if (!existing.children) { break; }\r\n    parent = existing.children;\r\n  }\r\n\r\n  return openItems;\r\n}\r\n\r\nexport function toggleInArray(item: TreeItem, array: TreeItem[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\">\r\n\r\n  <ng-container *ngFor=\"let item of tree\">\r\n    <ng-container *ngTemplateOutlet=\"collapsible; context: {item: item}\"></ng-container>\r\n  </ng-container>\r\n\r\n  <ng-template #collapsible let-item=\"item\">\r\n\r\n    <div class=\"template-option\" [ngClass]=\"{'active': toggledItems.includes(item) }\" *ngIf=\"!item.children\"\r\n      matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\" (click)=\"openTemplate(item.pathFromRoot)\">\r\n      {{ item.name }}\r\n    </div>\r\n\r\n    <div class=\"collapsible\" *ngIf=\"item.children\" matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\"\r\n      (click)=\"toggleItem(item)\">\r\n      <mat-icon>{{ toggledItems.includes(item) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.name }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledItems.includes(item)\">\r\n      <div class=\"list\" *ngFor=\"let item1 of item.children\">\r\n        <ng-container *ngTemplateOutlet=\"collapsible; context: {item: item1}\"></ng-container>\r\n      </div>\r\n    </ng-container>\r\n\r\n  </ng-template>\r\n\r\n</div>\r\n","import { Component, OnInit, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { EditForm } from '../../app-administration/shared/models/edit-form.model';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { calculateTree, toggleInArray, calculateOpenItems } from './code-templates.helpers';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeTemplatesComponent implements OnInit, OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  tree: TreeItem[];\r\n  toggledItems: TreeItem[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n      this.toggledItems = calculateOpenItems(this.view?.FileName, this.tree);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.toggledItems = calculateOpenItems(this.view?.FileName, this.tree);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string) {\r\n    const form: EditForm = {\r\n      items: [\r\n        { Path: path }\r\n      ]\r\n    };\r\n    this.dialogService.openCode(form);\r\n  }\r\n\r\n  toggleItem(item: TreeItem) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n}\r\n","export function toggleInArray(item: any, array: any[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'toarray' })\r\nexport class ToArrayPipe implements PipeTransform {\r\n  transform(obj: object | Array<any>): Array<any> {\r\n    if (typeof obj !== typeof {}) { return obj as Array<any>; }\r\n    return Object.keys(obj).map(key => {\r\n      return (obj as any)[key];\r\n    });\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\">\r\n\r\n  <div class=\"edit-input\">\r\n    <mat-form-field appearance=\"standard\" color=\"accent\" class=\"set-dropdown\">\r\n      <mat-select [ngModel]=\"selected\" name=\"selected\" (selectionChange)=\"onSetChange($event)\">\r\n        <mat-option *ngFor=\"let set of sets\" [value]=\"set\">{{ set }}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <ng-container *ngFor=\"let item of activeSet | keyvalue\">\r\n\r\n    <div class=\"collapsible\" [matTooltip]=\"item.key\" matTooltipShowDelay=\"750\" (click)=\"toggleItem(item)\">\r\n      <mat-icon>{{ toggledItems.includes(item) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.key }}</span>\r\n    </div>\r\n\r\n    <ul class=\"list\" *ngIf=\"toggledItems.includes(item)\">\r\n      <li class=\"list-item\" *ngFor=\"let value of (item.value | toarray)\">\r\n\r\n        <div class=\"list-item__label-wrapper\">\r\n          <div matRipple class=\"label\" [matTooltip]=\"value.snip\" matTooltipShowDelay=\"750\"\r\n            (click)=\"addSnippet(value.snip)\">{{ value.label }}\r\n          </div>\r\n          <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"toggleInfo(value)\">\r\n            info\r\n          </mat-icon>\r\n        </div>\r\n\r\n        <div class=\"list-item__help-wrapper\" *ngIf=\"toggledInfos.includes(value)\">\r\n          <div class=\"text\">{{ value.help }}</div>\r\n          <div *ngFor=\"let link of value.links\">\r\n            <a href=\"{{ link.url }}\" target=\"_blank\">{{ link.name }}</a>\r\n          </div>\r\n        </div>\r\n\r\n      </li>\r\n    </ul>\r\n\r\n  </ng-container>\r\n</div>\r\n","import { Component, OnInit, Input, OnChanges, SimpleChanges, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';\r\nimport { MatSelectChange } from '@angular/material/select';\r\n\r\nimport { toggleInArray } from './code-snippets.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeSnippetsComponent implements OnInit, OnChanges {\r\n  @Input() snippets: any;\r\n  @Output() insertSnippet: EventEmitter<any> = new EventEmitter();\r\n  selected = 'Content';\r\n  sets: string[];\r\n  activeSet: any;\r\n  toggledItems: any[] = [];\r\n  toggledInfos: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const snippets = changes.snippets?.currentValue;\r\n    if (snippets) {\r\n      this.sets = Object.keys(snippets);\r\n      this.activeSet = this.snippets[this.selected];\r\n    } else {\r\n      this.sets = null;\r\n      this.activeSet = null;\r\n    }\r\n  }\r\n\r\n  onSetChange(event: MatSelectChange) {\r\n    this.selected = event.value;\r\n    this.activeSet = this.snippets[this.selected];\r\n    this.toggledItems = [];\r\n    this.toggledInfos = [];\r\n  }\r\n\r\n  addSnippet(snippet: string) {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleItem(item: any) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  toggleInfo(info: any) {\r\n    toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { Component, OnInit, Input, ElementRef, NgZone, OnChanges, SimpleChanges, ChangeDetectionStrategy, OnDestroy, forwardRef, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\n\r\nimport { loadScripts } from './ace-editor.helpers';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\ndeclare const ace: Ace;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AceEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') editorRef: ElementRef;\r\n  @Input() filename: string;\r\n  @Input() snippets: any[];\r\n  @Input() insertSnippet: any;\r\n  /** If value changes editor will be resized */\r\n  @Input() toggleResize: boolean;\r\n\r\n  private value = '';\r\n  private editor: Editor;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts(\r\n      [\r\n        { globalVar: 'ace', src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ace.min.js' },\r\n        { globalVar: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-modelist.min.js' },\r\n        { globalVar: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-language_tools.min.js' },\r\n      ],\r\n      this.aceLoaded.bind(this)\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filename = changes.filename?.currentValue;\r\n    const snippets = changes.snippets?.currentValue;\r\n    this.updateValues(filename, snippets);\r\n\r\n    if (!this.editor) { return; }\r\n    const resize = changes.toggleResize?.currentValue !== changes.toggleResize?.previousValue;\r\n    if (resize) {\r\n      this.zone.runOutsideAngular(() => {\r\n        // wait for Angular to update DOM to be able to get proper size of the container\r\n        setTimeout(() => { this.editor.resize(); }, 50);\r\n      });\r\n    }\r\n    const snippet = changes.insertSnippet?.currentValue;\r\n    if (snippet) {\r\n      this.zone.runOutsideAngular(() => {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.insertSnippet(this.editor, snippet);\r\n        this.editor.focus();\r\n      });\r\n    }\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded() {\r\n    this.zone.runOutsideAngular(() => {\r\n      ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11');\r\n      this.editor = ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      (this.editor as any).$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange() {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred() {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: any[]) {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","export function loadScripts(scriptObjects: ScriptObject[], callback: (...args: any[]) => any, iteration = 0) {\r\n  const isLast = scriptObjects.length === iteration + 1;\r\n  const newCallback = isLast ? callback : loadScripts.bind(this, scriptObjects, callback, iteration + 1);\r\n  const scrObj = scriptObjects[iteration];\r\n\r\n  if (!!(window as any)[scrObj.globalVar]) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  const scriptInDom: HTMLScriptElement = document.querySelector(`script[src=\"${scrObj.src}\"]`);\r\n  if (scriptInDom) {\r\n    scriptInDom.addEventListener('load', newCallback, { once: true });\r\n    return;\r\n  }\r\n\r\n  const scriptEl = document.createElement('script');\r\n  scriptEl.src = scrObj.src;\r\n  scriptEl.addEventListener('load', newCallback, { once: true });\r\n  document.head.appendChild(scriptEl);\r\n}\r\n\r\nexport class ScriptObject {\r\n  globalVar: string;\r\n  src: string;\r\n}\r\n","<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.templates}\" matTooltip=\"Templates\"\r\n      (click)=\"toggleExplorer(explorer.templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.snippets}\" matTooltip=\"Snippets\"\r\n      (click)=\"toggleExplorer(explorer.snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== explorer.templates\" [view]=\"view\" [templates]=\"templates\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== explorer.snippets\" [snippets]=\"explorerSnipps\"\r\n    (insertSnippet)=\"changeInsertSnipp($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"view\" [filename]=\"view.FileName\" [(ngModel)]=\"view.Code\" [snippets]=\"editorSnipps\"\r\n    [insertSnippet]=\"insertSnipp\" [toggleResize]=\"!this.activeExplorer\">\r\n  </app-ace-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 matTooltip=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { Component, OnInit, OnDestroy, NgZone } from '@angular/core';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { Context } from '../shared/services/context';\r\nimport { keyItems } from '../shared/constants/sessions-keys';\r\nimport { SourceService } from './services/source.service';\r\nimport { EditItem, SourceItem, } from '../app-administration/shared/models/edit-form.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { ElementEventListener } from '../../../../shared/element-event-listener-model';\r\nimport { SnippetsService } from './services/snippets.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss']\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  explorer = {\r\n    templates: 'templates',\r\n    snippets: 'snippets'\r\n  };\r\n  activeExplorer: string;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: any;\r\n  editorSnipps: any;\r\n  insertSnipp: any;\r\n\r\n  private viewKey: number | string; // templateId or path\r\n  private eventListeners: ElementEventListener[] = [];\r\n  private savedCode: string;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.sourceService.get(this.viewKey).subscribe(view => {\r\n      this.view = view;\r\n      this.savedCode = this.view.Code;\r\n      this.titleService.setTitle(`${this.view.FileName} - Code Editor`);\r\n\r\n      this.snippetsService.getSnippets(this.view).then((res: any) => {\r\n        this.explorerSnipps = res.sets;\r\n        this.editorSnipps = res.list;\r\n      });\r\n    });\r\n    this.sourceService.getTemplates().subscribe(templates => {\r\n      this.templates = templates;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachListeners();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  changeInsertSnipp(snippet: any) {\r\n    this.insertSnipp = snippet;\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view.Code;\r\n    this.sourceService.save(this.viewKey, this.view).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey() {\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      const closing = this.stopClose.bind(this);\r\n      const save = this.keyboardSave.bind(this);\r\n      window.addEventListener('beforeunload', closing);\r\n      window.addEventListener('keydown', save);\r\n      this.eventListeners.push({ element: window, type: 'beforeunload', listener: closing });\r\n      this.eventListeners.push({ element: window, type: 'keydown', listener: save });\r\n    });\r\n  }\r\n\r\n  private detachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(listener => {\r\n        listener.element.removeEventListener(listener.type, listener.listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private stopClose(e: BeforeUnloadEvent) {\r\n    if (this.savedCode === this.view.Code) { return; }\r\n    e.preventDefault(); // Cancel the event\r\n    e.returnValue = ''; // Chrome requires returnValue to be set\r\n  }\r\n\r\n  private keyboardSave(e: KeyboardEvent) {\r\n    const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n    if (!CTRL_S) { return; }\r\n    e.preventDefault();\r\n    this.zone.run(() => { this.save(); });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { SourceService } from './services/source.service';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { ToArrayPipe } from './code-snippets/toarray.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  entryComponents: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}