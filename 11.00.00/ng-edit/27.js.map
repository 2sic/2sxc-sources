{"version":3,"sources":["./src/app/shared/components/boolean-filter/boolean-filter.component.ts","./src/app/shared/components/boolean-filter/boolean-filter.component.html","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./src/app/content-items/content-items.component.ts","./src/app/content-items/content-items.helpers.ts","./src/app/content-items/content-items.component.html"],"names":["filter","agInit","params","this","isFilterActive","doesFilterPass","value","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","BooleanFilterComponent","published","metadata","publishedPassed","metadataPassed","PubMetaFilterComponent","item","data","Metadata","metadataTooltip","TargetType","KeyNumber","KeyString","KeyGuid","refresh","ContentItemsStatusComponent","clone","onClone","export","onExport","delete","onDelete","ContentItemsActionsComponent","Array","isArray","encodedValue","htmlEncode","join","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","dialogRef","router","route","contentItemsService","entitiesService","contentExportService","snackBar","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","modules","subscription","Subscription","hasChild","snapshot","firstChild","contentTypeStaticName","paramMap","get","ngOnInit","fetchItems","refreshOnChildClosed","getColumns","subscribe","columns","columnDefs","buildColumnDefs","gridApi","setColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filterKeys","Object","keys","key","type","filterTo","buildFilterModel","sessionStorage","getItem","log","setFilterModel","ngOnDestroy","unsubscribe","onGridReady","api","getAll","items","editItem","form","ContentTypeName","EntityId","Id","navigate","stringify","relativeTo","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","importItem","addMetadata","confirm","metadataKeys","validTargetTypes","map","metaKey","targetType","parseInt","prompt","target","entity","alert","includes","keyTypeKeys","keyTypes","validKeyTypes","keyTypeKey","keyType","number","For","Target","guid","Guid","Number","string","String","debugFilter","warn","closeDialog","close","add","events","pipe","event","hadChild","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","idValueGetter","valueGetterStatus","flex","minWidth","onCellClicked","bind","cellRendererParams","column","IsTitle","StaticName","Type","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","_Title","_RepositoryId","open","next","duration","err","dismiss","ExceptionMessage","rawValue","Title","substring","ContentItemsComponent"],"mappings":"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","file":"27.js","sourcesContent":["import { Component } from '@angular/core';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss']\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const value: boolean = this.params.valueGetter(params.node);\r\n    if (value === null || value === undefined) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { Component } from '@angular/core';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { PubMetaFilterModel, PubMeta } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss']\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n    };\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"value.published\" matTooltip=\"Published\">visibility</mat-icon>\r\n  <mat-icon *ngIf=\"!value.published\" matTooltip=\"Not published\">visibility_off</mat-icon>\r\n  <ng-container *ngIf=\"value.metadata\">\r\n    <mat-icon class=\"meta-icon\" [matTooltip]=\"metadataTooltip\">local_offer</mat-icon>\r\n  </ng-container>\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItem } from '../../models/content-item.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss']\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataTooltip: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    // spm TODO: something about data.DraftEntity and data.PublishedEntity is missing. Search in eav-ui project\r\n    this.value = params.value;\r\n    const item: ContentItem = params.data;\r\n    if (item.Metadata) {\r\n      this.metadataTooltip = 'Metadata'\r\n        + `\\nType: ${item.Metadata.TargetType}`\r\n        + (item.Metadata.KeyNumber ? `\\nNumber: ${item.Metadata.KeyNumber}` : '')\r\n        + (item.Metadata.KeyString ? `\\nString: ${item.Metadata.KeyString}` : '')\r\n        + (item.Metadata.KeyGuid ? `\\nGuid: ${item.Metadata.KeyGuid}` : '');\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\n\r\nimport { ContentItemsActionsParams } from '../../models/content-items-actions-params';\r\nimport { ContentItem } from '../../models/content-item.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss']\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  params: ContentItemsActionsParams;\r\n  item: ContentItem;\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  delete() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Delete\" (click)=\"delete()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","<div [matTooltip]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { Component } from '@angular/core';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss']\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams;\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.params = params;\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: http://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","import { Component, OnInit, OnDestroy } from '@angular/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Router, ActivatedRoute, NavigationEnd } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { ColDef, AllCommunityModules, GridReadyEvent, CellClickedEvent, GridApi, ValueGetterParams } from '@ag-grid-community/all-modules';\r\n\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { EditForm } from '../app-administration/shared/models/edit-form.model';\r\nimport { EntitiesService } from './services/entities.service';\r\nimport { ContentExportService } from '../app-administration/shared/services/content-export.service';\r\nimport { eavConstants, EavMetadataKey, EavKeyTypeKey } from '../shared/constants/eav-constants';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './models/content-items-actions-params';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { keyFilters } from '../shared/constants/sessions-keys';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss']\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  items: ContentItem[];\r\n\r\n  private gridApi: GridApi;\r\n  frameworkComponents = {\r\n    pubMetaFilterComponent: PubMetaFilterComponent,\r\n    booleanFilterComponent: BooleanFilterComponent,\r\n    idFieldComponent: IdFieldComponent,\r\n    contentItemsStatusComponent: ContentItemsStatusComponent,\r\n    contentItemsActionsComponent: ContentItemsActionsComponent,\r\n    contentItemsEntityComponent: ContentItemsEntityComponent,\r\n  };\r\n  modules = AllCommunityModules;\r\n\r\n  private contentTypeStaticName: string;\r\n  private subscription = new Subscription();\r\n  private hasChild: boolean;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.hasChild = !!this.route.snapshot.firstChild;\r\n    this.contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchItems();\r\n    this.refreshOnChildClosed();\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      this.gridApi.setColumnDefs(columnDefs);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (filterModel) {\r\n        console.log('Will try to apply filter:', filterModel);\r\n        this.gridApi.setFilterModel(filterModel);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.subscription = null;\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items = items;\r\n    });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    let form: EditForm;\r\n    if (params === null) {\r\n      form = {\r\n        items: [{ ContentTypeName: this.contentTypeStaticName }],\r\n      };\r\n    } else {\r\n      const item: ContentItem = params.data;\r\n      form = {\r\n        items: [{ EntityId: item.Id.toString() }],\r\n      };\r\n    }\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  importItem() {\r\n    this.router.navigate(['import'], { relativeTo: this.route });\r\n  }\r\n\r\n  addMetadata() {\r\n    if (!confirm(\r\n      'This is a special operation to add an item which is metadata for another item.'\r\n      + ' If you didn\\'t understand that, this is not for you :). Continue?'\r\n    )) { return; }\r\n\r\n    const metadataKeys = Object.keys(eavConstants.metadata) as EavMetadataKey[];\r\n    const validTargetTypes = metadataKeys.map(metaKey => eavConstants.metadata[metaKey].type);\r\n    const targetType = parseInt(prompt(\r\n      'What kind of assignment do you want?'\r\n      + metadataKeys.map(metaKey => `\\n${eavConstants.metadata[metaKey].type}: ${eavConstants.metadata[metaKey].target}`),\r\n      eavConstants.metadata.entity.type.toString()\r\n    ), 10);\r\n    if (!targetType) { return alert('No target type entered. Cancelled'); }\r\n    if (!validTargetTypes.includes(targetType)) { return alert('Invalid target type. Cancelled'); }\r\n\r\n    const key = prompt('What key do you want?');\r\n    if (!key) { return alert('No key entered. Cancelled'); }\r\n\r\n    const keyTypeKeys = Object.keys(eavConstants.keyTypes) as EavKeyTypeKey[];\r\n    const validKeyTypes = keyTypeKeys.map(keyTypeKey => eavConstants.keyTypes[keyTypeKey]);\r\n    const keyType = prompt(\r\n      'What key type do you want?'\r\n      + keyTypeKeys.map(keyTypeKey => `\\n${eavConstants.keyTypes[keyTypeKey]}`),\r\n      eavConstants.keyTypes.number\r\n    );\r\n    if (!keyType) { return alert('No key type entered. Cancelled'); }\r\n    if (!validKeyTypes.includes(keyType)) { return alert('Invalid key type. Cancelled'); }\r\n    if (keyType === eavConstants.keyTypes.number && !parseInt(key, 10)) {\r\n      return alert('Key type number and key don\\'t match. Cancelled');\r\n    }\r\n\r\n    let target: string;\r\n    for (const metaKey of metadataKeys) {\r\n      if (targetType !== eavConstants.metadata[metaKey].type) { continue; }\r\n      target = eavConstants.metadata[metaKey].target;\r\n    }\r\n\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: this.contentTypeStaticName,\r\n        For: {\r\n          Target: target,\r\n          ...(keyType === eavConstants.keyTypes.guid && { Guid: key }),\r\n          ...(keyType === eavConstants.keyTypes.number && { Number: parseInt(key, 10) }),\r\n          ...(keyType === eavConstants.keyTypes.string && { String: key }),\r\n        },\r\n      }],\r\n    };\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n        const hadChild = this.hasChild;\r\n        this.hasChild = !!this.route.snapshot.firstChild;\r\n        if (!this.hasChild && hadChild) {\r\n          this.fetchItems();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter', valueGetter: this.idValueGetter,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n      },\r\n      {\r\n        headerName: 'Title', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      if (column.IsTitle) { continue; }\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case 'Entity':\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'DateTime':\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'Boolean':\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case 'Number':\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    this.router.navigate([`edit/${JSON.stringify(form)}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private idValueGetter(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`;\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.Metadata,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { TextFilterModel, NumberFilterModel } from '@ag-grid-community/all-modules';\r\n\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: { [key: string]: any };\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // filters can be published, metadata, string, number and boolean\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    const value = parsed[key];\r\n    if (typeof value === typeof '') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof 0) {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof true) {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Manage Content / Data</div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items\" [modules]=\"modules\"\r\n    [frameworkComponents]=\"frameworkComponents\" [enableCellTextSelection]=\"true\" [suppressScrollOnNewData]=\"true\"\r\n    [animateRows]=\"true\" [accentedSort]=\"true\" [valueCache]=\"true\" [headerHeight]=\"32\"\r\n    (gridReady)=\"onGridReady($event)\">\r\n  </ag-grid-angular>\r\n\r\n  <div class=\"actions-box\">\r\n    <button mat-icon-button matTooltip=\"Export\" (click)=\"exportContent()\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n    </button>\r\n    <button mat-icon-button matTooltip=\"Import\" (click)=\"importItem()\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n    </button>\r\n    <button mat-icon-button matTooltip=\"Add metadata\" (click)=\"addMetadata()\">\r\n      <mat-icon>local_offer</mat-icon>\r\n    </button>\r\n    <button mat-icon-button matTooltip=\"Debug filter\" (click)=\"debugFilter()\">\r\n      <mat-icon>filter_list</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Add item\" (click)=\"editItem(null)\">\r\n    <mat-icon>add</mat-icon>\r\n  </button>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}