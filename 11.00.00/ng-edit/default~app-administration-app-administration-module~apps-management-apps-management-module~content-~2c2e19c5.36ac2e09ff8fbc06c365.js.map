{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/@angular/cdk/__ivy_ngcc__/fesm5/text-field.js","C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/input.js","./src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["listenerOptions","passive","AutofillMonitor","_platform","_ngZone","this","_monitoredElements","Map","prototype","monitor","elementOrRef","_this","isBrowser","element","info","get","subject","asObservable","result","cssClass","listener","event","animationName","classList","contains","remove","run","next","target","isAutofilled","add","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵprov","factory","token","providedIn","ɵfac","t","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","ɵdir","type","selectors","outputs","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","nativeElement","Object","defineProperty","_minRows","value","_setMinHeight","enumerable","configurable","_maxRows","_setMaxHeight","resizeToFitContent","reset","minHeight","minRows","_cachedLineHeight","style","maxHeight","maxRows","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","ngDoCheck","force","textarea","_previousValue","placeholderText","placeholder","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","_noopInputHandler","_getDocument","defaultView","selectionStart","selectionEnd","isStopped","activeElement","setSelectionRange","hostAttrs","hostBindings","rf","ctx","inputs","enabled","exportAs","TextFieldModule","ɵmod","ɵinj","imports","MatTextareaAutosize","_super","apply","arguments","ɵMatTextareaAutosize_BaseFactory","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","features","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","MatInput","inputValueAccessor","ngZone","call","_uid","_isServer","_isNativeSelect","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","_inputValueAccessor","_previousNativeValue","id","IOS","el","nodeName","toLowerCase","multiple","disabled","_id","_validateType","_isTextarea","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","focus","options","_focusChanged","isFocused","readonly","_onInput","newValue","indexOf","Error","_isNeverEmpty","_isBadInput","validity","badInput","selectElement","firstOption","empty","selectedIndex","label","setDescribedByIds","ids","_ariaDescribedby","join","onContainerClick","hostVars","required","errorState","toString","errorStateMatcher","provide","useExisting","MatInputModule","providers","dialog","viewContainerRef","router","route","context","subscription","dialogConfig","snapshot","data","name","getComponent","component","initContext","init","dialogRef","open","backdropClass","panelClass","panelSize","showScrollbar","autoFocus","closeOnNavigation","top","afterClosed","pathFromRoot","length","parent","$2sxc","totalPopup","close","error","navigate","url","relativeTo","state","unsubscribe","DialogEntryComponent"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~2c2e19c5.36ac2e09ff8fbc06c365.js","sourcesContent":["import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { Injectable, NgZone, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nvar listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nvar AutofillMonitor = /** @class */ (function () {\n    function AutofillMonitor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    AutofillMonitor.prototype.monitor = function (elementOrRef) {\n        var _this = this;\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        var element = coerceElement(elementOrRef);\n        var info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject.asObservable();\n        }\n        var result = new Subject();\n        var cssClass = 'cdk-text-field-autofilled';\n        var listener = (function (event) {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: true }); });\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                _this._ngZone.run(function () { return result.next({ target: event.target, isAutofilled: false }); });\n            }\n        });\n        this._ngZone.runOutsideAngular(function () {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: function () {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result.asObservable();\n    };\n    AutofillMonitor.prototype.stopMonitoring = function (elementOrRef) {\n        var element = coerceElement(elementOrRef);\n        var info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    };\n    AutofillMonitor.prototype.ngOnDestroy = function () {\n        var _this = this;\n        this._monitoredElements.forEach(function (_info, element) { return _this.stopMonitoring(element); });\n    };\n    /** @nocollapse */\n    AutofillMonitor.ctorParameters = function () { return [\n        { type: Platform },\n        { type: NgZone }\n    ]; };\n    AutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n    return AutofillMonitor;\n}());\n/** A directive that can be used to monitor the autofill state of an input. */\nvar CdkAutofill = /** @class */ (function () {\n    function CdkAutofill(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    CdkAutofill.prototype.ngOnInit = function () {\n        var _this = this;\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(function (event) { return _this.cdkAutofill.emit(event); });\n    };\n    CdkAutofill.prototype.ngOnDestroy = function () {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    };\n    /** @nocollapse */\n    CdkAutofill.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: AutofillMonitor }\n    ]; };\n    CdkAutofill.propDecorators = {\n        cdkAutofill: [{ type: Output }]\n    };\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n    return CdkAutofill;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nvar CdkTextareaAutosize = /** @class */ (function () {\n    function CdkTextareaAutosize(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"minRows\", {\n        /** Minimum amount of rows in the textarea. */\n        get: function () { return this._minRows; },\n        set: function (value) {\n            this._minRows = coerceNumberProperty(value);\n            this._setMinHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"maxRows\", {\n        /** Maximum amount of rows in the textarea. */\n        get: function () { return this._maxRows; },\n        set: function (value) {\n            this._maxRows = coerceNumberProperty(value);\n            this._setMaxHeight();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkTextareaAutosize.prototype, \"enabled\", {\n        /** Whether autosizing is enabled or not */\n        get: function () { return this._enabled; },\n        set: function (value) {\n            value = coerceBooleanProperty(value);\n            // Only act if the actual value changed. This specifically helps to not run\n            // resizeToFitContent too early (i.e. before ngAfterViewInit)\n            if (this._enabled !== value) {\n                (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    CdkTextareaAutosize.prototype._setMinHeight = function () {\n        var minHeight = this.minRows && this._cachedLineHeight ?\n            this.minRows * this._cachedLineHeight + \"px\" : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    };\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    CdkTextareaAutosize.prototype._setMaxHeight = function () {\n        var maxHeight = this.maxRows && this._cachedLineHeight ?\n            this.maxRows * this._cachedLineHeight + \"px\" : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    };\n    CdkTextareaAutosize.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(function () {\n                var window = _this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(_this._destroyed))\n                    .subscribe(function () { return _this.resizeToFitContent(true); });\n            });\n        }\n    };\n    CdkTextareaAutosize.prototype.ngOnDestroy = function () {\n        this._destroyed.next();\n        this._destroyed.complete();\n    };\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    CdkTextareaAutosize.prototype._cacheTextareaLineHeight = function () {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        var textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    };\n    CdkTextareaAutosize.prototype.ngDoCheck = function () {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    };\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    CdkTextareaAutosize.prototype.resizeToFitContent = function (force) {\n        var _this = this;\n        if (force === void 0) { force = false; }\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        var textarea = this._elementRef.nativeElement;\n        var value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        var placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add('cdk-textarea-autosize-measuring');\n        textarea.placeholder = '';\n        // The cdk-textarea-autosize-measuring class includes a 2px padding to workaround an issue with\n        // Chrome, so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        var height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = height + \"px\";\n        textarea.classList.remove('cdk-textarea-autosize-measuring');\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(function () {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(function () { return _this._scrollToCaretPosition(textarea); });\n            }\n            else {\n                setTimeout(function () { return _this._scrollToCaretPosition(textarea); });\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    };\n    /**\n     * Resets the textarea to its original size\n     */\n    CdkTextareaAutosize.prototype.reset = function () {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    };\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    CdkTextareaAutosize.prototype._noopInputHandler = function () {\n        // no-op handler that ensures we're running change detection on input events.\n    };\n    /** Access injected document if available or fallback to global document reference */\n    CdkTextareaAutosize.prototype._getDocument = function () {\n        return this._document || document;\n    };\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    CdkTextareaAutosize.prototype._getWindow = function () {\n        var doc = this._getDocument();\n        return doc.defaultView || window;\n    };\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    CdkTextareaAutosize.prototype._scrollToCaretPosition = function (textarea) {\n        var selectionStart = textarea.selectionStart, selectionEnd = textarea.selectionEnd;\n        var document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    };\n    /** @nocollapse */\n    CdkTextareaAutosize.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    CdkTextareaAutosize.propDecorators = {\n        minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n        maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n        enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n        _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n    };\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n    return CdkTextareaAutosize;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar TextFieldModule = /** @class */ (function () {\n    function TextFieldModule() {\n    }\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill,\n        CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], function () { return []; }, null); })();\n    return TextFieldModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map","import { __extends } from 'tslib';\nimport { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nvar MatTextareaAutosize = /** @class */ (function (_super) {\n    __extends(MatTextareaAutosize, _super);\n    function MatTextareaAutosize() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMinRows\", {\n        get: function () { return this.minRows; },\n        set: function (value) { this.minRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosizeMaxRows\", {\n        get: function () { return this.maxRows; },\n        set: function (value) { this.maxRows = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matAutosize\", {\n        get: function () { return this.enabled; },\n        set: function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatTextareaAutosize.prototype, \"matTextareaAutosize\", {\n        get: function () { return this.enabled; },\n        set: function (value) { this.enabled = value; },\n        enumerable: true,\n        configurable: true\n    });\n    MatTextareaAutosize.propDecorators = {\n        matAutosizeMinRows: [{ type: Input }],\n        matAutosizeMaxRows: [{ type: Input }],\n        matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n        matTextareaAutosize: [{ type: Input }]\n    };\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatTextareaAutosize_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n    return MatTextareaAutosize;\n}(CdkTextareaAutosize));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(\"Input type \\\"\" + type + \"\\\" isn't supported by matInput.\");\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nvar MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nvar MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nvar nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nvar MatInputBase = /** @class */ (function () {\n    function MatInputBase(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n    return MatInputBase;\n}());\nvar _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nvar MatInput = /** @class */ (function (_super) {\n    __extends(MatInput, _super);\n    function MatInput(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone) {\n        var _this = _super.call(this, _defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl) || this;\n        _this._elementRef = _elementRef;\n        _this._platform = _platform;\n        _this.ngControl = ngControl;\n        _this._autofillMonitor = _autofillMonitor;\n        _this._uid = \"mat-input-\" + nextUniqueId++;\n        /** Whether the component is being rendered on the server. */\n        _this._isServer = false;\n        /** Whether the component is a native html select. */\n        _this._isNativeSelect = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        _this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        _this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        _this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        _this.autofilled = false;\n        _this._disabled = false;\n        _this._required = false;\n        _this._type = 'text';\n        _this._readonly = false;\n        _this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(function (t) { return getSupportedInputTypes().has(t); });\n        var element = _this._elementRef.nativeElement;\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        _this._inputValueAccessor = inputValueAccessor || element;\n        _this._previousNativeValue = _this.value;\n        // Force setter to be called in case id was not specified.\n        _this.id = _this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(function () {\n                _elementRef.nativeElement.addEventListener('keyup', function (event) {\n                    var el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        _this._isServer = !_this._platform.isBrowser;\n        _this._isNativeSelect = element.nodeName.toLowerCase() === 'select';\n        if (_this._isNativeSelect) {\n            _this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n        return _this;\n    }\n    Object.defineProperty(MatInput.prototype, \"disabled\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            if (this.ngControl && this.ngControl.disabled !== null) {\n                return this.ngControl.disabled;\n            }\n            return this._disabled;\n        },\n        set: function (value) {\n            this._disabled = coerceBooleanProperty(value);\n            // Browsers may not fire the blur event if the input is disabled too quickly.\n            // Reset from here to ensure that the element doesn't become stuck.\n            if (this.focused) {\n                this.focused = false;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"id\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this._id; },\n        set: function (value) { this._id = value || this._uid; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"required\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this._required; },\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"type\", {\n        /** Input type of the element. */\n        get: function () { return this._type; },\n        set: function (value) {\n            this._type = value || 'text';\n            this._validateType();\n            // When using Angular inputs, developers are no longer able to set the properties on the native\n            // input element. To ensure that bindings for `type` work, we need to sync the setter\n            // with the native property. Textarea elements don't support the type property or attribute.\n            if (!this._isTextarea() && getSupportedInputTypes().has(this._type)) {\n                this._elementRef.nativeElement.type = this._type;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"value\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () { return this._inputValueAccessor.value; },\n        set: function (value) {\n            if (value !== this.value) {\n                this._inputValueAccessor.value = value;\n                this.stateChanges.next();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"readonly\", {\n        /** Whether the element is readonly. */\n        get: function () { return this._readonly; },\n        set: function (value) { this._readonly = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    MatInput.prototype.ngOnInit = function () {\n        var _this = this;\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(function (event) {\n                _this.autofilled = event.isAutofilled;\n                _this.stateChanges.next();\n            });\n        }\n    };\n    MatInput.prototype.ngOnChanges = function () {\n        this.stateChanges.next();\n    };\n    MatInput.prototype.ngOnDestroy = function () {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    };\n    MatInput.prototype.ngDoCheck = function () {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n    };\n    /** Focuses the input. */\n    MatInput.prototype.focus = function (options) {\n        this._elementRef.nativeElement.focus(options);\n    };\n    /** Callback for the cases where the focused state of the input changes. */\n    MatInput.prototype._focusChanged = function (isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    };\n    MatInput.prototype._onInput = function () {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    };\n    /** Determines if the component host is a textarea. */\n    MatInput.prototype._isTextarea = function () {\n        return this._elementRef.nativeElement.nodeName.toLowerCase() === 'textarea';\n    };\n    /** Does some manual dirty checking on the native input `value` property. */\n    MatInput.prototype._dirtyCheckNativeValue = function () {\n        var newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    };\n    /** Make sure the input is a supported type. */\n    MatInput.prototype._validateType = function () {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    };\n    /** Checks whether the input type is one of the types that are never empty. */\n    MatInput.prototype._isNeverEmpty = function () {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    };\n    /** Checks whether the input is invalid based on the native validation. */\n    MatInput.prototype._isBadInput = function () {\n        // The `validity` property won't be present on platform-server.\n        var validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    };\n    Object.defineProperty(MatInput.prototype, \"empty\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n                !this.autofilled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatInput.prototype, \"shouldLabelFloat\", {\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        get: function () {\n            if (this._isNativeSelect) {\n                // For a single-selection `<select>`, the label should float when the selected option has\n                // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n                // overlapping the label with the options.\n                var selectElement = this._elementRef.nativeElement;\n                var firstOption = selectElement.options[0];\n                // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n                // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n                return this.focused || selectElement.multiple || !this.empty ||\n                    !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n            }\n            else {\n                return this.focused || !this.empty;\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    MatInput.prototype.setDescribedByIds = function (ids) {\n        this._ariaDescribedby = ids.join(' ');\n    };\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    MatInput.prototype.onContainerClick = function () {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    };\n    /** @nocollapse */\n    MatInput.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: Platform },\n        { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n        { type: NgForm, decorators: [{ type: Optional }] },\n        { type: FormGroupDirective, decorators: [{ type: Optional }] },\n        { type: ErrorStateMatcher },\n        { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n        { type: AutofillMonitor },\n        { type: NgZone }\n    ]; };\n    MatInput.propDecorators = {\n        disabled: [{ type: Input }],\n        id: [{ type: Input }],\n        placeholder: [{ type: Input }],\n        required: [{ type: Input }],\n        type: [{ type: Input }],\n        errorStateMatcher: [{ type: Input }],\n        value: [{ type: Input }],\n        readonly: [{ type: Input }]\n    };\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 10, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-describedby\", ctx._ariaDescribedby || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { disabled: \"disabled\", id: \"id\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\" }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\",\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    '[attr.placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-describedby]': '_ariaDescribedby || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()',\n                    '(blur)': '_focusChanged(false)',\n                    '(focus)': '_focusChanged(true)',\n                    '(input)': '_onInput()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }]; }, { disabled: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }] }); })();\n    return MatInput;\n}(_MatInputMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatInputModule = /** @class */ (function () {\n    function MatInputModule() {\n    }\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ],\n        TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput,\n        MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule,\n        MatInput,\n        MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], function () { return []; }, null); })();\n    return MatInputModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { Component, OnInit, OnDestroy, ViewContainerRef, Type } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { MatDialogRef, MatDialog } from '@angular/material/dialog';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { Context } from '../../services/context';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { angularConsoleLog } from '../../helpers/angular-console-log.helper';\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss']\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private subscription = new Subscription();\r\n  private dialogRef: MatDialogRef<any, any>;\r\n  private dialogConfig: DialogConfig;\r\n  private component: Type<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n  ) {\r\n    this.dialogConfig = this.route.snapshot.data.dialog;\r\n    if (!this.dialogConfig) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n  }\r\n\r\n  async ngOnInit() {\r\n    angularConsoleLog('Open dialog:', this.dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n    this.component = await this.dialogConfig.getComponent();\r\n    if (this.dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(this.component, {\r\n      backdropClass: 'dialog-backdrop',\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${this.dialogConfig.panelSize}`,\r\n        this.dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(this.dialogConfig.panelClass ? this.dialogConfig.panelClass : []),\r\n      ],\r\n      viewContainerRef: this.viewContainerRef,\r\n      autoFocus: false,\r\n      closeOnNavigation: false,\r\n      // spm NOTE: used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' }\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.dialogRef.afterClosed().subscribe((data: any) => {\r\n        angularConsoleLog('Dialog was closed:', this.dialogConfig.name, 'Data:', data);\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            (window.parent as any).$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n    this.subscription = null;\r\n    this.dialogConfig = null;\r\n    this.component = null;\r\n    this.dialogRef.close();\r\n    this.dialogRef = null;\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}