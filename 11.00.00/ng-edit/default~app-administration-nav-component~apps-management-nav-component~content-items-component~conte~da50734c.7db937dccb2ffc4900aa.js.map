{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideRowModel.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/clientSideNodeManager.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteBlock.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/gridSerializer.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterStage.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortStage.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/flattenStage.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/sortService.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/filterService.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModel/immutableService.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/client-side-row-model/dist/es6/clientSideRowModelModule.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteCache.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModel/infiniteRowModel.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/infinite-row-model/dist/es6/infiniteRowModelModule.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/csvCreator.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/downloader.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/xmlFactory.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExport/zipContainer.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/csv-export/dist/es6/csvExportModule.js","C:/Projects/eav-item-dialog-angular/node_modules/@ag-grid-community/all-modules/dist/es6/main.js"],"names":["RecursionType","ClientSideNodeManager","rootNode","gridOptionsWrapper","context","eventService","columnController","gridApi","columnApi","selectionController","this","nextId","allNodesMap","group","level","id","ROOT_NODE_ID","allLeafChildren","childrenAfterGroup","childrenAfterSort","childrenAfterFilter","postConstruct","prototype","getNodeChildDetails","getNodeChildDetailsFunc","suppressParentsInRowNodes","isSuppressParentsInRowNodes","doesDataFlower","getDoesDataFlowerFunc","isRowMasterFunc","getIsRowMasterFunc","doingLegacyTreeData","exists","doingMasterDetail","isMasterDetail","console","warn","getCopyOfNodesMap","cloneObject","getRowNode","setRowData","rowData","childrenMapped","result","recursiveFunction","TOP_LEVEL","setLeafChildren","updateRowData","rowDataTran","rowNodeOrder","isLegacyTreeData","rowNodeTransaction","remove","update","add","executeAdd","executeRemove","executeUpdate","sortRowNodesByOrder","_this","addIndex","reverse","forEach","item","newRowNode","addRowNode","push","rowIdsRemoved","anyNodesSelected","rowNode","lookupRowNode","isSelected","setSelected","clearRowTop","filter","updateGroupsFromChildrenSelections","dispatchEvent","type","EVENT_SELECTION_CHANGED","api","updateData","data","index","newNode","createNode","insertIntoArray","rowNodeIdFunc","getRowNodeIdFunc","error","find","parent","rowNodes","dataItem","node","wireBean","doingTreeData","isTreeData","nodeChildDetails","children","expanded","field","key","canFlower","master","rowGroupColumns","getRowGroupColumns","isExpanded","length","setDataAndId","toString","expandByDefault","getGroupDefaultExpanded","childAfterGroup","leafChild","__decorate","decorators","target","desc","d","c","arguments","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","extendStatics","RowType","ClientSideRowModel","init","refreshEverythingFunc","refreshModel","bind","step","STEP_EVERYTHING","refreshEverythingAfterColsChangedFunc","afterColumnsChanged","addModalPriorityEventListener","EVENT_COLUMN_EVERYTHING_CHANGED","EVENT_COLUMN_ROW_GROUP_CHANGED","EVENT_COLUMN_VALUE_CHANGED","onValueChanged","EVENT_COLUMN_PIVOT_CHANGED","STEP_PIVOT","EVENT_ROW_GROUP_OPENED","onRowGroupOpened","EVENT_FILTER_CHANGED","onFilterChanged","EVENT_SORT_CHANGED","onSortChanged","EVENT_COLUMN_PIVOT_MODE_CHANGED","refreshMapFunc","STEP_MAP","keepRenderedRows","animate","addEventListener","PROP_GROUP_REMOVE_SINGLE_CHILDREN","PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN","nodeManager","start","getRowData","ensureRowHeightsValid","startPixel","endPixel","startLimitIndex","endLimitIndex","atLeastOneChange","res","rowAtStartPixel","getRowIndexAtPixel","rowAtEndPixel","firstRow","Math","max","lastRow","min","rowIndex","getRow","rowHeightEstimated","rowHeight","getRowHeightForNode","setRowHeight","height","setRowTops","nextRowTop","rowsToDisplay","allowEstimate","getDomLayout","DOM_LAYOUT_NORMAL","missing","estimated","setRowTop","setRowIndex","resetRowTops","changedPath","hasChildren","isActive","sibling","detailNode","ensureRowsAtPixel","pixel","increment","indexAtPixelNow","removeFromArray","idx","keepEditingRows","highlightRowAtPixel","rowNodeAtPixelNow","highlight","rowTop","lastHighlightedRow","setHighlighted","getLastHighlightedRowNode","isLastRowFound","getRowCount","getTopLevelRowCount","getTopLevelRowDisplayedIndex","topLevelIndex","isGroupHideOpenParents","getRowBounds","isAnimateRows","event","afterDataChange","STEP_FILTER","STEP_SORT","getType","ROW_MODEL_TYPE_CLIENT_SIDE","isPivotActive","STEP_AGGREGATE","createChangePath","rowNodeTransactions","noTransactions","missingOrEmpty","setInactive","params","doRowGrouping","groupState","doFilter","doPivot","doAggregate","doSort","doRowsToDisplay","EVENT_MODEL_UPDATED","newData","newPage","$scope","window","setTimeout","$apply","isEmpty","rowsMissing","isReady","isRowsToRender","getNodesInRangeForSelection","firstInRange","lastInRange","firstRowHit","lastRowHit","groupsSelectChildren","isGroupSelectsChildren","forEachNodeAfterFilterAndSort","lookingForLastRow","inRange","childOfLastRow","isParentOfNode","setDatasource","datasource","getTopLevelNodes","getRootNode","isRowPresent","indexOf","pixelToMatch","bottomPointer","topPointer","last","midPointer","floor","currentRowNode","isRowInPixel","getCurrentPageHeight","forEachLeafNode","callback","forEachNode","recursivelyWalkNodesAndCallback","Normal","forEachNodeAfterFilter","AfterFilter","AfterFilterAndSort","forEachPivotNode","PivotNodes","nodes","recursionType","nodeChildren","leafGroup","aggregationStage","execute","expandOrCollapseAll","expand","usingTreeData","recursiveExpandOrCollapse","EVENT_EXPAND_COLLAPSE_ALL","source","sortStage","groupStage","merged_1","tran","pushAll","removeGroupsFromSelection","restoreGroupState","traverseNodesWithKey","filterStage","pivotStage","getGroupState","isRememberGroupStateWhenNewData","EVENT_ROW_DATA_CHANGED","batchUpdateRowData","rowDataTransaction","rowDataTransactionBatch","waitMillis","getBatchUpdateWaitMillis","executeBatchUpdateRowData","valueCache","onDataChanged","callbackFuncsBound","rowNodeTrans","tranItem","rowNodeTran","commonUpdateRowData","func","EVENT_ROW_DATA_UPDATED","flattenStage","onRowHeightChanged","resetRowHeights","FilterStage","filterService","selectableService","updateSelectableAfterFiltering","SortStage","sortOptions","sortController","getSortForRowController","sortActive","deltaSort","isDeltaSort","dirtyLeafNodes","calculateDirtyNodes","valueColumns","getValueColumns","noAggregations","sortService","sort","dirtyNodes","addNodesFunc","FlattenStage","value","skipLeafNodes","isPivotMode","showRootNode","recursivelyAddToRowsToDisplay","isGroupIncludeTotalFooter","ensureFooterNodeExists","addRowNodeToRowsToDisplay","rowsToFlatten","uiLevel","groupSuppressRow","isGroupSuppressRow","hideOpenParents","groupRemoveSingleChildren","isGroupRemoveSingleChildren","groupRemoveLowestSingleChildren","isGroupRemoveLowestSingleChildren","isParent","isRemovedSingleChildrenGroup","isRemovedLowestSingleChildrenGroup","excludedParent","isGroupIncludeFooter","createDetailNode","isGroupMultiAutoColumn","setUiLevel","groupNode","footerNode","keys","footer","oldRowTop","masterNode","detail","selectable","flower","childFlower","SortService","postSortFunc","getPostSortFunc","forEachChangedNodeDepthFirst","pullDownGroupDataForHideOpenParents","sortedRowNodes","doDeltaSort","doFullSort","map","sorted","slice","updateChildIndexes","updateGroupDataForHiddenOpenParents","mapNodeToSortedNode","compareRowNodes","pos","currentPos","cleanNodes","passesDirtyNodesCheck","passesChangedPathCheck","canSkip","cleanNodesMapped","sortedRowNode","changedNodes","mergeSortedArrays","arr1","arr2","j","compareResult","sortedNodeA","sortedNodeB","nodeA","nodeB","len","comparatorResult","sortOption","isInverted","inverter","valueA","getValue","column","valueB","getColDef","comparator","defaultComparator","isAccentedSort","valueService","listToSort","child","lastChild","setFirstChild","setLastChild","setChildIndex","executeFromRootNode","clearOperation","childRowNode","getGroupDisplayColumns","groupDisplayCol","showRowGroup","rowGroupColumn","getPrimaryColumn","setGroupValue","getId","parentToStealFrom","getFirstChildOfFirstChild","FilterService","filterActive","filterManager","isAnyFilterPresent","filterNodes","filterCallback","includeChildNodes","childNode","passBecauseChildren","passBecauseDataPasses","doesRowPassFilter","setAllChildrenCount","doingTreeDataFiltering","treeDataDepthFirstFilter_1","alreadyFoundInParent","foundInParent","setAllChildrenCountTreeData","allChildrenCount","setAllChildrenCountGridGrouping","isExcludeChildrenWhenTreeDataFiltering","ImmutableService","rowModel","clientSideRowModel","createTransactionForRowData","transaction","existingNodesMap","orderMap","isSuppressMaintainUnsortedOrder","existingNode","undefined","iterateObject","ClientSideRowModelModule","moduleName","beans","rowModels","clientSide","__extends","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","create","_super","InfiniteBlock","pageNumber","call","cacheParams","createBlankRowNode","setIndexAndTopOnRowNode","setRowNode","getContext","rowRenderer","getNodeIdPrefix","displayIndex","getRowUsingLocalIndex","loadFromDatasource","startRow","getStartRow","endRow","getEndRow","successCallback","pageLoaded","getVersion","failCallback","pageLoadFailed","sortModel","filterModel","getRows","InfiniteCache","setBeans","loggerFactory","logger","moveItemsDown","block","moveFromIndex","moveCount","indexOfLastRowToMove","currentRowIndex","nodeForThisIndex","setBlankRowNode","setDirty","insertItems","indexToInsert","items","pageStartRow","pageEndRow","newRowNodes","setNewData","insertItemsAtIndex","newNodes","forEachBlockInReverseOrder","isMaxRowFound","hack_setVirtualRowCount","getVirtualRowCount","onCacheUpdated","dontCreatePage","blockId","blockSize","getBlock","createBlock","blockNumber","newBlock","postCreateBlock","refreshCache","forEachBlockInOrder","checkBlockToLoad","decorator","InfiniteRowModel","apply","isRowModelInfinite","getRowHeightAsNumber","addEventListeners","addDestroyFunc","destroyCache","getDatasource","destroyDatasource","destroy","datasourceChanged","infiniteCache","addDestroyableEventListener","onColumnEverything","reset","isSortModelDifferent","jsonEquals","getSortModel","ROW_MODEL_TYPE_INFINITE","checkForDeprecated","ds","maxConcurrentRequests","maxPagesInCache","overflowSize","getRowNodesInRange","resetCache","createModelUpdatedEvent","getMaxConcurrentDatasourceRequests","blockLoadDebounceMillis","getBlockLoadDebounceMillis","rowNodeBlockLoader","getFilterModel","getCacheOverflowSize","initialRowCount","getInfiniteInitialRowCount","maxBlocksInCache","getMaxBlocksInCache","getCacheBlockSize","lastAccessedSequence","EVENT_CACHE_UPDATED","forEachNodeDeep","rowIndexForPixel","lastRowIndex","purgeCache","setVirtualRowCount","rowCount","maxRowFound","getBlockState","InfiniteRowModelModule","BaseGridSerializingSession","config","processCellCallback","processHeaderCallback","processGroupHeaderCallback","processRowGroupCallback","prepare","columnsToExport","firstGroupColumn","col","extractHeaderValue","getHeaderName","extractRowCellValue","valueForCell","isGroupUseEntireRow","createValueForGroupNode","processCell","getApi","getColumnApi","getDisplayNameForColumn","join","GridSerializer","serialize","gridSerializingSession","rowSkipper","shouldRowBeSkipped","skipSingleChildrenGroup","skipLowestSingleChildrenGroup","rowModelNormal","onlySelectedNonStandardModel","onlySelected","existsAndNotEmpty","columnKeys","getGridColumns","allColumns","GROUP_AUTO_COLUMN_ID","concat","getAllPrimaryColumns","getAllDisplayedColumns","customHeader","addCustomContent","columnGroups","groupInstanceIdCreator","displayedGroups","displayedGroupCreator","createDisplayedGroups","getGridBalancedTree","recursivelyAddHeaderGroups","skipHeader","gridRowIterator_1","onNewHeaderRow","onColumn","processRow","skipGroups","skipFooters","skipPinnedTop","rowPinned","skipPinnedBottom","rowAccumulator","onNewBodyRow","getCustomContentBelowRow","content","pinnedRowModel","forEachPinnedTopRow","onlySelectedAllPages","getSelectedNodes","forEachPinnedBottomRow","customFooter","parse","directChildrenHeaderGroups","columnGroupChild","getChildren","it","doAddHeaderHeader","gridRowIterator","onNewHeaderGroupingRow","columnIndex","name","columnGroup","getDisplayNameForColumnGroup","getLeafColumns","CsvSerializingSession","isFirstLine","columnSeparator","suppressQuotes","test","beginNewLine","replace","row","cell","putInQuotes","mergeAcross","appendEmptyCells","onNewHeaderGroupingRowColumn","header","span","count","onNewHeaderRowColumn","onNewBodyRowColumn","EXPORT_TYPE_CSV","stringValue","CsvCreator","downloader","gridSerializer","exportDataAsCsv","export","getDataAsCsv","getData","getMimeType","getDefaultFileName","getDefaultFileExtension","createSerializingSession","isExportSuppressed","isSuppressCsvExport","BaseCreator","userParams","_a","getMergedParamsAndData","mergedParams","fileName","download","packageFile","mergeDefaultParams","baseParams","getDefaultExportParams","assign","Blob","navigator","msSaveOrOpenBlob","Downloader","element","document","createElement","url_1","URL","createObjectURL","setAttribute","style","display","body","appendChild","MouseEvent","bubbles","cancelable","view","removeChild","revokeObjectURL","XmlFactory","createHeader","headerElement","version","encoding","standalone","headerStart","createXml","xmlElement","booleanTransformer","props","properties","prefixedAttributes","prefixedSet","returnAttributeIfPopulated","prefix","rawMap","textNode","xmlValue","crcTable","ZipContainer","folders","files","addFolder","path","created","Date","addFolders","paths","addFile","clearStream","getContent","mimeType","textOutput","buildFileStream","uInt8Output","buildUint8Array","fData","totalFiles","foData","lL","cL","_i","totalFiles_1","getHeader","fileHeader","folderHeader","buildFolderEnd","currentFile","offset","decToHex","utfPath","utf8_encode","isUTF8","time","convertTime","dt","convertDate","extraFields","uExtraFieldPath","getFromCrc32Table","tLen","cLen","lLen","uint8","Uint8Array","charCodeAt","crc","date","getHours","getMinutes","getSeconds","getFullYear","getMonth","getDate","CsvExportModule","AllCommunityModules"],"mappings":"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","file":"default~app-administration-nav-component~apps-management-nav-component~content-items-component~conte~da50734c.7db937dccb2ffc4900aa.js","sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, ChangedPath, Constants as constants, Constants, Events, GridOptionsWrapper, Optional, PostConstruct, RowNode } from \"@ag-grid-community/core\";\nimport { ClientSideNodeManager } from \"./clientSideNodeManager\";\nvar RecursionType;\n(function (RecursionType) {\n    RecursionType[RecursionType[\"Normal\"] = 0] = \"Normal\";\n    RecursionType[RecursionType[\"AfterFilter\"] = 1] = \"AfterFilter\";\n    RecursionType[RecursionType[\"AfterFilterAndSort\"] = 2] = \"AfterFilterAndSort\";\n    RecursionType[RecursionType[\"PivotNodes\"] = 3] = \"PivotNodes\";\n})(RecursionType || (RecursionType = {}));\nvar ClientSideRowModel = /** @class */ (function () {\n    function ClientSideRowModel() {\n    }\n    ClientSideRowModel.prototype.init = function () {\n        var refreshEverythingFunc = this.refreshModel.bind(this, { step: Constants.STEP_EVERYTHING });\n        var refreshEverythingAfterColsChangedFunc = this.refreshModel.bind(this, { step: Constants.STEP_EVERYTHING, afterColumnsChanged: true });\n        this.eventService.addModalPriorityEventListener(Events.EVENT_COLUMN_EVERYTHING_CHANGED, refreshEverythingAfterColsChangedFunc);\n        this.eventService.addModalPriorityEventListener(Events.EVENT_COLUMN_ROW_GROUP_CHANGED, refreshEverythingFunc);\n        this.eventService.addModalPriorityEventListener(Events.EVENT_COLUMN_VALUE_CHANGED, this.onValueChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(Events.EVENT_COLUMN_PIVOT_CHANGED, this.refreshModel.bind(this, { step: Constants.STEP_PIVOT }));\n        this.eventService.addModalPriorityEventListener(Events.EVENT_ROW_GROUP_OPENED, this.onRowGroupOpened.bind(this));\n        this.eventService.addModalPriorityEventListener(Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.eventService.addModalPriorityEventListener(Events.EVENT_COLUMN_PIVOT_MODE_CHANGED, refreshEverythingFunc);\n        var refreshMapFunc = this.refreshModel.bind(this, {\n            step: Constants.STEP_MAP,\n            keepRenderedRows: true,\n            animate: true\n        });\n        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_GROUP_REMOVE_SINGLE_CHILDREN, refreshMapFunc);\n        this.gridOptionsWrapper.addEventListener(GridOptionsWrapper.PROP_GROUP_REMOVE_LOWEST_SINGLE_CHILDREN, refreshMapFunc);\n        this.rootNode = new RowNode();\n        this.nodeManager = new ClientSideNodeManager(this.rootNode, this.gridOptionsWrapper, this.context, this.eventService, this.columnController, this.gridApi, this.columnApi, this.selectionController);\n        this.context.wireBean(this.rootNode);\n    };\n    ClientSideRowModel.prototype.start = function () {\n        var rowData = this.gridOptionsWrapper.getRowData();\n        if (rowData) {\n            this.setRowData(rowData);\n        }\n    };\n    ClientSideRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        var atLeastOneChange;\n        var res = false;\n        // we do this multiple times as changing the row heights can also change the first and last rows,\n        // so the first pass can make lots of rows smaller, which means the second pass we end up changing\n        // more rows.\n        do {\n            atLeastOneChange = false;\n            var rowAtStartPixel = this.getRowIndexAtPixel(startPixel);\n            var rowAtEndPixel = this.getRowIndexAtPixel(endPixel);\n            // keep check to current page if doing pagination\n            var firstRow = Math.max(rowAtStartPixel, startLimitIndex);\n            var lastRow = Math.min(rowAtEndPixel, endLimitIndex);\n            for (var rowIndex = firstRow; rowIndex <= lastRow; rowIndex++) {\n                var rowNode = this.getRow(rowIndex);\n                if (rowNode.rowHeightEstimated) {\n                    var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode);\n                    rowNode.setRowHeight(rowHeight.height);\n                    atLeastOneChange = true;\n                    res = true;\n                }\n            }\n            if (atLeastOneChange) {\n                this.setRowTops();\n            }\n        } while (atLeastOneChange);\n        return res;\n    };\n    ClientSideRowModel.prototype.setRowTops = function () {\n        var nextRowTop = 0;\n        for (var i = 0; i < this.rowsToDisplay.length; i++) {\n            // we don't estimate if doing fullHeight or autoHeight, as all rows get rendered all the time\n            // with these two layouts.\n            var allowEstimate = this.gridOptionsWrapper.getDomLayout() === Constants.DOM_LAYOUT_NORMAL;\n            var rowNode = this.rowsToDisplay[i];\n            if (_.missing(rowNode.rowHeight)) {\n                var rowHeight = this.gridOptionsWrapper.getRowHeightForNode(rowNode, allowEstimate);\n                rowNode.setRowHeight(rowHeight.height, rowHeight.estimated);\n            }\n            rowNode.setRowTop(nextRowTop);\n            rowNode.setRowIndex(i);\n            nextRowTop += rowNode.rowHeight;\n        }\n    };\n    ClientSideRowModel.prototype.resetRowTops = function (rowNode, changedPath) {\n        rowNode.clearRowTop();\n        if (rowNode.hasChildren()) {\n            if (rowNode.childrenAfterGroup) {\n                // if a changedPath is active, it means we are here because of a transaction update or\n                // a change detection. neither of these impacts the open/closed state of groups. so if\n                // a group is not open this time, it was not open last time. so we know all closed groups\n                // already have their top positions cleared. so there is no need to traverse all the way\n                // when changedPath is active and the rowNode is not expanded.\n                var skipChildren = changedPath.isActive() && !rowNode.expanded;\n                if (!skipChildren) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        this.resetRowTops(rowNode.childrenAfterGroup[i], changedPath);\n                    }\n                }\n            }\n            if (rowNode.sibling) {\n                rowNode.sibling.clearRowTop();\n            }\n        }\n        if (rowNode.detailNode) {\n            rowNode.detailNode.clearRowTop();\n        }\n    };\n    // returns false if row was moved, otherwise true\n    ClientSideRowModel.prototype.ensureRowsAtPixel = function (rowNodes, pixel, increment) {\n        var _this = this;\n        if (increment === void 0) { increment = 0; }\n        var indexAtPixelNow = this.getRowIndexAtPixel(pixel);\n        var rowNodeAtPixelNow = this.getRow(indexAtPixelNow);\n        if (rowNodeAtPixelNow === rowNodes[0]) {\n            return false;\n        }\n        rowNodes.forEach(function (rowNode) {\n            _.removeFromArray(_this.rootNode.allLeafChildren, rowNode);\n        });\n        rowNodes.forEach(function (rowNode, idx) {\n            _.insertIntoArray(_this.rootNode.allLeafChildren, rowNode, indexAtPixelNow + increment + idx);\n        });\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        return true;\n    };\n    ClientSideRowModel.prototype.highlightRowAtPixel = function (rowNode, pixel) {\n        var indexAtPixelNow = pixel != null ? this.getRowIndexAtPixel(pixel) : null;\n        var rowNodeAtPixelNow = indexAtPixelNow != null ? this.getRow(indexAtPixelNow) : null;\n        if (rowNodeAtPixelNow === rowNode || !rowNode || pixel == null) {\n            if (this.lastHighlightedRow) {\n                this.lastHighlightedRow.setHighlighted(null);\n                this.lastHighlightedRow = null;\n            }\n            return;\n        }\n        var rowTop = rowNodeAtPixelNow.rowTop, rowHeight = rowNodeAtPixelNow.rowHeight;\n        var highlight = pixel - rowTop < rowHeight / 2 ? 'above' : 'below';\n        if (this.lastHighlightedRow && this.lastHighlightedRow !== rowNodeAtPixelNow) {\n            this.lastHighlightedRow.setHighlighted(null);\n            this.lastHighlightedRow = null;\n        }\n        rowNodeAtPixelNow.setHighlighted(highlight);\n        this.lastHighlightedRow = rowNodeAtPixelNow;\n    };\n    ClientSideRowModel.prototype.getLastHighlightedRowNode = function () {\n        return this.lastHighlightedRow;\n    };\n    ClientSideRowModel.prototype.isLastRowFound = function () {\n        return true;\n    };\n    ClientSideRowModel.prototype.getRowCount = function () {\n        if (this.rowsToDisplay) {\n            return this.rowsToDisplay.length;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowCount = function () {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return 1;\n        }\n        return this.rootNode.childrenAfterFilter ? this.rootNode.childrenAfterFilter.length : 0;\n    };\n    ClientSideRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        var showingRootNode = this.rowsToDisplay && this.rowsToDisplay[0] === this.rootNode;\n        if (showingRootNode) {\n            return topLevelIndex;\n        }\n        var rowNode = this.rootNode.childrenAfterSort[topLevelIndex];\n        if (this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            // if hideOpenParents, and this row open, then this row is now displayed at this index, first child is\n            while (rowNode.expanded && rowNode.childrenAfterSort && rowNode.childrenAfterSort.length > 0) {\n                rowNode = rowNode.childrenAfterSort[0];\n            }\n        }\n        return rowNode.rowIndex;\n    };\n    ClientSideRowModel.prototype.getRowBounds = function (index) {\n        if (_.missing(this.rowsToDisplay)) {\n            return null;\n        }\n        var rowNode = this.rowsToDisplay[index];\n        if (rowNode) {\n            return {\n                rowTop: rowNode.rowTop,\n                rowHeight: rowNode.rowHeight\n            };\n        }\n        return null;\n    };\n    ClientSideRowModel.prototype.onRowGroupOpened = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onFilterChanged = function (event) {\n        if (event.afterDataChange) {\n            return;\n        }\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_FILTER, keepRenderedRows: true, animate: animate });\n    };\n    ClientSideRowModel.prototype.onSortChanged = function () {\n        var animate = this.gridOptionsWrapper.isAnimateRows();\n        this.refreshModel({ step: Constants.STEP_SORT, keepRenderedRows: true, animate: animate, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n    };\n    ClientSideRowModel.prototype.onValueChanged = function () {\n        if (this.columnController.isPivotActive()) {\n            this.refreshModel({ step: Constants.STEP_PIVOT });\n        }\n        else {\n            this.refreshModel({ step: Constants.STEP_AGGREGATE });\n        }\n    };\n    ClientSideRowModel.prototype.createChangePath = function (rowNodeTransactions) {\n        // for updates, if the row is updated at all, then we re-calc all the values\n        // in that row. we could compare each value to each old value, however if we\n        // did this, we would be calling the valueService twice, once on the old value\n        // and once on the new value. so it's less valueGetter calls if we just assume\n        // each column is different. that way the changedPath is used so that only\n        // the impacted parent rows are recalculated, parents who's children have\n        // not changed are not impacted.\n        var noTransactions = _.missingOrEmpty(rowNodeTransactions);\n        var changedPath = new ChangedPath(false, this.rootNode);\n        if (noTransactions || this.gridOptionsWrapper.isTreeData()) {\n            changedPath.setInactive();\n        }\n        return changedPath;\n    };\n    ClientSideRowModel.prototype.refreshModel = function (params) {\n        // this goes through the pipeline of stages. what's in my head is similar\n        // to the diagram on this page:\n        // http://commons.apache.org/sandbox/commons-pipeline/pipeline_basics.html\n        // however we want to keep the results of each stage, hence we manually call\n        // each step rather than have them chain each other.\n        var _this = this;\n        // fallthrough in below switch is on purpose,\n        // eg if STEP_FILTER, then all steps below this\n        // step get done\n        // let start: number;\n        // console.log('======= start =======');\n        var changedPath = this.createChangePath(params.rowNodeTransactions);\n        switch (params.step) {\n            case constants.STEP_EVERYTHING:\n                // start = new Date().getTime();\n                this.doRowGrouping(params.groupState, params.rowNodeTransactions, params.rowNodeOrder, changedPath, params.afterColumnsChanged);\n            // console.log('rowGrouping = ' + (new Date().getTime() - start));\n            case constants.STEP_FILTER:\n                // start = new Date().getTime();\n                this.doFilter(changedPath);\n            // console.log('filter = ' + (new Date().getTime() - start));\n            case constants.STEP_PIVOT:\n                this.doPivot(changedPath);\n            case constants.STEP_AGGREGATE: // depends on agg fields\n                // start = new Date().getTime();\n                this.doAggregate(changedPath);\n            // console.log('aggregation = ' + (new Date().getTime() - start));\n            case constants.STEP_SORT:\n                // start = new Date().getTime();\n                this.doSort(params.rowNodeTransactions, changedPath);\n            // console.log('sort = ' + (new Date().getTime() - start));\n            case constants.STEP_MAP:\n                // start = new Date().getTime();\n                this.doRowsToDisplay();\n            // console.log('rowsToDisplay = ' + (new Date().getTime() - start));\n        }\n        // set all row tops to null, then set row tops on all visible rows. if we don't\n        // do this, then the algorithm below only sets row tops, old row tops from old rows\n        // will still lie around\n        this.resetRowTops(this.rootNode, changedPath);\n        this.setRowTops();\n        var event = {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            animate: params.animate,\n            keepRenderedRows: params.keepRenderedRows,\n            newData: params.newData,\n            newPage: false\n        };\n        this.eventService.dispatchEvent(event);\n        if (this.$scope) {\n            window.setTimeout(function () {\n                _this.$scope.$apply();\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.isEmpty = function () {\n        var rowsMissing;\n        var doingLegacyTreeData = _.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (doingLegacyTreeData) {\n            rowsMissing = _.missing(this.rootNode.childrenAfterGroup) || this.rootNode.childrenAfterGroup.length === 0;\n        }\n        else {\n            rowsMissing = _.missing(this.rootNode.allLeafChildren) || this.rootNode.allLeafChildren.length === 0;\n        }\n        var empty = _.missing(this.rootNode) || rowsMissing || !this.columnController.isReady();\n        return empty;\n    };\n    ClientSideRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.rowsToDisplay) && this.rowsToDisplay.length > 0;\n    };\n    ClientSideRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        // if lastSelectedNode is missing, we start at the first row\n        var firstRowHit = !lastInRange;\n        var lastRowHit = false;\n        var lastRow;\n        var result = [];\n        var groupsSelectChildren = this.gridOptionsWrapper.isGroupSelectsChildren();\n        this.forEachNodeAfterFilterAndSort(function (rowNode) {\n            var lookingForLastRow = firstRowHit && !lastRowHit;\n            // check if we need to flip the select switch\n            if (!firstRowHit) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    firstRowHit = true;\n                }\n            }\n            var skipThisGroupNode = rowNode.group && groupsSelectChildren;\n            if (!skipThisGroupNode) {\n                var inRange = firstRowHit && !lastRowHit;\n                var childOfLastRow = rowNode.isParentOfNode(lastRow);\n                if (inRange || childOfLastRow) {\n                    result.push(rowNode);\n                }\n            }\n            if (lookingForLastRow) {\n                if (rowNode === lastInRange || rowNode === firstInRange) {\n                    lastRowHit = true;\n                    if (rowNode === lastInRange) {\n                        lastRow = lastInRange;\n                    }\n                    else {\n                        lastRow = firstInRange;\n                    }\n                }\n            }\n        });\n        return result;\n    };\n    ClientSideRowModel.prototype.setDatasource = function (datasource) {\n        console.error('ag-Grid: should never call setDatasource on clientSideRowController');\n    };\n    ClientSideRowModel.prototype.getTopLevelNodes = function () {\n        return this.rootNode ? this.rootNode.childrenAfterGroup : null;\n    };\n    ClientSideRowModel.prototype.getRootNode = function () {\n        return this.rootNode;\n    };\n    ClientSideRowModel.prototype.getRow = function (index) {\n        return this.rowsToDisplay[index];\n    };\n    ClientSideRowModel.prototype.isRowPresent = function (rowNode) {\n        return this.rowsToDisplay.indexOf(rowNode) >= 0;\n    };\n    ClientSideRowModel.prototype.getRowIndexAtPixel = function (pixelToMatch) {\n        if (this.isEmpty()) {\n            return -1;\n        }\n        // do binary search of tree\n        // http://oli.me.uk/2013/06/08/searching-javascript-arrays-with-a-binary-search/\n        var bottomPointer = 0;\n        var topPointer = this.rowsToDisplay.length - 1;\n        // quick check, if the pixel is out of bounds, then return last row\n        if (pixelToMatch <= 0) {\n            // if pixel is less than or equal zero, it's always the first row\n            return 0;\n        }\n        var lastNode = _.last(this.rowsToDisplay);\n        if (lastNode.rowTop <= pixelToMatch) {\n            return this.rowsToDisplay.length - 1;\n        }\n        while (true) {\n            var midPointer = Math.floor((bottomPointer + topPointer) / 2);\n            var currentRowNode = this.rowsToDisplay[midPointer];\n            if (this.isRowInPixel(currentRowNode, pixelToMatch)) {\n                return midPointer;\n            }\n            else if (currentRowNode.rowTop < pixelToMatch) {\n                bottomPointer = midPointer + 1;\n            }\n            else if (currentRowNode.rowTop > pixelToMatch) {\n                topPointer = midPointer - 1;\n            }\n        }\n    };\n    ClientSideRowModel.prototype.isRowInPixel = function (rowNode, pixelToMatch) {\n        var topPixel = rowNode.rowTop;\n        var bottomPixel = rowNode.rowTop + rowNode.rowHeight;\n        var pixelInRow = topPixel <= pixelToMatch && bottomPixel > pixelToMatch;\n        return pixelInRow;\n    };\n    ClientSideRowModel.prototype.getCurrentPageHeight = function () {\n        if (this.rowsToDisplay && this.rowsToDisplay.length > 0) {\n            var lastRow = _.last(this.rowsToDisplay);\n            var lastPixel = lastRow.rowTop + lastRow.rowHeight;\n            return lastPixel;\n        }\n        return 0;\n    };\n    ClientSideRowModel.prototype.forEachLeafNode = function (callback) {\n        if (this.rootNode.allLeafChildren) {\n            this.rootNode.allLeafChildren.forEach(function (rowNode, index) { return callback(rowNode, index); });\n        }\n    };\n    ClientSideRowModel.prototype.forEachNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterGroup, callback, RecursionType.Normal, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilter = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterFilter, callback, RecursionType.AfterFilter, 0);\n    };\n    ClientSideRowModel.prototype.forEachNodeAfterFilterAndSort = function (callback) {\n        this.recursivelyWalkNodesAndCallback(this.rootNode.childrenAfterSort, callback, RecursionType.AfterFilterAndSort, 0);\n    };\n    ClientSideRowModel.prototype.forEachPivotNode = function (callback) {\n        this.recursivelyWalkNodesAndCallback([this.rootNode], callback, RecursionType.PivotNodes, 0);\n    };\n    // iterates through each item in memory, and calls the callback function\n    // nodes - the rowNodes to traverse\n    // callback - the user provided callback\n    // recursion type - need this to know what child nodes to recurse, eg if looking at all nodes, or filtered notes etc\n    // index - works similar to the index in forEach in javascript's array function\n    ClientSideRowModel.prototype.recursivelyWalkNodesAndCallback = function (nodes, callback, recursionType, index) {\n        if (!nodes) {\n            return index;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            var node = nodes[i];\n            callback(node, index++);\n            // go to the next level if it is a group\n            if (node.hasChildren()) {\n                // depending on the recursion type, we pick a difference set of children\n                var nodeChildren = null;\n                switch (recursionType) {\n                    case RecursionType.Normal:\n                        nodeChildren = node.childrenAfterGroup;\n                        break;\n                    case RecursionType.AfterFilter:\n                        nodeChildren = node.childrenAfterFilter;\n                        break;\n                    case RecursionType.AfterFilterAndSort:\n                        nodeChildren = node.childrenAfterSort;\n                        break;\n                    case RecursionType.PivotNodes:\n                        // for pivot, we don't go below leafGroup levels\n                        nodeChildren = !node.leafGroup ? node.childrenAfterSort : null;\n                        break;\n                }\n                if (nodeChildren) {\n                    index = this.recursivelyWalkNodesAndCallback(nodeChildren, callback, recursionType, index);\n                }\n            }\n        }\n        return index;\n    };\n    // it's possible to recompute the aggregate without doing the other parts\n    // + gridApi.recomputeAggregates()\n    ClientSideRowModel.prototype.doAggregate = function (changedPath) {\n        if (this.aggregationStage) {\n            this.aggregationStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    // + gridApi.expandAll()\n    // + gridApi.collapseAll()\n    ClientSideRowModel.prototype.expandOrCollapseAll = function (expand) {\n        var usingTreeData = this.gridOptionsWrapper.isTreeData();\n        if (this.rootNode) {\n            recursiveExpandOrCollapse(this.rootNode.childrenAfterGroup);\n        }\n        function recursiveExpandOrCollapse(rowNodes) {\n            if (!rowNodes) {\n                return;\n            }\n            rowNodes.forEach(function (rowNode) {\n                var shouldExpandOrCollapse = usingTreeData ? _.exists(rowNode.childrenAfterGroup) : rowNode.group;\n                if (shouldExpandOrCollapse) {\n                    rowNode.expanded = expand;\n                    recursiveExpandOrCollapse(rowNode.childrenAfterGroup);\n                }\n            });\n        }\n        this.refreshModel({ step: Constants.STEP_MAP });\n        var eventSource = expand ? 'expandAll' : 'collapseAll';\n        var event = {\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            type: Events.EVENT_EXPAND_COLLAPSE_ALL,\n            source: eventSource\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doSort = function (rowNodeTransactions, changedPath) {\n        this.sortStage.execute({\n            rowNode: this.rootNode,\n            rowNodeTransactions: rowNodeTransactions,\n            changedPath: changedPath\n        });\n    };\n    ClientSideRowModel.prototype.doRowGrouping = function (groupState, rowNodeTransactions, rowNodeOrder, changedPath, afterColumnsChanged) {\n        // grouping is enterprise only, so if service missing, skip the step\n        var doingLegacyTreeData = _.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (doingLegacyTreeData) {\n            return;\n        }\n        if (this.groupStage) {\n            if (rowNodeTransactions) {\n                var merged_1 = {\n                    add: [],\n                    remove: [],\n                    update: []\n                };\n                rowNodeTransactions.forEach(function (tran) {\n                    _.pushAll(merged_1.add, tran.add);\n                    _.pushAll(merged_1.remove, tran.remove);\n                    _.pushAll(merged_1.update, tran.update);\n                });\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    rowNodeTransaction: merged_1,\n                    rowNodeOrder: rowNodeOrder,\n                    changedPath: changedPath\n                });\n            }\n            else {\n                // groups are about to get disposed, so need to deselect any that are selected\n                this.selectionController.removeGroupsFromSelection();\n                this.groupStage.execute({\n                    rowNode: this.rootNode,\n                    changedPath: changedPath,\n                    afterColumnsChanged: afterColumnsChanged\n                });\n                // set open/closed state on groups\n                this.restoreGroupState(groupState);\n            }\n            if (this.gridOptionsWrapper.isGroupSelectsChildren()) {\n                this.selectionController.updateGroupsFromChildrenSelections(changedPath);\n            }\n        }\n        else {\n            this.rootNode.childrenAfterGroup = this.rootNode.allLeafChildren;\n        }\n    };\n    ClientSideRowModel.prototype.restoreGroupState = function (groupState) {\n        if (!groupState) {\n            return;\n        }\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) {\n            // if the group was open last time, then open it this time. however\n            // if was not open last time, then don't touch the group, so the 'groupDefaultExpanded'\n            // setting will take effect.\n            if (typeof groupState[key] === 'boolean') {\n                node.expanded = groupState[key];\n            }\n        });\n    };\n    ClientSideRowModel.prototype.doFilter = function (changedPath) {\n        this.filterStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n    };\n    ClientSideRowModel.prototype.doPivot = function (changedPath) {\n        if (this.pivotStage) {\n            this.pivotStage.execute({ rowNode: this.rootNode, changedPath: changedPath });\n        }\n    };\n    ClientSideRowModel.prototype.getGroupState = function () {\n        if (!this.rootNode.childrenAfterGroup || !this.gridOptionsWrapper.isRememberGroupStateWhenNewData()) {\n            return null;\n        }\n        var result = {};\n        _.traverseNodesWithKey(this.rootNode.childrenAfterGroup, function (node, key) { return result[key] = node.expanded; });\n        return result;\n    };\n    ClientSideRowModel.prototype.getCopyOfNodesMap = function () {\n        return this.nodeManager.getCopyOfNodesMap();\n    };\n    ClientSideRowModel.prototype.getRowNode = function (id) {\n        return this.nodeManager.getRowNode(id);\n    };\n    // rows: the rows to put into the model\n    ClientSideRowModel.prototype.setRowData = function (rowData) {\n        // no need to invalidate cache, as the cache is stored on the rowNode,\n        // so new rowNodes means the cache is wiped anyway.\n        // remember group state, so we can expand groups that should be expanded\n        var groupState = this.getGroupState();\n        this.nodeManager.setRowData(rowData);\n        // this event kicks off:\n        // - clears selection\n        // - updates filters\n        // - shows 'no rows' overlay if needed\n        var rowDataChangedEvent = {\n            type: Events.EVENT_ROW_DATA_CHANGED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(rowDataChangedEvent);\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            groupState: groupState,\n            newData: true\n        });\n    };\n    ClientSideRowModel.prototype.batchUpdateRowData = function (rowDataTransaction, callback) {\n        var _this = this;\n        if (!this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch = [];\n            var waitMillis = this.gridOptionsWrapper.getBatchUpdateWaitMillis();\n            window.setTimeout(function () {\n                _this.executeBatchUpdateRowData();\n                _this.rowDataTransactionBatch = null;\n            }, waitMillis);\n        }\n        this.rowDataTransactionBatch.push({ rowDataTransaction: rowDataTransaction, callback: callback });\n    };\n    ClientSideRowModel.prototype.executeBatchUpdateRowData = function () {\n        var _this = this;\n        this.valueCache.onDataChanged();\n        var callbackFuncsBound = [];\n        var rowNodeTrans = [];\n        if (this.rowDataTransactionBatch) {\n            this.rowDataTransactionBatch.forEach(function (tranItem) {\n                var rowNodeTran = _this.nodeManager.updateRowData(tranItem.rowDataTransaction, null);\n                rowNodeTrans.push(rowNodeTran);\n                if (tranItem.callback) {\n                    callbackFuncsBound.push(tranItem.callback.bind(null, rowNodeTran));\n                }\n            });\n        }\n        this.commonUpdateRowData(rowNodeTrans);\n        // do callbacks in next VM turn so it's async\n        if (callbackFuncsBound.length > 0) {\n            window.setTimeout(function () {\n                callbackFuncsBound.forEach(function (func) { return func(); });\n            }, 0);\n        }\n    };\n    ClientSideRowModel.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        this.valueCache.onDataChanged();\n        var rowNodeTran = this.nodeManager.updateRowData(rowDataTran, rowNodeOrder);\n        this.commonUpdateRowData([rowNodeTran], rowNodeOrder);\n        return rowNodeTran;\n    };\n    // common to updateRowData and batchUpdateRowData\n    ClientSideRowModel.prototype.commonUpdateRowData = function (rowNodeTrans, rowNodeOrder) {\n        this.refreshModel({\n            step: Constants.STEP_EVERYTHING,\n            rowNodeTransactions: rowNodeTrans,\n            rowNodeOrder: rowNodeOrder,\n            keepRenderedRows: true,\n            animate: true,\n            keepEditingRows: true\n        });\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    ClientSideRowModel.prototype.doRowsToDisplay = function () {\n        this.rowsToDisplay = this.flattenStage.execute({ rowNode: this.rootNode });\n    };\n    ClientSideRowModel.prototype.onRowHeightChanged = function () {\n        this.refreshModel({ step: Constants.STEP_MAP, keepRenderedRows: true, keepEditingRows: true });\n    };\n    ClientSideRowModel.prototype.resetRowHeights = function () {\n        this.forEachNode(function (rowNode) { return rowNode.setRowHeight(null); });\n        this.onRowHeightChanged();\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ClientSideRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], ClientSideRowModel.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], ClientSideRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('$scope')\n    ], ClientSideRowModel.prototype, \"$scope\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], ClientSideRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('eventService')\n    ], ClientSideRowModel.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('context')\n    ], ClientSideRowModel.prototype, \"context\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], ClientSideRowModel.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('valueCache')\n    ], ClientSideRowModel.prototype, \"valueCache\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], ClientSideRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], ClientSideRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('filterStage')\n    ], ClientSideRowModel.prototype, \"filterStage\", void 0);\n    __decorate([\n        Autowired('sortStage')\n    ], ClientSideRowModel.prototype, \"sortStage\", void 0);\n    __decorate([\n        Autowired('flattenStage')\n    ], ClientSideRowModel.prototype, \"flattenStage\", void 0);\n    __decorate([\n        Optional('groupStage')\n    ], ClientSideRowModel.prototype, \"groupStage\", void 0);\n    __decorate([\n        Optional('aggregationStage')\n    ], ClientSideRowModel.prototype, \"aggregationStage\", void 0);\n    __decorate([\n        Optional('pivotStage')\n    ], ClientSideRowModel.prototype, \"pivotStage\", void 0);\n    __decorate([\n        PostConstruct\n    ], ClientSideRowModel.prototype, \"init\", null);\n    ClientSideRowModel = __decorate([\n        Bean('rowModel')\n    ], ClientSideRowModel);\n    return ClientSideRowModel;\n}());\nexport { ClientSideRowModel };\n","import { RowNode, Events, _ } from \"@ag-grid-community/core\";\nvar ClientSideNodeManager = /** @class */ (function () {\n    function ClientSideNodeManager(rootNode, gridOptionsWrapper, context, eventService, columnController, gridApi, columnApi, selectionController) {\n        this.nextId = 0;\n        // when user is provide the id's, we also keep a map of ids to row nodes for convenience\n        this.allNodesMap = {};\n        this.rootNode = rootNode;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.context = context;\n        this.eventService = eventService;\n        this.columnController = columnController;\n        this.gridApi = gridApi;\n        this.columnApi = columnApi;\n        this.selectionController = selectionController;\n        this.rootNode.group = true;\n        this.rootNode.level = -1;\n        this.rootNode.id = ClientSideNodeManager.ROOT_NODE_ID;\n        this.rootNode.allLeafChildren = [];\n        this.rootNode.childrenAfterGroup = [];\n        this.rootNode.childrenAfterSort = [];\n        this.rootNode.childrenAfterFilter = [];\n        // if we make this class a bean, then can annotate postConstruct\n        this.postConstruct();\n    }\n    // @PostConstruct - this is not a bean, so postConstruct called by constructor\n    ClientSideNodeManager.prototype.postConstruct = function () {\n        // func below doesn't have 'this' pointer, so need to pull out these bits\n        this.getNodeChildDetails = this.gridOptionsWrapper.getNodeChildDetailsFunc();\n        this.suppressParentsInRowNodes = this.gridOptionsWrapper.isSuppressParentsInRowNodes();\n        this.doesDataFlower = this.gridOptionsWrapper.getDoesDataFlowerFunc();\n        this.isRowMasterFunc = this.gridOptionsWrapper.getIsRowMasterFunc();\n        this.doingLegacyTreeData = _.exists(this.getNodeChildDetails);\n        this.doingMasterDetail = this.gridOptionsWrapper.isMasterDetail();\n        if (this.getNodeChildDetails) {\n            console.warn(\"ag-Grid: the callback nodeChildDetailsFunc() is now deprecated. The new way of doing\\n                                    tree data in ag-Grid was introduced in v14 (released November 2017). In the next\\n                                    major release of ag-Grid we will be dropping support for the old version of\\n                                    tree data. If you are reading this message, please go to the docs to see how\\n                                    to implement Tree Data without using nodeChildDetailsFunc().\");\n        }\n    };\n    ClientSideNodeManager.prototype.getCopyOfNodesMap = function () {\n        var result = _.cloneObject(this.allNodesMap);\n        return result;\n    };\n    ClientSideNodeManager.prototype.getRowNode = function (id) {\n        return this.allNodesMap[id];\n    };\n    ClientSideNodeManager.prototype.setRowData = function (rowData) {\n        this.rootNode.childrenAfterFilter = null;\n        this.rootNode.childrenAfterGroup = null;\n        this.rootNode.childrenAfterSort = null;\n        this.rootNode.childrenMapped = null;\n        this.nextId = 0;\n        this.allNodesMap = {};\n        if (!rowData) {\n            this.rootNode.allLeafChildren = [];\n            this.rootNode.childrenAfterGroup = [];\n            return;\n        }\n        // kick off recursion\n        // we add rootNode as the parent, however if using ag-grid-enterprise, the grouping stage\n        // sets the parent node on each row (even if we are not grouping). so setting parent node\n        // here is for benefit of ag-grid-community users\n        var result = this.recursiveFunction(rowData, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n        if (this.doingLegacyTreeData) {\n            this.rootNode.childrenAfterGroup = result;\n            this.setLeafChildren(this.rootNode);\n        }\n        else {\n            this.rootNode.allLeafChildren = result;\n        }\n    };\n    ClientSideNodeManager.prototype.updateRowData = function (rowDataTran, rowNodeOrder) {\n        if (this.isLegacyTreeData()) {\n            return null;\n        }\n        var rowNodeTransaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        this.executeAdd(rowDataTran, rowNodeTransaction);\n        this.executeRemove(rowDataTran, rowNodeTransaction);\n        this.executeUpdate(rowDataTran, rowNodeTransaction);\n        if (rowNodeOrder) {\n            _.sortRowNodesByOrder(this.rootNode.allLeafChildren, rowNodeOrder);\n        }\n        return rowNodeTransaction;\n    };\n    ClientSideNodeManager.prototype.executeAdd = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var add = rowDataTran.add, addIndex = rowDataTran.addIndex;\n        if (!add) {\n            return;\n        }\n        var useIndex = typeof addIndex === 'number' && addIndex >= 0;\n        if (useIndex) {\n            // items get inserted in reverse order for index insertion\n            add.reverse().forEach(function (item) {\n                var newRowNode = _this.addRowNode(item, addIndex);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n        else {\n            add.forEach(function (item) {\n                var newRowNode = _this.addRowNode(item);\n                rowNodeTransaction.add.push(newRowNode);\n            });\n        }\n    };\n    ClientSideNodeManager.prototype.executeRemove = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var remove = rowDataTran.remove;\n        if (!remove) {\n            return;\n        }\n        var rowIdsRemoved = {};\n        var anyNodesSelected = false;\n        remove.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            if (rowNode.isSelected()) {\n                anyNodesSelected = true;\n            }\n            // do delete - setting 'tailingNodeInSequence = true' to ensure EVENT_SELECTION_CHANGED is not raised for\n            // each row node updated, instead it is raised once by the calling code if any selected nodes exist.\n            rowNode.setSelected(false, false, true);\n            // so row renderer knows to fade row out (and not reposition it)\n            rowNode.clearRowTop();\n            // NOTE: were we could remove from allLeaveChildren, however _.removeFromArray() is expensive, especially\n            // if called multiple times (eg deleting lots of rows) and if allLeafChildren is a large list\n            rowIdsRemoved[rowNode.id] = true;\n            // _.removeFromArray(this.rootNode.allLeafChildren, rowNode);\n            delete _this.allNodesMap[rowNode.id];\n            rowNodeTransaction.remove.push(rowNode);\n        });\n        this.rootNode.allLeafChildren = this.rootNode.allLeafChildren.filter(function (rowNode) { return !rowIdsRemoved[rowNode.id]; });\n        if (anyNodesSelected) {\n            this.selectionController.updateGroupsFromChildrenSelections();\n            var event_1 = {\n                type: Events.EVENT_SELECTION_CHANGED,\n                api: this.gridApi,\n                columnApi: this.columnApi\n            };\n            this.eventService.dispatchEvent(event_1);\n        }\n    };\n    ClientSideNodeManager.prototype.executeUpdate = function (rowDataTran, rowNodeTransaction) {\n        var _this = this;\n        var update = rowDataTran.update;\n        if (!update) {\n            return;\n        }\n        update.forEach(function (item) {\n            var rowNode = _this.lookupRowNode(item);\n            if (!rowNode) {\n                return;\n            }\n            rowNode.updateData(item);\n            rowNodeTransaction.update.push(rowNode);\n        });\n    };\n    ClientSideNodeManager.prototype.addRowNode = function (data, index) {\n        var newNode = this.createNode(data, this.rootNode, ClientSideNodeManager.TOP_LEVEL);\n        if (_.exists(index)) {\n            _.insertIntoArray(this.rootNode.allLeafChildren, newNode, index);\n        }\n        else {\n            this.rootNode.allLeafChildren.push(newNode);\n        }\n        return newNode;\n    };\n    ClientSideNodeManager.prototype.lookupRowNode = function (data) {\n        var rowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        var rowNode;\n        if (_.exists(rowNodeIdFunc)) {\n            // find rowNode using id\n            var id = rowNodeIdFunc(data);\n            rowNode = this.allNodesMap[id];\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find row id=\" + id + \", data item was not found for this id\");\n                return null;\n            }\n        }\n        else {\n            // find rowNode using object references\n            rowNode = _.find(this.rootNode.allLeafChildren, function (rowNode) { return rowNode.data === data; });\n            if (!rowNode) {\n                console.error(\"ag-Grid: could not find data item as object was not found\", data);\n                return null;\n            }\n        }\n        return rowNode;\n    };\n    ClientSideNodeManager.prototype.recursiveFunction = function (rowData, parent, level) {\n        var _this = this;\n        // make sure the rowData is an array and not a string of json - this was a commonly reported problem on the forum\n        if (typeof rowData === 'string') {\n            console.warn('ag-Grid: rowData must be an array, however you passed in a string. If you are loading JSON, make sure you convert the JSON string to JavaScript objects first');\n            return;\n        }\n        var rowNodes = [];\n        rowData.forEach(function (dataItem) {\n            var node = _this.createNode(dataItem, parent, level);\n            rowNodes.push(node);\n        });\n        return rowNodes;\n    };\n    ClientSideNodeManager.prototype.createNode = function (dataItem, parent, level) {\n        var node = new RowNode();\n        this.context.wireBean(node);\n        var doingTreeData = this.gridOptionsWrapper.isTreeData();\n        var doingLegacyTreeData = !doingTreeData && _.exists(this.getNodeChildDetails);\n        var nodeChildDetails = doingLegacyTreeData ? this.getNodeChildDetails(dataItem) : null;\n        if (nodeChildDetails && nodeChildDetails.group) {\n            node.group = true;\n            node.childrenAfterGroup = this.recursiveFunction(nodeChildDetails.children, node, level + 1);\n            node.expanded = nodeChildDetails.expanded === true;\n            node.field = nodeChildDetails.field;\n            node.key = nodeChildDetails.key;\n            /** @deprecated is now 'master' */\n            node.canFlower = node.master;\n            // pull out all the leaf children and add to our node\n            this.setLeafChildren(node);\n        }\n        else {\n            node.group = false;\n            if (doingTreeData) {\n                node.master = false;\n                node.expanded = false;\n            }\n            else {\n                // this is the default, for when doing grid data\n                if (this.doesDataFlower) {\n                    node.master = this.doesDataFlower(dataItem);\n                }\n                else if (this.doingMasterDetail) {\n                    // if we are doing master detail, then the\n                    // default is that everything can flower.\n                    if (this.isRowMasterFunc) {\n                        node.master = this.isRowMasterFunc(dataItem);\n                    }\n                    else {\n                        node.master = true;\n                    }\n                }\n                else {\n                    node.master = false;\n                }\n                var rowGroupColumns = this.columnController.getRowGroupColumns();\n                var numRowGroupColumns = rowGroupColumns ? rowGroupColumns.length : 0;\n                // need to take row group into account when determining level\n                var masterRowLevel = level + numRowGroupColumns;\n                node.expanded = node.master ? this.isExpanded(masterRowLevel) : false;\n            }\n        }\n        // support for backwards compatibility, canFlow is now called 'master'\n        node.canFlower = node.master;\n        if (parent && !this.suppressParentsInRowNodes) {\n            node.parent = parent;\n        }\n        node.level = level;\n        node.setDataAndId(dataItem, this.nextId.toString());\n        if (this.allNodesMap[node.id]) {\n            console.warn(\"ag-grid: duplicate node id '\" + node.id + \"' detected from getRowNodeId callback, this could cause issues in your grid.\");\n        }\n        this.allNodesMap[node.id] = node;\n        this.nextId++;\n        return node;\n    };\n    ClientSideNodeManager.prototype.isExpanded = function (level) {\n        var expandByDefault = this.gridOptionsWrapper.getGroupDefaultExpanded();\n        if (expandByDefault === -1) {\n            return true;\n        }\n        else {\n            return level < expandByDefault;\n        }\n    };\n    // this is only used for doing legacy tree data\n    ClientSideNodeManager.prototype.setLeafChildren = function (node) {\n        node.allLeafChildren = [];\n        if (node.childrenAfterGroup) {\n            node.childrenAfterGroup.forEach(function (childAfterGroup) {\n                if (childAfterGroup.group) {\n                    if (childAfterGroup.allLeafChildren) {\n                        childAfterGroup.allLeafChildren.forEach(function (leafChild) { return node.allLeafChildren.push(leafChild); });\n                    }\n                }\n                else {\n                    node.allLeafChildren.push(childAfterGroup);\n                }\n            });\n        }\n    };\n    ClientSideNodeManager.prototype.isLegacyTreeData = function () {\n        var rowsAlreadyGrouped = _.exists(this.gridOptionsWrapper.getNodeChildDetailsFunc());\n        if (rowsAlreadyGrouped) {\n            console.warn('ag-Grid: adding and removing rows is not supported when using nodeChildDetailsFunc, ie it is not ' +\n                'supported for legacy tree data. Please see the docs on the new preferred way of providing tree data that works with delta updates.');\n            return true;\n        }\n        else {\n            return false;\n        }\n    };\n    ClientSideNodeManager.TOP_LEVEL = 0;\n    ClientSideNodeManager.ROOT_NODE_ID = 'ROOT_NODE_ID';\n    return ClientSideNodeManager;\n}());\nexport { ClientSideNodeManager };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, PostConstruct, RowNodeBlock, _ } from \"@ag-grid-community/core\";\nvar InfiniteBlock = /** @class */ (function (_super) {\n    __extends(InfiniteBlock, _super);\n    function InfiniteBlock(pageNumber, params) {\n        var _this = _super.call(this, pageNumber, params) || this;\n        _this.cacheParams = params;\n        return _this;\n    }\n    InfiniteBlock.prototype.createBlankRowNode = function (rowIndex) {\n        var rowNode = _super.prototype.createBlankRowNode.call(this, rowIndex);\n        rowNode.uiLevel = 0;\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n        return rowNode;\n    };\n    InfiniteBlock.prototype.setDataAndId = function (rowNode, data, index) {\n        if (_.exists(data)) {\n            // this means if the user is not providing id's we just use the\n            // index for the row. this will allow selection to work (that is based\n            // on index) as long user is not inserting or deleting rows,\n            // or wanting to keep selection between server side sorting or filtering\n            rowNode.setDataAndId(data, index.toString());\n        }\n        else {\n            rowNode.setDataAndId(undefined, undefined);\n        }\n    };\n    InfiniteBlock.prototype.setRowNode = function (rowIndex, rowNode) {\n        _super.prototype.setRowNode.call(this, rowIndex, rowNode);\n        this.setIndexAndTopOnRowNode(rowNode, rowIndex);\n    };\n    InfiniteBlock.prototype.init = function () {\n        _super.prototype.init.call(this, {\n            context: this.getContext(),\n            rowRenderer: this.rowRenderer\n        });\n    };\n    InfiniteBlock.prototype.getNodeIdPrefix = function () {\n        return null;\n    };\n    InfiniteBlock.prototype.getRow = function (displayIndex) {\n        return this.getRowUsingLocalIndex(displayIndex);\n    };\n    InfiniteBlock.prototype.setIndexAndTopOnRowNode = function (rowNode, rowIndex) {\n        rowNode.setRowIndex(rowIndex);\n        rowNode.rowTop = this.cacheParams.rowHeight * rowIndex;\n    };\n    InfiniteBlock.prototype.loadFromDatasource = function () {\n        var _this = this;\n        // PROBLEM . . . . when the user sets sort via colDef.sort, then this code\n        // is executing before the sort is set up, so server is not getting the sort\n        // model. need to change with regards order - so the server side request is\n        // AFTER thus it gets the right sort model.\n        var params = {\n            startRow: this.getStartRow(),\n            endRow: this.getEndRow(),\n            successCallback: this.pageLoaded.bind(this, this.getVersion()),\n            failCallback: this.pageLoadFailed.bind(this),\n            sortModel: this.cacheParams.sortModel,\n            filterModel: this.cacheParams.filterModel,\n            context: this.gridOptionsWrapper.getContext()\n        };\n        if (_.missing(this.cacheParams.datasource.getRows)) {\n            console.warn(\"ag-Grid: datasource is missing getRows method\");\n            return;\n        }\n        // put in timeout, to force result to be async\n        window.setTimeout(function () {\n            _this.cacheParams.datasource.getRows(params);\n        }, 0);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], InfiniteBlock.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteBlock.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteBlock.prototype, \"init\", null);\n    return InfiniteBlock;\n}(RowNodeBlock));\nexport { InfiniteBlock };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, ColumnGroup, Constants, GroupInstanceIdCreator } from \"@ag-grid-community/core\";\nvar BaseGridSerializingSession = /** @class */ (function () {\n    function BaseGridSerializingSession(config) {\n        var columnController = config.columnController, valueService = config.valueService, gridOptionsWrapper = config.gridOptionsWrapper, processCellCallback = config.processCellCallback, processHeaderCallback = config.processHeaderCallback, processGroupHeaderCallback = config.processGroupHeaderCallback, processRowGroupCallback = config.processRowGroupCallback;\n        this.columnController = columnController;\n        this.valueService = valueService;\n        this.gridOptionsWrapper = gridOptionsWrapper;\n        this.processCellCallback = processCellCallback;\n        this.processHeaderCallback = processHeaderCallback;\n        this.processGroupHeaderCallback = processGroupHeaderCallback;\n        this.processRowGroupCallback = processRowGroupCallback;\n    }\n    BaseGridSerializingSession.prototype.prepare = function (columnsToExport) {\n        this.firstGroupColumn = _.find(columnsToExport, function (col) { return !!col.getColDef().showRowGroup; });\n    };\n    BaseGridSerializingSession.prototype.extractHeaderValue = function (column) {\n        var value = this.getHeaderName(this.processHeaderCallback, column);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.extractRowCellValue = function (column, index, type, node) {\n        // we render the group summary text e.g. \"-> Parent -> Child\"...\n        var renderGroupSummaryCell = \n        // on group rows\n        node && node.group\n            && (\n            // in the first group column if groups appear in regular grid cells\n            column === this.firstGroupColumn\n                // or the first cell in the row, if we're doing full width rows\n                || (index === 0 && this.gridOptionsWrapper.isGroupUseEntireRow(this.columnController.isPivotMode())));\n        var valueForCell;\n        if (renderGroupSummaryCell) {\n            valueForCell = this.createValueForGroupNode(node);\n        }\n        else {\n            valueForCell = this.valueService.getValue(column, node);\n        }\n        var value = this.processCell(node, column, valueForCell, this.processCellCallback, type);\n        return value != null ? value : '';\n    };\n    BaseGridSerializingSession.prototype.getHeaderName = function (callback, column) {\n        if (callback) {\n            return callback({\n                column: column,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext()\n            });\n        }\n        else {\n            return this.columnController.getDisplayNameForColumn(column, 'csv', true);\n        }\n    };\n    BaseGridSerializingSession.prototype.createValueForGroupNode = function (node) {\n        if (this.processRowGroupCallback) {\n            return this.processRowGroupCallback({\n                node: node,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n            });\n        }\n        var keys = [node.key];\n        while (node.parent) {\n            node = node.parent;\n            keys.push(node.key);\n        }\n        return keys.reverse().join(' -> ');\n    };\n    BaseGridSerializingSession.prototype.processCell = function (rowNode, column, value, processCellCallback, type) {\n        if (processCellCallback) {\n            return processCellCallback({\n                column: column,\n                node: rowNode,\n                value: value,\n                api: this.gridOptionsWrapper.getApi(),\n                columnApi: this.gridOptionsWrapper.getColumnApi(),\n                context: this.gridOptionsWrapper.getContext(),\n                type: type\n            });\n        }\n        else {\n            return value;\n        }\n    };\n    return BaseGridSerializingSession;\n}());\nexport { BaseGridSerializingSession };\nvar GridSerializer = /** @class */ (function () {\n    function GridSerializer() {\n    }\n    GridSerializer.prototype.serialize = function (gridSerializingSession, params) {\n        if (params === void 0) { params = {}; }\n        var rowSkipper = params.shouldRowBeSkipped || (function () { return false; });\n        var api = this.gridOptionsWrapper.getApi();\n        var columnApi = this.gridOptionsWrapper.getColumnApi();\n        var skipSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var skipLowestSingleChildrenGroup = this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        var context = this.gridOptionsWrapper.getContext();\n        // when in pivot mode, we always render cols on screen, never 'all columns'\n        var isPivotMode = this.columnController.isPivotMode();\n        var rowModelNormal = this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE;\n        var onlySelectedNonStandardModel = !rowModelNormal && params.onlySelected;\n        var columnsToExport = [];\n        if (_.existsAndNotEmpty(params.columnKeys)) {\n            columnsToExport = this.columnController.getGridColumns(params.columnKeys);\n        }\n        else if (params.allColumns && !isPivotMode) {\n            // add auto group column for tree data\n            columnsToExport = this.gridOptionsWrapper.isTreeData() ?\n                this.columnController.getGridColumns([Constants.GROUP_AUTO_COLUMN_ID]) : [];\n            columnsToExport = columnsToExport.concat(this.columnController.getAllPrimaryColumns() || []);\n        }\n        else {\n            columnsToExport = this.columnController.getAllDisplayedColumns();\n        }\n        if (params.customHeader) {\n            gridSerializingSession.addCustomContent(params.customHeader);\n        }\n        gridSerializingSession.prepare(columnsToExport);\n        // first pass, put in the header names of the cols\n        if (params.columnGroups) {\n            var groupInstanceIdCreator = new GroupInstanceIdCreator();\n            var displayedGroups = this.displayedGroupCreator.createDisplayedGroups(columnsToExport, this.columnController.getGridBalancedTree(), groupInstanceIdCreator, null);\n            this.recursivelyAddHeaderGroups(displayedGroups, gridSerializingSession, params.processGroupHeaderCallback);\n        }\n        if (!params.skipHeader) {\n            var gridRowIterator_1 = gridSerializingSession.onNewHeaderRow();\n            columnsToExport.forEach(function (column, index) {\n                gridRowIterator_1.onColumn(column, index, undefined);\n            });\n        }\n        this.pinnedRowModel.forEachPinnedTopRow(processRow);\n        if (isPivotMode) {\n            if (this.rowModel.forEachPivotNode) {\n                this.rowModel.forEachPivotNode(processRow);\n            }\n            else {\n                //Must be enterprise, so we can just loop through all the nodes\n                this.rowModel.forEachNode(processRow);\n            }\n        }\n        else {\n            // onlySelectedAllPages: user doing pagination and wants selected items from\n            // other pages, so cannot use the standard row model as it won't have rows from\n            // other pages.\n            // onlySelectedNonStandardModel: if user wants selected in non standard row model\n            // (eg viewport) then again rowmodel cannot be used, so need to use selected instead.\n            if (params.onlySelectedAllPages || onlySelectedNonStandardModel) {\n                var selectedNodes = this.selectionController.getSelectedNodes();\n                selectedNodes.forEach(function (node) {\n                    processRow(node);\n                });\n            }\n            else {\n                // here is everything else - including standard row model and selected. we don't use\n                // the selection model even when just using selected, so that the result is the order\n                // of the rows appearing on the screen.\n                if (rowModelNormal) {\n                    this.rowModel.forEachNodeAfterFilterAndSort(processRow);\n                }\n                else {\n                    this.rowModel.forEachNode(processRow);\n                }\n            }\n        }\n        this.pinnedRowModel.forEachPinnedBottomRow(processRow);\n        if (params.customFooter) {\n            gridSerializingSession.addCustomContent(params.customFooter);\n        }\n        function processRow(node) {\n            var shouldSkipLowestGroup = skipLowestSingleChildrenGroup && node.leafGroup;\n            var shouldSkipCurrentGroup = node.allChildrenCount === 1 && (skipSingleChildrenGroup || shouldSkipLowestGroup);\n            if (node.group && (params.skipGroups || shouldSkipCurrentGroup)) {\n                return;\n            }\n            if (params.skipFooters && node.footer) {\n                return;\n            }\n            if (params.onlySelected && !node.isSelected()) {\n                return;\n            }\n            if (params.skipPinnedTop && node.rowPinned === 'top') {\n                return;\n            }\n            if (params.skipPinnedBottom && node.rowPinned === 'bottom') {\n                return;\n            }\n            // if we are in pivotMode, then the grid will show the root node only\n            // if it's not a leaf group\n            var nodeIsRootNode = node.level === -1;\n            if (nodeIsRootNode && !node.leafGroup) {\n                return;\n            }\n            var shouldRowBeSkipped = rowSkipper({ node: node, api: api, context: context });\n            if (shouldRowBeSkipped) {\n                return;\n            }\n            var rowAccumulator = gridSerializingSession.onNewBodyRow();\n            columnsToExport.forEach(function (column, index) {\n                rowAccumulator.onColumn(column, index, node);\n            });\n            if (params.getCustomContentBelowRow) {\n                var content = params.getCustomContentBelowRow({ node: node, api: api, columnApi: columnApi, context: context });\n                if (content) {\n                    gridSerializingSession.addCustomContent(content);\n                }\n            }\n        }\n        return gridSerializingSession.parse();\n    };\n    GridSerializer.prototype.recursivelyAddHeaderGroups = function (displayedGroups, gridSerializingSession, processGroupHeaderCallback) {\n        var directChildrenHeaderGroups = [];\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            if (!columnGroup.getChildren) {\n                return;\n            }\n            columnGroup.getChildren().forEach(function (it) { return directChildrenHeaderGroups.push(it); });\n        });\n        if (displayedGroups.length > 0 && displayedGroups[0] instanceof ColumnGroup) {\n            this.doAddHeaderHeader(gridSerializingSession, displayedGroups, processGroupHeaderCallback);\n        }\n        if (directChildrenHeaderGroups && directChildrenHeaderGroups.length > 0) {\n            this.recursivelyAddHeaderGroups(directChildrenHeaderGroups, gridSerializingSession, processGroupHeaderCallback);\n        }\n    };\n    GridSerializer.prototype.doAddHeaderHeader = function (gridSerializingSession, displayedGroups, processGroupHeaderCallback) {\n        var _this = this;\n        var gridRowIterator = gridSerializingSession.onNewHeaderGroupingRow();\n        var columnIndex = 0;\n        displayedGroups.forEach(function (columnGroupChild) {\n            var columnGroup = columnGroupChild;\n            var name;\n            if (processGroupHeaderCallback) {\n                name = processGroupHeaderCallback({\n                    columnGroup: columnGroup,\n                    api: _this.gridOptionsWrapper.getApi(),\n                    columnApi: _this.gridOptionsWrapper.getColumnApi(),\n                    context: _this.gridOptionsWrapper.getContext()\n                });\n            }\n            else {\n                name = _this.columnController.getDisplayNameForColumnGroup(columnGroup, 'header');\n            }\n            gridRowIterator.onColumn(name || '', columnIndex++, columnGroup.getLeafColumns().length - 1);\n        });\n    };\n    __decorate([\n        Autowired('displayedGroupCreator')\n    ], GridSerializer.prototype, \"displayedGroupCreator\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], GridSerializer.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('rowModel')\n    ], GridSerializer.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('pinnedRowModel')\n    ], GridSerializer.prototype, \"pinnedRowModel\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], GridSerializer.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('columnFactory')\n    ], GridSerializer.prototype, \"columnFactory\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], GridSerializer.prototype, \"gridOptionsWrapper\", void 0);\n    GridSerializer = __decorate([\n        Bean(\"gridSerializer\")\n    ], GridSerializer);\n    return GridSerializer;\n}());\nexport { GridSerializer };\nexport var RowType;\n(function (RowType) {\n    RowType[RowType[\"HEADER_GROUPING\"] = 0] = \"HEADER_GROUPING\";\n    RowType[RowType[\"HEADER\"] = 1] = \"HEADER\";\n    RowType[RowType[\"BODY\"] = 2] = \"BODY\";\n})(RowType || (RowType = {}));\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean } from \"@ag-grid-community/core\";\nvar FilterStage = /** @class */ (function () {\n    function FilterStage() {\n    }\n    FilterStage.prototype.execute = function (params) {\n        var rowNode = params.rowNode, changedPath = params.changedPath;\n        this.filterService.filter(changedPath);\n        this.selectableService.updateSelectableAfterFiltering(rowNode);\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FilterStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('selectableService')\n    ], FilterStage.prototype, \"selectableService\", void 0);\n    __decorate([\n        Autowired('filterService')\n    ], FilterStage.prototype, \"filterService\", void 0);\n    FilterStage = __decorate([\n        Bean('filterStage')\n    ], FilterStage);\n    return FilterStage;\n}());\nexport { FilterStage };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean } from \"@ag-grid-community/core\";\nvar SortStage = /** @class */ (function () {\n    function SortStage() {\n    }\n    SortStage.prototype.execute = function (params) {\n        var sortOptions = this.sortController.getSortForRowController();\n        var sortActive = _.exists(sortOptions) && sortOptions.length > 0;\n        var deltaSort = sortActive\n            && _.exists(params.rowNodeTransactions)\n            // in time we can remove this check, so that delta sort is always\n            // on if transactions are present. it's off for now so that we can\n            // selectively turn it on and test it with some select users before\n            // rolling out to everyone.\n            && this.gridOptionsWrapper.isDeltaSort();\n        // we only need dirty nodes if doing delta sort\n        var dirtyLeafNodes = deltaSort ? this.calculateDirtyNodes(params.rowNodeTransactions) : null;\n        var valueColumns = this.columnController.getValueColumns();\n        var noAggregations = _.missingOrEmpty(valueColumns);\n        this.sortService.sort(sortOptions, sortActive, deltaSort, dirtyLeafNodes, params.changedPath, noAggregations);\n    };\n    SortStage.prototype.calculateDirtyNodes = function (rowNodeTransactions) {\n        var dirtyNodes = {};\n        var addNodesFunc = function (rowNodes) {\n            if (rowNodes) {\n                rowNodes.forEach(function (rowNode) { return dirtyNodes[rowNode.id] = true; });\n            }\n        };\n        // all leaf level nodes in the transaction were impacted\n        rowNodeTransactions.forEach(function (tran) {\n            addNodesFunc(tran.add);\n            addNodesFunc(tran.update);\n            addNodesFunc(tran.remove);\n        });\n        return dirtyNodes;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SortStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('sortService')\n    ], SortStage.prototype, \"sortService\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], SortStage.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortStage.prototype, \"columnController\", void 0);\n    SortStage = __decorate([\n        Bean('sortStage')\n    ], SortStage);\n    return SortStage;\n}());\nexport { SortStage };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, RowNode } from \"@ag-grid-community/core\";\nvar FlattenStage = /** @class */ (function () {\n    function FlattenStage() {\n    }\n    FlattenStage.prototype.execute = function (params) {\n        var rootNode = params.rowNode;\n        // even if not doing grouping, we do the mapping, as the client might\n        // of passed in data that already has a grouping in it somewhere\n        var result = [];\n        // putting value into a wrapper so it's passed by reference\n        var nextRowTop = { value: 0 };\n        var skipLeafNodes = this.columnController.isPivotMode();\n        // if we are reducing, and not grouping, then we want to show the root node, as that\n        // is where the pivot values are\n        var showRootNode = skipLeafNodes && rootNode.leafGroup;\n        var topList = showRootNode ? [rootNode] : rootNode.childrenAfterSort;\n        this.recursivelyAddToRowsToDisplay(topList, result, nextRowTop, skipLeafNodes, 0);\n        // we do not want the footer total if the gris is empty\n        var atLeastOneRowPresent = result.length > 0;\n        var includeGroupTotalFooter = !showRootNode\n            // don't show total footer when showRootNode is true (i.e. in pivot mode and no groups)\n            && atLeastOneRowPresent\n            && this.gridOptionsWrapper.isGroupIncludeTotalFooter();\n        if (includeGroupTotalFooter) {\n            this.ensureFooterNodeExists(rootNode);\n            this.addRowNodeToRowsToDisplay(rootNode.sibling, result, nextRowTop, 0);\n        }\n        return result;\n    };\n    FlattenStage.prototype.recursivelyAddToRowsToDisplay = function (rowsToFlatten, result, nextRowTop, skipLeafNodes, uiLevel) {\n        if (_.missingOrEmpty(rowsToFlatten)) {\n            return;\n        }\n        var groupSuppressRow = this.gridOptionsWrapper.isGroupSuppressRow();\n        var hideOpenParents = this.gridOptionsWrapper.isGroupHideOpenParents();\n        // these two are mutually exclusive, so if first set, we don't set the second\n        var groupRemoveSingleChildren = this.gridOptionsWrapper.isGroupRemoveSingleChildren();\n        var groupRemoveLowestSingleChildren = !groupRemoveSingleChildren && this.gridOptionsWrapper.isGroupRemoveLowestSingleChildren();\n        for (var i = 0; i < rowsToFlatten.length; i++) {\n            var rowNode = rowsToFlatten[i];\n            // check all these cases, for working out if this row should be included in the final mapped list\n            var isParent = rowNode.hasChildren();\n            var isGroupSuppressedNode = groupSuppressRow && isParent;\n            var isSkippedLeafNode = skipLeafNodes && !isParent;\n            var isRemovedSingleChildrenGroup = groupRemoveSingleChildren &&\n                isParent &&\n                rowNode.childrenAfterGroup.length === 1;\n            var isRemovedLowestSingleChildrenGroup = groupRemoveLowestSingleChildren &&\n                isParent &&\n                rowNode.leafGroup &&\n                rowNode.childrenAfterGroup.length === 1;\n            // hide open parents means when group is open, we don't show it. we also need to make sure the\n            // group is expandable in the first place (as leaf groups are not expandable if pivot mode is on).\n            // the UI will never allow expanding leaf  groups, however the user might via the API (or menu option 'expand all')\n            var neverAllowToExpand = skipLeafNodes && rowNode.leafGroup;\n            var isHiddenOpenParent = hideOpenParents && rowNode.expanded && (!neverAllowToExpand);\n            var thisRowShouldBeRendered = !isSkippedLeafNode &&\n                !isGroupSuppressedNode &&\n                !isHiddenOpenParent &&\n                !isRemovedSingleChildrenGroup &&\n                !isRemovedLowestSingleChildrenGroup;\n            if (thisRowShouldBeRendered) {\n                this.addRowNodeToRowsToDisplay(rowNode, result, nextRowTop, uiLevel);\n            }\n            // if we are pivoting, we never map below the leaf group\n            if (skipLeafNodes && rowNode.leafGroup) {\n                continue;\n            }\n            if (isParent) {\n                var excludedParent = isRemovedSingleChildrenGroup || isRemovedLowestSingleChildrenGroup;\n                // we traverse the group if it is expended, however we always traverse if the parent node\n                // was removed (as the group will never be opened if it is not displayed, we show the children instead)\n                if (rowNode.expanded || excludedParent) {\n                    // if the parent was excluded, then ui level is that of the parent\n                    var uiLevelForChildren = excludedParent ? uiLevel : uiLevel + 1;\n                    this.recursivelyAddToRowsToDisplay(rowNode.childrenAfterSort, result, nextRowTop, skipLeafNodes, uiLevelForChildren);\n                    // put a footer in if user is looking for it\n                    if (this.gridOptionsWrapper.isGroupIncludeFooter()) {\n                        this.ensureFooterNodeExists(rowNode);\n                        this.addRowNodeToRowsToDisplay(rowNode.sibling, result, nextRowTop, uiLevel);\n                    }\n                }\n            }\n            else if (rowNode.master && rowNode.expanded) {\n                var detailNode = this.createDetailNode(rowNode);\n                this.addRowNodeToRowsToDisplay(detailNode, result, nextRowTop, uiLevel);\n            }\n        }\n    };\n    // duplicated method, it's also in floatingRowModel\n    FlattenStage.prototype.addRowNodeToRowsToDisplay = function (rowNode, result, nextRowTop, uiLevel) {\n        var isGroupMultiAutoColumn = this.gridOptionsWrapper.isGroupMultiAutoColumn();\n        result.push(rowNode);\n        rowNode.setUiLevel(isGroupMultiAutoColumn ? 0 : uiLevel);\n    };\n    FlattenStage.prototype.ensureFooterNodeExists = function (groupNode) {\n        // only create footer node once, otherwise we have daemons and\n        // the animate screws up with the daemons hanging around\n        if (_.exists(groupNode.sibling)) {\n            return;\n        }\n        var footerNode = new RowNode();\n        this.context.wireBean(footerNode);\n        Object.keys(groupNode).forEach(function (key) {\n            footerNode[key] = groupNode[key];\n        });\n        footerNode.footer = true;\n        footerNode.rowTop = null;\n        footerNode.oldRowTop = null;\n        if (_.exists(footerNode.id)) {\n            footerNode.id = 'rowGroupFooter_' + footerNode.id;\n        }\n        // get both header and footer to reference each other as siblings. this is never undone,\n        // only overwritten. so if a group is expanded, then contracted, it will have a ghost\n        // sibling - but that's fine, as we can ignore this if the header is contracted.\n        footerNode.sibling = groupNode;\n        groupNode.sibling = footerNode;\n    };\n    FlattenStage.prototype.createDetailNode = function (masterNode) {\n        if (_.exists(masterNode.detailNode)) {\n            return masterNode.detailNode;\n        }\n        var detailNode = new RowNode();\n        this.context.wireBean(detailNode);\n        detailNode.detail = true;\n        detailNode.selectable = false;\n        // flower was renamed to 'detail', but keeping for backwards compatibility\n        detailNode.flower = detailNode.detail;\n        detailNode.parent = masterNode;\n        if (_.exists(masterNode.id)) {\n            detailNode.id = 'detail_' + masterNode.id;\n        }\n        detailNode.data = masterNode.data;\n        detailNode.level = masterNode.level + 1;\n        masterNode.detailNode = detailNode;\n        masterNode.childFlower = masterNode.detailNode; // for backwards compatibility\n        return detailNode;\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FlattenStage.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], FlattenStage.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('eventService')\n    ], FlattenStage.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('context')\n    ], FlattenStage.prototype, \"context\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], FlattenStage.prototype, \"columnController\", void 0);\n    FlattenStage = __decorate([\n        Bean('flattenStage')\n    ], FlattenStage);\n    return FlattenStage;\n}());\nexport { FlattenStage };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, PostConstruct } from \"@ag-grid-community/core\";\nvar SortService = /** @class */ (function () {\n    function SortService() {\n    }\n    SortService.prototype.init = function () {\n        this.postSortFunc = this.gridOptionsWrapper.getPostSortFunc();\n    };\n    SortService.prototype.sort = function (sortOptions, sortActive, deltaSort, dirtyLeafNodes, changedPath, noAggregations) {\n        var _this = this;\n        var callback = function (rowNode) {\n            // we clear out the 'pull down open parents' first, as the values mix up the sorting\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterFilter, true);\n            // Javascript sort is non deterministic when all the array items are equals, ie Comparator always returns 0,\n            // so to ensure the array keeps its order, add an additional sorting condition manually, in this case we\n            // are going to inspect the original array position. This is what sortedRowNodes is for.\n            if (sortActive) {\n                var sortedRowNodes = deltaSort ?\n                    _this.doDeltaSort(rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations)\n                    : _this.doFullSort(rowNode, sortOptions);\n                rowNode.childrenAfterSort = sortedRowNodes.map(function (sorted) { return sorted.rowNode; });\n            }\n            else {\n                rowNode.childrenAfterSort = rowNode.childrenAfterFilter.slice(0);\n            }\n            _this.updateChildIndexes(rowNode);\n            if (_this.postSortFunc) {\n                _this.postSortFunc(rowNode.childrenAfterSort);\n            }\n        };\n        changedPath.forEachChangedNodeDepthFirst(callback);\n        this.updateGroupDataForHiddenOpenParents(changedPath);\n    };\n    SortService.prototype.doFullSort = function (rowNode, sortOptions) {\n        var sortedRowNodes = rowNode.childrenAfterFilter\n            .map(this.mapNodeToSortedNode.bind(this));\n        sortedRowNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        return sortedRowNodes;\n    };\n    SortService.prototype.mapNodeToSortedNode = function (rowNode, pos) {\n        return { currentPos: pos, rowNode: rowNode };\n    };\n    SortService.prototype.doDeltaSort = function (rowNode, sortOptions, dirtyLeafNodes, changedPath, noAggregations) {\n        // clean nodes will be a list of all row nodes that remain in the set\n        // and ordered. we start with the old sorted set and take out any nodes\n        // that were removed or changed (but not added, added doesn't make sense,\n        // if a node was added, there is no way it could be here from last time).\n        var cleanNodes = rowNode.childrenAfterSort\n            .filter(function (rowNode) {\n            // take out all nodes that were changed as part of the current transaction.\n            // a changed node could a) be in a different sort position or b) may\n            // no longer be in this set as the changed node may not pass filtering,\n            // or be in a different group.\n            var passesDirtyNodesCheck = !dirtyLeafNodes[rowNode.id];\n            // also remove group nodes in the changed path, as they can have different aggregate\n            // values which could impact the sort order.\n            // note: changed path is not active if a) no value columns or b) no transactions. it is never\n            // (b) in deltaSort as we only do deltaSort for transactions. for (a) if no value columns, then\n            // there is no value in the group that could of changed (ie no aggregate values)\n            var passesChangedPathCheck = noAggregations || changedPath.canSkip(rowNode);\n            return passesDirtyNodesCheck && passesChangedPathCheck;\n        })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // for fast access below, we map them\n        var cleanNodesMapped = {};\n        cleanNodes.forEach(function (sortedRowNode) { return cleanNodesMapped[sortedRowNode.rowNode.id] = sortedRowNode.rowNode; });\n        // these are all nodes that need to be placed\n        var changedNodes = rowNode.childrenAfterFilter\n            // ignore nodes in the clean list\n            .filter(function (rowNode) { return !cleanNodesMapped[rowNode.id]; })\n            .map(this.mapNodeToSortedNode.bind(this));\n        // sort changed nodes. note that we don't need to sort cleanNodes as they are\n        // already sorted from last time.\n        changedNodes.sort(this.compareRowNodes.bind(this, sortOptions));\n        if (changedNodes.length === 0) {\n            return cleanNodes;\n        }\n        else if (cleanNodes.length === 0) {\n            return changedNodes;\n        }\n        else {\n            return this.mergeSortedArrays(sortOptions, cleanNodes, changedNodes);\n        }\n    };\n    // Merge two sorted arrays into each other\n    SortService.prototype.mergeSortedArrays = function (sortOptions, arr1, arr2) {\n        var res = [];\n        var i = 0;\n        var j = 0;\n        // Traverse both array, adding them in order\n        while (i < arr1.length && j < arr2.length) {\n            // Check if current element of first\n            // array is smaller than current element\n            // of second array. If yes, store first\n            // array element and increment first array\n            // index. Otherwise do same with second array\n            var compareResult = this.compareRowNodes(sortOptions, arr1[i], arr2[j]);\n            if (compareResult < 0) {\n                res.push(arr1[i++]);\n            }\n            else {\n                res.push(arr2[j++]);\n            }\n        }\n        // add remaining from arr1\n        while (i < arr1.length) {\n            res.push(arr1[i++]);\n        }\n        // add remaining from arr2\n        while (j < arr2.length) {\n            res.push(arr2[j++]);\n        }\n        return res;\n    };\n    SortService.prototype.compareRowNodes = function (sortOptions, sortedNodeA, sortedNodeB) {\n        var nodeA = sortedNodeA.rowNode;\n        var nodeB = sortedNodeB.rowNode;\n        // Iterate columns, return the first that doesn't match\n        for (var i = 0, len = sortOptions.length; i < len; i++) {\n            var sortOption = sortOptions[i];\n            // let compared = compare(nodeA, nodeB, sortOption.column, sortOption.inverter === -1);\n            var isInverted = sortOption.inverter === -1;\n            var valueA = this.getValue(nodeA, sortOption.column);\n            var valueB = this.getValue(nodeB, sortOption.column);\n            var comparatorResult = void 0;\n            if (sortOption.column.getColDef().comparator) {\n                //if comparator provided, use it\n                comparatorResult = sortOption.column.getColDef().comparator(valueA, valueB, nodeA, nodeB, isInverted);\n            }\n            else {\n                //otherwise do our own comparison\n                comparatorResult = _.defaultComparator(valueA, valueB, this.gridOptionsWrapper.isAccentedSort());\n            }\n            if (comparatorResult !== 0) {\n                return comparatorResult * sortOption.inverter;\n            }\n        }\n        // All matched, we make is so that the original sort order is kept:\n        return sortedNodeA.currentPos - sortedNodeB.currentPos;\n    };\n    SortService.prototype.getValue = function (nodeA, column) {\n        return this.valueService.getValue(column, nodeA);\n    };\n    SortService.prototype.updateChildIndexes = function (rowNode) {\n        if (_.missing(rowNode.childrenAfterSort)) {\n            return;\n        }\n        var listToSort = rowNode.childrenAfterSort;\n        for (var i = 0; i < listToSort.length; i++) {\n            var child = listToSort[i];\n            var firstChild = i === 0;\n            var lastChild = i === rowNode.childrenAfterSort.length - 1;\n            child.setFirstChild(firstChild);\n            child.setLastChild(lastChild);\n            child.setChildIndex(i);\n        }\n    };\n    SortService.prototype.updateGroupDataForHiddenOpenParents = function (changedPath) {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        // recurse breadth first over group nodes after sort to 'pull down' group data to child groups\n        var callback = function (rowNode) {\n            _this.pullDownGroupDataForHideOpenParents(rowNode.childrenAfterSort, false);\n            rowNode.childrenAfterSort.forEach(function (child) {\n                if (child.hasChildren()) {\n                    callback(child);\n                }\n            });\n        };\n        changedPath.executeFromRootNode(function (rowNode) { return callback(rowNode); });\n    };\n    SortService.prototype.pullDownGroupDataForHideOpenParents = function (rowNodes, clearOperation) {\n        var _this = this;\n        if (_.missing(rowNodes)) {\n            return;\n        }\n        if (!this.gridOptionsWrapper.isGroupHideOpenParents()) {\n            return;\n        }\n        rowNodes.forEach(function (childRowNode) {\n            var groupDisplayCols = _this.columnController.getGroupDisplayColumns();\n            groupDisplayCols.forEach(function (groupDisplayCol) {\n                var showRowGroup = groupDisplayCol.getColDef().showRowGroup;\n                if (typeof showRowGroup !== 'string') {\n                    console.error('ag-Grid: groupHideOpenParents only works when specifying specific columns for colDef.showRowGroup');\n                    return;\n                }\n                var displayingGroupKey = showRowGroup;\n                var rowGroupColumn = _this.columnController.getPrimaryColumn(displayingGroupKey);\n                var thisRowNodeMatches = rowGroupColumn === childRowNode.rowGroupColumn;\n                if (thisRowNodeMatches) {\n                    return;\n                }\n                if (clearOperation) {\n                    // if doing a clear operation, we clear down the value for every possible group column\n                    childRowNode.setGroupValue(groupDisplayCol.getId(), null);\n                }\n                else {\n                    // if doing a set operation, we set only where the pull down is to occur\n                    var parentToStealFrom = childRowNode.getFirstChildOfFirstChild(rowGroupColumn);\n                    if (parentToStealFrom) {\n                        childRowNode.setGroupValue(groupDisplayCol.getId(), parentToStealFrom.key);\n                    }\n                }\n            });\n        });\n    };\n    __decorate([\n        Autowired('sortController')\n    ], SortService.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('columnController')\n    ], SortService.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], SortService.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], SortService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], SortService.prototype, \"init\", null);\n    SortService = __decorate([\n        Bean('sortService')\n    ], SortService);\n    return SortService;\n}());\nexport { SortService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Autowired, Bean, PostConstruct } from \"@ag-grid-community/core\";\nvar FilterService = /** @class */ (function () {\n    function FilterService() {\n    }\n    FilterService.prototype.postConstruct = function () {\n        this.doingTreeData = this.gridOptionsWrapper.isTreeData();\n    };\n    FilterService.prototype.filter = function (changedPath) {\n        var filterActive = this.filterManager.isAnyFilterPresent();\n        this.filterNodes(filterActive, changedPath);\n    };\n    FilterService.prototype.filterNodes = function (filterActive, changedPath) {\n        var _this = this;\n        var filterCallback = function (rowNode, includeChildNodes) {\n            // recursively get all children that are groups to also filter\n            if (rowNode.hasChildren()) {\n                // result of filter for this node. when filtering tree data, includeChildNodes = true when parent passes\n                if (filterActive && !includeChildNodes) {\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup.filter(function (childNode) {\n                        // a group is included in the result if it has any children of it's own.\n                        // by this stage, the child groups are already filtered\n                        var passBecauseChildren = childNode.childrenAfterFilter && childNode.childrenAfterFilter.length > 0;\n                        // both leaf level nodes and tree data nodes have data. these get added if\n                        // the data passes the filter\n                        var passBecauseDataPasses = childNode.data && _this.filterManager.doesRowPassFilter(childNode);\n                        // note - tree data nodes pass either if a) they pass themselves or b) any children of that node pass\n                        return passBecauseChildren || passBecauseDataPasses;\n                    });\n                }\n                else {\n                    // if not filtering, the result is the original list\n                    rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                }\n                _this.setAllChildrenCount(rowNode);\n            }\n            else {\n                rowNode.childrenAfterFilter = rowNode.childrenAfterGroup;\n                rowNode.setAllChildrenCount(null);\n            }\n        };\n        if (this.doingTreeDataFiltering()) {\n            var treeDataDepthFirstFilter_1 = function (rowNode, alreadyFoundInParent) {\n                // tree data filter traverses the hierarchy depth first and includes child nodes if parent passes\n                // filter, and parent nodes will be include if any children exist.\n                if (rowNode.childrenAfterGroup) {\n                    for (var i = 0; i < rowNode.childrenAfterGroup.length; i++) {\n                        var childNode = rowNode.childrenAfterGroup[i];\n                        // first check if current node passes filter before invoking child nodes\n                        var foundInParent = alreadyFoundInParent || _this.filterManager.doesRowPassFilter(childNode);\n                        if (childNode.childrenAfterGroup) {\n                            treeDataDepthFirstFilter_1(rowNode.childrenAfterGroup[i], foundInParent);\n                        }\n                        else {\n                            filterCallback(childNode, foundInParent);\n                        }\n                    }\n                }\n                filterCallback(rowNode, alreadyFoundInParent);\n            };\n            var treeDataFilterCallback = function (rowNode) { return treeDataDepthFirstFilter_1(rowNode, false); };\n            changedPath.executeFromRootNode(treeDataFilterCallback);\n        }\n        else {\n            var defaultFilterCallback = function (rowNode) { return filterCallback(rowNode, false); };\n            changedPath.forEachChangedNodeDepthFirst(defaultFilterCallback, true);\n        }\n    };\n    FilterService.prototype.setAllChildrenCountTreeData = function (rowNode) {\n        // for tree data, we include all children, groups and leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            // include child itself\n            allChildrenCount++;\n            // include children of children\n            allChildrenCount += child.allChildrenCount;\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCountGridGrouping = function (rowNode) {\n        // for grid data, we only count the leafs\n        var allChildrenCount = 0;\n        rowNode.childrenAfterFilter.forEach(function (child) {\n            if (child.group) {\n                allChildrenCount += child.allChildrenCount;\n            }\n            else {\n                allChildrenCount++;\n            }\n        });\n        rowNode.setAllChildrenCount(allChildrenCount);\n    };\n    FilterService.prototype.setAllChildrenCount = function (rowNode) {\n        if (this.doingTreeData) {\n            this.setAllChildrenCountTreeData(rowNode);\n        }\n        else {\n            this.setAllChildrenCountGridGrouping(rowNode);\n        }\n    };\n    FilterService.prototype.doingTreeDataFiltering = function () {\n        return this.gridOptionsWrapper.isTreeData() && !this.gridOptionsWrapper.isExcludeChildrenWhenTreeDataFiltering();\n    };\n    __decorate([\n        Autowired('filterManager')\n    ], FilterService.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], FilterService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], FilterService.prototype, \"postConstruct\", null);\n    FilterService = __decorate([\n        Bean(\"filterService\")\n    ], FilterService);\n    return FilterService;\n}());\nexport { FilterService };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct } from \"@ag-grid-community/core\";\nvar ImmutableService = /** @class */ (function () {\n    function ImmutableService() {\n    }\n    ImmutableService.prototype.postConstruct = function () {\n        if (this.rowModel.getType() === Constants.ROW_MODEL_TYPE_CLIENT_SIDE) {\n            this.clientSideRowModel = this.rowModel;\n        }\n    };\n    // converts the setRowData() command to a transaction\n    ImmutableService.prototype.createTransactionForRowData = function (data) {\n        if (_.missing(this.clientSideRowModel)) {\n            console.error('ag-Grid: ImmutableService only works with ClientSideRowModel');\n            return;\n        }\n        var getRowNodeIdFunc = this.gridOptionsWrapper.getRowNodeIdFunc();\n        if (!getRowNodeIdFunc || _.missing(getRowNodeIdFunc)) {\n            console.error('ag-Grid: ImmutableService requires getRowNodeId() callback to be implemented, your row data need IDs!');\n            return;\n        }\n        // convert the data into a transaction object by working out adds, removes and updates\n        var transaction = {\n            remove: [],\n            update: [],\n            add: []\n        };\n        var existingNodesMap = this.clientSideRowModel.getCopyOfNodesMap();\n        var suppressSortOrder = this.gridOptionsWrapper.isSuppressMaintainUnsortedOrder();\n        var orderMap = suppressSortOrder ? null : {};\n        if (_.exists(data)) {\n            // split all the new data in the following:\n            // if new, push to 'add'\n            // if update, push to 'update'\n            // if not changed, do not include in the transaction\n            data.forEach(function (dataItem, index) {\n                var id = getRowNodeIdFunc(dataItem);\n                var existingNode = existingNodesMap[id];\n                if (orderMap) {\n                    orderMap[id] = index;\n                }\n                if (existingNode) {\n                    var dataHasChanged = existingNode.data !== dataItem;\n                    if (dataHasChanged) {\n                        transaction.update.push(dataItem);\n                    }\n                    // otherwise, if data not changed, we just don't include it anywhere, as it's not a delta\n                    // remove from list, so we know the item is not to be removed\n                    existingNodesMap[id] = undefined;\n                }\n                else {\n                    transaction.add.push(dataItem);\n                }\n            });\n        }\n        // at this point, all rows that are left, should be removed\n        _.iterateObject(existingNodesMap, function (id, rowNode) {\n            if (rowNode) {\n                transaction.remove.push(rowNode.data);\n            }\n        });\n        return [transaction, orderMap];\n    };\n    __decorate([\n        Autowired('rowModel')\n    ], ImmutableService.prototype, \"rowModel\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], ImmutableService.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], ImmutableService.prototype, \"postConstruct\", null);\n    ImmutableService = __decorate([\n        Bean('immutableService')\n    ], ImmutableService);\n    return ImmutableService;\n}());\nexport { ImmutableService };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { ClientSideRowModel } from \"./clientSideRowModel/clientSideRowModel\";\nimport { FilterStage } from \"./clientSideRowModel/filterStage\";\nimport { SortStage } from \"./clientSideRowModel/sortStage\";\nimport { FlattenStage } from \"./clientSideRowModel/flattenStage\";\nimport { SortService } from \"./clientSideRowModel/sortService\";\nimport { FilterService } from \"./clientSideRowModel/filterService\";\nimport { ImmutableService } from \"./clientSideRowModel/immutableService\";\nexport var ClientSideRowModelModule = {\n    moduleName: ModuleNames.ClientSideRowModelModule,\n    beans: [FilterStage, SortStage, FlattenStage, SortService, FilterService, ImmutableService],\n    rowModels: { clientSide: ClientSideRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nimport { Autowired, Events, PostConstruct, Qualifier, RowNodeCache, } from \"@ag-grid-community/core\";\nimport { InfiniteBlock } from \"./infiniteBlock\";\nvar InfiniteCache = /** @class */ (function (_super) {\n    __extends(InfiniteCache, _super);\n    function InfiniteCache(params) {\n        return _super.call(this, params) || this;\n    }\n    InfiniteCache.prototype.setBeans = function (loggerFactory) {\n        this.logger = loggerFactory.create('InfiniteCache');\n    };\n    InfiniteCache.prototype.init = function () {\n        _super.prototype.init.call(this);\n        // start load of data, as the virtualRowCount will remain at 0 otherwise,\n        // so we need this to kick things off, otherwise grid would never call getRow()\n        this.getRow(0);\n    };\n    InfiniteCache.prototype.moveItemsDown = function (block, moveFromIndex, moveCount) {\n        var startRow = block.getStartRow();\n        var endRow = block.getEndRow();\n        var indexOfLastRowToMove = moveFromIndex + moveCount;\n        // all rows need to be moved down below the insertion index\n        for (var currentRowIndex = endRow - 1; currentRowIndex >= startRow; currentRowIndex--) {\n            // don't move rows at or before the insertion index\n            if (currentRowIndex < indexOfLastRowToMove) {\n                continue;\n            }\n            var indexOfNodeWeWant = currentRowIndex - moveCount;\n            var nodeForThisIndex = this.getRow(indexOfNodeWeWant, true);\n            if (nodeForThisIndex) {\n                block.setRowNode(currentRowIndex, nodeForThisIndex);\n            }\n            else {\n                block.setBlankRowNode(currentRowIndex);\n                block.setDirty();\n            }\n        }\n    };\n    InfiniteCache.prototype.insertItems = function (block, indexToInsert, items) {\n        var pageStartRow = block.getStartRow();\n        var pageEndRow = block.getEndRow();\n        var newRowNodes = [];\n        // next stage is insert the rows into this page, if applicable\n        for (var index = 0; index < items.length; index++) {\n            var rowIndex = indexToInsert + index;\n            var currentRowInThisPage = rowIndex >= pageStartRow && rowIndex < pageEndRow;\n            if (currentRowInThisPage) {\n                var dataItem = items[index];\n                var newRowNode = block.setNewData(rowIndex, dataItem);\n                newRowNodes.push(newRowNode);\n            }\n        }\n        return newRowNodes;\n    };\n    InfiniteCache.prototype.insertItemsAtIndex = function (indexToInsert, items) {\n        // get all page id's as NUMBERS (not strings, as we need to sort as numbers) and in descending order\n        var _this = this;\n        var newNodes = [];\n        this.forEachBlockInReverseOrder(function (block) {\n            var pageEndRow = block.getEndRow();\n            // if the insertion is after this page, then this page is not impacted\n            if (pageEndRow <= indexToInsert) {\n                return;\n            }\n            _this.moveItemsDown(block, indexToInsert, items.length);\n            var newNodesThisPage = _this.insertItems(block, indexToInsert, items);\n            newNodesThisPage.forEach(function (rowNode) { return newNodes.push(rowNode); });\n        });\n        if (this.isMaxRowFound()) {\n            this.hack_setVirtualRowCount(this.getVirtualRowCount() + items.length);\n        }\n        this.onCacheUpdated();\n        var event = {\n            type: Events.EVENT_ROW_DATA_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi\n        };\n        this.eventService.dispatchEvent(event);\n    };\n    // the rowRenderer will not pass dontCreatePage, meaning when rendering the grid,\n    // it will want new pages in the cache as it asks for rows. only when we are inserting /\n    // removing rows via the api is dontCreatePage set, where we move rows between the pages.\n    InfiniteCache.prototype.getRow = function (rowIndex, dontCreatePage) {\n        if (dontCreatePage === void 0) { dontCreatePage = false; }\n        var blockId = Math.floor(rowIndex / this.cacheParams.blockSize);\n        var block = this.getBlock(blockId);\n        if (!block) {\n            if (dontCreatePage) {\n                return null;\n            }\n            else {\n                block = this.createBlock(blockId);\n            }\n        }\n        return block.getRow(rowIndex);\n    };\n    InfiniteCache.prototype.createBlock = function (blockNumber) {\n        var newBlock = new InfiniteBlock(blockNumber, this.cacheParams);\n        this.getContext().wireBean(newBlock);\n        this.postCreateBlock(newBlock);\n        return newBlock;\n    };\n    // we have this on infinite row model only, not server side row model,\n    // because for server side, it would leave the children in inconsistent\n    // state - eg if a node had children, but after the refresh it had data\n    // for a different row, then the children would be with the wrong row node.\n    InfiniteCache.prototype.refreshCache = function () {\n        this.forEachBlockInOrder(function (block) { return block.setDirty(); });\n        this.checkBlockToLoad();\n    };\n    __decorate([\n        Autowired('eventService')\n    ], InfiniteCache.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteCache.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteCache.prototype, \"gridApi\", void 0);\n    __decorate([\n        __param(0, Qualifier('loggerFactory'))\n    ], InfiniteCache.prototype, \"setBeans\", null);\n    __decorate([\n        PostConstruct\n    ], InfiniteCache.prototype, \"init\", null);\n    return InfiniteCache;\n}(RowNodeCache));\nexport { InfiniteCache };\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, BeanStub, Constants, Events, NumberSequence, PostConstruct, PreDestroy, RowNodeBlockLoader, RowNodeCache } from \"@ag-grid-community/core\";\nimport { InfiniteCache } from \"./infiniteCache\";\nvar InfiniteRowModel = /** @class */ (function (_super) {\n    __extends(InfiniteRowModel, _super);\n    function InfiniteRowModel() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    InfiniteRowModel.prototype.getRowBounds = function (index) {\n        return {\n            rowHeight: this.rowHeight,\n            rowTop: this.rowHeight * index\n        };\n    };\n    // we don't implement as lazy row heights is not supported in this row model\n    InfiniteRowModel.prototype.ensureRowHeightsValid = function (startPixel, endPixel, startLimitIndex, endLimitIndex) {\n        return false;\n    };\n    InfiniteRowModel.prototype.init = function () {\n        var _this = this;\n        if (!this.gridOptionsWrapper.isRowModelInfinite()) {\n            return;\n        }\n        this.rowHeight = this.gridOptionsWrapper.getRowHeightAsNumber();\n        this.addEventListeners();\n        this.addDestroyFunc(function () { return _this.destroyCache(); });\n    };\n    InfiniteRowModel.prototype.start = function () {\n        this.setDatasource(this.gridOptionsWrapper.getDatasource());\n    };\n    InfiniteRowModel.prototype.destroyDatasource = function () {\n        if (this.datasource) {\n            if (this.datasource.destroy) {\n                this.datasource.destroy();\n            }\n            this.rowRenderer.datasourceChanged();\n            this.datasource = null;\n        }\n    };\n    InfiniteRowModel.prototype.isLastRowFound = function () {\n        return this.infiniteCache ? this.infiniteCache.isMaxRowFound() : false;\n    };\n    InfiniteRowModel.prototype.addEventListeners = function () {\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_FILTER_CHANGED, this.onFilterChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_SORT_CHANGED, this.onSortChanged.bind(this));\n        this.addDestroyableEventListener(this.eventService, Events.EVENT_COLUMN_EVERYTHING_CHANGED, this.onColumnEverything.bind(this));\n    };\n    InfiniteRowModel.prototype.onFilterChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onSortChanged = function () {\n        this.reset();\n    };\n    InfiniteRowModel.prototype.onColumnEverything = function () {\n        var resetRequired;\n        // if cache params, we require reset only if sort model has changed. we don't need to check\n        // for filter model, as the filter manager will fire an event when columns change that result\n        // in the filter changing.\n        if (this.cacheParams) {\n            resetRequired = this.isSortModelDifferent();\n        }\n        else {\n            // if no cacheParams, means first time creating the cache, so always create one\n            resetRequired = true;\n        }\n        if (resetRequired) {\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.isSortModelDifferent = function () {\n        return !_.jsonEquals(this.cacheParams.sortModel, this.sortController.getSortModel());\n    };\n    InfiniteRowModel.prototype.getType = function () {\n        return Constants.ROW_MODEL_TYPE_INFINITE;\n    };\n    InfiniteRowModel.prototype.setDatasource = function (datasource) {\n        this.destroyDatasource();\n        this.datasource = datasource;\n        // only reset if we have a valid datasource to working with\n        if (datasource) {\n            this.checkForDeprecated();\n            this.reset();\n        }\n    };\n    InfiniteRowModel.prototype.checkForDeprecated = function () {\n        var ds = this.datasource;\n        // the number of concurrent loads we are allowed to the server\n        if (_.exists(ds.maxConcurrentRequests)) {\n            console.error('ag-Grid: since version 5.1.x, maxConcurrentRequests is replaced with grid property maxConcurrentDatasourceRequests');\n        }\n        if (_.exists(ds.maxPagesInCache)) {\n            console.error('ag-Grid: since version 5.1.x, maxPagesInCache is replaced with grid property maxPagesInPaginationCache');\n        }\n        if (_.exists(ds.overflowSize)) {\n            console.error('ag-Grid: since version 5.1.x, overflowSize is replaced with grid property paginationOverflowSize');\n        }\n        if (_.exists(ds.blockSize)) {\n            console.error('ag-Grid: since version 5.1.x, pageSize/blockSize is replaced with grid property infinitePageSize');\n        }\n    };\n    InfiniteRowModel.prototype.isEmpty = function () {\n        return _.missing(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.isRowsToRender = function () {\n        return _.exists(this.infiniteCache);\n    };\n    InfiniteRowModel.prototype.getNodesInRangeForSelection = function (firstInRange, lastInRange) {\n        return this.infiniteCache ? this.infiniteCache.getRowNodesInRange(firstInRange, lastInRange) : [];\n    };\n    InfiniteRowModel.prototype.reset = function () {\n        // important to return here, as the user could be setting filter or sort before\n        // data-source is set\n        if (_.missing(this.datasource)) {\n            return;\n        }\n        // if user is providing id's, then this means we can keep the selection between datasource hits,\n        // as the rows will keep their unique id's even if, for example, server side sorting or filtering\n        // is done.\n        var userGeneratingIds = _.exists(this.gridOptionsWrapper.getRowNodeIdFunc());\n        if (!userGeneratingIds) {\n            this.selectionController.reset();\n        }\n        this.resetCache();\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.createModelUpdatedEvent = function () {\n        return {\n            type: Events.EVENT_MODEL_UPDATED,\n            api: this.gridApi,\n            columnApi: this.columnApi,\n            // not sure if these should all be false - noticed if after implementing,\n            // maybe they should be true?\n            newPage: false,\n            newData: false,\n            keepRenderedRows: false,\n            animate: false\n        };\n    };\n    InfiniteRowModel.prototype.resetCache = function () {\n        // if not first time creating a cache, need to destroy the old one\n        this.destroyCache();\n        var maxConcurrentRequests = this.gridOptionsWrapper.getMaxConcurrentDatasourceRequests();\n        var blockLoadDebounceMillis = this.gridOptionsWrapper.getBlockLoadDebounceMillis();\n        // there is a bi-directional dependency between the loader and the cache,\n        // so we create loader here, and then pass dependencies in setDependencies() method later\n        this.rowNodeBlockLoader = new RowNodeBlockLoader(maxConcurrentRequests, blockLoadDebounceMillis);\n        this.getContext().wireBean(this.rowNodeBlockLoader);\n        this.cacheParams = {\n            // the user provided datasource\n            datasource: this.datasource,\n            // sort and filter model\n            filterModel: this.filterManager.getFilterModel(),\n            sortModel: this.sortController.getSortModel(),\n            rowNodeBlockLoader: this.rowNodeBlockLoader,\n            // properties - this way we take a snapshot of them, so if user changes any, they will be\n            // used next time we create a new cache, which is generally after a filter or sort change,\n            // or a new datasource is set\n            maxConcurrentRequests: maxConcurrentRequests,\n            overflowSize: this.gridOptionsWrapper.getCacheOverflowSize(),\n            initialRowCount: this.gridOptionsWrapper.getInfiniteInitialRowCount(),\n            maxBlocksInCache: this.gridOptionsWrapper.getMaxBlocksInCache(),\n            blockSize: this.gridOptionsWrapper.getCacheBlockSize(),\n            rowHeight: this.gridOptionsWrapper.getRowHeightAsNumber(),\n            // the cache could create this, however it is also used by the pages, so handy to create it\n            // here as the settings are also passed to the pages\n            lastAccessedSequence: new NumberSequence()\n        };\n        // set defaults\n        if (!this.cacheParams.maxConcurrentRequests || !(this.cacheParams.maxConcurrentRequests >= 1)) {\n            this.cacheParams.maxConcurrentRequests = 2;\n        }\n        // page size needs to be 1 or greater. having it at 1 would be silly, as you would be hitting the\n        // server for one page at a time. so the default if not specified is 100.\n        if (!this.cacheParams.blockSize || !(this.cacheParams.blockSize >= 1)) {\n            this.cacheParams.blockSize = 100;\n        }\n        // if user doesn't give initial rows to display, we assume zero\n        if (!(this.cacheParams.initialRowCount >= 1)) {\n            this.cacheParams.initialRowCount = 0;\n        }\n        // if user doesn't provide overflow, we use default overflow of 1, so user can scroll past\n        // the current page and request first row of next page\n        if (!(this.cacheParams.overflowSize >= 1)) {\n            this.cacheParams.overflowSize = 1;\n        }\n        this.infiniteCache = new InfiniteCache(this.cacheParams);\n        this.getContext().wireBean(this.infiniteCache);\n        this.infiniteCache.addEventListener(RowNodeCache.EVENT_CACHE_UPDATED, this.onCacheUpdated.bind(this));\n    };\n    InfiniteRowModel.prototype.destroyCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.destroy();\n            this.infiniteCache = null;\n        }\n        if (this.rowNodeBlockLoader) {\n            this.rowNodeBlockLoader.destroy();\n            this.rowNodeBlockLoader = null;\n        }\n    };\n    InfiniteRowModel.prototype.onCacheUpdated = function () {\n        var event = this.createModelUpdatedEvent();\n        this.eventService.dispatchEvent(event);\n    };\n    InfiniteRowModel.prototype.getRow = function (rowIndex) {\n        return this.infiniteCache ? this.infiniteCache.getRow(rowIndex) : null;\n    };\n    InfiniteRowModel.prototype.getRowNode = function (id) {\n        var result = null;\n        this.forEachNode(function (rowNode) {\n            if (rowNode.id === id) {\n                result = rowNode;\n            }\n        });\n        return result;\n    };\n    InfiniteRowModel.prototype.forEachNode = function (callback) {\n        if (this.infiniteCache) {\n            this.infiniteCache.forEachNodeDeep(callback, new NumberSequence());\n        }\n    };\n    InfiniteRowModel.prototype.getCurrentPageHeight = function () {\n        return this.getRowCount() * this.rowHeight;\n    };\n    InfiniteRowModel.prototype.getTopLevelRowCount = function () {\n        return this.getRowCount();\n    };\n    InfiniteRowModel.prototype.getTopLevelRowDisplayedIndex = function (topLevelIndex) {\n        return topLevelIndex;\n    };\n    InfiniteRowModel.prototype.getRowIndexAtPixel = function (pixel) {\n        if (this.rowHeight !== 0) { // avoid divide by zero error\n            var rowIndexForPixel = Math.floor(pixel / this.rowHeight);\n            var lastRowIndex = this.getRowCount() - 1;\n            if (rowIndexForPixel > lastRowIndex) {\n                return lastRowIndex;\n            }\n            else {\n                return rowIndexForPixel;\n            }\n        }\n        else {\n            return 0;\n        }\n    };\n    InfiniteRowModel.prototype.getRowCount = function () {\n        return this.infiniteCache ? this.infiniteCache.getVirtualRowCount() : 0;\n    };\n    InfiniteRowModel.prototype.updateRowData = function (transaction) {\n        if (_.exists(transaction.remove) || _.exists(transaction.update)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel does not support remove or update, only add');\n            return;\n        }\n        if (_.missing(transaction.addIndex)) {\n            console.warn('ag-Grid: updateRowData for InfiniteRowModel requires add and addIndex to be set');\n            return;\n        }\n        if (this.infiniteCache) {\n            this.infiniteCache.insertItemsAtIndex(transaction.addIndex, transaction.add);\n        }\n    };\n    InfiniteRowModel.prototype.isRowPresent = function (rowNode) {\n        return false;\n    };\n    InfiniteRowModel.prototype.refreshCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.refreshCache();\n        }\n    };\n    InfiniteRowModel.prototype.purgeCache = function () {\n        if (this.infiniteCache) {\n            this.infiniteCache.purgeCache();\n        }\n    };\n    InfiniteRowModel.prototype.getVirtualRowCount = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.getVirtualRowCount();\n        }\n        else {\n            return null;\n        }\n    };\n    InfiniteRowModel.prototype.isMaxRowFound = function () {\n        if (this.infiniteCache) {\n            return this.infiniteCache.isMaxRowFound();\n        }\n    };\n    InfiniteRowModel.prototype.setVirtualRowCount = function (rowCount, maxRowFound) {\n        if (this.infiniteCache) {\n            this.infiniteCache.setVirtualRowCount(rowCount, maxRowFound);\n        }\n    };\n    InfiniteRowModel.prototype.getBlockState = function () {\n        if (this.rowNodeBlockLoader) {\n            return this.rowNodeBlockLoader.getBlockState();\n        }\n        else {\n            return null;\n        }\n    };\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], InfiniteRowModel.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        Autowired('filterManager')\n    ], InfiniteRowModel.prototype, \"filterManager\", void 0);\n    __decorate([\n        Autowired('sortController')\n    ], InfiniteRowModel.prototype, \"sortController\", void 0);\n    __decorate([\n        Autowired('selectionController')\n    ], InfiniteRowModel.prototype, \"selectionController\", void 0);\n    __decorate([\n        Autowired('eventService')\n    ], InfiniteRowModel.prototype, \"eventService\", void 0);\n    __decorate([\n        Autowired('gridApi')\n    ], InfiniteRowModel.prototype, \"gridApi\", void 0);\n    __decorate([\n        Autowired('columnApi')\n    ], InfiniteRowModel.prototype, \"columnApi\", void 0);\n    __decorate([\n        Autowired('rowRenderer')\n    ], InfiniteRowModel.prototype, \"rowRenderer\", void 0);\n    __decorate([\n        PostConstruct\n    ], InfiniteRowModel.prototype, \"init\", null);\n    __decorate([\n        PreDestroy\n    ], InfiniteRowModel.prototype, \"destroyDatasource\", null);\n    InfiniteRowModel = __decorate([\n        Bean('rowModel')\n    ], InfiniteRowModel);\n    return InfiniteRowModel;\n}(BeanStub));\nexport { InfiniteRowModel };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { InfiniteRowModel } from \"./infiniteRowModel/infiniteRowModel\";\nexport var InfiniteRowModelModule = {\n    moduleName: ModuleNames.InfiniteRowModelModule,\n    rowModels: { 'infinite': InfiniteRowModel }\n};\n","var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { _, Autowired, Bean, Constants, PostConstruct } from \"@ag-grid-community/core\";\nimport { BaseGridSerializingSession } from \"./gridSerializer\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar CsvSerializingSession = /** @class */ (function (_super) {\n    __extends(CsvSerializingSession, _super);\n    function CsvSerializingSession(config) {\n        var _this = _super.call(this, config) || this;\n        _this.isFirstLine = true;\n        _this.result = '';\n        var suppressQuotes = config.suppressQuotes, columnSeparator = config.columnSeparator;\n        _this.suppressQuotes = suppressQuotes;\n        _this.columnSeparator = columnSeparator;\n        return _this;\n    }\n    CsvSerializingSession.prototype.addCustomContent = function (content) {\n        var _this = this;\n        if (!content) {\n            return;\n        }\n        if (typeof content === 'string') {\n            // we used to require the customFooter to be prefixed with a newline but no longer do,\n            // so only add the newline if the user has not supplied one\n            if (!/^\\s*\\n/.test(content)) {\n                this.beginNewLine();\n            }\n            // replace whatever newlines are supplied with the style we're using\n            content = content.replace(/\\r?\\n/g, LINE_SEPARATOR);\n            this.result += content;\n        }\n        else {\n            content.forEach(function (row) {\n                _this.beginNewLine();\n                row.forEach(function (cell, index) {\n                    if (index !== 0) {\n                        _this.result += _this.columnSeparator;\n                    }\n                    _this.result += _this.putInQuotes(cell.data.value || '');\n                    if (cell.mergeAcross) {\n                        _this.appendEmptyCells(cell.mergeAcross);\n                    }\n                });\n            });\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderGroupingRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderGroupingRowColumn = function (header, index, span) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(header);\n        this.appendEmptyCells(span);\n    };\n    CsvSerializingSession.prototype.appendEmptyCells = function (count) {\n        for (var i = 1; i <= count; i++) {\n            this.result += this.columnSeparator + this.putInQuotes(\"\");\n        }\n    };\n    CsvSerializingSession.prototype.onNewHeaderRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewHeaderRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewHeaderRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractHeaderValue(column));\n    };\n    CsvSerializingSession.prototype.onNewBodyRow = function () {\n        this.beginNewLine();\n        return {\n            onColumn: this.onNewBodyRowColumn.bind(this)\n        };\n    };\n    CsvSerializingSession.prototype.onNewBodyRowColumn = function (column, index, node) {\n        if (index != 0) {\n            this.result += this.columnSeparator;\n        }\n        this.result += this.putInQuotes(this.extractRowCellValue(column, index, Constants.EXPORT_TYPE_CSV, node));\n    };\n    CsvSerializingSession.prototype.putInQuotes = function (value) {\n        if (this.suppressQuotes) {\n            return value;\n        }\n        if (value === null || value === undefined) {\n            return '\"\"';\n        }\n        var stringValue;\n        if (typeof value === 'string') {\n            stringValue = value;\n        }\n        else if (typeof value.toString === 'function') {\n            stringValue = value.toString();\n        }\n        else {\n            console.warn('unknown value type during csv conversion');\n            stringValue = '';\n        }\n        // replace each \" with \"\" (ie two sets of double quotes is how to do double quotes in csv)\n        var valueEscaped = stringValue.replace(/\"/g, \"\\\"\\\"\");\n        return '\"' + valueEscaped + '\"';\n    };\n    CsvSerializingSession.prototype.parse = function () {\n        return this.result;\n    };\n    CsvSerializingSession.prototype.beginNewLine = function () {\n        if (!this.isFirstLine) {\n            this.result += LINE_SEPARATOR;\n        }\n        this.isFirstLine = false;\n    };\n    return CsvSerializingSession;\n}(BaseGridSerializingSession));\nexport { CsvSerializingSession };\nvar BaseCreator = /** @class */ (function () {\n    function BaseCreator() {\n    }\n    BaseCreator.prototype.setBeans = function (beans) {\n        this.beans = beans;\n    };\n    BaseCreator.prototype.export = function (userParams) {\n        if (this.isExportSuppressed()) {\n            console.warn(\"ag-grid: Export cancelled. Export is not allowed as per your configuration.\");\n            return '';\n        }\n        var _a = this.getMergedParamsAndData(userParams), mergedParams = _a.mergedParams, data = _a.data;\n        var fileNamePresent = mergedParams && mergedParams.fileName && mergedParams.fileName.length !== 0;\n        var fileName = fileNamePresent ? mergedParams.fileName : this.getDefaultFileName();\n        if (fileName.indexOf(\".\") === -1) {\n            fileName = fileName + \".\" + this.getDefaultFileExtension();\n        }\n        this.beans.downloader.download(fileName, this.packageFile(data));\n        return data;\n    };\n    BaseCreator.prototype.getData = function (params) {\n        return this.getMergedParamsAndData(params).data;\n    };\n    BaseCreator.prototype.getMergedParamsAndData = function (userParams) {\n        var mergedParams = this.mergeDefaultParams(userParams);\n        var data = this.beans.gridSerializer.serialize(this.createSerializingSession(mergedParams), mergedParams);\n        return { mergedParams: mergedParams, data: data };\n    };\n    BaseCreator.prototype.mergeDefaultParams = function (userParams) {\n        var baseParams = this.beans.gridOptionsWrapper.getDefaultExportParams();\n        var params = {};\n        _.assign(params, baseParams);\n        _.assign(params, userParams);\n        return params;\n    };\n    BaseCreator.prototype.packageFile = function (data) {\n        return new Blob([\"\\ufeff\", data], {\n            type: window.navigator.msSaveOrOpenBlob ? this.getMimeType() : 'octet/stream'\n        });\n    };\n    return BaseCreator;\n}());\nexport { BaseCreator };\nvar CsvCreator = /** @class */ (function (_super) {\n    __extends(CsvCreator, _super);\n    function CsvCreator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    CsvCreator.prototype.postConstruct = function () {\n        this.setBeans({\n            downloader: this.downloader,\n            gridSerializer: this.gridSerializer,\n            gridOptionsWrapper: this.gridOptionsWrapper\n        });\n    };\n    CsvCreator.prototype.exportDataAsCsv = function (params) {\n        return this.export(params);\n    };\n    CsvCreator.prototype.getDataAsCsv = function (params) {\n        return this.getData(params);\n    };\n    CsvCreator.prototype.getMimeType = function () {\n        return 'text/csv;charset=utf-8;';\n    };\n    CsvCreator.prototype.getDefaultFileName = function () {\n        return 'export.csv';\n    };\n    CsvCreator.prototype.getDefaultFileExtension = function () {\n        return 'csv';\n    };\n    CsvCreator.prototype.createSerializingSession = function (params) {\n        var _a = this, columnController = _a.columnController, valueService = _a.valueService, gridOptionsWrapper = _a.gridOptionsWrapper;\n        var processCellCallback = params.processCellCallback, processHeaderCallback = params.processHeaderCallback, processGroupHeaderCallback = params.processGroupHeaderCallback, processRowGroupCallback = params.processRowGroupCallback, suppressQuotes = params.suppressQuotes, columnSeparator = params.columnSeparator;\n        return new CsvSerializingSession({\n            columnController: columnController,\n            valueService: valueService,\n            gridOptionsWrapper: gridOptionsWrapper,\n            processCellCallback: processCellCallback || undefined,\n            processHeaderCallback: processHeaderCallback || undefined,\n            processGroupHeaderCallback: processGroupHeaderCallback || undefined,\n            processRowGroupCallback: processRowGroupCallback || undefined,\n            suppressQuotes: suppressQuotes || false,\n            columnSeparator: columnSeparator || ','\n        });\n    };\n    CsvCreator.prototype.isExportSuppressed = function () {\n        return this.gridOptionsWrapper.isSuppressCsvExport();\n    };\n    __decorate([\n        Autowired('columnController')\n    ], CsvCreator.prototype, \"columnController\", void 0);\n    __decorate([\n        Autowired('valueService')\n    ], CsvCreator.prototype, \"valueService\", void 0);\n    __decorate([\n        Autowired('downloader')\n    ], CsvCreator.prototype, \"downloader\", void 0);\n    __decorate([\n        Autowired('gridSerializer')\n    ], CsvCreator.prototype, \"gridSerializer\", void 0);\n    __decorate([\n        Autowired('gridOptionsWrapper')\n    ], CsvCreator.prototype, \"gridOptionsWrapper\", void 0);\n    __decorate([\n        PostConstruct\n    ], CsvCreator.prototype, \"postConstruct\", null);\n    CsvCreator = __decorate([\n        Bean('csvCreator')\n    ], CsvCreator);\n    return CsvCreator;\n}(BaseCreator));\nexport { CsvCreator };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"@ag-grid-community/core\";\nvar Downloader = /** @class */ (function () {\n    function Downloader() {\n    }\n    Downloader.prototype.download = function (fileName, content) {\n        // Internet Explorer\n        if (window.navigator.msSaveOrOpenBlob) {\n            window.navigator.msSaveOrOpenBlob(content, fileName);\n        }\n        else {\n            // Other Browsers\n            var element = document.createElement(\"a\");\n            var url_1 = window.URL.createObjectURL(content);\n            element.setAttribute(\"href\", url_1);\n            element.setAttribute(\"download\", fileName);\n            element.style.display = \"none\";\n            document.body.appendChild(element);\n            element.dispatchEvent(new MouseEvent('click', {\n                bubbles: false,\n                cancelable: true,\n                view: window\n            }));\n            document.body.removeChild(element);\n            window.setTimeout(function () {\n                window.URL.revokeObjectURL(url_1);\n            }, 0);\n        }\n    };\n    Downloader = __decorate([\n        Bean(\"downloader\")\n    ], Downloader);\n    return Downloader;\n}());\nexport { Downloader };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean } from \"@ag-grid-community/core\";\nvar LINE_SEPARATOR = '\\r\\n';\nvar XmlFactory = /** @class */ (function () {\n    function XmlFactory() {\n    }\n    XmlFactory.prototype.createHeader = function (headerElement) {\n        if (headerElement === void 0) { headerElement = {}; }\n        var headerStart = '<?';\n        var headerEnd = '?>';\n        var keys = ['version'];\n        if (!headerElement.version) {\n            headerElement.version = \"1.0\";\n        }\n        if (headerElement.encoding) {\n            keys.push('encoding');\n        }\n        if (headerElement.standalone) {\n            keys.push('standalone');\n        }\n        var att = keys.map(function (key) { return key + \"=\\\"\" + headerElement[key] + \"\\\"\"; }).join(' ');\n        return headerStart + \"xml \" + att + \" \" + headerEnd;\n    };\n    XmlFactory.prototype.createXml = function (xmlElement, booleanTransformer) {\n        var _this = this;\n        var props = '';\n        if (xmlElement.properties) {\n            if (xmlElement.properties.prefixedAttributes) {\n                xmlElement.properties.prefixedAttributes.forEach(function (prefixedSet) {\n                    Object.keys(prefixedSet.map).forEach(function (key) {\n                        props += _this.returnAttributeIfPopulated(prefixedSet.prefix + key, prefixedSet.map[key], booleanTransformer);\n                    });\n                });\n            }\n            if (xmlElement.properties.rawMap) {\n                Object.keys(xmlElement.properties.rawMap).forEach(function (key) {\n                    props += _this.returnAttributeIfPopulated(key, xmlElement.properties.rawMap[key], booleanTransformer);\n                });\n            }\n        }\n        var result = '<' + xmlElement.name + props;\n        if (!xmlElement.children && xmlElement.textNode == null) {\n            return result + '/>' + LINE_SEPARATOR;\n        }\n        if (xmlElement.textNode != null) {\n            return result + '>' + xmlElement.textNode + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n        }\n        result += '>' + LINE_SEPARATOR;\n        if (xmlElement.children) {\n            xmlElement.children.forEach(function (it) {\n                result += _this.createXml(it, booleanTransformer);\n            });\n        }\n        return result + '</' + xmlElement.name + '>' + LINE_SEPARATOR;\n    };\n    XmlFactory.prototype.returnAttributeIfPopulated = function (key, value, booleanTransformer) {\n        if (!value && value !== '' && value !== 0) {\n            return '';\n        }\n        var xmlValue = value;\n        if ((typeof (value) === 'boolean')) {\n            if (booleanTransformer) {\n                xmlValue = booleanTransformer(value);\n            }\n        }\n        return \" \" + key + \"=\\\"\" + xmlValue + \"\\\"\";\n    };\n    XmlFactory = __decorate([\n        Bean('xmlFactory')\n    ], XmlFactory);\n    return XmlFactory;\n}());\nexport { XmlFactory };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Bean, _ } from \"@ag-grid-community/core\";\n// table for crc calculation\n// from: https://referencesource.microsoft.com/#System/sys/System/IO/compression/Crc32Helper.cs,3b31978c7d7f7246,references\nvar crcTable = [\n    0, 1996959894, -301047508, -1727442502, 124634137, 1886057615, -379345611, -1637575261, 249268274,\n    2044508324, -522852066, -1747789432, 162941995, 2125561021, -407360249, -1866523247, 498536548,\n    1789927666, -205950648, -2067906082, 450548861, 1843258603, -187386543, -2083289657, 325883990,\n    1684777152, -43845254, -1973040660, 335633487, 1661365465, -99664541, -1928851979, 997073096,\n    1281953886, -715111964, -1570279054, 1006888145, 1258607687, -770865667, -1526024853, 901097722,\n    1119000684, -608450090, -1396901568, 853044451, 1172266101, -589951537, -1412350631, 651767980,\n    1373503546, -925412992, -1076862698, 565507253, 1454621731, -809855591, -1195530993, 671266974,\n    1594198024, -972236366, -1324619484, 795835527, 1483230225, -1050600021, -1234817731, 1994146192,\n    31158534, -1731059524, -271249366, 1907459465, 112637215, -1614814043, -390540237, 2013776290,\n    251722036, -1777751922, -519137256, 2137656763, 141376813, -1855689577, -429695999, 1802195444,\n    476864866, -2056965928, -228458418, 1812370925, 453092731, -2113342271, -183516073, 1706088902,\n    314042704, -1950435094, -54949764, 1658658271, 366619977, -1932296973, -69972891, 1303535960,\n    984961486, -1547960204, -725929758, 1256170817, 1037604311, -1529756563, -740887301, 1131014506,\n    879679996, -1385723834, -631195440, 1141124467, 855842277, -1442165665, -586318647, 1342533948,\n    654459306, -1106571248, -921952122, 1466479909, 544179635, -1184443383, -832445281, 1591671054,\n    702138776, -1328506846, -942167884, 1504918807, 783551873, -1212326853, -1061524307, -306674912,\n    -1698712650, 62317068, 1957810842, -355121351, -1647151185, 81470997, 1943803523, -480048366,\n    -1805370492, 225274430, 2053790376, -468791541, -1828061283, 167816743, 2097651377, -267414716,\n    -2029476910, 503444072, 1762050814, -144550051, -2140837941, 426522225, 1852507879, -19653770,\n    -1982649376, 282753626, 1742555852, -105259153, -1900089351, 397917763, 1622183637, -690576408,\n    -1580100738, 953729732, 1340076626, -776247311, -1497606297, 1068828381, 1219638859, -670225446,\n    -1358292148, 906185462, 1090812512, -547295293, -1469587627, 829329135, 1181335161, -882789492,\n    -1134132454, 628085408, 1382605366, -871598187, -1156888829, 570562233, 1426400815, -977650754,\n    -1296233688, 733239954, 1555261956, -1026031705, -1244606671, 752459403, 1541320221, -1687895376,\n    -328994266, 1969922972, 40735498, -1677130071, -351390145, 1913087877, 83908371, -1782625662,\n    -491226604, 2075208622, 213261112, -1831694693, -438977011, 2094854071, 198958881, -2032938284,\n    -237706686, 1759359992, 534414190, -2118248755, -155638181, 1873836001, 414664567, -2012718362,\n    -15766928, 1711684554, 285281116, -1889165569, -127750551, 1634467795, 376229701, -1609899400,\n    -686959890, 1308918612, 956543938, -1486412191, -799009033, 1231636301, 1047427035, -1362007478,\n    -640263460, 1088359270, 936918000, -1447252397, -558129467, 1202900863, 817233897, -1111625188,\n    -893730166, 1404277552, 615818150, -1160759803, -841546093, 1423857449, 601450431, -1285129682,\n    -1000256840, 1567103746, 711928724, -1274298825, -1022587231, 1510334235, 755167117\n];\nvar ZipContainer = /** @class */ (function () {\n    function ZipContainer() {\n        var _this = this;\n        this.folders = [];\n        this.files = [];\n        this.addFolder = function (path) {\n            _this.folders.push({\n                path: path,\n                created: new Date()\n            });\n        };\n    }\n    ZipContainer.prototype.addFolders = function (paths) {\n        paths.forEach(this.addFolder);\n    };\n    ZipContainer.prototype.addFile = function (path, content) {\n        this.files.push({\n            path: path,\n            created: new Date(),\n            content: content\n        });\n    };\n    ZipContainer.prototype.clearStream = function () {\n        this.folders = [];\n        this.files = [];\n    };\n    ZipContainer.prototype.getContent = function (mimeType) {\n        if (mimeType === void 0) { mimeType = 'application/zip'; }\n        var textOutput = this.buildFileStream();\n        var uInt8Output = this.buildUint8Array(textOutput);\n        this.clearStream();\n        return new Blob([uInt8Output], { type: mimeType });\n    };\n    ZipContainer.prototype.buildFileStream = function (fData) {\n        if (fData === void 0) { fData = ''; }\n        var totalFiles = this.folders.concat(this.files);\n        var len = totalFiles.length;\n        var foData = '';\n        var lL = 0;\n        var cL = 0;\n        for (var _i = 0, totalFiles_1 = totalFiles; _i < totalFiles_1.length; _i++) {\n            var currentFile = totalFiles_1[_i];\n            var _a = this.getHeader(currentFile, lL), fileHeader = _a.fileHeader, folderHeader = _a.folderHeader, content = _a.content;\n            lL += fileHeader.length + content.length;\n            cL += folderHeader.length;\n            fData += fileHeader + content;\n            foData += folderHeader;\n        }\n        var foEnd = this.buildFolderEnd(len, cL, lL);\n        return fData + foData + foEnd;\n    };\n    ZipContainer.prototype.getHeader = function (currentFile, offset) {\n        var content = currentFile.content, path = currentFile.path, created = currentFile.created;\n        var utf8_encode = _.utf8_encode, decToHex = _.decToHex;\n        var utfPath = utf8_encode(path);\n        var isUTF8 = utfPath !== path;\n        var time = this.convertTime(created);\n        var dt = this.convertDate(created);\n        var extraFields = '';\n        if (isUTF8) {\n            var uExtraFieldPath = decToHex(1, 1) + decToHex(this.getFromCrc32Table(utfPath), 4) + utfPath;\n            extraFields = \"\\x75\\x70\" + decToHex(uExtraFieldPath.length, 2) + uExtraFieldPath;\n        }\n        var header = '\\x0A\\x00' +\n            (isUTF8 ? '\\x00\\x08' : '\\x00\\x00') +\n            '\\x00\\x00' +\n            decToHex(time, 2) + // last modified time\n            decToHex(dt, 2) + // last modified date\n            decToHex(content ? this.getFromCrc32Table(content) : 0, 4) +\n            decToHex(content ? content.length : 0, 4) + // compressed size\n            decToHex(content ? content.length : 0, 4) + // uncompressed size\n            decToHex(utfPath.length, 2) + // file name length\n            decToHex(extraFields.length, 2); // extra field length\n        var fileHeader = 'PK\\x03\\x04' + header + utfPath + extraFields;\n        var folderHeader = 'PK\\x01\\x02' + // central header\n            '\\x14\\x00' +\n            header + // file header\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            (content ? '\\x00\\x00\\x00\\x00' : '\\x10\\x00\\x00\\x00') + // external file attributes\n            decToHex(offset, 4) + // relative offset of local header\n            utfPath + // file name\n            extraFields; // extra field\n        return { fileHeader: fileHeader, folderHeader: folderHeader, content: content || '' };\n    };\n    ZipContainer.prototype.buildFolderEnd = function (tLen, cLen, lLen) {\n        var decToHex = _.decToHex;\n        return 'PK\\x05\\x06' + // central folder end\n            '\\x00\\x00' +\n            '\\x00\\x00' +\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(tLen, 2) + // total number of entries in the central folder\n            decToHex(cLen, 4) + // size of the central folder\n            decToHex(lLen, 4) + // central folder start offset\n            '\\x00\\x00';\n    };\n    ZipContainer.prototype.buildUint8Array = function (content) {\n        var uint8 = new Uint8Array(content.length);\n        for (var i = 0; i < uint8.length; i++) {\n            uint8[i] = content.charCodeAt(i);\n        }\n        return uint8;\n    };\n    ZipContainer.prototype.getFromCrc32Table = function (content, crc) {\n        if (crc === void 0) { crc = 0; }\n        if (!content.length) {\n            return 0;\n        }\n        crc ^= (-1);\n        var j = 0;\n        var k = 0;\n        var l = 0;\n        for (var i = 0; i < content.length; i++) {\n            j = content.charCodeAt(i);\n            k = (crc ^ j) & 0xFF;\n            l = crcTable[k];\n            crc = (crc >>> 8) ^ l;\n        }\n        return crc ^ (-1);\n    };\n    ZipContainer.prototype.convertTime = function (date) {\n        var time = date.getHours();\n        time <<= 6;\n        time = time | date.getMinutes();\n        time <<= 5;\n        time = time | date.getSeconds() / 2;\n        return time;\n    };\n    ZipContainer.prototype.convertDate = function (date) {\n        var dt = date.getFullYear() - 1980;\n        dt <<= 4;\n        dt = dt | (date.getMonth() + 1);\n        dt <<= 5;\n        dt = dt | date.getDate();\n        return dt;\n    };\n    ZipContainer = __decorate([\n        Bean('zipContainer')\n    ], ZipContainer);\n    return ZipContainer;\n}());\nexport { ZipContainer };\n","import { ModuleNames } from \"@ag-grid-community/core\";\nimport { CsvCreator } from \"./csvExport/csvCreator\";\nimport { Downloader } from \"./csvExport/downloader\";\nimport { XmlFactory } from \"./csvExport/xmlFactory\";\nimport { GridSerializer } from \"./csvExport/gridSerializer\";\nimport { ZipContainer } from \"./csvExport/zipContainer\";\nexport var CsvExportModule = {\n    moduleName: ModuleNames.CsvExportModule,\n    beans: [CsvCreator, Downloader, XmlFactory, GridSerializer, ZipContainer]\n};\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\nimport { InfiniteRowModelModule } from '@ag-grid-community/infinite-row-model';\nimport { CsvExportModule } from '@ag-grid-community/csv-export';\nexport var AllCommunityModules = [ClientSideRowModelModule, InfiniteRowModelModule, CsvExportModule];\nexport * from \"@ag-grid-community/client-side-row-model\";\nexport * from \"@ag-grid-community/csv-export\";\nexport * from \"@ag-grid-community/infinite-row-model\";\nexport * from \"@ag-grid-community/core\";\n"],"sourceRoot":"webpack:///"}