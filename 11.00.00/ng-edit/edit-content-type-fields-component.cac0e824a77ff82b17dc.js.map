{"version":3,"sources":["./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts"],"names":["dataTypeLabels","Boolean","label","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","dialogRef","route","contentTypesService","contentTypesFieldsService","snackBar","filteredInputTypeOptions","dataTypeHints","inputTypeHints","contentTypeNamePattern","contentTypeNameError","this","contentTypeStaticName","snapshot","paramMap","get","ngOnInit","retrieveContentType","toPromise","contentType","getFields","allFields","editFieldId","parseInt","editMode","typeListRetrieve","rawDataTypes","dataTypes","rawDataType","push","name","icon","calculateDataTypes","getInputTypesList","inputTypeOptions","editField","find","field","Id","fields","i","Type","InputType","StaticName","IsTitle","length","SortOrder","calculateInputTypeOptions","calculateHints","closeDialog","close","resetInputType","index","toLowerCase","filter","option","dataType","selectedDataType","selectedInputType","inputTypeOption","inputType","onSubmit","open","updateInputType","rowsWithValue","add","duration","findIcon","typeName","EditContentTypeFieldsComponent"],"mappings":"iIAGMA,EAA4E,CAChFC,QAAS,CAAEC,MAAO,mBAAoBC,YAAa,+BACnDC,OAAQ,CAAEF,MAAO,oCAAqCC,YAAa,iLACnEE,SAAU,CAAEH,MAAO,mBAAoBC,YAAa,qCACpDG,MAAO,CAAEJ,MAAO,+BAAgCC,YAAa,8BAC7DI,OAAQ,CAAEL,MAAO,+BAAgCC,YAAa,mCAC9DK,UAAW,CAAEN,MAAO,wBAAyBC,YAAa,8CAC1DM,OAAQ,CAAEP,MAAO,SAAUC,YAAa,sBACxCO,OAAQ,CAAER,MAAO,gBAAiBC,YAAa,qB,sNCT7C,QAAwC,iBAAM,Q,sBAC9C,QAAmC,qBAAU,Q,sBAC7C,QAAoC,qBAAU,Q,yBAa1C,4BAAmE,QAA0B,Q,mBAA3C,mBAAiB,sC,yBADrE,QACE,kCACF,Q,0BADkB,uC,yBAad,wBACE,mBAAU,QAAmB,OAC7B,eAAM,QAAoB,OAC5B,Q,uBAH+C,qBACnC,qBACJ,uB,yBAWR,wBACE,QAAkB,Q,uBAD2C,0BAC7D,8B,qCAnCV,iBACE,iBACE,4BACE,oBAAW,eAAI,OACf,sBAAmD,6EAAnD,OAEF,OACA,gCAGF,OAEA,iBACE,4BACE,qBAAW,qBAAS,OACpB,yBAAY,oJAAsF,kEAEhG,8BACE,uBAA4B,SAA0B,OACtD,gBAAM,SAAgB,OACxB,OACA,+BAIF,OACF,OACA,0BAAgB,SAAsB,OACxC,OAEA,kBACE,6BACE,qBAAW,sBAAU,OACrB,yBAAY,6FAAqC,uEAC/C,+BAEF,OACF,OACA,0BAAgB,SAAuB,OACzC,OACF,O,wDApCsB,iDAAkC,uBAAlC,CAAkC,sBAAlC,CAAkC,uBAGtC,yCASV,+BAAwB,gBAAxB,CAAwB,uBAEM,iCACtB,qBAEI,oCAMA,iCAMoC,oCAA6B,sBACjE,sDAIA,mC,qCAvCtB,mBAAqB,gEACnB,wBA0CA,gBACE,mBAAwC,iBAAM,OAC9C,mBAAuF,eAAI,OAC7F,OACF,O,+BA9C6B,iCA4C8B,wC,+DCxC3D,iBAmBE,WACUQ,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,YACA,KAAAC,QACA,KAAAC,sBACA,KAAAC,4BACA,KAAAC,WAdV,KAAAC,yBAAqD,GACrD,KAAAC,cAA0B,GAC1B,KAAAC,eAA2B,GAC3B,KAAAC,uBAAyB,IACzB,KAAAC,qBAAuB,IAYrBC,KAAKC,sBAAwBD,KAAKT,MAAMW,SAASC,SAASC,IAAI,yB,OAG1D,YAAAC,SAAN,W,gIACqB,OAAnB,EAAAL,KAAmB,GAAMA,KAAKR,oBAAoBc,oBAAoBN,KAAKC,uBAAuBM,a,OAChF,OADlB,EAAKC,YAAc,SACD,GAAMR,KAAKP,0BAA0BgB,UAAUT,KAAKQ,aAAaD,a,OAG9D,OAHfG,EAAY,SACZC,EAAcX,KAAKT,MAAMW,SAASC,SAASC,IAAI,MAAQQ,SAASZ,KAAKT,MAAMW,SAASC,SAASC,IAAI,MAAO,IAAM,KACpHJ,KAAKa,SAA4B,OAAhBF,EACI,GAAMX,KAAKP,0BAA0BqB,mBAAmBP,a,OAErD,OAFlBQ,EAAe,SACrBf,KAAKgB,UF1BF,SAA4BD,G,QAC3BC,EAAwB,G,IAC9B,IAA0B,kBAAAD,GAAY,8BAAE,CAAnC,IAAME,EAAW,QACpBD,EAAUE,KAAK,CACbC,KAAMF,EACNpC,MAAOF,EAAesC,GAAapC,MACnCuC,KAAM,YAAkBH,GACxBnC,YAAaH,EAAesC,GAAanC,e,iGAG7C,OAAOkC,EEgBYK,CAAmBN,GACpC,EAAAf,KAAwB,GAAMA,KAAKP,0BAA0B6B,oBAAoBf,a,OAEjF,GAFA,EAAKgB,iBAAmB,SAEpBvB,KAAKa,SACDW,EAAYd,EAAUe,MAAK,SAAAC,GAAS,OAAAA,EAAMC,KAAOhB,KACvDX,KAAK4B,OAAS,CAACJ,QAGf,IADAxB,KAAK4B,OAAS,GACLC,EAAI,EAAGA,GAAK,EAAGA,IACtB7B,KAAK4B,OAAOV,KAAK,CACfS,GAAI,EACJG,KAAM,SACNC,UAAW,iBACXC,WAAY,GACZC,QAA8B,IAArBvB,EAAUwB,OACnBC,UAAWzB,EAAUwB,OAASL,IAKpC,IAASA,EAAI,EAAGA,EAAI7B,KAAK4B,OAAOM,OAAQL,IACtC7B,KAAKoC,0BAA0BP,GAC/B7B,KAAKqC,eAAeR,G,kBAIxB,YAAAS,YAAA,WACEtC,KAAKV,UAAUiD,SAGjB,YAAAC,eAAA,SAAeC,GACbzC,KAAK4B,OAAOa,GAAOV,UAAY/B,KAAK4B,OAAOa,GAAOX,KAAKY,cAAgB,YAGzE,YAAAN,0BAAA,SAA0BK,GAA1B,WACEzC,KAAKL,yBAAyB8C,GAASzC,KAAKuB,iBACzCoB,QAAO,SAAAC,GAAU,OAAAA,EAAOC,WAAa,EAAKjB,OAAOa,GAAOX,KAAKY,kBAGlE,YAAAL,eAAA,SAAeI,GAAf,WACQK,EAAmB9C,KAAKgB,UAAUS,MAAK,SAAAoB,GAAY,OAAAA,EAAS1B,OAAS,EAAKS,OAAOa,GAAOX,QACxFiB,EAAoB/C,KAAKuB,iBAAiBE,MAAK,SAAAuB,GAAmB,OAAAA,EAAgBC,YAAc,EAAKrB,OAAOa,GAAOV,aACzH/B,KAAKJ,cAAc6C,GAASK,EAAmBA,EAAiBhE,YAAc,GAC9EkB,KAAKH,eAAe4C,GAASM,EAAoBA,EAAkBjE,YAAc,IAG7E,YAAAoE,SAAN,W,qIACElD,KAAKN,SAASyD,KAAK,aACfnD,KAAKa,SACK,GAAMb,KAAKP,0BACpB2D,gBAAgBpD,KAAK4B,OAAO,GAAGD,GAAI3B,KAAK4B,OAAO,GAAGI,WAAYhC,KAAK4B,OAAO,GAAGG,WAC7ExB,aAHD,M,cACU,S,cAIN8C,EAAgBrD,KAAK4B,OAAOe,QAAO,SAAAjB,GAAS,OAAAA,EAAMM,c,yCAC7B,cAAAqB,GAAa,W,qCACtC,GAAMrD,KAAKP,0BAA0B6D,IADhB,QACkCtD,KAAKQ,YAAYmB,IAAIpB,a,OAA5E,S,4MAGJP,KAAKN,SAASyD,KAAK,QAAS,KAAM,CAAEI,SAAU,MAC9CvD,KAAKsC,c,YAGP,YAAAkB,SAAA,SAASC,GACP,OAAO,YAAkBA,I,sCA7FhBC,GAA8B,oD,uBAA9BA,EAA8B,yzBDlB3C,gBACE,gBACE,+BACA,+BACA,+BACF,OACF,OAEA,wB,MAPgC,oCACd,oCACA,gCACA,gCAIZ,gC,+XCKN","file":"edit-content-type-fields-component.cac0e824a77ff82b17dc.js","sourcesContent":["import { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n// tslint:disable:max-line-length\r\nconst dataTypeLabels: { [key: string]: { label: string, description: string } } = {\r\n  Boolean: { label: 'Boolean (yes/no)', description: 'Yes/no or true/false values' },\r\n  Custom: { label: 'Custom - ui-tools or custom types', description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: 'Date and/or time', description: 'For date, time or combined values' },\r\n  Empty: { label: 'Empty - for form-titles etc.', description: 'Use to structure your form' },\r\n  Entity: { label: 'Entity (other content-items)', description: 'One or more other content-items' },\r\n  Hyperlink: { label: 'Link / file reference', description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: 'Number', description: 'Any kind of number' },\r\n  String: { label: 'Text / string', description: 'Any kind of text' },\r\n};\r\n// tslint:enable:max-line-length\r\n\r\nexport class DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\" [ngSwitch]=\"editMode\">\r\n    <ng-container *ngSwitchCase=\"undefined\">Fields</ng-container>\r\n    <ng-container *ngSwitchCase=\"true\">Edit Field</ng-container>\r\n    <ng-container *ngSwitchCase=\"false\">Add Fields</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<form *ngIf=\"fields\" (ngSubmit)=\"onSubmit()\" #ngForm=\"ngForm\">\r\n  <div class=\"row-container\" *ngFor=\"let field of fields; index as i\">\r\n    <div class=\"edit-input\">\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Name</mat-label>\r\n        <input matInput [pattern]=\"contentTypeNamePattern\" [(ngModel)]=\"field.StaticName\" [name]=\"'StaticName' + i\"\r\n          [disabled]=\"editMode\" #staticName='ngModel'>\r\n      </mat-form-field>\r\n      <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n        <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <div class=\"edit-input\">\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Data Type</mat-label>\r\n        <mat-select (selectionChange)=\"resetInputType(i); calculateInputTypeOptions(i); calculateHints(i)\"\r\n          [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode\">\r\n          <mat-select-trigger>\r\n            <mat-icon class=\"type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n            <span>{{ field.Type }}</span>\r\n          </mat-select-trigger>\r\n          <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n            <mat-icon>{{ dataType.icon }}</mat-icon>\r\n            <span>{{ dataType.label }}</span>\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"edit-input\">\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Input Type</mat-label>\r\n        <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\">\r\n          <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\">\r\n            {{ option.label }}</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-actions-box\">\r\n    <button mat-raised-button type=\"button\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" type=\"submit\" [disabled]=\"!ngForm.form.valid\">Save</button>\r\n  </div>\r\n</form>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\nimport { ContentTypesService } from '../../app-administration/shared/services/content-types.service';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { ContentType } from '../../app-administration/shared/models/content-type.model';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\nimport { contentTypeNamePattern, contentTypeNameError } from '../../app-administration/shared/constants/content-type';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss']\r\n})\r\nexport class EditContentTypeFieldsComponent implements OnInit {\r\n  fields: Partial<Field>[];\r\n  editMode: boolean;\r\n  dataTypes: DataType[];\r\n  inputTypeOptions: FieldInputTypeOption[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  contentTypeNamePattern = contentTypeNamePattern;\r\n  contentTypeNameError = contentTypeNameError;\r\n\r\n  private contentTypeStaticName: string;\r\n  private contentType: ContentType;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  }\r\n\r\n  async ngOnInit() {\r\n    this.contentType = await this.contentTypesService.retrieveContentType(this.contentTypeStaticName).toPromise();\r\n    const allFields = await this.contentTypesFieldsService.getFields(this.contentType).toPromise();\r\n    const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n    this.editMode = (editFieldId !== null);\r\n    const rawDataTypes = await this.contentTypesFieldsService.typeListRetrieve().toPromise();\r\n    this.dataTypes = calculateDataTypes(rawDataTypes);\r\n    this.inputTypeOptions = await this.contentTypesFieldsService.getInputTypesList().toPromise();\r\n\r\n    if (this.editMode) {\r\n      const editField = allFields.find(field => field.Id === editFieldId);\r\n      this.fields = [editField];\r\n    } else {\r\n      this.fields = [];\r\n      for (let i = 1; i <= 8; i++) {\r\n        this.fields.push({\r\n          Id: 0,\r\n          Type: 'String',\r\n          InputType: 'string-default',\r\n          StaticName: '',\r\n          IsTitle: allFields.length === 0,\r\n          SortOrder: allFields.length + i,\r\n        });\r\n      }\r\n    }\r\n\r\n    for (let i = 0; i < this.fields.length; i++) {\r\n      this.calculateInputTypeOptions(i);\r\n      this.calculateHints(i);\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    this.fields[index].InputType = this.fields[index].Type.toLowerCase() + '-default';\r\n  }\r\n\r\n  calculateInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions\r\n      .filter(option => option.dataType === this.fields[index].Type.toLowerCase());\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType ? selectedDataType.description : '';\r\n    this.inputTypeHints[index] = selectedInputType ? selectedInputType.description : '';\r\n  }\r\n\r\n  async onSubmit() {\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode) {\r\n      const res = await this.contentTypesFieldsService\r\n        .updateInputType(this.fields[0].Id, this.fields[0].StaticName, this.fields[0].InputType)\r\n        .toPromise();\r\n    } else {\r\n      const rowsWithValue = this.fields.filter(field => field.StaticName);\r\n      for (const rowWithValue of rowsWithValue) {\r\n        await this.contentTypesFieldsService.add(rowWithValue, this.contentType.Id).toPromise();\r\n      }\r\n    }\r\n    this.snackBar.open('Saved', null, { duration: 2000 });\r\n    this.closeDialog();\r\n  }\r\n\r\n  findIcon(typeName: string) {\r\n    return calculateTypeIcon(typeName);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}