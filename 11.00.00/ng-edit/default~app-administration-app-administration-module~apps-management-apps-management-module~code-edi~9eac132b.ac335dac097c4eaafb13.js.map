{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/dialog.js"],"names":["MatDialogContainer_ng_template_0_Template","rf","ctx","MatDialogConfig","this","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","maxWidth","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","autoFocus","restoreFocus","closeOnNavigation","matDialogAnimations","dialogContainer","opacity","transform","throwMatDialogContentAlreadyAttachedError","Error","MatDialogContainer","_super","_elementRef","_focusTrapFactory","_changeDetectorRef","_document","_config","_this","call","_elementFocusedBeforeDialogWasOpened","_state","_animationStateChanged","attachDomPortal","portal","_portalOutlet","hasAttached","_savePreviouslyFocusedElement","_ariaLabelledBy","prototype","attachComponentPortal","attachTemplatePortal","_trapFocus","element","nativeElement","_focusTrap","create","focusInitialElementWhenReady","activeElement","contains","focus","_restoreFocus","toFocus","body","destroy","Promise","resolve","then","_onAnimationDone","event","toState","emit","_onAnimationStart","_startExitAnimation","markForCheck","ɵfac","t","ɵcmp","type","selectors","viewQuery","_t","first","hostAttrs","hostVars","hostBindings","$event","_id","features","decls","vars","consts","template","directives","styles","encapsulation","animation","uniqueId","MatDialogRef","_overlayRef","_containerInstance","id","_afterOpened","_afterClosed","_beforeClosed","pipe","phaseName","subscribe","next","complete","clearTimeout","_closeFallbackTimeout","dispose","detachments","_result","componentInstance","keydownEvents","keyCode","preventDefault","close","dialogResult","detachBackdrop","setTimeout","totalTime","afterOpened","asObservable","afterClosed","beforeClosed","backdropClick","updatePosition","position","strategy","_getPositionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","addPanelClass","classes","removePanelClass","getState","getConfig","positionStrategy","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","overlay","scrollStrategies","block","MatDialog","_overlay","_injector","_location","_defaultOptions","scrollStrategy","_parentDialog","_overlayContainer","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","openDialogs","length","_afterAllClosed","undefined","_scrollStrategy","Object","defineProperty","get","enumerable","configurable","parent","open","componentOrTemplateRef","config","defaultOptions","_applyConfigDefaults","getDialogById","overlayRef","_createOverlay","_attachDialogContainer","dialogRef","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","push","_removeOpenDialog","closeAll","_closeDialogs","find","dialog","ngOnDestroy","overlayConfig","_getOverlayConfig","dialogConfig","state","global","direction","minWidth","minHeight","maxHeight","disposeOnNavigation","injector","viewContainerRef","providers","useValue","containerPortal","componentFactoryResolver","attach","instance","$implicit","_createInjector","contentRef","userInjector","value","change","index","indexOf","splice","forEach","previousValue","setAttribute","removeAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","dialogs","ɵprov","token","factory","dialogElementUid","MatDialogClose","_dialog","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","ɵdir","inputs","_matDialogClose","exportAs","MatDialogTitle","_dialogRef","container","MatDialogContent","MatDialogActions","classList","MatDialogModule","ɵmod","ɵinj","imports"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~code-edi~9eac132b.ac335dac097c4eaafb13.js","sourcesContent":["import { Overlay, OverlayConfig, OverlayContainer, OverlayModule } from '@angular/cdk/overlay';\nimport { CdkPortalOutlet, BasePortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { __extends, __assign } from 'tslib';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { DOCUMENT, Location } from '@angular/common';\nimport { Subject, defer, of } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { FocusTrapFactory } from '@angular/cdk/a11y';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/common';\n\nfunction MatDialogContainer_ng_template_0_Template(rf, ctx) { }\nvar MatDialogConfig = /** @class */ (function () {\n    function MatDialogConfig() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n        this.maxWidth = '80vw';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether the dialog should focus the first focusable element on open. */\n        this.autoFocus = true;\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n    return MatDialogConfig;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nvar matDialogAnimations = {\n    /** Animation that is applied on the dialog container by defalt. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', animate('150ms cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 }))),\n        transition('* => void, * => exit', animate('75ms cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 }))),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when a ComponentPortal is\n * attached to a DomPortalOutlet without an origin.\n * @docs-private\n */\nfunction throwMatDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * Animation is based on https://material.io/guidelines/motion/choreography.html.\n * @docs-private\n */\nvar MatDialogContainer = /** @class */ (function (_super) {\n    __extends(MatDialogContainer, _super);\n    function MatDialogContainer(_elementRef, _focusTrapFactory, _changeDetectorRef, _document, \n    /** The dialog configuration. */\n    _config) {\n        var _this = _super.call(this) || this;\n        _this._elementRef = _elementRef;\n        _this._focusTrapFactory = _focusTrapFactory;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this._config = _config;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        _this._elementFocusedBeforeDialogWasOpened = null;\n        /** State of the dialog animation. */\n        _this._state = 'enter';\n        /** Emits when an animation state changes. */\n        _this._animationStateChanged = new EventEmitter();\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            if (_this._portalOutlet.hasAttached()) {\n                throwMatDialogContentAlreadyAttachedError();\n            }\n            _this._savePreviouslyFocusedElement();\n            return _this._portalOutlet.attachDomPortal(portal);\n        };\n        _this._ariaLabelledBy = _config.ariaLabelledBy || null;\n        _this._document = _document;\n        return _this;\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    MatDialogContainer.prototype.attachComponentPortal = function (portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachComponentPortal(portal);\n    };\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    MatDialogContainer.prototype.attachTemplatePortal = function (portal) {\n        if (this._portalOutlet.hasAttached()) {\n            throwMatDialogContentAlreadyAttachedError();\n        }\n        this._savePreviouslyFocusedElement();\n        return this._portalOutlet.attachTemplatePortal(portal);\n    };\n    /** Moves the focus inside the focus trap. */\n    MatDialogContainer.prototype._trapFocus = function () {\n        var element = this._elementRef.nativeElement;\n        if (!this._focusTrap) {\n            this._focusTrap = this._focusTrapFactory.create(element);\n        }\n        // If we were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty.\n        if (this._config.autoFocus) {\n            this._focusTrap.focusInitialElementWhenReady();\n        }\n        else {\n            var activeElement = this._document.activeElement;\n            // Otherwise ensure that focus is on the dialog container. It's possible that a different\n            // component tried to move focus while the open animation was running. See:\n            // https://github.com/angular/components/issues/16215. Note that we only want to do this\n            // if the focus isn't inside the dialog already, because it's possible that the consumer\n            // turned off `autoFocus` in order to move focus themselves.\n            if (activeElement !== element && !element.contains(activeElement)) {\n                element.focus();\n            }\n        }\n    };\n    /** Restores focus to the element that was focused before the dialog opened. */\n    MatDialogContainer.prototype._restoreFocus = function () {\n        var toFocus = this._elementFocusedBeforeDialogWasOpened;\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus && toFocus && typeof toFocus.focus === 'function') {\n            var activeElement = this._document.activeElement;\n            var element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement || activeElement === this._document.body || activeElement === element ||\n                element.contains(activeElement)) {\n                toFocus.focus();\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    };\n    /** Saves a reference to the element that was focused before the dialog was opened. */\n    MatDialogContainer.prototype._savePreviouslyFocusedElement = function () {\n        var _this = this;\n        if (this._document) {\n            this._elementFocusedBeforeDialogWasOpened = this._document.activeElement;\n            // Note that there is no focus method when rendering on the server.\n            if (this._elementRef.nativeElement.focus) {\n                // Move focus onto the dialog immediately in order to prevent the user from accidentally\n                // opening multiple dialogs at the same time. Needs to be async, because the element\n                // may not be focusable immediately.\n                Promise.resolve().then(function () { return _this._elementRef.nativeElement.focus(); });\n            }\n        }\n    };\n    /** Callback, invoked whenever an animation on the host completes. */\n    MatDialogContainer.prototype._onAnimationDone = function (event) {\n        if (event.toState === 'enter') {\n            this._trapFocus();\n        }\n        else if (event.toState === 'exit') {\n            this._restoreFocus();\n        }\n        this._animationStateChanged.emit(event);\n    };\n    /** Callback, invoked when an animation on the host starts. */\n    MatDialogContainer.prototype._onAnimationStart = function (event) {\n        this._animationStateChanged.emit(event);\n    };\n    /** Starts the dialog exit animation. */\n    MatDialogContainer.prototype._startExitAnimation = function () {\n        this._state = 'exit';\n        // Mark the container for check so it can react if the\n        // view container is using OnPush change detection.\n        this._changeDetectorRef.markForCheck();\n    };\n    /** @nocollapse */\n    MatDialogContainer.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusTrapFactory },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n        { type: MatDialogConfig }\n    ]; };\n    MatDialogContainer.propDecorators = {\n        _portalOutlet: [{ type: ViewChild, args: [CdkPortalOutlet, { static: true },] }]\n    };\nMatDialogContainer.ɵfac = function MatDialogContainer_Factory(t) { return new (t || MatDialogContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusTrapFactory), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(MatDialogConfig)); };\nMatDialogContainer.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatDialogContainer, selectors: [[\"mat-dialog-container\"]], viewQuery: function MatDialogContainer_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵstaticViewQuery(CdkPortalOutlet, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._portalOutlet = _t.first);\n    } }, hostAttrs: [\"tabindex\", \"-1\", \"aria-modal\", \"true\", 1, \"mat-dialog-container\"], hostVars: 6, hostBindings: function MatDialogContainer_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@dialogContainer.start\", function MatDialogContainer_animation_dialogContainer_start_HostBindingHandler($event) { return ctx._onAnimationStart($event); })(\"@dialogContainer.done\", function MatDialogContainer_animation_dialogContainer_done_HostBindingHandler($event) { return ctx._onAnimationDone($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx._id)(\"role\", ctx._config.role)(\"aria-labelledby\", ctx._config.ariaLabel ? null : ctx._ariaLabelledBy)(\"aria-label\", ctx._config.ariaLabel)(\"aria-describedby\", ctx._config.ariaDescribedBy || null);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@dialogContainer\", ctx._state);\n    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 1, vars: 0, consts: [[\"cdkPortalOutlet\", \"\"]], template: function MatDialogContainer_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, MatDialogContainer_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matDialogAnimations.dialogContainer] } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContainer, [{\n        type: Component,\n        args: [{\n                selector: 'mat-dialog-container',\n                template: \"<ng-template cdkPortalOutlet></ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                // Using OnPush for dialogs caused some G3 sync issues. Disabled until we can track them down.\n                // tslint:disable-next-line:validate-decorators\n                changeDetection: ChangeDetectionStrategy.Default,\n                animations: [matDialogAnimations.dialogContainer],\n                host: {\n                    'class': 'mat-dialog-container',\n                    'tabindex': '-1',\n                    'aria-modal': 'true',\n                    '[attr.id]': '_id',\n                    '[attr.role]': '_config.role',\n                    '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledBy',\n                    '[attr.aria-label]': '_config.ariaLabel',\n                    '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    '[@dialogContainer]': '_state',\n                    '(@dialogContainer.start)': '_onAnimationStart($event)',\n                    '(@dialogContainer.done)': '_onAnimationDone($event)'\n                },\n                styles: [\".mat-dialog-container{display:block;padding:24px;border-radius:4px;box-sizing:border-box;overflow:auto;outline:0;width:100%;height:100%;min-height:inherit;max-height:inherit}.cdk-high-contrast-active .mat-dialog-container{outline:solid 1px}.mat-dialog-content{display:block;margin:0 -24px;padding:0 24px;max-height:65vh;overflow:auto;-webkit-overflow-scrolling:touch}.mat-dialog-title{margin:0 0 20px;display:block}.mat-dialog-actions{padding:8px 0;display:flex;flex-wrap:wrap;min-height:52px;align-items:center;margin-bottom:-24px}.mat-dialog-actions[align=end]{justify-content:flex-end}.mat-dialog-actions[align=center]{justify-content:center}.mat-dialog-actions .mat-button-base+.mat-button-base,.mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusTrapFactory }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: MatDialogConfig }]; }, { _portalOutlet: [{\n            type: ViewChild,\n            args: [CdkPortalOutlet, { static: true }]\n        }] }); })();\n    return MatDialogContainer;\n}(BasePortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// TODO(jelbourn): resizing\n// Counter for unique dialog ids.\nvar uniqueId = 0;\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nvar MatDialogRef = /** @class */ (function () {\n    function MatDialogRef(_overlayRef, _containerInstance, id) {\n        var _this = this;\n        if (id === void 0) { id = \"mat-dialog-\" + uniqueId++; }\n        this._overlayRef = _overlayRef;\n        this._containerInstance = _containerInstance;\n        this.id = id;\n        /** Whether the user is allowed to close the dialog. */\n        this.disableClose = this._containerInstance._config.disableClose;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has finished closing. */\n        this._afterClosed = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = 0 /* OPEN */;\n        // Pass the id along to the container.\n        _containerInstance._id = id;\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'done' && event.toState === 'enter'; }), take(1))\n            .subscribe(function () {\n            _this._afterOpened.next();\n            _this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'done' && event.toState === 'exit'; }), take(1)).subscribe(function () {\n            clearTimeout(_this._closeFallbackTimeout);\n            _this._overlayRef.dispose();\n        });\n        _overlayRef.detachments().subscribe(function () {\n            _this._beforeClosed.next(_this._result);\n            _this._beforeClosed.complete();\n            _this._afterClosed.next(_this._result);\n            _this._afterClosed.complete();\n            _this.componentInstance = null;\n            _this._overlayRef.dispose();\n        });\n        _overlayRef.keydownEvents()\n            .pipe(filter(function (event) {\n            return event.keyCode === ESCAPE && !_this.disableClose && !hasModifierKey(event);\n        }))\n            .subscribe(function (event) {\n            event.preventDefault();\n            _this.close();\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    MatDialogRef.prototype.close = function (dialogResult) {\n        var _this = this;\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged.pipe(filter(function (event) { return event.phaseName === 'start'; }), take(1))\n            .subscribe(function (event) {\n            _this._beforeClosed.next(dialogResult);\n            _this._beforeClosed.complete();\n            _this._state = 2 /* CLOSED */;\n            _this._overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            _this._closeFallbackTimeout = setTimeout(function () {\n                _this._overlayRef.dispose();\n            }, event.totalTime + 100);\n        });\n        this._containerInstance._startExitAnimation();\n        this._state = 1 /* CLOSING */;\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    MatDialogRef.prototype.afterOpened = function () {\n        return this._afterOpened.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    MatDialogRef.prototype.afterClosed = function () {\n        return this._afterClosed.asObservable();\n    };\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    MatDialogRef.prototype.beforeClosed = function () {\n        return this._beforeClosed.asObservable();\n    };\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    MatDialogRef.prototype.backdropClick = function () {\n        return this._overlayRef.backdropClick();\n    };\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    MatDialogRef.prototype.keydownEvents = function () {\n        return this._overlayRef.keydownEvents();\n    };\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    MatDialogRef.prototype.updatePosition = function (position) {\n        var strategy = this._getPositionStrategy();\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    MatDialogRef.prototype.updateSize = function (width, height) {\n        if (width === void 0) { width = ''; }\n        if (height === void 0) { height = ''; }\n        this._getPositionStrategy().width(width).height(height);\n        this._overlayRef.updatePosition();\n        return this;\n    };\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    MatDialogRef.prototype.addPanelClass = function (classes) {\n        this._overlayRef.addPanelClass(classes);\n        return this;\n    };\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    MatDialogRef.prototype.removePanelClass = function (classes) {\n        this._overlayRef.removePanelClass(classes);\n        return this;\n    };\n    /** Gets the current state of the dialog's lifecycle. */\n    MatDialogRef.prototype.getState = function () {\n        return this._state;\n    };\n    /** Fetches the position strategy object from the overlay ref. */\n    MatDialogRef.prototype._getPositionStrategy = function () {\n        return this._overlayRef.getConfig().positionStrategy;\n    };\n    return MatDialogRef;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nvar MAT_DIALOG_DATA = new InjectionToken('MatDialogData');\n/** Injection token that can be used to specify default dialog options. */\nvar MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nvar MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-dialog-scroll-strategy');\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.block(); };\n}\n/** @docs-private */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return function () { return overlay.scrollStrategies.block(); };\n}\n/** @docs-private */\nvar MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nvar MatDialog = /** @class */ (function () {\n    function MatDialog(_overlay, _injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    _location, _defaultOptions, scrollStrategy, _parentDialog, _overlayContainer) {\n        var _this = this;\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        // TODO (jelbourn): tighten the typing right-hand side of this expression.\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(function () { return _this.openDialogs.length ?\n            _this._afterAllClosed :\n            _this._afterAllClosed.pipe(startWith(undefined)); });\n        this._scrollStrategy = scrollStrategy;\n    }\n    Object.defineProperty(MatDialog.prototype, \"openDialogs\", {\n        /** Keeps track of the currently-open dialogs. */\n        get: function () {\n            return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDialog.prototype, \"afterOpened\", {\n        /** Stream that emits when a dialog has been opened. */\n        get: function () {\n            return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatDialog.prototype, \"_afterAllClosed\", {\n        get: function () {\n            var parent = this._parentDialog;\n            return parent ? parent._afterAllClosed : this._afterAllClosedAtThisLevel;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Opens a modal dialog containing the given component.\n     * @param componentOrTemplateRef Type of the component to load into the dialog,\n     *     or a TemplateRef to instantiate as the dialog content.\n     * @param config Extra configuration options.\n     * @returns Reference to the newly-opened dialog.\n     */\n    MatDialog.prototype.open = function (componentOrTemplateRef, config) {\n        var _this = this;\n        config = _applyConfigDefaults(config, this._defaultOptions || new MatDialogConfig());\n        if (config.id && this.getDialogById(config.id)) {\n            throw Error(\"Dialog with id \\\"\" + config.id + \"\\\" exists already. The dialog id must be unique.\");\n        }\n        var overlayRef = this._createOverlay(config);\n        var dialogContainer = this._attachDialogContainer(overlayRef, config);\n        var dialogRef = this._attachDialogContent(componentOrTemplateRef, dialogContainer, overlayRef, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.afterClosed().subscribe(function () { return _this._removeOpenDialog(dialogRef); });\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    };\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    MatDialog.prototype.closeAll = function () {\n        this._closeDialogs(this.openDialogs);\n    };\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    MatDialog.prototype.getDialogById = function (id) {\n        return this.openDialogs.find(function (dialog) { return dialog.id === id; });\n    };\n    MatDialog.prototype.ngOnDestroy = function () {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    };\n    /**\n     * Creates the overlay into which the dialog will be loaded.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the OverlayRef for the created overlay.\n     */\n    MatDialog.prototype._createOverlay = function (config) {\n        var overlayConfig = this._getOverlayConfig(config);\n        return this._overlay.create(overlayConfig);\n    };\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param dialogConfig The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    MatDialog.prototype._getOverlayConfig = function (dialogConfig) {\n        var state = new OverlayConfig({\n            positionStrategy: this._overlay.position().global(),\n            scrollStrategy: dialogConfig.scrollStrategy || this._scrollStrategy(),\n            panelClass: dialogConfig.panelClass,\n            hasBackdrop: dialogConfig.hasBackdrop,\n            direction: dialogConfig.direction,\n            minWidth: dialogConfig.minWidth,\n            minHeight: dialogConfig.minHeight,\n            maxWidth: dialogConfig.maxWidth,\n            maxHeight: dialogConfig.maxHeight,\n            disposeOnNavigation: dialogConfig.closeOnNavigation\n        });\n        if (dialogConfig.backdropClass) {\n            state.backdropClass = dialogConfig.backdropClass;\n        }\n        return state;\n    };\n    /**\n     * Attaches an MatDialogContainer to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    MatDialog.prototype._attachDialogContainer = function (overlay, config) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        var injector = Injector.create({\n            parent: userInjector || this._injector,\n            providers: [{ provide: MatDialogConfig, useValue: config }]\n        });\n        var containerPortal = new ComponentPortal(MatDialogContainer, config.viewContainerRef, injector, config.componentFactoryResolver);\n        var containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    };\n    /**\n     * Attaches the user-provided component to the already-created MatDialogContainer.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogContainer Reference to the wrapping MatDialogContainer.\n     * @param overlayRef Reference to the overlay in which the dialog resides.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to the MatDialogRef that should be returned to the user.\n     */\n    MatDialog.prototype._attachDialogContent = function (componentOrTemplateRef, dialogContainer, overlayRef, config) {\n        // Create a reference to the dialog we're creating in order to give the user a handle\n        // to modify and close it.\n        var dialogRef = new MatDialogRef(overlayRef, dialogContainer, config.id);\n        // When the dialog backdrop is clicked, we want to close it.\n        if (config.hasBackdrop) {\n            overlayRef.backdropClick().subscribe(function () {\n                if (!dialogRef.disableClose) {\n                    dialogRef.close();\n                }\n            });\n        }\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, { $implicit: config.data, dialogRef: dialogRef }));\n        }\n        else {\n            var injector = this._createInjector(config, dialogRef, dialogContainer);\n            var contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentInstance = contentRef.instance;\n        }\n        dialogRef\n            .updateSize(config.width, config.height)\n            .updatePosition(config.position);\n        return dialogRef;\n    };\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog.\n     * @param container Dialog container element that wraps all of the contents.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    MatDialog.prototype._createInjector = function (config, dialogRef, dialogContainer) {\n        var userInjector = config && config.viewContainerRef && config.viewContainerRef.injector;\n        // The MatDialogContainer is injected in the portal as the MatDialogContainer and the dialog's\n        // content are created out of the same ViewContainerRef and as such, are siblings for injector\n        // purposes. To allow the hierarchy that is expected, the MatDialogContainer is explicitly\n        // added to the injection tokens.\n        var providers = [\n            { provide: MatDialogContainer, useValue: dialogContainer },\n            { provide: MAT_DIALOG_DATA, useValue: config.data },\n            { provide: MatDialogRef, useValue: dialogRef }\n        ];\n        if (config.direction &&\n            (!userInjector || !userInjector.get(Directionality, null))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() }\n            });\n        }\n        return Injector.create({ parent: userInjector || this._injector, providers: providers });\n    };\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     */\n    MatDialog.prototype._removeOpenDialog = function (dialogRef) {\n        var index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach(function (previousValue, element) {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                this._afterAllClosed.next();\n            }\n        }\n    };\n    /**\n     * Hides all of the content that isn't an overlay from assistive technology.\n     */\n    MatDialog.prototype._hideNonDialogContentFromAssistiveTechnology = function () {\n        var overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            var siblings = overlayContainer.parentElement.children;\n            for (var i = siblings.length - 1; i > -1; i--) {\n                var sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    };\n    /** Closes all of the dialogs in an array. */\n    MatDialog.prototype._closeDialogs = function (dialogs) {\n        var i = dialogs.length;\n        while (i--) {\n            // The `_openDialogs` property isn't updated after close until the rxjs subscription\n            // runs on the next microtask, in addition to modifying the array as we're going\n            // through it. We loop through all of them and call close without assuming that\n            // they'll be removed from the list instantaneously.\n            dialogs[i].close();\n        }\n    };\n    /** @nocollapse */\n    MatDialog.ctorParameters = function () { return [\n        { type: Overlay },\n        { type: Injector },\n        { type: Location, decorators: [{ type: Optional }] },\n        { type: MatDialogConfig, decorators: [{ type: Optional }, { type: Inject, args: [MAT_DIALOG_DEFAULT_OPTIONS,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_SCROLL_STRATEGY,] }] },\n        { type: MatDialog, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: OverlayContainer }\n    ]; };\nMatDialog.ɵfac = function MatDialog_Factory(t) { return new (t || MatDialog)(ɵngcc0.ɵɵinject(ɵngcc3.Overlay), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(ɵngcc4.Location, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_DEFAULT_OPTIONS, 8), ɵngcc0.ɵɵinject(MAT_DIALOG_SCROLL_STRATEGY), ɵngcc0.ɵɵinject(MatDialog, 12), ɵngcc0.ɵɵinject(ɵngcc3.OverlayContainer)); };\nMatDialog.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MatDialog, factory: function (t) { return MatDialog.ɵfac(t); } });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialog, [{\n        type: Injectable\n    }], function () { return [{ type: ɵngcc3.Overlay }, { type: ɵngcc0.Injector }, { type: ɵngcc4.Location, decorators: [{\n                type: Optional\n            }] }, { type: MatDialogConfig, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_DIALOG_DEFAULT_OPTIONS]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_DIALOG_SCROLL_STRATEGY]\n            }] }, { type: MatDialog, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc3.OverlayContainer }]; }, null); })();\n    return MatDialog;\n}());\n/**\n * Applies default options to the dialog config.\n * @param config Config to be modified.\n * @param defaultOptions Default options provided.\n * @returns The new configuration object.\n */\nfunction _applyConfigDefaults(config, defaultOptions) {\n    return __assign(__assign({}, defaultOptions), config);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique IDs for dialog elements. */\nvar dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nvar MatDialogClose = /** @class */ (function () {\n    function MatDialogClose(dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    MatDialogClose.prototype.ngOnInit = function () {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    };\n    MatDialogClose.prototype.ngOnChanges = function (changes) {\n        var proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    };\n    /** @nocollapse */\n    MatDialogClose.ctorParameters = function () { return [\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: MatDialog }\n    ]; };\n    MatDialogClose.propDecorators = {\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        type: [{ type: Input }],\n        dialogResult: [{ type: Input, args: ['mat-dialog-close',] }],\n        _matDialogClose: [{ type: Input, args: ['matDialogClose',] }]\n    };\nMatDialogClose.ɵfac = function MatDialogClose_Factory(t) { return new (t || MatDialogClose)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogClose.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogClose, selectors: [[\"\", \"mat-dialog-close\", \"\"], [\"\", \"matDialogClose\", \"\"]], hostVars: 2, hostBindings: function MatDialogClose_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function MatDialogClose_click_HostBindingHandler() { return ctx.dialogRef.close(ctx.dialogResult); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.ariaLabel || null)(\"type\", ctx.type);\n    } }, inputs: { type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, exportAs: [\"matDialogClose\"], features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogClose, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-close], [matDialogClose]',\n                exportAs: 'matDialogClose',\n                host: {\n                    '(click)': 'dialogRef.close(dialogResult)',\n                    '[attr.aria-label]': 'ariaLabel || null',\n                    '[attr.type]': 'type'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { type: [{\n            type: Input\n        }], dialogResult: [{\n            type: Input,\n            args: ['mat-dialog-close']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], _matDialogClose: [{\n            type: Input,\n            args: ['matDialogClose']\n        }] }); })();\n    return MatDialogClose;\n}());\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nvar MatDialogTitle = /** @class */ (function () {\n    function MatDialogTitle(_dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        this.id = \"mat-dialog-title-\" + dialogElementUid++;\n    }\n    MatDialogTitle.prototype.ngOnInit = function () {\n        var _this = this;\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(function () {\n                var container = _this._dialogRef._containerInstance;\n                if (container && !container._ariaLabelledBy) {\n                    container._ariaLabelledBy = _this.id;\n                }\n            });\n        }\n    };\n    /** @nocollapse */\n    MatDialogTitle.ctorParameters = function () { return [\n        { type: MatDialogRef, decorators: [{ type: Optional }] },\n        { type: ElementRef },\n        { type: MatDialog }\n    ]; };\n    MatDialogTitle.propDecorators = {\n        id: [{ type: Input }]\n    };\nMatDialogTitle.ɵfac = function MatDialogTitle_Factory(t) { return new (t || MatDialogTitle)(ɵngcc0.ɵɵdirectiveInject(MatDialogRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MatDialog)); };\nMatDialogTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogTitle, selectors: [[\"\", \"mat-dialog-title\", \"\"], [\"\", \"matDialogTitle\", \"\"]], hostAttrs: [1, \"mat-dialog-title\"], hostVars: 1, hostBindings: function MatDialogTitle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n    } }, inputs: { id: \"id\" }, exportAs: [\"matDialogTitle\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogTitle, [{\n        type: Directive,\n        args: [{\n                selector: '[mat-dialog-title], [matDialogTitle]',\n                exportAs: 'matDialogTitle',\n                host: {\n                    'class': 'mat-dialog-title',\n                    '[id]': 'id'\n                }\n            }]\n    }], function () { return [{ type: MatDialogRef, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ElementRef }, { type: MatDialog }]; }, { id: [{\n            type: Input\n        }] }); })();\n    return MatDialogTitle;\n}());\n/**\n * Scrollable content container of a dialog.\n */\nvar MatDialogContent = /** @class */ (function () {\n    function MatDialogContent() {\n    }\nMatDialogContent.ɵfac = function MatDialogContent_Factory(t) { return new (t || MatDialogContent)(); };\nMatDialogContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogContent, selectors: [[\"\", \"mat-dialog-content\", \"\"], [\"mat-dialog-content\"], [\"\", \"matDialogContent\", \"\"]], hostAttrs: [1, \"mat-dialog-content\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogContent, [{\n        type: Directive,\n        args: [{\n                selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\",\n                host: { 'class': 'mat-dialog-content' }\n            }]\n    }], function () { return []; }, null); })();\n    return MatDialogContent;\n}());\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nvar MatDialogActions = /** @class */ (function () {\n    function MatDialogActions() {\n    }\nMatDialogActions.ɵfac = function MatDialogActions_Factory(t) { return new (t || MatDialogActions)(); };\nMatDialogActions.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatDialogActions, selectors: [[\"\", \"mat-dialog-actions\", \"\"], [\"mat-dialog-actions\"], [\"\", \"matDialogActions\", \"\"]], hostAttrs: [1, \"mat-dialog-actions\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogActions, [{\n        type: Directive,\n        args: [{\n                selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\",\n                host: { 'class': 'mat-dialog-actions' }\n            }]\n    }], function () { return []; }, null); })();\n    return MatDialogActions;\n}());\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    var parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(function (dialog) { return dialog.id === parent.id; }) : null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatDialogModule = /** @class */ (function () {\n    function MatDialogModule() {\n    }\nMatDialogModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatDialogModule });\nMatDialogModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatDialogModule_Factory(t) { return new (t || MatDialogModule)(); }, providers: [\n        MatDialog,\n        MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n    ], imports: [[\n            OverlayModule,\n            PortalModule,\n            MatCommonModule,\n        ],\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatDialogModule, { declarations: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogActions,\n        MatDialogContent]; }, imports: function () { return [OverlayModule,\n        PortalModule,\n        MatCommonModule]; }, exports: function () { return [MatDialogContainer,\n        MatDialogClose,\n        MatDialogTitle,\n        MatDialogContent,\n        MatDialogActions,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatDialogModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    PortalModule,\n                    MatCommonModule,\n                ],\n                exports: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogContent,\n                    MatDialogActions,\n                    MatCommonModule,\n                ],\n                declarations: [\n                    MatDialogContainer,\n                    MatDialogClose,\n                    MatDialogTitle,\n                    MatDialogActions,\n                    MatDialogContent,\n                ],\n                providers: [\n                    MatDialog,\n                    MAT_DIALOG_SCROLL_STRATEGY_PROVIDER,\n                ],\n                entryComponents: [MatDialogContainer]\n            }]\n    }], function () { return []; }, null); })();\n    return MatDialogModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_FACTORY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogTitle, matDialogAnimations, throwMatDialogContentAlreadyAttachedError };\n\n//# sourceMappingURL=dialog.js.map"],"sourceRoot":"webpack:///"}