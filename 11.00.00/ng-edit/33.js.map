{"version":3,"sources":["C:/Projects/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm5/slide-toggle.js","./src/app/visual-query/services/query-definition.service.ts","./src/app/visual-query/run-explorer/run-explorer.component.html","./src/app/visual-query/run-explorer/run-explorer.component.ts","./src/app/visual-query/run-explorer/run-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.helpers.ts","./src/app/visual-query/add-explorer/add-explorer.component.html","./src/app/visual-query/add-explorer/add-explorer.component.ts","./src/app/visual-query/plumb-editor/plumb-editor.component.html","./src/app/visual-query/plumb-editor/plumb-editor.component.ts","./src/app/visual-query/visual-query.component.html","./src/app/visual-query/visual-query-routing.module.ts","./src/app/visual-query/visual-query.component.ts","./src/app/visual-query/visual-query.module.ts"],"names":["_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","factory","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","provide","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","this","MatSlideToggleBase","_elementRef","_super","elementRef","_focusMonitor","_changeDetectorRef","tabIndex","_ngZone","defaults","_animationMode","_dir","_this","call","_onChange","_","_onTouched","_uniqueId","_required","_checked","name","id","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","dragChange","parseInt","Object","defineProperty","prototype","get","set","value","enumerable","configurable","markForCheck","ngAfterContentInit","monitor","subscribe","focusOrigin","_inputElement","nativeElement","focus","Promise","resolve","then","ngOnDestroy","stopMonitoring","_onChangeEvent","event","stopPropagation","emit","_emitChangeEvent","_onInputClick","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","options","focusVia","toggle","_onLabelTextChange","detectChanges","ɵfac","t","ɵcmp","type","selectors","viewQuery","rf","ctx","_t","_thumbEl","first","_thumbBarEl","hostAttrs","hostVars","hostBindings","inputs","disableRipple","color","required","outputs","exportAs","features","ngContentSelectors","decls","vars","consts","template","$event","_r10","_r14","inputId","textContent","trim","toString","directives","styles","encapsulation","changeDetection","MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR","MatSlideToggleRequiredValidator","apply","arguments","ɵMatSlideToggleRequiredValidator_BaseFactory","ɵdir","_MatSlideToggleRequiredValidatorModule","ɵmod","ɵinj","MatSlideToggleModule","imports","http","context","dnnContext","loadQuery","pipelineEntityId","$2sxc","apiUrl","params","appId","toPromise","model","InstalledDataSources","Pipeline","AllowEdit","push","PartAssemblyAndType","outDs","pipelineDesigner","outDataSource","className","Name","In","in","Out","allowNew","PrimaryType","DynamicOut","Difficulty","postProcessDataSources","queryDef","data","readOnly","DataSources","length","loadQueryFromDefaultTemplate","Description","description","EntityGuid","VisualDesignerData","visualDesignerData","ReadOnly","dataSource","Definition","getDataSourceDefinitionProperty","Top","Left","definition","filter","d","Error","templateForNew","defaultPipeline","dataSources","addDataSource","partAssemblyAndType","entityGuid","StreamWiring","streamWiring","newDataSource","typeNameFilter","dsCount","assign","getNewDataSource","input","format","globalParts","match","classFullName","dataSourceBase","dsTypeInfo","cacheKey","_typeInfos","typeInfo","found","find","ids","guiTypes","buildGuiTypes","def","primType","Unknown","Icon","icon","iconPrefix","dynamicOut","HelpLink","helpLink","EnableConfig","config","addGuiType","notes","QueryDefinitionService","ngOnInit","ngOnChanges","changes","currentValue","warnings","pipelineData","testMid","exec","TestParameters","urlMid","moduleId","error","calculateWarnings","editPipelineEntity","alert","openParamsHelp","window","open","RunExplorerComponent","filterAndSortDataSources","maxDifficulty","filtered","cloneDeep","sort","a","b","toLocaleLowerCase","localeCompare","sorted","difficulty","default","advanced","activeDiff","toggledItems","onDifficultyChanged","toggleItem","item","array","index","indexOf","splice","toggleInArray","AddExplorerComponent","queryDefinitionService","configureDataSource","editName","editDescription","remove","PlumbEditorComponent","routes","path","component","route","titleService","zone","explorer","run","add","eventListeners","init","pipelineId","snapshot","paramMap","attachListeners","detachListeners","toggleExplorer","activeExplorer","openHelp","savePipeline","res","console","log","setTitle","runOutsideAngular","save","keyboardSave","bind","addEventListener","element","listener","forEach","removeEventListener","e","keyCode","navigator","platform","metaKey","ctrlKey","preventDefault","VisualQueryComponent","VisualQueryRoutingModule","forChild","VisualQueryModule"],"mappings":"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","file":"33.js","sourcesContent":["import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, NgZone, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { __extends } from 'tslib';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/observers';\n\nvar _c0 = [\"thumbContainer\"];\nvar _c1 = [\"toggleBar\"];\nvar _c2 = [\"input\"];\nvar _c3 = function () { return { enterDuration: 150 }; };\nvar _c4 = [\"*\"];\nvar MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: function () { return ({ disableToggleValue: false }); }\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nvar nextUniqueId = 0;\n/** @docs-private */\nvar MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () { return MatSlideToggle; }),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nvar MatSlideToggleChange = /** @class */ (function () {\n    function MatSlideToggleChange(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n    return MatSlideToggleChange;\n}());\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nvar MatSlideToggleBase = /** @class */ (function () {\n    function MatSlideToggleBase(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n    return MatSlideToggleBase;\n}());\nvar _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nvar MatSlideToggle = /** @class */ (function (_super) {\n    __extends(MatSlideToggle, _super);\n    function MatSlideToggle(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, \n    /**\n     * @deprecated `_ngZone` and `_dir` parameters to be removed.\n     * @breaking-change 10.0.0\n     */\n    _ngZone, defaults, _animationMode, _dir) {\n        var _this = _super.call(this, elementRef) || this;\n        _this._focusMonitor = _focusMonitor;\n        _this._changeDetectorRef = _changeDetectorRef;\n        _this.defaults = defaults;\n        _this._animationMode = _animationMode;\n        _this._onChange = function (_) { };\n        _this._onTouched = function () { };\n        _this._uniqueId = \"mat-slide-toggle-\" + ++nextUniqueId;\n        _this._required = false;\n        _this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        _this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        _this.id = _this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        _this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        _this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        _this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        _this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        _this.toggleChange = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle is dragged.\n         * This event is always emitted when the user drags the slide toggle to make a change greater\n         * than 50%. It does not mean the slide toggle's value is changed. The event is not emitted when\n         * the user toggles the slide toggle to change its value.\n         * @deprecated No longer being used. To be removed.\n         * @breaking-change 10.0.0\n         */\n        _this.dragChange = new EventEmitter();\n        _this.tabIndex = parseInt(tabIndex) || 0;\n        return _this;\n    }\n    Object.defineProperty(MatSlideToggle.prototype, \"required\", {\n        /** Whether the slide-toggle is required. */\n        get: function () { return this._required; },\n        set: function (value) { this._required = coerceBooleanProperty(value); },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"checked\", {\n        /** Whether the slide-toggle element is checked or not. */\n        get: function () { return this._checked; },\n        set: function (value) {\n            this._checked = coerceBooleanProperty(value);\n            this._changeDetectorRef.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatSlideToggle.prototype, \"inputId\", {\n        /** Returns the unique id for the visual hidden input. */\n        get: function () { return (this.id || this._uniqueId) + \"-input\"; },\n        enumerable: true,\n        configurable: true\n    });\n    MatSlideToggle.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(function (focusOrigin) {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                _this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(function () { return _this._onTouched(); });\n            }\n        });\n    };\n    MatSlideToggle.prototype.ngOnDestroy = function () {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    };\n    /** Method being called whenever the underlying input emits a change event. */\n    MatSlideToggle.prototype._onChangeEvent = function (event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    };\n    /** Method being called whenever the slide-toggle has been clicked. */\n    MatSlideToggle.prototype._onInputClick = function (event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.writeValue = function (value) {\n        this.checked = !!value;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnChange = function (fn) {\n        this._onChange = fn;\n    };\n    /** Implemented as part of ControlValueAccessor. */\n    MatSlideToggle.prototype.registerOnTouched = function (fn) {\n        this._onTouched = fn;\n    };\n    /** Implemented as a part of ControlValueAccessor. */\n    MatSlideToggle.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    };\n    /** Focuses the slide-toggle. */\n    MatSlideToggle.prototype.focus = function (options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    };\n    /** Toggles the checked state of the slide-toggle. */\n    MatSlideToggle.prototype.toggle = function () {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    };\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    MatSlideToggle.prototype._emitChangeEvent = function () {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    };\n    /** Method being called whenever the label text changes. */\n    MatSlideToggle.prototype._onLabelTextChange = function () {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    };\n    /** @nocollapse */\n    MatSlideToggle.ctorParameters = function () { return [\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n        { type: NgZone },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: Directionality, decorators: [{ type: Optional }] }\n    ]; };\n    MatSlideToggle.propDecorators = {\n        _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n        _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n        name: [{ type: Input }],\n        id: [{ type: Input }],\n        labelPosition: [{ type: Input }],\n        ariaLabel: [{ type: Input, args: ['aria-label',] }],\n        ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n        required: [{ type: Input }],\n        checked: [{ type: Input }],\n        change: [{ type: Output }],\n        toggleChange: [{ type: Output }],\n        dragChange: [{ type: Output }],\n        _inputElement: [{ type: ViewChild, args: ['input',] }]\n    };\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : 0 - 1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", required: \"required\", checked: \"checked\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"] }, outputs: { change: \"change\", toggleChange: \"toggleChange\", dragChange: \"dragChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        var _r10 = ɵngcc0.ɵɵreference(1);\n        var _r14 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r14.textContent || !_r14.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r10)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc3.MatRipple, ɵngcc4.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], dragChange: [{\n            type: Output\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n    return MatSlideToggle;\n}(_MatSlideToggleMixinBase));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(function () { return MatSlideToggleRequiredValidator; }),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nvar MatSlideToggleRequiredValidator = /** @class */ (function (_super) {\n    __extends(MatSlideToggleRequiredValidator, _super);\n    function MatSlideToggleRequiredValidator() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatSlideToggleRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: \"mat-slide-toggle[required][formControlName],\\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]\",\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n    return MatSlideToggleRequiredValidator;\n}(CheckboxRequiredValidator));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nvar _MatSlideToggleRequiredValidatorModule = /** @class */ (function () {\n    function _MatSlideToggleRequiredValidatorModule() {\n    }\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], function () { return []; }, null); })();\n    return _MatSlideToggleRequiredValidatorModule;\n}());\nvar MatSlideToggleModule = /** @class */ (function () {\n    function MatSlideToggleModule() {\n    }\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ],\n        _MatSlideToggleRequiredValidatorModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule,\n        MatSlideToggle,\n        MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], function () { return []; }, null); })();\n    return MatSlideToggleModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { eavConstants } from '../../shared/constants/eav-constants';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n  ) { }\r\n\r\n  async loadQuery(pipelineEntityId: number): Promise<any> {\r\n    const model: any = await this.http.get(this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/GetPipeline'), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).toPromise();\r\n\r\n    model.InstalledDataSources = await this.http.get(\r\n      this.dnnContext.$2sxc.http.apiUrl('eav/PipelineDesigner/GetInstalledDataSources')\r\n    ).toPromise();\r\n\r\n    // Init new Pipeline Object\r\n    if (!pipelineEntityId) {\r\n      model.Pipeline = {\r\n        AllowEdit: 'True',\r\n      };\r\n    }\r\n\r\n    const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n    // Add Out-DataSource for the UI\r\n    model.InstalledDataSources.push({\r\n      PartAssemblyAndType: outDs.className,\r\n      Name: outDs.name || outDs.className,\r\n      In: outDs.in,\r\n      Out: null,\r\n      allowNew: false,\r\n      PrimaryType: 'Target',\r\n      DynamicOut: false,\r\n      Difficulty: 100,\r\n    });\r\n\r\n    this.postProcessDataSources(model);\r\n\r\n    const queryDef = {\r\n      id: pipelineEntityId,\r\n      data: model,\r\n      readOnly: false,\r\n    };\r\n\r\n    // If a new (empty) Pipeline is made, init new Pipeline\r\n    if (!queryDef.id || queryDef.data.DataSources.length === 1) {\r\n      queryDef.readOnly = false;\r\n      this.loadQueryFromDefaultTemplate(queryDef);\r\n    } else {\r\n      // if read only, show message\r\n      queryDef.readOnly = !model.Pipeline.AllowEdit;\r\n    }\r\n\r\n    return queryDef;\r\n  }\r\n\r\n  // Extend Pipeline-Model retrieved from the Server\r\n  private postProcessDataSources(model: any) {\r\n    const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n    // Append Out-DataSource for the UI\r\n    model.DataSources.push({\r\n      Name: outDs.name,\r\n      Description: outDs.description,\r\n      EntityGuid: 'Out',\r\n      PartAssemblyAndType: outDs.className,\r\n      VisualDesignerData: outDs.visualDesignerData,\r\n      ReadOnly: true,\r\n      Difficulty: 100\r\n    });\r\n\r\n    // Extend each DataSource with Definition-Property and ReadOnly Status\r\n    for (const dataSource of model.DataSources) {\r\n      dataSource.Definition = () => this.getDataSourceDefinitionProperty(model, dataSource);\r\n      dataSource.ReadOnly = dataSource.ReadOnly || !model.Pipeline.AllowEdit;\r\n      // in case server returns null, use a default setting\r\n      dataSource.VisualDesignerData = dataSource.VisualDesignerData || { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  // Get the Definition of a DataSource\r\n  private getDataSourceDefinitionProperty(model: any, dataSource: any) {\r\n    const definition = model.InstalledDataSources.filter((d: any) => d.PartAssemblyAndType === dataSource.PartAssemblyAndType)[0];\r\n    if (!definition) {\r\n      throw new Error(`DataSource Definition not found: ${dataSource.PartAssemblyAndType}`);\r\n    }\r\n    return definition;\r\n  }\r\n\r\n  // Init a new Pipeline with DataSources and Wirings from Configuration\r\n  private loadQueryFromDefaultTemplate(queryDef: any) {\r\n    const templateForNew = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const dataSource of templateForNew) {\r\n      this.addDataSource(queryDef, dataSource.partAssemblyAndType, dataSource.visualDesignerData, dataSource.entityGuid, null);\r\n    }\r\n\r\n    // attach template wiring\r\n    queryDef.data.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private addDataSource(queryDef: any, partAssemblyAndType: any, visualDesignerData: any, entityGuid: any, name: any) {\r\n    if (!visualDesignerData) {\r\n      visualDesignerData = { Top: 100, Left: 100 };\r\n    }\r\n\r\n    let newDataSource = {\r\n      VisualDesignerData: visualDesignerData,\r\n      Name: name || this.typeNameFilter(partAssemblyAndType, 'className'),\r\n      Description: '',\r\n      PartAssemblyAndType: partAssemblyAndType,\r\n      EntityGuid: entityGuid || 'unsaved' + (queryDef.dsCount + 1)\r\n    };\r\n    // Extend it with a Property to it's Definition\r\n    newDataSource = Object.assign(newDataSource, this.getNewDataSource(queryDef.data, newDataSource));\r\n\r\n    queryDef.data.DataSources.push(newDataSource);\r\n  }\r\n\r\n  typeNameFilter(input: any, format: any) {\r\n    const globalParts = input.match(/[^,\\s]+/g);\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        if (globalParts) {\r\n          return globalParts[0];\r\n        }\r\n        break;\r\n      case 'className':\r\n        if (globalParts) {\r\n          const classFullName = globalParts[0].match(/[^\\.]+/g);\r\n          return classFullName[classFullName.length - 1];\r\n        }\r\n    }\r\n\r\n    return input;\r\n  }\r\n\r\n  // Get a JSON for a DataSource with Definition-Property\r\n  private getNewDataSource(model: any, dataSourceBase: any) {\r\n    return {\r\n      Definition: () => this.getDataSourceDefinitionProperty(model, dataSourceBase)\r\n    };\r\n  }\r\n\r\n  dsTypeInfo(dataSource: any, queryDef: any) {\r\n    // maybe we already retrieved it before...\r\n    const cacheKey = dataSource.EntityGuid;\r\n    if (!queryDef._typeInfos) { queryDef._typeInfos = {}; }\r\n    if (queryDef._typeInfos[cacheKey]) { return queryDef._typeInfos[cacheKey]; }\r\n\r\n    let typeInfo = null;\r\n    // try to find the type on the source\r\n    const found = queryDef.data.InstalledDataSources.find((ids: any) => ids.PartAssemblyAndType === dataSource.PartAssemblyAndType);\r\n    const guiTypes = this.buildGuiTypes();\r\n    if (found) {\r\n      const def = found;\r\n      const primType = def.PrimaryType;\r\n      typeInfo = Object.assign({}, primType ? guiTypes[primType] : guiTypes.Unknown);\r\n      if (def.Icon) { typeInfo.icon = guiTypes.iconPrefix + def.Icon; }\r\n      if (def.DynamicOut) { typeInfo.dynamicOut = true; }\r\n      if (def.HelpLink) { typeInfo.helpLink = def.HelpLink; }\r\n      if (def.EnableConfig) { typeInfo.config = def.EnableConfig; }\r\n    }\r\n    if (!typeInfo) { typeInfo = guiTypes.Unknown; }\r\n\r\n    queryDef._typeInfos[cacheKey] = typeInfo;\r\n    return typeInfo;\r\n  }\r\n\r\n  private buildGuiTypes() {\r\n    const guiTypes: { [key: string]: any } = {\r\n      iconPrefix: ''\r\n    };\r\n\r\n    function addGuiType(name: any, icon: any, notes: any) {\r\n      guiTypes[name] = {\r\n        name,\r\n        icon: guiTypes.iconPrefix + icon,\r\n        notes\r\n      };\r\n    }\r\n\r\n    addGuiType('Unknown', 'fiber_manual_record', 'unknown type');\r\n    addGuiType('Cache', 'history', 'caching of data');\r\n    addGuiType('Filter', 'filter_list', 'filter data - usually returning less items than came in');\r\n    addGuiType('Logic', 'share', 'logic operations - usually choosing between different streams');\r\n    addGuiType('Lookup', 'search', 'lookup operation - usually looking for other data based on a criteria');\r\n    addGuiType('Modify', 'star_half', 'modify data - usually changing, adding or removing values'); // todo\r\n    addGuiType('Security', 'account_circle', 'security - usually limit what the user sees based on his identity');\r\n    addGuiType('Sort', 'sort', 'sort the items');\r\n    addGuiType('Source', 'cloud_upload', 'source of new data - usually SQL, CSV or similar');\r\n    addGuiType('Target', 'adjust', 'target - usually just a destination of data');\r\n\r\n    return guiTypes;\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\" *ngIf=\"queryDef\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\">Save and run</button>\r\n      <button mat-raised-button class=\"action\">Run</button>\r\n      <button mat-raised-button class=\"action\">Save</button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Parameters</div>\r\n        <div>\r\n          <button mat-icon-button matTooltip=\"Edit parameters\">\r\n            <mat-icon (click)=\"editPipelineEntity()\">edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button matTooltip=\"Query Params Docs\">\r\n            <mat-icon (click)=\"openParamsHelp()\">info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\">\r\n        <li *ngFor=\"let param of queryDef.data.Pipeline.Params?.split('\\n')\">{{ param }}</li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\">\r\n        <li *ngFor=\"let param of queryDef.data.Pipeline.TestParameters?.split('\\n')\">{{ param }}</li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n      <div class=\"title\">\r\n        <span>Warnings</span>\r\n        <mat-icon style=\"color: red\">warning</mat-icon>\r\n      </div>\r\n      <ol class=\"values\">\r\n        <li *ngFor=\"let warn of warnings\">{{ warn }}</li>\r\n      </ol>\r\n    </div>\r\n\r\n    <div class=\"description\" *ngIf=\"queryDef.data.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ queryDef.data.Pipeline.Description }}</div>\r\n    </div>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, ChangeDetectionStrategy, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { Context } from '../../shared/services/context';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RunExplorerComponent implements OnInit, OnChanges {\r\n  @Input() queryDef: any;\r\n  warnings: any[];\r\n\r\n  constructor(private context: Context, ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.queryDef?.currentValue) {\r\n      this.warnings = calculateWarnings(this.queryDef.data, this.context);\r\n    }\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    alert('Not implemented!');\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('https://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n}\r\n","import { Context } from '../../shared/services/context';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test-module-id is different from the one we're currently\r\n * working on, or if no test-module-id is provided\r\n */\r\nexport function calculateWarnings(pipelineData: any, context: Context): any[] {\r\n  const warnings = [];\r\n\r\n  try { // catch various not-initialized errors\r\n    const regex = /^\\[module:moduleid\\]=([0-9]*)$/gmi; // capture the mod-id\r\n    const testParams = pipelineData.Pipeline.TestParameters;\r\n    const matches = regex.exec(testParams);\r\n    const testMid = matches[1];\r\n    const urlMid = context.moduleId.toString();\r\n    if (testMid !== urlMid) {\r\n      // tslint:disable-next-line:max-line-length\r\n      warnings.push(`Your test moduleid (${testMid}) is different from the current moduleid (${urlMid}). Note that 2sxc 9.33 automatically provides the moduleid - so you usually do not need to set it any more.`);\r\n    }\r\n  } catch (error) { }\r\n\r\n  return warnings;\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataSource, SortedDataSources } from './data-sources.model';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number): SortedDataSources {\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource => dataSource.Difficulty <= maxDifficulty);\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    sorted[type] ? sorted[type].push(dataSource) : sorted[type] = [dataSource];\r\n  }\r\n\r\n  return sorted;\r\n}\r\n\r\nexport function toggleInArray(item: string, array: string[]) {\r\n  const index = array.indexOf(item);\r\n  if (index === -1) {\r\n    array.push(item);\r\n  } else {\r\n    array.splice(index, 1);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer editor-fancy-scrollbar\" *ngIf=\"dataSources\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" (change)=\"onDifficultyChanged($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let item of sorted | keyvalue\">\r\n    <div class=\"collapsible\" [matTooltip]=\"item.key\" matTooltipShowDelay=\"750\" (click)=\"toggleItem(item.key)\">\r\n      <mat-icon>{{ toggledItems.includes(item.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ item.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(item.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let value of item.value\" [matTooltip]=\"value.Name\" matTooltipShowDelay=\"750\"\r\n        (click)=\"addDataSource(value)\">\r\n        {{ value.Name }}\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\nimport { filterAndSortDataSources, toggleInArray } from './add-explorer.helpers';\r\nimport { DataSource } from './data-sources.model';\r\nimport { SortedDataSources } from './data-sources.model';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss']\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnChanges {\r\n  @Input() dataSources: DataSource[];\r\n  difficulty = {\r\n    default: 100,\r\n    advanced: 200,\r\n  };\r\n  activeDiff = this.difficulty.default;\r\n  sorted: SortedDataSources;\r\n  toggledItems: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.dataSources?.currentValue) {\r\n      // spm TODO: something about allow new is missing in the filter\r\n      this.sorted = filterAndSortDataSources(this.dataSources, this.activeDiff);\r\n    }\r\n  }\r\n\r\n  onDifficultyChanged(event: MatSlideToggleChange) {\r\n    this.activeDiff = event.checked ? this.difficulty.advanced : this.difficulty.default;\r\n    this.sorted = filterAndSortDataSources(this.dataSources, this.activeDiff);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    alert('Not implemented');\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n}\r\n","<div id=\"pipelineContainer\" *ngIf=\"queryDef.data.DataSources\">\r\n  <div *ngFor=\"let dataSource of queryDef.data.DataSources; index as index\" datasource\r\n    [attr.guid]=\"dataSource.EntityGuid\" id=\"dataSource_{{dataSource.EntityGuid}}\" class=\"dataSource\" [ngStyle]=\"{\r\n      'top': dataSource.VisualDesignerData.Top + 'px',\r\n      'left': dataSource.VisualDesignerData.Left + 'px',\r\n      'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n    }\">\r\n    <div class=\"configure\" (click)=\"configureDataSource(dataSource)\" title=\"Configure this DataSource\"\r\n      *ngIf=\"!dataSource.ReadOnly && typeInfo(dataSource).config\">\r\n      <mat-icon class=\"eav-icon-settings\">settings</mat-icon>\r\n    </div>\r\n    <mat-icon class=\"type-info\" title=\"{{typeInfo(dataSource).notes}}\">{{typeInfo(dataSource).icon}}</mat-icon>\r\n    <div class=\"name noselect\" title=\"Click to edit the Name\" (click)=\"editName(dataSource)\">\r\n      {{dataSource.Name || '(no name)'}}<mat-icon class=\"show-hover-inline eav-icon-pencil\">edit\r\n      </mat-icon>\r\n    </div>\r\n    <br />\r\n    <div class=\"description noselect\" title=\"Click to edit the Description\" (click)=\"editDescription(dataSource)\">\r\n      {{dataSource.Description}}<mat-icon class=\"show-hover-inline eav-icon-pencil\">edit</mat-icon>\r\n    </div>\r\n    <br />\r\n    <div class=\"typename\" title=\"{{dataSource.PartAssemblyAndType}}\">\r\n      Type: {{typeNameFilter(dataSource.PartAssemblyAndType, 'className')}}\r\n    </div>\r\n    <div class=\"add-endpoint\" title=\"Drag a new Out-Connection from here\"\r\n      *ngIf=\"!dataSource.ReadOnly && typeInfo(dataSource).dynamicOut\">\r\n      <mat-icon class=\"new-connection eav-icon-up-dir\">keyboard_arrow_up</mat-icon>\r\n    </div>\r\n    <mat-icon class=\"delete eav-icon-cancel\" title=\"delete this\" (click)=\"remove(index)\" *ngIf=\"!dataSource.ReadOnly\">\r\n      delete\r\n    </mat-icon>\r\n    <a class=\"help eav-icon-help-circled\" title=\"help for this data source\" href=\"{{typeInfo(dataSource).helpLink}}\"\r\n      target=\"_blank\" *ngIf=\"typeInfo(dataSource).helpLink\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </a>\r\n  </div>\r\n</div>\r\n","import { Component, OnInit, Input } from '@angular/core';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  styleUrls: ['./pipeline-designer.css', './plumb-editor.component.scss']\r\n})\r\nexport class PlumbEditorComponent implements OnInit {\r\n  @Input() queryDef: any;\r\n\r\n  constructor(private queryDefinitionService: QueryDefinitionService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  configureDataSource(dataSource: any) {\r\n  }\r\n\r\n  typeInfo(dataSource: any) {\r\n    const typeInfo = this.queryDefinitionService.dsTypeInfo(dataSource, this.queryDef);\r\n    return typeInfo;\r\n  }\r\n\r\n  editName(dataSource: any) {\r\n  }\r\n\r\n  editDescription(dataSource: any) {\r\n  }\r\n\r\n  typeNameFilter(input: any, format: any) {\r\n    const filtered = this.queryDefinitionService.typeNameFilter(input, format);\r\n    return filtered;\r\n  }\r\n\r\n  remove(index: number) {\r\n  }\r\n\r\n}\r\n","<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.run}\" matTooltip=\"Run\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{'active': activeExplorer === explorer.add}\" matTooltip=\"Add\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" matTooltip=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\" *ngIf=\"queryDef\" [queryDef]=\"queryDef\">\r\n  </app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\" *ngIf=\"queryDef\"\r\n    [dataSources]=\"queryDef.data.InstalledDataSources\">\r\n  </app-add-explorer>\r\n\r\n  <app-plumb-editor *ngIf=\"queryDef\" [queryDef]=\"queryDef\"></app-plumb-editor>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: VisualQueryComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, NgZone, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\nimport { Context } from '../shared/services/context';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { ElementEventListener } from '../../../../shared/element-event-listener-model';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss']\r\n})\r\nexport class VisualQueryComponent implements OnInit, OnDestroy {\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer: string;\r\n  queryDef: any;\r\n\r\n  private pipelineId: number;\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private zone: NgZone,\r\n  ) {\r\n    this.context.init(this.route);\r\n    const pipelineId = this.route.snapshot.paramMap.get('pipelineId');\r\n    this.pipelineId = parseInt(pipelineId, 10);\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadQuery();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.detachListeners();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://2sxc.org/help', '_blank');\r\n  }\r\n\r\n  savePipeline() {\r\n\r\n  }\r\n\r\n  private loadQuery() {\r\n    this.queryDefinitionService.loadQuery(this.pipelineId).then(res => {\r\n      console.log(res);\r\n      this.queryDef = res;\r\n      this.titleService.setTitle(`${this.queryDef.data.Pipeline.Name} - Visual Query`);\r\n    });\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      const save = this.keyboardSave.bind(this);\r\n      window.addEventListener('keydown', save);\r\n      this.eventListeners.push({ element: window, type: 'keydown', listener: save });\r\n    });\r\n  }\r\n\r\n  private detachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(listener => {\r\n        listener.element.removeEventListener(listener.type, listener.listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private keyboardSave(e: KeyboardEvent) {\r\n    const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n    if (!CTRL_S) { return; }\r\n    e.preventDefault();\r\n    this.zone.run(() => { this.savePipeline(); });\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\nimport { Context } from '../shared/services/context';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n  ],\r\n  entryComponents: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n  ]\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///"}