{"version":3,"file":"default-node_modules_angular_material_fesm2022_select_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Overlay, CdkConnectedOverlay, CdkOverlayOrigin, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, ENTER, SPACE, A, ESCAPE, DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, takeUntil, take } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    source;\n    value;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _renderer = inject(Renderer2);\n    _parentFormField = inject(MAT_FORM_FIELD, { optional: true });\n    ngControl = inject(NgControl, { self: true, optional: true });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, { optional: true });\n    _animationsDisabled = inject(ANIMATION_MODULE_TYPE, { optional: true }) === 'NoopAnimations';\n    _initialized = new Subject();\n    _cleanupDetach;\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top',\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n    ];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => { };\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    disableRipple = false;\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n        ? this._defaultOptions.panelWidth\n        : 'auto';\n    /**\n     * By default selecting an option with a `null` or `undefined` value will reset the select's\n     * value. Enable this option if the reset behavior doesn't match your requirements and instead\n     * the nullable options should become selected. The value of this input can be controlled app-wide\n     * using the `MAT_SELECT_CONFIG` injection token.\n     */\n    canSelectNullableOptions = this._defaultOptions?.canSelectNullableOptions ?? false;\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._cleanupDetach?.();\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._cleanupDetach?.();\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n        this._overlayDir.attachOverlay();\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n        // Simulate the animation event before we moved away from `@angular/animations`.\n        Promise.resolve().then(() => this.openedChange.emit(true));\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._exitAndDetach();\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n            // Simulate the animation event before we moved away from `@angular/animations`.\n            Promise.resolve().then(() => this.openedChange.emit(false));\n        }\n    }\n    /** Triggers the exit animation and detaches the overlay at the end. */\n    _exitAndDetach() {\n        if (this._animationsDisabled || !this.panel) {\n            this._detachOverlay();\n            return;\n        }\n        this._cleanupDetach?.();\n        this._cleanupDetach = () => {\n            cleanupEvent();\n            clearTimeout(exitFallbackTimer);\n            this._cleanupDetach = undefined;\n        };\n        const panel = this.panel.nativeElement;\n        const cleanupEvent = this._renderer.listen(panel, 'animationend', (event) => {\n            if (event.animationName === '_mat-select-exit') {\n                this._cleanupDetach?.();\n                this._detachOverlay();\n            }\n        });\n        // Since closing the overlay depends on the animation, we have a fallback in case the panel\n        // doesn't animate. This can happen in some internal tests that do `* {animation: none}`.\n        const exitFallbackTimer = setTimeout(() => {\n            this._cleanupDetach?.();\n            this._detachOverlay();\n        }, 200);\n        panel.classList.add('mat-select-panel-exit');\n    }\n    /** Detaches the current overlay directive. */\n    _detachOverlay() {\n        this._overlayDir.detachOverlay();\n        // Some of the overlay detachment logic depends on change detection.\n        // Mark for check to ensure that things get picked up in a timely manner.\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    /** Handles keyboard events coming from the overlay. */\n    _handleOverlayKeydown(event) {\n        // TODO(crisbeto): prior to #30363 this was being handled inside the overlay directive, but we\n        // need control over the animation timing so we do it manually. We should remove the `keydown`\n        // listener from `.mat-mdc-select-panel` and handle all the events here. That may cause\n        // further test breakages so it's left for a follow-up.\n        if (event.keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n            this.close();\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return ((option.value != null || this.canSelectNullableOptions) &&\n                    this._compareWith(option.value, value));\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = (option) => {\n        if (this.panelOpen) {\n            // Support keyboard focusing disabled options in an ARIA listbox.\n            return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (!this.canSelectNullableOptions && option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0 && !!this._overlayDir;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId() || null;\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelect, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\", canSelectNullableOptions: [\"canSelectNullableOptions\", \"canSelectNullableOptions\", booleanAttribute] }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayDisableClose]=\\\"true\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (overlayKeydown)=\\\"_handleOverlayKeydown($event)\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [class.mat-select-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"@keyframes _mat-select-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-select-exit{from{opacity:1}to{opacity:0}}.mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-disabled .mat-mdc-select-placeholder{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-select-panel-animations-enabled{animation:_mat-select-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-select-panel-animations-enabled.mat-select-panel-exit{animation:_mat-select-exit 100ms linear}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field:not(.mat-form-field-animations-enabled) .mat-mdc-select-placeholder,._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"] }]\n        }], ctorParameters: () => [], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], canSelectNullableOptions: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectModule, imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matSelectAnimations = {\n    // Represents\n    // trigger('transformPanelWrap', [\n    //   transition('* => void', query('@transformPanel', [animateChild()], {optional: true})),\n    // ])\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: {\n        type: 7,\n        name: 'transformPanelWrap',\n        definitions: [\n            {\n                type: 1,\n                expr: '* => void',\n                animation: {\n                    type: 11,\n                    selector: '@transformPanel',\n                    animation: [{ type: 9, options: null }],\n                    options: { optional: true },\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n    // Represents\n    // trigger('transformPanel', [\n    //   state(\n    //     'void',\n    //     style({\n    //       opacity: 0,\n    //       transform: 'scale(1, 0.8)',\n    //     }),\n    //   ),\n    //   transition(\n    //     'void => showing',\n    //     animate(\n    //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n    //       style({\n    //         opacity: 1,\n    //         transform: 'scale(1, 1)',\n    //       }),\n    //     ),\n    //   ),\n    //   transition('* => void', animate('100ms linear', style({opacity: 0}))),\n    // ])\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: {\n        type: 7,\n        name: 'transformPanel',\n        definitions: [\n            {\n                type: 0,\n                name: 'void',\n                styles: {\n                    type: 6,\n                    styles: { opacity: 0, transform: 'scale(1, 0.8)' },\n                    offset: null,\n                },\n            },\n            {\n                type: 1,\n                expr: 'void => showing',\n                animation: {\n                    type: 4,\n                    styles: {\n                        type: 6,\n                        styles: { opacity: 1, transform: 'scale(1, 1)' },\n                        offset: null,\n                    },\n                    timings: '120ms cubic-bezier(0, 0, 0.2, 1)',\n                },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: '* => void',\n                animation: {\n                    type: 4,\n                    styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                    timings: '100ms linear',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"names":["_countGroupLabelsBeforeOption","_getOptionScrollPosition","ErrorStateMatcher","_ErrorStateTracker","MAT_OPTION_PARENT_COMPONENT","MatOption","MAT_OPTGROUP","MatOptionModule","MatCommonModule","_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r1","ɵɵnextContext","ɵɵadvance","ɵɵtextInterpolate","placeholder","MatSelect_Conditional_5_Conditional_1_Template","ɵɵprojection","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","ɵɵtemplate","ɵɵconditional","customTrigger","MatSelect_ng_template_10_Template","_r3","ɵɵgetCurrentView","ɵɵlistener","MatSelect_ng_template_10_Template_div_keydown_0_listener","$event","ɵɵrestoreView","ɵɵresetView","_handleKeydown","ɵɵclassMapInterpolate1","_getPanelTheme","ɵɵclassProp","_animationsDisabled","ɵɵproperty","panelClass","ɵɵattribute","id","multiple","ariaLabel","_getPanelAriaLabelledby","MatOptgroup","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","MatError","MatFormField","MatHint","MatLabel","MatPrefix","MatSuffix","Overlay","CdkConnectedOverlay","CdkOverlayOrigin","OverlayModule","InjectionToken","inject","ChangeDetectorRef","ElementRef","Renderer2","ANIMATION_MODULE_TYPE","EventEmitter","HostAttributeToken","booleanAttribute","numberAttribute","Component","ViewEncapsulation","ChangeDetectionStrategy","ContentChildren","ContentChild","Input","ViewChild","Output","Directive","NgModule","ViewportRuler","CdkScrollableModule","_IdGenerator","LiveAnnouncer","removeAriaReferencedId","addAriaReferencedId","ActiveDescendantKeyManager","Directionality","SelectionModel","hasModifierKey","ENTER","SPACE","A","ESCAPE","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","NgControl","Validators","NgForm","FormGroupDirective","Subject","defer","merge","startWith","switchMap","filter","map","takeUntil","take","NgClass","getMatSelectDynamicMultipleError","Error","getMatSelectNonArrayValueError","getMatSelectNonFunctionValueError","MAT_SELECT_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","reposition","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_TRIGGER","MatSelectChange","source","value","constructor","MatSelect","_viewportRuler","_changeDetectorRef","_elementRef","_dir","optional","_idGenerator","_renderer","_parentFormField","ngControl","self","_liveAnnouncer","_defaultOptions","_initialized","_cleanupDetach","options","optionGroups","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","toArray","panel","nativeElement","labelCount","element","_getHostElement","scrollTop","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","getId","_triggerAriaLabelledBy","_previousControl","_destroy","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","trigger","_overlayDir","disabled","disableRipple","tabIndex","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","next","required","_required","control","hasValidator","_multiple","ngDevMode","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","hasAssigned","_assignValue","ariaLabelledby","errorStateMatcher","matcher","typeaheadDebounceInterval","sortComparator","_id","errorState","panelWidth","canSelectNullableOptions","optionSelectionChanges","changes","pipe","onSelectionChange","openedChange","_openedStream","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","parentForm","parentFormGroup","valueAccessor","parseInt","ngOnInit","change","subscribe","panelOpen","_getOverlayWidth","detectChanges","ngAfterContentInit","complete","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","updateErrorState","ngOnChanges","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","positionChange","attachOverlay","withHorizontalOrientation","_highlightCorrectOption","markForCheck","Promise","resolve","then","emit","_trackedModal","modal","closest","panelId","_exitAndDetach","_isRtl","_detachOverlay","cleanupEvent","clearTimeout","exitFallbackTimer","listen","animationName","setTimeout","classList","add","detachOverlay","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","isOpenKey","manager","isTyping","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","_selectViaInteraction","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_handleOverlayKeydown","_onFocus","_onBlur","cancelTypeahead","color","isEmpty","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","error","console","warn","_skipPredicate","preferredOrigin","refToMeasure","elementRef","getBoundingClientRect","width","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","_propagateChanges","setActiveItem","sort","a","b","indexOf","fallbackValue","valueToEmit","firstEnabledOptionIndex","length","get","labelId","getLabelId","labelExpression","_getAriaActiveDescendant","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","ɵfac","MatSelect_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","contentQueries","MatSelect_ContentQueries","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","viewQuery","MatSelect_Query","ɵɵviewQuery","hostAttrs","hostVars","hostBindings","MatSelect_HostBindings","MatSelect_keydown_HostBindingHandler","MatSelect_focus_HostBindingHandler","MatSelect_blur_HostBindingHandler","toString","inputs","outputs","exportAs","features","ɵɵProvidersFeature","useExisting","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","MatSelect_Template","_r1","ɵɵprojectionDef","MatSelect_Template_div_click_0_listener","ɵɵnamespaceSVG","ɵɵelement","MatSelect_Template_ng_template_backdropClick_10_listener","MatSelect_Template_ng_template_overlayKeydown_10_listener","fallbackOverlayOrigin_r4","ɵɵreference","dependencies","styles","encapsulation","changeDetection","ɵsetClassMetadata","args","selector","None","OnPush","host","providers","imports","descendants","transform","MatSelectTrigger","MatSelectTrigger_Factory","ɵdir","ɵɵdefineDirective","MatSelectModule","MatSelectModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","matSelectAnimations","transformPanelWrap","name","definitions","expr","animation","transformPanel","opacity","offset","timings"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}