{"version":3,"file":"default-projects_eav-ui_src_app_shared_fields_content-types-fields_service_ts-projects_eav-ui-cff1aa.js","mappings":"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","sources":["./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/fields/content-types-fields.service.ts","./projects/eav-ui/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts"],"sourcesContent":["export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'toggle_on',\r\n    [DataTypeCatalog.Custom]: 'extension',\r\n    [DataTypeCatalog.DateTime]: 'today',\r\n    [DataTypeCatalog.Empty]: 'crop_free',\r\n    [DataTypeCatalog.Entity]: 'share',\r\n    [DataTypeCatalog.Hyperlink]: 'link',\r\n    [DataTypeCatalog.Number]: 'dialpad',\r\n    [DataTypeCatalog.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n\r\nexport function calculateTypeLabel(typeName: string): string {\r\n  const typeLabelMap: Record<string, string> = {\r\n    [DataTypeCatalog.Boolean]: 'Boolean (yes/no)',\r\n    [DataTypeCatalog.Custom]: 'Custom - ui-tools or custom types',\r\n    [DataTypeCatalog.DateTime]: 'Date and/or time',\r\n    [DataTypeCatalog.Empty]: 'Empty - for form-titles etc.',\r\n    [DataTypeCatalog.Entity]: 'Entity (other content-items)',\r\n    [DataTypeCatalog.Hyperlink]: 'Link / file reference',\r\n    [DataTypeCatalog.Number]: 'Number',\r\n    [DataTypeCatalog.String]: 'Text / string',\r\n  };\r\n  return typeLabelMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Of } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services';\r\nimport { calculateDataTypes, DataType } from '../../content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers';\r\nimport { HttpServiceBase } from '../services/http-service-base';\r\nimport { Field, FieldInputTypeOption } from './field.model';\r\nimport { InputTypeCatalog } from './input-type-catalog';\r\nimport { InputTypeMetadata } from './input-type-metadata.model';\r\n\r\nexport const webApiFieldsAll = 'admin/field/all';\r\n\r\n// All WebApi paths - to easily search/find when looking for where these are used\r\nconst webApiDataTypes = 'admin/field/DataTypes';\r\nconst webApiReservedNames = 'admin/field/ReservedNames';\r\nconst webApiAddInheritedField = 'admin/field/AddInheritedField';\r\nconst webApiInputTypes = 'admin/field/InputTypes';\r\nconst webApiInputType = 'admin/field/InputType';\r\nconst webApiShare = 'admin/field/Share';\r\nconst webApiInherit = 'admin/field/Inherit';\r\nconst webApiSort = 'admin/field/Sort';\r\nconst webApiSetTitle = webApiTypeRoot + 'SetTitle';\r\nconst webApiRename = 'admin/field/Rename';\r\nconst webApiDelete = 'admin/field/Delete';\r\nconst webApiAdd = 'admin/field/Add';\r\nconst webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\nconst webApiGetAncestors = 'admin/field/GetAncestors';\r\nconst webApiGetDescendants = 'admin/field/GetDescendants';\r\n\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService extends HttpServiceBase {\r\n\r\n  protected paramsAppId(more: Record<string, string | number | boolean | ReadonlyArray<string | number | boolean>> = {}) {\r\n    return {\r\n      params: {\r\n        appid: this.appId,\r\n        ...more,\r\n      },\r\n    };\r\n  }\r\n\r\n  /** Get list of data types available in the system, such as 'string', 'number' etc. */\r\n  dataTypes() {\r\n    return this.getSignal<DataType[], string[]>(webApiDataTypes, this.paramsAppId(), [], raw => calculateDataTypes(raw));\r\n  }\r\n\r\n  getInputTypes() {\r\n    return this.getSignal<FieldInputTypeOption[], InputTypeMetadata[]>(\r\n      webApiInputTypes,\r\n      this.paramsAppId(),\r\n      [],\r\n      inputConfigs => inputConfigs\r\n        .map(config => ({\r\n          dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n          inputType: config.Type,\r\n          label: config.Label,\r\n          description: config.Description,\r\n          isDefault: config.IsDefault,\r\n          isObsolete: config.IsObsolete,\r\n          isRecommended: config.IsRecommended,\r\n          obsoleteMessage: config.ObsoleteMessage,\r\n          icon: config.IsDefault ? 'stars' : config.IsRecommended ? 'star' : null,\r\n          sort: (config.IsObsolete ? 'z' : config.IsDefault ? 'a' : config.IsRecommended ? 'b' : 'c') + config.Label,\r\n        } satisfies FieldInputTypeOption & { sort: string}))\r\n      .sort((a, b) => a.sort.localeCompare(b.sort)),\r\n    );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.getHttpApiUrl<Record<string, string>>(webApiReservedNames);\r\n  }\r\n\r\n  reservedNames() {\r\n    return this.getSignal<Record<string, string>>(webApiReservedNames, null, {});\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }))\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) continue;\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getFieldsSig(contentTypeStaticName: string) {\r\n    return this.getSignal<Field[]>(webApiFieldsAll, this.paramsAppId({ staticName: contentTypeStaticName }), [], fields => {\r\n      if (fields) {\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) continue;\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n      }\r\n      return fields;\r\n    });\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsGetShared, this.paramsAppId());\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    return this.#getShareinfo(webApiFieldsGetShared, attributeId);\r\n    // return this.getHttp<Field[]>(this.apiUrl(webApiFieldsGetShared), this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  getAncestors(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetAncestors, attributeId);\r\n  }\r\n\r\n  getDescendants(attributeId: number) {\r\n    return this.#getShareinfo(webApiGetDescendants, attributeId);\r\n  }\r\n\r\n  #getShareinfo(endpoint: string, attributeId: number) {\r\n    return this.getHttpApiUrl<Field[]>(endpoint, this.paramsAppId({ attributeId }));\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceType: string, sourceFieldGuid: string /* guid */, name: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiAddInheritedField), null, this.paramsAppId({\r\n      contentTypeId: targetContentTypeId.toString(),\r\n      sourceType,\r\n      sourceField: sourceFieldGuid,\r\n      name,\r\n    }));\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiShare), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiInherit), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiSort), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiSetTitle), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiRename), null, {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle)\r\n      throw new Error('Can\\'t delete Title');\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiDelete), {\r\n      params: {\r\n        appid: this.appId,\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiAdd), null, {\r\n      params: {\r\n        AppId: this.appId,\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(attributeId: number, field: string, inputType: Of<typeof InputTypeCatalog>) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiInputType), null, {\r\n      params: { appId: this.appId, attributeId, field, inputType }\r\n    });\r\n  }\r\n}\r\n","import { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { calculateTypeIcon, calculateTypeLabel } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: calculateTypeLabel(DataTypeCatalog.Boolean), description: 'Yes/no or true/false values' },\r\n  Custom: { label: calculateTypeLabel(DataTypeCatalog.Custom), description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: calculateTypeLabel(DataTypeCatalog.DateTime), description: 'For date, time or combined values' },\r\n  Empty: { label: calculateTypeLabel(DataTypeCatalog.Empty), description: 'Use to structure your form' },\r\n  Entity: { label: calculateTypeLabel(DataTypeCatalog.Entity), description: 'One or more other content-items' },\r\n  Hyperlink: { label: calculateTypeLabel(DataTypeCatalog.Hyperlink), description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: calculateTypeLabel(DataTypeCatalog.Number), description: 'Any kind of number' },\r\n  String: { label: calculateTypeLabel(DataTypeCatalog.String), description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n"],"names":["DataTypeCatalog","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","filter","map","shareReplay","switchMap","transient","classLog","HttpServiceBase","QueryService","logSpecs","all","getEntities","getAvailableEntities","delete","webApiEntityRoot","webApiEntityList","EntityService","constructor","log","queryService","getEntities$","params","fnIf","pipe","p","contentTypeName","entitiesFilter","contentTypes","itemIds","fields","data","Default","appId","contentType","entityId","force","parentId","parentField","parent","http","apiUrl","id","toString","__ngFactoryType__","factory","ɵfac","calculateTypeIcon","typeName","typeIconMap","calculateTypeLabel","typeLabelMap","HttpClient","Context","context","getFromQuery","queryUrl","hasParams","paramsLower","toLocaleLowerCase","hasAppId","includes","allParams","urlParams","substring","post","Guids","join","i0","ɵɵinject","i1","i2","webApiTypeRoot","calculateDataTypes","webApiFieldsAll","webApiDataTypes","webApiReservedNames","webApiAddInheritedField","webApiInputTypes","webApiInputType","webApiShare","webApiInherit","webApiSort","webApiSetTitle","webApiRename","webApiDelete","webApiAdd","webApiFieldsGetShared","webApiGetAncestors","webApiGetDescendants","ContentTypesFieldsService","paramsAppId","more","appid","dataTypes","getSignal","raw","getInputTypes","inputConfigs","config","dataType","Type","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","sort","a","b","localeCompare","getReservedNames","getHttpApiUrl","reservedNames","getFields","contentTypeStaticName","staticName","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","getFieldsSig","getShareableFields","getShareableFieldsFor","attributeId","getShareinfo","getAncestors","getDescendants","#getShareinfo","endpoint","addInheritedField","targetContentTypeId","sourceType","sourceFieldGuid","name","contentTypeId","sourceField","share","inherit","inheritMetadataOf","reOrder","idArray","Id","order","JSON","stringify","setTitle","item","rename","fieldId","newName","IsTitle","Error","add","newField","AppId","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","dataTypeLabels","rawDataTypes","rawDataType","push"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}