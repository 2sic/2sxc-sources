{"version":3,"file":"default-projects_eav-ui_src_app_app-administration_services_index_ts.js","mappings":"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","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/index.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,  \r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n\r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllSig');\r\n    const sig =  this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n    return l.r(sig);\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n","export * from './dialog-config-global.service';\r\nexport * from './content-types.service';\r\nexport * from './export-app-parts.service';\r\nexport * from './export-app.service';\r\nexport * from './import-app-parts.service';\r\nexport * from './pipelines.service';\r\nexport * from './views.service';\r\n"],"names":["webApiAppRoot","HttpServiceBase","webApiAppRootStatistics","webApiAppRootSaveData","ExportAppService","getAppInfo","initial","getSignal","params","appid","appId","zoneId","exportAppUrl","apiUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","getHttpApiUrl","toString","withPortalFiles","__ngFactoryType__","factory","ɵfac","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","webApiJson","ViewsService","getAll","delete","id","Id","import","file","formData","FormData","append","http","post","export","url","window","open","getPolymorphism","getUsage","guid","computed","Signal","map","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","webApiTypeSave","webApiTypeDelete","webApiTypeImport","webApiTypeAddGhost","ContentTypesService","retrieveContentType","nameId","contentTypeId","getTypeSig","retrieveContentTypes","scope","getTypesSig","getScopes","pipe","scopesData","scopes","old","scopeOptions","Object","keys","key","name","value","getScopesSig","scopesSignal","scopeOptionsSignal","getScopesV2","save","contentType","staticName","NameId","files","createGhost","sourceNameId","webApiAppPartsRoot","ImportAppPartsService","importAppParts","resetApp","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","webApiAppPartsGet","ExportAppPartsService","getContentInfo","exportParts","contentTypeIds","entityIds","templateIds","join","of","switchMap","FileUploadMessageTypes","ImportAppService","importApp","changedName","retryOnDuplicate","Messages","MessageType","Warning","folderName","prompt","Text","httpResource","from","classLog","webApiEntityList","logSpecs","all","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryImport","webApiQueryClone","webApiQueryDelete","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","constructor","log","l","fnIf","r","sig","res","defaultValue","obs","fileBase64","AppId","ContentBase64","success","Success"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}