{"version":3,"file":"default-node_modules_angular_material_fesm2022_dialog_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/dialog.mjs","./node_modules/@angular/cdk/fesm2022/dialog.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { inject, ANIMATION_MODULE_TYPE, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ElementRef, Directive, Input, NgModule } from '@angular/core';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { MatCommonModule } from '@angular/material/core';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Custom class for the overlay pane. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Custom class for the backdrop. */\n    backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose = false;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Position overrides. */\n    position;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n    ariaLabel = null;\n    /**\n     * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n     * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n     * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n     */\n    ariaModal = false;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n    delayFocusTrap = true;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation = true;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @deprecated No longer used. Will be removed.\n     * @breaking-change 20.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * Duration of the enter animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    enterAnimationDuration;\n    /**\n     * Duration of the exit animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    exitAnimationDuration;\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** Emits when an animation state changes. */\n    _animationStateChanged = new EventEmitter();\n    /** Whether animations are enabled. */\n    _animationsEnabled = this._animationMode !== 'NoopAnimations';\n    /** Number of actions projected in the dialog. */\n    _actionSectionCount = 0;\n    /** Host element of the dialog container component. */\n    _hostElement = this._elementRef.nativeElement;\n    /** Duration of the dialog open animation. */\n    _enterAnimationDuration = this._animationsEnabled\n        ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n        : 0;\n    /** Duration of the dialog close animation. */\n    _exitAnimationDuration = this._animationsEnabled\n        ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n        : 0;\n    /** Current timer for dialog animations. */\n    _animationTimer = null;\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Completes the dialog open by clearing potential animation classes, trapping\n     * focus and emitting an opened event.\n     */\n    _finishDialogOpen = () => {\n        this._clearAnimationClasses();\n        this._openAnimationDone(this._enterAnimationDuration);\n    };\n    /**\n     * Completes the dialog close by clearing potential animation classes, restoring\n     * focus and emitting a closed event.\n     */\n    _finishDialogClose = () => {\n        this._clearAnimationClasses();\n        this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n    };\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    _ref;\n    _containerInstance;\n    /** The instance of component opened into the dialog. */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    _afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n    _beforeClosed = new Subject();\n    /** Result to be passed to afterClosed. */\n    _result;\n    /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n    _closeFallbackTimeout;\n    /** Current state of the dialog. */\n    _state = MatDialogState.OPEN;\n    // TODO(crisbeto): we shouldn't have to declare this property, because `DialogRef.close`\n    // already has a second `options` parameter that we can use. The problem is that internal tests\n    // have assertions like `expect(MatDialogRef.close).toHaveBeenCalledWith(foo)` which will break,\n    // because it'll be called with two arguments by things like `MatDialogClose`.\n    /** Interaction that caused the dialog to close. */\n    _closeInteractionType;\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    _overlay = inject(Overlay);\n    _defaultOptions = inject(MAT_DIALOG_DEFAULT_OPTIONS, { optional: true });\n    _scrollStrategy = inject(MAT_DIALOG_SCROLL_STRATEGY);\n    _parentDialog = inject(MatDialog, { optional: true, skipSelf: true });\n    _idGenerator = inject(_IdGenerator);\n    _dialog = inject(Dialog);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    dialogConfigClass = MatDialogConfig;\n    _dialogRefConstructor;\n    _dialogContainerType;\n    _dialogDataToken;\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() {\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || this._idGenerator.getId('mat-mdc-dialog-');\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Default to \"button\" to prevents accidental form submits. */\n    type = 'button';\n    /** Dialog close input. */\n    dialogResult;\n    _matDialogClose;\n    constructor() { }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogClose, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    _dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    constructor() { }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogLayoutSection, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    id = inject(_IdGenerator).getId('mat-mdc-dialog-title-');\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i1.CdkScrollable }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    align;\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n * @deprecated Will stop being exported.\n * @breaking-change 21.0.0\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDialogAnimations = {\n    // Represents:\n    // trigger('dialogContainer', [\n    //   // Note: The `enter` animation transitions to `transform: none`, because for some reason\n    //   // specifying the transform explicitly, causes IE both to blur the dialog content and\n    //   // decimate the animation performance. Leaving it as `none` solves both issues.\n    //   state('void, exit', style({opacity: 0, transform: 'scale(0.7)'})),\n    //   state('enter', style({transform: 'none'})),\n    //   transition(\n    //     '* => enter',\n    //     group([\n    //       animate(\n    //         '{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)',\n    //         style({transform: 'none', opacity: 1}),\n    //       ),\n    //       query('@*', animateChild(), {optional: true}),\n    //     ]),\n    //     _defaultParams,\n    //   ),\n    //   transition(\n    //     '* => void, * => exit',\n    //     group([\n    //       animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({opacity: 0})),\n    //       query('@*', animateChild(), {optional: true}),\n    //     ]),\n    //     _defaultParams,\n    //   ),\n    // ])\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: {\n        type: 7,\n        name: 'dialogContainer',\n        definitions: [\n            {\n                type: 0,\n                name: 'void, exit',\n                styles: { type: 6, styles: { opacity: 0, transform: 'scale(0.7)' }, offset: null },\n            },\n            {\n                type: 0,\n                name: 'enter',\n                styles: { type: 6, styles: { transform: 'none' }, offset: null },\n            },\n            {\n                type: 1,\n                expr: '* => enter',\n                animation: {\n                    type: 3,\n                    steps: [\n                        {\n                            type: 4,\n                            styles: { type: 6, styles: { transform: 'none', opacity: 1 }, offset: null },\n                            timings: '{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)',\n                        },\n                        {\n                            type: 11,\n                            selector: '@*',\n                            animation: { type: 9, options: null },\n                            options: { optional: true },\n                        },\n                    ],\n                    options: null,\n                },\n                options: { params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' } },\n            },\n            {\n                type: 1,\n                expr: '* => void, * => exit',\n                animation: {\n                    type: 3,\n                    steps: [\n                        {\n                            type: 4,\n                            styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                            timings: '{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)',\n                        },\n                        {\n                            type: 11,\n                            selector: '@*',\n                            animation: { type: 9, options: null },\n                            options: { optional: true },\n                        },\n                    ],\n                    options: null,\n                },\n                options: { params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' } },\n            },\n        ],\n        options: {},\n    },\n};\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n","import { FocusTrapFactory, InteractivityChecker, FocusMonitor, _IdGenerator, A11yModule } from '@angular/cdk/a11y';\nimport { OverlayRef, Overlay, OverlayContainer, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, Renderer2, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n    backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n    disableClose = false;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n    positionStrategy;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n    ariaLabel = null;\n    /**\n     * Whether this is a modal dialog. Used to set the `aria-modal` attribute. Off by default,\n     * because it can interfere with other overlay-based components (e.g. `mat-select`) and because\n     * it is redundant since the dialog marks all outside content as `aria-hidden` anyway.\n     */\n    ariaModal = false;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n    restoreFocus = true;\n    /**\n     * Scroll strategy to be used for the dialog. This determines how\n     * the dialog responds to scrolling underneath the panel element.\n     */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n    closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n    closeOnDestroy = true;\n    /**\n     * Whether the dialog should close when the underlying overlay is detached. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n     * external detachment can happen as a result of a scroll strategy triggering it or when the\n     * browser location changes.\n     */\n    closeOnOverlayDetachments = true;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @deprecated No longer used. Will be removed.\n     * @breaking-change 20.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * Providers that will be exposed to the contents of the dialog. Can also\n     * be provided as a function in order to generate the providers lazily.\n     */\n    providers;\n    /**\n     * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n     * A configuration object can be passed in to customize the providers that will be exposed\n     * to the dialog container.\n     */\n    container;\n    /**\n     * Context that will be passed to template-based dialogs.\n     * A function can be passed in to resolve the context lazily.\n     */\n    templateContext;\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _config;\n    _interactivityChecker = inject(InteractivityChecker);\n    _ngZone = inject(NgZone);\n    _overlayRef = inject(OverlayRef);\n    _focusMonitor = inject(FocusMonitor);\n    _renderer = inject(Renderer2);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT, { optional: true });\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    _focusTrap = null;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    _elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n    _closeInteractionType = null;\n    /**\n     * Queue of the IDs of the dialog's label element, based on their definition order. The first\n     * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n     * where there are two or more titles in the DOM at a time and the first one is destroyed while\n     * the rest are present.\n     */\n    _ariaLabelledByQueue = [];\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _injector = inject(Injector);\n    _isDestroyed = false;\n    constructor() {\n        super();\n        // Callback is primarily for some internal tests\n        // that were instantiating the dialog container manually.\n        this._config = (inject(DialogConfig, { optional: true }) || new DialogConfig());\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._contentAttached();\n        return result;\n    };\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    deregisterBlur();\n                    deregisterMousedown();\n                    element.removeAttribute('tabindex');\n                };\n                const deregisterBlur = this._renderer.listen(element, 'blur', callback);\n                const deregisterMousedown = this._renderer.listen(element, 'mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus();\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDialogContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    overlayRef;\n    config;\n    /**\n     * Instance of component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Instance of the container that is rendering out the dialog content. */\n    containerInstance;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Emits when the dialog has been closed. */\n    closed = new Subject();\n    /** Emits when the backdrop of the dialog is clicked. */\n    backdropClick;\n    /** Emits when on keyboard events within the dialog. */\n    keydownEvents;\n    /** Emits on pointer events that happen outside of the dialog. */\n    outsidePointerEvents;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subscription to external detachments of the dialog. */\n    _detachSubscription;\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass Dialog {\n    _overlay = inject(Overlay);\n    _injector = inject(Injector);\n    _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, { optional: true });\n    _parentDialog = inject(Dialog, { optional: true, skipSelf: true });\n    _overlayContainer = inject(OverlayContainer);\n    _idGenerator = inject(_IdGenerator);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    _ariaHiddenElements = new Map();\n    _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() { }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }));\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: Dialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: Dialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n"],"names":["i0","inject","ANIMATION_MODULE_TYPE","EventEmitter","Component","ViewEncapsulation","ChangeDetectionStrategy","InjectionToken","Injectable","ElementRef","Directive","Input","NgModule","_IdGenerator","i1","CdkScrollable","Overlay","OverlayModule","CdkDialogContainer","Dialog","DialogConfig","DialogModule","coerceNumberProperty","CdkPortalOutlet","PortalModule","Subject","merge","defer","filter","take","startWith","ESCAPE","hasModifierKey","MatCommonModule","MatDialogContainer_ng_template_2_Template","rf","ctx","MatDialogConfig","viewContainerRef","injector","id","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","position","data","direction","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","delayFocusTrap","scrollStrategy","closeOnNavigation","componentFactoryResolver","enterAnimationDuration","exitAnimationDuration","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","OPEN_ANIMATION_DURATION","CLOSE_ANIMATION_DURATION","MatDialogContainer","_animationMode","optional","_animationStateChanged","_animationsEnabled","_actionSectionCount","_hostElement","_elementRef","nativeElement","_enterAnimationDuration","parseCssTime","_config","_exitAnimationDuration","_animationTimer","_contentAttached","_startOpenAnimation","emit","state","totalTime","style","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","_finishDialogOpen","Promise","resolve","then","_startExitAnimation","remove","_finishDialogClose","_updateActionSectionCount","delta","_changeDetectorRef","markForCheck","_clearAnimationClasses","_openAnimationDone","duration","callback","clearTimeout","setTimeout","_ngZone","runOutsideAngular","requestAnimationFrame","_captureInitialFocus","_trapFocus","next","ngOnDestroy","attachComponentPortal","portal","ref","location","ɵfac","ɵMatDialogContainer_BaseFactory","MatDialogContainer_Factory","__ngFactoryType__","ɵɵgetInheritedFactory","ɵcmp","ɵɵdefineComponent","type","selectors","hostAttrs","hostVars","hostBindings","MatDialogContainer_HostBindings","ɵɵhostProperty","ɵɵattribute","_ariaLabelledByQueue","ɵɵclassProp","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","MatDialogContainer_Template","ɵɵelementStart","ɵɵtemplate","ɵɵelementEnd","dependencies","styles","encapsulation","ngDevMode","ɵsetClassMetadata","args","selector","None","changeDetection","Default","imports","host","time","endsWith","substring","length","MatDialogState","MatDialogRef","_ref","_containerInstance","componentInstance","componentRef","_afterOpened","_beforeClosed","_result","_closeFallbackTimeout","_state","OPEN","_closeInteractionType","constructor","config","addPanelClass","pipe","event","subscribe","complete","overlayRef","detachments","backdropClick","keydownEvents","keyCode","preventDefault","_closeDialogVia","close","dialogResult","detachBackdrop","CLOSING","afterOpened","afterClosed","closed","beforeClosed","updatePosition","strategy","positionStrategy","left","right","centerHorizontally","top","bottom","centerVertically","updateSize","classes","removePanelClass","getState","CLOSED","focusOrigin","interactionType","result","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","block","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MatDialog","_overlay","_defaultOptions","_scrollStrategy","_parentDialog","skipSelf","_idGenerator","_dialog","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","dialogConfigClass","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","openDialogs","_getAfterAllClosed","parent","afterAllClosed","undefined","open","componentOrTemplateRef","dialogRef","getId","cdkRef","global","closeOnDestroy","closeOnOverlayDetachments","container","providers","useValue","templateContext","cdkConfig","dialogContainer","push","index","indexOf","splice","closeAll","_closeDialogs","getDialogById","find","dialog","dialogs","i","MatDialog_Factory","ɵprov","ɵɵdefineInjectable","token","MatDialogClose","_matDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","$event","inputs","exportAs","ɵɵNgOnChangesFeature","MatDialogLayoutSection","_dialogRef","_onAdd","instance","_onRemove","MatDialogLayoutSection_Factory","MatDialogTitle","_addAriaLabelledBy","_removeAriaLabelledBy","ɵMatDialogTitle_BaseFactory","MatDialogTitle_Factory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","ɵɵHostDirectivesFeature","hostDirectives","MatDialogActions","align","ɵMatDialogActions_BaseFactory","MatDialogActions_Factory","MatDialogActions_HostBindings","element","parentElement","contains","DIRECTIVES","MatDialogModule","MatDialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","_defaultParams","params","matDialogAnimations","name","definitions","opacity","transform","offset","expr","animation","steps","timings","options","FocusTrapFactory","InteractivityChecker","FocusMonitor","A11yModule","OverlayRef","OverlayContainer","OverlayConfig","Platform","_getFocusedElementPierceShadowDom","BasePortalOutlet","ComponentPortal","TemplatePortal","DOCUMENT","NgZone","Renderer2","ChangeDetectorRef","Injector","afterNextRender","ViewChild","TemplateRef","of","Directionality","CdkDialogContainer_ng_template_0_Template","throwDialogContentAlreadyAttachedError","Error","_focusTrapFactory","_interactivityChecker","_overlayRef","_focusMonitor","_renderer","_platform","_document","_portalOutlet","_focusTrap","_elementFocusedBeforeDialogWasOpened","_injector","_isDestroyed","_initializeFocusTrap","_handleBackdropClicks","_restoreFocus","hasAttached","attachTemplatePortal","attachDomPortal","_recaptureFocus","_containsFocus","_forceFocus","isFocusable","tabIndex","deregisterBlur","deregisterMousedown","removeAttribute","listen","focus","_focusByCssSelector","elementToFocus","querySelector","focusedSuccessfully","focusInitialElement","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","body","focusVia","destroy","isBrowser","create","CdkDialogContainer_Factory","viewQuery","CdkDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","CdkDialogContainer_HostBindings","CdkDialogContainer_Template","static","DialogRef","containerInstance","outsidePointerEvents","_detachSubscription","closedSubject","unsubscribe","dispose","DIALOG_SCROLL_STRATEGY","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","DIALOG_SCROLL_STRATEGY_PROVIDER","_overlayContainer","_ariaHiddenElements","Map","defaults","overlayConfig","_getOverlayConfig","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","reverseForEach","disposeOnNavigation","userInjector","containerType","containerPortal","containerRef","attach","_createInjector","context","$implicit","contentRef","fallbackInjector","get","value","change","emitEvent","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","siblings","children","sibling","nodeName","hasAttribute","set","getAttribute","Dialog_Factory","items","DialogModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}