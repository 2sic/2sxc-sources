{"version":3,"mappings":"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","names":["i0","ctx_r3","oxw","ctx_r6","ctx_r8","ctx_r9","ctx_r10","ctx_r11","RegistrationComponent","constructor","dialogRef","globalConfigService","zoneService","featuresConfigService","snackBar","dialog","viewContainerRef","this","getDebugEnabled$","ngOnInit","systemInfoSet$","getSystemInfo","pipe","catchError","of","undefined","share","closeDialog","close","copyToClipboard","text","open","duration","openLicenseRegistration","systemInfoSet","window","System","Fingerprint","retrieveLicense","subscribe","error","next","info","Success","Message","panelClass","registerManually","openLicenseUpload","FileUploadDialogComponent","data","title","description","allowedFileTypes","upload$","files","uploadLicense","autoFocus","width","selectors","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange"],"sources":["./projects/eav-ui/src/app/apps-management/sub-dialogs/registration/registration.component.html","./projects/eav-ui/src/app/apps-management/sub-dialogs/registration/registration.component.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts"],"sourcesContent":["<ng-container *ngIf=\"{systemInfoSet: systemInfoSet$ | async} as data\">\r\n\r\n  <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">2sxc Registration</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    Here you can register your system (registration is free). This happens through our <a href=\"https://patrons.2sxc.org/\" target=\"_blank\">Patrons</a> platform.\r\n  </p>\r\n\r\n  <p class=\"dialog-description\">\r\n    <b>Status:</b> {{ data.systemInfoSet ? \"this system is registered to \" + data.systemInfoSet.License.Owner : \"this system is not yet registered\" }}\r\n    <br>\r\n    <b>Fingerprint:</b> <span [tippy]=\"'Click to copy to clipboard'\"\r\n      (click)=\"copyToClipboard(data.systemInfoSet.System.Fingerprint)\"> {{ data.systemInfoSet.System.Fingerprint }}</span>\r\n    <br>\r\n    <br>\r\n  </p>\r\n\r\n  <div class=\"mat-cards-div\">\r\n    <mat-card class=\"mat-card-left\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar>\r\n          <mat-icon svgIcon=\"settings-applications\"></mat-icon>\r\n        </div>\r\n        <mat-card-title>Automatic Registration</mat-card-title>\r\n        <mat-card-subtitle>The simple way</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          This will open 2sxc Patrons and give it the system fingerprint,\r\n          so you can then log in and assign it a name and features you want to activate.\r\n        </p>\r\n        <div class=\"card-actions\">\r\n          <button mat-button mat-button tippy=\"Register\" *ngIf=\"data.systemInfoSet\" (click)=\"openLicenseRegistration(data.systemInfoSet)\">\r\n            <mat-icon svgIcon=\"app-registration\"></mat-icon>\r\n            <span>Register</span>\r\n          </button>\r\n          <button mat-button tippy=\"Retrieve license\" (click)=\"retrieveLicense()\">\r\n            <mat-icon svgIcon=\"download-for-offline\"></mat-icon>\r\n            <span>Retrieve license</span>\r\n          </button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n\r\n    <mat-card class=\"mat-card-right\">\r\n      <mat-card-header>\r\n        <div mat-card-avatar>\r\n          <mat-icon svgIcon=\"waving-hand\"></mat-icon>\r\n        </div>\r\n        <mat-card-title>Manual Registration</mat-card-title>\r\n        <mat-card-subtitle>Offline or special scenarios</mat-card-subtitle>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          For offline or special scenarios you can just go to 2sxc Patrons and copy/paste the fingerprint yourself.\r\n          <br>\r\n          Click on the fingerprint above to copy it to your clipboard.\r\n        </p>\r\n        <div class=\"card-actions\">\r\n          <button mat-button mat-button tippy=\"Register\"\r\n            (click)=\"registerManually()\">\r\n            <mat-icon svgIcon=\"app-registration\"></mat-icon>\r\n            <span>Register Manually</span>\r\n          </button>\r\n          <button mat-button tippy=\"Upload license\" (click)=\"openLicenseUpload()\">\r\n            <mat-icon svgIcon=\"cloud-upload\"></mat-icon>\r\n            <span>Upload license</span>\r\n          </button>\r\n        </div>\r\n      </mat-card-content>\r\n    </mat-card>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">\r\n      Close\r\n    </button>\r\n  </div>\r\n\r\n</ng-container>\r\n","import { Component, HostBinding, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { catchError, Observable, of, share} from 'rxjs';\r\nimport { GlobalConfigService } from '../../../edit/shared/store/ngrx-data/global-config.service';\r\nimport { FileUploadDialogComponent, FileUploadDialogData } from '../../../shared/components/file-upload-dialog';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\nimport { SystemInfoSet } from '../../models/system-info.model';\r\nimport { FeaturesConfigService } from '../../services/features-config.service';\r\nimport { ZoneService } from '../../services/zone.service';\r\n\r\n@Component({\r\n  selector: 'app-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n  systemInfoSet$: Observable<SystemInfoSet>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<RegistrationComponent>,\r\n    private globalConfigService: GlobalConfigService,\r\n    private zoneService: ZoneService,\r\n    private featuresConfigService: FeaturesConfigService,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.systemInfoSet$ = this.zoneService.getSystemInfo().pipe(catchError(() => of(undefined)), share());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  openLicenseRegistration(systemInfoSet: SystemInfoSet): void {\r\n    window.open(`https://patrons.2sxc.org/register?fingerprint=${systemInfoSet.System.Fingerprint}`, '_blank');\r\n  }\r\n\r\n  retrieveLicense(): void {\r\n    this.featuresConfigService.retrieveLicense().subscribe({\r\n      error: () => {\r\n        this.snackBar.open('Failed to retrieve license. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: (info) => {\r\n        const message = `License ${info.Success ? 'Info' : 'Error'}: ${info.Message}`;\r\n        const duration = info.Success ? 3000 : 100000;\r\n        const panelClass = info.Success ? undefined : 'snackbar-error';\r\n        this.snackBar.open(message, undefined, { duration, panelClass });\r\n      },\r\n    });\r\n  }\r\n\r\n  registerManually(): void {\r\n    window.open(`https://patrons.2sxc.org/`, '_blank');\r\n  }\r\n\r\n  openLicenseUpload(): void {\r\n    const data: FileUploadDialogData = {\r\n      title: 'Upload license',\r\n      description: '',\r\n      allowedFileTypes: 'json',\r\n      upload$: (files) => this.featuresConfigService.uploadLicense(files[0]),\r\n    };\r\n    this.dialog.open(FileUploadDialogComponent, {\r\n      data,\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_sub-dialogs_registration_registration_component_ts.e37eacec679e7d5b.js"}