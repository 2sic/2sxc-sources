{"version":3,"file":"projects_eav-ui_src_app_apps-management_licence-info_license-info_component_ts.c9ab9b5551879a49.js","mappings":"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","names":["i0","id_r2","_r1","ctx_r2","copyToClipboard","guid_r5","_r4","ctx","FeatureDetailsDialogComponent","constructor","dialogData","dialogRef","snackBar","this","closeDialog","close","findOutMore","link","window","open","text","duration","static","t","MAT_DIALOG_DATA","i1","i2","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","FeatureDetailsDialogComponent_Conditional_7_Template","FeatureDetailsDialogComponent_Conditional_8_Template","FeatureDetailsDialogComponent_Conditional_9_Template","feature","name","description","tmp_2_0","nameId","tmp_3_0","guid","tmp_4_0","security","Impact","Message","MatCardModule","i3","MatButtonModule","i4","MatIconModule","i5","TippyDirective","SafeHtmlPipe","FeaturesListEnabledReasonComponent","agInit","params","value","data","refresh","enabledReasonDetailed","FeaturesListEnabledComponent","FeaturesStatusComponent","disabled","isDisabled","tooltip","tooltipGetter","toggle","nextValue","onToggle","_c0","MatSlideToggleModule","NgClass","styles","ExpirationExtension","expandFeature","getExpiration","expiration","expandLicense","license","lowestExpiration","Features","map","f","sort","dateString","result","icon","ExpMessage","ExpIcon","ExpWarningIcon","expires","split","startsWith","expDate","Date","toDateString","setDate","getDate","endsWith","ActiveFeaturesCountPipe","transform","filter","isEnabled","length","EJ8","pure","LicensesOrderPipe","licenses","Array","isArray","a","b","Priority","AgGridHeightDirective","elementRef","itemsCount","headerHeight","rowHeight","maxRows","extraHeight","element","nativeElement","ngOnChanges","changes","style","height","FsC","inputs","license_r1","ctx_r1","gridOptions","LicenseInfoComponent_Conditional_0_For_2_Conditional_17_Template","IsEnabled","Name","panel_r3","expanded","Description","LicenseInfoComponent_Conditional_0_For_2_Template","trackLicenses","LicenseInfoComponent","#refreshLicenses$","#featuresConfigSvc","#dialogRouter","dialog","viewContainerRef","changeDetectorRef","disabled$","BehaviorSubject","#buildGridOptions","Subject","transient","FeaturesConfigService","DialogRoutingService","ModuleRegistry","registerModules","ClientSideRowModelModule","ngOnInit","doOnDialogClosed","next","viewModel$","pipe","startWith","undefined","switchMap","getLicenses","catchError","of","tap","l","share","ngOnDestroy","complete","index","Guid","openRegistration","router","navigate","url","replace","#showFeatureDetails","autoFocus","width","markForCheck","#toggleFeature","enabled","forkJoin","saveFeatures","FeatureGuid","Enabled","timer","subscribe","error","defaultGridOptions","columnDefs","ColumnDefinitions","ItemsText","headerName","field","cellClass","cellRenderer","IdFieldComponent","cellRendererParams","TextWideFlex3","onCellClicked","headerClass","sortable","BooleanFilterComponent","TextNarrow","tooltipValueGetter","p","ActionsPinnedRight7","isConfigurable","viewQuery","AgGridAngular","LicenseInfoComponent_Conditional_0_Template","tmp_0_0","MatExpansionModule","SxcGridModule","MatDialogActions","RouterOutlet","AsyncPipe","logSpecs","ServiceBase","route","super","log","classLog","snapshot","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","fnIf","subscriptions","add","childDialogClosed$","end","navPath","navRelative","commands","relativeTo","navParentFirstChild","parent","firstChild","events","event","NavigationEnd","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","jDH","factory","ɵfac","Subscription","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled-reason/features-list-enabled-reason.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-list-enabled/features-list-enabled.component.html","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.ts","./projects/eav-ui/src/app/apps-management/licence-info/features-status/features-status.component.html","./projects/eav-ui/src/app/features/expiration-extension.ts","./projects/eav-ui/src/app/apps-management/licence-info/active-features-count.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/licenses-order.pipe.ts","./projects/eav-ui/src/app/apps-management/licence-info/ag-grid-height.directive.ts","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.html","./projects/eav-ui/src/app/apps-management/licence-info/license-info.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["<mat-card>\r\n  <mat-card-header>\r\n    <mat-card-title>{{ dialogData.feature.name }}</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <p [innerHtml]=\"dialogData.feature.description | safeHtml\"></p>\r\n    @if (dialogData.feature.nameId; as id) {\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n        </div>\r\n      </div>\r\n    }\r\n    @if (dialogData.feature.guid; as guid) {\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">GUID:</div>\r\n        <div class=\"eav-info-row__value eav_click\">\r\n          <span [tippy]=\"guid\" (click)=\"copyToClipboard(guid)\">{{ guid }}</span>\r\n        </div>\r\n      </div>\r\n    }\r\n    @if ((dialogData.feature.security.Impact + ': ' + dialogData.feature.security.Message); as security) {\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ security }}</span>\r\n        </div>\r\n      </div>\r\n    }\r\n  </mat-card-content>\r\n  <mat-card-actions align=\"end\">\r\n    <button mat-raised-button class=\"eav-card-action-button\" color=\"accent\"\r\n      (click)=\"findOutMore(dialogData.feature.link)\">\r\n      <mat-icon>open_in_new</mat-icon>\r\n      Find out more\r\n    </button>\r\n    <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n      Close\r\n    </button>\r\n  </mat-card-actions>\r\n</mat-card>","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  styleUrls: ['./feature-details-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FeatureDetailsDialogData,\r\n    private dialogRef: MatDialogRef<FeatureDetailsDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  findOutMore(link: string): void {\r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled-reason',\r\n  templateUrl: './features-list-enabled-reason.component.html',\r\n  styleUrls: ['./features-list-enabled-reason.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective],\r\n})\r\nexport class FeaturesListEnabledReasonComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n  feature: Feature;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n    this.feature = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div [tippy]=\"feature.enabledReasonDetailed\">{{ value }}</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-features-list-enabled',\r\n  templateUrl: './features-list-enabled.component.html',\r\n  styleUrls: ['./features-list-enabled.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class FeaturesListEnabledComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  agInit(params: ICellRendererParams): void {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ value ? 'check_box' : 'check_box_outline_blank' }}</mat-icon>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Feature } from '../../../features/models/feature.model';\r\nimport { FeaturesStatusParams } from './features-status.models';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-features-status',\r\n  templateUrl: './features-status.component.html',\r\n  styleUrls: ['./features-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatSlideToggleModule,\r\n    NgClass,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FeaturesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean | null;\r\n  disabled: boolean;\r\n  tooltip: string;\r\n\r\n  private params: ICellRendererParams & FeaturesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & FeaturesStatusParams & IdFieldParams<Feature>): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.disabled = params.isDisabled(params.data);\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params: ICellRendererParams & FeaturesStatusParams): boolean {\r\n    this.disabled = this.params.isDisabled(this.params.data);\r\n    return true;\r\n  }\r\n\r\n  toggle(): void {\r\n    const feature: Feature = this.params.data;\r\n    let nextValue: boolean;\r\n    switch (this.value) {\r\n      case false:\r\n        nextValue = null;\r\n        break;\r\n      case null:\r\n        nextValue = true;\r\n        break;\r\n      case true:\r\n        nextValue = false;\r\n        break;\r\n    }\r\n    this.value = nextValue;\r\n    this.params.onToggle(feature, nextValue);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" [tippy]=\"tooltip\" [disabled]=\"disabled\" (change)=\"toggle()\" [ngClass]=\"{\r\n  'toggle-false': value === false,\r\n  'toggle-null': value === null\r\n  }\">\r\n</mat-slide-toggle>\r\n","import { License } from '../apps-management/models/license.model';\r\nimport { Feature } from './models';\r\n\r\n/**\r\n * Helper class used in union with other classes to add expiration hints to features.\r\n * It's implemented as a class, so it's easier to bundle static functions.\r\n */\r\nexport class ExpirationExtension {\r\n\r\n  /** The expiration date as a human readable string. Not from the server; generated on the client */\r\n  ExpMessage?: string;\r\n  ExpIcon?: string;\r\n\r\n  ExpWarningIcon?: string;\r\n\r\n  static expandFeature(feature: Feature): Feature & ExpirationExtension {\r\n    return {\r\n      ...feature,\r\n      ...ExpirationExtension.getExpiration(feature?.expiration)\r\n    };\r\n  }\r\n\r\n  static expandLicense(license: License): License & ExpirationExtension {\r\n    // Wrap in Try-Catch to avoid errors in the UI\r\n    try {\r\n      // find the lowest expiration date on the features\r\n      const lowestExpiration = license?.Features?.map(f => f.expiration).sort()[0];\r\n      // if there is no lowest expiration date, skip the rest\r\n      if (lowestExpiration == null) return license;\r\n\r\n      // debugger;\r\n      const withState = {\r\n        ...license,\r\n        ...ExpirationExtension.getExpiration(lowestExpiration),\r\n      };\r\n\r\n      return withState;\r\n    } catch (error) {\r\n      return license;\r\n    }\r\n  }\r\n\r\n  private static getExpiration(dateString: string): ExpirationExtension {\r\n    // Inner helper to create the final result\r\n    const result = (icon: string, text: string) => ({\r\n      ExpMessage: (icon != null ? icon + ' ' : '') + text,\r\n      ExpIcon: icon,\r\n      ExpWarningIcon: icon != '✅' ? icon : null,\r\n    })\r\n    const expires = dateString?.split('T')[0];\r\n    // no valid expiration date\r\n    if (expires == null) return result(null, null);\r\n    // never expires\r\n    if (expires.startsWith('9999')) return result('✅', 'never');\r\n    const expDate = new Date(expires);\r\n    // show \"expired\" if it's over-due\r\n    if (expDate < new Date()) return result('🛑', 'expired');\r\n    // return \"today\" if it's today\r\n    if (expDate.toDateString() === new Date().toDateString()) return result('⚠️', 'today');\r\n    // return \"tomorrow\" if it's tomorrow\r\n    if (expDate.toDateString() === new Date(new Date().setDate(new Date().getDate() + 1)).toDateString()) return result('⚠️', 'tomorrow');\r\n    // Warn if it's within 30 days\r\n    if (expDate < new Date(new Date().setDate(new Date().getDate() + 30))) return result('⚠️', expires);\r\n    // Show special EOY if it's at the end of the year - the most common expiration\r\n    if (expires.endsWith('12-31')) return result('✅', `EOY ${expires.split('-')[0]}`);\r\n    // otherwise: just show the date\r\n    return result('❓', expires);\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n  name: 'activeFeaturesCount',\r\n  standalone: true\r\n})\r\nexport class ActiveFeaturesCountPipe implements PipeTransform {\r\n\r\n  transform(license: License) {\r\n    return `${license.Features.filter(f => f.isEnabled).length}/${license.Features.length}`;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { License } from '../models/license.model';\r\n\r\n@Pipe({\r\n    name: 'licensesOrder',\r\n    standalone: true\r\n})\r\nexport class LicensesOrderPipe implements PipeTransform {\r\n\r\n  transform(licenses: License[]): any {\r\n    if (!Array.isArray(licenses)) { return licenses; }\r\n\r\n    const sorted = [...licenses].sort((a: License, b: License) => {\r\n      if (a.Priority < b.Priority) {\r\n        return -1;\r\n      } else if (a.Priority > b.Priority) {\r\n        return 1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return sorted;\r\n  }\r\n}\r\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appAgGridHeight]',\r\n  standalone: true\r\n})\r\nexport class AgGridHeightDirective implements OnChanges {\r\n  @Input() itemsCount = 0;\r\n  @Input() headerHeight = 32;\r\n  @Input() rowHeight = 48;\r\n  @Input() maxRows = 100;\r\n\r\n  /** Fixes a bug where scrollbar appears when then is no overflow */\r\n  private extraHeight = 2;\r\n\r\n  private element: HTMLElement;\r\n\r\n  constructor(elementRef: ElementRef) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.itemsCount != null) {\r\n      const rows = this.itemsCount === 0 ? 2 : this.itemsCount > this.maxRows ? this.maxRows : this.itemsCount;\r\n      this.element.style.height = `${this.headerHeight + rows * this.rowHeight + this.extraHeight}px`;\r\n    }\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<mat-accordion multi>\r\n  @for (license of vm.licenses | licensesOrder; track trackLicenses($index, license)) {\r\n  <mat-expansion-panel #panel>\r\n    <mat-expansion-panel-header>\r\n      <mat-panel-title>\r\n        <mat-icon class=\"panel-icon\" [tippy]=\"license.IsEnabled ? 'License is active' : 'License is not active'\">{{\r\n          license.IsEnabled ? 'check_circle_outline' : 'cancel' }}</mat-icon>\r\n        <div>\r\n          <div class=\"panel-title\">\r\n            <span>{{ license.Name }}</span>\r\n            <span class=\"active-features-count\">{{ license | activeFeaturesCount }}</span>\r\n            <span> {{ license.ExpWarningIcon }}</span>\r\n          </div>\r\n          <div class=\"panel-description\" [ngClass]=\"{ 'expanded': panel.expanded }\">\r\n            {{ license.Description }}\r\n          </div>\r\n        </div>\r\n      </mat-panel-title>\r\n    </mat-expansion-panel-header>\r\n    @if (panel.expanded) {\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"license.Features\" [gridOptions]=\"gridOptions\" appAgGridHeight\r\n      [itemsCount]=\"license.Features?.length\">\r\n    </ag-grid-angular>\r\n    }\r\n  </mat-expansion-panel>\r\n  }\r\n</mat-accordion>\r\n}\r\n\r\n<mat-dialog-actions align=\"start\">\r\n  <button mat-button class=\"eav-button__with-icon\" tippy=\"Registration\" (click)=\"openRegistration()\">\r\n    <mat-icon class=\"eav-icon\">app_registration</mat-icon>\r\n    <span>Registration</span>\r\n  </button>\r\n</mat-dialog-actions>\r\n\r\n<router-outlet></router-outlet>\r\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { GridOptions } from '@ag-grid-community/core';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogActions } from '@angular/material/dialog';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, catchError, forkJoin, map, Observable, of, share, startWith, Subject, switchMap, tap, timer } from 'rxjs';\r\nimport { FeatureState } from '../../features/models';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { Feature } from '../../features/models/feature.model';\r\nimport { License } from '../models/license.model';\r\nimport { FeatureDetailsDialogComponent } from './feature-details-dialog/feature-details-dialog.component';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog/feature-details-dialog.models';\r\nimport { FeaturesListEnabledReasonComponent } from './features-list-enabled-reason/features-list-enabled-reason.component';\r\nimport { FeaturesListEnabledComponent } from './features-list-enabled/features-list-enabled.component';\r\nimport { FeaturesStatusComponent } from './features-status/features-status.component';\r\nimport { FeaturesStatusParams } from './features-status/features-status.models';\r\nimport { ExpirationExtension } from '../../features/expiration-extension';\r\nimport { ActiveFeaturesCountPipe } from './active-features-count.pipe';\r\nimport { LicensesOrderPipe } from './licenses-order.pipe';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { AgGridHeightDirective } from './ag-grid-height.directive';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { FeaturesConfigService } from '../services/features-config.service';\r\nimport { ModuleRegistry } from '@ag-grid-community/core';\r\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../../core';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-license-info',\r\n  templateUrl: './license-info.component.html',\r\n  styleUrls: ['./license-info.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatExpansionModule,\r\n    MatIconModule,\r\n    NgClass,\r\n    SxcGridModule,\r\n    AgGridHeightDirective,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    LicensesOrderPipe,\r\n    ActiveFeaturesCountPipe,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class LicenseInfoComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AgGridAngular) private gridRef?: AgGridAngular;\r\n\r\n  disabled$ = new BehaviorSubject(false);\r\n  gridOptions = this.#buildGridOptions();\r\n\r\n  #refreshLicenses$ = new Subject<void>();\r\n\r\n  viewModel$: Observable<LicenseInfoViewModel>;\r\n\r\n  #featuresConfigSvc = transient(FeaturesConfigService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#refreshLicenses$.next());\r\n    this.viewModel$ =\r\n      this.#refreshLicenses$.pipe(\r\n        startWith(undefined),\r\n        switchMap(() => this.#featuresConfigSvc.getLicenses().pipe(catchError(() => of(undefined)))),\r\n        tap(() => this.disabled$.next(false)),\r\n\r\n        // Fiddle with the data for development tests\r\n        // 2023-11-16 2dm disabled - causes trouble in production\r\n        // @STV - do you still need this? or is this a forgotten debug code?\r\n        // map(licenses => {\r\n        //   var licTesting = licenses[licenses.length - 2];\r\n        //   licTesting.Features[licTesting.Features.length - 1].Expiration = \"2023-08-25\";\r\n        //   return licenses;\r\n        // }),\r\n\r\n        // Expand the data to have pre-calculated texts/states\r\n        map(licenses => licenses.map(l => {\r\n          // const expandedFeatures = l.Features.map(f => ExpirationExtension.expandFeature(f));\r\n          return ({\r\n            ...ExpirationExtension.expandLicense(l),\r\n            Features: l.Features.map(f => ExpirationExtension.expandFeature(f)),\r\n          });\r\n        })),\r\n\r\n        // Share the resulting stream with all subscribers\r\n        share(),\r\n      )\r\n        //])\r\n        .pipe(\r\n          map((licenses) => ({ licenses })),\r\n        );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.disabled$.complete();\r\n  }\r\n\r\n  trackLicenses(index: number, license: License): string {\r\n    return license.Guid;\r\n  }\r\n\r\n\r\n  openRegistration(): void {\r\n    const router = this.#dialogRouter.router;\r\n    router.navigate([router.url.replace('license', '') + \"/registration\"]);\r\n  }\r\n\r\n  #showFeatureDetails(feature: Feature): void {\r\n    const data: FeatureDetailsDialogData = {\r\n      feature,\r\n    };\r\n    this.dialog.open(FeatureDetailsDialogComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '600px',\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  #toggleFeature(feature: Feature, enabled: boolean): void {\r\n    this.disabled$.next(true);\r\n    const state: FeatureState = {\r\n      FeatureGuid: feature.guid,\r\n      Enabled: enabled,\r\n    };\r\n    forkJoin([this.#featuresConfigSvc.saveFeatures([state]), timer(100)]).subscribe({\r\n      error: () => {\r\n        this.#refreshLicenses$.next();\r\n      },\r\n      next: () => {\r\n        this.#refreshLicenses$.next();\r\n      },\r\n    });\r\n  }\r\n\r\n  // Note: @SDV\r\n  // I think this should serve as a good example of how to use the grid\r\n  // 1. eg. with cellDefaults and similar initial objects containing most commonly used options here\r\n  // 2. Also we should probably never add a valueGetter for the simple properties\r\n  // ...not sure why it's even in here, my guess is copy-paste of code which wasn't understood properly\r\n  // 3. I think the header-name should always be the first line, then the field\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'ID',\r\n          field: 'nameId',\r\n          width: 200,\r\n          cellClass: 'no-outline',\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<Feature> = {\r\n              tooltipGetter: (feature: Feature) => feature.nameId,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          headerName: 'Name',\r\n          field: 'name',\r\n          cellClass: 'primary-action highlight'.split(' '),\r\n          onCellClicked: (params) => {\r\n            this.#showFeatureDetails(params.data as Feature);\r\n          },\r\n        },\r\n        {\r\n\r\n          headerName: 'Enabled',\r\n          field: 'isEnabled',\r\n          width: 80,\r\n          cellClass: 'no-outline',\r\n          headerClass: 'dense',\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          cellRenderer: FeaturesListEnabledComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextNarrow,\r\n          headerName: 'Reason',\r\n          field: 'enabledReason',\r\n          cellRenderer: FeaturesListEnabledReasonComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Expiration',\r\n          field: 'ExpMessage',\r\n          sortable: false,\r\n          width: 120,\r\n          tooltipValueGetter: (p) => (p.data as Feature & ExpirationExtension)?.expiration,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight7,\r\n          headerName: '',\r\n          field: 'enabledInConfiguration',\r\n          cellRenderer: FeaturesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: FeaturesStatusParams & IdFieldParams<Feature> = {\r\n              isDisabled: (feature) => !feature.isConfigurable || this.disabled$.value,\r\n              onToggle: (feature, enabled) => this.#toggleFeature(feature, enabled),\r\n              tooltipGetter: (feature: Feature) => feature.isConfigurable ? \"Toggle off | default | on\" : \"This feature can't be configured\",\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\n\r\ninterface LicenseInfoViewModel {\r\n  licenses: (License & ExpirationExtension)[];\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}