{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/autocomplete.js"],"names":["_c0","MatAutocomplete_ng_template_0_Template","rf","ctx","formFieldId_r1","id","ctx_r0","_classList","ariaLabel","_getPanelAriaLabelledby","_c1","_uniqueAutocompleteIdCounter","MatAutocompleteSelectedEvent","source","option","this","MatAutocompleteBase","_MatAutocompleteMixinBase","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","providedIn","factory","autoActiveFirstOption","_MatAutocompleteBase","_changeDetectorRef","_elementRef","defaults","platform","_activeOptionChanges","EMPTY","showPanel","_isOpen","displayWith","optionSelected","opened","closed","optionActivated","inertGroups","SAFARI","_autoActiveFirstOption","value","length","reduce","classList","className","_setVisibilityClasses","nativeElement","_keyManager","options","withWrap","change","subscribe","index","emit","toArray","_setVisibility","unsubscribe","scrollTop","panel","markForCheck","event","labelId","ariaLabelledby","_visibleClass","_hiddenClass","ɵfac","t","ɵdir","type","viewQuery","_t","template","first","inputs","panelWidth","outputs","features","MatAutocomplete","arguments","ɵMatAutocomplete_BaseFactory","ɵcmp","selectors","contentQueries","dirIndex","optionGroups","hostAttrs","disableRipple","exportAs","provide","useExisting","ngContentSelectors","decls","vars","consts","directives","styles","encapsulation","changeDetection","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","overlay","scrollStrategies","reposition","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","MatAutocompleteTrigger","multi","_MatAutocompleteTriggerBase","_element","_overlay","_viewContainerRef","_zone","scrollStrategy","_dir","_formField","_document","_viewportRuler","_defaults","_componentDestroyed","_autocompleteDisabled","_manuallyFloatingLabel","_viewportSubscription","_canOpenOnNextFocus","_closeKeyEventStream","_windowBlurHandler","activeElement","panelOpen","_onChange","_onTouched","position","autocompleteAttribute","_overlayAttached","optionSelections","autocomplete","map","onSelectionChange","onStable","pipe","_scrollStrategy","window","_getWindow","runOutsideAngular","addEventListener","changes","_positionStrategy","_setStrategyPositions","_overlayRef","updatePosition","removeEventListener","_destroyPanel","complete","_attachOverlay","_floatLabel","_resetLabel","hasAttached","detach","_closingActionsSubscription","detectChanges","tabOut","_getOutsideClickStream","detachments","activeItem","clickTarget","_isInsideShadowRoot","composedPath","target","formField","customOrigin","connectedTo","elementRef","contains","overlayElement","Promise","resolve","then","_setTriggerValue","fn","isDisabled","disabled","keyCode","preventDefault","activeOption","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","onKeydown","_canOpen","openPanel","_scrollToOption","activeItemIndex","parseFloat","_previousValue","shouldAnimate","floatLabel","_animateAndLockLabel","firstStable","optionChanges","reapplyLastPosition","wasOpen","panelClosingActions","_setValueAndClose","closePanel","dispose","toDisplay","inputValue","_control","_clearPreviousSelectedOption","focus","_emitSelectEvent","skip","forEach","selected","deselect","_a","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","_portal","getLabelId","create","_getOverlayConfig","keydownEvents","next","stopPropagation","attach","_subscribeToClosingActions","positionStrategy","_getOverlayPosition","direction","panelClass","overlayPanelClass","strategy","flexibleConnectedTo","withFlexibleDimensions","withPush","positions","belowPositions","originX","originY","overlayX","overlayY","_aboveClass","abovePositions","withPositions","getConnectedOverlayOrigin","_getHostWidth","getBoundingClientRect","setFirstItemActive","setActiveItem","element","readOnly","defaultView","labelCount","_setScrollTop","_getHostElement","newScrollPosition","offsetTop","offsetHeight","_getScrollTop","autocompleteDisabled","ɵMatAutocompleteTrigger_BaseFactory","hostVars","hostBindings","_handleFocus","$event","_handleInput","_handleKeydown","toString","MatAutocompleteModule","ɵmod","ɵinj","providers","imports"],"mappings":"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","file":"default~edit-edit-module~replace-content-replace-content-module.290445bf5b3a2df0955b.js","sourcesContent":["import { ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty, coerceStringArray } from '@angular/cdk/coercion';\nimport { Platform, _getShadowRoot } from '@angular/cdk/platform';\nimport { InjectionToken, EventEmitter, Directive, ChangeDetectorRef, ElementRef, Inject, ViewChild, TemplateRef, Input, Output, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, forwardRef, ViewContainerRef, NgZone, Optional, Host, NgModule } from '@angular/core';\nimport { mixinDisableRipple, MAT_OPTION_PARENT_COMPONENT, MAT_OPTGROUP, MatOption, MatOptionSelectionChange, _countGroupLabelsBeforeOption, _getOptionScrollPosition, MatOptionModule, MatCommonModule } from '@angular/material/core';\nimport { Subscription, Subject, defer, merge, of, fromEvent } from 'rxjs';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { ESCAPE, hasModifierKey, ENTER, UP_ARROW, DOWN_ARROW, TAB } from '@angular/cdk/keycodes';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatFormField, MAT_FORM_FIELD } from '@angular/material/form-field';\nimport { take, switchMap, filter, map, tap, delay } from 'rxjs/operators';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Autocomplete IDs need to be unique across components, so this counter exists outside of\n * the component definition.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\nimport * as ɵngcc3 from '@angular/cdk/overlay';\nimport * as ɵngcc4 from '@angular/cdk/bidi';\nimport * as ɵngcc5 from '@angular/cdk/scrolling';\nimport * as ɵngcc6 from '@angular/material/form-field';\n\nconst _c0 = [\"panel\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n} if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.id)(\"ngClass\", ctx_r0._classList);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.ariaLabel || null)(\"aria-labelledby\", ctx_r0._getPanelAriaLabelledby(formFieldId_r1));\n} }\nconst _c1 = [\"*\"];\nlet _uniqueAutocompleteIdCounter = 0;\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n// Boilerplate for applying mixins to MatAutocomplete.\n/** @docs-private */\nclass MatAutocompleteBase {\n}\nconst _MatAutocompleteMixinBase = mixinDisableRipple(MatAutocompleteBase);\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return { autoActiveFirstOption: false };\n}\n/** Base class with all of the `MatAutocomplete` functionality. */\nclass _MatAutocompleteBase extends _MatAutocompleteMixinBase {\n    constructor(_changeDetectorRef, _elementRef, defaults, platform) {\n        super();\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._activeOptionChanges = Subscription.EMPTY;\n        /** Whether the autocomplete panel should be visible, depending on option length. */\n        this.showPanel = false;\n        this._isOpen = false;\n        /** Function that maps an option's control value to its display value in the trigger. */\n        this.displayWith = null;\n        /** Event that is emitted whenever an option from the list is selected. */\n        this.optionSelected = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is opened. */\n        this.opened = new EventEmitter();\n        /** Event that is emitted when the autocomplete panel is closed. */\n        this.closed = new EventEmitter();\n        /** Emits whenever an option is activated using the keyboard. */\n        this.optionActivated = new EventEmitter();\n        this._classList = {};\n        /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n        this.id = `mat-autocomplete-${_uniqueAutocompleteIdCounter++}`;\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = (platform === null || platform === void 0 ? void 0 : platform.SAFARI) || false;\n        this._autoActiveFirstOption = !!defaults.autoActiveFirstOption;\n    }\n    /** Whether the autocomplete panel is open. */\n    get isOpen() { return this._isOpen && this.showPanel; }\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    get autoActiveFirstOption() { return this._autoActiveFirstOption; }\n    set autoActiveFirstOption(value) {\n        this._autoActiveFirstOption = coerceBooleanProperty(value);\n    }\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        if (value && value.length) {\n            this._classList = coerceStringArray(value).reduce((classList, className) => {\n                classList[className] = true;\n                return classList;\n            }, {});\n        }\n        else {\n            this._classList = {};\n        }\n        this._setVisibilityClasses(this._classList);\n        this._elementRef.nativeElement.className = '';\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap();\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options.length;\n        this._setVisibilityClasses(this._classList);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Sets the autocomplete visibility classes on a classlist based on the panel is visible. */\n    _setVisibilityClasses(classList) {\n        classList[this._visibleClass] = this.showPanel;\n        classList[this._hiddenClass] = !this.showPanel;\n    }\n}\n_MatAutocompleteBase.ɵfac = function _MatAutocompleteBase_Factory(t) { return new (t || _MatAutocompleteBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform)); };\n_MatAutocompleteBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteBase, viewQuery: function _MatAutocompleteBase_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 3);\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n    } }, inputs: { displayWith: \"displayWith\", autoActiveFirstOption: \"autoActiveFirstOption\", classList: [\"class\", \"classList\"], ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], panelWidth: \"panelWidth\" }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n_MatAutocompleteBase.ctorParameters = () => [\n    { type: ChangeDetectorRef },\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] },\n    { type: Platform }\n];\n_MatAutocompleteBase.propDecorators = {\n    template: [{ type: ViewChild, args: [TemplateRef, { static: true },] }],\n    panel: [{ type: ViewChild, args: ['panel',] }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    displayWith: [{ type: Input }],\n    autoActiveFirstOption: [{ type: Input }],\n    panelWidth: [{ type: Input }],\n    optionSelected: [{ type: Output }],\n    opened: [{ type: Output }],\n    closed: [{ type: Output }],\n    optionActivated: [{ type: Output }],\n    classList: [{ type: Input, args: ['class',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }, { type: ɵngcc1.Platform }]; }, { displayWith: [{\n            type: Input\n        }], optionSelected: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], closed: [{\n            type: Output\n        }], optionActivated: [{\n            type: Output\n        }], autoActiveFirstOption: [{\n            type: Input\n        }], classList: [{\n            type: Input,\n            args: ['class']\n        }], template: [{\n            type: ViewChild,\n            args: [TemplateRef, { static: true }]\n        }], panel: [{\n            type: ViewChild,\n            args: ['panel']\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], panelWidth: [{\n            type: Input\n        }] }); })();\nclass MatAutocomplete extends _MatAutocompleteBase {\n    constructor() {\n        super(...arguments);\n        this._visibleClass = 'mat-autocomplete-visible';\n        this._hiddenClass = 'mat-autocomplete-hidden';\n    }\n}\nMatAutocomplete.ɵfac = function MatAutocomplete_Factory(t) { return ɵMatAutocomplete_BaseFactory(t || MatAutocomplete); };\nMatAutocomplete.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatAutocomplete, selectors: [[\"mat-autocomplete\"]], contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 1);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatOption, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.options = _t);\n    } }, hostAttrs: [1, \"mat-autocomplete\"], inputs: { disableRipple: \"disableRipple\" }, exportAs: [\"matAutocomplete\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 1, vars: 0, consts: [[\"role\", \"listbox\", 1, \"mat-autocomplete-panel\", 3, \"id\", \"ngClass\"], [\"panel\", \"\"]], template: function MatAutocomplete_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 4, \"ng-template\");\n    } }, directives: [ɵngcc2.NgClass], styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatAutocomplete.propDecorators = {\n    optionGroups: [{ type: ContentChildren, args: [MAT_OPTGROUP, { descendants: true },] }],\n    options: [{ type: ContentChildren, args: [MatOption, { descendants: true },] }]\n};\nconst ɵMatAutocomplete_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocomplete);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocomplete, [{\n        type: Component,\n        args: [{\n                selector: 'mat-autocomplete',\n                template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div class=\\\"mat-autocomplete-panel\\\"\\n       role=\\\"listbox\\\"\\n       [id]=\\\"id\\\"\\n       [attr.aria-label]=\\\"ariaLabel || null\\\"\\n       [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n       [ngClass]=\\\"_classList\\\"\\n       #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                exportAs: 'matAutocomplete',\n                inputs: ['disableRipple'],\n                host: {\n                    'class': 'mat-autocomplete'\n                },\n                providers: [\n                    { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }\n                ],\n                styles: [\".mat-autocomplete-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;visibility:hidden;max-width:none;max-height:256px;position:relative;width:100%;border-bottom-left-radius:4px;border-bottom-right-radius:4px}.mat-autocomplete-panel.mat-autocomplete-visible{visibility:visible}.mat-autocomplete-panel.mat-autocomplete-hidden{visibility:hidden}.mat-autocomplete-panel-above .mat-autocomplete-panel{border-radius:0;border-top-left-radius:4px;border-top-right-radius:4px}.mat-autocomplete-panel .mat-divider-horizontal{margin-top:-1px}.cdk-high-contrast-active .mat-autocomplete-panel{outline:solid 1px}mat-autocomplete{display:none}\\n\"]\n            }]\n    }], null, { optionGroups: [{\n            type: ContentChildren,\n            args: [MAT_OPTGROUP, { descendants: true }]\n        }], options: [{\n            type: ContentChildren,\n            args: [MatOption, { descendants: true }]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Base class containing all of the functionality for `MatAutocompleteOrigin`. */\nclass _MatAutocompleteOriginBase {\n    constructor(\n    /** Reference to the element on which the directive is applied. */\n    elementRef) {\n        this.elementRef = elementRef;\n    }\n}\n_MatAutocompleteOriginBase.ɵfac = function _MatAutocompleteOriginBase_Factory(t) { return new (t || _MatAutocompleteOriginBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\n_MatAutocompleteOriginBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteOriginBase });\n_MatAutocompleteOriginBase.ctorParameters = () => [\n    { type: ElementRef }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteOriginBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, null); })();\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin extends _MatAutocompleteOriginBase {\n}\nMatAutocompleteOrigin.ɵfac = function MatAutocompleteOrigin_Factory(t) { return ɵMatAutocompleteOrigin_BaseFactory(t || MatAutocompleteOrigin); };\nMatAutocompleteOrigin.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteOrigin, selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]], exportAs: [\"matAutocompleteOrigin\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteOrigin_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteOrigin);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteOrigin, [{\n        type: Directive,\n        args: [{\n                selector: '[matAutocompleteOrigin]',\n                exportAs: 'matAutocompleteOrigin'\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * The following style constants are necessary to save here in order\n * to properly calculate the scrollTop of the panel. Because we are not\n * actually focusing the active item, scroll must be handled manually.\n */\n/**\n * The height of each autocomplete option.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_OPTION_HEIGHT = 48;\n/**\n * The total height of the autocomplete panel.\n * @deprecated No longer being used. To be removed.\n * @breaking-change 12.0.0\n */\nconst AUTOCOMPLETE_PANEL_HEIGHT = 256;\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy');\n/** @docs-private */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        'you\\'re attempting to open it after the ngAfterContentInit hook.');\n}\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass _MatAutocompleteTriggerBase {\n    constructor(_element, _overlay, _viewContainerRef, _zone, _changeDetectorRef, scrollStrategy, _dir, _formField, _document, _viewportRuler, _defaults) {\n        this._element = _element;\n        this._overlay = _overlay;\n        this._viewContainerRef = _viewContainerRef;\n        this._zone = _zone;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._formField = _formField;\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        this._defaults = _defaults;\n        this._componentDestroyed = false;\n        this._autocompleteDisabled = false;\n        /** Whether or not the label state is being overridden. */\n        this._manuallyFloatingLabel = false;\n        /** Subscription to viewport size changes. */\n        this._viewportSubscription = Subscription.EMPTY;\n        /**\n         * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n         * closed autocomplete from being reopened if the user switches to another browser tab and then\n         * comes back.\n         */\n        this._canOpenOnNextFocus = true;\n        /** Stream of keyboard events that can close the panel. */\n        this._closeKeyEventStream = new Subject();\n        /**\n         * Event handler for when the window is blurred. Needs to be an\n         * arrow function in order to preserve the context.\n         */\n        this._windowBlurHandler = () => {\n            // If the user blurred the window while the autocomplete is focused, it means that it'll be\n            // refocused when they come back. In this case we want to skip the first focus event, if the\n            // pane was closed, in order to avoid reopening it unintentionally.\n            this._canOpenOnNextFocus =\n                this._document.activeElement !== this._element.nativeElement || this.panelOpen;\n        };\n        /** `View -> model callback called when value changes` */\n        this._onChange = () => { };\n        /** `View -> model callback called when autocomplete has been touched` */\n        this._onTouched = () => { };\n        /**\n         * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n         * will render the panel underneath the trigger if there is enough space for it to fit in\n         * the viewport, otherwise the panel will be shown above it. If the position is set to\n         * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n         * whether it fits completely in the viewport.\n         */\n        this.position = 'auto';\n        /**\n         * `autocomplete` attribute to be set on the input element.\n         * @docs-private\n         */\n        this.autocompleteAttribute = 'off';\n        this._overlayAttached = false;\n        /** Stream of autocomplete option selections. */\n        this.optionSelections = defer(() => {\n            if (this.autocomplete && this.autocomplete.options) {\n                return merge(...this.autocomplete.options.map(option => option.onSelectionChange));\n            }\n            // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n            // Return a stream that we'll replace with the real one once everything is in place.\n            return this._zone.onStable\n                .pipe(take(1), switchMap(() => this.optionSelections));\n        });\n        this._scrollStrategy = scrollStrategy;\n    }\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    get autocompleteDisabled() { return this._autocompleteDisabled; }\n    set autocompleteDisabled(value) {\n        this._autocompleteDisabled = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            this._zone.runOutsideAngular(() => window.addEventListener('blur', this._windowBlurHandler));\n        }\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        const window = this._getWindow();\n        if (typeof window !== 'undefined') {\n            window.removeEventListener('blur', this._windowBlurHandler);\n        }\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._attachOverlay();\n        this._floatLabel();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            this.autocomplete.closed.emit();\n        }\n        this.autocomplete._isOpen = this._overlayAttached = false;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ?\n            this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) :\n            of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return merge(fromEvent(this._document, 'click'), fromEvent(this._document, 'auxclick'), fromEvent(this._document, 'touchend'))\n            .pipe(filter(event => {\n            // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n            // fall back to check the first element in the path of the click event.\n            const clickTarget = (this._isInsideShadowRoot && event.composedPath ? event.composedPath()[0] :\n                event.target);\n            const formField = this._formField ? this._formField._elementRef.nativeElement : null;\n            const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n            return this._overlayAttached && clickTarget !== this._element.nativeElement &&\n                (!formField || !formField.contains(clickTarget)) &&\n                (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                (!!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget));\n        }));\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._setTriggerValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifierKey(event)) {\n            event.preventDefault();\n        }\n        if (this.activeOption && keyCode === ENTER && this.panelOpen) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (this.panelOpen || keyCode === TAB) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this.openPanel();\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._onChange(value);\n            if (this._canOpen() && this._document.activeElement === event.target) {\n                this.openPanel();\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay();\n            this._floatLabel(true);\n        }\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            this._formField.floatLabel = 'auto';\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const firstStable = this._zone.onStable.pipe(take(1));\n        const optionChanges = this.autocomplete.options.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0));\n        // When the zone is stable initially, and when the option list changes...\n        return merge(firstStable, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => {\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this.autocomplete._setVisibility();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened`\n                // event, because we may not have emitted it when the panel was attached. This\n                // can happen if the users opens the panel and there are no options, but the\n                // options come in slightly later or as a result of the value changing.\n                if (wasOpen !== this.panelOpen) {\n                    this.autocomplete.opened.emit();\n                }\n            }\n            return this.panelClosingActions;\n        }), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event));\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    _setTriggerValue(value) {\n        const toDisplay = this.autocomplete && this.autocomplete.displayWith ?\n            this.autocomplete.displayWith(value) :\n            value;\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        const inputValue = toDisplay != null ? toDisplay : '';\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = inputValue;\n        }\n        else {\n            this._element.nativeElement.value = inputValue;\n        }\n        this._previousValue = inputValue;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        if (event && event.source) {\n            this._clearPreviousSelectedOption(event.source);\n            this._setTriggerValue(event.source.value);\n            this._onChange(event.source.value);\n            this._element.nativeElement.focus();\n            this.autocomplete._emitSelectEvent(event.source);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip) {\n        this.autocomplete.options.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect();\n            }\n        });\n    }\n    _attachOverlay() {\n        var _a;\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        // We want to resolve this once, as late as possible so that we can be\n        // sure that the element has been moved into its final place in the DOM.\n        if (this._isInsideShadowRoot == null) {\n            this._isInsideShadowRoot = !!_getShadowRoot(this._element.nativeElement);\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, { id: (_a = this._formField) === null || _a === void 0 ? void 0 : _a.getLabelId() });\n            overlayRef = this._overlay.create(this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            // Use the `keydownEvents` in order to take advantage of\n            // the overlay event targeting provided by the CDK overlay.\n            overlayRef.keydownEvents().subscribe(event => {\n                // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n                // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n                if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n                    (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n                    this._resetActiveItem();\n                    this._closeKeyEventStream.next();\n                    // We need to stop propagation, otherwise the event will eventually\n                    // reach the input itself and cause the overlay to be reopened.\n                    event.stopPropagation();\n                    event.preventDefault();\n                }\n            });\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._setVisibility();\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this.autocomplete.opened.emit();\n        }\n    }\n    _getOverlayConfig() {\n        var _a;\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir,\n            panelClass: (_a = this._defaults) === null || _a === void 0 ? void 0 : _a.overlayPanelClass,\n        });\n    }\n    _getOverlayPosition() {\n        const strategy = this._overlay.position()\n            .flexibleConnectedTo(this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' }\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass }\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Resets the active item to -1 so arrow events will activate the\n     * correct options, or to 0 if the consumer opted into it.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Note that we go through `setFirstItemActive`, rather than `setActiveItem(0)`, because\n            // the former will find the next enabled option, if the first one is disabled.\n            autocomplete._keyManager.setFirstItemActive();\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this._autocompleteDisabled;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        var _a;\n        return ((_a = this._document) === null || _a === void 0 ? void 0 : _a.defaultView) || window;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n}\n_MatAutocompleteTriggerBase.ɵfac = function _MatAutocompleteTriggerBase_Factory(t) { return new (t || _MatAutocompleteTriggerBase)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.Overlay), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 9), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ViewportRuler), ɵngcc0.ɵɵdirectiveInject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, 8)); };\n_MatAutocompleteTriggerBase.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: _MatAutocompleteTriggerBase, inputs: { position: [\"matAutocompletePosition\", \"position\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\"], autocomplete: [\"matAutocomplete\", \"autocomplete\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"] }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });\n_MatAutocompleteTriggerBase.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Overlay },\n    { type: ViewContainerRef },\n    { type: NgZone },\n    { type: ChangeDetectorRef },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }, { type: Host }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: ViewportRuler },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS,] }] }\n];\n_MatAutocompleteTriggerBase.propDecorators = {\n    autocomplete: [{ type: Input, args: ['matAutocomplete',] }],\n    position: [{ type: Input, args: ['matAutocompletePosition',] }],\n    connectedTo: [{ type: Input, args: ['matAutocompleteConnectedTo',] }],\n    autocompleteAttribute: [{ type: Input, args: ['autocomplete',] }],\n    autocompleteDisabled: [{ type: Input, args: ['matAutocompleteDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatAutocompleteTriggerBase, [{\n        type: Directive\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc3.Overlay }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY]\n            }] }, { type: ɵngcc4.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc6.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }, {\n                type: Host\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc5.ViewportRuler }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_AUTOCOMPLETE_DEFAULT_OPTIONS]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matAutocompletePosition']\n        }], autocompleteAttribute: [{\n            type: Input,\n            args: ['autocomplete']\n        }], autocompleteDisabled: [{\n            type: Input,\n            args: ['matAutocompleteDisabled']\n        }], autocomplete: [{\n            type: Input,\n            args: ['matAutocomplete']\n        }], connectedTo: [{\n            type: Input,\n            args: ['matAutocompleteConnectedTo']\n        }] }); })();\nclass MatAutocompleteTrigger extends _MatAutocompleteTriggerBase {\n    constructor() {\n        super(...arguments);\n        this._aboveClass = 'mat-autocomplete-panel-above';\n    }\n}\nMatAutocompleteTrigger.ɵfac = function MatAutocompleteTrigger_Factory(t) { return ɵMatAutocompleteTrigger_BaseFactory(t || MatAutocompleteTrigger); };\nMatAutocompleteTrigger.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAutocompleteTrigger, selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]], hostAttrs: [1, \"mat-autocomplete-trigger\"], hostVars: 7, hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() { return ctx._handleFocus(); })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() { return ctx._onTouched(); })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) { return ctx._handleInput($event); })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) { return ctx._handleKeydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-owns\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", !ctx.autocompleteDisabled);\n    } }, exportAs: [\"matAutocompleteTrigger\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatAutocompleteTrigger_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatAutocompleteTrigger);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteTrigger, [{\n        type: Directive,\n        args: [{\n                selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                host: {\n                    'class': 'mat-autocomplete-trigger',\n                    '[attr.autocomplete]': 'autocompleteAttribute',\n                    '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                    '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                    '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                    '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                    '[attr.aria-owns]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                    '[attr.aria-haspopup]': '!autocompleteDisabled',\n                    // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                    // a little earlier. This avoids issues where IE delays the focusing of the input.\n                    '(focusin)': '_handleFocus()',\n                    '(blur)': '_onTouched()',\n                    '(input)': '_handleInput($event)',\n                    '(keydown)': '_handleKeydown($event)'\n                },\n                exportAs: 'matAutocompleteTrigger',\n                providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatAutocompleteModule {\n}\nMatAutocompleteModule.ɵfac = function MatAutocompleteModule_Factory(t) { return new (t || MatAutocompleteModule)(); };\nMatAutocompleteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatAutocompleteModule });\nMatAutocompleteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[\n            OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            CommonModule\n        ], CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatAutocompleteModule, { declarations: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin]; }, imports: function () { return [OverlayModule,\n        MatOptionModule,\n        MatCommonModule,\n        CommonModule]; }, exports: function () { return [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin, CdkScrollableModule,\n        MatOptionModule,\n        MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatAutocompleteModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    OverlayModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                    CommonModule\n                ],\n                exports: [\n                    MatAutocomplete,\n                    MatAutocompleteTrigger,\n                    MatAutocompleteOrigin,\n                    CdkScrollableModule,\n                    MatOptionModule,\n                    MatCommonModule,\n                ],\n                declarations: [MatAutocomplete, MatAutocompleteTrigger, MatAutocompleteOrigin],\n                providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AUTOCOMPLETE_OPTION_HEIGHT, AUTOCOMPLETE_PANEL_HEIGHT, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, _MatAutocompleteBase, _MatAutocompleteOriginBase, _MatAutocompleteTriggerBase, getMatAutocompleteMissingPanelError };\n\n//# sourceMappingURL=autocomplete.js.map"],"sourceRoot":"webpack:///"}