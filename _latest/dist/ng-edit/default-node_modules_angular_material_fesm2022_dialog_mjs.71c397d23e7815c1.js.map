{"version":3,"file":"default-node_modules_angular_material_fesm2022_dialog_mjs.71c397d23e7815c1.js","mappings":"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","names":["CdkDialogContainer_ng_template_0_Template","rf","ctx","DialogConfig","viewContainerRef","injector","id","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","minWidth","minHeight","maxWidth","maxHeight","positionStrategy","data","direction","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","scrollStrategy","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","componentFactoryResolver","providers","container","templateContext","CdkDialogContainer","BasePortalOutlet","_elementRef","inject","ElementRef","_focusTrapFactory","FocusTrapFactory","_config","_interactivityChecker","InteractivityChecker","_ngZone","NgZone","_overlayRef","OverlayRef","_focusMonitor","FocusMonitor","_platform","Platform","_document","DOCUMENT","optional","_portalOutlet","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_changeDetectorRef","ChangeDetectorRef","_injector","Injector","_isDestroyed","constructor","super","this","push","_addAriaLabelledBy","markForCheck","_removeAriaLabelledBy","index","indexOf","splice","_contentAttached","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","portal","hasAttached","result","attachTemplatePortal","attachDomPortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","afterNextRender","focusInitialElement","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","_getFocusedElementPierceShadowDom","body","contains","focusVia","destroy","isBrowser","create","backdropClick","subscribe","static","__ngFactoryType__","i0","type","selectors","viewQuery","CdkPortalOutlet","_t","first","hostAttrs","hostVars","hostBindings","features","decls","vars","consts","template","dependencies","styles","encapsulation","DialogRef","overlayRef","config","componentInstance","componentRef","containerInstance","closed","Subject","keydownEvents","outsidePointerEvents","_detachSubscription","event","keyCode","ESCAPE","hasModifierKey","preventDefault","close","undefined","focusOrigin","detachments","closedSubject","unsubscribe","dispose","next","complete","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","Overlay","scrollStrategies","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","Dialog","_overlay","_defaultOptions","_parentDialog","skipSelf","_overlayContainer","OverlayContainer","_idGenerator","_IdGenerator","_openDialogsAtThisLevel","_afterAllClosedAtThisLevel","_afterOpenedAtThisLevel","_ariaHiddenElements","Map","_scrollStrategy","openDialogs","afterOpened","afterAllClosed","defer","length","_getAfterAllClosed","pipe","startWith","open","componentOrTemplateRef","getId","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","OverlayConfig","position","global","centerHorizontally","centerVertically","disposeOnNavigation","userInjector","provide","useValue","containerType","containerPortal","ComponentPortal","parent","attach","instance","TemplateRef","_createInjector","context","$implicit","TemplatePortal","contentRef","fallbackInjector","get","Directionality","value","change","of","emitEvent","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","token","ɵfac","items","DialogModule","imports","OverlayModule","PortalModule","A11yModule","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","enterAnimationDuration","exitAnimationDuration","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","MatDialogContainer","_animationMode","ANIMATION_MODULE_TYPE","_animationStateChanged","EventEmitter","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","_exitAnimationDuration","_animationTimer","_startOpenAnimation","emit","totalTime","style","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","_finishDialogOpen","Promise","resolve","then","_startExitAnimation","remove","_finishDialogClose","_updateActionSectionCount","delta","_clearAnimationClasses","_openAnimationDone","duration","clearTimeout","setTimeout","requestAnimationFrame","ref","location","ɵMatDialogContainer_BaseFactory","time","endsWith","coerceNumberProperty","substring","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_result","_closeFallbackTimeout","_state","filter","take","merge","_closeDialogVia","dialogResult","detachBackdrop","afterClosed","beforeClosed","strategy","left","right","top","bottom","getState","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MatDialog","_dialog","dialogConfigClass","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","cdkConfig","_closeDialogs","dialogs","MatDialogClose","_matDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","_matDialogCloseResult","currentValue","_onButtonClick","screenX","screenY","$event","inputs","exportAs","MatDialogLayoutSection","_dialogRef","_onAdd","_onRemove","MatDialogContent","i1","MatDialogActions","align","ɵMatDialogActions_BaseFactory","MatDialogModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/dialog.mjs","./node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import { FocusTrapFactory, InteractivityChecker, FocusMonitor, _IdGenerator, A11yModule } from '@angular/cdk/a11y';\nimport { OverlayRef, Overlay, OverlayContainer, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ElementRef, NgZone, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, InjectionToken, TemplateRef, Injectable, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Optional CSS class or classes applied to the overlay panel. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Optional CSS class or classes applied to the overlay backdrop. */\n    backdropClass = '';\n    /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n    disableClose = false;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Strategy to use when positioning the dialog. Defaults to centering it on the page. */\n    positionStrategy;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Dialog label applied via `aria-label` */\n    ariaLabel = null;\n    /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n    ariaModal = true;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the previously-focused element upon closing.\n     * Has the following behavior based on the type that is passed in:\n     * - `boolean` - when true, will return focus to the element that was focused before the dialog\n     *    was opened, otherwise won't restore focus at all.\n     * - `string` - focus will be restored to the first element that matches the CSS selector.\n     * - `HTMLElement` - focus will be restored to the specific element.\n     */\n    restoreFocus = true;\n    /**\n     * Scroll strategy to be used for the dialog. This determines how\n     * the dialog responds to scrolling underneath the panel element.\n     */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user navigates backwards or forwards through browser\n     * history. This does not apply to navigation via anchor element unless using URL-hash based\n     * routing (`HashLocationStrategy` in the Angular router).\n     */\n    closeOnNavigation = true;\n    /**\n     * Whether the dialog should close when the dialog service is destroyed. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead.\n     */\n    closeOnDestroy = true;\n    /**\n     * Whether the dialog should close when the underlying overlay is detached. This is useful if\n     * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n     * external detachment can happen as a result of a scroll strategy triggering it or when the\n     * browser location changes.\n     */\n    closeOnOverlayDetachments = true;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @deprecated No longer used. Will be removed.\n     * @breaking-change 20.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * Providers that will be exposed to the contents of the dialog. Can also\n     * be provided as a function in order to generate the providers lazily.\n     */\n    providers;\n    /**\n     * Component into which the dialog content will be rendered. Defaults to `CdkDialogContainer`.\n     * A configuration object can be passed in to customize the providers that will be exposed\n     * to the dialog container.\n     */\n    container;\n    /**\n     * Context that will be passed to template-based dialogs.\n     * A function can be passed in to resolve the context lazily.\n     */\n    templateContext;\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    _elementRef = inject(ElementRef);\n    _focusTrapFactory = inject(FocusTrapFactory);\n    _config;\n    _interactivityChecker = inject(InteractivityChecker);\n    _ngZone = inject(NgZone);\n    _overlayRef = inject(OverlayRef);\n    _focusMonitor = inject(FocusMonitor);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT, { optional: true });\n    /** The portal outlet inside of this container into which the dialog content will be loaded. */\n    _portalOutlet;\n    /** The class that traps and manages focus within the dialog. */\n    _focusTrap = null;\n    /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n    _elementFocusedBeforeDialogWasOpened = null;\n    /**\n     * Type of interaction that led to the dialog being closed. This is used to determine\n     * whether the focus style will be applied when returning focus to its original location\n     * after the dialog is closed.\n     */\n    _closeInteractionType = null;\n    /**\n     * Queue of the IDs of the dialog's label element, based on their definition order. The first\n     * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n     * where there are two or more titles in the DOM at a time and the first one is destroyed while\n     * the rest are present.\n     */\n    _ariaLabelledByQueue = [];\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _injector = inject(Injector);\n    _isDestroyed = false;\n    constructor() {\n        super();\n        // Callback is primarily for some internal tests\n        // that were instantiating the dialog container manually.\n        this._config = (inject(DialogConfig, { optional: true }) || new DialogConfig());\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attaches a DOM portal to the dialog container.\n     * @param portal Portal to be attached.\n     * @deprecated To be turned into a method.\n     * @breaking-change 10.0.0\n     */\n    attachDomPortal = (portal) => {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachDomPortal(portal);\n        this._contentAttached();\n        return result;\n    };\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus();\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkDialogContainer, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    overlayRef;\n    config;\n    /**\n     * Instance of component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Instance of the container that is rendering out the dialog content. */\n    containerInstance;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Emits when the dialog has been closed. */\n    closed = new Subject();\n    /** Emits when the backdrop of the dialog is clicked. */\n    backdropClick;\n    /** Emits when on keyboard events within the dialog. */\n    keydownEvents;\n    /** Emits on pointer events that happen outside of the dialog. */\n    outsidePointerEvents;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subscription to external detachments of the dialog. */\n    _detachSubscription;\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\nclass Dialog {\n    _overlay = inject(Overlay);\n    _injector = inject(Injector);\n    _defaultOptions = inject(DEFAULT_DIALOG_CONFIG, { optional: true });\n    _parentDialog = inject(Dialog, { optional: true, skipSelf: true });\n    _overlayContainer = inject(OverlayContainer);\n    _idGenerator = inject(_IdGenerator);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    _ariaHiddenElements = new Map();\n    _scrollStrategy = inject(DIALOG_SCROLL_STRATEGY);\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() { }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || this._idGenerator.getId('cdk-dialog-');\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }));\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Dialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Dialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { inject, ANIMATION_MODULE_TYPE, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, InjectionToken, Injectable, ElementRef, Directive, Input, NgModule } from '@angular/core';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { _IdGenerator } from '@angular/cdk/a11y';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    /**\n     * Where the attached component should live in Angular's *logical* component tree.\n     * This affects what is available for injection and the change detection order for the\n     * component instantiated inside of the dialog. This does not affect where the dialog\n     * content will be rendered.\n     */\n    viewContainerRef;\n    /**\n     * Injector used for the instantiation of the component to be attached. If provided,\n     * takes precedence over the injector indirectly provided by `ViewContainerRef`.\n     */\n    injector;\n    /** ID for the dialog. If omitted, a unique one will be generated. */\n    id;\n    /** The ARIA role of the dialog element. */\n    role = 'dialog';\n    /** Custom class for the overlay pane. */\n    panelClass = '';\n    /** Whether the dialog has a backdrop. */\n    hasBackdrop = true;\n    /** Custom class for the backdrop. */\n    backdropClass = '';\n    /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n    disableClose = false;\n    /** Width of the dialog. */\n    width = '';\n    /** Height of the dialog. */\n    height = '';\n    /** Min-width of the dialog. If a number is provided, assumes pixel units. */\n    minWidth;\n    /** Min-height of the dialog. If a number is provided, assumes pixel units. */\n    minHeight;\n    /** Max-width of the dialog. If a number is provided, assumes pixel units. Defaults to 80vw. */\n    maxWidth;\n    /** Max-height of the dialog. If a number is provided, assumes pixel units. */\n    maxHeight;\n    /** Position overrides. */\n    position;\n    /** Data being injected into the child component. */\n    data = null;\n    /** Layout direction for the dialog's content. */\n    direction;\n    /** ID of the element that describes the dialog. */\n    ariaDescribedBy = null;\n    /** ID of the element that labels the dialog. */\n    ariaLabelledBy = null;\n    /** Aria label to assign to the dialog element. */\n    ariaLabel = null;\n    /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n    ariaModal = true;\n    /**\n     * Where the dialog should focus on open.\n     * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n     * AutoFocusTarget instead.\n     */\n    autoFocus = 'first-tabbable';\n    /**\n     * Whether the dialog should restore focus to the\n     * previously-focused element, after it's closed.\n     */\n    restoreFocus = true;\n    /** Whether to wait for the opening animation to finish before trapping focus. */\n    delayFocusTrap = true;\n    /** Scroll strategy to be used for the dialog. */\n    scrollStrategy;\n    /**\n     * Whether the dialog should close when the user goes backwards/forwards in history.\n     * Note that this usually doesn't include clicking on links (unless the user is using\n     * the `HashLocationStrategy`).\n     */\n    closeOnNavigation = true;\n    /**\n     * Alternate `ComponentFactoryResolver` to use when resolving the associated component.\n     * @deprecated No longer used. Will be removed.\n     * @breaking-change 20.0.0\n     */\n    componentFactoryResolver;\n    /**\n     * Duration of the enter animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    enterAnimationDuration;\n    /**\n     * Duration of the exit animation in ms.\n     * Should be a number, string type is deprecated.\n     * @breaking-change 17.0.0 Remove string signature.\n     */\n    exitAnimationDuration;\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    /** Emits when an animation state changes. */\n    _animationStateChanged = new EventEmitter();\n    /** Whether animations are enabled. */\n    _animationsEnabled = this._animationMode !== 'NoopAnimations';\n    /** Number of actions projected in the dialog. */\n    _actionSectionCount = 0;\n    /** Host element of the dialog container component. */\n    _hostElement = this._elementRef.nativeElement;\n    /** Duration of the dialog open animation. */\n    _enterAnimationDuration = this._animationsEnabled\n        ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n        : 0;\n    /** Duration of the dialog close animation. */\n    _exitAnimationDuration = this._animationsEnabled\n        ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n        : 0;\n    /** Current timer for dialog animations. */\n    _animationTimer = null;\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Completes the dialog open by clearing potential animation classes, trapping\n     * focus and emitting an opened event.\n     */\n    _finishDialogOpen = () => {\n        this._clearAnimationClasses();\n        this._openAnimationDone(this._enterAnimationDuration);\n    };\n    /**\n     * Completes the dialog close by clearing potential animation classes, restoring\n     * focus and emitting a closed event.\n     */\n    _finishDialogClose = () => {\n        this._clearAnimationClasses();\n        this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n    };\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogContainer, deps: null, target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 560px);min-width:var(--mat-dialog-container-min-width, 280px)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, calc(100vw - 32px))}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, none);border-radius:var(--mdc-dialog-container-shape, var(--mat-sys-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-sys-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 6px 24px 13px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-sys-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-sys-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-sys-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-sys-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-sys-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-sys-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-sys-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-sys-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-sys-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-sys-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-sys-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-sys-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px 0)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 16px 24px);justify-content:var(--mat-dialog-actions-alignment, flex-end)}@media(forced-colors: active){.mat-mdc-dialog-actions{border-top-color:CanvasText}}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    _ref;\n    _containerInstance;\n    /** The instance of component opened into the dialog. */\n    componentInstance;\n    /**\n     * `ComponentRef` of the component opened into the dialog. Will be\n     * null when the dialog is opened using a `TemplateRef`.\n     */\n    componentRef;\n    /** Whether the user is allowed to close the dialog. */\n    disableClose;\n    /** Unique ID for the dialog. */\n    id;\n    /** Subject for notifying the user that the dialog has finished opening. */\n    _afterOpened = new Subject();\n    /** Subject for notifying the user that the dialog has started closing. */\n    _beforeClosed = new Subject();\n    /** Result to be passed to afterClosed. */\n    _result;\n    /** Handle to the timeout that's running as a fallback in case the exit animation doesn't fire. */\n    _closeFallbackTimeout;\n    /** Current state of the dialog. */\n    _state = MatDialogState.OPEN;\n    // TODO(crisbeto): we shouldn't have to declare this property, because `DialogRef.close`\n    // already has a second `options` parameter that we can use. The problem is that internal tests\n    // have assertions like `expect(MatDialogRef.close).toHaveBeenCalledWith(foo)` which will break,\n    // because it'll be called with two arguments by things like `MatDialogClose`.\n    /** Interaction that caused the dialog to close. */\n    _closeInteractionType;\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    _overlay = inject(Overlay);\n    _defaultOptions = inject(MAT_DIALOG_DEFAULT_OPTIONS, { optional: true });\n    _scrollStrategy = inject(MAT_DIALOG_SCROLL_STRATEGY);\n    _parentDialog = inject(MatDialog, { optional: true, skipSelf: true });\n    _idGenerator = inject(_IdGenerator);\n    _dialog = inject(Dialog);\n    _openDialogsAtThisLevel = [];\n    _afterAllClosedAtThisLevel = new Subject();\n    _afterOpenedAtThisLevel = new Subject();\n    dialogConfigClass = MatDialogConfig;\n    _dialogRefConstructor;\n    _dialogContainerType;\n    _dialogDataToken;\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    /**\n     * Stream that emits when all open dialog have finished closing.\n     * Will emit on subscribe if there are no open dialogs to begin with.\n     */\n    afterAllClosed = defer(() => this.openDialogs.length\n        ? this._getAfterAllClosed()\n        : this._getAfterAllClosed().pipe(startWith(undefined)));\n    constructor() {\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || this._idGenerator.getId('mat-mdc-dialog-');\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialog, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialog, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Default to \"button\" to prevents accidental form submits. */\n    type = 'button';\n    /** Dialog close input. */\n    dialogResult;\n    _matDialogClose;\n    constructor() { }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogClose, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    _dialogRef = inject(MatDialogRef, { optional: true });\n    _elementRef = inject(ElementRef);\n    _dialog = inject(MatDialog);\n    constructor() { }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogLayoutSection, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    id = inject(_IdGenerator).getId('mat-mdc-dialog-title-');\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i1.CdkScrollable }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    /**\n     * Horizontal alignment of action buttons.\n     */\n    align;\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n"],"x_google_ignoreList":[0,1]}