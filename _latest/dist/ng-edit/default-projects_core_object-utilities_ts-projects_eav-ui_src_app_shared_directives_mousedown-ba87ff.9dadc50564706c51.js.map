{"version":3,"file":"default-projects_core_object-utilities_ts-projects_eav-ui_src_app_shared_directives_mousedown-ba87ff.9dadc50564706c51.js","mappings":"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","names":["convert","obj","fn","getWith","MousedownStopPropagationDirective","onMousedown","event","stopPropagation","selectors","hostBindings","rf","ctx","i0","$event","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","constructor","router","route","super","this","log","classLog","snapshot","url","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","end","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","filter","NavigationEnd","startWith","firstChild","map","pairwise","hadChildBefore","hasChildNow","i1","factory","ɵfac","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","_getEventTarget","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","part","trim","Set","PreviewRef","_preview","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_createPreview","supportsPopover","showPopover","destroy","remove","_previewEmbeddedView","setTransform","addClass","className","classList","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","removeEventListener","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","signal","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","scale","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_getShadowRoot","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","_element","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","itemPositions","lastItemRect","firstItemRect","floor","MixedSortStrategy","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","_activeItems","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","_rootNode","elementAtPoint","minDistance","Infinity","minIndex","hypot","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_scrollableElements","_startScrollInterval","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","takeUntil","_scrollNode","scrollStep","scrollBy","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_sortStrategy","_cacheParentPositions","_reset","previousItems","every","connectedTo","strategy","_container","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","activeApps","_ResetsLoader","__ngFactoryType__","ɵcmp","hostAttrs","standalone","features","decls","vars","encapsulation","changeDetection","DragDropRegistry","_appRef","inject","ApplicationRef","_environmentInjector","EnvironmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","update","instances","startsWith","e","options","config","_clearGlobalListeners","streams","Observable","observer","eventOptions","merge","ngOnDestroy","instance","componentRef","createComponent","environmentInjector","onDestroy","DOCUMENT","ɵprov","token","providedIn","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","_addHandle","_removeHandle","ɵdir","inputs","booleanAttribute","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","BehaviorSubject","EventEmitter","subscription","movedEvent","_injector","Injector","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","afterNextRender","_updateRootElement","_setupHandlesListener","freeDragPosition","injector","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","nativeElement","closest","_getBoundaryElement","boundary","ref","dir","templateRef","coerceNumberProperty","take","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","handleInstance","dragRef","i1$1","hostVars","numberAttribute","outputs","exportAs","CDK_DROP_LIST_GROUP","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","elementContainerSelector","querySelector","listAutoScrollDisabled","listOrientation","useValue"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/core/object-utilities.ts","./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n  standalone: true\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Injector, afterNextRender, numberAttribute, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = signal(false);\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging()) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging.set(true);\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            deltaX: 0,\n            deltaY: 0,\n            overlaps: false,\n        };\n        /**\n         * Keeps track of the relationship between a node and its next sibling. This information\n         * is used to restore the DOM to the order it was in before dragging started.\n         */\n        this._relatedNodes = [];\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Elements that can be scrolled while the user is dragging. */\n        this._scrollableElements = [];\n        /** Direction of the list's layout. */\n        this._direction = 'ltr';\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = signal([]);\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances().some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._injector = inject(Injector);\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"x_google_ignoreList":[3,4]}