{"version":3,"file":"projects_eav-ui_src_app_apps-management_site-languages_site-languages_component_ts.f7bc9e77d72be445.js","mappings":"8UAaO,IAAMA,EAA4B,MAAnC,MAAOA,EAKXC,OAAOC,GACLC,KAAKD,OAASA,EACdC,KAAKC,MAAQD,KAAKD,OAAOE,KAC3B,CAEAC,QAAQH,GACN,OAAO,CACT,CAEAI,eAAeC,GAEbJ,KAAKD,OAAOM,iBADmBL,KAAKD,OAAOO,KACJF,EAAMG,QAC/C,iDAjBWV,EAA4B,oCAA5BA,EAA4BW,UAAA,gCAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,yBAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAD,ICbzCE,MAAA,wBAAoCA,MAAA,kBAAAC,GAAA,OAAUF,EAAAX,eAAAa,EAAsB,GAAED,cAApDA,MAAA,UAAAD,EAAAb,sBDWJgB,KAAoBC,MAAAC,OAAA,sKAErBtB,CAA4B,4CEZvCkB,MAAA,WAEEA,MADA,sBACAA,CADgH,0BAElHA,8BAF6CA,QAAsBA,MAAtB,UAAAD,EAAsBC,CAAD,cAAAK,EAAAC,cCqB7D,IAAMC,EAAsB,MAA7B,MAAOA,EAGXC,GACAC,cAHAxB,KAAAqB,YAAcrB,MAAKyB,IAEnBzB,MAAAuB,KAAWG,KAAUC,KAKrB3B,MAAA4B,KAAuBC,OAAO,GAE9B7B,KAAA8B,aAAYC,OAAS,KACT/B,MAAK4B,IACR5B,MAAKuB,EAASS,iBAAYC,KAPjCC,MAAeC,gBAAgB,CAACC,KAClC,CAEAR,GAQAS,GAAgBC,EAAwBC,GACtCvC,MAAKuB,EAASpB,eAAemC,EAASE,KAAMD,GAAQE,UAAUC,IAC5D1C,MAAK4B,EAAqBe,IAAI3C,MAAK4B,IAAyB,EAAC,EAGjE,CAEAH,KA2CE,MA1CiC,IAC5BmB,IACHC,WAAY,CACV,IACKC,IAAkBC,sBACrBC,MAAO,OACPC,OAAQ,qBACRC,mBAC8C,CAC1CC,cAAgBb,GAA2B,OAAOA,EAASE,SAKjE,IACKM,IAAkBM,SACrBC,WAAY,OACZL,MAAO,UACPM,KAAM,MACNC,cAAgBxD,IACd,MAAMuC,EAAyBvC,EAAOO,KACtCN,MAAKqC,EAAgBC,GAAWA,EAASkB,UAAS,GAGtD,CACER,MAAO,SACPS,MAAO,GACPC,YAAa,QACbC,UAAW,wBAAwBC,MAAM,KACzCC,UAAU,EACVZ,OAAQa,IACRC,YAAcC,GAA8BA,EAAE1D,KAAKkD,UACnDS,aAAcpE,EACdqD,mBAC4C,CACxC7C,iBAAkBA,CAACiC,EAAUC,IAAWvC,MAAKqC,EAAgBC,EAAUC,MAQnF,iDAnEWjB,EAAsB,oCAAtBA,EAAsBd,UAAA,yBAAAC,MAAA,EAAAC,KAAA,EAAAC,OAAA,8GAAAC,SAAA,SAAAC,EAAAC,MAAA,EAAAD,GDvBnCE,MAAA,EAAAmD,EAAA,wBAAAnD,OAAAoD,EAAArD,EAAAgB,WAAAhB,IAAA,KAAAqD,mBCmBQC,KACAC,IAAanD,MAAAoD,cAAA,YAGRhD,CAAsB","names":["SiteLanguagesStatusComponent","agInit","params","this","value","refresh","toggleLanguage","event","onToggleLanguage","data","checked","selectors","decls","vars","consts","template","rf","ctx","i0","$event","MatSlideToggleModule","i1","styles","ctx_r0","gridOptions","SiteLanguagesComponent","#zoneSvc","constructor","#buildGridOptions","transient","ZoneService","#refreshLanguagesSig","signal","languages","computed","getLanguage","undefined","ModuleRegistry","registerModules","ClientSideRowModelModule","#toggleLanguage","language","enable","Code","subscribe","d","set","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","field","filter","cellRendererParams","tooltipGetter","TextWide","headerName","sort","onCellClicked","IsEnabled","width","headerClass","cellClass","split","sortable","BooleanFilterComponent","valueGetter","p","cellRenderer","SiteLanguagesComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","SxcGridModule","encapsulation"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n    selector: 'app-site-languages-status',\r\n    templateUrl: './site-languages-status.component.html',\r\n    styleUrls: ['./site-languages-status.component.scss'],\r\n    imports: [MatSlideToggleModule]\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private params: ICellRendererParams & SiteLanguagesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & SiteLanguagesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage(event: MatSlideToggleChange): void {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onToggleLanguage(language, event.checked);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage($event)\"></mat-slide-toggle>\r\n","@if (languages()(); as languages) {\r\n  <div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"languages\" [gridOptions]=\"gridOptions\"> </ag-grid-angular>\r\n    <mat-dialog-actions align=\"end\"></mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { GridOptions, ModuleRegistry } from '@ag-grid-community/core';\r\nimport { Component, computed, signal } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { transient } from '../../../../../core';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { SiteLanguagesStatusComponent } from './site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status/site-languages-status.models';\r\n\r\n@Component({\r\n    selector: 'app-site-languages',\r\n    templateUrl: './site-languages.component.html',\r\n    imports: [\r\n        MatDialogActions,\r\n        SxcGridModule,\r\n    ]\r\n})\r\nexport class SiteLanguagesComponent {\r\n  gridOptions = this.#buildGridOptions();\r\n\r\n  #zoneSvc = transient(ZoneService);\r\n  constructor() {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n  #refreshLanguagesSig = signal(0);\r\n\r\n  languages = computed(() => {\r\n    const r = this.#refreshLanguagesSig();\r\n    return this.#zoneSvc.getLanguage(undefined);\r\n  })\r\n\r\n\r\n  #toggleLanguage(language: SiteLanguage, enable: boolean): void {\r\n    this.#zoneSvc.toggleLanguage(language.Code, enable).subscribe(d => { // wait until the language change\r\n      this.#refreshLanguagesSig.set(this.#refreshLanguagesSig() + 1);\r\n    })\r\n\r\n  }\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          field: 'Code',\r\n          filter: 'agTextColumnFilter',\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguage> = {\r\n              tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Culture',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            this.#toggleLanguage(language, !language.IsEnabled);\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (p: { data: SiteLanguage }) => p.data.IsEnabled,\r\n          cellRenderer: SiteLanguagesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: SiteLanguagesStatusParams = {\r\n              onToggleLanguage: (language, enable) => this.#toggleLanguage(language, enable),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}