{"version":3,"mappings":"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","names":["MonacoEditorModule","CommonModule","voidElements","split","map","el","trim","toLocaleLowerCase","constructor","monaco","filename","value","container","options","snippets","this","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","forEach","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","insertSnippet","snippet","getContribution","insert","setSnippets","setJsonSchema","jsonSchema","uri","toString","jsonDiagnostics","Object","languages","json","jsonDefaults","diagnosticsOptions","enableSchemaRequest","exists","schemas","some","schema","fileMatch","e","newSchema","type","JSON","parse","filter","setDiagnosticsOptions","setJsonComments","comments","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","create","editorModelUri","Uri","file","editorModel","createModel","undefined","setModel","viewState","stringify","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getModeId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","trigger","length","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","includes","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","content","name","documentation","v","title","_a","p","help","_b","f","links","_c","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","t","onDidFocusEditorWidget","onDidBlurEditorWidget","MonacoEditorComponent","EventEmitter","ngAfterViewInit","window","require","config","paths","vs","createEditor","autoFocus","ngOnChanges","changes","monacoInstance","s","o","jsonComments","i","_d","ngOnDestroy","MonacoInstance","editorRef","nativeElement","valueChanged","emit","focused","blurred","selectors","i0","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ctx","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure","factory","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","http","prefix","suffix","getTranslation","lang","get","pipe","catchError","error","console","warn","of"],"sources":["./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-instance.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.html","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import { JsonComments, JsonSchema, Monaco2sxc, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: MonacoType;\r\n  private completionItemProviders: MonacoType[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: MonacoType,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: MonacoType,\r\n    private snippets: Snippet[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => {\r\n      completionItemProvider.dispose();\r\n    });\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance.getContribution('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      enableSchemaRequest: true,\r\n    };\r\n    const exists = jsonDiagnostics.schemas.some((schema: MonacoType) => schema.fileMatch[0] === uri);\r\n\r\n    if (jsonSchema?.value) {\r\n      const newSchema = jsonSchema.type === 'link'\r\n        ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n        : { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) };\r\n\r\n      jsonDiagnostics.schemas = exists\r\n        ? jsonDiagnostics.schemas.map((schema: MonacoType) => schema.fileMatch[0] === uri ? newSchema : schema)\r\n        : [...jsonDiagnostics.schemas, newSchema];\r\n    } else {\r\n      if (!exists) { return; }\r\n      jsonDiagnostics.schemas = jsonDiagnostics.schemas.filter((schema: MonacoType) => schema.fileMatch[0] !== uri);\r\n    }\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  setJsonComments(comments: JsonComments): void {\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      comments,\r\n    };\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: MonacoType): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: MonacoType): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n    });\r\n  }\r\n\r\n  private createInstance(monaco: MonacoType, filename: string, value: string, container: HTMLElement, options: MonacoType): MonacoType {\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    // editorInstance.updateOptions({ readOnly: true })\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.itextmodelupdateoptions.html\r\n    // editorInstance.getModel().updateOptions({ tabSize: 2 });\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: MonacoType, editorInstance: MonacoType): MonacoType[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const range = {\r\n            startLineNumber: position.lineNumber,\r\n            endLineNumber: position.lineNumber,\r\n            startColumn: word.startColumn,\r\n            endColumn: word.endColumn\r\n          };\r\n          // kind and rule copied from:\r\n          // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            return {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range,\r\n            };\r\n          }).filter(snippet => !!snippet);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      // monaco.languages.registerHoverProvider(editorInstance.getModel().getModeId(), {\r\n      //   provideHover: (model: MonacoType, position: MonacoType) => {\r\n      //     const word = model.getWordAtPosition(position);\r\n      //     if (!word) { return; }\r\n      //     // const range = {\r\n      //     //   startLineNumber: position.lineNumber,\r\n      //     //   endLineNumber: position.lineNumber,\r\n      //     //   startColumn: word.startColumn,\r\n      //     //   endColumn: word.endColumn,\r\n      //     // };\r\n      //     if (word.word.toLocaleLowerCase() === '2sxc') {\r\n      //       const contents = [\r\n      //         { value: '2sxc - Dynamic Content and Apps for DNN' },\r\n      //         { value: '[2sxc - Dynamic Content and Apps for DNN](https://2sxc.org)' },\r\n      //         { value: '**BOLD**  \\nLine2' },\r\n      //       ];\r\n      //       return { /*range,*/ contents };\r\n      //     }\r\n      //   }\r\n      // }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: MonacoType): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: MonacoType): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations((e: any) => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     (marker: any) => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { JsonComments, JsonSchema, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() options?: Record<string, any>;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() jsonComments?: JsonComments;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: MonacoType;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.jsonComments != null) {\r\n      this.monacoInstance?.setJsonComments(this.jsonComments);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n    );\r\n\r\n    if (this.jsonSchema) {\r\n      this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    }\r\n\r\n    if (this.jsonComments) {\r\n      this.monacoInstance.setJsonComments(this.jsonComments);\r\n    }\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_ng-dialogs_src_app_monaco-editor_index_ts-projects_ng-dialogs_src_app_shared-7048b1.f51d4be9b67d2f0c.js"}