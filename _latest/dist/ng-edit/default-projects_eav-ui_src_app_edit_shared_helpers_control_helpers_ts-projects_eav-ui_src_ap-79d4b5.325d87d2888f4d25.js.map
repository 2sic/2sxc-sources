{"version":3,"file":"default-projects_eav-ui_src_app_edit_shared_helpers_control_helpers_ts-projects_eav-ui_src_ap-79d4b5.325d87d2888f4d25.js","mappings":"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","names":["ControlHelpers","getFormChanges","oldValues","newValues","changes","key","Object","keys","newValue","this","controlValuesEqual","length","undefined","markControlTouched","control","touched","markAsTouched","updateValueAndValidity","patchControlValue","dirty","value","markAsDirty","patchValue","disableControl","disable","disabled","enable","x","y","isNaN","Array","isArray","RxHelpers","arraysEqual","webApiEntityRoot","webApiEntityList","EntityService","ServiceBase","constructor","http","dnnContext","super","EavLogger","queryService","transient","QueryService","getEntities$","params","pipe","filter","p","switchMap","getAvailableEntities","contentTypeName","shareReplay","entitiesFilter","log","rxTap","enabled","getEntities","contentTypes","itemIds","fields","map","data","Default","delete","appId","contentType","entityId","force","parentId","parentField","$2sxc","apiUrl","id","toString","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","selectors","standalone","features","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","inputs","None","HasDecoratorInputTransform","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/shared/helpers/control.helpers.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { RxHelpers } from '../../../shared/rxJs/rx.helpers';\r\nimport { AbstractControl } from '@angular/forms';\r\nimport { ItemValuesOfLanguage } from '../../state/item-values-of-language.model';\r\nimport { FieldValue } from '../../../../../../edit-types/src/FieldValue';\r\n\r\nexport class ControlHelpers {\r\n\r\n\r\n  /** Searches where newValues has values different from oldValues */\r\n  static getFormChanges(oldValues: ItemValuesOfLanguage, newValues: ItemValuesOfLanguage): ItemValuesOfLanguage {\r\n    const changes: ItemValuesOfLanguage = {};\r\n    for (const key of Object.keys(newValues)) {\r\n      const newValue = newValues[key];\r\n      const oldValue = oldValues[key];\r\n      if (this.controlValuesEqual(newValue, oldValue)) { continue; }\r\n\r\n      changes[key] = newValue;\r\n    }\r\n    return Object.keys(changes).length === 0 ? undefined : changes;\r\n  }\r\n\r\n  /** TODO: Try to remove this by assigning controls [formControlName] in [formGroup] */\r\n  static markControlTouched(control: AbstractControl): void {\r\n    if (control.touched) { return; }\r\n\r\n    control.markAsTouched();\r\n    control.updateValueAndValidity();\r\n  }\r\n\r\n\r\n  /** Use to update form controls value */\r\n  static patchControlValue(control: AbstractControl, newValue: FieldValue): void {\r\n    if (!control.touched) {\r\n      control.markAsTouched();\r\n    }\r\n    if (!control.dirty && !this.controlValuesEqual(control.value, newValue)) {\r\n      control.markAsDirty();\r\n    }\r\n    control.patchValue(newValue);\r\n  }\r\n\r\n\r\n  /** Disables/enables control if not already disabled/enabled. Use this helper to trigger fewer events on the form */\r\n  static disableControl(control: AbstractControl, disable: boolean) {\r\n    if (control.disabled === disable) return;\r\n\r\n    if (disable)\r\n      control.disable();\r\n    else\r\n      control.enable();\r\n  }\r\n\r\n  private static controlValuesEqual(x: FieldValue, y: FieldValue): boolean {\r\n    if (x === y) return true;\r\n    if (typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y)) return true;\r\n    if (Array.isArray(x) && Array.isArray(y) && RxHelpers.arraysEqual(x, y)) return true;\r\n    return false;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService extends ServiceBase {\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext)\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[2]}