{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_analyze-settings_analyze-settings_comp-6cd38e.0d87d57f3cb79a71.js","mappings":"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","names":["AnalyzeSettingsKeyComponent","_class","constructor","snackBar","this","agInit","params","key","value","refresh","copy","copyToClipboard","open","duration","i0","i1","selectors","decls","vars","consts","template","rf","ctx","ctx_r0","totalResults","_r3","ctx_r2","openDetails","ctx_r1","AnalyzeSettingsTotalResultsComponent","stackItem","data","AnalyzeSettingsTotalResultsComponent_div_0_Template","AnalyzeSettingsTotalResultsComponent_div_1_Template","view_r3","Guid","Name","_r5","ctx_r4","closeDialog","$event","ctx_r6","changeView","AnalyzeSettingsComponent_div_0_mat_option_17_Template","part","vm_r1","selectedView","undefined","views","stack","gridOptions","AnalyzeSettingsComponent","dialogRef","route","router","viewsService","analyzeSettingsService","buildGridOptions","snapshot","paramMap","get","ngOnInit","views$","BehaviorSubject","selectedView$","stack$","getViews","getStack","viewModel$","combineLatest","pipe","map","ngOnDestroy","complete","close","viewGuid","next","getAll","subscribe","defaultGridOptions","columnDefs","field","flex","minWidth","cellClass","split","sortable","filter","valueGetter","Path","cellRenderer","_value","AnalyzeSettingsValueComponent","Source","width","headerClass","TotalResults","cellRendererParams","navigate","relativeTo","i2","i3","i4","AnalyzeSettingsComponent_div_0_Template"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.component.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-key',\r\n  templateUrl: './analyze-settings-key.component.html',\r\n  styleUrls: ['./analyze-settings-key.component.scss'],\r\n})\r\nexport class AnalyzeSettingsKeyComponent implements ICellRendererAngularComp {\r\n  key: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.key = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.key);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"key-box highlight\" [tippy]=\"key\" (click)=\"copy()\">\r\n  <span class=\"key\">{{ key }}</span>\r\n</div>\r\n","<div class=\"input-component no-click\" *ngIf=\"totalResults <= 1\">\r\n  <div>{{ totalResults }}</div>\r\n  <div class=\"eav-grid-action-button disabled\">\r\n    <mat-icon>search</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<div matRipple class=\"input-component highlight\" tippy=\"Open details\" *ngIf=\"totalResults > 1\" (click)=\"openDetails()\">\r\n  <div class=\"text\">{{ totalResults }}</div>\r\n  <div class=\"eav-grid-action-button\">\r\n    <mat-icon>search</mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { SettingsStackItem } from '../analyze-settings.models';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-total-results',\r\n  templateUrl: './analyze-settings-total-results.component.html',\r\n  styleUrls: ['./analyze-settings-total-results.component.scss'],\r\n})\r\nexport class AnalyzeSettingsTotalResultsComponent implements ICellRendererAngularComp {\r\n  totalResults: number;\r\n\r\n  private stackItem: SettingsStackItem;\r\n  private params: ICellRendererParams & AnalyzeSettingsTotalResultsParams;\r\n\r\n  agInit(params: ICellRendererParams & AnalyzeSettingsTotalResultsParams): void {\r\n    this.totalResults = params.value;\r\n    this.params = params;\r\n    this.stackItem = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openDetails(): void {\r\n    this.params.openDetails(this.stackItem);\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\" *ngIf=\"viewModel$ | async as vm\">\r\n  <div mat-mdc-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Analyze {{ part }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    Settings and Resources are consolidated from many sources. Here you see what the resulting values would be.\r\n  </p>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <mat-form-field color=\"accent\" class=\"view-select-box\">\r\n    <mat-label>Merge settings / resources of a View</mat-label>\r\n    <mat-select [ngModel]=\"vm.selectedView\" (ngModelChange)=\"changeView($event)\">\r\n      <mat-option [value]=\"undefined\">No view selected - this is how APIs see the data</mat-option>\r\n      <mat-option *ngFor=\"let view of vm.views\" [value]=\"view.Guid\">{{ view.Name }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.stack\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n  </div>\r\n</div>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { defaultGridOptions } from '../../../shared/constants/default-grid-options.constants';\r\nimport { View } from '../../models';\r\nimport { ViewsService } from '../../services';\r\nimport { AnalyzeSettingsService } from '../../services/analyze-settings.service';\r\nimport { AnalyzeSettingsKeyComponent } from './analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from './analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsTotalResultsParams } from './analyze-settings-total-results/analyze-settings-total-results.models';\r\nimport { AnalyzeSettingsValueComponent } from './analyze-settings-value/analyze-settings-value.component';\r\nimport { AnalyzePart, AnalyzeSettingsViewModel, SettingsStackItem } from './analyze-settings.models';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings',\r\n  templateUrl: './analyze-settings.component.html',\r\n  styleUrls: ['./analyze-settings.component.scss'],\r\n})\r\nexport class AnalyzeSettingsComponent implements OnInit, OnDestroy {\r\n  part: AnalyzePart;\r\n  viewModel$: Observable<AnalyzeSettingsViewModel>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private views$: BehaviorSubject<View[]>;\r\n  private selectedView$: BehaviorSubject<string>;\r\n  private stack$: BehaviorSubject<SettingsStackItem[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AnalyzeSettingsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private viewsService: ViewsService,\r\n    private analyzeSettingsService: AnalyzeSettingsService,\r\n  ) {\r\n    this.part = this.route.snapshot.paramMap.get('part') as AnalyzePart;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.views$ = new BehaviorSubject<View[]>([]);\r\n    this.selectedView$ = new BehaviorSubject<string>(undefined);\r\n    this.stack$ = new BehaviorSubject<SettingsStackItem[]>([]);\r\n\r\n    this.getViews();\r\n    this.getStack();\r\n\r\n    this.viewModel$ = combineLatest([this.views$, this.selectedView$, this.stack$]).pipe(\r\n      map(([views, selectedView, stack]) => {\r\n        const viewModel: AnalyzeSettingsViewModel = {\r\n          views,\r\n          selectedView,\r\n          stack,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.views$.complete();\r\n    this.selectedView$.complete();\r\n    this.stack$.complete();\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeView(viewGuid: string): void {\r\n    this.selectedView$.next(viewGuid);\r\n    this.getStack();\r\n  }\r\n\r\n  private getViews(): void {\r\n    this.viewsService.getAll().subscribe(views => {\r\n      this.views$.next(views);\r\n    });\r\n  }\r\n\r\n  private getStack(): void {\r\n    this.analyzeSettingsService.getStack(this.part, undefined, this.selectedView$.value, true).subscribe(stack => {\r\n      this.stack$.next(stack);\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: 'Key',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.Path;\r\n          },\r\n          cellRenderer: AnalyzeSettingsKeyComponent,\r\n        },\r\n        {\r\n          field: 'Value',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item._value;\r\n          },\r\n          cellRenderer: AnalyzeSettingsValueComponent,\r\n        },\r\n        {\r\n          field: 'Source',\r\n          flex: 1,\r\n          minWidth: 150,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.Source;\r\n          },\r\n        },\r\n        {\r\n          field: 'Total',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: 'agNumberColumnFilter',\r\n          valueGetter: (params) => {\r\n            const item: SettingsStackItem = params.data;\r\n            return item.TotalResults;\r\n          },\r\n          cellRenderer: AnalyzeSettingsTotalResultsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: AnalyzeSettingsTotalResultsParams = {\r\n              openDetails: (stackItem) => {\r\n                this.router.navigate([`details/${this.selectedView$.value}/${stackItem.Path}`], { relativeTo: this.route });\r\n              },\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}