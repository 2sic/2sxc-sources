{"version":3,"file":"default-node_modules_angular_material_fesm2022_expansion_mjs.7f380c85ff6ebe59.js","mappings":"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","names":["nextId$1","CDK_ACCORDION","InjectionToken","CdkAccordion","constructor","this","_stateChanges","Subject","_openCloseAllActions","id","multi","openAll","next","closeAll","ngOnChanges","changes","ngOnDestroy","complete","ɵfac","__ngFactoryType__","ɵdir","i0","type","selectors","inputs","booleanAttribute","exportAs","standalone","features","provide","useExisting","nextId","CdkAccordionItem","expanded","_expanded","expandedChange","emit","opened","_expansionDispatcher","notify","accordion","closed","_changeDetectorRef","markForCheck","_openCloseAllSubscription","Subscription","EMPTY","EventEmitter","destroyed","disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","unsubscribe","toggle","close","open","subscribe","i1","outputs","useValue","undefined","CdkAccordionModule","ɵmod","ɵinj","_c0","_c1","_c2","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c3","_c4","MatExpansionPanelHeader_Conditional_4_Template","ctx_r0","_getExpandedState","MAT_ACCORDION","EXPANSION_PANEL_ANIMATION_TIMING","matExpansionAnimations","indicatorRotate","trigger","state","style","transform","transition","animate","bodyExpansion","height","visibility","MAT_EXPANSION_PANEL","MatExpansionPanelContent","_template","_expansionPanel","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","hideToggle","_hideToggle","value","togglePosition","_togglePosition","_uniqueSelectionDispatcher","_viewContainerRef","_document","_animationMode","defaultOptions","super","afterExpand","afterCollapse","_inputChanges","_headerId","_animationsDisabled","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","pipe","startWith","filter","_portal","take","TemplatePortal","_containsFocus","_body","focusedElement","activeElement","bodyElement","nativeElement","contains","_animationStarted","event","isInitialAnimation","setAttribute","_animationDone","toState","removeAttribute","DOCUMENT","ANIMATION_MODULE_TYPE","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","template","_r1","$event","dependencies","CdkPortalOutlet","styles","encapsulation","data","animation","changeDetection","fromState","MatExpansionPanelHeader","panel","_element","_focusMonitor","tabIndex","_parentChangeSubscription","accordionHideToggleChange","parseInt","merge","focusVia","expandedHeight","collapsedHeight","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_getHeaderHeight","isExpanded","_keydown","keyCode","SPACE","ENTER","hasModifierKey","preventDefault","_handleHeaderKeydown","focus","origin","options","ngAfterViewInit","monitor","_handleHeaderFocus","stopMonitoring","i2","numberAttribute","MatExpansionPanelDescription","MatExpansionPanelTitle","MatAccordion","arguments","_ownHeaders","QueryList","_headers","headers","reset","header","notifyOnChanges","_keyManager","FocusKeyManager","withWrap","withHomeAndEnd","onKeydown","updateActiveItem","destroy","ɵMatAccordion_BaseFactory","MatExpansionModule","imports","MatCommonModule","PortalModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/accordion.mjs","./node_modules/@angular/material/fesm2022/expansion.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, booleanAttribute, Directive, Input, EventEmitter, Optional, Inject, SkipSelf, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/collections';\nimport { Subject, Subscription } from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId$1 = 0;\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_ACCORDION = new InjectionToken('CdkAccordion');\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nclass CdkAccordion {\n    constructor() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = `cdk-accordion-${nextId$1++}`;\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        this.multi = false;\n    }\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    openAll() {\n        if (this.multi) {\n            this._openCloseAllActions.next(true);\n        }\n    }\n    /** Closes all enabled accordion items. */\n    closeAll() {\n        this._openCloseAllActions.next(false);\n    }\n    ngOnChanges(changes) {\n        this._stateChanges.next(changes);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n        this._openCloseAllActions.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordion, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkAccordion, isStandalone: true, selector: \"cdk-accordion, [cdkAccordion]\", inputs: { multi: [\"multi\", \"multi\", booleanAttribute] }, providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }], exportAs: [\"cdkAccordion\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion, [cdkAccordion]',\n                    exportAs: 'cdkAccordion',\n                    providers: [{ provide: CDK_ACCORDION, useExisting: CdkAccordion }],\n                    standalone: true,\n                }]\n        }], propDecorators: { multi: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n/**\n * A basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nclass CdkAccordionItem {\n    /** Whether the AccordionItem is expanded. */\n    get expanded() {\n        return this._expanded;\n    }\n    set expanded(expanded) {\n        // Only emit events and update the internal value if the value changes.\n        if (this._expanded !== expanded) {\n            this._expanded = expanded;\n            this.expandedChange.emit(expanded);\n            if (expanded) {\n                this.opened.emit();\n                /**\n                 * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                 * the name value is the id of the accordion.\n                 */\n                const accordionId = this.accordion ? this.accordion.id : this.id;\n                this._expansionDispatcher.notify(this.id, accordionId);\n            }\n            else {\n                this.closed.emit();\n            }\n            // Ensures that the animation will run when the value is set outside of an `@Input`.\n            // This includes cases like the open, close and toggle methods.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    constructor(accordion, _changeDetectorRef, _expansionDispatcher) {\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = `cdk-accordion-child-${nextId++}`;\n        this._expanded = false;\n        /** Whether the AccordionItem is disabled. */\n        this.disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = () => { };\n        this._removeUniqueSelectionListener = _expansionDispatcher.listen((id, accordionId) => {\n            if (this.accordion &&\n                !this.accordion.multi &&\n                this.accordion.id === accordionId &&\n                this.id !== id) {\n                this.expanded = false;\n            }\n        });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    /** Emits an event for the accordion item being destroyed. */\n    ngOnDestroy() {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    }\n    /** Toggles the expanded state of the accordion item. */\n    toggle() {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    }\n    /** Sets the expanded state of the accordion item to false. */\n    close() {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    }\n    /** Sets the expanded state of the accordion item to true. */\n    open() {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    }\n    _subscribeToOpenCloseAllActions() {\n        return this.accordion._openCloseAllActions.subscribe(expanded => {\n            // Only change expanded state if item is enabled\n            if (!this.disabled) {\n                this.expanded = expanded;\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionItem, deps: [{ token: CDK_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkAccordionItem, isStandalone: true, selector: \"cdk-accordion-item, [cdkAccordionItem]\", inputs: { expanded: [\"expanded\", \"expanded\", booleanAttribute], disabled: [\"disabled\", \"disabled\", booleanAttribute] }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, providers: [\n            // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n            // registering to the same accordion.\n            { provide: CDK_ACCORDION, useValue: undefined },\n        ], exportAs: [\"cdkAccordionItem\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionItem, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                    exportAs: 'cdkAccordionItem',\n                    providers: [\n                        // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n                        // registering to the same accordion.\n                        { provide: CDK_ACCORDION, useValue: undefined },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkAccordion, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_ACCORDION]\n                }, {\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }], propDecorators: { closed: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], destroyed: [{\n                type: Output\n            }], expandedChange: [{\n                type: Output\n            }], expanded: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\nclass CdkAccordionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionModule, imports: [CdkAccordion, CdkAccordionItem], exports: [CdkAccordion, CdkAccordionItem] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAccordionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAccordion, CdkAccordionItem],\n                    exports: [CdkAccordion, CdkAccordionItem],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_ACCORDION, CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Optional, EventEmitter, ANIMATION_MODULE_TYPE, booleanAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, SkipSelf, Input, Output, ContentChild, ViewChild, numberAttribute, Host, Attribute, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/cdk/a11y';\nimport { FocusKeyManager } from '@angular/cdk/a11y';\nimport { startWith, filter, take } from 'rxjs/operators';\nimport { ENTER, hasModifierKey, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i1 from '@angular/cdk/collections';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nconst MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nconst EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM. This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nconst matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        // Clear the `visibility` while open, otherwise the content will be visible when placed in\n        // a parent that's `visibility: hidden`, because `visibility` doesn't apply to descendants\n        // that have a `visibility` of their own (see #27436).\n        state('expanded', style({ height: '*', visibility: '' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n};\n\n/**\n * Token used to provide a `MatExpansionPanel` to `MatExpansionPanelContent`.\n * Used to avoid circular imports between `MatExpansionPanel` and `MatExpansionPanelContent`.\n */\nconst MAT_EXPANSION_PANEL = new InjectionToken('MAT_EXPANSION_PANEL');\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nclass MatExpansionPanelContent {\n    constructor(_template, _expansionPanel) {\n        this._template = _template;\n        this._expansionPanel = _expansionPanel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelContent, deps: [{ token: i0.TemplateRef }, { token: MAT_EXPANSION_PANEL, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatExpansionPanelContent, isStandalone: true, selector: \"ng-template[matExpansionPanelContent]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matExpansionPanelContent]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL]\n                }, {\n                    type: Optional\n                }] }] });\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n/**\n * Injection token that can be used to configure the default\n * options for the expansion panel component.\n */\nconst MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nclass MatExpansionPanel extends CdkAccordionItem {\n    /** Whether the toggle indicator should be hidden. */\n    get hideToggle() {\n        return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n    }\n    set hideToggle(value) {\n        this._hideToggle = value;\n    }\n    /** The position of the expansion indicator. */\n    get togglePosition() {\n        return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n    }\n    set togglePosition(value) {\n        this._togglePosition = value;\n    }\n    constructor(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n        this._viewContainerRef = _viewContainerRef;\n        this._animationMode = _animationMode;\n        this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        this._headerId = `mat-expansion-panel-header-${uniqueId++}`;\n        this.accordion = accordion;\n        this._document = _document;\n        this._animationsDisabled = _animationMode === 'NoopAnimations';\n        if (defaultOptions) {\n            this.hideToggle = defaultOptions.hideToggle;\n        }\n    }\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    _hasSpacing() {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    }\n    /** Gets the expanded state string. */\n    _getExpandedState() {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n    /** Toggles the expanded state of the expansion panel. */\n    toggle() {\n        this.expanded = !this.expanded;\n    }\n    /** Sets the expanded state of the expansion panel to false. */\n    close() {\n        this.expanded = false;\n    }\n    /** Sets the expanded state of the expansion panel to true. */\n    open() {\n        this.expanded = true;\n    }\n    ngAfterContentInit() {\n        if (this._lazyContent && this._lazyContent._expansionPanel === this) {\n            // Render the content as soon as the panel becomes open.\n            this.opened\n                .pipe(startWith(null), filter(() => this.expanded && !this._portal), take(1))\n                .subscribe(() => {\n                this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n            });\n        }\n    }\n    ngOnChanges(changes) {\n        this._inputChanges.next(changes);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._inputChanges.complete();\n    }\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    _containsFocus() {\n        if (this._body) {\n            const focusedElement = this._document.activeElement;\n            const bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    }\n    /** Called when the expansion animation has started. */\n    _animationStarted(event) {\n        if (!isInitialAnimation(event) && !this._animationsDisabled && this._body) {\n            // Prevent the user from tabbing into the content while it's animating.\n            // TODO(crisbeto): maybe use `inert` to prevent focus from entering while closed as well\n            // instead of `visibility`? Will allow us to clean up some code but needs more testing.\n            this._body?.nativeElement.setAttribute('inert', '');\n        }\n    }\n    /** Called when the expansion animation has finished. */\n    _animationDone(event) {\n        if (!isInitialAnimation(event)) {\n            if (event.toState === 'expanded') {\n                this.afterExpand.emit();\n            }\n            else if (event.toState === 'collapsed') {\n                this.afterCollapse.emit();\n            }\n            // Re-enable tabbing once the animation is finished.\n            if (!this._animationsDisabled && this._body) {\n                this._body.nativeElement.removeAttribute('inert');\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanel, deps: [{ token: MAT_ACCORDION, optional: true, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i1.UniqueSelectionDispatcher }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatExpansionPanel, isStandalone: true, selector: \"mat-expansion-panel\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], togglePosition: \"togglePosition\" }, outputs: { afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, host: { properties: { \"class.mat-expanded\": \"expanded\", \"class._mat-animation-noopable\": \"_animationsDisabled\", \"class.mat-expansion-panel-spacing\": \"_hasSpacing()\" }, classAttribute: \"mat-expansion-panel\" }, providers: [\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: undefined },\n            { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n        ], queries: [{ propertyName: \"_lazyContent\", first: true, predicate: MatExpansionPanelContent, descendants: true }], viewQueries: [{ propertyName: \"_body\", first: true, predicate: [\"body\"], descendants: true }], exportAs: [\"matExpansionPanel\"], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.start)=\\\"_animationStarted($event)\\\"\\n     (@bodyExpansion.done)=\\\"_animationDone($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color, var(--mat-app-surface));color:var(--mat-expansion-container-text-color, var(--mat-app-on-surface));border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font, var(--mat-app-body-large-font));font-size:var(--mat-expansion-container-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-expansion-container-text-weight, var(--mat-app-body-large-weight));line-height:var(--mat-expansion-container-text-line-height, var(--mat-app-body-large-line-height));letter-spacing:var(--mat-expansion-container-text-tracking, var(--mat-app-body-large-tracking))}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color, var(--mat-app-outline))}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], animations: [matExpansionAnimations.bodyExpansion], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanel, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel', exportAs: 'matExpansionPanel', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.bodyExpansion], providers: [\n                        // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                        // to the same accordion.\n                        { provide: MAT_ACCORDION, useValue: undefined },\n                        { provide: MAT_EXPANSION_PANEL, useExisting: MatExpansionPanel },\n                    ], host: {\n                        'class': 'mat-expansion-panel',\n                        '[class.mat-expanded]': 'expanded',\n                        '[class._mat-animation-noopable]': '_animationsDisabled',\n                        '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n                    }, standalone: true, imports: [CdkPortalOutlet], template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.start)=\\\"_animationStarted($event)\\\"\\n     (@bodyExpansion.done)=\\\"_animationDone($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\", styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);position:relative;background:var(--mat-expansion-container-background-color, var(--mat-app-surface));color:var(--mat-expansion-container-text-color, var(--mat-app-on-surface));border-radius:var(--mat-expansion-container-shape)}.mat-expansion-panel:not([class*=mat-elevation-z]){box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:var(--mat-expansion-container-shape);border-top-left-radius:var(--mat-expansion-container-shape)}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:var(--mat-expansion-container-shape);border-bottom-left-radius:var(--mat-expansion-container-shape)}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible;font-family:var(--mat-expansion-container-text-font, var(--mat-app-body-large-font));font-size:var(--mat-expansion-container-text-size, var(--mat-app-body-large-size));font-weight:var(--mat-expansion-container-text-weight, var(--mat-app-body-large-weight));line-height:var(--mat-expansion-container-text-line-height, var(--mat-app-body-large-line-height));letter-spacing:var(--mat-expansion-container-text-tracking, var(--mat-app-body-large-tracking))}.mat-expansion-panel-content[style*=\\\"visibility: hidden\\\"] *{visibility:hidden !important}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px;border-top-color:var(--mat-expansion-actions-divider-color, var(--mat-app-outline))}.mat-action-row .mat-button-base,.mat-action-row .mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-action-row .mat-button-base,[dir=rtl] .mat-action-row .mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [MAT_ACCORDION]\n                }] }, { type: i0.ChangeDetectorRef }, { type: i1.UniqueSelectionDispatcher }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], togglePosition: [{\n                type: Input\n            }], afterExpand: [{\n                type: Output\n            }], afterCollapse: [{\n                type: Output\n            }], _lazyContent: [{\n                type: ContentChild,\n                args: [MatExpansionPanelContent]\n            }], _body: [{\n                type: ViewChild,\n                args: ['body']\n            }] } });\n/** Checks whether an animation is the initial setup animation. */\nfunction isInitialAnimation(event) {\n    return event.fromState === 'void';\n}\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelActionRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelActionRow, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatExpansionPanelActionRow, isStandalone: true, selector: \"mat-action-row\", host: { classAttribute: \"mat-action-row\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelActionRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-action-row',\n                    host: {\n                        class: 'mat-action-row',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\nclass MatExpansionPanelHeader {\n    constructor(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions, _animationMode, tabIndex) {\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._animationMode = _animationMode;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /** Tab index of the header. */\n        this.tabIndex = 0;\n        const accordionHideToggleChange = panel.accordion\n            ? panel.accordion._stateChanges.pipe(filter(changes => !!(changes['hideToggle'] || changes['togglePosition'])))\n            : EMPTY;\n        this.tabIndex = parseInt(tabIndex || '') || 0;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription = merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(changes => {\n            return !!(changes['hideToggle'] || changes['disabled'] || changes['togglePosition']);\n        }))).subscribe(() => this._changeDetectorRef.markForCheck());\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(() => panel._containsFocus()))\n            .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    /**\n     * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n     * @docs-private\n     */\n    get disabled() {\n        return this.panel.disabled;\n    }\n    /** Toggles the expanded state of the panel. */\n    _toggle() {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    }\n    /** Gets whether the panel is expanded. */\n    _isExpanded() {\n        return this.panel.expanded;\n    }\n    /** Gets the expanded state string of the panel. */\n    _getExpandedState() {\n        return this.panel._getExpandedState();\n    }\n    /** Gets the panel id. */\n    _getPanelId() {\n        return this.panel.id;\n    }\n    /** Gets the toggle position for the header. */\n    _getTogglePosition() {\n        return this.panel.togglePosition;\n    }\n    /** Gets whether the expand indicator should be shown. */\n    _showToggle() {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    }\n    /**\n     * Gets the current height of the header. Null if no custom height has been\n     * specified, and if the default height from the stylesheet should be used.\n     */\n    _getHeaderHeight() {\n        const isExpanded = this._isExpanded();\n        if (isExpanded && this.expandedHeight) {\n            return this.expandedHeight;\n        }\n        else if (!isExpanded && this.collapsedHeight) {\n            return this.collapsedHeight;\n        }\n        return null;\n    }\n    /** Handle keydown event calling to toggle() if appropriate. */\n    _keydown(event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    }\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._element).subscribe(origin => {\n            if (origin && this.panel.accordion) {\n                this.panel.accordion._handleHeaderFocus(this);\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelHeader, deps: [{ token: MatExpansionPanel, host: true }, { token: i0.ElementRef }, { token: i2.FocusMonitor }, { token: i0.ChangeDetectorRef }, { token: MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatExpansionPanelHeader, isStandalone: true, selector: \"mat-expansion-panel-header\", inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\", tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, host: { attributes: { \"role\": \"button\" }, listeners: { \"click\": \"_toggle()\", \"keydown\": \"_keydown($event)\" }, properties: { \"attr.id\": \"panel._headerId\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"_getPanelId()\", \"attr.aria-expanded\": \"_isExpanded()\", \"attr.aria-disabled\": \"panel.disabled\", \"class.mat-expanded\": \"_isExpanded()\", \"class.mat-expansion-toggle-indicator-after\": \"_getTogglePosition() === 'after'\", \"class.mat-expansion-toggle-indicator-before\": \"_getTogglePosition() === 'before'\", \"class._mat-animation-noopable\": \"_animationMode === \\\"NoopAnimations\\\"\", \"style.height\": \"_getHeaderHeight()\" }, classAttribute: \"mat-expansion-panel-header mat-focus-indicator\" }, ngImport: i0, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\">\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 -960 960 960\\\"\\n      aria-hidden=\\\"true\\\"\\n      focusable=\\\"false\\\">\\n      <path d=\\\"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\\\"/>\\n    </svg>\\n  </span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font, var(--mat-app-title-medium-font));font-size:var(--mat-expansion-header-text-size, var(--mat-app-title-medium-size));font-weight:var(--mat-expansion-header-text-weight, var(--mat-app-title-medium-weight));line-height:var(--mat-expansion-header-text-line-height, var(--mat-app-title-medium-line-height));letter-spacing:var(--mat-expansion-header-text-tracking, var(--mat-app-title-medium-tracking))}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color, var(--mat-app-surface))}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color, var(--mat-app-on-surface))}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color, var(--mat-app-on-surface-variant))}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color, var(--mat-app-on-surface-variant));display:var(--mat-expansion-legacy-header-indicator-display, inline-block)}.mat-expansion-indicator svg{width:24px;height:24px;margin:0 -8px;vertical-align:middle;fill:var(--mat-expansion-header-indicator-color, var(--mat-app-on-surface-variant));display:var(--mat-expansion-header-indicator-display, none)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"], animations: [matExpansionAnimations.indicatorRotate], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelHeader, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-expansion-panel-header', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, animations: [matExpansionAnimations.indicatorRotate], host: {\n                        'class': 'mat-expansion-panel-header mat-focus-indicator',\n                        'role': 'button',\n                        '[attr.id]': 'panel._headerId',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': '_getPanelId()',\n                        '[attr.aria-expanded]': '_isExpanded()',\n                        '[attr.aria-disabled]': 'panel.disabled',\n                        '[class.mat-expanded]': '_isExpanded()',\n                        '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n                        '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n                        '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                        '[style.height]': '_getHeaderHeight()',\n                        '(click)': '_toggle()',\n                        '(keydown)': '_keydown($event)',\n                    }, standalone: true, template: \"<span class=\\\"mat-content\\\" [class.mat-content-hide-toggle]=\\\"!_showToggle()\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n\\n@if (_showToggle()) {\\n  <span [@indicatorRotate]=\\\"_getExpandedState()\\\" class=\\\"mat-expansion-indicator\\\">\\n    <svg\\n      xmlns=\\\"http://www.w3.org/2000/svg\\\"\\n      viewBox=\\\"0 -960 960 960\\\"\\n      aria-hidden=\\\"true\\\"\\n      focusable=\\\"false\\\">\\n      <path d=\\\"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\\\"/>\\n    </svg>\\n  </span>\\n}\\n\", styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit;transition:height 225ms cubic-bezier(0.4, 0, 0.2, 1);height:var(--mat-expansion-header-collapsed-state-height);font-family:var(--mat-expansion-header-text-font, var(--mat-app-title-medium-font));font-size:var(--mat-expansion-header-text-size, var(--mat-app-title-medium-size));font-weight:var(--mat-expansion-header-text-weight, var(--mat-app-title-medium-weight));line-height:var(--mat-expansion-header-text-line-height, var(--mat-app-title-medium-line-height));letter-spacing:var(--mat-expansion-header-text-tracking, var(--mat-app-title-medium-tracking))}.mat-expansion-panel-header.mat-expanded{height:var(--mat-expansion-header-expanded-state-height)}.mat-expansion-panel-header[aria-disabled=true]{color:var(--mat-expansion-header-disabled-state-text-color)}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-header-hover-state-layer-color)}@media(hover: none){.mat-expansion-panel:not(.mat-expanded) .mat-expansion-panel-header:not([aria-disabled=true]):hover{background:var(--mat-expansion-container-background-color, var(--mat-app-surface))}}.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-keyboard-focused,.mat-expansion-panel .mat-expansion-panel-header:not([aria-disabled=true]).cdk-program-focused{background:var(--mat-expansion-header-focus-state-layer-color)}.mat-expansion-panel-header._mat-animation-noopable{transition:none}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-content.mat-content-hide-toggle{margin-right:8px}[dir=rtl] .mat-content.mat-content-hide-toggle{margin-right:0;margin-left:8px}.mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-left:24px;margin-right:0}[dir=rtl] .mat-expansion-toggle-indicator-before .mat-content.mat-content-hide-toggle{margin-right:24px;margin-left:0}.mat-expansion-panel-header-title{color:var(--mat-expansion-header-text-color, var(--mat-app-on-surface))}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;flex-basis:0;margin-right:16px;align-items:center}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-title,.mat-expansion-panel-header[aria-disabled=true] .mat-expansion-panel-header-description{color:inherit}.mat-expansion-panel-header-description{flex-grow:2;color:var(--mat-expansion-header-description-color, var(--mat-app-on-surface-variant))}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle;color:var(--mat-expansion-header-indicator-color, var(--mat-app-on-surface-variant));display:var(--mat-expansion-legacy-header-indicator-display, inline-block)}.mat-expansion-indicator svg{width:24px;height:24px;margin:0 -8px;vertical-align:middle;fill:var(--mat-expansion-header-indicator-color, var(--mat-app-on-surface-variant));display:var(--mat-expansion-header-indicator-display, none)}.cdk-high-contrast-active .mat-expansion-panel-content{border-top:1px solid;border-top-left-radius:0;border-top-right-radius:0}\"] }]\n        }], ctorParameters: () => [{ type: MatExpansionPanel, decorators: [{\n                    type: Host\n                }] }, { type: i0.ElementRef }, { type: i2.FocusMonitor }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n                }, {\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { expandedHeight: [{\n                type: Input\n            }], collapsedHeight: [{\n                type: Input\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelDescription {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelDescription, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatExpansionPanelDescription, isStandalone: true, selector: \"mat-panel-description\", host: { classAttribute: \"mat-expansion-panel-header-description\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelDescription, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-description',\n                    host: {\n                        class: 'mat-expansion-panel-header-description',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\nclass MatExpansionPanelTitle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelTitle, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatExpansionPanelTitle, isStandalone: true, selector: \"mat-panel-title\", host: { classAttribute: \"mat-expansion-panel-header-title\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionPanelTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-panel-title',\n                    host: {\n                        class: 'mat-expansion-panel-header-title',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Directive for a Material Design Accordion.\n */\nclass MatAccordion extends CdkAccordion {\n    constructor() {\n        super(...arguments);\n        /** Headers belonging to this accordion. */\n        this._ownHeaders = new QueryList();\n        /** Whether the expansion indicator should be hidden. */\n        this.hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        this.togglePosition = 'after';\n    }\n    ngAfterContentInit() {\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe((headers) => {\n            this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n            this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n    }\n    /** Handles keyboard events coming in from the panel headers. */\n    _handleHeaderKeydown(event) {\n        this._keyManager.onKeydown(event);\n    }\n    _handleHeaderFocus(header) {\n        this._keyManager.updateActiveItem(header);\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        this._keyManager?.destroy();\n        this._ownHeaders.destroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAccordion, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatAccordion, isStandalone: true, selector: \"mat-accordion\", inputs: { hideToggle: [\"hideToggle\", \"hideToggle\", booleanAttribute], displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, host: { properties: { \"class.mat-accordion-multi\": \"this.multi\" }, classAttribute: \"mat-accordion\" }, providers: [\n            {\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion,\n            },\n        ], queries: [{ propertyName: \"_headers\", predicate: MatExpansionPanelHeader, descendants: true }], exportAs: [\"matAccordion\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatAccordion, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-accordion',\n                    exportAs: 'matAccordion',\n                    providers: [\n                        {\n                            provide: MAT_ACCORDION,\n                            useExisting: MatAccordion,\n                        },\n                    ],\n                    host: {\n                        class: 'mat-accordion',\n                        // Class binding which is only used by the test harness as there is no other\n                        // way for the harness to detect if multiple panel support is enabled.\n                        '[class.mat-accordion-multi]': 'this.multi',\n                    },\n                    standalone: true,\n                }]\n        }], propDecorators: { _headers: [{\n                type: ContentChildren,\n                args: [MatExpansionPanelHeader, { descendants: true }]\n            }], hideToggle: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], displayMode: [{\n                type: Input\n            }], togglePosition: [{\n                type: Input\n            }] } });\n\nclass MatExpansionModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule,\n            MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent], exports: [MatAccordion,\n            MatExpansionPanel,\n            MatExpansionPanelActionRow,\n            MatExpansionPanelHeader,\n            MatExpansionPanelTitle,\n            MatExpansionPanelDescription,\n            MatExpansionPanelContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionModule, imports: [MatCommonModule,\n            CdkAccordionModule,\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatExpansionModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        CdkAccordionModule,\n                        PortalModule,\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                    exports: [\n                        MatAccordion,\n                        MatExpansionPanel,\n                        MatExpansionPanelActionRow,\n                        MatExpansionPanelHeader,\n                        MatExpansionPanelTitle,\n                        MatExpansionPanelDescription,\n                        MatExpansionPanelContent,\n                    ],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations };\n"],"x_google_ignoreList":[0,1]}