{"version":3,"sources":["./src/app/manage-content-list/manage-content-list.component.ts","./src/app/manage-content-list/manage-content-list.component.html"],"names":["dialogRef","contentGroupService","route","router","snackBar","hostClass","subscription","this","hasChild","snapshot","firstChild","contentGroup","id","guid","paramMap","get","part","index","parseInt","ngOnInit","fetchList","fetchHeader","refreshOnChildClosed","ngOnDestroy","unsubscribe","saveList","open","items","subscribe","res","closeDialog","editHeader","form","Group","Guid","Index","Part","Add","header","Id","formUrl","navigate","relativeTo","editItem","EntityId","drop","event","previousIndex","currentIndex","close","getList","getHeader","add","events","pipe","hadChild","ManageContentListComponent"],"mappings":"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","file":"manage-content-list-component.e2fef319a4d30bd4c8cf.js","sourcesContent":["import { Component, OnInit, OnDestroy, HostBinding } from '@angular/core';\r\nimport { ActivatedRoute, Router, NavigationEnd } from '@angular/router';\r\nimport { CdkDragDrop, moveItemInArray } from '@angular/cdk/drag-drop';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\n\r\nimport { ContentGroupService } from './services/content-group.service';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss']\r\n})\r\nexport class ManageContentListComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  items: GroupHeader[];\r\n  header: GroupHeader;\r\n\r\n  private contentGroup: ContentGroup;\r\n  private subscription = new Subscription();\r\n  private hasChild: boolean;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ManageContentListComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.hasChild = !!this.route.snapshot.firstChild;\r\n    this.contentGroup = {\r\n      id: null,\r\n      guid: this.route.snapshot.paramMap.get('guid'),\r\n      part: this.route.snapshot.paramMap.get('part'),\r\n      index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n    };\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchList();\r\n    this.fetchHeader();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items).subscribe(res => {\r\n      this.snackBar.open('Saved');\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listcontent',\r\n            Add: this.header.Id === 0,\r\n          },\r\n        },\r\n        {\r\n          Group: {\r\n            Guid: this.contentGroup.guid,\r\n            Index: 0,\r\n            Part: 'listpresentation',\r\n            Add: this.header.Id === 0,\r\n          },\r\n        },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<any[]>) {\r\n    moveItemInArray(this.items, event.previousIndex, event.currentIndex);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchList() {\r\n    this.contentGroupService.getList(this.contentGroup).subscribe(res => {\r\n      this.items = res;\r\n    });\r\n  }\r\n\r\n  private fetchHeader() {\r\n    this.contentGroupService.getHeader(this.contentGroup).subscribe(res => {\r\n      this.header = res;\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(filter(event => event instanceof NavigationEnd)).subscribe((event: NavigationEnd) => {\r\n        const hadChild = this.hasChild;\r\n        this.hasChild = !!this.route.snapshot.firstChild;\r\n        if (!this.hasChild && hadChild) {\r\n          this.fetchList();\r\n          this.fetchHeader();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Manage content-item lists</div>\r\n</div>\r\n\r\n<router-outlet></router-outlet>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\">\r\n  <ng-container *ngIf=\"header\">\r\n    <p class=\"dialog-description\">\r\n      You can manage the list header here (if it is defined):\r\n    </p>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"header.Type\">\r\n        <span>{{ header.Title }}</span>\r\n        <button mat-icon-button matTooltip=\"Edit header\" (click)=\"editHeader()\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"!header.Type\">(this list has no header)</ng-container>\r\n    </p>\r\n  </ng-container>\r\n\r\n  <p class=\"dialog-description sort-title\">Sort the items by dragging as you need, then save:</p>\r\n\r\n  <div class=\"dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n    <div *ngFor=\"let item of items\" class=\"dnd-item\" cdkDrag>\r\n      <div class=\"dnd-item__title\">\r\n        <mat-icon class=\"dnd-item__title-icon\" matTooltip=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n        <span class=\"dnd-item__title-text\">{{ item.Title }} ({{ item.Id }})</span>\r\n      </div>\r\n      <div *ngIf=\"item.Id !== 0\">\r\n        <button mat-icon-button matTooltip=\"Edit item\" appMousedownStopPropagation (click)=\"editItem(item.Id)\">\r\n          <mat-icon>edit</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dialog-component-actions\">\r\n  <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n  <button mat-raised-button color=\"accent\" (click)=\"saveList()\">Save</button>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}