{"version":3,"mappings":"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","names":["nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","super","this","_color","_overlap","position","size","_id","_isInitialized","color","value","_setColor","overlap","val","coerceBooleanProperty","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","nativeElement","badgeElement","createElement","activeClass","setAttribute","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","i0","i1","ANIMATION_MODULE_TYPE","ɵdir","selectors","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule","e","_handleKeydown","n","closed","_onAnimationStart","_onAnimationDone","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","MAT_MENU_CONTENT","InjectionToken","_MatMenuContentBase","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_document","_changeDetectorRef","_attached","Subject","attach","context","_a","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","element","elementRef","parentNode","insertBefore","outletElement","markForCheck","next","isAttached","dispose","DOCUMENT","MatMenuContent","t","provide","useExisting","MAT_MENU_PANEL","_MatMenuItemBase","mixinDisableRipple","MatMenuItem","_focusMonitor","_parentMenu","role","_hovered","_focused","_highlighted","_triggersSubmenu","addItem","call","focus","origin","options","focusVia","_getHostElement","ngAfterViewInit","monitor","stopMonitoring","removeItem","complete","_getTabIndex","disabled","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","i","length","_setHighlighted","isHighlighted","_hasFocus","activeElement","ɵcmp","attrs","directives","i2","i3","encapsulation","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","overlapTrigger","xPosition","yPosition","backdropClass","menuPanelUid","_MatMenuBase","_defaultOptions","_xPosition","_yPosition","_directDescendantItems","QueryList","_tabSubscription","Subscription","_classList","_panelAnimationState","_animationDone","overlayPanelClass","_overlapTrigger","_hasBackdrop","hasBackdrop","EventEmitter","close","panelId","setPositionClasses","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","emit","changes","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","unsubscribe","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","lazyContent","onStable","take","_focusFirstItem","setFirstItemActive","first","parentElement","getAttribute","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","filter","notifyOnChanges","contentQueries","o","TemplateRef","MatMenu","ngZone","defaultOptions","changeDetectorRef","ngContentSelectors","styles","changeDetection","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","overlay","scrollStrategies","reposition","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_MatMenuTriggerBase","_overlay","_element","scrollStrategy","_menuItemInstance","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","_hoverSubscription","_menuCloseSubscription","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","_parentMaterialMenu","addEventListener","triggersSubmenu","_deprecatedMatMenuTriggerFor","menu","v","_menu","reason","_destroyMenu","_checkMenu","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","templateRef","i1$1","i3$1","hostAttrs","hostVars","MatMenuTrigger","MatMenuModule","imports","CommonModule","MatRippleModule","OverlayModule","CdkScrollableModule"],"sources":["./node_modules/@angular/material/fesm2015/badge.mjs","./node_modules/@angular/material/fesm2015/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, imports: [[A11yModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","import * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Inject, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Input, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, Self, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatCommonModule, MatRippleModule } from '@angular/material/core';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        var _a;\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n}\n_MatMenuContentBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuContentBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuContentBase, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n/**\n * Menu content that will be rendered lazily once the menu is opened.\n */\nclass MatMenuContent extends _MatMenuContentBase {\n}\nMatMenuContent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuContent.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception for the case when menu trigger doesn't have a valid mat-menu instance\n * @docs-private\n */\nfunction throwMatMenuMissingError() {\n    throw Error(`matMenuTriggerFor: must pass in an mat-menu instance.\n\n    Example:\n      <mat-menu #menu=\"matMenu\"></mat-menu>\n      <button [matMenuTriggerFor]=\"menu\"></button>`);\n}\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside of a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        var _a;\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        (_a = _parentMenu === null || _parentMenu === void 0 ? void 0 : _parentMenu.addItem) === null || _a === void 0 ? void 0 : _a.call(_parentMenu, this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        var _a;\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return ((_a = clone.textContent) === null || _a === void 0 ? void 0 : _a.trim()) || '';\n    }\n    _setHighlighted(isHighlighted) {\n        var _a;\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n}\nMatMenuItem.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenuItem.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-menu-item\": \"true\", \"class.mat-menu-item-highlighted\": \"_highlighted\", \"class.mat-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        '[class.mat-menu-item]': 'true',\n                        '[class.mat-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.disabled]': 'disabled || null',\n                        'class': 'mat-focus-indicator',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content></ng-content>\\n<div class=\\\"mat-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\nlet menuPanelUid = 0;\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._defaultOptions = _defaultOptions;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._xPosition = this._defaultOptions.xPosition;\n        this._yPosition = this._defaultOptions.yPosition;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Subscription to tab events on the menu panel */\n        this._tabSubscription = Subscription.EMPTY;\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Class or list of classes to be added to the overlay panel. */\n        this.overlayPanelClass = this._defaultOptions.overlayPanelClass || '';\n        /** Class to be added to the backdrop element. */\n        this.backdropClass = this._defaultOptions.backdropClass;\n        this._overlapTrigger = this._defaultOptions.overlapTrigger;\n        this._hasBackdrop = this._defaultOptions.hasBackdrop;\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n    }\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._tabSubscription = this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            var _a;\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && ((_a = manager.activeItem) === null || _a === void 0 ? void 0 : _a._hasFocus())) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._directDescendantItems.destroy();\n        this._tabSubscription.unsubscribe();\n        this.closed.complete();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // When the content is rendered lazily, it takes a bit before the items are inside the DOM.\n        if (this.lazyContent) {\n            this._ngZone.onStable.pipe(take(1)).subscribe(() => this._focusFirstItem(origin));\n        }\n        else {\n            this._focusFirstItem(origin);\n        }\n    }\n    /**\n     * Actual implementation that focuses the first item. Needs to be separated\n     * out so we don't repeat the same logic in the public `focusFirstItem` method.\n     */\n    _focusFirstItem(origin) {\n        const manager = this._keyManager;\n        manager.setFocusOrigin(origin).setFirstItemActive();\n        // If there's no active item at this point, it means that all the items are disabled.\n        // Move focus to the menu panel so keyboard events like Escape still work. Also this will\n        // give _some_ feedback to screen readers.\n        if (!manager.activeItem && this._directDescendantItems.length) {\n            let element = this._directDescendantItems.first._getHostElement().parentElement;\n            // Because the `mat-menu` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menu panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            while (element) {\n                if (element.getAttribute('role') === 'menu') {\n                    element.focus();\n                    break;\n                }\n                else {\n                    element = element.parentElement;\n                }\n            }\n        }\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        var _a;\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        (_a = this._changeDetectorRef) === null || _a === void 0 ? void 0 : _a.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n}\n_MatMenuBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n/** @docs-public MatMenu */\nclass MatMenu extends _MatMenuBase {\n    constructor(elementRef, ngZone, defaultOptions, changeDetectorRef) {\n        super(elementRef, ngZone, defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 4;\n    }\n}\nMatMenu.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nMatMenu.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenu, selector: \"mat-menu\", host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"], directives: [{ type: i3.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-menu-panel{min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;max-height:calc(100vh - 48px);border-radius:4px;outline:0;min-height:64px}.mat-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-menu-panel{outline:solid 1px}.mat-menu-content:not(:empty){padding-top:8px;padding-bottom:8px}.mat-menu-item{-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:transparent;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;line-height:48px;height:48px;padding:0 16px;text-align:left;text-decoration:none;max-width:100%;position:relative}.mat-menu-item::-moz-focus-inner{border:0}.mat-menu-item[disabled]{cursor:default}[dir=rtl] .mat-menu-item{text-align:right}.mat-menu-item .mat-icon{margin-right:16px;vertical-align:middle}.mat-menu-item .mat-icon svg{vertical-align:top}[dir=rtl] .mat-menu-item .mat-icon{margin-left:16px;margin-right:0}.mat-menu-item[disabled]::before{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.cdk-high-contrast-active .mat-menu-item{margin-top:1px}.cdk-high-contrast-active .mat-menu-item.cdk-program-focused,.cdk-high-contrast-active .mat-menu-item.cdk-keyboard-focused,.cdk-high-contrast-active .mat-menu-item-highlighted{outline:dotted 1px}.mat-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-menu-submenu-icon{fill:CanvasText}button.mat-menu-item{width:100%}.mat-menu-item .mat-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }];\n    } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Default top padding of the menu panel. */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n// TODO(andrewseguin): Remove the kebab versions in favor of camelCased attribute selectors\nclass _MatMenuTriggerBase {\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        if (_menuItemInstance) {\n            _menuItemInstance._triggersSubmenu = this.triggersSubmenu();\n        }\n    }\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n    }\n    ngAfterContentInit() {\n        this._checkMenu();\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        if (this._menuOpen) {\n            return;\n        }\n        this._checkMenu();\n        const overlayRef = this._createOverlay();\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(positionStrategy);\n        overlayConfig.hasBackdrop =\n            this.menu.hasBackdrop == null ? !this.triggersSubmenu() : this.menu.hasBackdrop;\n        overlayRef.attach(this._getPortal());\n        if (this.menu.lazyContent) {\n            this.menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu();\n        if (this.menu instanceof _MatMenuBase) {\n            this.menu._startAnimation();\n            this.menu._directDescendantItems.changes.pipe(takeUntil(this.menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        var _a;\n        (_a = this._overlayRef) === null || _a === void 0 ? void 0 : _a.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            if (menu.lazyContent) {\n                menu.lazyContent.detach();\n            }\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu() {\n        this.menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        this.menu.direction = this.dir;\n        this._setMenuElevation();\n        this.menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation() {\n        if (this.menu.setElevation) {\n            let depth = 0;\n            let parentMenu = this.menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            this.menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        this._menuOpen = isOpen;\n        this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n        if (this.triggersSubmenu()) {\n            this._menuItemInstance._setHighlighted(isOpen);\n        }\n    }\n    /**\n     * This method checks that a valid instance of MatMenu has been passed into\n     * matMenuTriggerFor. If not, an exception is thrown.\n     */\n    _checkMenu() {\n        if (!this.menu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuMissingError();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay() {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig();\n            this._subscribeToPositions(config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: this.menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: this.menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(position) {\n        if (this.menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => this.menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    this.menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(positionStrategy) {\n        let [originX, originFallbackX] = this.menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = this.menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = this.menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            offsetY = overlayY === 'bottom' ? MENU_PANEL_TOP_PADDING : -MENU_PANEL_TOP_PADDING;\n        }\n        else if (!this.menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal() {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== this.menu.templateRef) {\n            this._portal = new TemplatePortal(this.menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n}\n_MatMenuTriggerBase.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\n_MatMenuTriggerBase.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { attributes: { \"aria-haspopup\": \"true\" }, listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-expanded\": \"menuOpen || null\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        'aria-haspopup': 'true',\n                        '[attr.aria-expanded]': 'menuOpen || null',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_SCROLL_STRATEGY]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_MENU_PANEL]\n                    }, {\n                        type: Optional\n                    }] }, { type: MatMenuItem, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Self\n                    }] }, { type: i3$1.Directionality, decorators: [{\n                        type: Optional\n                    }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }];\n    }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n}\nMatMenuTrigger.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatMenuTrigger.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatMenuModule {\n}\nMatMenuModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatMenuModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent], imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule], exports: [CdkScrollableModule,\n        MatCommonModule,\n        MatMenu,\n        MatMenuItem,\n        MatMenuTrigger,\n        MatMenuContent] });\nMatMenuModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [[CommonModule, MatCommonModule, MatRippleModule, OverlayModule], CdkScrollableModule,\n        MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatCommonModule, MatRippleModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatCommonModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuTrigger,\n                        MatMenuContent,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuTrigger, MatMenuContent],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"sourceRoot":"webpack:///","file":"default-node_modules_angular_material_fesm2015_badge_mjs-node_modules_angular_material_fesm20-df7c03.6f8d9157965cc2f9.js"}