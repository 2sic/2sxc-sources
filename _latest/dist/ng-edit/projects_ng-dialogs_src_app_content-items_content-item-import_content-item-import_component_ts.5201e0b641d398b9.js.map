{"version":3,"mappings":"uZAOEA,gDAYEA,kBACEA,oFACFA,+BACAA,kBACEA,6EACFA,yIACAA,kBAKEA,SACFA,kCAN4EA,kFAK1EA,yDAZJA,kBACEA,wBAGAA,wBAGAA,wBAOFA,mCAbQA,8CAGAA,+CAGmBA,2FAUzBA,SACEA,qBAA0BA,kDAASC,gBAAeD,kBAAMA,QACxDA,qBACEA,kDAASE,sBACTF,oBACFA,QACFA,qCAJ2CA,mHAK3CA,SACEA,qBAAyCA,kDAASG,gBAAeH,iBAAKA,QACxEA,iDA5CJA,iBAAgDA,yDAAgBI,kBAG9DJ,iBAAsB,WACUA,0BAAqDA,UAGrFA,+BAEAA,eAA8BA,oEAAwDA,QAEtFA,eAAK,cAC+EA,mDAASK,UACzFL,iBAAMA,UAAoEA,UAE5EA,sBAA8BA,mDAAUM,gBAAxCN,UAGFA,wBAgBAA,mBACEA,kCAOAA,kCAGFA,iDA7CkBA,iCAIcA,yFAGlBA,qCAKwCA,yCAC5CA,qEAKqEA,sCAiB9DA,uEAOAA,yECxBZ,IAAMO,EAAb,MAAM,QAaJC,YACmCC,EACzBC,EACAC,EACAC,EACAC,EACAC,GALyBC,kBACzBA,iBACAA,aACAA,2BACAA,2BACAA,gBAlBgBA,eAAY,mBAEtCA,kBAAe,IAAIC,IAA6B,MACxCD,kBAAe,IAAIC,KAAgB,GACnCD,iBAAc,IAAIC,IAAsB,MACxCD,mBAAgB,IAAIC,IAAiC,MAC7DD,sBAAgBE,KAAc,CAACF,KAAKG,aAAcH,KAAKI,YAAaJ,KAAKK,gBAAgBC,QACvFC,KAAI,EAAEC,EAAaC,EAAYC,MAAmB,CAAEF,cAAaC,aAAYC,mBAGvEV,2BAAwBA,KAAKJ,MAAMe,SAASC,OAAOC,SAASC,IAAI,yBAWxEC,WACEf,KAAKH,oBAAoBmB,oBAAoBhB,KAAKiB,uBAAuBC,UAAUC,IACjFnB,KAAKoB,aAAaC,KAAKF,KAEI,MAAzBnB,KAAKN,WAAW4B,QAClBtB,KAAKI,YAAYiB,KAAKrB,KAAKN,WAAW4B,MAAM,IAC5CtB,KAAKuB,qBAITC,cACExB,KAAKoB,aAAaK,WAClBzB,KAAKG,aAAasB,WAClBzB,KAAKI,YAAYqB,WACjBzB,KAAKK,cAAcoB,WAGrBC,cACE1B,KAAKL,UAAUgC,QAGjBC,aAAaN,GAEXtB,KAAKI,YAAYiB,KADEC,EAAM,IAEzBtB,KAAKK,cAAcgB,KAAK,MACxBrB,KAAKuB,oBAGPM,WAAWC,GAET9B,KAAKI,YAAYiB,KADGS,EAAMC,OAA4BT,MAAM,IAE5DtB,KAAKK,cAAcgB,KAAK,MAG1BE,oBACEvB,KAAKG,aAAakB,MAAK,GACvBrB,KAAKF,oBAAoBkC,WAAWhC,KAAKI,YAAY6B,OAAOf,UAAU,CACpEG,KAAMa,IACJlC,KAAKG,aAAakB,MAAK,GACvBrB,KAAKK,cAAcgB,KAAK,CACtBc,SAAS,EACTC,SAAU,MAGdC,MAAQA,IACNrC,KAAKG,aAAakB,MAAK,GACvBrB,KAAKK,cAAcgB,KAAK,MACxBrB,KAAKD,SAASuC,KAAK,2DAA4D,KAAM,CAAEC,SAAU,uDArE5F/C,GAA0BP,MAc3BuD,MAAevD,oFAddO,EAA0BiD,gtCDlBvCxD,gDACGA,8KCiBUO,GAAb","names":["i0","ctx_r12","ctx_r14","ctx_r16","ctx_r18","_r3","ctx_r21","ContentItemImportComponent","constructor","dialogData","dialogRef","route","contentTypesService","contentItemsService","snackBar","this","BehaviorSubject","combineLatest","isImporting$","importFile$","importResult$","pipe","map","isImporting","importFile","importResult","snapshot","parent","paramMap","get","ngOnInit","retrieveContentType","contentTypeStaticName","subscribe","contentType","contentType$","next","files","importContentItem","ngOnDestroy","complete","closeDialog","close","filesDropped","fileChange","event","target","importItem","value","res","Success","Messages","error","open","duration","MAT_DIALOG_DATA","selectors"],"sources":["./projects/ng-dialogs/src/app/content-items/content-item-import/content-item-import.component.html","./projects/ng-dialogs/src/app/content-items/content-item-import/content-item-import.component.ts"],"sourcesContent":["<div appDragAndDrop [allowedFileTypes]=\"'json'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ (contentType$ | async)?.Name }} Import Single Item</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isImporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">Select an item file (json) from your computer to import.</p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.isImporting\" (click)=\"fileInput.click()\">\r\n      <span>{{ data.importFile ? data.importFile.name : 'Select or drop file' }}</span>\r\n    </button>\r\n    <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light import-result-box\" *ngIf=\"data.importResult\">\r\n    <div *ngIf=\"data.importResult.Success\" class=\"sxc-message sxc-message-info\">\r\n      The import has been done. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.importResult.Success\" class=\"sxc-message sxc-message-error\">\r\n      The import failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.importResult.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === 0,\r\n      'sxc-message-success': message.MessageType === 1,\r\n      'sxc-message-error': message.MessageType === 2\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.importResult?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.importFile || data.isImporting || !!data.importResult\"\r\n        (click)=\"importContentItem()\">\r\n        Import\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.importResult?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { ContentItemImportDialogData } from './content-item-import-dialog.config';\r\n\r\n@Component({\r\n  selector: 'app-content-item-import',\r\n  templateUrl: './content-item-import.component.html',\r\n  styleUrls: ['./content-item-import.component.scss'],\r\n})\r\nexport class ContentItemImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private isImporting$ = new BehaviorSubject(false);\r\n  private importFile$ = new BehaviorSubject<File>(null);\r\n  private importResult$ = new BehaviorSubject<ImportAppResult>(null);\r\n  templateVars$ = combineLatest([this.isImporting$, this.importFile$, this.importResult$]).pipe(\r\n    map(([isImporting, importFile, importResult]) => ({ isImporting, importFile, importResult })),\r\n  );\r\n\r\n  private contentTypeStaticName = this.route.snapshot.parent.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentItemImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentItemImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n    if (this.dialogData.files != null) {\r\n      this.importFile$.next(this.dialogData.files[0]);\r\n      this.importContentItem();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.isImporting$.complete();\r\n    this.importFile$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n    this.importContentItem();\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    const importFile = (event.target as HTMLInputElement).files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n  }\r\n\r\n  importContentItem() {\r\n    this.isImporting$.next(true);\r\n    this.contentItemsService.importItem(this.importFile$.value).subscribe({\r\n      next: res => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next({\r\n          Success: true,\r\n          Messages: [],\r\n        });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(null);\r\n        this.snackBar.open('Import failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-items_content-item-import_content-item-import_component_ts.5201e0b641d398b9.js"}