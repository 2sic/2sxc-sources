{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_services_content-types-fields_service_ts-projects-ee9d01.90f0431e1104dc59.js","mappings":"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","names":["webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","map","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","staticName","fields","fld","Metadata","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","post","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","contentType","contentTypeId","Id","order","JSON","stringify","setTitle","item","webApiTypeRoot","rename","fieldId","delete","IsTitle","Error","add","newField","StaticName","Index","SortOrder","updateInputType","id","field","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_3__","wxM","factory","ɵfac","FeaturesModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","a4G","s3X","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","webApiRoot","nameId","GoToMetadata","getRoutes","defaultRoute","path","loadChildren","Promise","all","__webpack_require__","e","then","bind","m","MetadataModule","data","title","getUrl","targetType","keyType","key","dialogTitle","url","encodeURIComponent","getUrlApp","eavConstants","metadata","app","getUrlAttribute","attribute","getUrlContentType","getUrlEntity","guid","entity","GoToPermissions","route","PermissionsModule","getUrlLanguage","language","SxcGridModule","ModuleRegistry","isRegistered","ModuleNames","ClientSideRowModelModule","register","_angular_core__WEBPACK_IMPORTED_MODULE_2__","AgGridModule","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","window","sxcVersion","prefix","suffix","getTranslation","lang","catchError","error","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","hidden","disabled","inputs","booleanAttribute","features","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/metadata/go-to-metadata.ts","./projects/eav-ui/src/app/permissions/go-to-permissions.ts","./projects/eav-ui/src/app/shared/modules/sxc-grid-module/sxc-grid.module.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:targetType/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.targetType,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.targetType,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.targetType,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.targetType,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToPermissions {\r\n\r\n  static route: Route = {\r\n    path: 'permissions/:targetType/:keyType/:key',\r\n    loadChildren: () => import('./permissions.module').then(m => m.PermissionsModule),\r\n    data: { title: 'Permissions' },\r\n  };\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string): string {\r\n    return `permissions/${targetType}/${keyType}/${key}`;\r\n  }\r\n\r\n  static getUrlApp(appId: number): string {\r\n    return this.getUrl(eavConstants.metadata.app.targetType, eavConstants.metadata.app.keyType, appId.toString());\r\n  }\r\n\r\n  static getUrlAttribute(id: number): string {\r\n    return this.getUrl(eavConstants.metadata.attribute.targetType, eavConstants.metadata.attribute.keyType, id.toString());\r\n  }\r\n\r\n  /** For historic reasons, it's the same as Entity */\r\n  static getUrlContentType(guid: string): string {\r\n    return this.getUrlEntity(guid);\r\n  }\r\n\r\n  static getUrlEntity(guid: string): string {\r\n    return this.getUrl(eavConstants.metadata.entity.targetType, eavConstants.metadata.entity.keyType, guid);\r\n  }\r\n\r\n  static getUrlLanguage(id: string): string {\r\n    return this.getUrl(eavConstants.metadata.language.targetType, eavConstants.metadata.language.keyType, id);\r\n  }\r\n\r\n}\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { ModuleNames, ModuleRegistry } from '@ag-grid-community/core';\r\nimport { NgModule } from '@angular/core';\r\n\r\n@NgModule({\r\n  imports: [\r\n    AgGridModule,\r\n  ],\r\n  exports: [\r\n    AgGridModule,\r\n  ],\r\n})\r\n  // Change AgGridModule Version to 31.1.1, new with\r\n  // TODO:: @2dg moduleName: ModuleNames, new with gridId: string, not tested\r\nexport class SxcGridModule {\r\n  constructor() {\r\n    if (!ModuleRegistry.isRegistered(ModuleNames.ClientSideRowModelModule)) {\r\n      ModuleRegistry.register(ClientSideRowModelModule);\r\n    }\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[9]}