{"version":3,"file":"default-node_modules_angular_material_fesm2022_dialog_mjs.1a8b266f49e819e8.js","mappings":"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","names":["CdkDialogContainer_ng_template_0_Template","rf","ctx","DialogConfig","constructor","this","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","CdkDialogContainer","BasePortalOutlet","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","super","_platform","inject","Platform","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_changeDetectorRef","ChangeDetectorRef","_injector","Injector","_isDestroyed","attachDomPortal","portal","_portalOutlet","hasAttached","result","_contentAttached","push","_addAriaLabelledBy","id","markForCheck","_removeAriaLabelledBy","index","indexOf","splice","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","afterNextRender","focusInitialElement","_focusDialogContainer","injector","focusConfig","focusTargetElement","activeElement","_getFocusedElementPierceShadowDom","body","contains","focusVia","destroy","isBrowser","create","backdropClick","subscribe","ɵfac","__ngFactoryType__","i0","i1","DOCUMENT","i1$1","ɵcmp","type","selectors","viewQuery","CdkPortalOutlet","_t","first","hostAttrs","hostVars","hostBindings","standalone","features","decls","vars","consts","template","dependencies","styles","encapsulation","DialogRef","overlayRef","config","closed","Subject","keydownEvents","outsidePointerEvents","event","keyCode","ESCAPE","hasModifierKey","preventDefault","close","undefined","focusOrigin","_detachSubscription","detachments","containerInstance","closedSubject","unsubscribe","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","Overlay","scrollStrategies","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","uniqueId","Dialog","openDialogs","_parentDialog","_openDialogsAtThisLevel","afterOpened","_afterOpenedAtThisLevel","_overlay","_defaultOptions","_overlayContainer","scrollStrategy","_afterAllClosedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","length","_getAfterAllClosed","pipe","startWith","_scrollStrategy","open","componentOrTemplateRef","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","OverlayConfig","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","providers","provide","useValue","OverlayRef","containerType","container","containerPortal","ComponentPortal","parent","componentFactoryResolver","attach","instance","TemplateRef","_createInjector","context","$implicit","templateContext","TemplatePortal","contentRef","componentRef","fallbackInjector","get","Directionality","optional","value","change","of","emitEvent","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","ɵprov","token","items","DialogModule","ɵmod","ɵinj","imports","OverlayModule","PortalModule","A11yModule","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","MatDialogContainer","elementRef","focusTrapFactory","dialogConfig","interactivityChecker","ngZone","_animationMode","focusMonitor","_animationStateChanged","EventEmitter","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","enterAnimationDuration","_exitAnimationDuration","exitAnimationDuration","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_openAnimationDone","_finishDialogClose","emit","totalTime","_startOpenAnimation","style","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","Promise","resolve","then","_startExitAnimation","remove","_updateActionSectionCount","delta","duration","clearTimeout","setTimeout","requestAnimationFrame","ref","location","ANIMATION_MODULE_TYPE","time","endsWith","coerceNumberProperty","substring","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_state","filter","take","_closeFallbackTimeout","_result","merge","_closeDialogVia","dialogResult","detachBackdrop","afterClosed","beforeClosed","strategy","left","right","top","bottom","getState","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MatDialog","dialogConfigClass","_dialog","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","cdkConfig","_closeDialogs","dialogs","i2","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","_matDialogClose","_matDialogCloseResult","currentValue","_onButtonClick","screenX","screenY","ɵdir","$event","inputs","exportAs","MatDialogLayoutSection","_dialogRef","_onAdd","_onRemove","MatDialogContent","i3","MatDialogActions","ɵMatDialogActions_BaseFactory","align","MatDialogModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/dialog.mjs","./node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n        /**\n         * Whether the dialog should close when the underlying overlay is detached. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n         * external detachment can happen as a result of a scroll strategy triggering it or when the\n         * browser location changes.\n         */\n        this.closeOnOverlayDetachments = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        this._platform = inject(Platform);\n        /** The class that traps and manages focus within the dialog. */\n        this._focusTrap = null;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Queue of the IDs of the dialog's label element, based on their definition order. The first\n         * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n         * where there are two or more titles in the DOM at a time and the first one is destroyed while\n         * the rest are present.\n         */\n        this._ariaLabelledByQueue = [];\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        this._injector = inject(Injector);\n        this._isDestroyed = false;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._document = _document;\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus();\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, inject, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Number of actions projected in the dialog. */\n        this._actionSectionCount = 0;\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._enterAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._exitAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._enterAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: i1.FocusMonitor }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = MatDialogState.OPEN;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    constructor(_overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, _defaultOptions, _scrollStrategy, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._dialog = injector.get(Dialog);\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `mat-mdc-dialog-${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }] });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    standalone: true,\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive,\n            args: [{ standalone: true }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    constructor() {\n        super(...arguments);\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i3.CdkScrollable }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    standalone: true,\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n"],"x_google_ignoreList":[0,1]}