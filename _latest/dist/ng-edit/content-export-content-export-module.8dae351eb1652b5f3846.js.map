{"version":3,"sources":["./src/app/content-export/content-export-dialog.config.ts","./src/app/content-export/content-export-routing.module.ts","./src/app/content-export/content-export.module.ts","../edit/shared/services/eav.service.ts","../edit/shared/services/entity.service.ts","../edit/shared/store/actions/item.actions.ts"],"names":["contentExportDialog","name","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentExportRoutingModule","forChild","ContentExportModule","webApiEditRoot","http","store","dnnContext","context","forceConnectorSave$","formValueChange$","formDisabledChange$","ngOnDestroy","this","complete","setEavConfig","editDialogContext","eavConfig","zoneId","toString","appId","appRoot","App","Url","lang","Language","Current","langPri","Primary","langs","All","moduleId","partOfPage","sessionStorage","getItem","portalRoot","tabId","systemRoot","window","location","pathname","split","versioningOptions","getVersioningOptions","fetchFormData","items","post","$2sxc","apiUrl","params","saveItem","item","dispatch","saveItemSuccess","saveItemError","error","saveFormData","body","publishing","show","hide","branch","publish","console","EavService","webApiEntityRoot","webApiEntityList","eavService","getAvailableEntities","filter","contentTypeName","delete","contentType","entityId","force","id","EntityService","SAVE_ITEM_ATTRIBUTES_VALUES","SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS","SAVE_ITEM_ATTRIBUTES_VALUES_ERROR","type"],"mappings":"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","file":"content-export-content-export-module.8dae351eb1652b5f3846.js","sourcesContent":["import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { FormDisabledSet, FormValueSet } from '../../../edit-types';\r\nimport { keyPartOfPage, keyPortalRoot, keyPublishing } from '../../../ng-dialogs/src/app/shared/constants/session.constants';\r\nimport { Context } from '../../../ng-dialogs/src/app/shared/services/context';\r\nimport { EavFormData, EditDialogContext } from '../../eav-item-dialog/multi-item-edit-form/multi-item-edit-form.models';\r\nimport { EavConfig } from '../models/eav-config';\r\nimport { Item } from '../models/eav/item';\r\nimport { SaveResult } from '../models/eav/save-result.model';\r\nimport { VersioningOptions } from '../models/eav/versioning-options';\r\nimport * as fromStore from '../store';\r\nimport * as itemActions from '../store/actions/item.actions';\r\n\r\nexport const webApiEditRoot = 'cms/edit/';\r\n\r\n@Injectable()\r\nexport class EavService implements OnDestroy {\r\n  /**\r\n   * Tells subscribed custom components that they should submit their values,\r\n   * e.g. form is going to be saved and we don't want to miss any values.\r\n   * Custom components run outside Angular zone and we have to wait for their values to update.\r\n   */\r\n  forceConnectorSave$ = new Subject<null>();\r\n  /** Temporary solution to circumvent value not being emitted on language change. Fix language change!  */\r\n  formValueChange$ = new Subject<FormValueSet>();\r\n  /** Temporary solution to circumvent disabled not being emitted on language change. Fix language change!  */\r\n  formDisabledChange$ = new Subject<FormDisabledSet>();\r\n\r\n  eavConfig: EavConfig;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private store: Store<fromStore.EavState>,\r\n    private dnnContext: DnnContext,\r\n    /** Used to fetch form data and fill up eavConfig. Do not use anywhere else */\r\n    private context: Context,\r\n  ) { }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    this.forceConnectorSave$.complete();\r\n    this.formValueChange$.complete();\r\n    this.formDisabledChange$.complete();\r\n  }\r\n\r\n  /** Create EavConfiguration from sessionStorage */\r\n  setEavConfig(editDialogContext: EditDialogContext) {\r\n    this.eavConfig = {\r\n      zoneId: this.context.zoneId.toString(),\r\n      appId: this.context.appId.toString(),\r\n      appRoot: editDialogContext.App.Url,\r\n      lang: editDialogContext.Language.Current,\r\n      langPri: editDialogContext.Language.Primary,\r\n      langs: editDialogContext.Language.All,\r\n      moduleId: this.context.moduleId.toString(),\r\n      partOfPage: sessionStorage.getItem(keyPartOfPage),\r\n      portalRoot: sessionStorage.getItem(keyPortalRoot),\r\n      tabId: this.context.tabId.toString(),\r\n      systemRoot: window.location.pathname.split('/dist/')[0] + '/',\r\n      versioningOptions: this.getVersioningOptions(\r\n        sessionStorage.getItem(keyPartOfPage) === 'true',\r\n        sessionStorage.getItem(keyPublishing),\r\n      ),\r\n    };\r\n  }\r\n\r\n  fetchFormData(items: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'load'), items, {\r\n      params: { appId: this.context.appId.toString() }\r\n    }) as Observable<EavFormData>;\r\n  }\r\n\r\n  saveItem(item: Item) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesAction(item));\r\n  }\r\n\r\n  saveItemSuccess(data: SaveResult) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesSuccessAction(data));\r\n  }\r\n\r\n  saveItemError(error: any) {\r\n    this.store.dispatch(new itemActions.SaveItemAttributesValuesErrorAction(error));\r\n  }\r\n\r\n  saveFormData(body: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'save'), body, {\r\n      params: { appId: this.eavConfig.appId.toString(), partOfPage: this.eavConfig.partOfPage }\r\n    }) as Observable<SaveResult>;\r\n  }\r\n\r\n  private getVersioningOptions(partOfPage: boolean, publishing: string): VersioningOptions {\r\n    if (!partOfPage) {\r\n      return { show: true, hide: true, branch: true };\r\n    }\r\n\r\n    const publish = publishing || '';\r\n    switch (publish) {\r\n      case '':\r\n      case 'DraftOptional':\r\n        return { show: true, hide: true, branch: true };\r\n      case 'DraftRequired':\r\n        return { branch: true, hide: true };\r\n      default: {\r\n        console.error('invalid versioning requiremenets: ' + publish);\r\n        return {};\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EntityInfo } from '../models/eav/entity-info';\r\nimport { EavService, webApiEditRoot } from './eav.service';\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = webApiEntityRoot + 'list';\r\n\r\n@Injectable()\r\nexport class EntityService {\r\n  constructor(private http: HttpClient, private eavService: EavService, private dnnContext: DnnContext) { }\r\n\r\n  getAvailableEntities(filter: string, contentTypeName: string) {\r\n    return this.http.post(this.dnnContext.$2sxc.http.apiUrl(webApiEditRoot + 'EntityPicker'), filter, {\r\n      params: { contentTypeName, appId: this.eavService.eavConfig.appId.toString() },\r\n    }) as Observable<EntityInfo[]>;\r\n  }\r\n\r\n  delete(contentType: string, entityId: string, force: boolean) {\r\n    return this.http.delete(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType, id: entityId, appId: this.eavService.eavConfig.appId.toString(), force: force.toString() },\r\n    }) as Observable<null>;\r\n  }\r\n}\r\n","import { Action } from '@ngrx/store';\r\nimport { Item } from '../../models/eav/item';\r\nimport { SaveResult } from '../../models/eav/save-result.model';\r\n\r\n// Item Attributes\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES';\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS';\r\nexport const SAVE_ITEM_ATTRIBUTES_VALUES_ERROR = '[Item] SAVE_ITEM_ATTRIBUTES_VALUES_ERROR';\r\n\r\n/** Save (submit) */\r\nexport class SaveItemAttributesValuesAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES;\r\n  constructor(public item: Item) { }\r\n}\r\n\r\nexport class SaveItemAttributesValuesSuccessAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS;\r\n  constructor(public data: SaveResult) { }\r\n}\r\n\r\nexport class SaveItemAttributesValuesErrorAction implements Action {\r\n  readonly type = SAVE_ITEM_ATTRIBUTES_VALUES_ERROR;\r\n  constructor(public error: any) { }\r\n}\r\n\r\nexport type Actions\r\n  = SaveItemAttributesValuesAction\r\n  | SaveItemAttributesValuesSuccessAction\r\n  | SaveItemAttributesValuesErrorAction;\r\n"],"sourceRoot":"webpack:///"}