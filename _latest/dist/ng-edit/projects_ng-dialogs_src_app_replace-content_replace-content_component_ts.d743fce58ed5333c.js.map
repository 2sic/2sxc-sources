{"version":3,"mappings":"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","names":["i0","ctx_r5","ctx_r7","ctx_r8","ctx_r9","ctx_r10","ReplaceContentComponent","dialogRef","contentGroupService","router","route","snackBar","R","this","guid","snapshot","paramMap","get","part","index","parseInt","add","queryParamMap","subscription","Subscription","filterText$","BehaviorSubject","options$","filteredOptions$","combineLatest","pipe","map","filterText","n","filter","option","label","toLocaleLowerCase","includes","templateVars$","filteredOptions","isAddMode","e","isMatch","fetchConfig","refreshOnChildClosed","complete","unsubscribe","close","next","event","value","contentGroup","buildContentGroup","formUrl","convertFormToUrl","items","ContentTypeName","contentTypeName","DuplicateEntity","id","navigate","relativeTo","open","saveItem","subscribe","duration","closeDialog","isRefresh","cloneId","getItems","options","Object","entries","replaceConfig","Items","itemId","D","itemName","a","newId","SelectedId","newFilter","c","find","_a","events","NavigationEnd","startWith","firstChild","pairwise","editResult","l","getCurrentNavigation","extras","state","keys","_b","_","selectors"],"sources":["./projects/ng-dialogs/src/app/replace-content/replace-content.component.html","./projects/ng-dialogs/src/app/replace-content/replace-content.component.ts"],"sourcesContent":["<ng-container *ngIf=\"templateVars$ | async as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.isAddMode ? 'Add Existing Item' : 'Replace Content Item' }}</div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <p class=\"dialog-description\">\r\n    {{\r\n    data.isAddMode\r\n    ? 'Select a content-item to add to this list.'\r\n    : 'By replacing a content-item you can make other content appear in the slot of the original content.'\r\n    }}\r\n  </p>\r\n\r\n  <div class=\"options-box\">\r\n    <mat-form-field class=\"options-box__field\" appearance=\"standard\" color=\"accent\">\r\n      <mat-label>Choose item</mat-label>\r\n      <input matInput [matAutocomplete]=\"auto\" [ngModel]=\"data.filterText\" (ngModelChange)=\"setFilter($event)\">\r\n      <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"select($event)\">\r\n        <cdk-virtual-scroll-viewport itemSize=\"48\" minBufferPx=\"500\" maxBufferPx=\"1000\"\r\n          [style.height.px]=\"data.filteredOptions.length < 6 ? data.filteredOptions.length * 48 : 240\">\r\n          <mat-option *cdkVirtualFor=\"let option of data.filteredOptions\" [value]=\"option\">{{ option }}</mat-option>\r\n        </cdk-virtual-scroll-viewport>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n    <button mat-icon-button class=\"options-box__copy\" tippy=\"Copy\" [disabled]=\"!data.isMatch\" (click)=\"copySelected()\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!data.isMatch\" (click)=\"save()\">Save</button>\r\n  </div>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentGroupAdd } from '../manage-content-list/models/content-group.model';\r\nimport { ContentGroupService } from '../manage-content-list/services/content-group.service';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ReplaceOption } from './models/replace-option.model';\r\nimport { ReplaceContentTemplateVars } from './replace-content.models';\r\n\r\n@Component({\r\n  selector: 'app-replace-content',\r\n  templateUrl: './replace-content.component.html',\r\n  styleUrls: ['./replace-content.component.scss'],\r\n})\r\nexport class ReplaceContentComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  templateVars$: Observable<ReplaceContentTemplateVars>;\r\n\r\n  private guid: string;\r\n  private part: string;\r\n  private index: number;\r\n  private add: boolean;\r\n  private filterText$: BehaviorSubject<string>;\r\n  private options$: BehaviorSubject<ReplaceOption[]>;\r\n  private contentTypeName: string;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ReplaceContentComponent>,\r\n    private contentGroupService: ContentGroupService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.guid = this.route.snapshot.paramMap.get('guid');\r\n    this.part = this.route.snapshot.paramMap.get('part');\r\n    this.index = parseInt(this.route.snapshot.paramMap.get('index'), 10);\r\n    this.add = !!this.route.snapshot.queryParamMap.get('add');\r\n\r\n    this.subscription = new Subscription();\r\n    this.filterText$ = new BehaviorSubject('');\r\n    this.options$ = new BehaviorSubject([]);\r\n\r\n    const filteredOptions$ = combineLatest([this.filterText$, this.options$]).pipe(\r\n      map(([filterText, options]) =>\r\n        options.filter(option => option.label.toLocaleLowerCase().includes(filterText.toLocaleLowerCase())).map(option => option.label)\r\n      ),\r\n    );\r\n    this.templateVars$ = combineLatest([this.filterText$, filteredOptions$]).pipe(\r\n      map(([filterText, filteredOptions]) => {\r\n        const templateVars: ReplaceContentTemplateVars = {\r\n          filterText,\r\n          filteredOptions,\r\n          isAddMode: this.add,\r\n          isMatch: filteredOptions.includes(filterText),\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n\r\n    this.fetchConfig(false, null);\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.filterText$.complete();\r\n    this.options$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  setFilter(filterText: string) {\r\n    this.filterText$.next(filterText);\r\n  }\r\n\r\n  select(event: MatAutocompleteSelectedEvent) {\r\n    this.filterText$.next(event.option.value);\r\n  }\r\n\r\n  copySelected() {\r\n    const contentGroup = this.buildContentGroup();\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeName, DuplicateEntity: contentGroup.id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.saveItem(contentGroup).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  private fetchConfig(isRefresh: boolean, cloneId: number) {\r\n    const contentGroup = this.buildContentGroup();\r\n    this.contentGroupService.getItems(contentGroup).subscribe(replaceConfig => {\r\n      const options = Object.entries(replaceConfig.Items).map(([itemId, itemName]) => {\r\n        const option: ReplaceOption = {\r\n          id: parseInt(itemId, 10),\r\n          label: `${itemName} (${itemId})`,\r\n        };\r\n        return option;\r\n      });\r\n      this.options$.next(options);\r\n\r\n      // don't set selected option if dialog should be in add-mode and don't change selected option on refresh unless it's cloneId\r\n      if ((!contentGroup.add && !isRefresh) || cloneId != null) {\r\n        const newId = !isRefresh ? replaceConfig.SelectedId : cloneId;\r\n        const newFilter = this.options$.value.find(option => option.id === newId)?.label || '';\r\n        this.filterText$.next(newFilter);\r\n      }\r\n      this.contentTypeName = replaceConfig.ContentTypeName;\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        const navigation = this.router.getCurrentNavigation();\r\n        const editResult = navigation.extras?.state;\r\n        const cloneId: number = editResult?.[Object.keys(editResult)[0]];\r\n        this.fetchConfig(true, cloneId);\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildContentGroup() {\r\n    const id = this.options$.value.find(option => option.label === this.filterText$.value)?.id ?? null;\r\n\r\n    const contentGroup: ContentGroupAdd = {\r\n      id,\r\n      guid: this.guid,\r\n      part: this.part,\r\n      index: this.index,\r\n      add: this.add,\r\n    };\r\n    return contentGroup;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_replace-content_replace-content_component_ts.d743fce58ed5333c.js"}