{"version":3,"file":"projects_eav-ui_src_app_app-administration_services_index_ts-projects_eav-ui_src_app_content--808f79.eec9190343f7c341.js","mappings":"uiDAYO,IAAMA,EAAsB,MAA7B,MAAOA,EACXC,YACUC,EACAC,EACAC,EACAC,EACRC,GAJQC,KAAAL,OACAK,KAAAJ,UACAI,KAAAH,aACAG,KAAAF,sBAMFE,KAAAC,gBAA8D,GAHpEF,EAAgBG,gBAAgBF,KAClC,CAIAG,WAAWC,GACTA,WAAUJ,KAAKJ,QAAQQ,MAClBJ,KAAKC,gBAAgBG,KACxBJ,KAAKC,gBAAgBG,GAASJ,KAAKK,kBAAkBD,GAAOE,QAAKC,KAAY,CAAEC,UAAU,MACpFR,KAAKC,gBAAgBG,EAE9B,CAEAC,kBAAkBD,GAChB,OAAOJ,KAAKL,KAAKc,IAAoBT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOC,yBAAgC,CACrGC,OAAQ,CAAET,MAAOA,GAASJ,KAAKJ,QAAQQ,MAAMU,cAC5CR,QACDS,KAAIC,IACFA,EAAeC,QAAQC,SAASC,KAAOH,EAAeC,QAAQC,SAASC,KAAKC,OAAOC,GAAYA,EAASC,WACjGN,KACR,EACDO,KAAIP,IACFhB,KAAKF,oBAAoB0B,WAAWR,EAAeC,QAAQQ,OAAOC,UAAS,GAGjF,CAACC,SAAA3B,KAAA,mBAAA4B,iBAjCUnC,GAAsBoC,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAAH,MAAAI,MAAAJ,MAAAK,KAAA,EAAAP,SAAA3B,KAAA,WAAAmC,EAAAC,IAAA,OAAtB3C,EAAsB4C,QAAtB5C,EAAsB6C,mBAAtB7C,CAAsB,oGCH5B,MAAM8C,EAAiB,cAGvB,IAAMC,EAAmB,MAA1B,MAAOA,EACX9C,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAE1Fc,OAAO8B,GACb,OAAOzC,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO8B,EAC3C,CAEAC,oBAAoBC,GAClB,OAAO3C,KAAKL,KAAKc,IAAiBT,KAAKW,OAAO4B,EAAiB,OAAQ,CACrE1B,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAY8B,cAAeD,IAEnE,CAEAE,qBAAqBC,GACnB,OAAO9C,KAAKL,KAAKc,IAAmBT,KAAKW,OAAO4B,EAAiB,QAAS,CACxE1B,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYgC,UAEpD,CAEAC,YACE,OAAO/C,KAAKL,KAAKc,IAA4BT,KAAKW,OAAO4B,EAAiB,UAAW,CACnF1B,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,cACnCR,QACDS,KAAIiC,GACkCC,OAAOC,KAAKF,GAAQjC,IAAIoC,KAAUV,KAAMO,EAAOG,GAAMC,MAAOD,MAItG,CAEAE,KAAKC,GACH,OAAOtD,KAAKL,KAAK4D,KAAcvD,KAAKW,OAAO4B,EAAiB,QAASe,EAAa,CAChFzC,OAAQ,CAAE2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,aAExC,CAEA2C,OAAOH,GACL,OAAOtD,KAAKL,KAAK8D,OAAgBzD,KAAKW,OAAO4B,EAAiB,UAAW,CACvE1B,OAAQ,CAAE2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,WAAY6B,WAAYW,EAAYI,aAE5E,CAEAC,OAAOC,GACL,MAAMC,EAAW,IAAIC,SACrB,UAAWC,KAAQH,EACjBC,EAASG,OAAO,OAAQD,GAE1B,OAAO/D,KAAKL,KAAK4D,KAAuBvD,KAAKW,OAAO4B,EAAiB,UAAWsB,EAAU,CACxFhD,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,aAEhF,CAEAoD,YAAYC,GACV,OAAOnE,KAAKL,KAAK4D,KAAcvD,KAAKW,OAAO4B,EAAiB,YAAa,KAAM,CAC7E1B,OAAQ,CAAE2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,WAAYqD,qBAEpD,CAACxC,SAAA3B,KAAA,mBAAA4B,iBAxDUY,GAAmBX,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAoE,EAAAhC,IAAA,OAAnBI,EAAmBH,QAAnBG,EAAmBF,mBAAnBE,CAAmB,4FCJzB,IAAM6B,EAAqB,MAA5B,MAAOA,EACX3E,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElGyE,eAAexB,GACb,OAAO9C,KAAKL,KAAKc,IAAiBT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO4D,IAAqB,OAAQ,CAC/F1D,OAAQ,CAAE2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,WAAYmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,WAAYgC,UAE5F,CAEA0B,YAAYC,EAA0BC,EAAqBC,GACzD,MAAMC,EAAM5E,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO4D,IAAqB,UAC/D,UAAYvE,KAAKJ,QAAQQ,MAAMU,WAC/B,WAAad,KAAKJ,QAAQqE,OAAOnD,WACjC,yBAA2B2D,EAAeI,KAAK,KAC/C,oBAAsBH,EAAUG,KAAK,KACrC,sBAAwBF,EAAYE,KAAK,KAE7CC,OAAOC,KAAKH,EAAK,SAAU,GAC7B,CAACjD,SAAA3B,KAAA,mBAAA4B,iBAlBUyC,GAAqBxC,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAoE,EAAAhC,IAAA,OAArBiC,EAAqBhC,QAArBgC,EAAqB/B,mBAArB+B,CAAqB,4FCA3B,IAAMW,EAAgB,MAAvB,MAAOA,EACXtF,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElGoF,aACE,OAAOjF,KAAKL,KAAKc,IAAaT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuE,IAAgB,cAAe,CAC7FrE,OAAQ,CAAE2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,WAAYmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,aAEhF,CAEAqE,UAAUC,EAA+BC,GACvC,MAAMT,EAAM5E,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuE,IAAgB,UAC1D,UAAYlF,KAAKJ,QAAQQ,MACzB,WAAaJ,KAAKJ,QAAQqE,OAC1B,yBAA2BmB,EAC3B,iBAAmBC,EAEvBP,OAAOC,KAAKH,EAAK,SAAU,GAC7B,CAEAU,yBAA0BF,uBAAsBC,eAAcE,cAE5D,OAAOvF,KAAKL,KAAKc,IAAaT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuE,IAAgB,YAAa,CAC3FrE,OAAQ,CACN2C,MAAOxD,KAAKJ,QAAQQ,MAAMU,WAC1BmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,WAC5BsE,qBAAsBA,EAAqBtE,WAC3CuE,aAAcA,EAAavE,WAC3B0E,gBAAiBD,EAAUzE,aAGjC,CAACa,SAAA3B,KAAA,mBAAA4B,iBA9BUoD,GAAgBnD,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAoE,EAAAhC,IAAA,OAAhB4C,EAAgB3C,QAAhB2C,EAAgB1C,mBAAhB0C,CAAgB,oGCDtB,MAAMT,EAAqB,kBAG3B,IAAMkB,EAAqB,MAA5B,MAAOA,EACX/F,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElG6F,eAAe3B,GACb,MAAMF,EAAW,IAAIC,SACrBD,SAASG,OAAO,OAAQD,GACjB/D,KAAKL,KAAK4D,KAAuBvD,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO4D,EAAqB,UAAWV,EAAU,CAClHhD,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,aAEhF,CAGA6E,SAASJ,GACP,OAAOvF,KAAKL,KAAK4D,KAAuBvD,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuE,IAAgB,SAAU,GAAI,CACtGrE,OAAQ,CACNT,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAC1BmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,WAC5B0E,gBAAiBD,EAAUzE,aAGjC,CAACa,SAAA3B,KAAA,mBAAA4B,iBApBU6D,GAAqB5D,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAoE,EAAAhC,IAAA,OAArBqD,EAAqBpD,QAArBoD,EAAqBnD,mBAArBmD,CAAqB,wXCAlC,MAGaG,EAAiB,kBACjBC,EAAyB,0BACzBC,EAAkB,mBAClBC,EAAiB,kBACjBC,EAAyB,0BAG/B,IAAMC,EAAgB,MAAvB,MAAOA,EACXvG,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElGqG,OAAO5C,GACL,OAAOtD,KAAKL,KAAKc,IAAaT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOwF,MAAmB,CACjFtF,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYwC,gBAEpD,CAEA8C,YAAYrC,GACV,SAAOsC,QAAKC,KAASvC,IAAOzD,QAC1BiG,KAAUC,GACDxG,KAAKL,KAAK4D,KAAcvD,KAAKH,WAAWa,MAAMf,KAAKgB,OAtBxC,sBAsBmE,CACnF8F,MAAOzG,KAAKJ,QAAQQ,MAAMU,WAC1B4F,cAAeF,MAElB,EACDzF,KAAI4F,KAEAC,QAASD,EACTE,SAAU,MAKlB,CAEAC,cAAcC,GACZ,OAAO/G,KAAKL,KAAKc,IAAUT,KAAKH,WAAWa,MAAMf,KAAKgB,OArCjC,qBAqC2D,CAC9EE,OAAQ,CAAEmG,GAAID,EAAGjG,WAAYV,MAAOJ,KAAKJ,QAAQQ,MAAMU,aAE3D,CAEA2C,OAAOsD,GACL,OAAO/G,KAAKL,KAAK8D,OAAgBzD,KAAKH,WAAWa,MAAMf,KAAKgB,OA1CtC,sBA0CiE,CACrFE,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYkG,GAAID,EAAGjG,aAE3D,CAACa,SAAA3B,KAAA,mBAAA4B,iBArCUqE,GAAgBpE,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAiH,EAAA7E,IAAA,OAAhB6D,EAAgB5D,QAAhB4D,EAAgB3D,mBAAhB2D,CAAgB,kFCX7B,MAAMiB,EAAiB,cACjBC,EAAcD,EAAiB,MAC/BE,EAAmBF,EAAiB,SACpCG,EAAmBH,EAAiB,SACpCI,EAAsBJ,EAAiB,eACvCK,EAAkBL,EAAiB,QAGlC,IAAMM,EAAY,MAAnB,MAAOA,EACX9H,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElGqG,SACE,OAAOlG,KAAKL,KAAKc,IAAYT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOwG,GAAc,CAC3EtG,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,aAExC,CAEA2C,OAAOsD,GACL,OAAO/G,KAAKL,KAAKc,IAAaT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOyG,GAAmB,CACjFvG,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYkG,GAAID,EAAGjG,aAE3D,CAEA6C,OAAOI,GACL,MAAMF,EAAW,IAAIC,SACrBD,SAASG,OAAO,OAAQD,GACjB/D,KAAKL,KAAK4D,KAAuBvD,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO0G,GAAmBxD,EAAU,CACrGhD,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYmD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,aAEhF,CAEA2G,OAAOV,GACL,MAAMnC,EAAM5E,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuG,EAAiB,QAC3D,UAAYlH,KAAKJ,QAAQQ,MACzB,WAAa2G,EAEjBjC,OAAOC,KAAKH,EAAK,SAAU,GAC7B,CAEA8C,kBACE,OAAO1H,KAAKL,KAAKc,IAAkBT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO2G,GAAsB,CACzFzG,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,aAExC,CAEA6G,SAASC,GACP,OAAO5H,KAAKL,KAAKc,IAAiBT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO4G,GAAkB,CACpF1G,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAY8G,SAEpD,CAACjG,SAAA3B,KAAA,mBAAA4B,iBAzCU4F,GAAY3F,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAA6H,EAAAzF,IAAA,OAAZoF,EAAYnF,QAAZmF,EAAYlF,mBAAZkF,CAAY,2FCPlB,IAAMM,EAAe,MAAtB,MAAOA,EACXpI,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElGkI,OAAgCzE,EAAqB0E,GACnD,OAAOhI,KAAKL,KAAK4D,KAAQ,iBAAiBD,IAAe0E,EAAQ,CAC/DnH,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAO6D,OAAQjE,KAAKJ,QAAQqE,SAE9D,CAEAgE,OAAgC3E,EAAqB4E,EAAkBF,GACrE,OAAOhI,KAAKL,KAAK4D,KAAQ,iBAAiBD,KAAe4E,IAAYF,EAAQ,CAC3EnH,OAAQ,CAAET,MAAOJ,KAAKJ,QAAQQ,MAAO6D,OAAQjE,KAAKJ,QAAQqE,SAE9D,CAEAR,OAAO0E,EAAcpB,EAAYqB,GAC/B,OAAOpI,KAAKL,KAAK8D,OAAazD,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO0H,KAAmB,UAAW,CAC5FxH,OAAQ,CAAEyC,YAAa6E,EAAMpB,GAAIA,EAAGjG,WAAYV,MAAOJ,KAAKJ,QAAQQ,MAAMU,WAAYwH,MAAOF,EAAStH,aAE1G,CAACa,SAAA3B,KAAA,mBAAA4B,iBAnBUkG,GAAejG,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAoE,EAAAhC,IAAA,OAAf0F,EAAezF,QAAfyF,EAAexF,mBAAfwF,CAAe,4ICiCrB,IAAMS,EAAc,MAArB,MAAOA,EAAc5G,SAAA3B,KAAA,mBAAA4B,iBAAd2G,EAAc,EAAA5G,SAAA3B,KAAA,UAAAwI,EAAAC,IAAA,MAAdF,IAAc5G,SAAA3B,KAAA,UAAAwI,EAAAE,IAAA,WAJd,CACTC,KACDC,QAAA,CAhBCC,KACAC,KACAC,KACAC,KACAC,IACAC,KAAgBC,YAASC,KAA4BC,gBAa5Cd,CAAc,wEClCpB,IAAMI,EAAoB,MAA3B,MAAOA,EACXjJ,YACUC,EACAE,GADAG,KAAAL,OACAK,KAAAH,YACN,CAEJyJ,kBAAkBC,GAChB,OAAOvJ,KAAKL,KAAKc,IAAaT,KAAKH,WAAWa,MAAMf,KAAKgB,OAAO6I,yBAAyB,CACvF3I,OAAQ,CAAE4I,OAAQF,IAEtB,CAAC5H,SAAA3B,KAAA,mBAAA4B,iBAVU+G,GAAoB9G,MAAAC,MAAAD,MAAAE,MAAA,EAAAJ,SAAA3B,KAAA,WAAAwI,EAAApG,IAAA,OAApBuG,EAAoBtG,QAApBsG,EAAoBrG,mBAApBqG,CAAoB,wHCF1B,MAAMzD,EAAgB,aAGtB,IAAMwE,EAAgB,MAAvB,MAAOA,EACXhK,YAAoBC,EAA0BC,EAA0BC,GAApDG,KAAAL,OAA0BK,KAAAJ,UAA0BI,KAAAH,YAA0B,CAElG8J,UAAU5F,EAAY6F,EAAqBC,GAAmB,GAC5D,MAAMhG,EAAW,IAAIC,SACrBD,SAASG,OAAO,OAAQD,GACxBF,EAASG,OAAO,OAAQ4F,GAAe,IAChC5J,KAAKL,KAAK4D,KAAuBvD,KAAKH,WAAWa,MAAMf,KAAKgB,OAAOuE,EAAgB,UAAWrB,EAAU,CAC7GhD,OAAQ,CAAEoD,OAAQjE,KAAKJ,QAAQqE,OAAOnD,cACrCR,QACDiG,KAAUuD,IACR,GAAID,GAAoBC,EAAOjD,SAAS,IAAIkD,cAAgBC,KAAuBC,QAAS,CAC1F,MAAMC,EAAaC,OAAOL,EAAOjD,SAAS,GAAGuD,KAAO,4DACpD,GAAIF,EACF,OAAOlK,KAAK2J,UAAU5F,EAAMmG,GAAY,GAG5C,SAAOG,MAAGP,EAAM,GAGtB,CAACnI,SAAA3B,KAAA,mBAAA4B,iBApBU8H,GAAgB7H,MAAAC,MAAAD,MAAAE,KAAAF,MAAAG,MAAA,EAAAL,SAAA3B,KAAA,WAAAsK,EAAAlI,IAAA,OAAhBsH,EAAgBrH,QAAhBqH,EAAgBpH,mBAAhBoH,CAAgB,yFCMtB,IAAMa,EAAoB,MAA3B,MAAOA,EAIX7K,YACU8K,EACAC,EACAC,EACAC,EACA/K,EACAgL,GALA5K,KAAAwK,SACAxK,KAAAyK,mBACAzK,KAAA0K,SACA1K,KAAA2K,QACA3K,KAAAJ,UACAI,KAAA4K,oBAER,MAAMC,EAAa7K,KAAK0K,OAAOI,uBAC/B9K,KAAK+K,WAAaF,GAAYG,QAAQC,OAAS,EACjD,CAEAC,WACE,MAAMC,EAA6BnL,KAAK2K,MAAMS,SAASC,KAAKb,OAC5D,GAAoB,MAAhBW,EACF,MAAM,IAAIG,MAAM,wFAElBC,OAAkB,eAAgBJ,EAAa1I,KAAM,cAAezC,KAAKJ,QAAQmH,GAAI,WAAY/G,KAAKJ,SAEtGuL,EAAaK,eAAeC,KAAKC,IAG1B1L,KAAKwK,OAAemB,sBAAyB3L,KAAKwK,OAAeoB,eAClE5L,KAAKwK,OAAeoB,eAAqCC,cAAcC,UAAU,KACjF9L,KAAK+L,oBAAoBZ,EAAcO,EAAS,GAGlD1L,KAAK+L,oBAAoBZ,EAAcO,EAAS,EAGtD,CAEAM,cACEhM,KAAKiM,UAAUC,OACjB,CAEQH,oBAAoBZ,EAA4BO,GAClDP,EAAagB,aACfnM,KAAKJ,QAAQwM,KAAKpM,KAAK2K,OAGzB3K,KAAKiM,UAAYjM,KAAKwK,OAAOzF,KAAK2G,EAAW,CAC3CW,WAAW,EACXC,cAAe,kBACfC,mBAAmB,EACnBlB,KAAMrL,KAAK+K,WACXyB,WAAY,CACV,eACA,gBAAgBrB,EAAasB,YAC7BtB,EAAauB,cAAgB,iBAAmB,kBAC5CvB,EAAaqB,WAAarB,EAAaqB,WAAa,IAI1DG,SAAU,CAAEC,IAAK,KACjBnC,iBAAkBzK,KAAKyK,mBAGzBzK,KAAKiM,UAAUY,cAAcf,UAAWT,KACtCE,OAAkB,qBAAsBJ,EAAa1I,KAAM,QAAS4I,GAEpE,MAAMyB,EAASzB,EACf,GAA2B,MAAvByB,GAAQC,YAKZ,GAAI/M,KAAK2K,MAAMqC,aAAaC,QAAU,EACpC,IACEnI,OAAOoI,OAAOxM,MAAMyM,WAAWjB,cACjB,MAKhBlM,KAAK0K,OAAO0C,SAAS,CAAC,MADpBpN,KAAK2K,MAAMS,SAASxG,IAAIqI,OAAS,EACN,CAAEI,WAAYrN,KAAK2K,MAAMuC,OAAQjC,MAAOI,GAExC,CAAEgC,WAAYrN,KAAK2K,MAAMuC,OAAOA,OAAQjC,MAAOI,SAd5ErL,KAAK0K,OAAO0C,SAAS,CAACN,EAAOC,aAcqD,GAItF/M,KAAK4K,kBAAkB0C,cACzB,CAAC3L,SAAA3B,KAAA,mBAAA4B,iBAtFU2I,GAAoB1I,MAAAC,MAAAD,mBAAAE,MAAAF,MAAAE,MAAAF,MAAAG,KAAAH,aAAA,EAAAF,SAAA3B,KAAA,UAAAoE,EAAAmJ,IAAA,MAApBhD,EAAoBiD,UAAA,uBAAAC,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,GAAA,WAApBtD,CAAoB,6FCZzB1I,MAAA,4BADFA,MAAA,cACEA,MAAA,EAAAiM,EAAA,sBACFjM,uCADiBA,MAAA,GAAAA,MAAA,mBAAAkM,yBAKflM,MAAA,4BADFA,MAAA,eACEA,MAAA,EAAAmM,EAAA,sBACFnM,uCADiBA,MAAA,GAAAA,MAAA,mBAAAkM,yBAOrBlM,MAAA,8CCTK,IAAMoM,EAAkB,MAAzB,MAAOA,EAIXvO,cAHSM,KAAAkO,SAAU,EACnBlO,KAAAmO,SAAU,CAEM,CAEhBC,gBACEpO,KAAKmO,SAAWnO,KAAKmO,OACvB,CAACxM,SAAA3B,KAAA,mBAAA4B,iBARUqM,EAAkB,EAAAtM,SAAA3B,KAAA,UAAAwI,EAAA+E,IAAA,MAAlBU,EAAkBT,UAAA,qBAAAa,OAAA,CAAAH,QAAA,WAAAI,mBAAAC,EAAAd,MAAA,EAAAC,KAAA,EAAAc,OAAA,2EAAAb,SAAA,SAAAC,EAAAC,MAAA,EAAAD,YDP/B/L,MAAA,WAAsBA,MAAA,0BAASgM,EAAAO,eAAe,GAE1CvM,MAAA,EAAA4M,EAAA,IAAA5M,CAIC,EAAA6M,EAAA,KAOL7M,QAEAA,MAAA,EAAA8M,EAAA,yBAAA9M,mBAfgDA,MAAA,UAAAA,MAAA,EAAA+M,EAAAf,EAAAM,UAC9CtM,MAAA,GAAAA,MAAA,QAAAgN,EAAAhB,EAAAK,SAAA,OAAAW,EAAA,igBCMWZ,CAAkB,mDCJxB,IAAMa,EAA6B,MAApC,MAAOA,EAEXC,QAAQC,GACNA,EAAMC,iBACR,CAACtN,SAAA3B,KAAA,mBAAA4B,iBAJUkN,EAA6B,EAAAnN,SAAA3B,KAAA,UAAAwI,EAAA0G,IAAA,MAA7BJ,EAA6BtB,UAAA,oCAAA2B,aAAA,SAAAvB,EAAAC,GAAA,EAAAD,oCAA7BC,EAAAkB,QAAAK,EAAe,aAAfN,CAA6B,qBCFpC,SAAUO,EAAgBC,GAC9B,MAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGnM,MAAQkM,EACXC,EAAGG,aAAa,WAAY,IAC5BH,EAAGI,MAAMhD,SAAW,WACpB4C,EAAGI,MAAMC,KAAO,UAChBJ,SAASK,KAAKC,YAAYP,GAC1B,MAAMQ,EACJP,SAASQ,eAAeC,WAAa,GACjCT,SAASQ,eAAeE,WAAW,GAEzCX,EAAGY,SACHX,SAASY,YAAY,QACrBZ,SAASK,KAAKQ,YAAYd,GACtBQ,IACFP,SAASQ,eAAeM,kBACxBd,SAASQ,eAAeO,SAASR,GAErC,iCCnBM,SAAUzJ,EAASvC,GACvB,OAAO,IAAIyM,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAc9M,GACrB4M,EAAOG,OAAS,KACdL,EAASE,EAAO7G,OAAkBiH,MAAM,KAAK,GAAE,EAEjDJ,EAAOK,QAAUC,IACfP,EAAOO,EAAK,CACd,EAEJ,CAEM,SAAUnQ,EAASiD,GACvB,OAAO,IAAIyM,QAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAS,IAAIC,WACnBD,EAAOO,WAAWnN,GAClB4M,EAAOG,OAAS,KACdL,EAAQE,EAAO7G,OAAgB,EAEjC6G,EAAOK,QAAUC,IACfP,EAAOO,EAAK,CACd,EAEJ,mFCrBM,SAAU7H,EAA4B/G,GAU1C,MATsC,CACpC8O,OAAQ,CACNC,QAASC,KACTC,WAAYjP,EACZkP,KAAM,CAACC,OAETC,gBAAiB,KACjBC,SAAS,EAGb,iDCLM,SAAUrI,EAAuB1J,GACnC,OAAO,IAAIgS,IAAiChS,EAAM,UAAW,OAAOmF,OAAO8M,aAC/E,2DCHM,MAAOD,EACXjS,YAAoBC,EAA0BkS,EAAwBC,GAAlD9R,KAAAL,OAA0BK,KAAA6R,SAAwB7R,KAAA8R,QAAkB,CAExFC,eAAeC,GACb,OAAOhS,KAAKL,KAAKc,IAAyB,GAAGT,KAAK6R,SAASG,IAAOhS,KAAK8R,UAAUxR,QAC/E2R,KAAWhB,IACTiB,QAAQC,KAAK,wCAAwCH,WAAchS,KAAK6R,SAAUZ,IAAK,EAChF5G,MAAG,MAGhB,uFCVF,IAAI+H,EAAS,EACb,MAAMC,EAAsB,oBAC5B,IACMC,EAAQ,MAAd,MAAMA,EAEF,SAAIC,GACA,OAAOvS,KAAKwS,MAChB,CACA,SAAID,CAAMnP,GACNpD,KAAKyS,UAAUrP,GACfpD,KAAKwS,OAASpP,CAClB,CAEA,WAAIsP,GACA,OAAO1S,KAAK2S,QAChB,CACA,WAAID,CAAQE,GACR5S,KAAK6S,uBAAuBD,EAChC,CAEA,eAAIE,GACA,OAAO9S,KAAK+S,YAChB,CACA,eAAID,CAAYE,GACZhT,KAAKiT,mBAAmBD,EAC5B,CACAtT,YAAYwT,EAASC,EAAaC,EAAgBC,EAAWC,GACzDtT,KAAKkT,QAAUA,EACflT,KAAKmT,YAAcA,EACnBnT,KAAKoT,eAAiBA,EACtBpT,KAAKqT,UAAYA,EACjBrT,KAAKsT,eAAiBA,EACtBtT,KAAKwS,OAAS,UAEdxS,KAAKuT,SAAU,EAKfvT,KAAK2M,SAAW,cAEhB3M,KAAKwT,KAAO,SAEZxT,KAAKyT,IAAMrB,IAEXpS,KAAK0T,gBAAiB,EAEtB1T,KAAK2T,yBAAwBC,OAAOC,MACpC7T,KAAK8T,aAAYF,OAAOG,KAiB5B,CAEAC,UACI,OAA0C,IAAnChU,KAAK2M,SAASsH,QAAQ,QACjC,CAEAC,UACI,OAA2C,IAApClU,KAAK2M,SAASsH,QAAQ,SACjC,CAKAE,kBACI,OAAOnU,KAAKoU,aAChB,CACAlJ,WAIIlL,KAAKqU,uBACDrU,KAAK0S,UAAY1S,KAAKoU,gBACtBpU,KAAKoU,cAAgBpU,KAAKsU,sBAC1BtU,KAAK6S,uBAAuB7S,KAAK0S,UAErC1S,KAAK0T,gBAAiB,CAC1B,CACA1H,cAGQhM,KAAKqT,UAAUkB,cACfvU,KAAKqT,UAAUkB,YAAYvU,KAAKoU,eAChCpU,KAAKwU,yBAAyBC,UAElCzU,KAAKoT,eAAesB,kBAAkB1U,KAAKmT,YAAYwB,cAAe3U,KAAK8S,YAC/E,CAEA8B,qBAEI,OAAO5U,KAAK2T,sBAAsBkB,YAAY7U,KAAKmT,YAAYwB,cAAe,CAC1EG,kBAAkB,GAE1B,CAEAR,sBACI,MAAMS,EAAe/U,KAAKqT,UAAU5D,cAAc,QAC5CuF,EAAc,mBACpBD,SAAarF,aAAa,KAAO,qBAAoB1P,KAAKyT,OAG1DsB,EAAarF,aAAa,cAAe,QACzCqF,EAAaE,UAAUC,IAAI7C,GACC,mBAAxBrS,KAAKsT,gBACLyB,EAAaE,UAAUC,IAAI,2BAE/BlV,KAAKmT,YAAYwB,cAAc7E,YAAYiF,GAEN,mBAA1BI,uBAAgE,mBAAxBnV,KAAKsT,eACpDtT,KAAKkT,QAAQkC,kBAAkB,KAC3BD,sBAAsB,KAClBJ,EAAaE,UAAUC,IAAIF,EAAW,EACzC,GAILD,EAAaE,UAAUC,IAAIF,GAExBD,CACX,CAEAlC,uBAAuBD,GACnB,MAAMyC,EAAwB,GAAEzC,GAAc,KAAK0C,OAI/CtV,KAAK0T,gBAAkB2B,IAAyBrV,KAAKoU,gBACrDpU,KAAKoU,cAAgBpU,KAAKsU,uBAE1BtU,KAAKoU,gBACLpU,KAAKoU,cAAcmB,YAAcF,GAErCrV,KAAK2S,SAAW0C,CACpB,CAEApC,mBAAmBD,GAEfhT,KAAKoT,eAAesB,kBAAkB1U,KAAKmT,YAAYwB,cAAe3U,KAAK8S,eAOtEE,GAAkBhT,KAAK4U,uBACxB5U,KAAKwV,2BAETxV,KAAK+S,aAAeC,EAGhBhT,KAAK4U,qBACL5U,KAAKoT,eAAeqC,SAASzV,KAAKmT,YAAYwB,cAAe3B,GAG7DhT,KAAK0V,0BAEb,CACAA,2BAES1V,KAAKwU,0BACNxU,KAAKwU,wBAA0BxU,KAAK8T,UAAUrE,cAAc,QAC5DzP,KAAKwU,wBAAwBS,UAAUC,IAAI,wBAE/ClV,KAAKwU,wBAAwBe,YAAcvV,KAAK8S,YAChD9S,KAAKoU,eAAetE,YAAY9P,KAAKwU,wBACzC,CACAgB,2BACIxV,KAAKwU,yBAAyBC,SAC9BzU,KAAKwU,6BAA0BmB,CACnC,CAEAlD,UAAUmD,GACN,MAAMX,EAAYjV,KAAKmT,YAAYwB,cAAcM,UACjDA,EAAUR,OAAQ,aAAYzU,KAAKwS,UAC/BoD,GACAX,EAAUC,IAAK,aAAYU,IAEnC,CAEAvB,uBAGI,MAAMwB,EAAS7V,KAAKmT,YAAYwB,cAAcmB,iBAAkB,aAAYzD,KAC5E,UAAW0C,KAAgBgB,MAAM1P,KAAKwP,GAC9Bd,IAAiB/U,KAAKoU,eACtBW,EAAaN,QAGzB,CAAC9S,SACQ3B,KAAKsC,UAAI,SAAAV,GAAA,WAAAA,GAAwF0Q,GAAVzQ,MAAoCA,OAApCA,MAA0DA,OAA1DA,MAAoFC,MAApFD,MAAiHA,OAAjHA,MAA0ImU,MAAqB,KAA4DrU,SAClT3B,KAAKiW,UADkFpU,MAAE,CAAAsG,KACJmK,EAAQ9E,UAAA,qBAAA0I,UAAA,gBAAAC,SAAA,GAAAhH,aAAA,SAAAvB,EAAAC,GAAA,EAAAD,GADN/L,MAAE,oBAAAgM,EAAA0F,QAAF1R,CAAE,kBAAAgM,EAAAmG,UAAFnS,CAAE,mBAAAgM,EAAAmG,UAAFnS,CAAE,oBAAAgM,EAAAqG,UAAFrS,CAAE,kBAAAgM,EAAAqG,UAAFrS,CAAE,4BAAAgM,EAAA2F,KAAF3R,CAAE,8BAAAgM,EAAA2F,KAAF3R,CAAE,4BAAAgM,EAAA2F,KAAF3R,CAAE,mBAAAgM,EAAAuI,SAAAvI,EAAA6E,QAAF7Q,CAAE,qBAAAgM,EAAAwI,SAAA,EAAAhI,OAAA,CAAAkE,MAAA,0BAAAgB,QAAA,6BACmH+C,OAAgBD,SAAA,+BAA8CC,OAAgB3J,SAAA,gCAAA+F,QAAA,uBAAAI,YAAA,sCAAAU,KAAA,wBAAA4C,OAAA,2BAA2ME,QAAgBC,SAAA,CAD9Z1U,SAEnG,OA1MKyQ,CAAQ,KA4PRkE,EAAc,MAApB,MAAMA,EAAe7U,SACR3B,KAAKsC,UAAI,SAAAV,GAAA,WAAAA,GAAwF4U,EAAc,EAAkD7U,SACjK3B,KAAKyW,UAtDkF5U,MAAE,CAAAsG,KAsDSqO,IAAyH7U,SAC3N3B,KAAK0W,UAvDkF7U,MAAE,CAAA+G,QAAA,CAuDmC+N,KAAYC,KAAiBA,QACrK,OAJKJ,CAAc","names":["AppDialogConfigService","constructor","http","context","dnnContext","globalConfigService","featuresService","this","dialogSettings$","loadFromService","getShared$","appId","getDialogSettings","pipe","shareReplay","refCount","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","i5","_angular_core__WEBPACK_IMPORTED_MODULE_5__","Yz7","factory","ɵfac","webApiTypeRoot","ContentTypesService","name","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopes","Object","keys","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","withFiles","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","EntitiesService","create","entity","update","entityId","type","tryForce","webApiEntityRoot","force","FeaturesModule","_angular_core__WEBPACK_IMPORTED_MODULE_0__","oAB","cJS","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","webApiRoot","nameId","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","DialogEntryComponent","dialog","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","consoleLogAngular","getComponent","then","component","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","ngOnDestroy","dialogRef","close","initContext","init","autoFocus","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","position","top","afterClosed","navRes","navigateUrl","pathFromRoot","length","parent","totalPopup","navigate","relativeTo","markForCheck","Xpm","selectors","decls","vars","template","rf","ctx","FieldHintComponent_Case_1_ng_container_1_Template","_r3","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c1","consts","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c0","FieldHintComponent_contFlowTmp","ClickStopPropagationDirective","onClick","event","stopPropagation","lG2","hostBindings","$event","copyToClipboard","str","el","document","createElement","setAttribute","style","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","catchError","console","warn","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","activeClass","classList","add","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hidden","disabled","booleanAttribute","features","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId?: number) {\r\n    appId ??= this.context.appId;\r\n    if (!this.dialogSettings$[appId])\r\n      this.dialogSettings$[appId] = this.getDialogSettings(appId).pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions are killed\r\n  }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n      tap(dialogSettings => {\r\n        this.globalConfigService.allowDebug(dialogSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[20]}