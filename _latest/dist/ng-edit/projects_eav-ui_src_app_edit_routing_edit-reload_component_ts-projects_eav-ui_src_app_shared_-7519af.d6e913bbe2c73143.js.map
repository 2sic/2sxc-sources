{"version":3,"file":"projects_eav-ui_src_app_edit_routing_edit-reload_component_ts-projects_eav-ui_src_app_shared_-7519af.d6e913bbe2c73143.js","mappings":"wRAoBO,IAAMA,EAAmB,MAA1B,MAAOA,EAIXC,YAAYC,EAAgBC,GAF5BC,KAAAC,OAAMC,KAAS,CAACN,wBAGd,MAAMO,EAAIH,KAAKC,IAAIG,GAAG,cAAe,KAAM,mBACrCC,EAAIN,EAAMO,SAASC,OACnBC,EAAMC,IAAWC,8BAA8BX,EAAO,gBAAgBM,EAAEM,QAAS,QAAQN,EAAEM,SACjG,IAAKH,EAAK,OAAOL,EAAES,MAAM,yBACzBd,EAAOe,SAAS,CAACL,IACjBL,EAAEW,EAAE,0BACN,CAACC,SAAAf,KAAA,mBAAAgB,iBAXUpB,GAAmBqB,MAAAC,MAAAD,MAAAC,MAAA,EAAAH,SAAAf,KAAA,UAAAmB,EAAAC,IAAA,MAAnBxB,EAAmByB,UAAA,sBAAAC,YAAA,EAAAC,SAAA,CAAAN,OAAAO,MAAA,EAAAC,KAAA,EAAAC,SAAA,SAAAC,EAAAC,GAAA,EAAAC,cAAA,WAAnBjC,CAAmB,kFCbhC,MAAMkC,EAAW,CACfC,KAAK,EACLC,sBAAsB,EACtBC,aAAa,GAIR,IAAMC,EAAY,MAAnB,MAAOA,EAIXrC,YAAoBsC,EAA0BC,GAA1BpC,KAAAmC,OAA0BnC,KAAAoC,UAF9CpC,KAAAC,OAAMC,KAAS,CAACgC,gBAAeJ,EAEmC,CAElEE,qBAAqBK,EAAkB9B,EAAgB+B,EAAgBC,GACrEvC,KAAKC,IAAIuC,KAAK,uBAAwB,CAAEH,WAAU9B,SAAQ+B,SAAQC,mBAElE,MAAME,IAAclC,EAQdmC,KAPcnC,GAAQoC,qBAAuB,IACtBC,SAAS,UAEtB,GAAK,UAAU5C,KAAKoC,QAAQS,UACvCJ,EAAY,IAAIlC,IAAW,IAC5B,aAAe+B,GAAU,KAEDQ,UAAU,GACtC,OAAO9C,KAAKmC,KAAKY,KAAmB,kBAAkBV,KAAYK,IAChE,CACEM,MAAOT,GAGb,CAEAN,aAAcgB,eAAcC,UAASZ,SAAQrC,QAC3CD,KAAKC,IAAIuC,KAAK,cAAe,CAAEvC,MAAKgD,eAAcC,UAASZ,WAO3D,MAAMI,GALJ,eAAiBO,GAAcE,KAAK,MAAQ,IAC1C,UAAUnD,KAAKoC,QAAQS,kBACRK,GAASC,KAAK,MAAQ,IACrC,aAAeb,GAAU,KAEDQ,UAAU,GACtC,OAAO9C,KAAKmC,KAAKY,KACf,8CAA8CL,IAC9C,GAEJ,CAAC3B,SAAAf,KAAA,mBAAAgB,iBAtCUkB,GAAYjB,MAAAC,MAAAD,MAAAmC,KAAA,EAAArC,SAAAf,KAAA,WAAAmB,EAAAkC,IAAA,OAAZnB,EAAYoB,QAAZpB,EAAYqB,mBAAZrB,CAAY,8DCNlB,IAAesB,EAAW,MAA3B,MAAgBA,EADtB3D,cAGYG,KAAAyD,cAAgB,IAAIC,KAE9BC,cACE3D,KAAK4D,SACP,CAGAA,UACE5D,KAAKyD,cAAcI,aACrB,CAAC9C,SAAAf,KAAA,mBAAAgB,iBAXmBwC,EAAW,EAAAzC,SAAAf,KAAA,WAAA8D,EAAAT,IAAA,OAAXG,EAAWF,QAAXE,EAAWD,mBAAXC,CAAW","names":["EditReloadComponent","constructor","router","route","this","log","classLog","l","fn","p","snapshot","params","url","UrlHelpers","newUrlIfCurrentContainsOldUrl","items","rNull","navigate","r","static","t","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_2__","VBU","selectors","standalone","features","decls","vars","template","rf","ctx","encapsulation","logSpecs","all","getAvailableEntities","getEntities","QueryService","http","context","queryUrl","fields","entitiesFilter","fnIf","hasParams","urlParams","toLocaleLowerCase","includes","appId","substring","post","Guids","contentTypes","itemIds","join","i2","jDH","factory","…µfac","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/routing/edit-reload.component.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { classLog } from '../../shared/logging';\r\nimport { EditUrlParams } from './edit-url-params.model';\r\nimport { UrlHelpers } from '../shared/helpers';\r\n\r\n/**\r\n * The purpose of this component is to refresh the edit dialog completely.\r\n * It works as follows:\r\n * 1. A close event of the child which requests a full refresh (probably just the history?)\r\n *    will cause the router to replace the Path to a url going to this control. This flushes the previous edit.\r\n * 2. This component will then navigate to the original edit dialog, restoring the original parameters. \r\n * \r\n * TODO: not sure if this is the best way to do this...\r\n */\r\n@Component({\r\n  selector: 'app-edit-reload',\r\n  template: '',\r\n  standalone: true,\r\n})\r\nexport class EditReloadComponent {\r\n\r\n  log = classLog({EditReloadComponent});\r\n\r\n  constructor(router: Router, route: ActivatedRoute) {\r\n    const l = this.log.fn('constructor', null, 'üîÑÔ∏è');\r\n    const p = route.snapshot.params as EditUrlParams;\r\n    const url = UrlHelpers.newUrlIfCurrentContainsOldUrl(route, `edit/refresh/${p.items}`, `edit/${p.items}`);\r\n    if (!url) return l.rNull('No URL to navigate to');\r\n    router.navigate([url]);\r\n    l.r('‚úÖ refresh complete');\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}