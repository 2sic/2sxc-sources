{"version":3,"file":"default-projects_core_object-utilities_ts-projects_eav-ui_src_app_shared_directives_mousedown-ba87ff.dacfde5c6730afd1.js","mappings":"iOAKO,IAAMA,EAAiC,MAAxC,MAAOA,EAEXC,YAAYC,GACVA,EAAMC,iBACR,iDAJWH,EAAiC,oCAAjCA,EAAiCI,UAAA,wCAAAC,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GAAjCE,MAAA,qBAAAC,GAAA,OAAAF,EAAAN,YAAAQ,EAAmB,cAAnBT,CAAiC,qBCGxC,SAAUU,EAA8CC,EAAQC,GACpE,OAAOA,EAAGD,EACZ,CASM,SAAUE,EAA8CF,EAAQC,GACpE,OAAOA,EAAGD,EACZ,8TCRA,SAASG,GAAcC,GACnB,MAAMC,EAAQD,EAAKE,WAAU,GACvBC,EAAoBF,EAAMG,iBAAiB,QAC3CC,EAAWL,EAAKK,SAASC,cAE/BL,EAAMM,gBAAgB,MACtB,QAASC,EAAI,EAAGA,EAAIL,EAAkBM,OAAQD,IAC1CL,EAAkBK,GAAGD,gBAAgB,MAEzC,MAAiB,WAAbF,EACAK,GAAmBV,EAAMC,IAEP,UAAbI,GAAqC,WAAbA,GAAsC,aAAbA,IACtDM,GAAkBX,EAAMC,GAE5BW,GAAa,SAAUZ,EAAMC,EAAOS,IACpCE,GAAa,0BAA2BZ,EAAMC,EAAOU,IAC9CV,CACX,CAEA,SAASW,GAAaC,EAAUb,EAAMC,EAAOa,GACzC,MAAMC,EAAqBf,EAAKI,iBAAiBS,GACjD,GAAIE,EAAmBN,OAAQ,CAC3B,MAAMO,EAAgBf,EAAMG,iBAAiBS,GAC7C,QAASL,EAAI,EAAGA,EAAIO,EAAmBN,OAAQD,IAC3CM,EAASC,EAAmBP,GAAIQ,EAAcR,GAEtD,CACJ,CAEA,IAAIS,GAAgB,EAEpB,SAASN,GAAkBO,EAAQjB,GAEZ,SAAfA,EAAMkB,OACNlB,EAAMmB,MAAQF,EAAOE,OAKN,UAAfnB,EAAMkB,MAAoBlB,EAAMoB,OAChCpB,EAAMoB,KAAO,aAAapB,EAAMoB,QAAQJ,OAEhD,CAEA,SAASP,GAAmBQ,EAAQjB,GAChC,MAAMqB,EAAUrB,EAAMsB,WAAW,MACjC,GAAID,EAGA,IACIA,EAAQE,UAAUN,EAAQ,EAAG,EACjC,OACQ,CAEhB,CAGA,SAASO,EAAqBC,GAC1B,MAAMC,EAAOD,EAAQE,wBAKrB,MAAO,CACHC,IAAKF,EAAKE,IACVC,MAAOH,EAAKG,MACZC,OAAQJ,EAAKI,OACbC,KAAML,EAAKK,KACXC,MAAON,EAAKM,MACZC,OAAQP,EAAKO,OACbC,EAAGR,EAAKQ,EACRC,EAAGT,EAAKS,EAEhB,CAOA,SAASC,EAAmBC,EAAYH,EAAGC,GACvC,MAAQP,MAAKE,SAAQC,OAAMF,SAAUQ,EACrC,OAAOF,GAAKP,GAAOO,GAAKL,GAAUI,GAAKH,GAAQG,GAAKL,CACxD,CAOA,SAASS,EAAcC,EAASX,EAAKG,GACjCQ,EAAQX,KAAOA,EACfW,EAAQT,OAASS,EAAQX,IAAMW,EAAQN,OACvCM,EAAQR,MAAQA,EAChBQ,EAAQV,MAAQU,EAAQR,KAAOQ,EAAQP,KAC3C,CAQA,SAASQ,GAAqBd,EAAMe,EAAWC,EAAUC,GACrD,MAAQf,MAAKC,QAAOC,SAAQC,OAAMC,QAAOC,UAAWP,EAC9CkB,EAAaZ,EAAQS,EACrBI,EAAaZ,EAASQ,EAC5B,OAAQE,EAAWf,EAAMiB,GACrBF,EAAWb,EAASe,GACpBH,EAAWX,EAAOa,GAClBF,EAAWb,EAAQe,CAC3B,CAGA,MAAME,GACFC,UAEAC,UAAY,IAAIC,IAChBC,YAAYH,GACRI,KAAKJ,UAAYA,CACrB,CAEAK,QACID,KAAKH,UAAUI,OACnB,CAEAC,MAAMC,GACFH,KAAKC,QACLD,KAAKH,UAAUO,IAAIJ,KAAKJ,UAAW,CAC/BS,eAAgBL,KAAKM,8BAEzBH,EAASI,QAAQjC,IACb0B,KAAKH,UAAUO,IAAI9B,EAAS,CACxB+B,eAAgB,CAAE5B,IAAKH,EAAQkC,UAAW5B,KAAMN,EAAQmC,YACxDvB,WAAYb,EAAqBC,IACpC,EAET,CAEAoC,aAAa3E,GACT,MAAM4E,KAASC,MAAgB7E,GACzB8E,EAAiBb,KAAKH,UAAUiB,IAAIH,GAC1C,IAAKE,EACD,OAAO,KAEX,MAAMR,EAAiBQ,EAAeR,eACtC,IAAIU,EACAC,EACJ,GAAIL,IAAWX,KAAKJ,UAAW,CAC3B,MAAMqB,EAAyBjB,KAAKM,4BACpCS,EAASE,EAAuBxC,IAChCuC,EAAUC,EAAuBrC,IACrC,MAEImC,EAASJ,EAAOH,UAChBQ,EAAUL,EAAOF,WAErB,MAAMS,EAAgBb,EAAe5B,IAAMsC,EACrCI,EAAiBd,EAAezB,KAAOoC,EAG7C,OAAAhB,KAAKH,UAAUU,QAAQ,CAACa,EAAUxE,KAC1BwE,EAASlC,YAAcyB,IAAW/D,GAAQ+D,EAAOU,SAASzE,IAC1DuC,EAAciC,EAASlC,WAAYgC,EAAeC,EAAc,GAGxEd,EAAe5B,IAAMsC,EACrBV,EAAezB,KAAOoC,EACf,CAAEvC,IAAKyC,EAAetC,KAAMuC,EACvC,CAOAb,4BACI,MAAO,CAAE7B,IAAK6C,OAAOC,QAAS3C,KAAM0C,OAAOE,QAC/C,EAOJ,SAASC,GAAYC,EAAS9B,GAC1B,MAAM+B,EAAYD,EAAQC,UAC1B,GAAyB,IAArBA,EAAUtE,QAAgBsE,EAAU,GAAGC,WAAahC,EAAUiC,aAC9D,OAAOF,EAAU,GAErB,MAAMG,EAAUlC,EAAUmC,cAAc,OACxCJ,SAAUpB,QAAQ3D,GAAQkF,EAAQE,YAAYpF,IACvCkF,CACX,CAOA,SAASG,EAAaC,EAAMpE,EAAQqE,GAChC,QAASC,KAAOtE,EACZ,GAAIA,EAAOuE,eAAeD,GAAM,CAC5B,MAAMpE,EAAQF,EAAOsE,GACjBpE,EACAkE,EAAKI,YAAYF,EAAKpE,EAAOmE,GAAqBI,IAAIH,GAAO,YAAc,IAG3EF,EAAKM,eAAeJ,EAE5B,CAEJ,OAAOF,CACX,CAOA,SAASO,EAA6BnE,EAASoE,GAC3C,MAAMC,EAAaD,EAAS,GAAK,OACjCT,EAAa3D,EAAQsE,MAAO,CACxB,eAAgBF,EAAS,GAAK,OAC9B,oBAAqBA,EAAS,GAAK,OACnC,8BAA+BA,EAAS,GAAK,cAC7C,cAAeC,EACf,kBAAmBA,EACnB,sBAAuBA,EACvB,mBAAoBA,GAE5B,CAQA,SAASE,GAAiBvE,EAASoE,EAAQP,GACvCF,EAAa3D,EAAQsE,MAAO,CACxBxB,SAAUsB,EAAS,GAAK,QACxBjE,IAAKiE,EAAS,GAAK,IACnBI,QAASJ,EAAS,GAAK,IACvB9D,KAAM8D,EAAS,GAAK,UACrBP,EACP,CAKA,SAASY,EAAkBC,EAAWC,GAClC,OAAOA,GAAwC,QAApBA,EACrBD,EAAY,IAAMC,EAClBD,CACV,CAMA,SAASE,GAAiBvC,EAAQwC,GAC9BxC,EAAOiC,MAAM/D,MAAQ,GAAGsE,EAAWtE,UACnC8B,EAAOiC,MAAM9D,OAAS,GAAGqE,EAAWrE,WACpC6B,EAAOiC,MAAMI,UAAYI,EAAaD,EAAWvE,KAAMuE,EAAW1E,IACtE,CAMA,SAAS2E,EAAarE,EAAGC,GAGrB,MAAO,eAAeqE,KAAKC,MAAMvE,SAASsE,KAAKC,MAAMtE,UACzD,CAGA,SAASuE,GAAsBvF,GAE3B,MAAMwF,EAAaxF,EAAMd,cAAcuG,QAAQ,OAAQ,EAAK,EAAI,IAChE,OAAOC,WAAW1F,GAASwF,CAC/B,CAmBA,SAASG,EAAsBC,EAAe3F,GAE1C,OADc2F,EAAcC,iBAAiB5F,GAChC6F,MAAM,KAAKC,IAAIC,GAAQA,EAAKC,OAC7C,CAGA,MAAM9B,GAAsB,IAAI+B,IAAI,CAEhC,aAEJ,MAAMC,GACFvE,UACAwE,aACAC,WACAC,gBACAC,iBACAC,cACAC,sBACAC,kBACAC,QACAC,UAEAC,qBAEAC,SACA,WAAIxG,GACA,OAAO0B,KAAK8E,QAChB,CACA/E,YAAYH,EAAWwE,EAAcC,EAAYC,EAAiBC,EAAkBC,EAAeC,EAAuBC,EAAmBC,EAASC,GAClJ5E,KAAKJ,UAAYA,EACjBI,KAAKoE,aAAeA,EACpBpE,KAAKqE,WAAaA,EAClBrE,KAAKsE,gBAAkBA,EACvBtE,KAAKuE,iBAAmBA,EACxBvE,KAAKwE,cAAgBA,EACrBxE,KAAKyE,sBAAwBA,EAC7BzE,KAAK0E,kBAAoBA,EACzB1E,KAAK2E,QAAUA,EACf3E,KAAK4E,UAAYA,CACrB,CACAG,OAAOC,GACHhF,KAAK8E,SAAW9E,KAAKiF,iBACrBD,EAAOhD,YAAYhC,KAAK8E,UAGpBI,GAAgBlF,KAAK8E,WACrB9E,KAAK8E,SAASK,aAEtB,CACAC,UACIpF,KAAK8E,SAASO,SACdrF,KAAK6E,sBAAsBO,UAC3BpF,KAAK8E,SAAW9E,KAAK6E,qBAAuB,IAChD,CACAS,aAAatH,GACTgC,KAAK8E,SAASlC,MAAMI,UAAYhF,CACpC,CACAQ,wBACI,OAAOwB,KAAK8E,SAAStG,uBACzB,CACA+G,SAASC,GACLxF,KAAK8E,SAASW,UAAUC,IAAIF,EAChC,CACAG,wBACI,OAjFR,SAASC,GAAmCtH,GACxC,MAAMsF,EAAgBiC,iBAAiBvH,GACjCwH,EAAyBnC,EAAsBC,EAAe,uBAC9DmC,EAAWD,EAAuBE,KAAKC,GAAiB,cAATA,GAAiC,QAATA,GAE7E,IAAKF,EACD,OAAO,EAIX,MAAMG,EAAgBJ,EAAuBrC,QAAQsC,GAC/CI,EAAexC,EAAsBC,EAAe,uBACpDwC,EAAYzC,EAAsBC,EAAe,oBACvD,OAAQL,GAAsB4C,EAAaD,IACvC3C,GAAsB6C,EAAUF,GACxC,CAkEeN,CAAmC5F,KAAK8E,SACnD,CACAuB,iBAAiBpI,EAAMqI,GACnB,OAAOtG,KAAK4E,UAAU2B,OAAOvG,KAAK8E,SAAU7G,EAAMqI,EACtD,CACArB,iBACI,MAAMuB,EAAgBxG,KAAKuE,iBACrBkC,EAAezG,KAAKwE,cACpBkC,EAAkBF,EAAgBA,EAAcG,SAAW,KACjE,IAAIC,EACJ,GAAIF,GAAmBF,EAAe,CAGlC,MAAMK,EAAWL,EAAcM,UAAY9G,KAAKsE,gBAAkB,KAC5D5C,EAAU8E,EAAcO,cAAcC,mBAAmBN,EAAiBF,EAActI,SAC9FwD,EAAQuF,gBACRL,EAAUnF,GAAYC,EAAS1B,KAAKJ,WACpCI,KAAK6E,qBAAuBnD,EACxB8E,EAAcM,UACd5D,GAAiB0D,EAASC,GAG1BD,EAAQhE,MAAMI,UAAYI,EAAapD,KAAKyE,sBAAsB1F,EAAGiB,KAAKyE,sBAAsBzF,EAExG,MAEI4H,EAAUjK,GAAcqD,KAAKoE,cAC7BlB,GAAiB0D,EAAS5G,KAAKsE,iBAC3BtE,KAAK0E,oBACLkC,EAAQhE,MAAMI,UAAYhD,KAAK0E,mBAGvCzC,SAAa2E,EAAQhE,MAAO,CAGxB,iBAAkB,OAMlBsE,OAAUhC,GAAgB0B,GAAW,aAAe,IACpDxF,SAAY,QACZ3C,IAAO,IACPG,KAAQ,IACR,UAAWoB,KAAK2E,QAAU,IAC3BxC,IACHM,EAA6BmE,GAAS,GACtCA,EAAQnB,UAAUC,IAAI,oBACtBkB,EAAQO,aAAa,UAAW,UAChCP,EAAQO,aAAa,MAAOnH,KAAKqE,YAC7BoC,IACIW,MAAMC,QAAQZ,GACdA,EAAalG,QAAQiF,GAAaoB,EAAQnB,UAAUC,IAAIF,IAGxDoB,EAAQnB,UAAUC,IAAIe,IAGvBG,CACX,EAGJ,SAAS1B,GAAgB5G,GACrB,MAAO,gBAAiBA,CAC5B,CAGA,MAAMgJ,GAA8B,CAAEC,SAAS,GAEzCC,GAA6B,CAAED,SAAS,GAExCE,GAAgC,CAClCF,SAAS,EACTG,SAAS,GAUPC,GAA0B,IAAIzD,IAAI,CAEpC,aAKJ,MAAM0D,GACFC,QACAjI,UACAkI,QACAC,eACAC,kBACApD,UACAqD,qBACAC,8BAEApD,SAEAqD,kBAEAC,gBAEAC,aAEAC,yBAEA7D,sBAKA8D,QAOAC,kBAAoB,CAAEzJ,EAAG,EAAGC,EAAG,GAE/ByJ,iBAAmB,CAAE1J,EAAG,EAAGC,EAAG,GAE9B0F,kBAKAgE,qBAAsBC,UAAO,GAE7BC,UAEAC,kBAEAC,cAEAC,iBAEAC,YAAc,IAAIC,IAElBC,uBAEAC,sCAEAC,0BAKAhF,aAIAiF,iBAKAC,yBAEAC,yBAA2BC,KAAaC,MAExCC,uBAAyBF,KAAaC,MAEtCE,oBAAsBH,KAAaC,MAEnCG,oBAAsBJ,KAAaC,MAMnCI,oBAEAC,eAEAC,iBAAmB,KAEnBC,4BAA6B,EAE7B1F,gBAEA2F,aAEAC,cAEA3F,iBAEA4F,qBAEAC,SAAW,GAEXC,iBAAmB,IAAInG,IAEvBoG,eAEAjG,WAAa,MAEbkG,eAMAC,kBAEAC,SAKAC,eAAiB,EAEjBjE,aAKAkE,MAAQ,EAER,YAAIC,GACA,OAAO5K,KAAK6K,cAAgB7K,KAAKsK,iBAAkBtK,KAAKsK,eAAeM,SAC3E,CACA,YAAIA,CAAS5M,GACLA,IAAUgC,KAAK6K,YACf7K,KAAK6K,UAAY7M,EACjBgC,KAAK8K,gCACL9K,KAAKoK,SAAS7J,QAAQwK,GAAUtI,EAA6BsI,EAAQ/M,IAE7E,CACA6M,WAAY,EAEZG,cAAgB,IAAI/B,IAEpBgC,QAAU,IAAIhC,IAEdiC,SAAW,IAAIjC,IAEfkC,MAAQ,IAAIlC,IAEZmC,QAAU,IAAInC,IAEdoC,OAAS,IAAIpC,IAEbqC,QAAU,IAAIrC,IAKdsC,MAAQvL,KAAKgJ,YAEbwC,KAOAC,kBACA1L,YAAYzB,EAASuJ,EAASjI,EAAWkI,EAASC,EAAgBC,EAAmBpD,GACjF5E,KAAK6H,QAAUA,EACf7H,KAAKJ,UAAYA,EACjBI,KAAK8H,QAAUA,EACf9H,KAAK+H,eAAiBA,EACtB/H,KAAKgI,kBAAoBA,EACzBhI,KAAK4E,UAAYA,EACjB5E,KAAK0L,gBAAgBpN,GAASqN,WAAW9D,EAAQ+D,eAAiB,MAClE5L,KAAK+I,iBAAmB,IAAIpJ,GAAsBC,GAClDoI,EAAkB6D,iBAAiB7L,KACvC,CAKA8L,wBACI,OAAO9L,KAAKqI,YAChB,CAEA0D,iBACI,OAAO/L,KAAKoE,YAChB,CAKA4H,oBACI,OAAOhM,KAAKiM,aAAejM,KAAK8L,wBAA0B9L,KAAK+L,gBACnE,CAEAG,YAAYC,GACRnM,KAAKoK,SAAW+B,EAAQpI,IAAIgH,MAAUqB,MAAcrB,IACpD/K,KAAKoK,SAAS7J,QAAQwK,GAAUtI,EAA6BsI,EAAQ/K,KAAK4K,WAC1E5K,KAAK8K,gCAKL,MAAMuB,EAAkB,IAAInI,IAC5B,OAAAlE,KAAKqK,iBAAiB9J,QAAQwK,IACtB/K,KAAKoK,SAAS3G,QAAQsH,IAAU,GAChCsB,EAAgB3G,IAAIqF,EAAM,GAGlC/K,KAAKqK,iBAAmBgC,EACjBrM,IACX,CAKAsM,oBAAoB3F,GAChB,OAAA3G,KAAKuE,iBAAmBoC,EACjB3G,IACX,CAKAuM,wBAAwB5F,GACpB,OAAA3G,KAAKmK,qBAAuBxD,EACrB3G,IACX,CAMA0L,gBAAgBc,GACZ,MAAMlO,KAAU8N,MAAcI,GAC9B,OAAIlO,IAAY0B,KAAKoE,eACjBpE,KAAKyM,8BACLzM,KAAKiI,qBAAuBjI,KAAK8H,QAAQ4E,kBAAkB,IAAM,IAC7DC,MAAsB3M,KAAK4E,UAAWtG,EAAS,YAAa0B,KAAK4M,aAAcpF,KAA0B,EACzGmF,MAAsB3M,KAAK4E,UAAWtG,EAAS,aAAc0B,KAAK4M,aAActF,KAA2B,EAC3GqF,MAAsB3M,KAAK4E,UAAWtG,EAAS,YAAa0B,KAAK6M,iBAAkBrF,MAEvFxH,KAAK0E,uBAAoBoI,EACzB9M,KAAKoE,aAAe9F,UAEbyO,WAAe,KAAe/M,KAAKoE,wBAAwB2I,aAClE/M,KAAKqJ,iBAAmBrJ,KAAKoE,aAAa4I,iBAEvChN,IACX,CAIAiN,oBAAoBC,GAChB,OAAAlN,KAAK+J,iBAAmBmD,KAAkBd,MAAcc,GAAmB,KAC3ElN,KAAK4J,oBAAoBuD,cACrBD,IACAlN,KAAK4J,oBAAsB5J,KAAK+H,eAC3BqF,OAAO,IACPC,UAAU,IAAMrN,KAAKsN,mCAEvBtN,IACX,CAEA2L,WAAW3G,GACP,OAAAhF,KAAKuK,eAAiBvF,EACfhF,IACX,CAEAuN,UACIvN,KAAKyM,8BAGDzM,KAAKiM,cAGLjM,KAAKoE,cAAciB,SAEvBrF,KAAKuI,SAASlD,SACdrF,KAAKwN,kBACLxN,KAAKyN,sBACLzN,KAAKgI,kBAAkB0F,eAAe1N,MACtCA,KAAK2N,mBACL3N,KAAKgL,cAAc4C,WACnB5N,KAAKiL,QAAQ2C,WACb5N,KAAKkL,SAAS0C,WACd5N,KAAKmL,MAAMyC,WACX5N,KAAKoL,QAAQwC,WACb5N,KAAKqL,OAAOuC,WACZ5N,KAAKsL,QAAQsC,WACb5N,KAAKgJ,YAAY4E,WACjB5N,KAAKoK,SAAW,GAChBpK,KAAKqK,iBAAiBpK,QACtBD,KAAKsK,oBAAiBwC,EACtB9M,KAAK4J,oBAAoBuD,cACzBnN,KAAK+I,iBAAiB9I,QACtBD,KAAK+J,iBACD/J,KAAKoE,aACDpE,KAAKqJ,iBACDrJ,KAAKmK,qBACDnK,KAAKuE,iBACDvE,KAAKuI,QACDvI,KAAKuK,eACD,IAChC,CAEA0B,aACI,OAAOjM,KAAK0I,uBAAyB1I,KAAKgI,kBAAkBiE,WAAWjM,KAC3E,CAEA6N,QACI7N,KAAKoE,aAAaxB,MAAMI,UAAYhD,KAAK0E,mBAAqB,GAC9D1E,KAAKyI,iBAAmB,CAAE1J,EAAG,EAAGC,EAAG,GACnCgB,KAAKwI,kBAAoB,CAAEzJ,EAAG,EAAGC,EAAG,EACxC,CAKA8O,cAAc/C,IACL/K,KAAKqK,iBAAiB9H,IAAIwI,IAAW/K,KAAKoK,SAAS3G,QAAQsH,IAAU,IACtE/K,KAAKqK,iBAAiB3E,IAAIqF,GAC1BtI,EAA6BsI,GAAQ,GAE7C,CAKAgD,aAAahD,GACL/K,KAAKqK,iBAAiB9H,IAAIwI,KAC1B/K,KAAKqK,iBAAiB2D,OAAOjD,GAC7BtI,EAA6BsI,EAAQ/K,KAAK4K,UAElD,CAEAqD,cAAcC,GACV,OAAAlO,KAAKqE,WAAa6J,EACXlO,IACX,CAEAmO,mBAAmBC,GACfpO,KAAKsK,eAAiB8D,CAC1B,CAIAC,sBACI,MAAMjN,EAAWpB,KAAKiM,aAAejM,KAAKyI,iBAAmBzI,KAAKwI,kBAClE,MAAO,CAAEzJ,EAAGqC,EAASrC,EAAGC,EAAGoC,EAASpC,EACxC,CAKAsP,oBAAoBtQ,GAChB,OAAAgC,KAAKyI,iBAAmB,CAAE1J,EAAG,EAAGC,EAAG,GACnCgB,KAAKwI,kBAAkBzJ,EAAIf,EAAMe,EACjCiB,KAAKwI,kBAAkBxJ,EAAIhB,EAAMgB,EAC5BgB,KAAKsK,gBACNtK,KAAKuO,2BAA2BvQ,EAAMe,EAAGf,EAAMgB,GAE5CgB,IACX,CAKAwO,qBAAqBxQ,GACjB,OAAAgC,KAAKmI,kBAAoBnK,EAClBgC,IACX,CAEAyO,+BACI,MAAMrN,EAAWpB,KAAKoJ,0BAClBhI,GAAYpB,KAAKsK,gBACjBtK,KAAK0O,2BAA2B1O,KAAK2O,+BAA+BvN,GAAWA,EAEvF,CAEAuM,mBACI3N,KAAKuJ,yBAAyB4D,cAC9BnN,KAAK0J,uBAAuByD,cAC5BnN,KAAK2J,oBAAoBwD,cACzBnN,KAAKkI,kCACLlI,KAAKkI,mCAAgC4E,CACzC,CAEAU,kBACIxN,KAAK8E,UAAUM,UACfpF,KAAK8E,SAAW,IACpB,CAEA2I,sBACIzN,KAAKqI,cAAchD,SACnBrF,KAAKoI,iBAAiBhD,UACtBpF,KAAKqI,aAAerI,KAAKoI,gBAAkB,IAC/C,CAEAwE,aAAgB7Q,IAGZ,GAFAiE,KAAKgL,cAAc4D,OAEf5O,KAAKoK,SAAS/M,OAAQ,CACtB,MAAMwR,EAAe7O,KAAK8O,iBAAiB/S,GACvC8S,IAAiB7O,KAAKqK,iBAAiB9H,IAAIsM,KAAkB7O,KAAK4K,UAClE5K,KAAK+O,wBAAwBF,EAAc9S,EAEnD,MACUiE,KAAK4K,UACX5K,KAAK+O,wBAAwB/O,KAAKoE,aAAcrI,EAAK,EAI7DiT,aAAgBjT,IACZ,MAAMkT,EAAkBjP,KAAKkP,0BAA0BnT,GACvD,IAAKiE,KAAK0I,sBAAuB,CAQ7B,GAPkBrF,KAAK8L,IAAIF,EAAgBlQ,EAAIiB,KAAKyE,sBAAsB1F,GACxDsE,KAAK8L,IAAIF,EAAgBjQ,EAAIgB,KAAKyE,sBAAsBzF,IACzBgB,KAAK6H,QAAQuH,mBAKzC,CACjB,MAAMC,EAAiBC,KAAKC,OAASvP,KAAK8J,eAAiB9J,KAAKwP,mBAAmBzT,GAC7EqS,EAAYpO,KAAKsK,eACvB,IAAK+E,EAED,YADArP,KAAKyP,iBAAiB1T,KAMrBqS,IAAeA,EAAUnC,eAAiBmC,EAAUsB,iBAGjD3T,EAAM4T,YACN5T,EAAM6T,iBAEV5P,KAAK0I,oBAAoBtI,KAAI,GAC7BJ,KAAK8H,QAAQ+H,IAAI,IAAM7P,KAAK8P,mBAAmB/T,IAEvD,CACA,MACJ,CAIIA,EAAM4T,YACN5T,EAAM6T,iBAEV,MAAMG,EAA6B/P,KAAK2O,+BAA+BM,GAIvE,GAHAjP,KAAK4I,WAAY,EACjB5I,KAAKoJ,0BAA4B6F,EACjCjP,KAAKgQ,6BAA6BD,GAC9B/P,KAAKsK,eACLtK,KAAK0O,2BAA2BqB,EAA4Bd,OAE3D,CAGD,MAAMgB,EAASjQ,KAAKyL,kBAAoBzL,KAAKsE,gBAAkBtE,KAAKyE,sBAC9DyL,EAAkBlQ,KAAKyI,iBAC7ByH,EAAgBnR,EAAIgR,EAA2BhR,EAAIkR,EAAOlR,EAAIiB,KAAKwI,kBAAkBzJ,EACrFmR,EAAgBlR,EAAI+Q,EAA2B/Q,EAAIiR,EAAOjR,EAAIgB,KAAKwI,kBAAkBxJ,EACrFgB,KAAKuO,2BAA2B2B,EAAgBnR,EAAGmR,EAAgBlR,EACvE,CAIIgB,KAAKgJ,YAAYmH,UAAU9S,QAC3B2C,KAAK8H,QAAQ+H,IAAI,KACb7P,KAAKgJ,YAAY4F,KAAK,CAClB9Q,OAAQkC,KACRiP,gBAAiBc,EACjBhU,QACAqU,SAAUpQ,KAAKqQ,iBAAiBN,GAChCO,MAAOtQ,KAAKkJ,wBACf,EACJ,EAITqH,WAAcxU,IACViE,KAAKyP,iBAAiB1T,EAAK,EAM/B0T,iBAAiB1T,GAKb,GAAKiE,KAAKgI,kBAAkBiE,WAAWjM,QAGvCA,KAAK2N,mBACL3N,KAAKgI,kBAAkBwI,aAAaxQ,MACpCA,KAAK8K,gCACD9K,KAAKoK,WACLpK,KAAKoE,aAAaxB,MAAM6N,wBACpBzQ,KAAKsJ,0BAERtJ,KAAK0I,uBAIV,GADA1I,KAAKkL,SAAS0D,KAAK,CAAE9Q,OAAQkC,KAAMjE,UAC/BiE,KAAKsK,eAELtK,KAAKsK,eAAeoG,iBACpB1Q,KAAK2Q,+BAA+BC,KAAK,KACrC5Q,KAAK6Q,sBAAsB9U,GAC3BiE,KAAK8Q,2BACL9Q,KAAKgI,kBAAkBwI,aAAaxQ,KAAI,OAG3C,CAIDA,KAAKwI,kBAAkBzJ,EAAIiB,KAAKyI,iBAAiB1J,EACjD,MAAMkQ,EAAkBjP,KAAKkP,0BAA0BnT,GACvDiE,KAAKwI,kBAAkBxJ,EAAIgB,KAAKyI,iBAAiBzJ,EACjDgB,KAAK8H,QAAQ+H,IAAI,KACb7P,KAAKmL,MAAMyD,KAAK,CACZ9Q,OAAQkC,KACRoQ,SAAUpQ,KAAKqQ,iBAAiBpB,GAChC8B,UAAW9B,EACXlT,SACH,GAELiE,KAAK8Q,2BACL9Q,KAAKgI,kBAAkBwI,aAAaxQ,KACxC,CACJ,CAEA8P,mBAAmB/T,GACXiV,EAAajV,KACbiE,KAAK6J,oBAAsByF,KAAKC,OAEpCvP,KAAK8K,gCAEL,MAAMmG,EAAajR,KAAKkR,iBAClBC,EAAgBnR,KAAKsK,eAQ3B,GAPI2G,GAGAjR,KAAK8H,QAAQ4E,kBAAkB,KAC3B1M,KAAKkI,iCAAgCyE,MAAsB3M,KAAK4E,UAAWqM,EAAY,cAAeG,GAAsB3J,GAA6B,GAG7J0J,EAAe,CACf,MAAM7S,EAAU0B,KAAKoE,aACfY,EAAS1G,EAAQ+S,WACjBC,EAAetR,KAAKqI,aAAerI,KAAKuR,4BACxCC,EAAUxR,KAAKuI,QACjBvI,KAAKuI,SACDvI,KAAKJ,UAAU6R,cAAkF,IAEzGzM,EAAO0M,aAAaF,EAAQlT,GAG5B0B,KAAK0E,kBAAoBpG,EAAQsE,MAAMI,WAAa,GAGpDhD,KAAK8E,SAAW,IAAIX,GAAWnE,KAAKJ,UAAWI,KAAKoE,aAAcpE,KAAKqE,WAAYrE,KAAKsE,gBAAiBtE,KAAKuE,kBAAoB,KAAMvE,KAAKyG,cAAgB,KAAMzG,KAAKyE,sBAAuBzE,KAAK0E,kBAAmB1E,KAAK6H,QAAQ8J,QAAU,IAAM3R,KAAK4E,WACzP5E,KAAK8E,SAASC,OAAO/E,KAAK4R,0BAA0B5M,EAAQiM,IAI5DpO,GAAiBvE,GAAS,EAAOqJ,IACjC3H,KAAKJ,UAAUiS,KAAK7P,YAAYgD,EAAO8M,aAAaR,EAAahT,IACjE0B,KAAKiL,QAAQ2D,KAAK,CAAE9Q,OAAQkC,KAAMjE,UAClCoV,EAAcY,QACd/R,KAAK6I,kBAAoBsI,EACzBnR,KAAK8I,cAAgBqI,EAAca,aAAahS,KACpD,MAEIA,KAAKiL,QAAQ2D,KAAK,CAAE9Q,OAAQkC,KAAMjE,UAClCiE,KAAK6I,kBAAoB7I,KAAK8I,mBAAgBgE,EAIlD9M,KAAK+I,iBAAiB7I,MAAMiR,EAAgBA,EAAcc,uBAAyB,GACvF,CAOAlD,wBAAwBmD,EAAkBnW,GAGlCiE,KAAKuK,gBACLxO,EAAMC,kBAEV,MAAMiQ,EAAajM,KAAKiM,aAClBkG,EAAkBnB,EAAajV,GAC/BqW,GAA0BD,GAAoC,IAAjBpW,EAAMsW,OACnD7F,EAAcxM,KAAKoE,aACnBzD,KAASC,MAAgB7E,GACzBuW,GAAoBH,GACtBnS,KAAK6J,qBACL7J,KAAK6J,oBA9mBe,IA8mBiCyF,KAAKC,MACxDgD,EAAcJ,KACdK,MAAiCzW,IAAK,EACtC0W,MAAgC1W,GAWtC,GAJI4E,GAAUA,EAAO+R,WAA4B,cAAf3W,EAAMgC,MACpChC,EAAM6T,iBAGN3D,GAAcmG,GAA0BE,GAAoBC,EAC5D,OAKJ,GAAIvS,KAAKoK,SAAS/M,OAAQ,CACtB,MAAMsV,EAAanG,EAAY5J,MAC/B5C,KAAKsJ,yBAA2BqJ,EAAWlC,yBAA2B,GACtEkC,EAAWlC,wBAA0B,aACzC,CACAzQ,KAAK4I,WAAY,EACjB5I,KAAK0I,oBAAoBtI,IAAIJ,KAAK4I,WAGlC5I,KAAK2N,mBACL3N,KAAKsE,gBAAkBtE,KAAKoE,aAAa5F,wBACzCwB,KAAKuJ,yBAA2BvJ,KAAKgI,kBAAkB4K,YAAYvF,UAAUrN,KAAKgP,cAClFhP,KAAK0J,uBAAyB1J,KAAKgI,kBAAkB6K,UAAUxF,UAAUrN,KAAKuQ,YAC9EvQ,KAAK2J,oBAAsB3J,KAAKgI,kBAC3B8K,SAAS9S,KAAKkR,kBACd7D,UAAU0F,GAAe/S,KAAKgT,gBAAgBD,IAC/C/S,KAAK+J,mBACL/J,KAAKkK,cAAgB7L,EAAqB2B,KAAK+J,mBAKnD,MAAMrD,EAAkB1G,KAAKuE,iBAC7BvE,KAAKsI,yBACD5B,GAAmBA,EAAgBC,WAAaD,EAAgBI,UAC1D,CAAE/H,EAAG,EAAGC,EAAG,GACXgB,KAAKiT,6BAA6BjT,KAAKsE,gBAAiB4N,EAAkBnW,GACpF,MAAMkT,EAAmBjP,KAAKyE,sBAC1BzE,KAAKoJ,0BACDpJ,KAAKkP,0BAA0BnT,GACvCiE,KAAKkJ,uBAAyB,CAAEnK,EAAG,EAAGC,EAAG,GACzCgB,KAAKmJ,sCAAwC,CAAEpK,EAAGkQ,EAAgBlQ,EAAGC,EAAGiQ,EAAgBjQ,GACxFgB,KAAK8J,eAAiBwF,KAAKC,MAC3BvP,KAAKgI,kBAAkBkL,cAAclT,KAAMjE,EAC/C,CAEA8U,sBAAsB9U,GAKlB8G,GAAiB7C,KAAKoE,cAAc,EAAMuD,IAC1C3H,KAAKuI,QAAQ8I,WAAWS,aAAa9R,KAAKoE,aAAcpE,KAAKuI,SAC7DvI,KAAKwN,kBACLxN,KAAKyN,sBACLzN,KAAKsE,gBACDtE,KAAKkK,cACDlK,KAAKiK,aACDjK,KAAK0E,uBACDoI,EAEhB9M,KAAK8H,QAAQ+H,IAAI,KACb,MAAMzB,EAAYpO,KAAKsK,eACjB6I,EAAe/E,EAAU4D,aAAahS,MACtCiP,EAAkBjP,KAAKkP,0BAA0BnT,GACjDqU,EAAWpQ,KAAKqQ,iBAAiBpB,GACjCmE,EAAyBhF,EAAUiF,iBAAiBpE,EAAgBlQ,EAAGkQ,EAAgBjQ,GAC7FgB,KAAKmL,MAAMyD,KAAK,CAAE9Q,OAAQkC,KAAMoQ,WAAUW,UAAW9B,EAAiBlT,UACtEiE,KAAKsL,QAAQsD,KAAK,CACd0E,KAAMtT,KACNmT,eACAI,cAAevT,KAAK8I,cACpBsF,UAAWA,EACXoF,kBAAmBxT,KAAK6I,kBACxBuK,yBACAhD,WACAW,UAAW9B,EACXlT,UAEJqS,EAAUqF,KAAKzT,KAAMmT,EAAcnT,KAAK8I,cAAe9I,KAAK6I,kBAAmBuK,EAAwBhD,EAAUnB,EAAiBlT,GAClIiE,KAAKsK,eAAiBtK,KAAK6I,mBAEnC,CAKA6F,4BAA6B3P,IAAGC,MAAOD,EAAG2U,EAAM1U,EAAG2U,IAE/C,IAAIC,EAAe5T,KAAK6I,kBAAkBgL,iCAAiC7T,KAAMjB,EAAGC,IAK/E4U,GACD5T,KAAKsK,iBAAmBtK,KAAK6I,mBAC7B7I,KAAK6I,kBAAkBwK,iBAAiBtU,EAAGC,KAC3C4U,EAAe5T,KAAK6I,mBAEpB+K,GAAgBA,IAAiB5T,KAAKsK,gBACtCtK,KAAK8H,QAAQ+H,IAAI,KAEb7P,KAAKqL,OAAOuD,KAAK,CAAE0E,KAAMtT,KAAMoO,UAAWpO,KAAKsK,iBAC/CtK,KAAKsK,eAAewJ,KAAK9T,MAEzBA,KAAKsK,eAAiBsJ,EACtB5T,KAAKsK,eAAeyJ,MAAM/T,KAAMjB,EAAGC,EAAG4U,IAAiB5T,KAAK6I,mBAGxD+K,EAAaI,gBACXhU,KAAK8I,mBACLgE,GACN9M,KAAKoL,QAAQwD,KAAK,CACd0E,KAAMtT,KACNoO,UAAWwF,EACXT,aAAcS,EAAa5B,aAAahS,OAC3C,GAILA,KAAKiM,eACLjM,KAAKsK,eAAe2J,2BAA2BP,EAAMC,GACrD3T,KAAKsK,eAAe4J,UAAUlU,KAAMjB,EAAGC,EAAGgB,KAAKkJ,wBAC3ClJ,KAAKyL,kBACLzL,KAAKmU,uBAAuBpV,EAAGC,GAG/BgB,KAAKmU,uBAAuBpV,EAAIiB,KAAKsI,yBAAyBvJ,EAAGC,EAAIgB,KAAKsI,yBAAyBtJ,GAG/G,CAKA2R,+BAEI,IAAK3Q,KAAK4I,UACN,OAAOwL,QAAQC,UAEnB,MAAMC,EAAkBtU,KAAKqI,aAAa7J,wBAE1CwB,KAAK8E,SAASS,SAAS,sBAEvBvF,KAAKmU,uBAAuBG,EAAgB1V,KAAM0V,EAAgB7V,KAKlE,MAAM8V,EAAWvU,KAAK8E,SAASa,wBAC/B,OAAiB,IAAb4O,EACOH,QAAQC,UAEZrU,KAAK8H,QAAQ4E,kBAAkB,IAC3B,IAAI0H,QAAQC,IACf,MAAM/N,EAAWvK,MACRA,GACAiE,KAAK8E,aACFlE,MAAgB7E,KAAWiE,KAAK8E,SAASxG,SAClB,cAAvBvC,EAAMyY,gBACVC,IACAJ,IACAK,aAAaC,GAAO,EAMtBA,EAAUC,WAAWtO,EAAoB,IAAXiO,GAC9BE,EAAkBzU,KAAK8E,SAASuB,iBAAiB,gBAAiBC,EAAO,GAG3F,CAEAiL,4BACI,MAAMsD,EAAoB7U,KAAKmK,qBACzB2K,EAAsBD,EAAoBA,EAAkBlO,SAAW,KAC7E,IAAI2K,EACJ,OAAIwD,GACA9U,KAAKoI,gBAAkByM,EAAkB9N,cAAcC,mBAAmB8N,EAAqBD,EAAkB3W,SACjH8B,KAAKoI,gBAAgBnB,gBACrBqK,EAAc7P,GAAYzB,KAAKoI,gBAAiBpI,KAAKJ,YAGrD0R,EAAc3U,GAAcqD,KAAKoE,cAIrCkN,EAAY1O,MAAMmS,cAAgB,OAClCzD,EAAY7L,UAAUC,IAAI,wBACnB4L,CACX,CAMA2B,6BAA6B+B,EAAa9C,EAAkBnW,GACxD,MAAMkZ,EAAgB/C,IAAqBlS,KAAKoE,aAAe,KAAO8N,EAChEgD,EAAgBD,EAAgBA,EAAczW,wBAA0BwW,EACxEG,EAAQnE,EAAajV,GAASA,EAAMqZ,cAAc,GAAKrZ,EACvDsE,EAAiBL,KAAKqV,6BAG5B,MAAO,CACHtW,EAAGmW,EAActW,KAAOoW,EAAYpW,MAH9BuW,EAAMG,MAAQJ,EAActW,KAAOyB,EAAezB,MAIxDI,EAAGkW,EAAczW,IAAMuW,EAAYvW,KAH7B0W,EAAMI,MAAQL,EAAczW,IAAM4B,EAAe5B,KAK/D,CAEAyQ,0BAA0BnT,GACtB,MAAMsE,EAAiBL,KAAKqV,6BACtBF,EAAQnE,EAAajV,GAQnBA,EAAMyZ,QAAQ,IAAMzZ,EAAM0Z,eAAe,IAAM,CAAEH,MAAO,EAAGC,MAAO,GACpExZ,EACAgD,EAAIoW,EAAMG,MAAQjV,EAAezB,KACjCI,EAAImW,EAAMI,MAAQlV,EAAe5B,IAGvC,GAAIuB,KAAKqJ,iBAAkB,CACvB,MAAMqM,EAAY1V,KAAKqJ,iBAAiBsM,eACxC,GAAID,EAAW,CACX,MAAME,EAAW5V,KAAKqJ,iBAAiBwM,iBACvCD,SAAS7W,EAAIA,EACb6W,EAAS5W,EAAIA,EACN4W,EAASE,gBAAgBJ,EAAUK,UAC9C,CACJ,CACA,MAAO,CAAEhX,IAAGC,IAChB,CAEA2P,+BAA+BwG,GAC3B,MAAMa,EAAoBhW,KAAKsK,eAAiBtK,KAAKsK,eAAeG,SAAW,KAC/E,IAAM1L,IAAGC,KAAMgB,KAAKyL,kBACdzL,KAAKyL,kBAAkB0J,EAAOnV,KAAMA,KAAKsE,gBAAiBtE,KAAKsI,0BAC/D6M,EAWN,GAVsB,MAAlBnV,KAAKyK,UAA0C,MAAtBuL,EACzBhX,EACIgB,KAAKyE,sBAAsBzF,GACtBgB,KAAKyL,kBAAoBzL,KAAKsI,yBAAyBtJ,EAAI,IAE7C,MAAlBgB,KAAKyK,UAA0C,MAAtBuL,KAC9BjX,EACIiB,KAAKyE,sBAAsB1F,GACtBiB,KAAKyL,kBAAoBzL,KAAKsI,yBAAyBvJ,EAAI,IAEpEiB,KAAKkK,cAAe,CAGpB,MAAQnL,EAAGkX,EAASjX,EAAGkX,GAAalW,KAAKyL,kBAEnC,CAAE1M,EAAG,EAAGC,EAAG,GADXgB,KAAKsI,yBAEL6N,EAAenW,KAAKkK,eAClBrL,MAAOuX,EAActX,OAAQuX,GAAkBrW,KAAKsW,kBACtDC,EAAOJ,EAAa1X,IAAMyX,EAC1BM,EAAOL,EAAaxX,QAAU0X,EAAgBH,GAGpDnX,EAAI0X,GAAQ1X,EAFCoX,EAAavX,KAAOqX,EACpBE,EAAazX,OAAS0X,EAAeH,IAElDjX,EAAIyX,GAAQzX,EAAGuX,EAAMC,EACzB,CACA,MAAO,CAAEzX,IAAGC,IAChB,CAEAgR,6BAA6B0G,GACzB,MAAQ3X,IAAGC,KAAM0X,EACXpG,EAAQtQ,KAAKkJ,uBACbyN,EAA0B3W,KAAKmJ,sCAE/ByN,EAAUvT,KAAK8L,IAAIpQ,EAAI4X,EAAwB5X,GAC/C8X,EAAUxT,KAAK8L,IAAInQ,EAAI2X,EAAwB3X,GAKrD,OAAI4X,EAAU5W,KAAK6H,QAAQiP,kCACvBxG,EAAMvR,EAAIA,EAAI4X,EAAwB5X,EAAI,GAAI,EAC9C4X,EAAwB5X,EAAIA,GAE5B8X,EAAU7W,KAAK6H,QAAQiP,kCACvBxG,EAAMtR,EAAIA,EAAI2X,EAAwB3X,EAAI,GAAI,EAC9C2X,EAAwB3X,EAAIA,GAEzBsR,CACX,CAEAxF,gCACI,IAAK9K,KAAKoE,eAAiBpE,KAAKoK,SAC5B,OAEJ,MAAM2M,EAAe/W,KAAKoK,SAAS/M,OAAS,IAAM2C,KAAKiM,aACnD8K,IAAiB/W,KAAKgK,6BACtBhK,KAAKgK,2BAA6B+M,EAClCtU,EAA6BzC,KAAKoE,aAAc2S,GAExD,CAEAtK,8BACIzM,KAAKiI,sBAAsB1H,QAAQyW,GAAWA,KAC9ChX,KAAKiI,0BAAuB6E,CAChC,CAMAyB,2BAA2BxP,EAAGC,GAC1B,MAAM2L,EAAQ,EAAI3K,KAAK2K,MACjB3H,EAAYI,EAAarE,EAAI4L,EAAO3L,EAAI2L,GACxCsM,EAASjX,KAAKoE,aAAaxB,MAIH,MAA1B5C,KAAK0E,oBACL1E,KAAK0E,kBACDuS,EAAOjU,WAAiC,QAApBiU,EAAOjU,UAAsBiU,EAAOjU,UAAY,IAK5EiU,EAAOjU,UAAYD,EAAkBC,EAAWhD,KAAK0E,kBACzD,CAMAyP,uBAAuBpV,EAAGC,GAGtB,MAAMiE,EAAmBjD,KAAKuE,kBAAkBoC,cAAWmG,EAAY9M,KAAK0E,kBACtE1B,EAAYI,EAAarE,EAAGC,GAClCgB,KAAK8E,SAASQ,aAAavC,EAAkBC,EAAWC,GAC5D,CAKAoN,iBAAiB6G,GACb,MAAMC,EAAiBnX,KAAKyE,sBAC5B,OAAI0S,EACO,CAAEpY,EAAGmY,EAAgBnY,EAAIoY,EAAepY,EAAGC,EAAGkY,EAAgBlY,EAAImY,EAAenY,GAErF,CAAED,EAAG,EAAGC,EAAG,EACtB,CAEA8R,2BACI9Q,KAAKkK,cAAgBlK,KAAKiK,kBAAe6C,EACzC9M,KAAK+I,iBAAiB9I,OAC1B,CAKAqN,iCACI,IAAMvO,IAAGC,KAAMgB,KAAKwI,kBACpB,GAAW,IAANzJ,GAAiB,IAANC,GAAYgB,KAAKiM,eAAiBjM,KAAK+J,iBACnD,OAGJ,MAAMiL,EAAchV,KAAKoE,aAAa5F,wBAChC2X,EAAenW,KAAK+J,iBAAiBvL,wBAG3C,GAA4B,IAAvB2X,EAAatX,OAAuC,IAAxBsX,EAAarX,QACnB,IAAtBkW,EAAYnW,OAAsC,IAAvBmW,EAAYlW,OACxC,OAEJ,MAAMsY,EAAejB,EAAavX,KAAOoW,EAAYpW,KAC/CyY,EAAgBrC,EAAYtW,MAAQyX,EAAazX,MACjD4Y,EAAcnB,EAAa1X,IAAMuW,EAAYvW,IAC7C8Y,EAAiBvC,EAAYrW,OAASwX,EAAaxX,OAGrDwX,EAAatX,MAAQmW,EAAYnW,OAC7BuY,EAAe,IACfrY,GAAKqY,GAELC,EAAgB,IAChBtY,GAAKsY,IAITtY,EAAI,EAIJoX,EAAarX,OAASkW,EAAYlW,QAC9BwY,EAAc,IACdtY,GAAKsY,GAELC,EAAiB,IACjBvY,GAAKuY,IAITvY,EAAI,GAEJD,IAAMiB,KAAKwI,kBAAkBzJ,GAAKC,IAAMgB,KAAKwI,kBAAkBxJ,IAC/DgB,KAAKsO,oBAAoB,CAAEtP,IAAGD,KAEtC,CAEAyQ,mBAAmBzT,GACf,MAAMiC,EAAQgC,KAAK0K,eACnB,MAAqB,iBAAV1M,EACAA,EAEFgT,EAAajV,GACXiC,EAAMwZ,MAEVxZ,EAAQA,EAAMyZ,MAAQ,CACjC,CAEAzE,gBAAgBjX,GACZ,MAAM2b,EAAmB1X,KAAK+I,iBAAiBrI,aAAa3E,GAC5D,GAAI2b,EAAkB,CAClB,MAAM/W,KAASC,MAAgB7E,GAG3BiE,KAAKkK,eACLvJ,IAAWX,KAAK+J,kBAChBpJ,EAAOU,SAASrB,KAAK+J,mBACrB5K,EAAca,KAAKkK,cAAewN,EAAiBjZ,IAAKiZ,EAAiB9Y,MAE7EoB,KAAKyE,sBAAsB1F,GAAK2Y,EAAiB9Y,KACjDoB,KAAKyE,sBAAsBzF,GAAK0Y,EAAiBjZ,IAG5CuB,KAAKsK,iBACNtK,KAAKyI,iBAAiB1J,GAAK2Y,EAAiB9Y,KAC5CoB,KAAKyI,iBAAiBzJ,GAAK0Y,EAAiBjZ,IAC5CuB,KAAKuO,2BAA2BvO,KAAKyI,iBAAiB1J,EAAGiB,KAAKyI,iBAAiBzJ,GAEvF,CACJ,CAEAqW,6BACI,OAAQrV,KAAK+I,iBAAiBlJ,UAAUiB,IAAId,KAAKJ,YAAYS,gBACzDL,KAAK+I,iBAAiBzI,2BAC9B,CAOA4Q,iBACI,YAA+BpE,IAA3B9M,KAAKwK,oBACLxK,KAAKwK,qBAAoB0G,MAAelR,KAAKoE,eAE1CpE,KAAKwK,iBAChB,CAEAoH,0BAA0B+F,EAAe1G,GACrC,MAAM2G,EAAmB5X,KAAKmI,mBAAqB,SACnD,GAAyB,WAArByP,EACA,OAAOD,EAEX,GAAyB,WAArBC,EAA+B,CAC/B,MAAMC,EAAc7X,KAAKJ,UAIzB,OAAQqR,GACJ4G,EAAYC,mBACZD,EAAYE,yBACZF,EAAYG,sBACZH,EAAYI,qBACZJ,EAAYhG,IACpB,CACA,SAAOzF,MAAcwL,EACzB,CAEAtB,kBAGI,QAAKtW,KAAKiK,eAAkBjK,KAAKiK,aAAapL,QAAUmB,KAAKiK,aAAanL,UACtEkB,KAAKiK,aAAejK,KAAK8E,SACnB9E,KAAK8E,SAAStG,wBACdwB,KAAKsE,iBAERtE,KAAKiK,YAChB,CAEA4C,iBAAoB9Q,IAChB,GAAIiE,KAAKoK,SAAS/M,OAAQ,CACtB,MAAMwR,EAAe7O,KAAK8O,iBAAiB/S,GACvC8S,IAAiB7O,KAAKqK,iBAAiB9H,IAAIsM,KAAkB7O,KAAK4K,UAClE7O,EAAM6T,gBAEd,MACU5P,KAAK4K,UAGX7O,EAAM6T,gBAAe,EAI7Bd,iBAAiB/S,GACb,OAAOiE,KAAKoK,SAASpE,KAAK+E,GACfhP,EAAM4E,SAAW5E,EAAM4E,SAAWoK,GAAUA,EAAO1J,SAAStF,EAAM4E,SAEjF,EAGJ,SAAS8V,GAAQzY,EAAOka,EAAKC,GACzB,OAAO9U,KAAK8U,IAAID,EAAK7U,KAAK6U,IAAIC,EAAKna,GACvC,CAEA,SAASgT,EAAajV,GAIlB,MAAyB,MAAlBA,EAAMgC,KAAK,EACtB,CAEA,SAASqT,GAAqBrV,GAC1BA,EAAM6T,gBACV,CAQA,SAASwI,EAAgBC,EAAOC,EAAWC,GACvC,MAAMC,EAAOC,EAAMH,EAAWD,EAAMhb,OAAS,GACvCqb,EAAKD,EAAMF,EAASF,EAAMhb,OAAS,GACzC,GAAImb,IAASE,EACT,OAEJ,MAAM/X,EAAS0X,EAAMG,GACflI,EAAQoI,EAAKF,GAAO,EAAK,EAC/B,QAASpb,EAAIob,EAAMpb,IAAMsb,EAAItb,GAAKkT,EAC9B+H,EAAMjb,GAAKib,EAAMjb,EAAIkT,GAEzB+H,EAAMK,GAAM/X,CAChB,CA+BA,SAAS8X,EAAMza,EAAOma,GAClB,OAAO9U,KAAK8U,IAAI,EAAG9U,KAAK6U,IAAIC,EAAKna,GACrC,CAOA,MAAM2a,GACF3Q,kBAEA4Q,SAEAC,eAEAC,eAAiB,GAMjBC,kBAEAC,YAAc,WAEd9K,UACAnO,YAAYiI,GACRhI,KAAKgI,kBAAoBA,CAC7B,CAMAiR,cAAgB,CACZC,KAAM,KACN5I,MAAO,EACP6I,UAAU,GAMdpH,MAAMqH,GACFpZ,KAAKqZ,UAAUD,EACnB,CAQAE,KAAKhG,EAAM/T,EAAUC,EAAU+Z,GAC3B,MAAMC,EAAWxZ,KAAK8Y,eAChBW,EAAWzZ,KAAK0Z,iCAAiCpG,EAAM/T,EAAUC,EAAU+Z,GACjF,IAAiB,IAAbE,GAAmBD,EAASnc,OAAS,EACrC,OAAO,KAEX,MAAMsc,EAAoC,eAArB3Z,KAAKgZ,YACpB7F,EAAeqG,EAASI,UAAUC,GAAeA,EAAYX,OAAS5F,GACtEwG,EAAuBN,EAASC,GAEhCM,EAAcD,EAAqB5a,WACnCoR,EAAQ6C,EAAesG,EAAW,GAAI,EAEtCO,EAAaha,KAAKia,iBAJAT,EAASrG,GAAcjU,WAIW6a,EAAazJ,GAEjE4J,GAAgBla,KAAKma,oBAAoBhH,EAAcqG,EAAUlJ,GAGjE8J,GAAWZ,EAASa,QAE1BjC,SAAgBoB,EAAUrG,EAAcsG,GACxCD,EAASjZ,QAAQ,CAAC+Z,EAASC,MAEvB,GAAIH,GAASG,MAAWD,EACpB,OAEJ,MAAME,GAAgBF,EAAQpB,OAAS5F,EACjCrD,EAASuK,GAAgBR,EAAaE,GACtCO,GAAkBD,GAClBlH,EAAKxH,wBACLwO,EAAQpB,KAAKnN,iBAEnBuO,EAAQrK,QAAUA,EAClB,MAAMyK,GAAkBrX,KAAKC,MAAMgX,EAAQrK,QAAU,EAAIqK,EAAQpB,KAAKvO,QAKlEgP,GAGAc,GAAgB7X,MAAMI,UAAYD,EAAkB,eAAe2X,cAA4BJ,EAAQrX,kBACvG9D,EAAcmb,EAAQpb,WAAY,EAAG+Q,KAGrCwK,GAAgB7X,MAAMI,UAAYD,EAAkB,kBAAkB2X,WAAyBJ,EAAQrX,kBACvG9D,EAAcmb,EAAQpb,WAAY+Q,EAAQ,GAAC,GAInDjQ,KAAKiZ,cAAcE,SAAWla,EAAmB8a,EAAaxa,EAAUC,GACxEQ,KAAKiZ,cAAcC,KAAOY,EAAqBZ,KAC/ClZ,KAAKiZ,cAAc3I,MAAQqJ,EAAeJ,EAAaxa,EAAIwa,EAAava,EACjE,CAAEuU,cAAeJ,EAAcA,aAAcsG,EACxD,CASA1F,MAAMT,EAAM/T,EAAUC,EAAU+a,GAC5B,MAAMd,EAAoB,MAATc,GAAiBA,EAAQ,EAGlCva,KAAK0Z,iCAAiCpG,EAAM/T,EAAUC,GACxD+a,EACAI,EAAmB3a,KAAK+Y,kBACxB5F,EAAewH,EAAiBlX,QAAQ6P,GACxChC,EAAcgC,EAAKxH,wBACzB,IAAI8O,EAAuBD,EAAiBlB,GAqB5C,GAjBImB,IAAyBtH,IACzBsH,EAAuBD,EAAiBlB,EAAW,KAIlDmB,IACY,MAAZnB,IAAiC,IAAbA,GAAmBA,EAAWkB,EAAiBtd,OAAS,IAC7E2C,KAAK6a,yBAAyBtb,EAAUC,KACxCob,EAAuBD,EAAiB,IAIxCxH,GAAe,GACfwH,EAAiBG,OAAO3H,EAAc,GAItCyH,IAAyB5a,KAAKgI,kBAAkBiE,WAAW2O,GAAuB,CAClF,MAAMtc,EAAUsc,EAAqB7O,iBACrCzN,EAAQyc,cAAcrJ,aAAaJ,EAAahT,GAChDqc,EAAiBG,OAAOrB,EAAU,EAAGnG,EACzC,MAEItT,KAAK4Y,SAAS5W,YAAYsP,GAC1BqJ,EAAiBK,KAAK1H,GAG1BhC,EAAY1O,MAAMI,UAAY,GAI9BhD,KAAKib,qBACT,CAEA5B,UAAUD,GACNpZ,KAAK+Y,kBAAoBK,EAAMiB,QAC/Bra,KAAKib,qBACT,CAEAC,kBAAkBC,GACdnb,KAAK6Y,eAAiBsC,CAC1B,CAEAtN,QAEI7N,KAAK+Y,mBAAmBxY,QAAQ+S,IAC5B,MAAM9G,EAAc8G,EAAKvH,iBACzB,GAAIS,EAAa,CACb,MAAMvJ,EAAmBjD,KAAK8Y,eAAe9S,KAAKoV,GAAKA,EAAElC,OAAS5F,IAAOrQ,iBACzEuJ,EAAY5J,MAAMI,UAAYC,GAAoB,EACtD,IAEJjD,KAAK8Y,eAAiB,GACtB9Y,KAAK+Y,kBAAoB,GACzB/Y,KAAKiZ,cAAcC,KAAO,KAC1BlZ,KAAKiZ,cAAc3I,MAAQ,EAC3BtQ,KAAKiZ,cAAcE,UAAW,CAClC,CAKAkC,yBACI,OAAOrb,KAAK+Y,iBAChB,CAEA/G,aAAasB,GAOT,OAHmC,eAArBtT,KAAKgZ,aAAmD,QAAnBhZ,KAAKkO,UAClDlO,KAAK8Y,eAAeuB,QAAQiB,UAC5Btb,KAAK8Y,gBACEc,UAAUC,GAAeA,EAAYX,OAAS5F,EAC/D,CAEAiI,eAAera,EAAeC,GAK1BnB,KAAK8Y,eAAevY,QAAQ,EAAGrB,iBAC3BC,EAAcD,EAAYgC,EAAeC,EAAc,GAI3DnB,KAAK8Y,eAAevY,QAAQ,EAAG2Y,WACvBlZ,KAAKgI,kBAAkBiE,WAAWiN,IAGlCA,EAAKzK,8BAA6B,EAG9C,CACA+M,qBAAqBpN,GACjBpO,KAAK4Y,SAAWxK,CACpB,CAEA6M,sBACI,MAAMtB,EAAoC,eAArB3Z,KAAKgZ,YAC1BhZ,KAAK8Y,eAAiB9Y,KAAK+Y,kBACtBhV,IAAImV,IACL,MAAMuC,EAAmBvC,EAAKlN,oBAC9B,MAAO,CACHkN,OACAjJ,OAAQ,EACRhN,iBAAkBwY,EAAiB7Y,MAAMI,WAAa,GACtD9D,WAAYb,EAAqBod,GACrC,GAECnC,KAAK,CAACoC,EAAGC,IACHhC,EACD+B,EAAExc,WAAWN,KAAO+c,EAAEzc,WAAWN,KACjC8c,EAAExc,WAAWT,IAAMkd,EAAEzc,WAAWT,IAE9C,CAOAwb,iBAAiB/C,EAAiB6C,EAAazJ,GAC3C,MAAMqJ,EAAoC,eAArB3Z,KAAKgZ,YAC1B,IAAIgB,EAAaL,EACXI,EAAYnb,KAAOsY,EAAgBtY,KACnCmb,EAAYtb,IAAMyY,EAAgBzY,IAExC,OAAc,IAAV6R,IACA0J,GAAcL,EACRI,EAAYlb,MAAQqY,EAAgBrY,MACpCkb,EAAYjb,OAASoY,EAAgBpY,QAExCkb,CACX,CAOAG,oBAAoBhH,EAAcqG,EAAUlJ,GACxC,MAAMqJ,EAAoC,eAArB3Z,KAAKgZ,YACpB9B,EAAkBsC,EAASrG,GAAcjU,WACzC0c,EAAmBpC,EAASrG,GAAuB,EAAR7C,GACjD,IAAI4J,EAAgBhD,EAAgByC,EAAe,QAAU,UAAYrJ,EACzE,GAAIsL,EAAkB,CAClB,MAAM7J,EAAQ4H,EAAe,OAAS,MAChCkC,EAAMlC,EAAe,QAAU,UAKvB,IAAVrJ,EACA4J,GAAiB0B,EAAiB1c,WAAW6S,GAASmF,EAAgB2E,GAGtE3B,GAAiBhD,EAAgBnF,GAAS6J,EAAiB1c,WAAW2c,EAE9E,CACA,OAAO3B,CACX,CAMAW,yBAAyBtb,EAAUC,GAC/B,IAAKQ,KAAK+Y,kBAAkB1b,OACxB,OAAO,EAEX,MAAMye,EAAgB9b,KAAK8Y,eACrBa,EAAoC,eAArB3Z,KAAKgZ,YAI1B,GADiB8C,EAAc,GAAG5C,OAASlZ,KAAK+Y,kBAAkB,GACpD,CACV,MAAMgD,EAAeD,EAAcA,EAAcze,OAAS,GAAG6B,WAC7D,OAAOya,EAAepa,GAAYwc,EAAard,MAAQc,GAAYuc,EAAapd,MACpF,CACK,CACD,MAAMqd,EAAgBF,EAAc,GAAG5c,WACvC,OAAOya,EAAepa,GAAYyc,EAAcpd,KAAOY,GAAYwc,EAAcvd,GACrF,CACJ,CAQAib,iCAAiCpG,EAAM/T,EAAUC,EAAU8Q,GACvD,MAAMqJ,EAAoC,eAArB3Z,KAAKgZ,YACpBuB,EAAQva,KAAK8Y,eAAec,UAAU,EAAGV,OAAMha,gBAE7Cga,IAAS5F,MAGThD,GAKI4I,IAASlZ,KAAKiZ,cAAcC,OAC5BlZ,KAAKiZ,cAAcE,WALLQ,EAAerJ,EAAMvR,EAAIuR,EAAMtR,KAM/BgB,KAAKiZ,cAAc3I,SAIlCqJ,EAGCpa,GAAY8D,KAAK4Y,MAAM/c,EAAWN,OAASW,EAAW8D,KAAK4Y,MAAM/c,EAAWR,OAC9Ec,GAAY6D,KAAK4Y,MAAM/c,EAAWT,MAAQe,EAAW6D,KAAK4Y,MAAM/c,EAAWP,WAErF,OAAiB,IAAV4b,GAAiBva,KAAK6Y,eAAe0B,EAAOjH,GAAaiH,GAAL,CAC/D,EAQJ,MAAM2B,GACFtc,UACAoI,kBAEA4Q,SAEAC,eAEAsD,UAMAC,aAMAnD,cAAgB,CACZC,KAAM,KACNmD,OAAQ,EACRC,OAAQ,EACRnD,UAAU,GAMdoD,cAAgB,GAChBxc,YAAYH,EAAWoI,GACnBhI,KAAKJ,UAAYA,EACjBI,KAAKgI,kBAAoBA,CAC7B,CAKA+J,MAAMqH,GACF,MAAMoD,EAAaxc,KAAK4Y,SAAS4D,WACjCxc,KAAKuc,cAAgB,GACrB,QAASnf,EAAI,EAAGA,EAAIof,EAAWnf,OAAQD,IAAK,CACxC,MAAMR,EAAO4f,EAAWpf,GACxB4C,KAAKuc,cAAcvB,KAAK,CAACpe,EAAMA,EAAK6f,aACxC,CACAzc,KAAKqZ,UAAUD,EACnB,CAQAE,KAAKhG,EAAM/T,EAAUC,EAAU+Z,GAC3B,MAAME,EAAWzZ,KAAK0Z,iCAAiCpG,EAAM/T,EAAUC,GACjEkd,EAAe1c,KAAKiZ,cAC1B,IAAiB,IAAbQ,GAAmBzZ,KAAKoc,aAAa3C,KAAcnG,EACnD,OAAO,KAEX,MAAMqJ,EAAa3c,KAAKoc,aAAa3C,GAErC,GAAIiD,EAAaxD,OAASyD,GACtBD,EAAavD,UACbuD,EAAaL,SAAW9C,EAAaxa,GACrC2d,EAAaJ,SAAW/C,EAAava,EACrC,OAAO,KAEX,MAAMuU,EAAgBvT,KAAKgS,aAAasB,GAClCsJ,EAAUtJ,EAAKxH,wBACf+Q,EAAiBF,EAAW5Q,iBAC9B0N,EAAWlG,EACXsJ,EAAeC,MAAMF,GAGrBC,EAAeE,OAAOH,GAE1BxE,EAAgBpY,KAAKoc,aAAc7I,EAAekG,GAClD,MAAMuD,EAAoBhd,KAAKid,eAAeC,iBAAiB3d,EAAUC,GAGzEkd,SAAaL,OAAS9C,EAAaxa,EACnC2d,EAAaJ,OAAS/C,EAAava,EACnC0d,EAAaxD,KAAOyD,EACpBD,EAAavD,SACT0D,IAAmBG,GAAqBH,EAAexb,SAAS2b,GAC7D,CACHzJ,gBACAJ,aAAcsG,EAEtB,CASA1F,MAAMT,EAAM/T,EAAUC,EAAU+a,GAC5B,IAAI4C,EAAsB,MAAT5C,GAAiBA,EAAQ,EACpCva,KAAK0Z,iCAAiCpG,EAAM/T,EAAUC,GACtD+a,GAIa,IAAf4C,IACAA,EAAand,KAAKod,8BAA8B9J,EAAM/T,EAAUC,IAEpE,MAAM6d,EAAard,KAAKoc,aAAae,GAC/BhK,EAAenT,KAAKoc,aAAa3Y,QAAQ6P,GAC3CH,GAAe,GACfnT,KAAKoc,aAAatB,OAAO3H,EAAc,GAEvCkK,IAAerd,KAAKgI,kBAAkBiE,WAAWoR,IACjDrd,KAAKoc,aAAatB,OAAOqC,EAAY,EAAG7J,GACxC+J,EAAWtR,iBAAiBgR,OAAOzJ,EAAKxH,2BAGxC9L,KAAKoc,aAAapB,KAAK1H,GACvBtT,KAAK4Y,SAAS5W,YAAYsR,EAAKxH,yBAEvC,CAEAuN,UAAUD,GACNpZ,KAAKoc,aAAehD,EAAMiB,OAC9B,CAEAa,kBAAkBC,GACdnb,KAAK6Y,eAAiBsC,CAC1B,CAEAtN,QACI,MAAMyP,EAAOtd,KAAK4Y,SACZ8D,EAAe1c,KAAKiZ,cAQ1B,QAAS7b,EAAI4C,KAAKuc,cAAclf,OAAS,EAAGD,GAAI,EAAIA,IAAK,CACrD,MAAOR,EAAM6f,GAAezc,KAAKuc,cAAcnf,GAC3CR,EAAKyU,aAAeiM,GAAQ1gB,EAAK6f,cAAgBA,IAC7B,OAAhBA,EACAa,EAAKtb,YAAYpF,GAEZ6f,EAAYpL,aAAeiM,GAChCA,EAAK5L,aAAa9U,EAAM6f,GAGpC,CACAzc,KAAKuc,cAAgB,GACrBvc,KAAKoc,aAAe,GACpBM,EAAaxD,KAAO,KACpBwD,EAAaL,OAASK,EAAaJ,OAAS,EAC5CI,EAAavD,UAAW,CAC5B,CAKAkC,yBACI,OAAOrb,KAAKoc,YAChB,CAEApK,aAAasB,GACT,OAAOtT,KAAKoc,aAAa3Y,QAAQ6P,EACrC,CAEAiI,iBACIvb,KAAKoc,aAAa7b,QAAQ+S,IAClBtT,KAAKgI,kBAAkBiE,WAAWqH,IAGlCA,EAAK7E,8BAA6B,EAG9C,CACA+M,qBAAqBpN,GACbA,IAAcpO,KAAK4Y,WACnB5Y,KAAK4Y,SAAWxK,EAChBpO,KAAKmc,eAAYrP,EAEzB,CAQA4M,iCAAiCpG,EAAM/T,EAAUC,GAC7C,MAAM+d,EAAiBvd,KAAKid,eAAeC,iBAAiB7Z,KAAK4Y,MAAM1c,GAAW8D,KAAK4Y,MAAMzc,IACvF+a,EAAQgD,EACRvd,KAAKoc,aAAaxC,UAAUtG,IAC1B,MAAMgK,EAAOhK,EAAKvH,iBAClB,OAAOwR,IAAmBD,GAAQA,EAAKjc,SAASkc,EAAc,IAEhE,EACN,OAAiB,IAAVhD,GAAiBva,KAAK6Y,eAAe0B,EAAOjH,GAAaiH,GAAL,CAC/D,CAEA0C,eAEI,OAAKjd,KAAKmc,YACNnc,KAAKmc,aAAYjL,MAAelR,KAAK4Y,WAAa5Y,KAAKJ,WAEpDI,KAAKmc,SAChB,CAOAiB,8BAA8B9J,EAAM/T,EAAUC,GAC1C,GAAiC,IAA7BQ,KAAKoc,aAAa/e,OAClB,OAAO,EAEX,GAAiC,IAA7B2C,KAAKoc,aAAa/e,OAClB,OAAO,EAEX,IAAImgB,EAAcC,IACdC,GAAW,EAKf,QAAStgB,EAAI,EAAGA,EAAI4C,KAAKoc,aAAa/e,OAAQD,IAAK,CAC/C,MAAMwf,EAAU5c,KAAKoc,aAAahf,GAClC,GAAIwf,IAAYtJ,EAAM,CAClB,MAAQvU,IAAGC,KAAM4d,EAAQ7Q,iBAAiBvN,wBACpC4R,EAAW/M,KAAKsa,MAAMpe,EAAWR,EAAGS,EAAWR,GACjDoR,EAAWoN,IACXA,EAAcpN,EACdsN,EAAWtgB,EAEnB,CACJ,CACA,OAAOsgB,CACX,EAcJ,IAAIE,EACH,SAAUA,GACPA,SAA4BA,EAA4BC,KAAU,GAAK,OACvED,EAA4BA,EAA4BE,GAAQ,GAAK,KACrEF,EAA4BA,EAA4BG,KAAU,GAAK,OAHhEH,CAIX,CAJC,CAIEA,GAA8D,CAAC,GAE9DI,EACH,SAAUA,GACPA,SAA8BA,EAA8BH,KAAU,GAAK,OAC3EG,EAA8BA,EAA8BC,KAAU,GAAK,OAC3ED,EAA8BA,EAA8BE,MAAW,GAAK,QAHrEF,CAIX,CAJC,CAIEA,GAAkE,CAAC,GAItE,MAAMG,GACFnW,kBACAF,QACAC,eAEAzJ,QAEAsM,UAAW,EAEXoJ,iBAAkB,EAElBvJ,SAKA2T,oBAAqB,EAErBC,eAAiB,EAKjBC,eAAiBA,KAAM,EAEvBC,cAAgBA,KAAM,EAEtBvT,cAAgB,IAAI/B,IAIpBmC,QAAU,IAAInC,IAKdoC,OAAS,IAAIpC,IAEbqC,QAAU,IAAIrC,IAEduV,OAAS,IAAIvV,IAEbwV,iBAAmB,IAAIxV,IAEvByV,iBAAmB,IAAIzV,IAEvBuC,KAEAmT,WAEAC,aAAc,EAEd7V,iBAEA8V,cAEAC,SAEAC,YAAc,GAEdC,UAAY,GAEZC,gBAAkB,IAAI/a,IAEtBgb,4BAA8B1V,KAAaC,MAE3C0V,yBAA2BvB,EAA4BC,KAEvDuB,2BAA6BpB,EAA8BH,KAE3DwB,YAEAC,kBAAoB,IAAIrW,IAExBuB,kBAAoB,KAEpB5K,UAEA2f,oBAAsB,GAEtBC,mBAEAnb,WAAa,MACbtE,YAAYzB,EAAS0J,EAAmBpI,EAAWkI,EAASC,GACxD/H,KAAKgI,kBAAoBA,EACzBhI,KAAK8H,QAAUA,EACf9H,KAAK+H,eAAiBA,EACtB,MAAM0X,EAAkBzf,KAAK1B,WAAU8N,MAAc9N,GACrD0B,KAAKJ,UAAYA,EACjBI,KAAK0f,gBAAgB,YAAYlE,qBAAqBiE,GACtDzX,EAAkB2X,sBAAsB3f,MACxCA,KAAK+I,iBAAmB,IAAIpJ,GAAsBC,EACtD,CAEA2N,UACIvN,KAAK0Q,iBACL1Q,KAAKsf,kBAAkB1R,WACvB5N,KAAKkf,4BAA4B/R,cACjCnN,KAAKgL,cAAc4C,WACnB5N,KAAKoL,QAAQwC,WACb5N,KAAKqL,OAAOuC,WACZ5N,KAAKsL,QAAQsC,WACb5N,KAAKwe,OAAO5Q,WACZ5N,KAAKye,iBAAiB7Q,WACtB5N,KAAK0e,iBAAiB9Q,WACtB5N,KAAKif,gBAAgBhf,QACrBD,KAAKqf,YAAc,KACnBrf,KAAK+I,iBAAiB9I,QACtBD,KAAKgI,kBAAkB4X,oBAAoB5f,KAC/C,CAEAiM,aACI,OAAOjM,KAAK4e,WAChB,CAEA7M,QACI/R,KAAK6f,mBACL7f,KAAK8f,0BACT,CASA/L,MAAMT,EAAM/T,EAAUC,EAAU+a,GAC5Bva,KAAK6f,mBAGQ,MAATtF,GAAiBva,KAAKgU,kBACtBuG,EAAQva,KAAK+e,YAAYtb,QAAQ6P,IAErCtT,KAAK6e,cAAc9K,MAAMT,EAAM/T,EAAUC,EAAU+a,GAGnDva,KAAK+f,wBAEL/f,KAAK8f,2BACL9f,KAAKoL,QAAQwD,KAAK,CAAE0E,OAAMlF,UAAWpO,KAAMmT,aAAcnT,KAAKgS,aAAasB,IAC/E,CAKAQ,KAAKR,GACDtT,KAAKggB,SACLhgB,KAAKqL,OAAOuD,KAAK,CAAE0E,OAAMlF,UAAWpO,MACxC,CAcAyT,KAAKH,EAAMH,EAAcI,EAAeC,EAAmBJ,EAAwBhD,EAAUW,EAAWhV,EAAQ,CAAC,GAC7GiE,KAAKggB,SACLhgB,KAAKsL,QAAQsD,KAAK,CACd0E,OACAH,eACAI,gBACAnF,UAAWpO,KACXwT,oBACAJ,yBACAhD,WACAW,YACAhV,SAER,CAKAsd,UAAUD,GACN,MAAM6G,EAAgBjgB,KAAK+e,YAC3B,OAAA/e,KAAK+e,YAAc3F,EACnBA,EAAM7Y,QAAQ+S,GAAQA,EAAKnF,mBAAmBnO,OAC1CA,KAAKiM,eACgBgU,EAAcC,OAAO5M,GAAQA,EAAKrH,cAGtCkU,MAAM7M,IAAgC,IAAxB8F,EAAM3V,QAAQ6P,IACzCtT,KAAKggB,SAGLhgB,KAAK6e,cAAcxF,UAAUrZ,KAAK+e,cAGnC/e,IACX,CAEAiO,cAAcC,GACV,OAAAlO,KAAKqE,WAAa6J,EACdlO,KAAK6e,yBAAyBlG,KAC9B3Y,KAAK6e,cAAc3Q,UAAYA,GAE5BlO,IACX,CAMAogB,YAAYA,GACR,OAAApgB,KAAKgf,UAAYoB,EAAY/F,QACtBra,IACX,CAKA0f,gBAAgB1G,GACZ,GAAoB,UAAhBA,EACAhZ,KAAK6e,cAAgB,IAAI3C,GAAkBlc,KAAKJ,UAAWI,KAAKgI,uBAE/D,CACD,MAAMqY,EAAW,IAAI1H,GAAuB3Y,KAAKgI,mBACjDqY,EAASnS,UAAYlO,KAAKqE,WAC1Bgc,EAASrH,YAAcA,EACvBhZ,KAAK6e,cAAgBwB,CACzB,CACA,OAAArgB,KAAK6e,cAAcrD,qBAAqBxb,KAAK2e,YAC7C3e,KAAK6e,cAAc3D,kBAAkB,CAACX,EAAOjH,IAAStT,KAAKue,cAAchE,EAAOjH,EAAMtT,OAC/EA,IACX,CAKAsgB,sBAAsBngB,GAClB,MAAM7B,EAAU0B,KAAK2e,WAGrB,OAAA3e,KAAKuf,qBAC6B,IAA9Bpf,EAASsD,QAAQnF,GAAkB,CAACA,KAAY6B,GAAYA,EAASka,QAClEra,IACX,CAQAwb,qBAAqBpN,GACjB,GAAIA,IAAcpO,KAAK2e,WACnB,OAAO3e,MAEL1B,EAAU8N,MAAcpM,KAAK1B,SAAnC,MAMMiiB,EAAoBvgB,KAAKuf,oBAAoB9b,QAAQzD,KAAK2e,YAC1D6B,EAAoBxgB,KAAKuf,oBAAoB9b,QAAQ2K,GAC3D,OAAImS,GAAoB,GACpBvgB,KAAKuf,oBAAoBzE,OAAOyF,EAAmB,GAEnDC,GAAoB,GACpBxgB,KAAKuf,oBAAoBzE,OAAO0F,EAAmB,GAEnDxgB,KAAK6e,eACL7e,KAAK6e,cAAcrD,qBAAqBpN,GAE5CpO,KAAKwK,kBAAoB,KACzBxK,KAAKuf,oBAAoBkB,QAAQrS,GACjCpO,KAAK2e,WAAavQ,EACXpO,IACX,CAEAiS,uBACI,OAAOjS,KAAKuf,mBAChB,CAKAvN,aAAasB,GACT,OAAOtT,KAAK4e,YACN5e,KAAK6e,cAAc7M,aAAasB,GAChCtT,KAAK+e,YAAYtb,QAAQ6P,EACnC,CAKA5D,cACI,OAAO1P,KAAKif,gBAAgByB,KAAO,CACvC,CAQAxM,UAAUZ,EAAM/T,EAAUC,EAAU+Z,GAEhC,GAAIvZ,KAAKgU,kBACJhU,KAAK8e,WACLzf,GAAqBW,KAAK8e,SA5UN,IA4U0Cvf,EAAUC,GACzE,OAEJ,MAAMmhB,EAAS3gB,KAAK6e,cAAcvF,KAAKhG,EAAM/T,EAAUC,EAAU+Z,GAC7DoH,GACA3gB,KAAKwe,OAAO5P,KAAK,CACb2E,cAAeoN,EAAOpN,cACtBJ,aAAcwN,EAAOxN,aACrB/E,UAAWpO,KACXsT,QAGZ,CAOAW,2BAA2B1U,EAAUC,GACjC,GAAIQ,KAAKoe,mBACL,OAEJ,IAAIwC,EACAC,EAA0BjD,EAA4BC,KACtDiD,EAA4B9C,EAA8BH,KAgB9D,GAdA7d,KAAK+I,iBAAiBlJ,UAAUU,QAAQ,CAACa,EAAU9C,KAG3CA,IAAY0B,KAAKJ,YAAcwB,EAASlC,YAAc0hB,GAGtDvhB,GAAqB+B,EAASlC,WA7Wb,IA6WmDK,EAAUC,MAC7EqhB,EAAyBC,GAuQ1C,SAASC,GAA2BziB,EAASY,EAAYgP,EAAW3O,EAAUC,GAC1E,MAAMwhB,EAAmBC,GAA2B/hB,EAAYM,GAC1D0hB,EAAqBC,GAA6BjiB,EAAYK,GACpE,IAAIshB,EAA0BjD,EAA4BC,KACtDiD,EAA4B9C,EAA8BH,KAK9D,GAAImD,EAAkB,CAClB,MAAMxgB,EAAYlC,EAAQkC,UACtBwgB,IAAqBpD,EAA4BE,GAC7Ctd,EAAY,IACZqgB,EAA0BjD,EAA4BE,IAGrDxf,EAAQ8iB,aAAe5gB,EAAYlC,EAAQ+iB,eAChDR,EAA0BjD,EAA4BG,KAE9D,CACA,GAAImD,EAAoB,CACpB,MAAMzgB,EAAanC,EAAQmC,WACT,QAAdyN,EACIgT,IAAuBlD,EAA8BE,MAEjDzd,EAAa,IACbqgB,EAA4B9C,EAA8BE,OAGzD5f,EAAQgjB,YAAc7gB,EAAanC,EAAQijB,cAChDT,EAA4B9C,EAA8BC,MAI1DiD,IAAuBlD,EAA8BC,KACjDxd,EAAa,IACbqgB,EAA4B9C,EAA8BC,MAGzD3f,EAAQgjB,YAAc7gB,EAAanC,EAAQijB,cAChDT,EAA4B9C,EAA8BE,MAGtE,CACA,MAAO,CAAC2C,EAAyBC,EACrC,CApTuEC,CAA2BziB,EAAS8C,EAASlC,WAAYc,KAAKqE,WAAY9E,EAAUC,IACvIqhB,GAA2BC,KAC3BF,EAAatiB,OAKpBuiB,IAA4BC,EAA2B,CACxD,MAAQjiB,QAAOC,UAAWkB,KAAK+H,eAAeyZ,kBACxCpiB,EAAU,CACZP,QACAC,SACAL,IAAK,EACLC,MAAOG,EACPF,OAAQG,EACRF,KAAM,GAEViiB,EAA0BI,GAA2B7hB,EAASI,GAC9DshB,EAA4BK,GAA6B/hB,EAASG,GAClEqhB,EAAatf,MACjB,CACIsf,IACCC,IAA4B7gB,KAAKmf,0BAC9B2B,IAA8B9gB,KAAKof,4BACnCwB,IAAe5gB,KAAKqf,eACxBrf,KAAKmf,yBAA2B0B,EAChC7gB,KAAKof,2BAA6B0B,EAClC9gB,KAAKqf,YAAcuB,GACdC,GAA2BC,IAA8BF,EAC1D5gB,KAAK8H,QAAQ4E,kBAAkB1M,KAAKyhB,sBAGpCzhB,KAAK0Q,iBAGjB,CAEAA,iBACI1Q,KAAKsf,kBAAkB1Q,MAC3B,CAEAiR,mBACI,MAAM5I,EAASjX,KAAK2e,WAAW/b,MAC/B5C,KAAKgL,cAAc4D,OACnB5O,KAAK4e,aAAc,EAcnB5e,KAAKwf,mBAAqBvI,EAAOyK,kBAAoBzK,EAAO0K,gBAAkB,GAC9E1K,EAAO0K,eAAiB1K,EAAOyK,iBAAmB,OAClD1hB,KAAK6e,cAAc9M,MAAM/R,KAAK+e,aAC9B/e,KAAK+f,wBACL/f,KAAKkf,4BAA4B/R,cACjCnN,KAAK4hB,uBACT,CAEA7B,wBACI/f,KAAK+I,iBAAiB7I,MAAMF,KAAKuf,qBAGjCvf,KAAK8e,SAAW9e,KAAK+I,iBAAiBlJ,UAAUiB,IAAId,KAAK2e,YAAYzf,UACzE,CAEA8gB,SACIhgB,KAAK4e,aAAc,EACnB,MAAM3H,EAASjX,KAAK2e,WAAW/b,MAC/BqU,EAAO0K,eAAiB1K,EAAOyK,iBAAmB1hB,KAAKwf,mBACvDxf,KAAKgf,UAAUze,QAAQ+Z,GAAWA,EAAQuH,eAAe7hB,OACzDA,KAAK6e,cAAchR,QACnB7N,KAAK0Q,iBACL1Q,KAAKkf,4BAA4B/R,cACjCnN,KAAK+I,iBAAiB9I,OAC1B,CAEAwhB,qBAAuBA,KACnBzhB,KAAK0Q,iBCpqFN,SAASoR,EAASC,EAAS,EAAGC,EAAYC,KAC7C,OAAIF,EAAS,IACTA,EAAS,MAENG,KAAMH,EAAQA,EAAQC,EACjC,CDgqFQF,CAAS,EAAGK,MACPC,QAAKC,KAAUriB,KAAKsf,oBACpBjS,UAAU,KACX,MAAMzQ,EAAOoD,KAAKqf,YACZiD,EAAatiB,KAAKqe,eACpBre,KAAKmf,2BAA6BvB,EAA4BE,GAC9DlhB,EAAK2lB,SAAS,GAAID,GAEbtiB,KAAKmf,2BAA6BvB,EAA4BG,MACnEnhB,EAAK2lB,SAAS,EAAGD,GAEjBtiB,KAAKof,6BAA+BpB,EAA8BC,KAClErhB,EAAK2lB,UAAUD,EAAY,GAEtBtiB,KAAKof,6BAA+BpB,EAA8BE,OACvEthB,EAAK2lB,SAASD,EAAY,EAAC,EAElC,EAOLjP,iBAAiBtU,EAAGC,GAChB,OAAwB,MAAjBgB,KAAK8e,UAAoB7f,EAAmBe,KAAK8e,SAAU/f,EAAGC,EACzE,CAQA6U,iCAAiCP,EAAMvU,EAAGC,GACtC,OAAOgB,KAAKgf,UAAUhZ,KAAKsU,GAAWA,EAAQkI,YAAYlP,EAAMvU,EAAGC,GACvE,CAOAwjB,YAAYlP,EAAMvU,EAAGC,GACjB,IAAKgB,KAAK8e,WACL7f,EAAmBe,KAAK8e,SAAU/f,EAAGC,KACrCgB,KAAKse,eAAehL,EAAMtT,MAC3B,OAAO,EAEX,MAAMkd,EAAmBld,KAAKkR,iBAAiBgM,iBAAiBne,EAAGC,GAGnE,QAAKke,IASEA,IAAqBld,KAAK2e,YAAc3e,KAAK2e,WAAWtd,SAAS6b,GAC5E,CAKAuF,gBAAgBnI,EAASlB,GACrB,MAAMsJ,EAAiB1iB,KAAKif,iBACvByD,EAAengB,IAAI+X,IACpBlB,EAAM+G,MAAM7M,GAKDtT,KAAKse,eAAehL,EAAMtT,OAASA,KAAK+e,YAAYtb,QAAQ6P,IAAQ,KAE/EoP,EAAehd,IAAI4U,GACnBta,KAAK+f,wBACL/f,KAAK4hB,wBACL5hB,KAAKye,iBAAiB7P,KAAK,CACvB+T,UAAWrI,EACXsI,SAAU5iB,KACVoZ,UAGZ,CAKAyI,eAAevH,GACXta,KAAKif,gBAAgBjR,OAAOsM,GAC5Bta,KAAKkf,4BAA4B/R,cACjCnN,KAAK0e,iBAAiB9P,KAAK,CAAE+T,UAAWrI,EAASsI,SAAU5iB,MAC/D,CAKA4hB,wBACI5hB,KAAKkf,4BAA8Blf,KAAKgI,kBACnC8K,SAAS9S,KAAKkR,kBACd7D,UAAUtR,IACX,GAAIiE,KAAKiM,aAAc,CACnB,MAAMyL,EAAmB1X,KAAK+I,iBAAiBrI,aAAa3E,GACxD2b,GACA1X,KAAK6e,cAActD,eAAe7D,EAAiBjZ,IAAKiZ,EAAiB9Y,KAEjF,MACSoB,KAAK0P,eACV1P,KAAK+f,uBAAsB,EAGvC,CAOA7O,iBACI,IAAKlR,KAAKwK,kBAAmB,CACzB,MAAMyG,KAAaC,MAAelR,KAAK2e,YACvC3e,KAAKwK,kBAAoByG,GAAcjR,KAAKJ,SAChD,CACA,OAAOI,KAAKwK,iBAChB,CAEAsV,2BACI,MAAM+C,EAAe7iB,KAAK6e,cACrBxD,yBACA6E,OAAO5M,GAAQA,EAAKrH,cACzBjM,KAAKgf,UAAUze,QAAQ+Z,GAAWA,EAAQmI,gBAAgBziB,KAAM6iB,GACpE,EAOJ,SAAS5B,GAA2B/hB,EAAYM,GAC5C,MAAQf,MAAKE,SAAQG,UAAWI,EAC1BQ,EA9kByB,IA8kBZZ,EACnB,OAAIU,GAAYf,EAAMiB,GAAcF,GAAYf,EAAMiB,EAC3Cke,EAA4BE,GAE9Bte,GAAYb,EAASe,GAAcF,GAAYb,EAASe,EACtDke,EAA4BG,KAEhCH,EAA4BC,IACvC,CAMA,SAASsD,GAA6BjiB,EAAYK,GAC9C,MAAQX,OAAMF,QAAOG,SAAUK,EACzBO,EA9lByB,IA8lBZZ,EACnB,OAAIU,GAAYX,EAAOa,GAAcF,GAAYX,EAAOa,EAC7Cue,EAA8BC,KAEhC1e,GAAYb,EAAQe,GAAcF,GAAYb,EAAQe,EACpDue,EAA8BE,MAElCF,EAA8BH,IACzC,CA0DA,MAAMiF,EAAwB,CAC1Bpb,SAAS,GAGPqb,EAA8B,CAChCxb,SAAS,EACTG,SAAS,GAEb,IAIMsb,GAAa,MAAnB,MAAMA,EACFC,iBAAW,SAAAC,GAAA,WAAAA,GAAwFF,EAAa,EAChHC,iBADyF5mB,MAAE,CAAA0B,KACJilB,EAAa/mB,UAAA,mBAAAknB,UAAA,6BAAmG,IAAEC,MAAA,EAAAC,KAAA,EAAA1c,SAAA,SAAAxK,EAAAC,GAAA,EAAA6a,OAAA,oLAAAqM,cAAA,EAAAC,gBAAA,IAC5M,OAHKP,CAAa,KAcbQ,EAAgB,MAAtB,MAAMA,EACF1b,WAAU2b,OAAOC,OACjB9jB,aAAY6jB,OAAOE,MACnBC,gBAAeH,OAAOI,MACtBjf,aAAY6e,OAAOK,OAAkBC,eAAe,KAAM,MAC1DC,0BAEAC,eAAiB,IAAI/f,IAErBggB,eAAiB,IAAIhgB,IAErBigB,wBAAuBxb,OAAO,IAE9Byb,iBAKAC,mBAAsB/Q,GAASA,EAAKrH,aAMpCqY,sBAAwB,KAKxB1R,YAAc,IAAI3J,IAKlB4J,UAAY,IAAI5J,IAMhBsb,OAAS,IAAItb,IACblJ,cAAgB,CAEhB4f,sBAAsBlM,GACbzT,KAAKikB,eAAe1hB,IAAIkR,IACzBzT,KAAKikB,eAAeve,IAAI+N,EAEhC,CAEA5H,iBAAiBqN,GACblZ,KAAKkkB,eAAexe,IAAIwT,GAIS,IAA7BlZ,KAAKkkB,eAAexD,MACpB1gB,KAAK8H,QAAQ4E,kBAAkB,KAG3B1M,KAAKgkB,8BACLhkB,KAAKgkB,6BAA4BrX,MAAsB3M,KAAK4E,UAAW5E,KAAKJ,UAAW,YAAaI,KAAKwkB,6BAA8BzB,EAA2B,EAG9K,CAEAnD,oBAAoBnM,GAChBzT,KAAKikB,eAAejW,OAAOyF,EAC/B,CAEA/F,eAAewL,GACXlZ,KAAKkkB,eAAelW,OAAOkL,GAC3BlZ,KAAKwQ,aAAa0I,GACe,IAA7BlZ,KAAKkkB,eAAexD,MACpB1gB,KAAKgkB,6BAEb,CAMA9Q,cAAcgG,EAAMnd,GAEhB,KAAIiE,KAAKmkB,uBAAuB1gB,QAAQyV,IAAQ,KAGhDlZ,KAAK4jB,aAAaa,KAAKzB,IACvBhjB,KAAKmkB,qBAAqBO,OAAOC,GAAa,IAAIA,EAAWzL,IAClB,IAAvClZ,KAAKmkB,uBAAuB9mB,QAAc,CAI1C,MAAM2T,EAAejV,EAAMgC,KAAK6mB,WAAW,SACrCC,EAAmBC,GAAM9kB,KAAK6S,UAAUjE,KAAKkW,GAC7CC,EAAS,CAGX,CAAC,SAAWD,GAAM9kB,KAAKukB,OAAO3V,KAAKkW,GAAIhC,GAKvC,CAAC,cAAe9iB,KAAKglB,6BAA8BjC,IAEnD/R,EACA+T,EAAO/J,KAAK,CAAC,WAAY6J,EAAiB/B,GAAwB,CAAC,cAAe+B,EAAiB/B,IAGnGiC,EAAO/J,KAAK,CAAC,UAAW6J,EAAiB/B,IAIxC9R,GACD+T,EAAO/J,KAAK,CACR,YACC8J,GAAM9kB,KAAK4S,YAAYhE,KAAKkW,GAC7B/B,IAGR/iB,KAAK8H,QAAQ4E,kBAAkB,KAC3B1M,KAAKokB,iBAAmBW,EAAOhhB,IAAI,EAAE9F,EAAMqI,EAAS2e,MAAO,EAAMtY,MAAsB3M,KAAK4E,UAAW5E,KAAKJ,UAAW3B,EAAMqI,EAAS2e,GAAQ,EAEtJ,CACJ,CAEAzU,aAAa0I,GACTlZ,KAAKmkB,qBAAqBO,OAAOC,IAC7B,MAAMpK,EAAQoK,EAAUlhB,QAAQyV,GAChC,OAAIqB,GAAQ,GACRoK,EAAU7J,OAAOP,EAAO,GACjB,IAAIoK,IAERA,IAEgC,IAAvC3kB,KAAKmkB,uBAAuB9mB,QAC5B2C,KAAKklB,uBAEb,CAEAjZ,WAAWiN,GACP,OAAOlZ,KAAKmkB,uBAAuB1gB,QAAQyV,IAAQ,CACvD,CAQApG,SAAS7B,GACL,MAAMkU,EAAU,CAACnlB,KAAKukB,QACtB,OAAItT,GAAcA,IAAejR,KAAKJ,WAIlCulB,EAAQnK,KAAK,IAAIoK,IAAYC,GAClBrlB,KAAK8H,QAAQ4E,kBAAkB,KAClC,MAAMsK,KAAUrK,MAAsB3M,KAAK4E,UAAWqM,EAAY,SAAWlV,IACrEiE,KAAKmkB,uBAAuB9mB,QAC5BgoB,EAASzW,KAAK7S,EAAK,EAExB+mB,GACH,MAAO,KACH9L,GAAQ,CACZ,MAEN,EAECsO,QAASH,EACpB,CAMAI,sBAAsB3oB,EAAM4oB,GACxBxlB,KAAKskB,wBAA0B,IAAImB,QACnCzlB,KAAKskB,sBAAsBlkB,IAAIxD,EAAM4oB,EACzC,CAKAE,oBAAoB9oB,GAChBoD,KAAKskB,uBAAuBtW,OAAOpR,EACvC,CAKA+oB,wBAAwB/oB,GACpB,OAAOoD,KAAKskB,uBAAuBxjB,IAAIlE,IAAS,IACpD,CACAgpB,cACI5lB,KAAKkkB,eAAe3jB,QAAQslB,GAAY7lB,KAAK0N,eAAemY,IAC5D7lB,KAAKikB,eAAe1jB,QAAQslB,GAAY7lB,KAAK4f,oBAAoBiG,IACjE7lB,KAAKskB,sBAAwB,KAC7BtkB,KAAKklB,wBACLllB,KAAK4S,YAAYhF,WACjB5N,KAAK6S,UAAUjF,UACnB,CAKAoX,6BAAgCjpB,IACxBiE,KAAKmkB,uBAAuB9mB,OAAS,GACrCtB,EAAM6T,gBAAe,EAI7B4U,6BAAgCzoB,IACxBiE,KAAKmkB,uBAAuB9mB,OAAS,IAIjC2C,KAAKmkB,uBAAuB2B,KAAK9lB,KAAKqkB,qBACtCtoB,EAAM6T,iBAEV5P,KAAK4S,YAAYhE,KAAK7S,GAAK,EAInCmpB,wBACIllB,KAAKokB,kBAAkB7jB,QAAQyW,GAAWA,KAC1ChX,KAAKokB,sBAAmBtX,CAC5B,CACAmW,iBAAW,SAAAC,GAAA,WAAAA,GAAwFM,EAAgB,EACnHP,kBAhPyF5mB,MAAE,CAAA0pB,MAgPYvC,EAAgBwC,QAAhBxC,EAAgByC,UAAAC,WAAc,SACxI,OApOK1C,CAAgB,KA2OtB,MAAM2C,GAAiB,CACnB/W,mBAAoB,EACpB0H,gCAAiC,GAErC,IAGMsP,GAAQ,MAAd,MAAMA,EACFxmB,aAAY6jB,OAAOE,MACnB7b,WAAU2b,OAAOC,OACjB3b,kBAAiB0b,OAAO4C,MACxBre,qBAAoByb,OAAOD,GAC3B5e,aAAY6e,OAAOK,OAAkBC,eAAe,KAAM,MAC1DhkB,cAAgB,CAMhBumB,WAAWhoB,EAASioB,EAASJ,IACzB,OAAO,IAAIve,GAAQtJ,EAASioB,EAAQvmB,KAAKJ,UAAWI,KAAK8H,QAAS9H,KAAK+H,eAAgB/H,KAAKgI,kBAAmBhI,KAAK4E,UACxH,CAKA4hB,eAAeloB,GACX,OAAO,IAAI6f,GAAY7f,EAAS0B,KAAKgI,kBAAmBhI,KAAKJ,UAAWI,KAAK8H,QAAS9H,KAAK+H,eAC/F,CACAkb,iBAAW,SAAAC,GAAA,WAAAA,GAAwFkD,EAAQ,EAC3GnD,kBAtRyF5mB,MAAE,CAAA0pB,MAsRYK,EAAQJ,QAARI,EAAQH,UAAAC,WAAc,SAChI,OAxBKE,CAAQ,KAoCd,MAAMK,EAAkB,IAAIC,MAAe,mBAkBrCC,GAAkB,IAAID,MAAe,iBAC3C,IACME,GAAa,MAAnB,MAAMA,EACFtoB,WAAUmlB,OAAOoD,OACjBC,eAAcrD,OAAOgD,EAAiB,CAAEM,UAAU,EAAMC,UAAU,IAClEhf,qBAAoByb,OAAOD,GAE3ByD,cAAgB,IAAIhe,IAEpB,YAAI2B,GACA,OAAO5K,KAAK6K,SAChB,CACA,YAAID,CAAS5M,GACTgC,KAAK6K,UAAY7M,EACjBgC,KAAKinB,cAAcrY,KAAK5O,KAC5B,CACA6K,WAAY,EACZ9K,cAIIC,KAAK8mB,aAAaI,WAAWlnB,KACjC,CACAmnB,kBACI,IAAKnnB,KAAK8mB,YAAa,CACnB,IAAI9hB,EAAShF,KAAK1B,QAAQ8oB,cAAcrM,cACxC,KAAO/V,GAAQ,CACX,MAAMqiB,EAAMrnB,KAAKgI,kBAAkB2d,wBAAwB3gB,GAC3D,GAAIqiB,EAAK,CACLrnB,KAAK8mB,YAAcO,EACnBA,EAAIH,WAAWlnB,MACf,KACJ,CACAgF,EAASA,EAAO+V,aACpB,CACJ,CACJ,CACA6K,cACI5lB,KAAK8mB,aAAaQ,cAActnB,MAChCA,KAAKinB,cAAcrZ,UACvB,CACAqV,iBAAW,SAAAC,GAAA,WAAAA,GAAwF0D,EAAa,EAChH3D,iBA/VyF5mB,MAAE,CAAA0B,KA+VJ6oB,EAAa3qB,UAAA,0BAAAknB,UAAA,sBAAAoE,OAAA,CAAA3c,SAAA,sCAA6G4c,QAAgBC,SAAA,CA/VxIprB,MA+VqM,CAAC,CAAEqrB,QAASf,GAAiBgB,YAAaf,QAC3U,OAzCKA,CAAa,KA4DnB,MAAMgB,GAAkB,IAAIlB,MAAe,mBAOrCmB,GAAgB,IAAInB,MAAe,eACzC,IACMoB,GAAO,MAAb,MAAMA,EACFxpB,WAAUmlB,OAAOoD,OACjB1V,iBAAgBsS,OAAOoE,GAAe,CAAEd,UAAU,EAAMC,UAAU,IAClElf,WAAU2b,OAAOC,OACjBqE,qBAAoBtE,OAAOuE,OAC3BC,QAAOxE,OAAOyE,KAAgB,CAAEnB,UAAU,IAC1CoB,sBAAqB1E,OAAO2E,OAC5BC,eAAc5E,OAAOkD,GAAiB,CAAEI,UAAU,EAAMuB,MAAM,IAC9DxB,eAAcrD,OAAOgD,EAAiB,CAAEM,UAAU,EAAMC,UAAU,IAClEhf,qBAAoByb,OAAOD,GAC3B+E,WAAa,IAAItf,IACjBmB,SAAW,IAAIoe,IAAgB,IAC/BjkB,iBACA4F,qBAEAse,SAEAjd,KAEAf,SAMAie,oBAOAxb,gBAKAxC,eAKAie,iBAEA,YAAI/d,GACA,OAAO5K,KAAK6K,cAAgB7K,KAAKmR,gBAAiBnR,KAAKmR,cAAcvG,SACzE,CACA,YAAIA,CAAS5M,GACTgC,KAAK6K,UAAY7M,EACjBgC,KAAKyoB,SAAS7d,SAAW5K,KAAK6K,SAClC,CACAA,UAOAY,kBAEAhF,aAcAmR,iBAKAjN,MAAQ,EAERM,QAAU,IAAI2d,MAEd1d,SAAW,IAAI0d,MAEfzd,MAAQ,IAAIyd,MAEZxd,QAAU,IAAIwd,MAEdvd,OAAS,IAAIud,MAEbtd,QAAU,IAAIsd,MAKdrd,MAAQ,IAAI6Z,IAAYC,IACpB,MAAMwD,EAAe7oB,KAAKyoB,SAASld,MAC9B6W,QAAKre,MAAI+kB,KACVhrB,OAAQkC,KACRiP,gBAAiB6Z,EAAW7Z,gBAC5BlT,MAAO+sB,EAAW/sB,MAClBuU,MAAOwY,EAAWxY,MAClBF,SAAU0Y,EAAW1Y,aAEpB/C,UAAUgY,GACf,MAAO,KACHwD,EAAa1b,aAAY,CAC7B,GAEJ4b,aAAYtF,OAAOuF,OACnBjpB,cACI,MAAMoR,EAAgBnR,KAAKmR,cACrBoV,KAAS9C,OAAOmE,GAAiB,CAAEb,UAAU,IAC7CkC,KAAWxF,OAAO2C,IACxBpmB,KAAKyoB,SAAWQ,EAAS3C,WAAWtmB,KAAK1B,QAAS,CAC9C8Q,mBAAoBmX,GAAuC,MAA7BA,EAAOnX,mBAA6BmX,EAAOnX,mBAAqB,EAC9F0H,gCAAiCyP,GAAoD,MAA1CA,EAAOzP,gCAC5CyP,EAAOzP,gCACP,EACNnF,OAAQ4U,GAAQ5U,SAEpB3R,KAAKyoB,SAASjd,KAAOxL,KACrBA,KAAKgI,kBAAkBud,sBAAsBvlB,KAAK1B,QAAQ8oB,cAAepnB,MACrEumB,GACAvmB,KAAKkpB,gBAAgB3C,GASrBpV,IACAnR,KAAKyoB,SAASta,mBAAmBgD,EAAcgY,cAC/ChY,EAAciY,QAAQppB,MAEtBmR,EAAcgY,aAAane,cAAcoX,QAAKC,KAAUriB,KAAKuoB,aAAalb,UAAU,KAChFrN,KAAKyoB,SAAS9d,MAAQ3K,KAAK2K,SAGnC3K,KAAKqpB,YAAYrpB,KAAKyoB,UACtBzoB,KAAKspB,cAActpB,KAAKyoB,SAC5B,CAKA3c,wBACI,OAAO9L,KAAKyoB,SAAS3c,uBACzB,CAEAC,iBACI,OAAO/L,KAAKyoB,SAAS1c,gBACzB,CAEA8B,QACI7N,KAAKyoB,SAAS5a,OAClB,CAIAQ,sBACI,OAAOrO,KAAKyoB,SAASpa,qBACzB,CAKAC,oBAAoBtQ,GAChBgC,KAAKyoB,SAASna,oBAAoBtQ,EACtC,CACAmpB,mBAKIoC,SAAgB,KACZvpB,KAAKwpB,qBACLxpB,KAAKypB,wBACLzpB,KAAKyoB,SAAS9d,MAAQ3K,KAAK2K,MACvB3K,KAAK2oB,kBACL3oB,KAAKyoB,SAASna,oBAAoBtO,KAAK2oB,iBAAgB,EAE5D,CAAEe,SAAU1pB,KAAK+oB,WACxB,CACAY,YAAYC,GACR,MAAMC,EAAqBD,EAAQlB,oBAC7BoB,EAAiBF,EAAQjB,iBAG3BkB,IAAuBA,EAAmBE,aAC1C/pB,KAAKwpB,qBAGTxpB,KAAKyoB,SAAS9d,MAAQ3K,KAAK2K,MAGvBmf,IAAmBA,EAAeC,aAAe/pB,KAAK2oB,kBACtD3oB,KAAKyoB,SAASna,oBAAoBtO,KAAK2oB,iBAE/C,CACA/C,cACQ5lB,KAAKmR,eACLnR,KAAKmR,cAAc6Y,WAAWhqB,MAElCA,KAAKgI,kBAAkB0d,oBAAoB1lB,KAAK1B,QAAQ8oB,eAExDpnB,KAAK8H,QAAQ4E,kBAAkB,KAC3B1M,KAAKoK,SAASwD,WACd5N,KAAKuoB,WAAW3Z,OAChB5O,KAAKuoB,WAAW3a,WAChB5N,KAAKyoB,SAASlb,SAAQ,EAE9B,CACA2Z,WAAWnc,GACP,MAAMoB,EAAUnM,KAAKoK,SAAS6f,WAC9B9d,EAAQ6O,KAAKjQ,GACb/K,KAAKoK,SAASwE,KAAKzC,EACvB,CACAmb,cAAcvc,GACV,MAAMoB,EAAUnM,KAAKoK,SAAS6f,WACxB1P,EAAQpO,EAAQ1I,QAAQsH,GAC1BwP,GAAQ,IACRpO,EAAQ2O,OAAOP,EAAO,GACtBva,KAAKoK,SAASwE,KAAKzC,GAE3B,CACA+d,oBAAoBtjB,GAChB5G,KAAKuE,iBAAmBqC,CAC5B,CACAujB,sBAAsBvjB,GACdA,IAAY5G,KAAKuE,mBACjBvE,KAAKuE,iBAAmB,KAEhC,CACA6lB,wBAAwB9Y,GACpBtR,KAAKmK,qBAAuBmH,CAChC,CACA+Y,0BAA0B/Y,GAClBA,IAAgBtR,KAAKmK,uBACrBnK,KAAKmK,qBAAuB,KAEpC,CAEAqf,qBACI,MAAMlrB,EAAU0B,KAAK1B,QAAQ8oB,cAC7B,IAAI5a,EAAclO,EACd0B,KAAK0oB,sBACLlc,OACwBM,IAApBxO,EAAQgsB,QACFhsB,EAAQgsB,QAAQtqB,KAAK0oB,qBAEnBpqB,EAAQyc,eAAeuP,QAAQtqB,KAAK0oB,sBAKpD1oB,KAAKyoB,SAAS/c,gBAAgBc,GAAelO,EACjD,CAEAisB,sBACI,MAAMC,EAAWxqB,KAAKkN,gBACtB,OAAKsd,EAGmB,iBAAbA,EACAxqB,KAAK1B,QAAQ8oB,cAAckD,QAAQE,IAAQ,EAE/Cpe,MAAcoe,GALV,IAMf,CAEAnB,YAAYhC,GACRA,EAAIrc,cAAcqC,UAAU,KACxB,IAAKga,EAAIpb,aAAc,CACnB,MAAMwe,EAAMzqB,KAAKioB,KACXvd,EAAiB1K,KAAK0K,eACtB4G,EAActR,KAAKmK,qBACnB,CACExD,SAAU3G,KAAKmK,qBAAqBugB,YACpCxsB,QAAS8B,KAAKmK,qBAAqBqB,KACnCzE,cAAe/G,KAAK+nB,mBAEtB,KACAnhB,EAAU5G,KAAKuE,iBACf,CACEoC,SAAU3G,KAAKuE,iBAAiBmmB,YAChCxsB,QAAS8B,KAAKuE,iBAAiBiH,KAC/B1E,UAAW9G,KAAKuE,iBAAiBuC,UACjCC,cAAe/G,KAAK+nB,mBAEtB,KACNV,EAAIzc,SAAW5K,KAAK4K,SACpByc,EAAI5c,SAAWzK,KAAKyK,SACpB4c,EAAI1c,MAAQ3K,KAAK2K,MACjB0c,EAAI3c,eAC0B,iBAAnBA,GAA+BA,EAChCA,KACAigB,MAAqBjgB,GAC/B2c,EAAI5b,kBAAoBzL,KAAKyL,kBAC7B4b,EAAI5gB,aAAezG,KAAKyG,aACxB4gB,EACKpa,oBAAoBjN,KAAKuqB,uBACzBhe,wBAAwB+E,GACxBhF,oBAAoB1F,GACpB4H,qBAAqBxO,KAAK4X,kBAAoB,UAC/C6S,GACApD,EAAIpZ,cAAcwc,EAAIzsB,MAE9B,IAGJqpB,EAAIrc,cAAcoX,QAAKwI,MAAK,IAAIvd,UAAU,KAEtC,GAAIrN,KAAK8mB,YAEL,YADAO,EAAI1b,WAAW3L,KAAK8mB,YAAY2B,UAKpC,IAAIzjB,EAAShF,KAAK1B,QAAQ8oB,cAAcrM,cACxC,KAAO/V,GAAQ,CACX,MAAM6lB,EAAa7qB,KAAKgI,kBAAkB2d,wBAAwB3gB,GAClE,GAAI6lB,EAAY,CACZxD,EAAI1b,WAAWkf,EAAWpC,UAC1B,KACJ,CACAzjB,EAASA,EAAO+V,aACpB,GAER,CAEAuO,cAAcjC,GACVA,EAAIpc,QAAQoC,UAAUyd,IAClB9qB,KAAKiL,QAAQ8f,KAAK,CAAEjtB,OAAQkC,KAAMjE,MAAO+uB,EAAW/uB,QAGpDiE,KAAKmoB,mBAAmB6C,cAAa,GAEzC3D,EAAInc,SAASmC,UAAU4d,IACnBjrB,KAAKkL,SAAS6f,KAAK,CAAEjtB,OAAQkC,KAAMjE,MAAOkvB,EAAalvB,OAAO,GAElEsrB,EAAIlc,MAAMkC,UAAU6d,IAChBlrB,KAAKmL,MAAM4f,KAAK,CACZjtB,OAAQkC,KACRoQ,SAAU8a,EAAS9a,SACnBW,UAAWma,EAASna,UACpBhV,MAAOmvB,EAASnvB,QAIpBiE,KAAKmoB,mBAAmB6C,cAAa,GAEzC3D,EAAIjc,QAAQiC,UAAU8d,IAClBnrB,KAAKoL,QAAQ2f,KAAK,CACd3c,UAAW+c,EAAW/c,UAAU5C,KAChC8H,KAAMtT,KACNmT,aAAcgY,EAAWhY,cAC5B,GAELkU,EAAIhc,OAAOgC,UAAU+d,IACjBprB,KAAKqL,OAAO0f,KAAK,CACb3c,UAAWgd,EAAUhd,UAAU5C,KAC/B8H,KAAMtT,MACT,GAELqnB,EAAI/b,QAAQ+B,UAAUge,IAClBrrB,KAAKsL,QAAQyf,KAAK,CACdxX,cAAe8X,EAAU9X,cACzBJ,aAAckY,EAAUlY,aACxBK,kBAAmB6X,EAAU7X,kBAAkBhI,KAC/C4C,UAAWid,EAAUjd,UAAU5C,KAC/B4H,uBAAwBiY,EAAUjY,uBAClCE,KAAMtT,KACNoQ,SAAUib,EAAUjb,SACpBW,UAAWsa,EAAUta,UACrBhV,MAAOsvB,EAAUtvB,OACpB,EAET,CAEAmtB,gBAAgB3C,GACZ,MAAQ9b,WAAUC,iBAAgBe,oBAAmBhF,eAAcyG,kBAAiBoe,mBAAkB5C,sBAAqB9Q,oBAAsB2O,EACjJvmB,KAAK4K,SAAW0gB,IAA2B,EAC3CtrB,KAAK0K,eAAiBA,GAAkB,EACpCD,IACAzK,KAAKyK,SAAWA,GAEhBgB,IACAzL,KAAKyL,kBAAoBA,GAEzBhF,IACAzG,KAAKyG,aAAeA,GAEpByG,IACAlN,KAAKkN,gBAAkBA,GAEvBwb,IACA1oB,KAAK0oB,oBAAsBA,GAE3B9Q,IACA5X,KAAK4X,iBAAmBA,EAEhC,CAEA6R,wBAEIzpB,KAAKoK,SACAgY,QAELmJ,MAAIpf,IACA,MAAMqf,EAAiBrf,EAAQpI,IAAIgH,GAAUA,EAAOzM,SAIhD0B,KAAKqoB,aAAeroB,KAAK0oB,qBACzB8C,EAAexQ,KAAKhb,KAAK1B,SAE7B0B,KAAKyoB,SAASvc,YAAYsf,EAAc,IAC3C,EAEDC,MAAWtf,MACAmZ,QAASnZ,EAAQpI,IAAIuP,GAAQA,EAAK2T,cAAc7E,QAAKsJ,KAAUpY,QACzE,EAAG+O,KAAUriB,KAAKuoB,aACdlb,UAAUse,IAEX,MAAMnG,EAAUxlB,KAAKyoB,SACf1d,EAAS4gB,EAAertB,QAAQ8oB,cACtCuE,EAAe/gB,SAAW4a,EAAQ1X,cAAc/C,GAAUya,EAAQzX,aAAahD,EAAM,EAE7F,CACAkY,iBAAW,SAAAC,GAAA,WAAAA,GAAwF4E,EAAO,EAC1G7E,iBA7yByF5mB,MAAE,CAAA0B,KA6yBJ+pB,EAAO7rB,UAAA,oBAAAknB,UAAA,eAAAyI,SAAA,EAAA1vB,aAAA,SAAAC,EAAAC,GAAA,EAAAD,GA7yBLE,MAAE,oBAAAD,EAAAwO,SAAFvO,CA6yBK,oBAAPD,EAAAqsB,SAAAxc,aAAO,EAAAsb,OAAA,CAAA/b,KAAA,yBAAAf,SAAA,iCAAAie,oBAAA,+CAAAxb,gBAAA,wCAAAxC,eAAA,yCAAAie,iBAAA,iDAAA/d,SAAA,gCAAoa4c,OAAgB/b,kBAAA,mDAAAhF,aAAA,yCAAAmR,iBAAA,iDAAAjN,MAAA,0BAAoOkhB,QAAeC,QAAA,CAAA7gB,QAAA,iBAAAC,SAAA,kBAAAC,MAAA,eAAAC,QAAA,iBAAAC,OAAA,gBAAAC,QAAA,iBAAAC,MAAA,gBAAAwgB,SAAA,YAAAtE,SAAA,CA7yB5qBprB,MA6yB+gC,CAAC,CAAEqrB,QAASjB,EAAiBkB,YAAaG,KA7yBzjCzrB,SA8yB5F,OAlbKyrB,CAAO,KA4fb,MAAMkE,EAAsB,IAAItF,MAAe,oBAC/C,IA8BMuF,GAAW,MAAjB,MAAMA,EACF3tB,WAAUmlB,OAAOoD,OACjBsB,sBAAqB1E,OAAO2E,OAC5B8D,qBAAoBzI,OAAO0I,KAC3BlE,QAAOxE,OAAOyE,KAAgB,CAAEnB,UAAU,IAC1CqF,UAAS3I,OAAOuI,EAAqB,CACjCjF,UAAU,EACVC,UAAU,IAGduB,WAAa,IAAItf,IAEjBojB,2BAEApJ,kBAAoB,GAEpBkG,aAMA/I,YAAc,GAEd5U,KAEAwN,YAKAsT,MAAK7I,OAAO8I,MAAcC,MAAM,kBAEhC/hB,SAEA,YAAIG,GACA,OAAO5K,KAAK6K,aAAgB7K,KAAKosB,QAAUpsB,KAAKosB,OAAOxhB,QAC3D,CACA,YAAIA,CAAS5M,GAKTgC,KAAKmpB,aAAave,SAAW5K,KAAK6K,UAAY7M,CAClD,CACA6M,UAEAmJ,gBAKAsK,eAAiBA,KAAM,EAEvBC,cAAgBA,KAAM,EAEtBH,mBAEAC,eAeAoO,yBAEAnhB,QAAU,IAAIsd,MAIdxd,QAAU,IAAIwd,MAKdvd,OAAS,IAAIud,MAEbpK,OAAS,IAAIoK,MAQb8D,eAAiB,IAAIxoB,IACrBnE,cACI,MAAMkpB,KAAWxF,OAAO2C,IAClBG,KAAS9C,OAAOmE,GAAiB,CAAEb,UAAU,IAInD/mB,KAAKmpB,aAAeF,EAASzC,eAAexmB,KAAK1B,SACjD0B,KAAKmpB,aAAa3d,KAAOxL,KACrBumB,GACAvmB,KAAKkpB,gBAAgB3C,GAEzBvmB,KAAKmpB,aAAa7K,eAAiB,CAACpF,EAAMzF,IAC/BzT,KAAKse,eAAepF,EAAK1N,KAAMiI,EAAKjI,MAE/CxL,KAAKmpB,aAAa5K,cAAgB,CAAChE,EAAOrB,EAAMzF,IACrCzT,KAAKue,cAAchE,EAAOrB,EAAK1N,KAAMiI,EAAKjI,MAErDxL,KAAK2sB,4BAA4B3sB,KAAKmpB,cACtCnpB,KAAKspB,cAActpB,KAAKmpB,cACxB8C,EAAYW,WAAW5R,KAAKhb,MACxBA,KAAKosB,QACLpsB,KAAKosB,OAAOS,OAAOnnB,IAAI1F,KAE/B,CAEAopB,QAAQ9V,GACJtT,KAAK0sB,eAAehnB,IAAI4N,GAGpBtT,KAAKmpB,aAAald,cAClBjM,KAAK8sB,mBAEb,CAEA9C,WAAW1W,GACPtT,KAAK0sB,eAAe1e,OAAOsF,GAE3BtT,KAAK8sB,mBACT,CAEAC,iBACI,OAAO3lB,MAAMoR,KAAKxY,KAAK0sB,gBAAgBpT,KAAK,CAACoC,EAAGC,IACnBD,EAAE+M,SACtBzc,oBACAghB,wBAAwBrR,EAAE8M,SAASzc,qBAIdihB,KAAKC,6BAA8B,EAAK,EAE1E,CACAtH,cACI,MAAMrL,EAAQ0R,EAAYW,WAAWnpB,QAAQzD,MACzCua,GAAQ,GACR0R,EAAYW,WAAW9R,OAAOP,EAAO,GAErCva,KAAKosB,QACLpsB,KAAKosB,OAAOS,OAAO7e,OAAOhO,MAE9BA,KAAK0sB,eAAezsB,QACpBD,KAAKmpB,aAAa5b,UAClBvN,KAAKuoB,WAAW3Z,OAChB5O,KAAKuoB,WAAW3a,UACpB,CAEA+e,4BAA4BtF,GACpBrnB,KAAKioB,MACLjoB,KAAKioB,KAAK7a,OACLgV,QAAKsJ,KAAU1rB,KAAKioB,KAAKjqB,QAAK,EAAGqkB,KAAUriB,KAAKuoB,aAChDlb,UAAUrP,GAASqpB,EAAIpZ,cAAcjQ,IAE9CqpB,EAAIrc,cAAcqC,UAAU,KACxB,MAAMmM,KAAW2T,MAAYntB,KAAKogB,aAAarc,IAAI0P,GAC3B,iBAATA,EACuBwY,EAAYW,WAAW5mB,KAAKonB,GAAQA,EAAKd,KAAO7Y,GAM3EA,GAWX,GATIzT,KAAKosB,QACLpsB,KAAKosB,OAAOS,OAAOtsB,QAAQkT,KACQ,IAA3B+F,EAAS/V,QAAQgQ,IACjB+F,EAASwB,KAAKvH,EAAI,IAMzBzT,KAAKqsB,2BAA4B,CAClC,MAAMgB,EAAoBrtB,KAAKksB,kBAC1BoB,4BAA4BttB,KAAK1B,SACjCyF,IAAIwpB,GAAcA,EAAWC,gBAAgBpG,eAClDpnB,KAAKmpB,aAAa7I,sBAAsB+M,GAGxCrtB,KAAKqsB,4BAA6B,CACtC,CACA,GAAIrsB,KAAKysB,yBAA0B,CAC/B,MAAMre,EAAYpO,KAAK1B,QAAQ8oB,cAAcqG,cAAcztB,KAAKysB,0BAIhEpF,EAAI7L,qBAAqBpN,EAC7B,CACAiZ,EAAIzc,SAAW5K,KAAK4K,SACpByc,EAAI5c,SAAWzK,KAAKyK,SACpB4c,EAAIrT,gBAAkBhU,KAAKgU,gBAC3BqT,EAAIjJ,mBAAqBpe,KAAKoe,mBAC9BiJ,EAAIhJ,kBAAiBsM,MAAqB3qB,KAAKqe,eAAgB,GAC/DgJ,EACKjH,YAAY5G,EAAS0G,OAAOzM,GAAQA,GAAQA,IAASzT,MAAM+D,IAAIqpB,GAAQA,EAAKjE,eAC5EzJ,gBAAgB1f,KAAKgZ,YAAW,EAE7C,CAEAsQ,cAAcjC,GACVA,EAAIrc,cAAcqC,UAAU,KACxBrN,KAAK8sB,oBACL9sB,KAAKmoB,mBAAmB6C,cAAa,GAEzC3D,EAAIjc,QAAQiC,UAAUtR,IAClBiE,KAAKoL,QAAQ2f,KAAK,CACd3c,UAAWpO,KACXsT,KAAMvX,EAAMuX,KAAK9H,KACjB2H,aAAcpX,EAAMoX,cACvB,GAELkU,EAAIhc,OAAOgC,UAAUtR,IACjBiE,KAAKqL,OAAO0f,KAAK,CACb3c,UAAWpO,KACXsT,KAAMvX,EAAMuX,KAAK9H,OAErBxL,KAAKmoB,mBAAmB6C,cAAa,GAEzC3D,EAAI7I,OAAOnR,UAAUtR,IACjBiE,KAAKwe,OAAOuM,KAAK,CACbxX,cAAexX,EAAMwX,cACrBJ,aAAcpX,EAAMoX,aACpB/E,UAAWpO,KACXsT,KAAMvX,EAAMuX,KAAK9H,MACpB,GAEL6b,EAAI/b,QAAQ+B,UAAUge,IAClBrrB,KAAKsL,QAAQyf,KAAK,CACdxX,cAAe8X,EAAU9X,cACzBJ,aAAckY,EAAUlY,aACxBK,kBAAmB6X,EAAU7X,kBAAkBhI,KAC/C4C,UAAWid,EAAUjd,UAAU5C,KAC/B8H,KAAM+X,EAAU/X,KAAK9H,KACrB4H,uBAAwBiY,EAAUjY,uBAClChD,SAAUib,EAAUjb,SACpBW,UAAWsa,EAAUta,UACrBhV,MAAOsvB,EAAUtvB,QAIrBiE,KAAKmoB,mBAAmB6C,cAAa,IACxC,EACD1F,KAAM+B,EAAI5I,iBAAkB4I,EAAI3I,kBAAkBrR,UAAU,IAAMrN,KAAKmoB,mBAAmB6C,eAC9F,CAEA9B,gBAAgB3C,GACZ,MAAQ9b,WAAU6gB,mBAAkBtX,kBAAiB0Z,yBAAwBC,mBAAoBpH,EACjGvmB,KAAK4K,SAAW0gB,IAA2B,EAC3CtrB,KAAKgU,gBAAkBA,IAA0B,EACjDhU,KAAKoe,mBAAqBsP,IAAiC,EAC3D1tB,KAAKgZ,YAAc2U,GAAmB,WAClCljB,IACAzK,KAAKyK,SAAWA,EAExB,CAEAqiB,oBACI9sB,KAAKmpB,aAAa9P,UAAUrZ,KAAK+sB,iBAAiBhpB,IAAIuP,GAAQA,EAAKmV,UACvE,CACAxF,iBAAW,SAAAC,GAAA,WAAAA,GAAwF+I,EAAW,EAC9GhJ,iBAzqCyF5mB,MAAE,CAAA0B,KAyqCJkuB,EAAWhwB,UAAA,0CAAAknB,UAAA,oBAAAyI,SAAA,EAAA1vB,aAAA,SAAAC,EAAAC,GAAA,EAAAD,IAzqCTE,MAAE,KAAAD,EAAAkwB,IAAFjwB,MAAE,yBAAAD,EAAAwO,SAAFvO,CAyqCS,yBAAXD,EAAA+sB,aAAAld,aAzqCE5P,CAyqCS,0BAAXD,EAAA+sB,aAAAzZ,eAAW,EAAA6X,OAAA,CAAAnH,YAAA,2CAAA5U,KAAA,6BAAAwN,YAAA,2CAAAsT,GAAA,KAAA7hB,SAAA,qCAAAG,SAAA,oCAAoU4c,OAAgBxT,gBAAA,kDAAsEwT,OAAgBlJ,eAAA,iDAAAC,cAAA,+CAAAH,mBAAA,wDAA8MoJ,OAAgBnJ,eAAA,iDAAAoO,yBAAA,8DAAAX,QAAA,CAAAxgB,QAAA,qBAAAF,QAAA,qBAAAC,OAAA,oBAAAmT,OAAA,qBAAAuN,SAAA,gBAAAtE,SAAA,CAzqCjpBprB,MAyqCkrC,CAEnwC,CAAEqrB,QAASsE,EAAqB4B,cAAU9gB,GAC1C,CAAE4a,QAASG,GAAeF,YAAasE,QAElD,OAvRKA,CAAW,yHEtyHjB,MAAM4B,EAAW,CACfC,kBAAkB,GASb,IAAMC,EAAqB,MAA5B,MAAOA,UAA6BC,IAIxCjuB,YACSkuB,EACAC,GACLC,QAFKnuB,KAAAiuB,SACAjuB,KAAAkuB,QAJTluB,KAAAouB,OAAMC,MAAS,CAAEN,wBAAwBF,EAK5B,CAEb,YAAIS,GAAa,OAAOtuB,KAAKkuB,MAAMI,QAAU,CAE7C,OAAIC,GAAQ,OAAOvuB,KAAKiuB,OAAOM,GAAK,CAEpC,eAAIC,GAAgB,OAAOxuB,KAAKiuB,OAAOM,IAAIzqB,MAAM,IAAM,CAEvD2qB,SAASrsB,GACP,OAAOpC,KAAKkuB,MAAMI,SAASI,SAAS5tB,IAAIsB,EAC1C,CAEAusB,UAA4BC,GAC1B,MAAMF,EAAW1uB,KAAKkuB,MAAMI,SAASI,SACrC,OAAOE,EAAKC,OAAO,CAACC,EAAK1sB,KACvB0sB,EAAI1sB,GAAOssB,EAAS5tB,IAAIsB,GACjB0sB,GACN,GACL,CAEAC,cAAc3sB,GACZ,OAAOpC,KAAKkuB,MAAMI,SAASU,cAAcluB,IAAIsB,EAC/C,CAEA6sB,eAAiCL,GAC/B,MAAMI,EAAgBhvB,KAAKkuB,MAAMI,SAASU,cAC1C,OAAOJ,EAAKC,OAAO,CAACC,EAAK1sB,KACvB0sB,EAAI1sB,GAAO4sB,EAAcluB,IAAIsB,GACtB0sB,GACN,GACL,CAEAI,QAAmB,OAAOlvB,KAAKiuB,OAAOkB,uBAAuBC,QAAQF,KAAY,CAK1EpB,iBAAiBpwB,GACtB,MAAM2xB,EAAIrvB,KAAKouB,IAAIkB,KAAK,oBACxBtvB,KAAKuvB,cAAc7pB,IACjB1F,KAAKwvB,qBAAqBniB,UAAU,IAAM3P,MAE5C2xB,EAAExT,KACJ,CAKO4T,YAAYC,GACjB,MAAMC,EAAO3vB,KAAKiuB,OAAO2B,cAAc,CAACF,GAAS,CAAEG,WAAY7vB,KAAKkuB,QAEpE,OADiBluB,KAAKiuB,OAAO6B,aAAaH,EAE5C,CAMOI,QAAQxB,EAAaa,GAC1B,OAAOpvB,KAAKiuB,OAAO+B,SAAS,CAACzB,GAAMa,EACrC,CAKOa,YAAYC,EAAiBd,GAClC,OAAOpvB,KAAKiuB,OAAO+B,SAASE,EAAU,IAAKd,EAAQS,WAAY7vB,KAAKkuB,OACtE,CAEAsB,qBACE,OAAOxvB,KAAKiuB,OAAOkC,OAAO/N,QACxBlC,KAAOnkB,GAASA,aAAiBq0B,OAAa,EAC9C1E,OAAY1rB,KAAKkuB,MAAMI,SAAS+B,aAAU,EAC1CtsB,KAAI,MAAQ/D,KAAKkuB,MAAMI,SAAS+B,aAAU,EAC1CC,QAAQ,EACRpQ,KAAO,EAAEqQ,EAAgBC,KAAiBD,IAAmBC,GAEjE,iDApFWzC,GAAoB1xB,MAAAo0B,MAAAp0B,MAAAo0B,MAAA,sCAApB1C,EAAoB/H,QAApB+H,EAAoB9H,WAAA,SAApB8H,CAAqB","names":["MousedownStopPropagationDirective","onMousedown","event","stopPropagation","selectors","hostBindings","rf","ctx","i0","$event","convert","obj","fn","getWith","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","constructor","this","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","key","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","parseCssPropertyValue","computedStyle","getPropertyValue","split","map","part","trim","Set","PreviewRef","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","_renderer","_previewEmbeddedView","_preview","attach","parent","_createPreview","supportsPopover","showPopover","destroy","remove","setTransform","addClass","className","classList","add","getTransitionDuration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","addEventListener","handler","listen","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","margin","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","dragImportantProperties","DragRef","_config","_ngZone","_viewportRuler","_dragDropRegistry","_rootElementCleanups","_cleanupShadowRootSelectStart","_previewContainer","_placeholderRef","_placeholder","_pickupPositionInElement","_anchor","_passiveTransform","_activeTransform","_hasStartedDragging","signal","_hasMoved","_initialContainer","_initialIndex","_parentPositions","_moveEvents","Subject","_pointerDirectionDelta","_pointerPositionAtLastDirectionChange","_lastKnownPointerPosition","_ownerSVGElement","_rootElementTapHighlight","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_lastTouchEventTime","_dragStartTime","_boundaryElement","_nativeInteractionsEnabled","_previewRect","_boundaryRect","_placeholderTemplate","_handles","_disabledHandles","_dropContainer","_parentDragRef","_cachedShadowRoot","lockAxis","dragStartDelay","scale","disabled","_disabled","_toggleNativeDragInteractions","handle","beforeStarted","started","released","ended","entered","exited","dropped","moved","data","constrainPosition","withRootElement","withParent","parentDragRef","registerDragItem","getPlaceholderElement","getRootElement","getVisibleElement","isDragging","withHandles","handles","coerceElement","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","_bindEventWithOptions","_pointerDown","_nativeDragStart","undefined","SVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","dispose","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","container","getFreeDragPosition","setFreeDragPosition","_applyRootElementTransform","withPreviewContainer","_sortFromLastPointerPosition","_updateActiveDropContainer","_getConstrainedPointerPosition","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","abs","dragStartThreshold","isDelayElapsed","Date","now","_getDragStartDelay","_endDragSequence","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_updatePointerDirectionDelta","offset","activeTransform","observers","distance","_getDragDistance","delta","_pointerUp","stopDragging","webkitTapHighlightColor","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","shadowRoot","_getShadowRoot","dropContainer","shadowDomSelectStart","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_getPointerPositionInElement","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","cleanupListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","cleanup","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_sortPredicate","_itemPositions","_activeDraggables","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","MixedSortStrategy","_rootNode","_activeItems","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","elementAtPoint","minDistance","Infinity","minIndex","hypot","AutoScrollVerticalDirection","NONE","UP","DOWN","AutoScrollHorizontalDirection","LEFT","RIGHT","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_container","_isDragging","_sortStrategy","_domRect","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_scrollNode","_stopScrollTimers","_scrollableElements","_initialScrollSnap","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","filter","every","connectedTo","strategy","withScrollableParents","oldContainerIndex","newContainerIndex","unshift","size","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_startScrollInterval","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","pipe","takeUntil","scrollStep","scrollBy","_canReceive","_startReceiving","activeSiblings","initiator","receiver","draggedItems","capturingEventOptions","activeCapturingEventOptions","_ResetsLoader","static","__ngFactoryType__","hostAttrs","decls","vars","encapsulation","changeDetection","DragDropRegistry","inject","NgZone","DOCUMENT","_styleLoader","_CdkPrivateStyleLoader","RendererFactory2","createRenderer","_cleanupDocumentTouchmove","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","_domNodesToDirectives","scroll","_persistentTouchmoveListener","load","update","instances","startsWith","endEventHandler","e","toBind","_preventDefaultWhileDragging","options","_clearGlobalListeners","streams","Observable","observer","merge","registerDirectiveNode","dragRef","WeakMap","removeDirectiveNode","getDragDirectiveForNode","ngOnDestroy","instance","some","token","factory","ɵfac","providedIn","DEFAULT_CONFIG","DragDrop","ViewportRuler","createDrag","config","createDropList","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","ElementRef","_parentDrag","optional","skipSelf","_stateChanges","_addHandle","ngAfterViewInit","nativeElement","ref","_removeHandle","inputs","booleanAttribute","features","provide","useExisting","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_viewContainerRef","ViewContainerRef","_dir","Directionality","_changeDetectorRef","ChangeDetectorRef","_selfHandle","self","_destroyed","BehaviorSubject","_dragRef","rootElementSelector","freeDragPosition","EventEmitter","subscription","movedEvent","_injector","Injector","dragDrop","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","afterNextRender","_updateRootElement","_setupHandlesListener","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","closest","_getBoundaryElement","boundary","dir","templateRef","coerceNumberProperty","take","parentDrag","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","tap","handleElements","switchMap","startWith","handleInstance","hostVars","numberAttribute","outputs","exportAs","CDK_DROP_LIST_GROUP","CdkDropList","_scrollDispatcher","ScrollDispatcher","_group","_scrollableParentsResolved","id","_IdGenerator","getId","elementContainerSelector","_unsortedItems","_setupInputSyncSubscription","_dropLists","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","querySelector","listAutoScrollDisabled","listOrientation","useValue","logSpecs","doOnDialogClosed","DialogRoutingService","ServiceBase","router","route","super","log","classLog","snapshot","url","urlSegments","getParam","paramMap","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","l","fnIf","subscriptions","childDialogClosed$","urlSubRoute","params","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","i1"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/core/object-utilities.ts","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts"],"sourcesContent":["import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","\r\n/**\r\n * Conversion function to change something to something else, a bit like 'map' but for a single item.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `getWith` function, but has a different name to indicate the usage.\r\n */\r\nexport function convert<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n/**\r\n * Function to do something with an object and return the result.\r\n * \r\n * Typically used in short return statements.\r\n * \r\n * Internally it's the same as the `convert` function, but has a different name to indicate the usage.\r\n */\r\nexport function getWith<T extends unknown, R extends unknown>(obj: T, fn: (value: T) => R): R {\r\n  return fn(obj);\r\n}\r\n\r\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, RendererFactory2, Injectable, InjectionToken, ElementRef, booleanAttribute, Directive, Input, ViewContainerRef, ChangeDetectorRef, EventEmitter, Injector, afterNextRender, numberAttribute, Output, TemplateRef, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader, _IdGenerator } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, _bindEventWithOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    _document;\n    /** Cached positions of the scrollable parent elements. */\n    positions = new Map();\n    constructor(_document) {\n        this._document = _document;\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    _document;\n    _rootElement;\n    _direction;\n    _initialDomRect;\n    _previewTemplate;\n    _previewClass;\n    _pickupPositionOnPage;\n    _initialTransform;\n    _zIndex;\n    _renderer;\n    /** Reference to the view of the preview element. */\n    _previewEmbeddedView;\n    /** Reference to the preview element. */\n    _preview;\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex, _renderer) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n        this._renderer = _renderer;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        return this._renderer.listen(this._preview, name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = { passive: false };\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = {\n    passive: false,\n    capture: true,\n};\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    _config;\n    _document;\n    _ngZone;\n    _viewportRuler;\n    _dragDropRegistry;\n    _renderer;\n    _rootElementCleanups;\n    _cleanupShadowRootSelectStart;\n    /** Element displayed next to the user's pointer while the element is dragged. */\n    _preview;\n    /** Container into which to insert the preview. */\n    _previewContainer;\n    /** Reference to the view of the placeholder element. */\n    _placeholderRef;\n    /** Element that is rendered instead of the draggable item while it is being sorted. */\n    _placeholder;\n    /** Coordinates within the element at which the user picked up the element. */\n    _pickupPositionInElement;\n    /** Coordinates on the page at which the user picked up the element. */\n    _pickupPositionOnPage;\n    /**\n     * Anchor node used to save the place in the DOM where the element was\n     * picked up so that it can be restored at the end of the drag sequence.\n     */\n    _anchor;\n    /**\n     * CSS `transform` applied to the element when it isn't being dragged. We need a\n     * passive transform in order for the dragged element to retain its new position\n     * after the user has stopped dragging and because we need to know the relative\n     * position in case they start dragging again. This corresponds to `element.style.transform`.\n     */\n    _passiveTransform = { x: 0, y: 0 };\n    /** CSS `transform` that is applied to the element while it's being dragged. */\n    _activeTransform = { x: 0, y: 0 };\n    /** Inline `transform` value that the element had before the first dragging sequence. */\n    _initialTransform;\n    /**\n     * Whether the dragging sequence has been started. Doesn't\n     * necessarily mean that the element has been moved.\n     */\n    _hasStartedDragging = signal(false);\n    /** Whether the element has moved since the user started dragging it. */\n    _hasMoved;\n    /** Drop container in which the DragRef resided when dragging began. */\n    _initialContainer;\n    /** Index at which the item started in its initial container. */\n    _initialIndex;\n    /** Cached positions of scrollable parent elements. */\n    _parentPositions;\n    /** Emits when the item is being moved. */\n    _moveEvents = new Subject();\n    /** Keeps track of the direction in which the user is dragging along each axis. */\n    _pointerDirectionDelta;\n    /** Pointer position at which the last change in the delta occurred. */\n    _pointerPositionAtLastDirectionChange;\n    /** Position of the pointer at the last pointer event. */\n    _lastKnownPointerPosition;\n    /**\n     * Root DOM node of the drag instance. This is the element that will\n     * be moved around as the user is dragging.\n     */\n    _rootElement;\n    /**\n     * Nearest ancestor SVG, relative to which coordinates are calculated if dragging SVGElement\n     */\n    _ownerSVGElement;\n    /**\n     * Inline style value of `-webkit-tap-highlight-color` at the time the\n     * dragging was started. Used to restore the value once we're done dragging.\n     */\n    _rootElementTapHighlight;\n    /** Subscription to pointer movement events. */\n    _pointerMoveSubscription = Subscription.EMPTY;\n    /** Subscription to the event that is dispatched when the user lifts their pointer. */\n    _pointerUpSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being scrolled. */\n    _scrollSubscription = Subscription.EMPTY;\n    /** Subscription to the viewport being resized. */\n    _resizeSubscription = Subscription.EMPTY;\n    /**\n     * Time at which the last touch event occurred. Used to avoid firing the same\n     * events multiple times on touch devices where the browser will fire a fake\n     * mouse event for each touch event, after a certain time.\n     */\n    _lastTouchEventTime;\n    /** Time at which the last dragging sequence was started. */\n    _dragStartTime;\n    /** Cached reference to the boundary element. */\n    _boundaryElement = null;\n    /** Whether the native dragging interactions have been enabled on the root element. */\n    _nativeInteractionsEnabled = true;\n    /** Client rect of the root element when the dragging sequence has started. */\n    _initialDomRect;\n    /** Cached dimensions of the preview element. Should be read via `_getPreviewRect`. */\n    _previewRect;\n    /** Cached dimensions of the boundary element. */\n    _boundaryRect;\n    /** Element that will be used as a template to create the draggable item's preview. */\n    _previewTemplate;\n    /** Template for placeholder element rendered to show where a draggable would be dropped. */\n    _placeholderTemplate;\n    /** Elements that can be used to drag the draggable item. */\n    _handles = [];\n    /** Registered handles that are currently disabled. */\n    _disabledHandles = new Set();\n    /** Droppable container that the draggable is a part of. */\n    _dropContainer;\n    /** Layout direction of the item. */\n    _direction = 'ltr';\n    /** Ref that the current drag item is nested in. */\n    _parentDragRef;\n    /**\n     * Cached shadow root that the element is placed in. `null` means that the element isn't in\n     * the shadow DOM and `undefined` means that it hasn't been resolved yet. Should be read via\n     * `_getShadowRoot`, not directly.\n     */\n    _cachedShadowRoot;\n    /** Axis along which dragging is locked. */\n    lockAxis;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay = 0;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    _disabled = false;\n    /** Emits as the drag sequence is being prepared. */\n    beforeStarted = new Subject();\n    /** Emits when the user starts dragging the item. */\n    started = new Subject();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new Subject();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new Subject();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new Subject();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new Subject();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new Subject();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = this._moveEvents;\n    /** Arbitrary data that can be attached to the drag item. */\n    data;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry, _renderer) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        this._renderer = _renderer;\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            this._removeRootElementListeners();\n            this._rootElementCleanups = this._ngZone.runOutsideAngular(() => [\n                _bindEventWithOptions(this._renderer, element, 'mousedown', this._pointerDown, activeEventListenerOptions),\n                _bindEventWithOptions(this._renderer, element, 'touchstart', this._pointerDown, passiveEventListenerOptions),\n                _bindEventWithOptions(this._renderer, element, 'dragstart', this._nativeDragStart, activeEventListenerOptions),\n            ]);\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners();\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._cleanupShadowRootSelectStart?.();\n        this._cleanupShadowRootSelectStart = undefined;\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /** Handler for the `mousedown`/`touchstart` events. */\n    _pointerDown = (event) => {\n        this.beforeStarted.next();\n        // Delegate the event based on whether it started from a handle or the element itself.\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                this._initializeDragSequence(targetHandle, event);\n            }\n        }\n        else if (!this.disabled) {\n            this._initializeDragSequence(this._rootElement, event);\n        }\n    };\n    /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n    _pointerMove = (event) => {\n        const pointerPosition = this._getPointerPositionOnPage(event);\n        if (!this._hasStartedDragging()) {\n            const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n            const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n            const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n            // Only start dragging after the user has moved more than the minimum distance in either\n            // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n            // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n            // per pixel of movement (e.g. if the user moves their pointer quickly).\n            if (isOverThreshold) {\n                const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                const container = this._dropContainer;\n                if (!isDelayElapsed) {\n                    this._endDragSequence(event);\n                    return;\n                }\n                // Prevent other drag sequences from starting while something in the container is still\n                // being dragged. This can happen while we're waiting for the drop animation to finish\n                // and can cause errors, because some elements might still be moving around.\n                if (!container || (!container.isDragging() && !container.isReceiving())) {\n                    // Prevent the default action as soon as the dragging sequence is considered as\n                    // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                    if (event.cancelable) {\n                        event.preventDefault();\n                    }\n                    this._hasStartedDragging.set(true);\n                    this._ngZone.run(() => this._startDragSequence(event));\n                }\n            }\n            return;\n        }\n        // We prevent the default action down here so that we know that dragging has started. This is\n        // important for touch devices where doing this too early can unnecessarily block scrolling,\n        // if there's a dragging delay.\n        if (event.cancelable) {\n            event.preventDefault();\n        }\n        const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n        this._hasMoved = true;\n        this._lastKnownPointerPosition = pointerPosition;\n        this._updatePointerDirectionDelta(constrainedPointerPosition);\n        if (this._dropContainer) {\n            this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n        }\n        else {\n            // If there's a position constraint function, we want the element's top/left to be at the\n            // specific position on the page. Use the initial position as a reference if that's the case.\n            const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n            const activeTransform = this._activeTransform;\n            activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n            activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n            this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n        }\n        // Since this event gets fired for every pixel while dragging, we only\n        // want to fire it if the consumer opted into it. Also we have to\n        // re-enter the zone because we run all of the events on the outside.\n        if (this._moveEvents.observers.length) {\n            this._ngZone.run(() => {\n                this._moveEvents.next({\n                    source: this,\n                    pointerPosition: constrainedPointerPosition,\n                    event,\n                    distance: this._getDragDistance(constrainedPointerPosition),\n                    delta: this._pointerDirectionDelta,\n                });\n            });\n        }\n    };\n    /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n    _pointerUp = (event) => {\n        this._endDragSequence(event);\n    };\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                this._cleanupShadowRootSelectStart = _bindEventWithOptions(this._renderer, shadowRoot, 'selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000, this._renderer);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = (event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        cleanupListener();\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                };\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                const cleanupListener = this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners() {\n        this._rootElementCleanups?.forEach(cleanup => cleanup());\n        this._rootElementCleanups = undefined;\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Handles a native `dragstart` event. */\n    _nativeDragStart = (event) => {\n        if (this._handles.length) {\n            const targetHandle = this._getTargetHandle(event);\n            if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                event.preventDefault();\n            }\n        }\n        else if (!this.disabled) {\n            // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n            // but some cases like dragging of links can slip through (see #24403).\n            event.preventDefault();\n        }\n    };\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Cache of the dimensions of all the items inside the container. */\n    _itemPositions = [];\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeDraggables;\n    /** Direction in which the list is oriented. */\n    orientation = 'vertical';\n    /** Layout direction of the drop list. */\n    direction;\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        delta: 0,\n        overlaps: false,\n    };\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    _document;\n    _dragDropRegistry;\n    /** Root element container of the drop list. */\n    _element;\n    /** Function used to determine if an item can be sorted into a specific index. */\n    _sortPredicate;\n    /** Lazily-resolved root node containing the list. Use `_getRootNode` to read this. */\n    _rootNode;\n    /**\n     * Draggable items that are currently active inside the container. Includes the items\n     * that were there at the start of the sequence, as well as any items that have been dragged\n     * in, but haven't been dropped yet.\n     */\n    _activeItems;\n    /**\n     * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n     * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n     * overlap with the swapped item after the swapping occurred.\n     */\n    _previousSwap = {\n        drag: null,\n        deltaX: 0,\n        deltaY: 0,\n        overlaps: false,\n    };\n    /**\n     * Keeps track of the relationship between a node and its next sibling. This information\n     * is used to restore the DOM to the order it was in before dragging started.\n     */\n    _relatedNodes = [];\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    _dragDropRegistry;\n    _ngZone;\n    _viewportRuler;\n    /** Element that the drop list is attached to. */\n    element;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    disabled = false;\n    /** Whether sorting items within the list is disabled. */\n    sortingDisabled = false;\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /**\n     * Whether auto-scrolling the view when the user\n     * moves their pointer close to the edges is disabled.\n     */\n    autoScrollDisabled = false;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep = 2;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Function that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Emits right before dragging has started. */\n    beforeStarted = new Subject();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new Subject();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new Subject();\n    /** Emits when the user drops an item inside the container. */\n    dropped = new Subject();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new Subject();\n    /** Emits when a dragging sequence is started in a list connected to the current one. */\n    receivingStarted = new Subject();\n    /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n    receivingStopped = new Subject();\n    /** Arbitrary data that can be attached to the drop list. */\n    data;\n    /** Element that is the direct parent of the drag items. */\n    _container;\n    /** Whether an item in the list is being dragged. */\n    _isDragging = false;\n    /** Keeps track of the positions of any parent scrollable elements. */\n    _parentPositions;\n    /** Strategy being used to sort items within the list. */\n    _sortStrategy;\n    /** Cached `DOMRect` of the drop list. */\n    _domRect;\n    /** Draggable items in the container. */\n    _draggables = [];\n    /** Drop lists that are connected to the current one. */\n    _siblings = [];\n    /** Connected siblings that currently have a dragged item. */\n    _activeSiblings = new Set();\n    /** Subscription to the window being scrolled. */\n    _viewportScrollSubscription = Subscription.EMPTY;\n    /** Vertical direction in which the list is currently scrolling. */\n    _verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    /** Horizontal direction in which the list is currently scrolling. */\n    _horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    /** Node that is being auto-scrolled. */\n    _scrollNode;\n    /** Used to signal to the current auto-scroll sequence when to stop. */\n    _stopScrollTimers = new Subject();\n    /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n    _cachedShadowRoot = null;\n    /** Reference to the document. */\n    _document;\n    /** Elements that can be scrolled while the user is dragging. */\n    _scrollableElements = [];\n    /** Initial value for the element's `scroll-snap-type` style. */\n    _initialScrollSnap;\n    /** Direction of the list's layout. */\n    _direction = 'ltr';\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /** Starts the interval that'll auto-scroll the element. */\n    _startScrollInterval = () => {\n        this._stopScrolling();\n        interval(0, animationFrameScheduler)\n            .pipe(takeUntil(this._stopScrollTimers))\n            .subscribe(() => {\n            const node = this._scrollNode;\n            const scrollStep = this.autoScrollStep;\n            if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                node.scrollBy(0, -scrollStep);\n            }\n            else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                node.scrollBy(0, scrollStep);\n            }\n            if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                node.scrollBy(-scrollStep, 0);\n            }\n            else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                node.scrollBy(scrollStep, 0);\n            }\n        });\n    };\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind a capturing event. */\nconst capturingEventOptions = {\n    capture: true,\n};\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n    passive: false,\n    capture: true,\n};\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit;inset:auto}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    _ngZone = inject(NgZone);\n    _document = inject(DOCUMENT);\n    _styleLoader = inject(_CdkPrivateStyleLoader);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    _cleanupDocumentTouchmove;\n    /** Registered drop container instances. */\n    _dropInstances = new Set();\n    /** Registered drag item instances. */\n    _dragInstances = new Set();\n    /** Drag item instances that are currently being dragged. */\n    _activeDragInstances = signal([]);\n    /** Keeps track of the event listeners that we've bound to the `document`. */\n    _globalListeners;\n    /**\n     * Predicate function to check if an item is being dragged.  Moved out into a property,\n     * because it'll be called a lot and we don't want to create a new function every time.\n     */\n    _draggingPredicate = (item) => item.isDragging();\n    /**\n     * Map tracking DOM nodes and their corresponding drag directives. Note that this is different\n     * from looking through the `_dragInstances` and getting their root node, because the root node\n     * isn't necessarily the node that the directive is set on.\n     */\n    _domNodesToDirectives = null;\n    /**\n     * Emits the `touchmove` or `mousemove` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerMove = new Subject();\n    /**\n     * Emits the `touchend` or `mouseup` events that are dispatched\n     * while the user is dragging a drag item instance.\n     */\n    pointerUp = new Subject();\n    /**\n     * Emits when the viewport has been scrolled while the user is dragging an item.\n     * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n     * @breaking-change 13.0.0\n     */\n    scroll = new Subject();\n    constructor() { }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._cleanupDocumentTouchmove?.();\n                this._cleanupDocumentTouchmove = _bindEventWithOptions(this._renderer, this._document, 'touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._cleanupDocumentTouchmove?.();\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._styleLoader.load(_ResetsLoader);\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            const isTouchEvent = event.type.startsWith('touch');\n            const endEventHandler = (e) => this.pointerUp.next(e);\n            const toBind = [\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                ['scroll', (e) => this.scroll.next(e), capturingEventOptions],\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                ['selectstart', this._preventDefaultWhileDragging, activeCapturingEventOptions],\n            ];\n            if (isTouchEvent) {\n                toBind.push(['touchend', endEventHandler, capturingEventOptions], ['touchcancel', endEventHandler, capturingEventOptions]);\n            }\n            else {\n                toBind.push(['mouseup', endEventHandler, capturingEventOptions]);\n            }\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                toBind.push([\n                    'mousemove',\n                    (e) => this.pointerMove.next(e),\n                    activeCapturingEventOptions,\n                ]);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners = toBind.map(([name, handler, options]) => _bindEventWithOptions(this._renderer, this._document, name, handler, options));\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const cleanup = _bindEventWithOptions(this._renderer, shadowRoot, 'scroll', (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    }, capturingEventOptions);\n                    return () => {\n                        cleanup();\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    /**\n     * Tracks the DOM node which has a draggable directive.\n     * @param node Node to track.\n     * @param dragRef Drag directive set on the node.\n     */\n    registerDirectiveNode(node, dragRef) {\n        this._domNodesToDirectives ??= new WeakMap();\n        this._domNodesToDirectives.set(node, dragRef);\n    }\n    /**\n     * Stops tracking a draggable directive node.\n     * @param node Node to stop tracking.\n     */\n    removeDirectiveNode(node) {\n        this._domNodesToDirectives?.delete(node);\n    }\n    /**\n     * Gets the drag directive corresponding to a specific DOM node, if any.\n     * @param node Node for which to do the lookup.\n     */\n    getDragDirectiveForNode(node) {\n        return this._domNodesToDirectives?.get(node) || null;\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._domNodesToDirectives = null;\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /**\n     * Event listener that will prevent the default browser action while the user is dragging.\n     * @param event Event whose default action should be prevented.\n     */\n    _preventDefaultWhileDragging = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            event.preventDefault();\n        }\n    };\n    /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n    _persistentTouchmoveListener = (event) => {\n        if (this._activeDragInstances().length > 0) {\n            // Note that we only want to prevent the default action after dragging has actually started.\n            // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n            // but it could be pushed back if the user has set up a drag delay or threshold.\n            if (this._activeDragInstances().some(this._draggingPredicate)) {\n                event.preventDefault();\n            }\n            this.pointerMove.next(event);\n        }\n    };\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners?.forEach(cleanup => cleanup());\n        this._globalListeners = undefined;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropRegistry, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    _document = inject(DOCUMENT);\n    _ngZone = inject(NgZone);\n    _viewportRuler = inject(ViewportRuler);\n    _dragDropRegistry = inject(DragDropRegistry);\n    _renderer = inject(RendererFactory2).createRenderer(null, null);\n    constructor() { }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry, this._renderer);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDrop, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\n    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDrop, providedIn: 'root' });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    element = inject(ElementRef);\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    /** Emits when the state of the handle has changed. */\n    _stateChanges = new Subject();\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    _disabled = false;\n    constructor() {\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag?._addHandle(this);\n    }\n    ngAfterViewInit() {\n        if (!this._parentDrag) {\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const ref = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (ref) {\n                    this._parentDrag = ref;\n                    ref._addHandle(this);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragHandle, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    element = inject(ElementRef);\n    dropContainer = inject(CDK_DROP_LIST, { optional: true, skipSelf: true });\n    _ngZone = inject(NgZone);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dir = inject(Directionality, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _selfHandle = inject(CDK_DRAG_HANDLE, { optional: true, self: true });\n    _parentDrag = inject(CDK_DRAG_PARENT, { optional: true, skipSelf: true });\n    _dragDropRegistry = inject(DragDropRegistry);\n    _destroyed = new Subject();\n    _handles = new BehaviorSubject([]);\n    _previewTemplate;\n    _placeholderTemplate;\n    /** Reference to the underlying drag instance. */\n    _dragRef;\n    /** Arbitrary data to attach to this drag instance. */\n    data;\n    /** Locks the position of the dragged element along the specified axis. */\n    lockAxis;\n    /**\n     * Selector that will be used to determine the root draggable element, starting from\n     * the `cdkDrag` element and going up the DOM. Passing an alternate root element is useful\n     * when trying to enable dragging on an element that you might not have access to.\n     */\n    rootElementSelector;\n    /**\n     * Node or selector that will be used to determine the element to which the draggable's\n     * position will be constrained. If a string is passed in, it'll be used as a selector that\n     * will be matched starting from the element's parent and going up the DOM until a match\n     * has been found.\n     */\n    boundaryElement;\n    /**\n     * Amount of milliseconds to wait after the user has put their\n     * pointer down before starting to drag the element.\n     */\n    dragStartDelay;\n    /**\n     * Sets the position of a `CdkDrag` that is outside of a drop container.\n     * Can be used to restore the element's position for a returning user.\n     */\n    freeDragPosition;\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    _disabled;\n    /**\n     * Function that can be used to customize the logic of how the position of the drag item\n     * is limited while it's being dragged. Gets called with a point containing the current position\n     * of the user's pointer on the page, a reference to the item being dragged and its dimensions.\n     * Should return a point describing where the item should be rendered.\n     */\n    constrainPosition;\n    /** Class to be added to the preview element. */\n    previewClass;\n    /**\n     * Configures the place into which the preview of the item will be inserted. Can be configured\n     * globally through `CDK_DROP_LIST`. Possible values:\n     * - `global` - Preview will be inserted at the bottom of the `<body>`. The advantage is that\n     * you don't have to worry about `overflow: hidden` or `z-index`, but the item won't retain\n     * its inherited styles.\n     * - `parent` - Preview will be inserted into the parent of the drag item. The advantage is that\n     * inherited styles will be preserved, but it may be clipped by `overflow: hidden` or not be\n     * visible due to `z-index`. Furthermore, the preview is going to have an effect over selectors\n     * like `:nth-child` and some flexbox configurations.\n     * - `ElementRef<HTMLElement> | HTMLElement` - Preview will be inserted into a specific element.\n     * Same advantages and disadvantages as `parent`.\n     */\n    previewContainer;\n    /**\n     * If the parent of the dragged element has a `scale` transform, it can throw off the\n     * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n     */\n    scale = 1;\n    /** Emits when the user starts dragging the item. */\n    started = new EventEmitter();\n    /** Emits when the user has released a drag item, before any animations have started. */\n    released = new EventEmitter();\n    /** Emits when the user stops dragging an item in the container. */\n    ended = new EventEmitter();\n    /** Emits when the user has moved the item into a new container. */\n    entered = new EventEmitter();\n    /** Emits when the user removes the item its container by dragging it into another container. */\n    exited = new EventEmitter();\n    /** Emits when the user drops the item inside a container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits as the user is dragging the item. Use with caution,\n     * because this event will fire for every pixel that the user has dragged.\n     */\n    moved = new Observable((observer) => {\n        const subscription = this._dragRef.moved\n            .pipe(map(movedEvent => ({\n            source: this,\n            pointerPosition: movedEvent.pointerPosition,\n            event: movedEvent.event,\n            delta: movedEvent.delta,\n            distance: movedEvent.distance,\n        })))\n            .subscribe(observer);\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n    _injector = inject(Injector);\n    constructor() {\n        const dropContainer = this.dropContainer;\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        const dragDrop = inject(DragDrop);\n        this._dragRef = dragDrop.createDrag(this.element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        this._dragDropRegistry.registerDirectiveNode(this.element.nativeElement, this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._dragDropRegistry.removeDirectiveNode(this.element.nativeElement);\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                const parentDrag = this._dragDropRegistry.getDragDirectiveForNode(parent);\n                if (parentDrag) {\n                    ref.withParent(parentDrag._dragRef);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDrag, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    host: {\n                        'class': 'cdk-drag',\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    /** Drop lists registered inside the group. */\n    _items = new Set();\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    disabled = false;\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    element = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _scrollDispatcher = inject(ScrollDispatcher);\n    _dir = inject(Directionality, { optional: true });\n    _group = inject(CDK_DROP_LIST_GROUP, {\n        optional: true,\n        skipSelf: true,\n    });\n    /** Emits when the list has been destroyed. */\n    _destroyed = new Subject();\n    /** Whether the element's scrollable parents have been resolved. */\n    _scrollableParentsResolved;\n    /** Keeps track of the drop lists that are currently on the page. */\n    static _dropLists = [];\n    /** Reference to the underlying drop list instance. */\n    _dropListRef;\n    /**\n     * Other draggable containers that this container is connected to and into which the\n     * container's items can be transferred. Can either be references to other drop containers,\n     * or their unique IDs.\n     */\n    connectedTo = [];\n    /** Arbitrary data to attach to this container. */\n    data;\n    /** Direction in which the list is oriented. */\n    orientation;\n    /**\n     * Unique ID for the drop zone. Can be used as a reference\n     * in the `connectedTo` of another `CdkDropList`.\n     */\n    id = inject(_IdGenerator).getId('cdk-drop-list-');\n    /** Locks the position of the draggable elements inside the container along the specified axis. */\n    lockAxis;\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    _disabled;\n    /** Whether sorting within this drop list is disabled. */\n    sortingDisabled;\n    /**\n     * Function that is used to determine whether an item\n     * is allowed to be moved into a drop container.\n     */\n    enterPredicate = () => true;\n    /** Functions that is used to determine whether an item can be sorted into a particular index. */\n    sortPredicate = () => true;\n    /** Whether to auto-scroll the view when the user moves their pointer close to the edges. */\n    autoScrollDisabled;\n    /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n    autoScrollStep;\n    /**\n     * Selector that will be used to resolve an alternate element container for the drop list.\n     * Passing an alternate container is useful for the cases where one might not have control\n     * over the parent node of the draggable items within the list (e.g. due to content projection).\n     * This allows for usages like:\n     *\n     * ```\n     * <div cdkDropList cdkDropListElementContainer=\".inner\">\n     *   <div class=\"inner\">\n     *     <div cdkDrag></div>\n     *   </div>\n     * </div>\n     * ```\n     */\n    elementContainerSelector;\n    /** Emits when the user drops an item inside the container. */\n    dropped = new EventEmitter();\n    /**\n     * Emits when the user has moved a new drag item into this container.\n     */\n    entered = new EventEmitter();\n    /**\n     * Emits when the user removes an item from the container\n     * by dragging it into another container.\n     */\n    exited = new EventEmitter();\n    /** Emits as the user is swapping items while actively dragging. */\n    sorted = new EventEmitter();\n    /**\n     * Keeps track of the items that are registered with this container. Historically we used to\n     * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n     * well which means that we can't handle cases like dragging the headers of a `mat-table`\n     * correctly. What we do instead is to have the items register themselves with the container\n     * and then we sort them based on their position in the DOM.\n     */\n    _unsortedItems = new Set();\n    constructor() {\n        const dragDrop = inject(DragDrop);\n        const config = inject(CDK_DRAG_CONFIG, { optional: true });\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(this.element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(this.element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (this._group) {\n            this._group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        // Only sync the items while dragging since this method is\n        // called when items are being initialized one-by-one.\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        // This method might be called on destroy so we always want to sync with the ref.\n        this._syncItemsWithRef();\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDropList, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the preview template instance. */\n    data;\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    matchSize = false;\n    constructor() {\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragPreview, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    templateRef = inject(TemplateRef);\n    _drag = inject(CDK_DRAG_PARENT, { optional: true });\n    /** Context data to be added to the placeholder template instance. */\n    data;\n    constructor() {\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragPlaceholder, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n"],"x_google_ignoreList":[2,3]}