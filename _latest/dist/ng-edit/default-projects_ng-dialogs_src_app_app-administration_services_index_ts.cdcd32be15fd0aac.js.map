{"version":3,"mappings":"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","names":["AppDialogConfigService","http","context","dnnContext","this","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","_","i0","factory","ExportAppPartsService","scope","webApiAppPartsRoot","appid","zoneId","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","webApiAppRoot","includeContentGroups","resetAppGuid","ImportAppPartsService","file","formData","FormData","append","post","n","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","webApiEntityList","from","toBase64","pipe","mergeMap","A","AppId","ContentBase64","fileBase64","id","Id","delete","O","ViewsService","webApiViewRoot","guid","h","WebApisService","webApiAppFilesAll","global","path","mask","withSubfolders","map","paths","splitIndex","lastIndexOf","fileExtIndex","folder","substring","name","templateKey","webApiAppFileCreate","purpose","apiPath","webApiExplorer","ImportAppService","changedName"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/app-administration/services/web-apis.service.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFileCreate, webApiAppFilesAll, webApiExplorer } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { WebApi, WebApiDetails } from '../models';\r\n\r\n@Injectable()\r\nexport class WebApisService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: '', mask: '*Controller.cs', withSubfolders: 'true' },\r\n    }).pipe(\r\n      map(paths => {\r\n        const webApis: WebApi[] = paths.map(path => {\r\n          const splitIndex = path.lastIndexOf('/');\r\n          const fileExtIndex = path.lastIndexOf('.');\r\n          const folder = path.substring(0, splitIndex);\r\n          const name = path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path, folder, name };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  create(path: string, templateKey: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        global: 'false',\r\n        purpose: 'auto',\r\n        path,\r\n        templateKey,\r\n      },\r\n    });\r\n  }\r\n\r\n  details(apiPath: string) {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(webApiExplorer), {\r\n      params: { path: apiPath },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_ng-dialogs_src_app_app-administration_services_index_ts.cdcd32be15fd0aac.js"}