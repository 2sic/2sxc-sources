{"version":3,"file":"default-projects_eav-ui_src_app_content-export_services_content-export_service_ts-projects_ea-b28668.f867c01d1c401877.js","mappings":"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","names":["BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","__ngFactoryType__","i0","type","selectors","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","this","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","constructor","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","mapUntilChanged","fn","pipe","distinctUntilChanged","map","mapUntilObjChanged","isEqual","guidRegex","ContentExportService","HttpServiceBaseSignal","exportContent","values","selectedIds","selectedIdsString","join","url","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","Éµfac","GridWithHelpComponent","gridWrapper","viewChild","read","agGrid","contentChild","AgGridAngular","dialogAction","MatDialogActions","helpText","input","required","refresh","rowLength","DEFAULT_ROW_HEIGHT","GRID_HEADER_HEIGHT","HELP_CARD_BUFFER","effect","gridWrapperEl","untracked","#updateLayout","agGridEl","dialogActionEl","helpCard","querySelector","toggle","style","flex","dimensions","#calculateDimensions","rowHeight","agGridHeight","sideNavEl","document","dialogEl","maxHeight","clientHeight","dialogHeaderHeight","dialogActionHeight","shouldHideHelp","helpCardHeight","wrapperHeight","offsetHeight","_angular_core__WEBPACK_IMPORTED_MODULE_1__","VBU","contentQueries","dirIndex","hint"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/constants/guid.constants.ts","./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.ts","./projects/eav-ui/src/app/shared/ag-grid/grid-with-help/grid-with-help.component.html"],"sourcesContent":["import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ÉµÉµFactoryTarget.Component });\n    static Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ÉµÉµFactoryTarget.Directive });\n    static Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule });\n    static Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\nconst webApiEntityRootDownload = 'admin/entity/Download';\r\nconst webApiEntityRootJson = 'admin/entity/Json';\r\nconst webApiTypeRootJson = 'admin/type/Json';\r\n\r\n\r\n@Injectable()\r\nexport class ContentExportService extends HttpServiceBaseSignal {\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.apiUrl(webApiEntityRootDownload)\r\n      + '?appId=' + this.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.apiUrl(webApiTypeRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.apiUrl(webApiEntityRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n}\r\n","import { AgGridAngular } from '@ag-grid-community/angular';\r\nimport { Component, contentChild, effect, ElementRef, input, untracked, viewChild } from '@angular/core';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\n\r\nexport interface HelpTextConst {\r\n  empty: GridWithHelpInput;\r\n  content: GridWithHelpInput;\r\n}\r\n\r\nexport interface GridWithHelpInput {\r\n  description: string;\r\n  hint: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-grid-with-help',\r\n  imports: [],\r\n  templateUrl: './grid-with-help.component.html',\r\n  styleUrl: './grid-with-help.component.scss'\r\n})\r\n\r\nexport class GridWithHelpComponent {\r\n  // ViewChild and ContentChild references - Access to DOM elements\r\n  gridWrapper = viewChild(\"gridWrapper\", { read: ElementRef });\r\n  agGrid = contentChild(AgGridAngular, { read: ElementRef });\r\n  dialogAction = contentChild(MatDialogActions, { read: ElementRef });\r\n\r\n  // Input properties - Required data from parent component\r\n  readonly helpText = input.required<GridWithHelpInput>({});\r\n  readonly refresh = input.required<number>();\r\n  readonly rowLength = input.required<number>();\r\n\r\n  // Constants - Fixed values for layout calculations\r\n  readonly DEFAULT_ROW_HEIGHT = 47; // Default height for AG Grid rows in pixels\r\n  readonly GRID_HEADER_HEIGHT = 64; // Height of AG Grid header in pixels\r\n  readonly HELP_CARD_BUFFER = 12;   // Additional buffer space for help card in pixels\r\n\r\n  constructor() {\r\n    // Effect that reacts to changes in refresh and rowLength signals\r\n    effect(() => {\r\n      const refresh = this.refresh();\r\n      const rowLength = this.rowLength();\r\n      const gridWrapperEl = this.gridWrapper()?.nativeElement;\r\n\r\n      // Early return if grid wrapper element is not available\r\n      if (!gridWrapperEl) return;\r\n\r\n      // Untracked execution to prevent unnecessary effect re-runs during layout updates\r\n      untracked(() => this.#updateLayout(gridWrapperEl, rowLength));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Main layout update method - Handles the dynamic sizing and positioning of grid and help card\r\n   * @param gridWrapperEl - The main container element\r\n   * @param rowLength - Number of rows in the grid\r\n   */\r\n  #updateLayout(gridWrapperEl: HTMLElement, rowLength: number): void {\r\n    // Get references to essential DOM elements\r\n    const agGridEl = this.agGrid()?.nativeElement;\r\n    const dialogActionEl = this.dialogAction()?.nativeElement;\r\n    const helpCard = gridWrapperEl.querySelector('.help-info-card') as HTMLElement;\r\n\r\n    helpCard.classList.toggle('center-center', rowLength === 0);\r\n\r\n    // Early return if critical elements are missing\r\n    if (!agGridEl || !dialogActionEl) return;\r\n\r\n    helpCard.style.flex = \"\";\r\n\r\n    // Calculate all necessary dimensions for layout\r\n    const dimensions = this.#calculateDimensions(gridWrapperEl, agGridEl, dialogActionEl, helpCard, rowLength);\r\n\r\n    // Set AG Grid height based on row count and maximum height to prevent overflow\r\n    agGridEl.style.flex = dimensions.rowHeight ? `0 0 ${dimensions.agGridHeight}px` : '0px';\r\n\r\n    // Outer Container for max Size\r\n    const sideNavEl = document.querySelector<HTMLElement>('.mat-sidenav-content'); // with SideNav (settings)\r\n    const dialogEl = document.querySelector<HTMLElement>('.mat-mdc-dialog-container'); // only Dialog (Content)\r\n\r\n    const outerContainer = sideNavEl ?? dialogEl;\r\n    const maxHeight = outerContainer.clientHeight - dimensions.dialogHeaderHeight - dimensions.dialogActionHeight;\r\n\r\n    agGridEl.style.maxHeight = `${maxHeight}px`;\r\n\r\n    // Determine if help card should be hidden when content exceeds available space\r\n    const shouldHideHelp = dimensions.helpCardHeight + dimensions.agGridHeight + dimensions.dialogActionHeight + dimensions.dialogHeaderHeight > dimensions.wrapperHeight;\r\n\r\n    helpCard.style.flex = \"1 1 auto\";\r\n    // Remove Help card from layout if it should be hidden\r\n    helpCard?.classList.toggle('hidden-help-info-card', shouldHideHelp);\r\n  }\r\n\r\n  // Calculate dimensions for AG Grid and help card based on current layout\r\n  #calculateDimensions(gridWrapperEl: HTMLElement, agGridEl: HTMLElement, dialogActionEl: HTMLElement, helpCard: HTMLElement, rowLength: number) {\r\n    const rowHeight = agGridEl.querySelector('.ag-row')?.clientHeight ?? this.DEFAULT_ROW_HEIGHT;\r\n    const agGridHeight = this.GRID_HEADER_HEIGHT + (rowLength * rowHeight);\r\n    const helpCardHeight = helpCard.clientHeight + this.HELP_CARD_BUFFER;\r\n    const dialogActionHeight = dialogActionEl.offsetHeight;\r\n    const dialogHeaderHeight = gridWrapperEl.querySelector('.eav-dialog-header')?.clientHeight ?? 0;\r\n    // Get total available wrapper height\r\n    const wrapperHeight = gridWrapperEl.offsetHeight;\r\n    return {\r\n      rowHeight,\r\n      agGridHeight,\r\n      helpCardHeight,\r\n      dialogActionHeight,\r\n      dialogHeaderHeight,\r\n      wrapperHeight\r\n    };\r\n  }\r\n\r\n\r\n}\r\n","<div class=\"grid-wrapper-dynamic\" #gridWrapper>\r\n  <ng-content select=\"[eav-dialog-header]\"></ng-content>\r\n  <ng-content select=\"[eav-dialog-content]\"> </ng-content>\r\n  <ng-content select=\"ag-grid-angular\"></ng-content>\r\n  <div class=\"help-info-card\">\r\n    <div class=\"help-info-card-text\">\r\n      <span [innerHTML]=\"helpText().description\"></span>\r\n      <span [innerHTML]=\"helpText().hint\"></span>\r\n    </div>\r\n  </div>\r\n  <ng-content select=\"mat-dialog-actions\"></ng-content>\r\n</div>\r\n"],"x_google_ignoreList":[0]}