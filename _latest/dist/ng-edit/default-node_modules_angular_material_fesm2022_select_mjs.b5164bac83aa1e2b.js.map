{"version":3,"file":"default-node_modules_angular_material_fesm2022_select_mjs.b5164bac83aa1e2b.js","mappings":"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","names":["_c0","_c1","_c2","_c3","MatSelect_Conditional_4_Template","rf","ctx","i0","ctx_r1","placeholder","MatSelect_Conditional_5_Conditional_1_Template","MatSelect_Conditional_5_Conditional_2_Template","triggerValue","MatSelect_Conditional_5_Template","customTrigger","MatSelect_ng_template_10_Template","_r3","$event","_panelDoneAnimatingStream","next","toState","_handleKeydown","_getPanelTheme","panelClass","id","multiple","ariaLabel","_getPanelAriaLabelledby","matSelectAnimations","transformPanelWrap","trigger","transition","query","animateChild","optional","transformPanel","state","style","opacity","transform","animate","MAT_SELECT_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","inject","Overlay","scrollStrategies","reposition","MAT_SELECT_CONFIG","MAT_SELECT_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_SELECT_TRIGGER","MatSelectChange","source","value","constructor","this","MatSelect","_viewportRuler","ViewportRuler","_changeDetectorRef","ChangeDetectorRef","_elementRef","ElementRef","_dir","Directionality","_idGenerator","_IdGenerator","_parentFormField","MAT_FORM_FIELD","ngControl","NgControl","self","_liveAnnouncer","LiveAnnouncer","_defaultOptions","options","optionGroups","_positions","originX","originY","overlayX","overlayY","_scrollOptionIntoView","index","option","toArray","panel","nativeElement","labelCount","_countGroupLabelsBeforeOption","element","_getHostElement","scrollTop","_getOptionScrollPosition","offsetTop","offsetHeight","_positioningSettled","_keyManager","activeItemIndex","_getChangeEvent","_scrollStrategyFactory","_panelOpen","_compareWith","o1","o2","_uid","getId","_triggerAriaLabelledBy","_previousControl","_destroy","Subject","_errorStateTracker","stateChanges","disableAutomaticLabeling","userAriaDescribedBy","_selectionModel","_preferredOverlayOrigin","_overlayWidth","_onChange","_onTouched","_valueId","_scrollStrategy","_overlayPanelClass","overlayPanelClass","focused","_focused","controlType","_overlayDir","disabled","disableRipple","tabIndex","hideSingleSelectionIndicator","_hideSingleSelectionIndicator","_syncParentProperties","_placeholder","required","_required","control","hasValidator","Validators","_multiple","disableOptionCentering","compareWith","fn","_initializeSelection","_value","newValue","_assignValue","ariaLabelledby","errorStateMatcher","matcher","typeaheadDebounceInterval","sortComparator","_id","errorState","panelWidth","_initialized","optionSelectionChanges","defer","changes","pipe","startWith","switchMap","merge","map","onSelectionChange","openedChange","EventEmitter","_openedStream","filter","o","_closedStream","selectionChange","valueChange","defaultErrorStateMatcher","ErrorStateMatcher","parentForm","NgForm","parentFormGroup","FormGroupDirective","HostAttributeToken","valueAccessor","_ErrorStateTracker","parseInt","ngOnInit","SelectionModel","distinctUntilChanged","takeUntil","subscribe","_panelDoneAnimating","panelOpen","change","_getOverlayWidth","detectChanges","ngAfterContentInit","complete","_initKeyManager","changed","event","added","forEach","select","removed","deselect","_resetOptions","ngDoCheck","newAriaLabelledby","_getTriggerAriaLabelledby","setAttribute","removeAttribute","undefined","updateErrorState","ngOnChanges","withTypeAhead","ngOnDestroy","destroy","_clearFromModal","toggle","close","open","_canOpen","getConnectedOverlayOrigin","_applyModalPanelOwnership","withHorizontalOrientation","_highlightCorrectOption","markForCheck","_trackedModal","modal","closest","panelId","removeAriaReferencedId","addAriaReferencedId","_isRtl","writeValue","registerOnChange","registerOnTouched","setDisabledState","isDisabled","selected","empty","selectedOptions","viewValue","reverse","join","_handleOpenKeydown","_handleClosedKeydown","keyCode","isArrowKey","DOWN_ARROW","UP_ARROW","LEFT_ARROW","RIGHT_ARROW","isOpenKey","ENTER","SPACE","manager","isTyping","hasModifierKey","altKey","preventDefault","previouslySelectedOption","onKeydown","selectedOption","announce","activeItem","A","ctrlKey","hasDeselectedOptions","some","opt","previouslyFocusedIndex","shiftKey","_selectViaInteraction","_onFocus","_onBlur","cancelTypeahead","_onAttached","positionChange","take","color","isEmpty","Promise","resolve","then","_setSelectionByValue","setInactiveStyles","clear","Array","isArray","currentValue","_selectOptionByValue","_sortValues","correspondingOption","updateActiveItem","find","isSelected","_skipPredicate","preferredOrigin","CdkOverlayOrigin","elementRef","getBoundingClientRect","width","ActiveDescendantKeyManager","withVerticalOrientation","withHomeAndEnd","withPageUpDown","withAllowedModifierKeys","skipPredicate","tabOut","focus","changedOrDestroyed","_onSelect","isUserInput","_stateChanges","wasSelected","setActiveItem","_propagateChanges","sort","a","b","indexOf","fallbackValue","valueToEmit","emit","firstEnabledOptionIndex","length","get","labelId","getLabelId","_getAriaActiveDescendant","isOpen","setDescribedByIds","ids","onContainerClick","shouldLabelFloat","static","__ngFactoryType__","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","first","viewQuery","CdkConnectedOverlay","hostAttrs","hostVars","hostBindings","toString","inputs","booleanAttribute","numberAttribute","outputs","exportAs","features","MatFormFieldControl","useExisting","MAT_OPTION_PARENT_COMPONENT","ngContentSelectors","decls","vars","consts","template","_r1","fallbackOverlayOrigin_r4","dependencies","NgClass","styles","encapsulation","data","animation","changeDetection","MatSelectTrigger","MatSelectModule","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","MatFormFieldModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/select.mjs"],"sourcesContent":["import { Overlay, CdkOverlayOrigin, CdkConnectedOverlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, EventEmitter, HostAttributeToken, booleanAttribute, numberAttribute, Component, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, ContentChild, Input, ViewChild, Output, Directive, NgModule } from '@angular/core';\nimport { _countGroupLabelsBeforeOption, _getOptionScrollPosition, ErrorStateMatcher, _ErrorStateTracker, MAT_OPTION_PARENT_COMPONENT, MatOption, MAT_OPTGROUP, MatOptionModule, MatCommonModule } from '@angular/material/core';\nexport { MatOptgroup, MatOption } from '@angular/material/core';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _IdGenerator, LiveAnnouncer, removeAriaReferencedId, addAriaReferencedId, ActiveDescendantKeyManager } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { DOWN_ARROW, UP_ARROW, LEFT_ARROW, RIGHT_ARROW, ENTER, SPACE, hasModifierKey, A } from '@angular/cdk/keycodes';\nimport { NgControl, Validators, NgForm, FormGroupDirective } from '@angular/forms';\nimport { Subject, defer, merge } from 'rxjs';\nimport { startWith, switchMap, filter, map, distinctUntilChanged, takeUntil, take } from 'rxjs/operators';\nimport { trigger, transition, query, animateChild, state, style, animate } from '@angular/animations';\nimport { NgClass } from '@angular/common';\n\n/**\n * The following are all the animations for the mat-select component, with each\n * const containing the metadata for one animation.\n *\n * The values below match the implementation of the AngularJS Material mat-select animation.\n * @docs-private\n */\nconst matSelectAnimations = {\n    /**\n     * This animation ensures the select's overlay panel animation (transformPanel) is called when\n     * closing the select.\n     * This is needed due to https://github.com/angular/angular/issues/23302\n     */\n    transformPanelWrap: trigger('transformPanelWrap', [\n        transition('* => void', query('@transformPanel', [animateChild()], { optional: true })),\n    ]),\n    /** This animation transforms the select's overlay panel on and off the page. */\n    transformPanel: trigger('transformPanel', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(1, 0.8)',\n        })),\n        transition('void => showing', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1, 1)',\n        }))),\n        transition('* => void', animate('100ms linear', style({ opacity: 0 }))),\n    ]),\n};\n\n// Note that these have been copied over verbatim from\n// `material/select` so that we don't have to expose them publicly.\n/**\n * Returns an exception to be thrown when attempting to change a select's `multiple` option\n * after initialization.\n * @docs-private\n */\nfunction getMatSelectDynamicMultipleError() {\n    return Error('Cannot change `multiple` mode of select after initialization.');\n}\n/**\n * Returns an exception to be thrown when attempting to assign a non-array value to a select\n * in `multiple` mode. Note that `undefined` and `null` are still valid values to allow for\n * resetting the value.\n * @docs-private\n */\nfunction getMatSelectNonArrayValueError() {\n    return Error('Value must be an array in multiple-selection mode.');\n}\n/**\n * Returns an exception to be thrown when assigning a non-function value to the comparator\n * used to determine if a value corresponds to an option. Note that whether the function\n * actually takes two values and returns a boolean is not checked.\n */\nfunction getMatSelectNonFunctionValueError() {\n    return Error('`compareWith` must be a function.');\n}\n\n/** Injection token that determines the scroll handling while a select is open. */\nconst MAT_SELECT_SCROLL_STRATEGY = new InjectionToken('mat-select-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/** @docs-private */\nfunction MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** Injection token that can be used to provide the default options the select module. */\nconst MAT_SELECT_CONFIG = new InjectionToken('MAT_SELECT_CONFIG');\n/** @docs-private */\nconst MAT_SELECT_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_SELECT_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n/**\n * Injection token that can be used to reference instances of `MatSelectTrigger`. It serves as\n * alternative token to the actual `MatSelectTrigger` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_SELECT_TRIGGER = new InjectionToken('MatSelectTrigger');\n/** Change event object that is emitted when the select value has changed. */\nclass MatSelectChange {\n    source;\n    value;\n    constructor(\n    /** Reference to the select that emitted the change event. */\n    source, \n    /** Current value of the select that emitted the event. */\n    value) {\n        this.source = source;\n        this.value = value;\n    }\n}\nclass MatSelect {\n    _viewportRuler = inject(ViewportRuler);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dir = inject(Directionality, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    _parentFormField = inject(MAT_FORM_FIELD, { optional: true });\n    ngControl = inject(NgControl, { self: true, optional: true });\n    _liveAnnouncer = inject(LiveAnnouncer);\n    _defaultOptions = inject(MAT_SELECT_CONFIG, { optional: true });\n    /** All of the defined select options. */\n    options;\n    // TODO(crisbeto): this is only necessary for the non-MDC select, but it's technically a\n    // public API so we have to keep it. It should be deprecated and removed eventually.\n    /** All of the defined groups of options. */\n    optionGroups;\n    /** User-supplied override of the trigger element. */\n    customTrigger;\n    /**\n     * This position config ensures that the top \"start\" corner of the overlay\n     * is aligned with with the top \"start\" of the origin by default (overlapping\n     * the trigger completely). If the panel cannot fit below the trigger, it\n     * will fall back to a position above the trigger.\n     */\n    _positions = [\n        {\n            originX: 'start',\n            originY: 'bottom',\n            overlayX: 'start',\n            overlayY: 'top',\n        },\n        {\n            originX: 'end',\n            originY: 'bottom',\n            overlayX: 'end',\n            overlayY: 'top',\n        },\n        {\n            originX: 'start',\n            originY: 'top',\n            overlayX: 'start',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n        {\n            originX: 'end',\n            originY: 'top',\n            overlayX: 'end',\n            overlayY: 'bottom',\n            panelClass: 'mat-mdc-select-panel-above',\n        },\n    ];\n    /** Scrolls a particular option into the view. */\n    _scrollOptionIntoView(index) {\n        const option = this.options.toArray()[index];\n        if (option) {\n            const panel = this.panel.nativeElement;\n            const labelCount = _countGroupLabelsBeforeOption(index, this.options, this.optionGroups);\n            const element = option._getHostElement();\n            if (index === 0 && labelCount === 1) {\n                // If we've got one group label before the option and we're at the top option,\n                // scroll the list to the top. This is better UX than scrolling the list to the\n                // top of the option, because it allows the user to read the top group's label.\n                panel.scrollTop = 0;\n            }\n            else {\n                panel.scrollTop = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, panel.scrollTop, panel.offsetHeight);\n            }\n        }\n    }\n    /** Called when the panel has been opened and the overlay has settled on its final position. */\n    _positioningSettled() {\n        this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n    }\n    /** Creates a change event object that should be emitted by the select. */\n    _getChangeEvent(value) {\n        return new MatSelectChange(this, value);\n    }\n    /** Factory function used to create a scroll strategy for this select. */\n    _scrollStrategyFactory = inject(MAT_SELECT_SCROLL_STRATEGY);\n    /** Whether or not the overlay panel is open. */\n    _panelOpen = false;\n    /** Comparison function to specify which option is displayed. Defaults to object equality. */\n    _compareWith = (o1, o2) => o1 === o2;\n    /** Unique id for this input. */\n    _uid = this._idGenerator.getId('mat-select-');\n    /** Current `aria-labelledby` value for the select trigger. */\n    _triggerAriaLabelledBy = null;\n    /**\n     * Keeps track of the previous form control assigned to the select.\n     * Used to detect if it has changed.\n     */\n    _previousControl;\n    /** Emits whenever the component is destroyed. */\n    _destroy = new Subject();\n    /** Tracks the error state of the select. */\n    _errorStateTracker;\n    /**\n     * Emits whenever the component state changes and should cause the parent\n     * form-field to update. Implemented as part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    userAriaDescribedBy;\n    /** Deals with the selection logic. */\n    _selectionModel;\n    /** Manages keyboard events for options in the panel. */\n    _keyManager;\n    /** Ideal origin for the overlay panel. */\n    _preferredOverlayOrigin;\n    /** Width of the overlay panel. */\n    _overlayWidth;\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when select has been touched` */\n    _onTouched = () => { };\n    /** ID for the DOM node containing the select's value. */\n    _valueId = this._idGenerator.getId('mat-select-value-');\n    /** Emits when the panel element is finished transforming in. */\n    _panelDoneAnimatingStream = new Subject();\n    /** Strategy that will be used to handle scrolling while the select panel is open. */\n    _scrollStrategy;\n    _overlayPanelClass = this._defaultOptions?.overlayPanelClass || '';\n    /** Whether the select is focused. */\n    get focused() {\n        return this._focused || this._panelOpen;\n    }\n    _focused = false;\n    /** A name for this control that can be used by `mat-form-field`. */\n    controlType = 'mat-select';\n    /** Trigger that opens the select. */\n    trigger;\n    /** Panel containing the select options. */\n    panel;\n    /** Overlay pane containing the options. */\n    _overlayDir;\n    /** Classes to be passed to the select panel. Supports the same syntax as `ngClass`. */\n    panelClass;\n    /** Whether the select is disabled. */\n    disabled = false;\n    /** Whether ripples in the select are disabled. */\n    disableRipple = false;\n    /** Tab index of the select. */\n    tabIndex = 0;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator = this._defaultOptions?.hideSingleSelectionIndicator ?? false;\n    /** Placeholder to be shown if no value has been selected. */\n    get placeholder() {\n        return this._placeholder;\n    }\n    set placeholder(value) {\n        this._placeholder = value;\n        this.stateChanges.next();\n    }\n    _placeholder;\n    /** Whether the component is required. */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = value;\n        this.stateChanges.next();\n    }\n    _required;\n    /** Whether the user should be allowed to select multiple options. */\n    get multiple() {\n        return this._multiple;\n    }\n    set multiple(value) {\n        if (this._selectionModel && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectDynamicMultipleError();\n        }\n        this._multiple = value;\n    }\n    _multiple = false;\n    /** Whether to center the active option over the trigger. */\n    disableOptionCentering = this._defaultOptions?.disableOptionCentering ?? false;\n    /**\n     * Function to compare the option values with the selected values. The first argument\n     * is a value from an option. The second is a value from the selection. A boolean\n     * should be returned.\n     */\n    get compareWith() {\n        return this._compareWith;\n    }\n    set compareWith(fn) {\n        if (typeof fn !== 'function' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatSelectNonFunctionValueError();\n        }\n        this._compareWith = fn;\n        if (this._selectionModel) {\n            // A different comparator means the selection could change.\n            this._initializeSelection();\n        }\n    }\n    /** Value of the select control. */\n    get value() {\n        return this._value;\n    }\n    set value(newValue) {\n        const hasAssigned = this._assignValue(newValue);\n        if (hasAssigned) {\n            this._onChange(newValue);\n        }\n    }\n    _value;\n    /** Aria label of the select. */\n    ariaLabel = '';\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /** Time to wait in milliseconds after the last keystroke before moving focus to an item. */\n    typeaheadDebounceInterval;\n    /**\n     * Function used to sort the values in a select in multiple mode.\n     * Follows the same logic as `Array.prototype.sort`.\n     */\n    sortComparator;\n    /** Unique id of the element. */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n        this.stateChanges.next();\n    }\n    _id;\n    /** Whether the select is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    /**\n     * Width of the panel. If set to `auto`, the panel will match the trigger width.\n     * If set to null or an empty string, the panel will grow to match the longest option's text.\n     */\n    panelWidth = this._defaultOptions && typeof this._defaultOptions.panelWidth !== 'undefined'\n        ? this._defaultOptions.panelWidth\n        : 'auto';\n    _initialized = new Subject();\n    /** Combined stream of all of the child options' change events. */\n    optionSelectionChanges = defer(() => {\n        const options = this.options;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        return this._initialized.pipe(switchMap(() => this.optionSelectionChanges));\n    });\n    /** Event emitted when the select panel has been toggled. */\n    openedChange = new EventEmitter();\n    /** Event emitted when the select has been opened. */\n    _openedStream = this.openedChange.pipe(filter(o => o), map(() => { }));\n    /** Event emitted when the select has been closed. */\n    _closedStream = this.openedChange.pipe(filter(o => !o), map(() => { }));\n    /** Event emitted when the selected value has been changed by the user. */\n    selectionChange = new EventEmitter();\n    /**\n     * Event that emits whenever the raw value of the select changes. This is here primarily\n     * to facilitate the two-way binding for the `value` input.\n     * @docs-private\n     */\n    valueChange = new EventEmitter();\n    constructor() {\n        const defaultErrorStateMatcher = inject(ErrorStateMatcher);\n        const parentForm = inject(NgForm, { optional: true });\n        const parentFormGroup = inject(FormGroupDirective, { optional: true });\n        const tabIndex = inject(new HostAttributeToken('tabindex'), { optional: true });\n        if (this.ngControl) {\n            // Note: we provide the value accessor through here, instead of\n            // the `providers` to avoid running into a circular import.\n            this.ngControl.valueAccessor = this;\n        }\n        // Note that we only want to set this when the defaults pass it in, otherwise it should\n        // stay as `undefined` so that it falls back to the default in the key manager.\n        if (this._defaultOptions?.typeaheadDebounceInterval != null) {\n            this.typeaheadDebounceInterval = this._defaultOptions.typeaheadDebounceInterval;\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, this.ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._scrollStrategy = this._scrollStrategyFactory();\n        this.tabIndex = tabIndex == null ? 0 : parseInt(tabIndex) || 0;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n    }\n    ngOnInit() {\n        this._selectionModel = new SelectionModel(this.multiple);\n        this.stateChanges.next();\n        // We need `distinctUntilChanged` here, because some browsers will\n        // fire the animation end event twice for the same animation. See:\n        // https://github.com/angular/angular/issues/24084\n        this._panelDoneAnimatingStream\n            .pipe(distinctUntilChanged(), takeUntil(this._destroy))\n            .subscribe(() => this._panelDoneAnimating(this.panelOpen));\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._destroy))\n            .subscribe(() => {\n            if (this.panelOpen) {\n                this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n                this._changeDetectorRef.detectChanges();\n            }\n        });\n    }\n    ngAfterContentInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._initKeyManager();\n        this._selectionModel.changed.pipe(takeUntil(this._destroy)).subscribe(event => {\n            event.added.forEach(option => option.select());\n            event.removed.forEach(option => option.deselect());\n        });\n        this.options.changes.pipe(startWith(null), takeUntil(this._destroy)).subscribe(() => {\n            this._resetOptions();\n            this._initializeSelection();\n        });\n    }\n    ngDoCheck() {\n        const newAriaLabelledby = this._getTriggerAriaLabelledby();\n        const ngControl = this.ngControl;\n        // We have to manage setting the `aria-labelledby` ourselves, because part of its value\n        // is computed as a result of a content query which can cause this binding to trigger a\n        // \"changed after checked\" error.\n        if (newAriaLabelledby !== this._triggerAriaLabelledBy) {\n            const element = this._elementRef.nativeElement;\n            this._triggerAriaLabelledBy = newAriaLabelledby;\n            if (newAriaLabelledby) {\n                element.setAttribute('aria-labelledby', newAriaLabelledby);\n            }\n            else {\n                element.removeAttribute('aria-labelledby');\n            }\n        }\n        if (ngControl) {\n            // The disabled state might go out of sync if the form group is swapped out. See #17860.\n            if (this._previousControl !== ngControl.control) {\n                if (this._previousControl !== undefined &&\n                    ngControl.disabled !== null &&\n                    ngControl.disabled !== this.disabled) {\n                    this.disabled = ngControl.disabled;\n                }\n                this._previousControl = ngControl.control;\n            }\n            this.updateErrorState();\n        }\n    }\n    ngOnChanges(changes) {\n        // Updating the disabled state is handled by the input, but we need to additionally let\n        // the parent form field know to run change detection when the disabled state changes.\n        if (changes['disabled'] || changes['userAriaDescribedBy']) {\n            this.stateChanges.next();\n        }\n        if (changes['typeaheadDebounceInterval'] && this._keyManager) {\n            this._keyManager.withTypeAhead(this.typeaheadDebounceInterval);\n        }\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._destroy.next();\n        this._destroy.complete();\n        this.stateChanges.complete();\n        this._clearFromModal();\n    }\n    /** Toggles the overlay panel open or closed. */\n    toggle() {\n        this.panelOpen ? this.close() : this.open();\n    }\n    /** Opens the overlay panel. */\n    open() {\n        if (!this._canOpen()) {\n            return;\n        }\n        // It's important that we read this as late as possible, because doing so earlier will\n        // return a different element since it's based on queries in the form field which may\n        // not have run yet. Also this needs to be assigned before we measure the overlay width.\n        if (this._parentFormField) {\n            this._preferredOverlayOrigin = this._parentFormField.getConnectedOverlayOrigin();\n        }\n        this._overlayWidth = this._getOverlayWidth(this._preferredOverlayOrigin);\n        this._applyModalPanelOwnership();\n        this._panelOpen = true;\n        this._keyManager.withHorizontalOrientation(null);\n        this._highlightCorrectOption();\n        this._changeDetectorRef.markForCheck();\n        // Required for the MDC form field to pick up when the overlay has been opened.\n        this.stateChanges.next();\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._elementRef.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the reference to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (!this._trackedModal) {\n            // Most commonly, the autocomplete trigger is not used inside a modal.\n            return;\n        }\n        const panelId = `${this.id}-panel`;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n    }\n    /** Closes the overlay panel and focuses the host element. */\n    close() {\n        if (this._panelOpen) {\n            this._panelOpen = false;\n            this._keyManager.withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr');\n            this._changeDetectorRef.markForCheck();\n            this._onTouched();\n            // Required for the MDC form field to pick up when the overlay has been closed.\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Sets the select's value. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param value New value to be written to the model.\n     */\n    writeValue(value) {\n        this._assignValue(value);\n    }\n    /**\n     * Saves a callback function to be invoked when the select's value\n     * changes from user input. Part of the ControlValueAccessor interface\n     * required to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the value changes.\n     */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /**\n     * Saves a callback function to be invoked when the select is blurred\n     * by the user. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param fn Callback to be triggered when the component has been touched.\n     */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /**\n     * Disables the select. Part of the ControlValueAccessor interface required\n     * to integrate with Angular's core forms API.\n     *\n     * @param isDisabled Sets whether the component is disabled.\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n    }\n    /** Whether or not the overlay panel is open. */\n    get panelOpen() {\n        return this._panelOpen;\n    }\n    /** The currently selected option. */\n    get selected() {\n        return this.multiple ? this._selectionModel?.selected || [] : this._selectionModel?.selected[0];\n    }\n    /** The value displayed in the trigger. */\n    get triggerValue() {\n        if (this.empty) {\n            return '';\n        }\n        if (this._multiple) {\n            const selectedOptions = this._selectionModel.selected.map(option => option.viewValue);\n            if (this._isRtl()) {\n                selectedOptions.reverse();\n            }\n            // TODO(crisbeto): delimiter should be configurable for proper localization.\n            return selectedOptions.join(', ');\n        }\n        return this._selectionModel.selected[0].viewValue;\n    }\n    /** Refreshes the error state of the select. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Whether the element is in RTL mode. */\n    _isRtl() {\n        return this._dir ? this._dir.value === 'rtl' : false;\n    }\n    /** Handles all keydown events on the select. */\n    _handleKeydown(event) {\n        if (!this.disabled) {\n            this.panelOpen ? this._handleOpenKeydown(event) : this._handleClosedKeydown(event);\n        }\n    }\n    /** Handles keyboard events while the select is closed. */\n    _handleClosedKeydown(event) {\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW ||\n            keyCode === UP_ARROW ||\n            keyCode === LEFT_ARROW ||\n            keyCode === RIGHT_ARROW;\n        const isOpenKey = keyCode === ENTER || keyCode === SPACE;\n        const manager = this._keyManager;\n        // Open the select on ALT + arrow key to match the native <select>\n        if ((!manager.isTyping() && isOpenKey && !hasModifierKey(event)) ||\n            ((this.multiple || event.altKey) && isArrowKey)) {\n            event.preventDefault(); // prevents the page from scrolling down when pressing space\n            this.open();\n        }\n        else if (!this.multiple) {\n            const previouslySelectedOption = this.selected;\n            manager.onKeydown(event);\n            const selectedOption = this.selected;\n            // Since the value has changed, we need to announce it ourselves.\n            if (selectedOption && previouslySelectedOption !== selectedOption) {\n                // We set a duration on the live announcement, because we want the live element to be\n                // cleared after a while so that users can't navigate to it using the arrow keys.\n                this._liveAnnouncer.announce(selectedOption.viewValue, 10000);\n            }\n        }\n    }\n    /** Handles keyboard events when the selected is open. */\n    _handleOpenKeydown(event) {\n        const manager = this._keyManager;\n        const keyCode = event.keyCode;\n        const isArrowKey = keyCode === DOWN_ARROW || keyCode === UP_ARROW;\n        const isTyping = manager.isTyping();\n        if (isArrowKey && event.altKey) {\n            // Close the select on ALT + arrow key to match the native <select>\n            event.preventDefault();\n            this.close();\n            // Don't do anything in this case if the user is typing,\n            // because the typing sequence can include the space key.\n        }\n        else if (!isTyping &&\n            (keyCode === ENTER || keyCode === SPACE) &&\n            manager.activeItem &&\n            !hasModifierKey(event)) {\n            event.preventDefault();\n            manager.activeItem._selectViaInteraction();\n        }\n        else if (!isTyping && this._multiple && keyCode === A && event.ctrlKey) {\n            event.preventDefault();\n            const hasDeselectedOptions = this.options.some(opt => !opt.disabled && !opt.selected);\n            this.options.forEach(option => {\n                if (!option.disabled) {\n                    hasDeselectedOptions ? option.select() : option.deselect();\n                }\n            });\n        }\n        else {\n            const previouslyFocusedIndex = manager.activeItemIndex;\n            manager.onKeydown(event);\n            if (this._multiple &&\n                isArrowKey &&\n                event.shiftKey &&\n                manager.activeItem &&\n                manager.activeItemIndex !== previouslyFocusedIndex) {\n                manager.activeItem._selectViaInteraction();\n            }\n        }\n    }\n    _onFocus() {\n        if (!this.disabled) {\n            this._focused = true;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Calls the touched callback only if the panel is closed. Otherwise, the trigger will\n     * \"blur\" to the panel when it opens, causing a false positive.\n     */\n    _onBlur() {\n        this._focused = false;\n        this._keyManager?.cancelTypeahead();\n        if (!this.disabled && !this.panelOpen) {\n            this._onTouched();\n            this._changeDetectorRef.markForCheck();\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Callback that is invoked when the overlay panel has been attached.\n     */\n    _onAttached() {\n        this._overlayDir.positionChange.pipe(take(1)).subscribe(() => {\n            this._changeDetectorRef.detectChanges();\n            this._positioningSettled();\n        });\n    }\n    /** Returns the theme to be used on the panel. */\n    _getPanelTheme() {\n        return this._parentFormField ? `mat-${this._parentFormField.color}` : '';\n    }\n    /** Whether the select has a value. */\n    get empty() {\n        return !this._selectionModel || this._selectionModel.isEmpty();\n    }\n    _initializeSelection() {\n        // Defer setting the value in order to avoid the \"Expression\n        // has changed after it was checked\" errors from Angular.\n        Promise.resolve().then(() => {\n            if (this.ngControl) {\n                this._value = this.ngControl.value;\n            }\n            this._setSelectionByValue(this._value);\n            this.stateChanges.next();\n        });\n    }\n    /**\n     * Sets the selected option based on a value. If no option can be\n     * found with the designated value, the select trigger is cleared.\n     */\n    _setSelectionByValue(value) {\n        this.options.forEach(option => option.setInactiveStyles());\n        this._selectionModel.clear();\n        if (this.multiple && value) {\n            if (!Array.isArray(value) && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getMatSelectNonArrayValueError();\n            }\n            value.forEach((currentValue) => this._selectOptionByValue(currentValue));\n            this._sortValues();\n        }\n        else {\n            const correspondingOption = this._selectOptionByValue(value);\n            // Shift focus to the active item. Note that we shouldn't do this in multiple\n            // mode, because we don't know what option the user interacted with last.\n            if (correspondingOption) {\n                this._keyManager.updateActiveItem(correspondingOption);\n            }\n            else if (!this.panelOpen) {\n                // Otherwise reset the highlighted option. Note that we only want to do this while\n                // closed, because doing it while open can shift the user's focus unnecessarily.\n                this._keyManager.updateActiveItem(-1);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Finds and selects and option based on its value.\n     * @returns Option that has the corresponding value.\n     */\n    _selectOptionByValue(value) {\n        const correspondingOption = this.options.find((option) => {\n            // Skip options that are already in the model. This allows us to handle cases\n            // where the same primitive value is selected multiple times.\n            if (this._selectionModel.isSelected(option)) {\n                return false;\n            }\n            try {\n                // Treat null as a special reset value.\n                return option.value != null && this._compareWith(option.value, value);\n            }\n            catch (error) {\n                if (typeof ngDevMode === 'undefined' || ngDevMode) {\n                    // Notify developers of errors in their comparator.\n                    console.warn(error);\n                }\n                return false;\n            }\n        });\n        if (correspondingOption) {\n            this._selectionModel.select(correspondingOption);\n        }\n        return correspondingOption;\n    }\n    /** Assigns a specific value to the select. Returns whether the value has changed. */\n    _assignValue(newValue) {\n        // Always re-assign an array, because it might have been mutated.\n        if (newValue !== this._value || (this._multiple && Array.isArray(newValue))) {\n            if (this.options) {\n                this._setSelectionByValue(newValue);\n            }\n            this._value = newValue;\n            return true;\n        }\n        return false;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate = (option) => {\n        if (this.panelOpen) {\n            // Support keyboard focusing disabled options in an ARIA listbox.\n            return false;\n        }\n        // When the panel is closed, skip over disabled options. Support options via the UP/DOWN arrow\n        // keys on a closed select. ARIA listbox interaction pattern is less relevant when the panel is\n        // closed.\n        return option.disabled;\n    };\n    /** Gets how wide the overlay panel should be. */\n    _getOverlayWidth(preferredOrigin) {\n        if (this.panelWidth === 'auto') {\n            const refToMeasure = preferredOrigin instanceof CdkOverlayOrigin\n                ? preferredOrigin.elementRef\n                : preferredOrigin || this._elementRef;\n            return refToMeasure.nativeElement.getBoundingClientRect().width;\n        }\n        return this.panelWidth === null ? '' : this.panelWidth;\n    }\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Sets up a key manager to listen to keyboard events on the overlay panel. */\n    _initKeyManager() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withTypeAhead(this.typeaheadDebounceInterval)\n            .withVerticalOrientation()\n            .withHorizontalOrientation(this._isRtl() ? 'rtl' : 'ltr')\n            .withHomeAndEnd()\n            .withPageUpDown()\n            .withAllowedModifierKeys(['shiftKey'])\n            .skipPredicate(this._skipPredicate);\n        this._keyManager.tabOut.subscribe(() => {\n            if (this.panelOpen) {\n                // Select the active item when tabbing away. This is consistent with how the native\n                // select behaves. Note that we only want to do this in single selection mode.\n                if (!this.multiple && this._keyManager.activeItem) {\n                    this._keyManager.activeItem._selectViaInteraction();\n                }\n                // Restore focus to the trigger before closing. Ensures that the focus\n                // position won't be lost if the user got focus into the overlay.\n                this.focus();\n                this.close();\n            }\n        });\n        this._keyManager.change.subscribe(() => {\n            if (this._panelOpen && this.panel) {\n                this._scrollOptionIntoView(this._keyManager.activeItemIndex || 0);\n            }\n            else if (!this._panelOpen && !this.multiple && this._keyManager.activeItem) {\n                this._keyManager.activeItem._selectViaInteraction();\n            }\n        });\n    }\n    /** Drops current option subscriptions and IDs and resets from scratch. */\n    _resetOptions() {\n        const changedOrDestroyed = merge(this.options.changes, this._destroy);\n        this.optionSelectionChanges.pipe(takeUntil(changedOrDestroyed)).subscribe(event => {\n            this._onSelect(event.source, event.isUserInput);\n            if (event.isUserInput && !this.multiple && this._panelOpen) {\n                this.close();\n                this.focus();\n            }\n        });\n        // Listen to changes in the internal state of the options and react accordingly.\n        // Handles cases like the labels of the selected options changing.\n        merge(...this.options.map(option => option._stateChanges))\n            .pipe(takeUntil(changedOrDestroyed))\n            .subscribe(() => {\n            // `_stateChanges` can fire as a result of a change in the label's DOM value which may\n            // be the result of an expression changing. We have to use `detectChanges` in order\n            // to avoid \"changed after checked\" errors (see #14793).\n            this._changeDetectorRef.detectChanges();\n            this.stateChanges.next();\n        });\n    }\n    /** Invoked when an option is clicked. */\n    _onSelect(option, isUserInput) {\n        const wasSelected = this._selectionModel.isSelected(option);\n        if (option.value == null && !this._multiple) {\n            option.deselect();\n            this._selectionModel.clear();\n            if (this.value != null) {\n                this._propagateChanges(option.value);\n            }\n        }\n        else {\n            if (wasSelected !== option.selected) {\n                option.selected\n                    ? this._selectionModel.select(option)\n                    : this._selectionModel.deselect(option);\n            }\n            if (isUserInput) {\n                this._keyManager.setActiveItem(option);\n            }\n            if (this.multiple) {\n                this._sortValues();\n                if (isUserInput) {\n                    // In case the user selected the option with their mouse, we\n                    // want to restore focus back to the trigger, in order to\n                    // prevent the select keyboard controls from clashing with\n                    // the ones from `mat-option`.\n                    this.focus();\n                }\n            }\n        }\n        if (wasSelected !== this._selectionModel.isSelected(option)) {\n            this._propagateChanges();\n        }\n        this.stateChanges.next();\n    }\n    /** Sorts the selected values in the selected based on their order in the panel. */\n    _sortValues() {\n        if (this.multiple) {\n            const options = this.options.toArray();\n            this._selectionModel.sort((a, b) => {\n                return this.sortComparator\n                    ? this.sortComparator(a, b, options)\n                    : options.indexOf(a) - options.indexOf(b);\n            });\n            this.stateChanges.next();\n        }\n    }\n    /** Emits change event to set the model value. */\n    _propagateChanges(fallbackValue) {\n        let valueToEmit;\n        if (this.multiple) {\n            valueToEmit = this.selected.map(option => option.value);\n        }\n        else {\n            valueToEmit = this.selected ? this.selected.value : fallbackValue;\n        }\n        this._value = valueToEmit;\n        this.valueChange.emit(valueToEmit);\n        this._onChange(valueToEmit);\n        this.selectionChange.emit(this._getChangeEvent(valueToEmit));\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Highlights the selected item. If no option is selected, it will highlight\n     * the first *enabled* option.\n     */\n    _highlightCorrectOption() {\n        if (this._keyManager) {\n            if (this.empty) {\n                // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n                // because it activates the first option that passes the skip predicate, rather than the\n                // first *enabled* option.\n                let firstEnabledOptionIndex = -1;\n                for (let index = 0; index < this.options.length; index++) {\n                    const option = this.options.get(index);\n                    if (!option.disabled) {\n                        firstEnabledOptionIndex = index;\n                        break;\n                    }\n                }\n                this._keyManager.setActiveItem(firstEnabledOptionIndex);\n            }\n            else {\n                this._keyManager.setActiveItem(this._selectionModel.selected[0]);\n            }\n        }\n    }\n    /** Whether the panel is allowed to open. */\n    _canOpen() {\n        return !this._panelOpen && !this.disabled && this.options?.length > 0;\n    }\n    /** Focuses the select element. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Gets the aria-labelledby for the select panel. */\n    _getPanelAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId() || null;\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    /** Determines the `aria-activedescendant` to be set on the host. */\n    _getAriaActiveDescendant() {\n        if (this.panelOpen && this._keyManager && this._keyManager.activeItem) {\n            return this._keyManager.activeItem.id;\n        }\n        return null;\n    }\n    /** Gets the aria-labelledby of the select component trigger. */\n    _getTriggerAriaLabelledby() {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelId = this._parentFormField?.getLabelId();\n        let value = (labelId ? labelId + ' ' : '') + this._valueId;\n        if (this.ariaLabelledby) {\n            value += ' ' + this.ariaLabelledby;\n        }\n        return value;\n    }\n    /** Called when the overlay panel is done animating. */\n    _panelDoneAnimating(isOpen) {\n        this.openedChange.emit(isOpen);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        this.focus();\n        this.open();\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        // Since the panel doesn't overlap the trigger, we\n        // want the label to only float when there's a value.\n        return this.panelOpen || !this.empty || (this.focused && !!this.placeholder);\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelect, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.0.0\", type: MatSelect, isStandalone: true, selector: \"mat-select\", inputs: { userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], panelClass: \"panelClass\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute], placeholder: \"placeholder\", required: [\"required\", \"required\", booleanAttribute], multiple: [\"multiple\", \"multiple\", booleanAttribute], disableOptionCentering: [\"disableOptionCentering\", \"disableOptionCentering\", booleanAttribute], compareWith: \"compareWith\", value: \"value\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], errorStateMatcher: \"errorStateMatcher\", typeaheadDebounceInterval: [\"typeaheadDebounceInterval\", \"typeaheadDebounceInterval\", numberAttribute], sortComparator: \"sortComparator\", id: \"id\", panelWidth: \"panelWidth\" }, outputs: { openedChange: \"openedChange\", _openedStream: \"opened\", _closedStream: \"closed\", selectionChange: \"selectionChange\", valueChange: \"valueChange\" }, host: { attributes: { \"role\": \"combobox\", \"aria-haspopup\": \"listbox\" }, listeners: { \"keydown\": \"_handleKeydown($event)\", \"focus\": \"_onFocus()\", \"blur\": \"_onBlur()\" }, properties: { \"attr.id\": \"id\", \"attr.tabindex\": \"disabled ? -1 : tabIndex\", \"attr.aria-controls\": \"panelOpen ? id + \\\"-panel\\\" : null\", \"attr.aria-expanded\": \"panelOpen\", \"attr.aria-label\": \"ariaLabel || null\", \"attr.aria-required\": \"required.toString()\", \"attr.aria-disabled\": \"disabled.toString()\", \"attr.aria-invalid\": \"errorState\", \"attr.aria-activedescendant\": \"_getAriaActiveDescendant()\", \"class.mat-mdc-select-disabled\": \"disabled\", \"class.mat-mdc-select-invalid\": \"errorState\", \"class.mat-mdc-select-required\": \"required\", \"class.mat-mdc-select-empty\": \"empty\", \"class.mat-mdc-select-multiple\": \"multiple\" }, classAttribute: \"mat-mdc-select\" }, providers: [\n            { provide: MatFormFieldControl, useExisting: MatSelect },\n            { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n        ], queries: [{ propertyName: \"customTrigger\", first: true, predicate: MAT_SELECT_TRIGGER, descendants: true }, { propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"trigger\", first: true, predicate: [\"trigger\"], descendants: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }, { propertyName: \"_overlayDir\", first: true, predicate: CdkConnectedOverlay, descendants: true }], exportAs: [\"matSelect\"], usesOnChanges: true, ngImport: i0, template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"], dependencies: [{ kind: \"directive\", type: CdkOverlayOrigin, selector: \"[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]\", exportAs: [\"cdkOverlayOrigin\"] }, { kind: \"directive\", type: CdkConnectedOverlay, selector: \"[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]\", inputs: [\"cdkConnectedOverlayOrigin\", \"cdkConnectedOverlayPositions\", \"cdkConnectedOverlayPositionStrategy\", \"cdkConnectedOverlayOffsetX\", \"cdkConnectedOverlayOffsetY\", \"cdkConnectedOverlayWidth\", \"cdkConnectedOverlayHeight\", \"cdkConnectedOverlayMinWidth\", \"cdkConnectedOverlayMinHeight\", \"cdkConnectedOverlayBackdropClass\", \"cdkConnectedOverlayPanelClass\", \"cdkConnectedOverlayViewportMargin\", \"cdkConnectedOverlayScrollStrategy\", \"cdkConnectedOverlayOpen\", \"cdkConnectedOverlayDisableClose\", \"cdkConnectedOverlayTransformOriginOn\", \"cdkConnectedOverlayHasBackdrop\", \"cdkConnectedOverlayLockPosition\", \"cdkConnectedOverlayFlexibleDimensions\", \"cdkConnectedOverlayGrowAfterOpen\", \"cdkConnectedOverlayPush\", \"cdkConnectedOverlayDisposeOnNavigation\"], outputs: [\"backdropClick\", \"positionChange\", \"attach\", \"detach\", \"overlayKeydown\", \"overlayOutsideClick\"], exportAs: [\"cdkConnectedOverlay\"] }, { kind: \"directive\", type: NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matSelectAnimations.transformPanel], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelect, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-select', exportAs: 'matSelect', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, host: {\n                        'role': 'combobox',\n                        'aria-haspopup': 'listbox',\n                        'class': 'mat-mdc-select',\n                        '[attr.id]': 'id',\n                        '[attr.tabindex]': 'disabled ? -1 : tabIndex',\n                        '[attr.aria-controls]': 'panelOpen ? id + \"-panel\" : null',\n                        '[attr.aria-expanded]': 'panelOpen',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.aria-required]': 'required.toString()',\n                        '[attr.aria-disabled]': 'disabled.toString()',\n                        '[attr.aria-invalid]': 'errorState',\n                        '[attr.aria-activedescendant]': '_getAriaActiveDescendant()',\n                        '[class.mat-mdc-select-disabled]': 'disabled',\n                        '[class.mat-mdc-select-invalid]': 'errorState',\n                        '[class.mat-mdc-select-required]': 'required',\n                        '[class.mat-mdc-select-empty]': 'empty',\n                        '[class.mat-mdc-select-multiple]': 'multiple',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(focus)': '_onFocus()',\n                        '(blur)': '_onBlur()',\n                    }, animations: [matSelectAnimations.transformPanel], providers: [\n                        { provide: MatFormFieldControl, useExisting: MatSelect },\n                        { provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatSelect },\n                    ], imports: [CdkOverlayOrigin, CdkConnectedOverlay, NgClass], template: \"<div cdk-overlay-origin\\n     class=\\\"mat-mdc-select-trigger\\\"\\n     (click)=\\\"open()\\\"\\n     #fallbackOverlayOrigin=\\\"cdkOverlayOrigin\\\"\\n     #trigger>\\n\\n  <div class=\\\"mat-mdc-select-value\\\" [attr.id]=\\\"_valueId\\\">\\n    @if (empty) {\\n      <span class=\\\"mat-mdc-select-placeholder mat-mdc-select-min-line\\\">{{placeholder}}</span>\\n    } @else {\\n      <span class=\\\"mat-mdc-select-value-text\\\">\\n        @if (customTrigger) {\\n          <ng-content select=\\\"mat-select-trigger\\\"></ng-content>\\n        } @else {\\n          <span class=\\\"mat-mdc-select-min-line\\\">{{triggerValue}}</span>\\n        }\\n      </span>\\n    }\\n  </div>\\n\\n  <div class=\\\"mat-mdc-select-arrow-wrapper\\\">\\n    <div class=\\\"mat-mdc-select-arrow\\\">\\n      <!-- Use an inline SVG, because it works better than a CSS triangle in high contrast mode. -->\\n      <svg viewBox=\\\"0 0 24 24\\\" width=\\\"24px\\\" height=\\\"24px\\\" focusable=\\\"false\\\" aria-hidden=\\\"true\\\">\\n        <path d=\\\"M7 10l5 5 5-5z\\\"/>\\n      </svg>\\n    </div>\\n  </div>\\n</div>\\n\\n<ng-template\\n  cdk-connected-overlay\\n  cdkConnectedOverlayLockPosition\\n  cdkConnectedOverlayHasBackdrop\\n  cdkConnectedOverlayBackdropClass=\\\"cdk-overlay-transparent-backdrop\\\"\\n  [cdkConnectedOverlayPanelClass]=\\\"_overlayPanelClass\\\"\\n  [cdkConnectedOverlayScrollStrategy]=\\\"_scrollStrategy\\\"\\n  [cdkConnectedOverlayOrigin]=\\\"_preferredOverlayOrigin || fallbackOverlayOrigin\\\"\\n  [cdkConnectedOverlayOpen]=\\\"panelOpen\\\"\\n  [cdkConnectedOverlayPositions]=\\\"_positions\\\"\\n  [cdkConnectedOverlayWidth]=\\\"_overlayWidth\\\"\\n  (backdropClick)=\\\"close()\\\"\\n  (attach)=\\\"_onAttached()\\\"\\n  (detach)=\\\"close()\\\">\\n  <div\\n    #panel\\n    role=\\\"listbox\\\"\\n    tabindex=\\\"-1\\\"\\n    class=\\\"mat-mdc-select-panel mdc-menu-surface mdc-menu-surface--open {{ _getPanelTheme() }}\\\"\\n    [attr.id]=\\\"id + '-panel'\\\"\\n    [attr.aria-multiselectable]=\\\"multiple\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby()\\\"\\n    [ngClass]=\\\"panelClass\\\"\\n    [@transformPanel]=\\\"'showing'\\\"\\n    (@transformPanel.done)=\\\"_panelDoneAnimatingStream.next($event.toState)\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\">\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\".mat-mdc-select{display:inline-block;width:100%;outline:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;color:var(--mat-select-enabled-trigger-text-color, var(--mat-sys-on-surface));font-family:var(--mat-select-trigger-text-font, var(--mat-sys-body-large-font));line-height:var(--mat-select-trigger-text-line-height, var(--mat-sys-body-large-line-height));font-size:var(--mat-select-trigger-text-size, var(--mat-sys-body-large-size));font-weight:var(--mat-select-trigger-text-weight, var(--mat-sys-body-large-weight));letter-spacing:var(--mat-select-trigger-text-tracking, var(--mat-sys-body-large-tracking))}div.mat-mdc-select-panel{box-shadow:var(--mat-select-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12))}.mat-mdc-select-disabled{color:var(--mat-select-disabled-trigger-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-trigger{display:inline-flex;align-items:center;cursor:pointer;position:relative;box-sizing:border-box;width:100%}.mat-mdc-select-disabled .mat-mdc-select-trigger{-webkit-user-select:none;user-select:none;cursor:default}.mat-mdc-select-value{width:100%;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.mat-mdc-select-value-text{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-mdc-select-arrow-wrapper{height:24px;flex-shrink:0;display:inline-flex;align-items:center}.mat-form-field-appearance-fill .mdc-text-field--no-label .mat-mdc-select-arrow-wrapper{transform:none}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-invalid .mat-mdc-select-arrow,.mat-form-field-invalid:not(.mat-form-field-disabled) .mat-mdc-form-field-infix::after{color:var(--mat-select-invalid-arrow-color, var(--mat-sys-error))}.mat-mdc-select-arrow{width:10px;height:5px;position:relative;color:var(--mat-select-enabled-arrow-color, var(--mat-sys-on-surface-variant))}.mat-mdc-form-field.mat-focused .mat-mdc-select-arrow{color:var(--mat-select-focused-arrow-color, var(--mat-sys-primary))}.mat-mdc-form-field .mat-mdc-select.mat-mdc-select-disabled .mat-mdc-select-arrow{color:var(--mat-select-disabled-arrow-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-mdc-select-arrow svg{fill:currentColor;position:absolute;top:50%;left:50%;transform:translate(-50%, -50%)}@media(forced-colors: active){.mat-mdc-select-arrow svg{fill:CanvasText}.mat-mdc-select-disabled .mat-mdc-select-arrow svg{fill:GrayText}}div.mat-mdc-select-panel{width:100%;max-height:275px;outline:0;overflow:auto;padding:8px 0;border-radius:4px;box-sizing:border-box;position:static;background-color:var(--mat-select-panel-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-select-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-select-panel-above) div.mat-mdc-select-panel{border-top-left-radius:0;border-top-right-radius:0;transform-origin:top center}.mat-mdc-select-panel-above div.mat-mdc-select-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:bottom center}div.mat-mdc-select-panel .mat-mdc-option{--mdc-list-list-item-container-color: var(--mat-select-panel-background-color)}.mat-mdc-select-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);color:var(--mat-select-placeholder-text-color, var(--mat-sys-on-surface-variant))}._mat-animation-noopable .mat-mdc-select-placeholder{transition:none}.mat-form-field-hide-placeholder .mat-mdc-select-placeholder{color:rgba(0,0,0,0);-webkit-text-fill-color:rgba(0,0,0,0);transition:none;display:block}.mat-mdc-form-field-type-mat-select:not(.mat-form-field-disabled) .mat-mdc-text-field-wrapper{cursor:pointer}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mat-mdc-floating-label{max-width:calc(100% - 18px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-fill .mdc-floating-label--float-above{max-width:calc(100%/0.75 - 24px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mat-mdc-form-field-type-mat-select.mat-form-field-appearance-outline .mdc-text-field--label-floating .mdc-notched-outline__notch{max-width:calc(100% - 24px)}.mat-mdc-select-min-line:empty::before{content:\\\" \\\";white-space:pre;width:1px;display:inline-block;visibility:hidden}.mat-form-field-appearance-fill .mat-mdc-select-arrow-wrapper{transform:var(--mat-select-arrow-transform, translateY(-8px))}\"] }]\n        }], ctorParameters: () => [], propDecorators: { options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], customTrigger: [{\n                type: ContentChild,\n                args: [MAT_SELECT_TRIGGER]\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], trigger: [{\n                type: ViewChild,\n                args: ['trigger']\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], _overlayDir: [{\n                type: ViewChild,\n                args: [CdkConnectedOverlay]\n            }], panelClass: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }], required: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], multiple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableOptionCentering: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], compareWith: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], errorStateMatcher: [{\n                type: Input\n            }], typeaheadDebounceInterval: [{\n                type: Input,\n                args: [{ transform: numberAttribute }]\n            }], sortComparator: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], panelWidth: [{\n                type: Input\n            }], openedChange: [{\n                type: Output\n            }], _openedStream: [{\n                type: Output,\n                args: ['opened']\n            }], _closedStream: [{\n                type: Output,\n                args: ['closed']\n            }], selectionChange: [{\n                type: Output\n            }], valueChange: [{\n                type: Output\n            }] } });\n/**\n * Allows the user to customize the trigger that is displayed when the select has a value.\n */\nclass MatSelectTrigger {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.0.0\", type: MatSelectTrigger, isStandalone: true, selector: \"mat-select-trigger\", providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-select-trigger',\n                    providers: [{ provide: MAT_SELECT_TRIGGER, useExisting: MatSelectTrigger }],\n                }]\n        }] });\n\nclass MatSelectModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectModule, imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger], exports: [CdkScrollableModule,\n            MatFormFieldModule,\n            MatSelect,\n            MatSelectTrigger,\n            MatOptionModule,\n            MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectModule, providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER], imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule,\n            MatFormFieldModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.0.0\", ngImport: i0, type: MatSelectModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, MatOptionModule, MatCommonModule, MatSelect, MatSelectTrigger],\n                    exports: [\n                        CdkScrollableModule,\n                        MatFormFieldModule,\n                        MatSelect,\n                        MatSelectTrigger,\n                        MatOptionModule,\n                        MatCommonModule,\n                    ],\n                    providers: [MAT_SELECT_SCROLL_STRATEGY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SELECT_CONFIG, MAT_SELECT_SCROLL_STRATEGY, MAT_SELECT_SCROLL_STRATEGY_PROVIDER, MAT_SELECT_SCROLL_STRATEGY_PROVIDER_FACTORY, MAT_SELECT_TRIGGER, MatSelect, MatSelectChange, MatSelectModule, MatSelectTrigger, matSelectAnimations };\n"],"x_google_ignoreList":[0]}