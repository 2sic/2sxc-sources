{"version":3,"sources":["./projects/ng-dialogs/src/app/monaco-editor/monaco-instance.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.html","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts"],"names":["monaco","filename","value","container","options","snippets","this","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","forEach","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","insertSnippet","snippet","getContribution","insert","setSnippets","setJsonSchema","jsonSchema","uri","toString","jsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","enableSchemaRequest","exists","schemas","some","schema","fileMatch","type","JSON","parse","map","filter","setDiagnosticsOptions","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","create","editorModelUri","Uri","file","editorModel","createModel","undefined","setModel","viewState","stringify","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getModeId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","length","tagStartIndex","lastIndexOf","codeInTag","substring","quotes","Array","from","c","startsWith","indexOf","tagEndIndex","tag","test","label","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","content","name","documentation","title","help","links","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","autoFocus","valueChanged","focused","blurred","ngAfterViewInit","window","require","config","paths","vs","createEditor","ngOnChanges","changes","monacoInstance","ngOnDestroy","MonacoInstance","editorRef","nativeElement","emit","MonacoEditorComponent","MonacoEditorModule","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","ToggleDebugDirective","sanitizer","transform","html","bypassSecurityTrustHtml","SafeHtmlPipe","buildTranslateConfiguration","factory","loader","provide","useFactory","deps","defaultLanguage","isolate","http","prefix","suffix","getTranslation","lang","get","pipe","error","console","warn","of"],"mappings":"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","file":"default-projects_ng-dialogs_src_app_monaco-editor_monaco-editor_component_ts-projects_ng-dial-aa5eee.81b0f1753f1a718ee71c.js","sourcesContent":["import { JsonSchema, Monaco2sxc, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: MonacoType;\r\n  private completionItemProviders: MonacoType[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: MonacoType,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: MonacoType,\r\n    private snippets: Snippet[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => {\r\n      completionItemProvider.dispose();\r\n    });\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance.getContribution('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      enableSchemaRequest: true,\r\n    };\r\n    const exists = jsonDiagnostics.schemas.some((schema: MonacoType) => schema.fileMatch[0] === uri);\r\n\r\n    if (jsonSchema?.value) {\r\n      const newSchema = jsonSchema.type === 'link'\r\n        ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n        : { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) };\r\n\r\n      jsonDiagnostics.schemas = exists\r\n        ? jsonDiagnostics.schemas.map((schema: MonacoType) => schema.fileMatch[0] === uri ? newSchema : schema)\r\n        : [...jsonDiagnostics.schemas, newSchema];\r\n    } else {\r\n      if (!exists) { return; }\r\n      jsonDiagnostics.schemas = jsonDiagnostics.schemas.filter((schema: MonacoType) => schema.fileMatch[0] !== uri);\r\n    }\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: MonacoType): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: MonacoType): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n    });\r\n  }\r\n\r\n  private createInstance(monaco: MonacoType, filename: string, value: string, container: HTMLElement, options: MonacoType): MonacoType {\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    // editorInstance.updateOptions({ readOnly: true })\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.itextmodelupdateoptions.html\r\n    // editorInstance.getModel().updateOptions({ tabSize: 2 });\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: MonacoType, editorInstance: MonacoType): MonacoType[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const range = {\r\n            startLineNumber: position.lineNumber,\r\n            endLineNumber: position.lineNumber,\r\n            startColumn: word.startColumn,\r\n            endColumn: word.endColumn\r\n          };\r\n          // kind and rule copied from:\r\n          // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            return {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range,\r\n            };\r\n          }).filter(snippet => !!snippet);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: MonacoType): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: MonacoType): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations((e: any) => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     (marker: any) => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { JsonSchema, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() options?: Record<string, any>;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: MonacoType;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n    );\r\n\r\n    if (this.jsonSchema) {\r\n      this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    }\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}