{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/code-editor/ace-editor/ace-options.ts","./projects/ng-dialogs/src/app/code-editor/ace-editor/ace-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.models.ts","./projects/ng-dialogs/src/app/shared/services/snack-bar-stack.service.ts","./projects/ng-dialogs/src/app/code-editor/services/source.service.ts","./projects/ng-dialogs/src/app/code-editor/services/snippets.service.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/order-items.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/depth-padding.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.html","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.helpers.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/object-to-array.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.html","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.component.html","./projects/ng-dialogs/src/app/code-editor/code-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor-routing.module.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.module.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts"],"names":["webApiTypeRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","scopes","Object","keys","map","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","propagateChange","propagateTouched","ngAfterViewInit","window","require","config","paths","ace","aceLoaded","ngOnChanges","changes","filename","currentValue","undefined","snippets","updateValues","insertSnippet","snippet","runOutsideAngular","snippetManager","editor","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","ngOnDestroy","destroy","container","remove","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","bind","onEditorBlurred","setTimeout","resize","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","Explorers","Templates","Snippets","Editors","Ace","Monaco","snackBar","defaultDuration","processingMessage","messageQueue","add","message","action","duration","triggered$","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","subscribe","complete","onAction","next","SnackBarStackService","isShared","sessionStorage","getItem","viewKey","global","templateIdOrPath","view","Type","toLocaleLowerCase","Extension","getTemplates","withSubfolders","createTemplate","purpose","path","parseInt","templateId","SourceService","translate","getSnippets","res","relevant","filterAwayNotNeededSnippetsList","standardAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","keyPrefixes","keyPrefixIndex","v","indexOf","newList","itm","setHasPrefix","set","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","subset","templateConfiguration","makeTree","Content","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","pair","length","link","trim","url","target","type","prefix","getFields","AppId","fields","field","fieldname","valuePlaceholder","Metadata","merged","Notes","toLowerCase","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","replace","filter","fld","md","typeMd","inputMd","All","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","openView","toggledItems","templates","last","pathFromRoot","existing","find","item","children","calculateTree","previousFilename","previousValue","toggleItem","showFileInTree","openTemplate","emit","addFile","folder","file","includes","CodeTemplatesComponent","Array","isArray","values","ObjectToArrayPipe","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","toggleSection","toggleFolder","toggleInfo","toggleMore","CodeSnippetsComponent","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","activeExplorer","activeEditor","monacoOptions","tabSize","init","ngOnInit","subscription","Subscription","templates$","BehaviorSubject","initialViewKey","snapshot","paramMap","activeView$","openViews$","viewInfos$","attachListeners","combineLatest","viewInfos","notLoaded","some","forkJoin","newViewInfo","view$","share","snippets$","mergeMap","of","results","viewInfos1","forEach","selectedIndex","findIndex","explorerSnipps","editorSnipps","savedCode","Code","slice","showCodeAndEditionWarnings","activeView","active","defaultTitle","newTitle","FileName","getTitle","setTitle","templateVars$","tabs","viewInfo","isActive","isModified","isLoading","activeViewInfo","unsubscribe","toggleExplorer","explorer","toggleEditor","question","suggestion","startsWith","prompt","aceEditorRef","monacoEditorRef","codeChanged","code","selectedViewInfo","oldOpenViews","newOpenViews","closeEditor","oldActiveView","newActiveView","codeToSave","newViewInfos","error","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","substring","fullName","nameCode","codeFile","otherEditions","endsWith","fromEvent","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","translateLoaderFactoryCode","sxcVersion","CodeEditorModule","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","getInputTypesList","inputConfigs","dataType","Label","description","Description","getReservedNames","reOrder","idArray","Id","order","JSON","stringify","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","id","ContentTypesFieldsService"],"mappings":"wRASaA,EAAiB,cAE9B,aAEE,WAAoBC,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAEhE,YAAAC,OAAR,SAAeC,GACb,OAAOC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOC,IAG3C,YAAAG,oBAAA,SAAoBC,GAClB,OAAOH,KAAKL,KAAKS,IAAiBJ,KAAKF,OAAOJ,EAAiB,OAAQ,CACrEW,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAYC,cAAeL,MAInE,YAAAM,qBAAA,SAAqBC,GACnB,OAAOV,KAAKL,KAAKS,IAAmBJ,KAAKF,OAAOJ,EAAiB,QAAS,CACxEW,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAYG,MAAK,MAIzD,YAAAC,UAAA,WACE,OAAOX,KAAKL,KAAKS,IAA4BJ,KAAKF,OAAOJ,EAAiB,UAAW,CACnFW,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,cACnCK,MACD,OAAI,SAAAC,GAEF,OADuCC,OAAOC,KAAKF,GAAQG,IAAI,SAAAC,GAAO,OAAGlB,KAAMc,EAAOI,GAAMC,MAAOD,SAMzG,YAAAE,KAAA,SAAKC,GACH,OAAOpB,KAAKL,KAAK0B,KAAcrB,KAAKF,OAAOJ,EAAiB,QAAS0B,EAAa,CAChFf,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,eAIxC,YAAAgB,OAAA,SAAOH,GACL,OAAOpB,KAAKL,KAAK4B,OAAgBvB,KAAKF,OAAOJ,EAAiB,UAAW,CACvEW,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAAYJ,WAAYiB,EAAYI,eAI5E,YAAAC,OAAA,SAAOC,G,QACCC,EAAW,IAAIC,S,IACrB,IAAmB,eAAAF,GAAK,8BACtBC,EAASE,OAAO,OADH,S,iGAGf,OAAO7B,KAAKL,KAAK0B,KAAsBrB,KAAKF,OAAOJ,EAAiB,UAAWiC,EAAU,CACvFtB,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAYuB,OAAQ9B,KAAKJ,QAAQkC,OAAOvB,eAIhF,YAAAwB,YAAA,SAAYC,GACV,OAAOhC,KAAKL,KAAK0B,KAAcrB,KAAKF,OAAOJ,EAAiB,YAAa,KAAM,CAC7EW,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAAYyB,iBAAgB,M,sCAtDzDC,GAAmB,qC,0BAAnBA,EAAmB,QAAnBA,EAAmB,Y,EADhC,I,ubCTaC,EAA4D,CACvEC,KAAM,iBACNC,MAAM,EACNC,aAAa,EACbC,MAAO,sBACPC,SAAU,GACVC,WAAY,mCACZC,YAAY,EACZC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,G,aCHlB,aAsBE,WAAoBC,GAAA,KAAAA,OAPZ,KAAA3B,MAAQ,GAIhB,KAAA4B,gBAAoC,aACpC,KAAAC,iBAAqC,a,OAIrC,YAAAC,gBAAA,sBACEC,OAAOC,QAAQC,OAAO,CACpBC,MAAO,CACLC,IAAK,CAAC,wDAIVJ,OAAOC,QAAQ,CAAC,WAAY,SAACG,GAC3B,EAAKA,IAAMA,EAEXJ,OAAOC,QAAQ,CAAC,oBAAqB,WACnCD,OAAOC,QAAQ,CAAC,0BAA2B,WACzCD,OAAOC,QAAQ,CAAC,gBAAiB,WAC/B,EAAKI,qBAOf,YAAAC,YAAA,SAAYC,G,QACJC,EAA6C,OAAlB,QAAhB,EAAAD,EAAQC,gBAAQ,eAAEC,cAAuB1D,KAAKyD,cAAWE,EACpEC,EAA6C,OAAlB,QAAhB,EAAAJ,EAAQI,gBAAQ,eAAEF,cAAuB1D,KAAK4D,cAAWD,EAC1E3D,KAAK6D,aAAaJ,EAAUG,IAG9B,YAAAE,cAAA,SAAcC,GAAd,WACE/D,KAAK6C,KAAKmB,kBAAkB,WACH,EAAKX,IAAIH,QAAQ,gBAAgBe,eACzCH,cAAc,EAAKI,OAAQH,GAC1C,EAAKG,OAAOC,WAIhB,YAAAC,WAAA,SAAWlD,GAAX,WACElB,KAAKkB,MAAQA,GAAS,GACjBlB,KAAKkE,QACVlE,KAAK6C,KAAKmB,kBAAkB,WAC1B,IAAMK,EAAI,EAAKH,OAAOI,oBACtB,EAAKJ,OAAOK,SAAS,EAAKrD,OAAQ,GAClC,EAAKgD,OAAOM,qBAAqBH,MAIrC,YAAAI,iBAAA,SAAiBC,GACf1E,KAAK8C,gBAAkB4B,GAGzB,YAAAC,kBAAA,SAAkBD,GAChB1E,KAAK+C,iBAAmB2B,GAG1B,YAAAE,YAAA,sBACE5E,KAAK6C,KAAKmB,kBAAkB,WAC1B,EAAKE,OAAOW,UACZ,EAAKX,OAAOY,UAAUC,SACtB,EAAKb,OAAS,QAIV,YAAAZ,UAAR,sBACEtD,KAAK6C,KAAKmB,kBAAkB,WAC1B,EAAKE,OAAS,EAAKb,IAAI2B,KAAK,EAAKC,UAAUC,cAAehD,GAC1D,EAAKgC,OAAOiB,gBAAkBC,IAC9B,EAAKlB,OAAOmB,QAAQd,SAAS,EAAKrD,OAClC,EAAK2C,aAAa,EAAKJ,SAAU,EAAKG,UACtC,EAAKM,OAAOoB,GAAG,SAAU,EAAKC,oBAAoBC,KAAK,IACvD,EAAKtB,OAAOoB,GAAG,OAAQ,EAAKG,gBAAgBD,KAAK,IACjD,EAAKtB,OAAOC,QAEZuB,WAAW,WAAQ,EAAKxB,OAAOyB,UAAa,OAIxC,YAAAJ,oBAAR,sBACEvF,KAAK6C,KAAK+C,IAAI,WACZ,EAAK9C,gBAAgB,EAAKoB,OAAO2B,eAI7B,YAAAJ,gBAAR,sBACEzF,KAAK6C,KAAK+C,IAAI,WACZ,EAAK7C,iBAAiB,EAAKmB,OAAO2B,eAI9B,YAAAhC,aAAR,SAAqBJ,EAAkBG,GAAvC,WACO5D,KAAKkE,QACVlE,KAAK6C,KAAKmB,kBAAkB,WAC1B,GAAIP,EAAU,CACZ,IACMtB,EADW,EAAKkB,IAAIH,QAAQ,oBACZ4C,eAAerC,GAAUtB,KAC/C,EAAK+B,OAAOmB,QAAQU,QAAQ5D,GAE1ByB,GACqB,EAAKP,IAAIH,QAAQ,gBAAgBe,eACzC+B,SAAS,EAAKpC,a,sCA9GxBqC,GAAkB,e,wBAAlBA,EAAkB,uD,MAAA,K,yHANlB,CAAC,CACVC,QAAS,KACTC,aAAa,SAAW,WAAM,OAAAF,IAC9BG,OAAO,KACP,4GANS,oB,sEAFb,GCYaC,EAAY,CACvBC,UAAW,YACXC,SAAU,YAKCC,EAAU,CACrBC,IAAK,MACLC,OAAQ,U,UCzBV,aAME,WAAoBC,GAAA,KAAAA,WAJZ,KAAAC,gBAAkB,IAClB,KAAAC,mBAAoB,EACpB,KAAAC,aAA+B,G,OASvC,YAAAC,IAAA,SAAIC,EAAiBC,EAAiB9D,QAAA,IAAAA,MAAA,CAA8B+D,SAAUlH,KAAK4G,kBACjF,IAAMO,EAAa,IAAIC,EAAA,GAKvB,OAJApH,KAAK8G,aAAaO,KAAK,CAAEL,QAAO,EAAEC,OAAM,EAAE9D,OAAM,EAAEgE,WAAU,IACvDnH,KAAK6G,mBACR7G,KAAKsH,eAEAH,EAAWI,gBAGZ,YAAAD,aAAR,sBACQE,EAAUxH,KAAK8G,aAAaW,QAElC,GAAe,MAAXD,EAAJ,CAKAxH,KAAK6G,mBAAoB,EAEzB,IAAMa,EAAc1H,KAAK2G,SAASgB,KAAKH,EAAQR,QAASQ,EAAQP,OAAQO,EAAQrE,QAChFuE,EAAYE,iBAAiBC,UAAU,WACrCL,EAAQL,WAAWW,WACnB,EAAKR,iBAEPI,EAAYK,WAAWF,UAAU,WAC/BL,EAAQL,WAAWa,cAZnBhI,KAAK6G,mBAAoB,GAiB7B,YAAAjC,YAAA,W,YACE,IAAsB,eAAA5E,KAAK8G,cAAY,8BAArB,QACRK,WAAWW,W,iGAErB9H,KAAK8G,aAAe,M,sCA9CXmB,GAAoB,c,0BAApBA,EAAoB,QAApBA,EAAoB,qBADP,S,EAA1B,G,wCCKA,aAIE,WAAoBtI,EAA0BC,EAA0BC,G,MAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,aAFhE,KAAAqI,SAA8C,QAAnC,EAAAC,eAAeC,QAAQ,aAAY,UAAI,GAAM7H,W,OAKhE,YAAAH,IAAA,SAAIiI,GACF,OAAOrI,KAAKL,KAAKS,IAAgBJ,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,MAAgB,CACjFO,QAAQ,QAAF,CAAIC,MAAON,KAAKJ,QAAQU,MAAMC,WAAY+H,OAAQtI,KAAKkI,UAAalI,KAAKuI,iBAAiBF,MAC/FzH,MACD,EAAAI,EAAA,GAAI,SAAAwH,GACF,GAAsC,SAAlCA,EAAKC,KAAKC,oBACZ,OAAQF,EAAKG,UAAUD,qBACrB,IAAK,MACL,IAAK,UACHF,EAAKC,KAAO,QACZ,MACF,IAAK,QACL,IAAK,OACL,IAAK,MACHD,EAAKC,KAAO,QAIlB,OAAOD,MAMb,YAAArH,KAAA,SAAKkH,EAAiBG,GACpB,OAAOxI,KAAKL,KAAK0B,KAAcrB,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,MAAgB0I,EAAM,CACrFnI,QAAQ,QAAF,CAAIC,MAAON,KAAKJ,QAAQU,MAAMC,WAAY+H,OAAQtI,KAAKkI,UAAalI,KAAKuI,iBAAiBF,OAIpG,YAAAO,aAAA,WACE,OAAO5I,KAAKL,KAAKS,IAAcJ,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,MAAoB,CACnFO,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAY+H,OAAQtI,KAAKkI,SAAUW,eAAgB,WAI3F,YAAAC,eAAA,SAAe/I,GACb,OAAOC,KAAKL,KAAK0B,KAAcrB,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,MAAsB,GAAI,CACzFO,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAY+H,OAAQtI,KAAKkI,SAAUa,QAAS,OAAQC,KAAMjJ,MAI1F,YAAAwI,iBAAR,SAAyBF,GACvB,OAAIY,SAASZ,EAAS,IAAI9H,aAAe8H,EAChC,CAAEa,WAAYb,GAEd,CAAEW,KAAMX,I,sCApDRc,GAAa,qC,0BAAbA,EAAa,QAAbA,EAAa,Y,EAD1B,G,8BCGA,aAGE,WAAoBxJ,EAA0BE,EAAgCuJ,GAA1D,KAAAzJ,OAA0B,KAAAE,aAAgC,KAAAuJ,Y,OAE9E,YAAAC,YAAA,SAAYb,GAAZ,WACE,OAAOxI,KAAKL,KAAKS,IAA6B,iCAAiCQ,MAC7E,EAAAI,EAAA,GAAI,SAAAsI,GACF,IAAMC,EAAW,EAAKC,gCAAgCF,EAAI1F,SAAU4E,GAC9DiB,EAAwB,EAAKC,yBAAyBH,GACtDI,EAAO,EAAKC,uBAAuBH,EAAsBI,cAAerB,EAAMiB,EAAsBK,mBAK1G,MAJyD,CACvDC,KAAMN,EAAsBI,cAC5BF,KAAI,OAQJ,YAAAH,gCAAR,SAAwCO,EAAiBvB,G,QACjDwB,EAAc,CAAC,IAAK,KACpBC,EAAiB,SAACC,GAAkB,OAACA,EAAEzB,KAAK0B,QAAQ,UAAY,EAAK,EAAI,GAEzEC,EAAqB,G,IAC3B,IAAkB,eAAAL,GAAI,8BAAE,CAAnB,IAAMM,EAAG,QACNC,EAAeN,EAAYG,QAAQE,EAAIE,IAAI,KAC3B,IAAlBD,GAAwBA,IAAiBL,EAAezB,KAEtD8B,IAAiBL,EAAezB,KAClC6B,EAAIE,IAAMF,EAAIE,IAAIC,OAAO,IAE3BJ,EAAQ/C,KAAKgD,K,iGAGjB,OAAOD,GAGD,YAAAV,yBAAR,SAAiCK,G,QACzBF,EAA2B,GAC3BY,EAA4B,G,IAElC,IAAkB,eAAAV,GAAI,8BAAE,CAAnB,IAAMM,EAAG,QACyB,OAAfA,EAAIE,IAAI,IAI5BF,EAAIE,IAAMF,EAAIE,IAAIC,OAAO,GACzBC,EAAepD,KAAKgD,IAHpBR,EAAcxC,KAAKgD,I,iGAWvB,MAJ+F,CAC7FR,cAAa,EACbC,kBAHwB9J,KAAK0K,yBAAyBD,KAQlD,YAAAC,yBAAR,SAAiCX,G,QACzBY,EAA2C,G,IACjD,IAAkB,eAAAZ,GAAI,8BAAE,CAAnB,IAAMM,EAAG,aACsB1G,IAA9BgH,EAAcN,EAAIO,UACpBD,EAAcN,EAAIO,QAAU,IAE9BD,EAAcN,EAAIO,QAAQvD,KAAKgD,I,iGAEjC,OAAOM,GAGD,YAAAf,uBAAR,SACEC,EACAgB,EACAf,GAEA,IAAMH,EAAO3J,KAAK8K,SAASjB,GAuD3B,OApDAF,EAAKoB,QAAUjK,OAAOkK,OAAO,GAAIrB,EAAKoB,QAAS,CAAEE,OAAQ,GAAIC,mBAAoB,KAC7EL,EAAsBM,aACxBnL,KAAKoL,gBACHzB,EAAKoB,QAAQE,OACbJ,EAAsBM,YACtB,UACAN,EACAf,GAGAe,EAAsBQ,yBACxBrL,KAAKoL,gBACHzB,EAAKoB,QAAQG,mBACbL,EAAsBQ,wBACtB,uBACAR,EACAf,GAIAe,EAAsBS,SACxB3B,EAAK4B,KAAOzK,OAAOkK,OAAO,GAAIrB,EAAK4B,KAAM,CAAEN,OAAQ,GAAIC,mBAAoB,KACvEL,EAAsBW,UACxBxL,KAAKoL,gBACHzB,EAAK4B,KAAKN,OACVJ,EAAsBW,SACtB,SACAX,EACAf,GAGAe,EAAsBY,sBACxBzL,KAAKoL,gBACHzB,EAAK4B,KAAKL,mBACVL,EAAsBY,qBACtB,sBACAZ,EACAf,WAIGH,EAAK4B,KAIVV,EAAsBa,SACxB/B,EAAKgC,IAAIC,UAAY,GACrBjC,EAAKgC,IAAIE,SAAW,GACpB7L,KAAKoL,gBAAgBzB,EAAKgC,IAAIC,UAAW,gBAAiB,gBAAiBf,EAAuBf,GAClG9J,KAAKoL,gBAAgBzB,EAAKgC,IAAIE,SAAU,eAAgB,eAAgBhB,EAAuBf,IAG1FH,GAID,YAAAmB,SAAR,SAAiBf,G,QACT+B,EAAqB,G,IAC3B,IAAgB,eAAA/B,GAAI,8BAAE,CAAjB,IAAMgC,EAAC,aACUpI,IAAhBmI,EAAKC,EAAExB,OACTuB,EAAKC,EAAExB,KAAO,SAEc5G,IAA1BmI,EAAKC,EAAExB,KAAKwB,EAAEnB,UAChBkB,EAAKC,EAAExB,KAAKwB,EAAEnB,QAAU,IAE1B,IAAMoB,EAA0B,CAC9B/K,IAAK8K,EAAEhM,KACPkM,MAAOjM,KAAKiM,MAAMF,EAAExB,IAAKwB,EAAEnB,OAAQmB,EAAEhM,MACrCmM,KAAMH,EAAEI,QACRC,KAAML,EAAEK,MAAQpM,KAAKoM,KAAKL,EAAExB,IAAKwB,EAAEnB,OAAQmB,EAAEhM,MAC7CsM,MAAOrM,KAAKsM,UAAUP,EAAEM,QAGzBP,EAAKC,EAAExB,KAAKwB,EAAEnB,QAAyBvD,KAAK2E,I,iGAE/C,OAAOF,GAGD,YAAAG,MAAR,SAAc1B,EAAaK,EAAgBsB,GACzC,IAAMjL,EAAMjB,KAAKuM,WAAWhC,EAAKK,EAAQsB,EAAM,QAE3CM,EAAiBxM,KAAKoJ,UAAUqD,QAAQxL,GAI5C,OAHIuL,IAAWvL,IACbuL,EAASN,GAEJM,GAGD,YAAAD,WAAR,SAAmBhC,EAAaK,EAAgBsB,EAAcQ,GAC5D,MAAO,wBAA+BnC,EAAM,IAAMK,EAAS,IAAMsB,EAAOQ,GAGlE,YAAAN,KAAR,SAAa7B,EAAaK,EAAgBsB,GACxC,IAAMjL,EAAMjB,KAAKuM,WAAWhC,EAAKK,EAAQsB,EAAM,SAE3CM,EAAiBxM,KAAKoJ,UAAUqD,QAAQxL,GAI5C,OAHIuL,IAAWvL,IACbuL,EAAS,IAEJA,GAGD,YAAAF,UAAR,SAAkBK,G,QAChB,IAAKA,EAAe,OAAO,KAE3B,IAAMN,EAA0B,GAC1BO,EAAQD,EAAYE,MAAM,M,IAChC,IAAgB,eAAAD,GAAK,8BAAE,CAAlB,IACGE,EADI,QACKD,MAAM,KACrB,GAAoB,IAAhBC,EAAKC,OAAc,CACrB,IAAMC,EAAuB,CAC3BjN,KAAM+M,EAAK,GAAGG,OACdC,IAAKJ,EAAK,GAAGG,OAAS,IAAMH,EAAK,GAAGG,QAEtCZ,EAAMhF,KAAK2F,K,iGAGf,OAAqB,IAAjBX,EAAMU,OAAuB,KAC1BV,GAID,YAAAjB,gBAAR,SACE+B,EACAC,EACAC,EACAxC,EACAf,GALF,WAOE9J,KAAKsN,UAAUzC,EAAsB0C,MAAOH,GAAMvF,UAAU,SAAA2F,G,YAE1D,IAAoB,eAAAA,GAAM,8BAAE,CAAvB,IAAMC,EAAK,QACRC,EAAYD,EAAMjM,WACxB2L,EAAOO,GAAa,CAClBzM,IAAKyM,EACLzB,MAAOyB,EACPxB,KAAM,EAAKyB,iBAAiBN,EAAQK,EAAW7C,GAC/CuB,KAAMqB,EAAMG,SAASC,OAAOC,OAAS,KAAOL,EAAMhF,KAAKsF,cAAgB,MAGzE,IAAMC,GAAe,EAAAC,EAAA,GAAUd,EAAOO,IACtC,EAAKQ,eAAef,EAAQE,EAAQK,EAAWD,EAAMU,UAAWH,EAAclE,I,iGAGhF,GAAI0D,EAAOT,OAGT,IAFA,IAAMqB,EAAM,CAAC,WAAY,cAAe,aAAc,aAAc,cAAe,YAE1EC,EAAI,EAAGA,EAAID,EAAIrB,OAAQsB,IAC9BlB,EAAOiB,EAAIC,IAAM,CACfpN,IAAKmN,EAAIC,GACTpC,MAAOmC,EAAIC,GACXnC,KAAM,EAAKyB,iBAAiBN,EAAQe,EAAIC,GAAIxD,GAC5CuB,KAAM,EAAKhD,UAAUqD,QAAQ,uCAAyC2B,EAAIC,GAAK,aAOjF,YAAAV,iBAAR,SAAyBW,EAAaC,EAAa1D,GACjD,OAAQA,EAAsBpC,KAAK0B,QAAQ,UAAY,EACnD,IAAMmE,EAAM,IAAMC,EAClB,IAAMD,EAAIE,QAAQ,IAAK,KAAO,IAAMD,EAAM,KAGxC,YAAAjB,UAAR,SAAkBhN,EAAeH,GAC/B,OAAOH,KAAKL,KAAKS,IAAaJ,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,MAAkB,CAChFO,OAAQ,CAAEiB,MAAOhB,EAAMC,WAAYJ,WAAU,KAC5CS,MACD,EAAAI,EAAA,GAAI,SAAAwM,G,QACFA,EAASA,EAAOiB,OAAO,SAAAhB,GAAS,OAAAA,EAAMhF,OAAS,Y,IAC/C,IAAkB,eAAA+E,GAAM,8BAAE,CAArB,IAAMkB,EAAG,QACZ,GAAKA,EAAId,SAAT,CACA,IAAMe,EAAKD,EAAId,SAETgB,EAASD,EAAGD,EAAIjG,MAChBoG,EAAUF,EAAGD,EAAIP,WACvBQ,EAAGd,QAAS,SAAH,oBAHKc,EAAGG,KAGUF,GAAWC,K,iGAExC,OAAOrB,MAKL,YAAAU,eAAR,SACEf,EACAE,EACAK,EACAqB,EACAf,EACAlE,GAEA,IAAIkF,EAAiBlF,EAAkBiF,GACvC,GAAIA,EAAU5E,QAAQ,KAAM,CAC1B,IAAM8E,EAAYF,EAAUvE,OAAO,EAAGuE,EAAU5E,QAAQ,MACxD,GAAI8E,EAAW,CACb,IAAMC,EAAYpF,EAAkBmF,GAChCC,IACFF,EAAiBA,EAAiBA,EAAeG,OAAOD,GAAaA,IAI3E,GAAKF,EAAL,MAE+BrL,IAA3BwJ,EAAOO,GAAW0B,OACpBjC,EAAOO,GAAW0B,KAAO,IAI3B,IAFA,IAAMC,EAAalC,EAAOO,GAAW0B,KAE5BE,EAAI,EAAGA,EAAIN,EAAejC,OAAQuC,IACzC,IACED,EAAW3B,EAAY,IAAMsB,EAAeM,GAAGvP,MAAQe,OAAOkK,OAAO,GAAIgD,EAAc,CACrF/M,IAAKyM,EAAY,MAAQsB,EAAeM,GAAGvP,KAC3CkM,MAAO+C,EAAeM,GAAGvP,KACzBmM,KAAMlM,KAAKuP,uBAAuBP,EAAeM,GAAGnD,QAASkB,EAAQK,GACrE8B,UAAU,I,YAMV,YAAAD,uBAAR,SAA+BrD,EAAcuD,EAAiBC,GAI5D,OAHOxD,EACJsC,QAAQ,0BAA2B,KAAOiB,EAAU,MACpDjB,QAAQ,2BAA4B,KAAOkB,EAAY,O,sCA9SjDC,GAAe,sC,0BAAfA,EAAe,QAAfA,EAAe,Y,EAD5B,G,wCCTA,2B,OAGE,YAAAC,UAAA,SAAUC,GACR,OAAa,MAATA,GAEJA,EAAMC,KAAK,SAACC,EAAOC,GACjB,OAAID,EAAME,SAAWD,EAAMC,SAClB,EACEF,EAAME,SAAWD,EAAMC,UACxB,EAED,IARiBJ,G,sCAHnBK,I,0CAAAA,EAAa,U,EAD1B,GCDA,cAGE,WAAoBC,GAAA,KAAAA,Y,OAEpB,YAAAP,UAAA,SAAUQ,EAAeH,GAOvB,OAAOjQ,KAAKmQ,UAAUE,yBAAyB,kBAL3CJ,EACgB,EAARG,EAEW,IAAVA,EAAe,EAAa,EAARA,EAAY,IAE0B,Q,sCAX9DE,GAAgB,iB,6CAAhBA,EAAgB,U,EAD7B,G,sBCCM,S,6DADF,SACE,iCACF,S,8CADiB,qCAAgC,0C,4EAK/C,iBAEE,mG,wBACA,SACF,Q,qCAJyC,qCACvC,qEAAiE,gBAEjE,gC,sBAoBI,S,0BADF,SACE,iCACF,S,+CADiB,qCAAgC,0C,0BAFnD,SACE,iC,qBAGF,S,yBAHkC,iD,uCAhBpC,eACE,iBACE,iG,wBACA,kBACE,oBACE,SACF,QACA,gBAAM,SAAe,QACvB,QACA,kBACE,8FACA,oBAAU,gBAAG,QACf,QACF,QAEA,kCAKF,Q,qCAnBmC,8CAEN,+BAErB,6GAEI,uBAQK,gE,0BArBjB,yBAMA,0B,kBANmB,0BAMb,mCCVZ,kBAaE,aALU,KAAAC,SAAiC,IAAI,MACrC,KAAAzH,eAAuC,IAAI,MAErD,KAAA0H,aAAyB,G,OAIzB,YAAAjN,YAAA,SAAYC,G,MAIV,GAHyB,MAArBA,EAAQiN,YACVzQ,KAAK8L,KCpBJ,SAAuB2E,G,QAC5B,IAAKA,EAAa,MAAO,GAEzB,IAAM3E,EAAmB,G,IACzB,IAAuB,eAAA2E,GAAS,8BAK9B,IALG,IACC,EAAqB3E,EACnB1I,EAFW,QAEMyJ,MAAM,KACvB6D,EAAOtN,EAAMA,EAAM2J,OAAS,GAC9B4D,EAAe,G,WACVtC,GACP,IAAMrF,EAAO5F,EAAMiL,GACnBsC,GAAgBtC,EAAI,IAAIrF,EAASA,EACjC,IAAM4H,EAAW,EAAOC,KAAK,SAAAC,GAAQ,OAAAA,EAAK/Q,OAASiJ,IACnD,GAAI4H,EACF,EAASA,EAASG,aACb,CACL,IAAMD,GAAI,SACRV,MAAO/B,EACPtO,KAAMiJ,EACN2H,aAAY,EACZV,SAAUjH,IAAS0H,GACf1H,IAAS0H,GAAQ,CAAEK,SAAU,KAEnC,EAAO1J,KAAKyJ,GACZ,EAASA,EAAKC,WAfT1C,EAAI,EAAGA,EAAIjL,EAAM2J,OAAQsB,I,EAAzBA,G,iGAoBX,OAAOvC,EDTSkF,CAA4B,QAAd,EAAAhR,KAAKyQ,iBAAS,QAAI,KAEtB,MAApBjN,EAAQC,SAAkB,CAC5B,IAAMwN,EAAmBzN,EAAQC,SAASyN,cACtCD,GACFjR,KAAKmR,WAAWF,GAEdjR,KAAKyD,UACPzD,KAAKoR,eAAepR,KAAKyD,YAK/B,YAAA4N,aAAA,SAAarI,GACXhJ,KAAKuQ,SAASe,KAAKtI,IAGrB,YAAAmI,WAAA,SAAWnI,GACT,mBAA6BA,EAAMhJ,KAAKwQ,eAG1C,YAAAe,QAAA,SAAQC,GACNxR,KAAK8I,eAAewI,KAAKE,IAGnB,YAAAJ,eAAR,SAAuBK,G,QACrB,GAAY,MAARA,IACAzR,KAAKwQ,aAAakB,SAASD,GAA/B,CAEA,IAAMrO,EAAQqO,EAAK5E,MAAM,KACrB8D,EAAe,G,IACnB,IAAmB,eAAAvN,GAAK,8BAAE,CAArB,IAAM4F,EAAI,QAEThJ,KAAKwQ,aAAakB,SADtBf,EAAgBA,EAAyBA,EAAY,IAAI3H,EAA1BA,IAE/BhJ,KAAKmR,WAAWR,I,0IA9CTgB,I,wBAAAA,EAAsB,uzBDVnC,iBAEE,eACE,iC,qBAIA,2CA+BF,QAEA,iBACE,oBAA4C,gCAAS,EAAAJ,YACnD,oBAAU,eAAG,QACf,QACF,QACF,S,MA1CmC,8C,4uCCEnC,GEHA,4B,OAEE,YAAA3B,UAAA,SAAUtB,GACR,GAAW,MAAPA,EAEJ,OAAIsD,MAAMC,QAAQvD,GAAeA,EAE1BxN,OAAOgR,OAAOxD,I,sCANZyD,I,8CAAAA,EAAiB,U,EAD9B,G,kDC6Bc,uBAAsE,8FACpE,SACF,Q,2CADE,iF,0BAUF,eACE,gBAAqC,SAAe,QACtD,S,uBADK,mCAAkC,wB,0BAHzC,kBACE,kB,oBACA,wBAGF,S,6BAJoB,oDACI,mC,0BAqBlB,eACE,gBAAqC,SAAe,QACtD,S,uBADK,mCAAkC,wB,0BAHzC,kBACE,kB,oBACA,wBAGF,S,6BAJoB,oDACI,mC,uCAf1B,eAEE,iBACE,kBACE,uFACA,SACF,QACA,uBACE,sFACA,kBACF,QACF,QAEA,yBAOF,Q,qCAjB0C,+BAEpC,gCAQyC,uD,0BAdjD,SACE,wB,yBAqBF,S,6BArBwB,6C,uCAxB1B,iBAEE,iBACE,iBACE,uFACA,SACF,QACA,6BAGA,uBACE,sFACA,kBACF,QACF,QAEA,yBAOA,iCAwBF,Q,qCA5CgC,+BAE1B,gCAES,8BASc,sDAOZ,uD,0BAxBnB,SACE,wB,yBAgDF,S,6BAhD2C,8C,uCAZ7C,eAEE,iBAEE,wF,qBACA,oBACE,SACF,QACA,gBAAM,S,qBAAqF,QAC7F,QAEA,iCAmDF,Q,yDA3DI,mFAGE,sGAEI,4EAGO,yD,0BAZnB,SACE,wB,oBA+DF,S,6BA/D0B,8C,uCAX5B,eAEE,iBACuB,wF,qBACrB,oBACE,SACF,QACA,gBAAM,S,qBAAkE,QAC1E,QAEA,iCAkEF,Q,oCA1E0C,yEAGpC,uGAEI,kEAGO,0DCPnB,kBAaE,aANU,KAAAjO,cAAsC,IAAI,MACpD,KAAAkO,gBAA4B,GAC5B,KAAAC,eAA2B,GAC3B,KAAAC,aAAyB,GACzB,KAAAC,aAAyB,G,OAIzB,YAAAC,WAAA,SAAWrO,GACT/D,KAAK8D,cAAcwN,KAAKvN,IAG1B,YAAAsO,cAAA,SAAcpR,GACZ,mBAA6BA,EAAKjB,KAAKgS,kBAGzC,YAAAM,aAAA,SAAarR,GACX,mBAA6BA,EAAKjB,KAAKiS,iBAGzC,YAAAM,WAAA,SAAWtR,GACT,mBAA6BA,EAAKjB,KAAKkS,eAGzC,YAAAM,WAAA,SAAWvR,GACT,mBAA6BA,EAAKjB,KAAKmS,e,sCA3B9BM,I,wBAAAA,EAAqB,q/BDTlC,iBACE,wB,oBA6EF,S,MA7E2B,kD,8+CCG3B,G,uCCqBE,6BAC6B,wGAC7B,Q,2BAFkE,kCAA+B,sBAA/B,CAA+B,4B,sBAezF,uB,sBACA,0B,qGAVJ,kBAIG,wFACD,kBACE,mBAAwB,SAAe,QACzC,QACA,kBACE,8BACA,iCAEA,uBACE,2FACA,mBACF,QACF,QACF,Q,0BAjB+C,iEAKZ,gCACP,wBAGb,oCACG,oC,0BAXpB,kBACE,yBAkBF,S,yBAlBmC,kC,uCAmBnC,gCACE,wGAEF,Q,sCAHqC,kCAA+B,oBAA/B,CAA+B,0BAA/B,CAA+B,0BAA/B,CAA+B,iB,0BArBtE,kBACE,yBAoBA,uCAIF,S,wBAxBoD,uCAoB9B,+B,uCAMtB,qBAA4F,2DAC1F,oBAAU,gBAAI,QAChB,S,iHA1DF,iBAGE,iBACE,iBACE,iGACA,oBAAU,qBAAS,QACrB,QACA,iBACE,gGACA,oBAAU,gBAAI,QAChB,QACA,iBACE,kEACA,oBAAU,sBAAS,QACrB,QACF,QAEA,iCAC+B,mEAA6B,yEAC5D,QACA,gCACE,6EACF,QAEA,oCAIA,yBA2BA,6BAGF,Q,+BA1DE,qGAGsB,gFAIA,+EAIA,yEAMF,kEAAiD,6CAAjD,CAAiD,yBAGlD,iEAAgD,6BAIlD,8DAIU,yDA2B0C,qCCvCvE,ICbMC,GAAiB,CACrB,CAAE1J,KAAM,GAAI2J,UDYd,WAyBE,WACU/S,EACAgT,EACAjM,EACAkM,EACAC,EACAC,EACAlQ,EACAmQ,GAPA,KAAApT,UACA,KAAAgT,QACA,KAAAjM,WACA,KAAAkM,gBACA,KAAAC,gBACA,KAAAC,kBACA,KAAAlQ,OACA,KAAAmQ,eAxBV,KAAA3M,UAAYA,EACZ,KAAA4M,eAAiC5M,EAAUC,UAC3C,KAAAE,QAAUA,EACV,KAAA0M,aAA6B1M,EAAQE,OACrC,KAAAyM,cAAgB,CACd7Q,MAAO,YACP8Q,QAAS,GAoBTpT,KAAKJ,QAAQyT,KAAKrT,KAAK4S,O,OAGzB,YAAAU,SAAA,sBACEtT,KAAKuT,aAAe,IAAIC,EAAA,EACxBxT,KAAKyT,WAAa,IAAIC,EAAA,EAA0B,IAChD,IAAMC,EAAiB3T,KAAK4S,MAAMgB,SAASC,SAASzT,IAAI,eACxDJ,KAAK8T,YAAc,IAAIJ,EAAA,EAAgBC,GACvC3T,KAAK+T,WAAa,IAAIL,EAAA,EAAgB,CAACC,IACvC3T,KAAKgU,WAAa,IAAIN,EAAA,EAA4B,IAElD1T,KAAKiU,kBAELjU,KAAK8S,cAAclK,eAAef,UAAU,SAAA4I,GAC1C,EAAKgD,WAAWzL,KAAKyI,KAGvBzQ,KAAKuT,aAAaxM,KAChB,EAAAmN,EAAA,IAAc,CAAClU,KAAKyT,WAAYzT,KAAK+T,aAAalM,UAAU,SAAC,G,IAAA,gBAAC4I,EAAS,KACrE,GAAyB,IAArBA,EAAU1D,OAAd,CAEA,IAAIoH,EAAY,EAAKH,WAAW9S,MAC1BkT,EAJ0E,KAIpD3F,OAAO,SAAApG,GAAW,OAAC8L,EAAUE,KAAK,SAAAnK,GAAK,OAAAA,EAAE7B,UAAYA,MACxD,IAArB+L,EAAUrH,UAEd,EAAAuH,EAAA,GACEF,EAAUpT,IAAI,SAAAqH,GAEZ,IAAMkM,EAAwB,CAC5BlM,QAAO,GAET8L,GAAY,SAAH,oBAAOA,IAAS,CAAEI,IAE3B,IAAMC,EAAQ,EAAK1B,cAAc1S,IAAIiI,GAASzH,MAAK,EAAA6T,EAAA,MAC7CC,EAAYF,EAAM5T,MAAK,EAAA+T,EAAA,IAAS,SAAAnM,GAAQ,SAAKuK,gBAAgB1J,YAAYb,MAC/E,OAAO,EAAA8L,EAAA,GAAS,EAAC,EAAAM,MAAGvM,GAAUmM,EAAOE,OAEvC7M,UAAU,SAAAgN,GACV,IAAIC,EAAa,EAAKd,WAAW9S,MAEjC2T,EAAQE,QAAQ,SAAC,G,IAAA,gBAAC1M,EAAO,KAAEG,EAAI,KAAE5E,EAAQ,KACjCoR,EAAgBF,EAAWG,UAAU,SAAA/K,GAAK,OAAAA,EAAE7B,UAAYA,IAC9D,KAAI2M,EAAgB,GAApB,CAEA,IAAMT,EAAwB,CAC5BlM,QAAO,EACPG,KAAI,EACJ0M,eAAgBtR,EAAS+F,KACzBwL,aAAcvR,EAASmG,KACvBqL,UAAW5M,EAAK6M,MAElBP,GAAa,SAAH,6BAAOA,EAAWQ,MAAM,EAAGN,KAAc,CAAET,KAAW,QAAKO,EAAWQ,MAAMN,EAAgB,KACtG,EAAKO,2BAA2B/M,EAAMiI,MAGxC,EAAKuD,WAAWhM,KAAK8M,KAGvB,EAAKd,WAAWhM,KAAKmM,QAIzBnU,KAAKuT,aAAaxM,KAChB,EAAAmN,EAAA,IAAc,CAAClU,KAAK8T,YAAa9T,KAAKgU,aAAanM,UAAU,SAAC,G,MAAA,gBAAC2N,EAAU,KACjEC,EAD4E,KACzD5E,KAAK,SAAA3G,GAAK,OAAAA,EAAE7B,UAAYmN,IAC3CE,EAAe,cACfC,EAAqB,MAAVF,EAAiBC,GAA6B,QAAX,EAAAD,EAAOjN,YAAI,eAAEoN,UAAQ,MAAMF,EAE3EC,IADa,EAAK3C,aAAa6C,YAEjC,EAAK7C,aAAa8C,SAASH,MAKjC3V,KAAK+V,eAAgB,EAAA7B,EAAA,IAAc,CAAClU,KAAKyT,WAAYzT,KAAK8T,YAAa9T,KAAK+T,WAAY/T,KAAKgU,aAAapT,MACxG,EAAAI,EAAA,GAAI,SAAC,G,IAAA,gBAACyP,EAAS,KAAE+E,EAAU,KAAarB,EAAS,KACzC6B,EAD8B,KACbhV,IAAI,SAAAqH,G,UACnB4N,EAAW9B,EAAUtD,KAAK,SAAA3G,GAAK,OAAAA,EAAE7B,UAAYA,IAQnD,MAPmB,CACjBA,QAAO,EACP4D,MAA+B,QAAxB,EAAc,QAAd,EAAAgK,aAAQ,EAARA,EAAUzN,YAAI,eAAEoN,gBAAQ,QAAIvN,EACnC6N,SAAU7N,IAAYmN,EACtBW,YAA0B,QAAd,EAAAF,aAAQ,EAARA,EAAUzN,YAAI,eAAE6M,SAASY,aAAQ,EAARA,EAAUb,WAC/CgB,UAA6B,OAAlBH,aAAQ,EAARA,EAAUzN,SAInB6N,EAAiBlC,EAAUtD,KAAK,SAAA3G,GAAK,OAAAA,EAAE7B,UAAYmN,IAWzD,MAT6C,CAC3CA,WAAU,EACVQ,KAAI,EACJ3N,QAASgO,aAAc,EAAdA,EAAgBhO,QACzBG,KAAM6N,aAAc,EAAdA,EAAgB7N,KACtBiI,UAAS,EACTyE,eAAgBmB,aAAc,EAAdA,EAAgBnB,eAChCC,aAAckB,aAAc,EAAdA,EAAgBlB,kBAOtC,YAAAvQ,YAAA,WACE5E,KAAKyT,WAAW3L,WAChB9H,KAAK8T,YAAYhM,WACjB9H,KAAK+T,WAAWjM,WAChB9H,KAAKgU,WAAWlM,WAChB9H,KAAKuT,aAAa+C,eAGpB,YAAAC,eAAA,SAAeC,GACbxW,KAAKiT,eAAkBjT,KAAKiT,iBAAmBuD,EAAYA,EAAW,MAGxE,YAAAC,aAAA,WACE,OAAQzW,KAAKkT,cACX,KAAK1M,EAAQC,IACXzG,KAAKkT,aAAe1M,EAAQE,OAC5B,MACF,KAAKF,EAAQE,OACX1G,KAAKkT,aAAe1M,EAAQC,IAC5B,MACF,QACEzG,KAAKkT,aAAe1M,EAAQE,SAIlC,YAAAoC,eAAA,SAAe0I,GAAf,WACMkF,EAAW,aACXC,EAAa,MACF,QAAXnF,IAAoBA,aAAM,EAANA,EAAQoF,WAAW,YACzCF,EAAW,mBACXC,EAAa,MAEf,IAAI5W,EAAO8W,OAAOH,EAAUC,GACf,OAAT5W,GAAiC,IAAhBA,EAAKgN,SAE1BhN,EAAO,kBAA4BA,GACrB,MAAVyR,IACFzR,EAAUyR,EAAM,IAAIzR,GAEtBC,KAAK8S,cAAchK,eAAe/I,GAAM8H,UAAU,SAAAyB,GAChD,EAAKwJ,cAAclK,eAAef,UAAU,SAAAnG,GAC1C,EAAK+R,WAAWzL,KAAKtG,SAK3B,YAAAoC,cAAA,SAAcC,GACa,MAArB/D,KAAK8W,aACP9W,KAAK8W,aAAahT,cAAcC,GACC,MAAxB/D,KAAK+W,iBACd/W,KAAK+W,gBAAgBjT,cAAcC,IAIvC,YAAAiT,YAAA,SAAYC,EAAc5O,GACxB,IAAI8L,EAAYnU,KAAKgU,WAAW9S,MAC1B8T,EAAgBb,EAAUc,UAAU,SAAA/K,GAAK,OAAAA,EAAE7B,UAAYA,IACvD6O,EAAmB/C,EAAUa,GAC7BT,GAAW,oBACZ2C,GAAgB,CACnB1O,MAAM,SAAF,WACC0O,EAAiB1O,MAAI,CACxB6M,KAAM4B,MAGV9C,GAAY,SAAH,6BAAOA,EAAUmB,MAAM,EAAGN,KAAc,CAAET,KAAW,QAAKJ,EAAUmB,MAAMN,EAAgB,KACnGhV,KAAKgU,WAAWhM,KAAKmM,IAGvB,YAAA5D,SAAA,SAASlI,G,QAEPA,EAAyG,QAA/F,EAAsF,QAAtF,EAAArI,KAAKgU,WAAW9S,MAAM2P,KAAK,SAAA3G,GAAC,MAAI,OAAAA,EAAE7B,UAAYA,IAAiB,QAAN,EAAA6B,EAAE1B,YAAI,eAAEoN,YAAavN,WAAQ,eAAEA,eAAO,QAAIA,EAEvFrI,KAAK8T,YAAY5S,QACjBmH,GACpBrI,KAAK8T,YAAY9L,KAAKK,GAExB,IAAM8O,EAAenX,KAAK+T,WAAW7S,MACrC,IAAKiW,EAAazF,SAASrJ,GAAU,CACnC,IAAM+O,GAAe,SAAH,oBAAOD,IAAY,CAAE9O,IACvCrI,KAAK+T,WAAW/L,KAAKoP,KAIzB,YAAAC,YAAA,SAAYhP,G,MACJ8O,EAAenX,KAAK+T,WAAW7S,MAC/BkW,EAAeD,EAAa1I,OAAO,SAAAxN,GAAO,OAAAA,IAAQoH,IAElDiP,EAAgBtX,KAAK8T,YAAY5S,MACvC,GAAIoW,IAAkBjP,EAAS,CAC7B,IAAMkP,EAAqE,QAArD,EAAAJ,EAAaA,EAAahN,QAAQmN,GAAiB,UAAE,QAAIF,EAAa,GAC5FpX,KAAK8T,YAAY9L,KAAKuP,GAGxBvX,KAAK+T,WAAW/L,KAAKoP,IAGvB,YAAAjW,KAAA,SAAKkH,GAAL,WACEA,YAAYrI,KAAK8T,YAAY5S,OAC7B,IAAM+U,EAAWjW,KAAKgU,WAAW9S,MAAM2P,KAAK,SAAA3G,GAAK,OAAAA,EAAE7B,UAAYA,IAC/D,GAAsB,OAAlB4N,aAAQ,EAARA,EAAUzN,MAAd,CAEAxI,KAAK2G,SAASgB,KAAK,aACnB,IAAM6P,EAAavB,EAASzN,KAAK6M,KACjCrV,KAAK8S,cAAc3R,KAAKkH,EAAS4N,EAASzN,MAAMX,UAAU,CACxDG,KAAM,SAAAsB,GACJ,GAAKA,EAAL,CAKA,IAAImO,GAAe,QAAH,YAAO,EAAKzD,WAAW9S,QACjC8T,EAAgByC,EAAaxC,UAAU,SAAA/K,GAAK,OAAAA,EAAE7B,UAAYA,IAChE,KAAI2M,EAAgB,GAApB,CAEA,IACMT,GAAW,oBADQkD,EAAazC,IAEjB,CACnBI,UAAWoC,IAEbC,GAAe,SAAH,6BAAOA,EAAanC,MAAM,EAAGN,KAAc,CAAET,KAAW,QAAKkD,EAAanC,MAAMN,EAAgB,KAC5G,EAAKhB,WAAWhM,KAAKyP,GACrB,EAAK9Q,SAASgB,KAAK,QAAS,KAAM,CAAET,SAAU,YAf5C,EAAKP,SAASgB,KAAK,SAAU,KAAM,CAAET,SAAU,OAiBnDwQ,MAAO,WACL,EAAK/Q,SAASgB,KAAK,SAAU,KAAM,CAAET,SAAU,WAM7C,YAAAqO,2BAAR,SAAmC/M,EAAkB9G,GAArD,WACQiW,EAAcnP,EAAKoN,SACnBgC,EAAgBD,EAAYxN,QAAQ,MAAQ,EAAIwN,EAAYE,YAAY,KAAO,EAAI,EACnFC,EAAkC,IAAlBF,EAAsB,GAAKD,EAAYI,UAAU,EAAGH,GACpEI,EAAWL,EAAYI,UAAUH,GAEjCK,EADOD,EAASD,UAAU,EAAGC,EAASjL,OAASvE,EAAKG,UAAUoE,QAC5C,QAAUvE,EAAKG,UAEjCuP,EAAWxW,EAAMmP,KAAK,SAAAY,GAAQ,OAAAA,IAASqG,EAAgBG,IACvDE,EAAgBzW,EAAM+M,OAAO,SAAAgD,GAAQ,OAAAA,EAAK2G,SAASJ,KAAWjL,OAAS,EAEzEmL,GACFlY,KAAK6S,cACF9L,IAAOyB,EAAKoN,SAAQ,iCAAiCsC,EAAQ,KAAM,QACnErQ,UAAU,WACT,EAAK0I,SAAS2H,KAGhBC,GACFnY,KAAK6S,cACF9L,IAAI,aAAaoR,EAAa,sBAAsB3P,EAAKoN,SAAQ,gEAAiE,QAClI/N,UAAU,WACT5E,OAAO0E,KAAK,iCAAkC,aAK9C,YAAAsM,gBAAR,sBACEjU,KAAK6C,KAAKmB,kBAAkB,WAC1B,EAAKuP,aAAaxM,KAChB,EAAAsR,EAAA,GAA6BpV,OAAQ,gBAAgB4E,UAAU,SAAAyQ,IAC3C,EAAKtE,WAAW9S,MAAMmT,KAAK,SAAAnK,GAAK,OAAU,MAAVA,EAAE1B,MAAgB0B,EAAE1B,KAAK6M,OAASnL,EAAEkL,cAEtFkD,EAAMC,iBACND,EAAME,YAAc,OAGxB,EAAKjF,aAAaxM,KAChB,EAAAsR,EAAA,GAAyBpV,OAAQ,WAAW4E,UAAU,SAAAyQ,GACnB,KAAlBA,EAAMG,UAAmBC,UAAUC,SAASC,MAAM,OAASN,EAAMO,QAAUP,EAAMQ,WAEhGR,EAAMC,iBACN,EAAK1V,KAAK+C,IAAI,WAAQ,EAAKzE,gB,sCAlTxB4X,GAAmB,yF,wBAAnBA,EAAmB,wD,GAAA,M,KACnB9S,EAAkB,G,KAClB,IAAqB,I,4qDDxBlC,0B,uBAEG,0C,qtFCeH,KCTA,4B,6CAIa+S,I,wBAAAA,I,4BAHF,CAAC,cAAsBtG,KACtB,Q,EAFZ,GCwBO,SAASuG,GAA2BtZ,GACzC,OAAO,IAAI,IAAiCA,EAAM,sBAAuB,OAAOsD,OAAOiW,YAGzF,gC,6CAgCaC,I,wBAAAA,I,6BAPA,CACT,IACAhQ,EACAwG,EACA,MACD,SApBQ,CACPqJ,GACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,eAAyB,OAA4BC,KACrD,IACA,S,EAvBJ,I,qKCxBaG,EAAkBC,kBAE/B,aAEE,WAAoB1Z,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAEhE,YAAAC,OAAR,SAAeC,GACb,OAAOC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOC,IAG3C,YAAAuZ,iBAAA,WACE,OAAOtZ,KAAKL,KAAKS,IAAcJ,KAAKF,OAAOuZ,yBAAiC,CAC1EhZ,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,eAIxC,YAAAgZ,kBAAA,WACE,OAAOvZ,KAAKL,KACTS,IAAiBJ,KAAKF,OAAOuZ,0BAAkC,CAAEhZ,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,cACrGK,MACC,OAAI,SAAA4Y,GAUF,OATyBA,EAAaxY,IAAI,SAAAmC,GAOxC,MANqC,CACnCsW,SAAUtW,EAAOsF,KAAKsP,UAAU,EAAG5U,EAAOsF,KAAK0B,QAAQ,MACvD4E,UAAW5L,EAAOsF,KAClBwD,MAAO9I,EAAOuW,MACdC,YAAaxW,EAAOyW,mBAShC,YAAAC,iBAAA,WACE,OAAO7Z,KAAKL,KAAKS,IAAmBJ,KAAKF,OAAOuZ,+BAGlD,YAAA/L,UAAA,SAAUlM,GACR,OAAOpB,KAAKL,KACTS,IAAaJ,KAAKF,OAAOsZ,GAAkB,CAC1C/Y,OAAQ,CAAEiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAAYJ,WAAYiB,EAAYI,cAEzEZ,MACC,OAAI,SAAA4M,G,QACF,GAAIA,E,IACF,IAAkB,eAAAA,GAAM,8BAAE,CAArB,IAAMkB,EAAG,QACZ,GAAKA,EAAId,SAAT,CACA,IAAMe,EAAKD,EAAId,SAETgB,EAASD,EAAGD,EAAIjG,MAChBoG,EAAUF,EAAGD,EAAIP,WACvBQ,EAAGd,QAAS,SAAH,oBAHKc,EAAGG,KAGUF,GAAWC,K,iGAG1C,OAAOrB,MAKf,YAAAsM,QAAA,SAAQC,EAAmB3Y,GACzB,OAAOpB,KAAKL,KAAK0B,KAAcrB,KAAKF,OAAOuZ,oBAA4B,KAAM,CAC3EhZ,OAAQ,CACNiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAC1BC,cAAeY,EAAY4Y,GAAGzZ,WAC9B0Z,MAAOC,KAAKC,UAAUJ,OAK5B,YAAAjE,SAAA,SAAShF,EAAa1P,GACpB,OAAOpB,KAAKL,KAAK0B,KAAWrB,KAAKF,OAAO,IAAiB,YAAa,KAAM,CAC1EO,OAAQ,CACNiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAC1BC,cAAeY,EAAY4Y,GAAGzZ,WAC9B6Z,YAAatJ,EAAKkJ,GAAGzZ,eAK3B,YAAA8Z,OAAA,SAAOC,EAAiB9Z,EAAuB+Z,GAC7C,OAAOva,KAAKL,KAAK0B,KAAWrB,KAAKF,OAAOuZ,sBAA8B,KAAM,CAC1EhZ,OAAQ,CACNiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAC1BC,cAAeA,EAAcD,WAC7B6Z,YAAaE,EAAQ/Z,WACrBga,QAAO,MAKb,YAAAhZ,OAAA,SAAOuP,EAAa1P,GAClB,GAAI0P,EAAK0J,QACP,MAAM,IAAIC,MAAM,sBAGlB,OAAOza,KAAKL,KAAK4B,OAAgBvB,KAAKF,OAAOuZ,sBAA8B,CACzEhZ,OAAQ,CACNiB,MAAOtB,KAAKJ,QAAQU,MAAMC,WAC1BC,cAAeY,EAAY4Y,GAAGzZ,WAC9B6Z,YAAatJ,EAAKkJ,GAAGzZ,eAK3B,YAAAwG,IAAA,SAAI2T,EAA0Bla,GAC5B,OAAOR,KAAKL,KAAK0B,KAAarB,KAAKF,OAAOuZ,mBAA2B,KAAM,CACzEhZ,OAAQ,CACNkN,MAAOvN,KAAKJ,QAAQU,MAAMC,WAC1Boa,cAAena,EAAcD,WAC7ByZ,GAAIU,EAASV,GAAGzZ,WAChBkI,KAAMiS,EAASjS,KACf0F,UAAWuM,EAASvM,UACpB3M,WAAYkZ,EAASlZ,WACrBgZ,QAASE,EAASF,QAAQja,WAC1Bqa,MAAOF,EAASG,UAAUta,eAKhC,YAAAua,gBAAA,SAAgBC,EAAY5a,EAAoB4O,GAC9C,OAAO/O,KAAKL,KAAK0B,KAAcrB,KAAKF,OAAOuZ,yBAAiC,KAAM,CAChFhZ,OAAQ,CAAEC,MAAON,KAAKJ,QAAQU,MAAMC,WAAY6Z,YAAaW,EAAGxa,WAAYkN,MAAOtN,EAAY4O,UAAS,M,sCAxHjGiM,GAAyB,qC,0BAAzBA,EAAyB,QAAzBA,EAAyB,Y,EADtC","file":"projects_ng-dialogs_src_app_code-editor_code-editor_module_ts.f1356dcfca89fa533a9c.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","import { AfterViewInit, Component, ElementRef, forwardRef, Input, NgZone, OnChanges, OnDestroy, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { aceOptions } from './ace-options';\r\nimport { Ace, Editor } from './ace.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true,\r\n  }],\r\n})\r\nexport class AceEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() snippets: Snippet[];\r\n\r\n  private value = '';\r\n  private editor: Editor & { $blockScrolling?: number; };\r\n  private ace: Ace;\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        ace: ['https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11'],\r\n      },\r\n    });\r\n\r\n    window.require(['ace/ace'], (ace: Ace) => {\r\n      this.ace = ace;\r\n\r\n      window.require(['ace/ext-modelist'], () => {\r\n        window.require(['ace/ext-language_tools'], () => {\r\n          window.require(['ace/snippets'], () => {\r\n            this.aceLoaded();\r\n          });\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const filename = changes.filename?.currentValue != null ? this.filename : undefined;\r\n    const snippets = changes.snippets?.currentValue != null ? this.snippets : undefined;\r\n    this.updateValues(filename, snippets);\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      const snippetManager = this.ace.require('ace/snippets').snippetManager;\r\n      snippetManager.insertSnippet(this.editor, snippet);\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  writeValue(value: string): void {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor = this.ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      this.editor.$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n      // wait for Angular to update DOM to be able to get proper size of the container\r\n      setTimeout(() => { this.editor.resize(); }, 50);\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange(): void {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred(): void {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: Snippet[]): void {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = this.ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = this.ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\n\r\nexport interface Tab {\r\n  viewKey: string;\r\n  label: string;\r\n  isActive: boolean;\r\n  isModified: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface CodeEditorTemplateVars {\r\n  activeView: string;\r\n  tabs: Tab[];\r\n  viewKey: string;\r\n  view: SourceView;\r\n  templates: string[];\r\n  explorerSnipps: SnippetsSets;\r\n  editorSnipps: Snippet[];\r\n}\r\n\r\nexport const Explorers = {\r\n  Templates: 'Templates',\r\n  Snippets: 'Snippets',\r\n} as const;\r\n\r\nexport type ExplorerOption = typeof Explorers[keyof typeof Explorers];\r\n\r\nexport const Editors = {\r\n  Ace: 'Ace',\r\n  Monaco: 'Monaco',\r\n} as const;\r\n\r\nexport type EditorOption = typeof Editors[keyof typeof Editors];\r\n\r\nexport interface ViewInfo {\r\n  /** ViewKey is templateId or path */\r\n  viewKey: string;\r\n  view?: SourceView;\r\n  explorerSnipps?: SnippetsSets;\r\n  editorSnipps?: Snippet[];\r\n  savedCode?: string;\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig = { duration: this.defaultDuration }) {\r\n    const triggered$ = new Subject<void>();\r\n    this.messageQueue.push({ message, action, config, triggered$ });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered$.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered$.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered$.next();\r\n    });\r\n  }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered$.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig;\r\n  triggered$: Subject<void>;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFile, webApiAppFileCreate, webApiAppFilesAll } from '../../../../../edit/shared/services';\r\nimport { keyIsShared } from '../../shared/constants/session.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  private isShared = sessionStorage.getItem(keyIsShared) ?? false.toString();\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** ViewKey is templateId or path */\r\n  get(viewKey: string): Observable<SourceView> {\r\n    return this.http.get<SourceView>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(viewKey) }\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLocaleLowerCase() === 'auto') {\r\n          switch (view.Extension.toLocaleLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** ViewKey is templateId or path */\r\n  save(viewKey: string, view: SourceView): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), view, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(viewKey) },\r\n    });\r\n  }\r\n\r\n  getTemplates(): Observable<string[]> {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, withSubfolders: 'true' },\r\n    });\r\n  }\r\n\r\n  createTemplate(name: string): Observable<boolean> {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, purpose: 'auto', path: name },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(viewKey: string) {\r\n    if (parseInt(viewKey, 10).toString() === viewKey) {\r\n      return { templateId: viewKey };\r\n    } else {\r\n      return { path: viewKey };\r\n    }\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { MoreSnippet, SetSnippet, SetSnippetLink, Snippet, SnippetsSets, SnippetsSubSubSets } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext, private translate: TranslateService) { }\r\n\r\n  getSnippets(view: SourceView): Observable<{ list: Snippet[]; sets: SnippetsSets; }> {\r\n    return this.http.get<{ snippets: Snippet[] }>('../ng-assets/snippets.json.js').pipe(\r\n      map(res => {\r\n        const relevant = this.filterAwayNotNeededSnippetsList(res.snippets, view);\r\n        const standardAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n        const sets = this.initSnippetsWithConfig(standardAndInputSnips.standardArray, view, standardAndInputSnips.inputTypeSnippets);\r\n        const sorted: { list: Snippet[]; sets: SnippetsSets; } = {\r\n          list: standardAndInputSnips.standardArray,\r\n          sets\r\n        };\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** Scan the list for sets starting with @ or [ and filter if not needed right now */\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView): Snippet[] {\r\n    const keyPrefixes = ['@', '['];\r\n    const keyPrefixIndex = (v: SourceView) => (v.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n    const newList: Snippet[] = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]): { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    const extracted: { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } = {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n    return extracted;\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]): Record<string, Snippet[]> {\r\n    const inputTypeList: Record<string, Snippet[]> = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(\r\n    standardArray: Snippet[],\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): SnippetsSets {\r\n    const sets = this.makeTree(standardArray);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(\r\n        sets.Content.Fields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContent,\r\n        'Content',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(\r\n          sets.List.Fields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeList,\r\n          'Header',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  /** Convert the list into a tree with set/subset/item */\r\n  private makeTree(list: Snippet[]): SnippetsSets {\r\n    const tree: SnippetsSets = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted: SetSnippet = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      (tree[o.set][o.subset] as SetSnippet[]).push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: string, subset: string, snip: string, addition: string): string {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: string): SetSnippetLink[] {\r\n    if (!linksString) { return null; }\r\n\r\n    const links: SetSnippetLink[] = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        const link: SetSnippetLink = {\r\n          name: pair[0].trim(),\r\n          url: pair[1].trim() + ':' + pair[2].trim(),\r\n        };\r\n        links.push(link);\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  /** spm TODO: this happens after snippets are calculated for the first time. Needs to be fixed */\r\n  private loadContentType(\r\n    target: SnippetsSubSubSets,\r\n    type: string,\r\n    prefix: string,\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    this.getFields(templateConfiguration.AppId, type).subscribe(fields => {\r\n      // first add common items if the content-type actually exists\r\n      for (const field of fields) {\r\n        const fieldname = field.StaticName;\r\n        target[fieldname] = {\r\n          key: fieldname,\r\n          label: fieldname,\r\n          snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n          help: field.Metadata.merged.Notes || ' (' + field.Type.toLowerCase() + ') '\r\n        };\r\n        // try to add generic snippets specific to this input-type\r\n        const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n        this.attachSnippets(target, prefix, fieldname, field.InputType, snipDefaults, inputTypeSnippets);\r\n      }\r\n\r\n      if (fields.length) {\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < std.length; i++) {\r\n          target[std[i]] = {\r\n            key: std[i],\r\n            label: std[i],\r\n            snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n            help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private valuePlaceholder(obj: string, val: string, templateConfiguration: SourceView): string {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string): Observable<Field[]> {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    }).pipe(\r\n      map(fields => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) { continue; }\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n        return fields;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private attachSnippets(\r\n    target: SnippetsSubSubSets,\r\n    prefix: string,\r\n    fieldname: string,\r\n    inputType: string,\r\n    snipDefaults: SetSnippet,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) { // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) { return; }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = {};\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true,\r\n        } as MoreSnippet);\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: string, objName: string, fieldName: string): string {\r\n    snip = snip\r\n      .replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean): SafeStyle {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" [tippy]=\"item.name\" tippyShowDelay=\"750\"\r\n        (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" [tippy]=\"item.name\" tippyShowDelay=\"750\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" tippy=\"Create file in this folder\" tippyShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button tippy=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTree } from './code-templates.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n})\r\nexport class CodeTemplatesComponent implements OnChanges {\r\n  @Input() filename: string;\r\n  @Input() templates: string[];\r\n  @Output() openView: EventEmitter<string> = new EventEmitter();\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.templates != null) {\r\n      this.tree = calculateTree(this.templates ?? []);\r\n    }\r\n    if (changes.filename != null) {\r\n      const previousFilename = changes.filename.previousValue;\r\n      if (previousFilename) {\r\n        this.toggleItem(previousFilename);\r\n      }\r\n      if (this.filename) {\r\n        this.showFileInTree(this.filename);\r\n      }\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string): void {\r\n    this.openView.emit(path);\r\n  }\r\n\r\n  toggleItem(path: string): void {\r\n    GeneralHelpers.toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string): void {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string): void {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Record<string, any> | Record<string, any>[]): Record<string, any>[] {\r\n    if (obj == null) { return; }\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [tippy]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      tippyShowDelay=\"750\" (click)=\"toggleSection(section.key)\">\r\n      <mat-icon>\r\n        {{ toggledSections.includes(section.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n      </mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section.key)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [tippy]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\" tippyShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder.key)\">\r\n          <mat-icon>\r\n            {{ toggledFolders.includes(folder.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder.key)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [tippy]=\"snippet.snip\" tippyShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" tippy=\"Show More\" tippyShowDelay=\"750\" (click)=\"toggleMore(snippet.key)\">\r\n                {{ toggledMores.includes(snippet.key) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet.key)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet.key)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet.key)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [tippy]=\"more.snip\" tippyShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more.key)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more.key)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { SnippetsSets } from '../models/snippet.model';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n})\r\nexport class CodeSnippetsComponent {\r\n  @Input() snippets: SnippetsSets;\r\n  @Output() insertSnippet: EventEmitter<string> = new EventEmitter();\r\n  toggledSections: string[] = [];\r\n  toggledFolders: string[] = [];\r\n  toggledInfos: string[] = [];\r\n  toggledMores: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  addSnippet(snippet: string): void {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledMores);\r\n  }\r\n}\r\n","<div class=\"editor-root\" appToggleDebug\r\n  [ngClass]=\"{ 'sxc-dark': activeEditor === Editors.Monaco && monacoOptions.theme === '2sxc-dark' }\"\r\n  *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Templates }\" tippy=\"Templates\"\r\n      (click)=\"toggleExplorer(Explorers.Templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Snippets }\" tippy=\"Snippets\"\r\n      (click)=\"toggleExplorer(Explorers.Snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeEditor === Editors.Monaco }\" tippy=\"Toggle Monaco\"\r\n      (click)=\"toggleEditor()\">\r\n      <mat-icon>highlight</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== Explorers.Templates\" [filename]=\"data.view?.FileName\"\r\n    [templates]=\"data.templates\" (openView)=\"openView($event)\" (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== Explorers.Snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"insertSnippet($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"data.view && activeEditor === Editors.Ace\" [filename]=\"data.view.FileName\"\r\n    [ngModel]=\"data.view.Code\" (ngModelChange)=\"codeChanged($event, data.viewKey)\" [snippets]=\"data.editorSnipps\">\r\n  </app-ace-editor>\r\n\r\n  <div class=\"editor-group\" *ngIf=\"activeEditor === Editors.Monaco\">\r\n    <div class=\"tabs-container fancy-scrollbar-dark\" *ngIf=\"data.tabs.length > 0\">\r\n      <div class=\"tab\" *ngFor=\"let tab of data.tabs\" [ngClass]=\"{\r\n        'active': tab.isActive,\r\n        'modified': tab.isModified,\r\n        'loading': tab.isLoading\r\n      }\" (click)=\"openView(tab.viewKey)\">\r\n        <div class=\"tab-label-container\" [tippy]=\"tab.label\" tippyShowDelay=\"750\">\r\n          <span class=\"tab-label\">{{ tab.label }}</span>\r\n        </div>\r\n        <div class=\"tab-actions-container\">\r\n          <mat-icon *ngIf=\"tab.isModified\" class=\"tab-action icon-modified\" svgIcon=\"circle\"></mat-icon>\r\n          <mat-spinner *ngIf=\"tab.isLoading\" class=\"spinner\" mode=\"indeterminate\" diameter=\"14\" color=\"white\">\r\n          </mat-spinner>\r\n          <mat-icon class=\"tab-action icon-close\" tippy=\"Close\" appClickStopPropagation\r\n            (click)=\"closeEditor(tab.viewKey)\">\r\n            close\r\n          </mat-icon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <app-monaco-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [value]=\"data.view.Code\"\r\n      (valueChanged)=\"codeChanged($event, data.viewKey)\" [options]=\"monacoOptions\" [snippets]=\"data.editorSnipps\"\r\n      [autoFocus]=\"true\">\r\n    </app-monaco-editor>\r\n  </div>\r\n\r\n  <button mat-fab mat-elevation-z24 tippy=\"Click to save or CTRL + S\" *ngIf=\"data.activeView\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Observable, of, Subscription } from 'rxjs';\r\nimport { map, mergeMap, share } from 'rxjs/operators';\r\nimport { SanitizeHelper } from '../../../../edit/shared/helpers';\r\nimport { MonacoEditorComponent } from '../monaco-editor';\r\nimport { defaultControllerName, defaultTemplateName } from '../shared/constants/file-names.constants';\r\nimport { Context } from '../shared/services/context';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorTemplateVars, EditorOption, Editors, ExplorerOption, Explorers, Tab, ViewInfo } from './code-editor.models';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AceEditorComponent) private aceEditorRef: AceEditorComponent;\r\n  @ViewChild(MonacoEditorComponent) private monacoEditorRef: MonacoEditorComponent;\r\n\r\n  Explorers = Explorers;\r\n  activeExplorer: ExplorerOption = Explorers.Templates;\r\n  Editors = Editors;\r\n  activeEditor: EditorOption = Editors.Monaco;\r\n  monacoOptions = {\r\n    theme: '2sxc-dark',\r\n    tabSize: 2,\r\n  };\r\n  templateVars$: Observable<CodeEditorTemplateVars>;\r\n\r\n  private templates$: BehaviorSubject<string[]>;\r\n  private activeView$: BehaviorSubject<string>;\r\n  private openViews$: BehaviorSubject<string[]>;\r\n  private viewInfos$: BehaviorSubject<ViewInfo[]>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n  ) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.templates$ = new BehaviorSubject<string[]>([]);\r\n    const initialViewKey = this.route.snapshot.paramMap.get('codeItemKey');\r\n    this.activeView$ = new BehaviorSubject(initialViewKey);\r\n    this.openViews$ = new BehaviorSubject([initialViewKey]);\r\n    this.viewInfos$ = new BehaviorSubject<ViewInfo[]>([]);\r\n\r\n    this.attachListeners();\r\n\r\n    this.sourceService.getTemplates().subscribe(templates => {\r\n      this.templates$.next(templates);\r\n    });\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.templates$, this.openViews$]).subscribe(([templates, openViews]) => {\r\n        if (templates.length === 0) { return; }\r\n\r\n        let viewInfos = this.viewInfos$.value;\r\n        const notLoaded = openViews.filter(viewKey => !viewInfos.some(v => v.viewKey === viewKey));\r\n        if (notLoaded.length === 0) { return; }\r\n\r\n        forkJoin(\r\n          notLoaded.map(viewKey => {\r\n            // set viewKey in viewInfos to mark that view is being fetched\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n            };\r\n            viewInfos = [...viewInfos, newViewInfo];\r\n\r\n            const view$ = this.sourceService.get(viewKey).pipe(share());\r\n            const snippets$ = view$.pipe(mergeMap(view => this.snippetsService.getSnippets(view)));\r\n            return forkJoin([of(viewKey), view$, snippets$]);\r\n          })\r\n        ).subscribe(results => {\r\n          let viewInfos1 = this.viewInfos$.value;\r\n\r\n          results.forEach(([viewKey, view, snippets]) => {\r\n            const selectedIndex = viewInfos1.findIndex(v => v.viewKey === viewKey);\r\n            if (selectedIndex < 0) { return; }\r\n\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n              view,\r\n              explorerSnipps: snippets.sets,\r\n              editorSnipps: snippets.list,\r\n              savedCode: view.Code,\r\n            };\r\n            viewInfos1 = [...viewInfos1.slice(0, selectedIndex), newViewInfo, ...viewInfos1.slice(selectedIndex + 1)];\r\n            this.showCodeAndEditionWarnings(view, templates);\r\n          });\r\n\r\n          this.viewInfos$.next(viewInfos1);\r\n        });\r\n\r\n        this.viewInfos$.next(viewInfos);\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.activeView$, this.viewInfos$]).subscribe(([activeView, viewInfos]) => {\r\n        const active = viewInfos.find(v => v.viewKey === activeView);\r\n        const defaultTitle = 'Code Editor';\r\n        const newTitle = active == null ? defaultTitle : `${active.view?.FileName} - ${defaultTitle}`;\r\n        const oldTitle = this.titleService.getTitle();\r\n        if (newTitle !== oldTitle) {\r\n          this.titleService.setTitle(newTitle);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([this.templates$, this.activeView$, this.openViews$, this.viewInfos$]).pipe(\r\n      map(([templates, activeView, openViews, viewInfos]) => {\r\n        const tabs = openViews.map(viewKey => {\r\n          const viewInfo = viewInfos.find(v => v.viewKey === viewKey);\r\n          const label: Tab = {\r\n            viewKey,\r\n            label: viewInfo?.view?.FileName ?? viewKey,\r\n            isActive: viewKey === activeView,\r\n            isModified: viewInfo?.view?.Code !== viewInfo?.savedCode,\r\n            isLoading: viewInfo?.view == null,\r\n          };\r\n          return label;\r\n        });\r\n        const activeViewInfo = viewInfos.find(v => v.viewKey === activeView);\r\n\r\n        const templateVars: CodeEditorTemplateVars = {\r\n          activeView,\r\n          tabs,\r\n          viewKey: activeViewInfo?.viewKey,\r\n          view: activeViewInfo?.view,\r\n          templates,\r\n          explorerSnipps: activeViewInfo?.explorerSnipps,\r\n          editorSnipps: activeViewInfo?.editorSnipps,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.templates$.complete();\r\n    this.activeView$.complete();\r\n    this.openViews$.complete();\r\n    this.viewInfos$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: ExplorerOption): void {\r\n    this.activeExplorer = (this.activeExplorer !== explorer) ? explorer : null;\r\n  }\r\n\r\n  toggleEditor(): void {\r\n    switch (this.activeEditor) {\r\n      case Editors.Ace:\r\n        this.activeEditor = Editors.Monaco;\r\n        break;\r\n      case Editors.Monaco:\r\n        this.activeEditor = Editors.Ace;\r\n        break;\r\n      default:\r\n        this.activeEditor = Editors.Monaco;\r\n    }\r\n  }\r\n\r\n  createTemplate(folder?: string): void {\r\n    let question = 'File name:';\r\n    let suggestion = defaultTemplateName;\r\n    if (folder === 'api' || folder?.startsWith('api/')) {\r\n      question = 'Controller name:';\r\n      suggestion = defaultControllerName;\r\n    }\r\n    let name = prompt(question, suggestion);\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = SanitizeHelper.sanitizePath(name);\r\n    if (folder != null) {\r\n      name = `${folder}/${name}`;\r\n    }\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates$.next(files);\r\n      });\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    if (this.aceEditorRef != null) {\r\n      this.aceEditorRef.insertSnippet(snippet);\r\n    } else if (this.monacoEditorRef != null) {\r\n      this.monacoEditorRef.insertSnippet(snippet);\r\n    }\r\n  }\r\n\r\n  codeChanged(code: string, viewKey: string): void {\r\n    let viewInfos = this.viewInfos$.value;\r\n    const selectedIndex = viewInfos.findIndex(v => v.viewKey === viewKey);\r\n    const selectedViewInfo = viewInfos[selectedIndex];\r\n    const newViewInfo: ViewInfo = {\r\n      ...selectedViewInfo,\r\n      view: {\r\n        ...selectedViewInfo.view,\r\n        Code: code,\r\n      },\r\n    };\r\n    viewInfos = [...viewInfos.slice(0, selectedIndex), newViewInfo, ...viewInfos.slice(selectedIndex + 1)];\r\n    this.viewInfos$.next(viewInfos);\r\n  }\r\n\r\n  openView(viewKey: string): void {\r\n    // fix viewKey because it can be a templateId or a path, and file might already be open\r\n    viewKey = this.viewInfos$.value.find(v => v.viewKey !== viewKey && v.view?.FileName === viewKey)?.viewKey ?? viewKey;\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (oldActiveView !== viewKey) {\r\n      this.activeView$.next(viewKey);\r\n    }\r\n    const oldOpenViews = this.openViews$.value;\r\n    if (!oldOpenViews.includes(viewKey)) {\r\n      const newOpenViews = [...oldOpenViews, viewKey];\r\n      this.openViews$.next(newOpenViews);\r\n    }\r\n  }\r\n\r\n  closeEditor(viewKey: string): void {\r\n    const oldOpenViews = this.openViews$.value;\r\n    const newOpenViews = oldOpenViews.filter(key => key !== viewKey);\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (oldActiveView === viewKey) {\r\n      const newActiveView = oldOpenViews[oldOpenViews.indexOf(oldActiveView) - 1] ?? newOpenViews[0];\r\n      this.activeView$.next(newActiveView);\r\n    }\r\n\r\n    this.openViews$.next(newOpenViews);\r\n  }\r\n\r\n  save(viewKey?: string): void {\r\n    viewKey ??= this.activeView$.value;\r\n    const viewInfo = this.viewInfos$.value.find(v => v.viewKey === viewKey);\r\n    if (viewInfo?.view == null) { return; }\r\n\r\n    this.snackBar.open('Saving...');\r\n    const codeToSave = viewInfo.view.Code;\r\n    this.sourceService.save(viewKey, viewInfo.view).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n\r\n        let newViewInfos = [...this.viewInfos$.value];\r\n        const selectedIndex = newViewInfos.findIndex(v => v.viewKey === viewKey);\r\n        if (selectedIndex < 0) { return; }\r\n\r\n        const selectedViewInfo = newViewInfos[selectedIndex];\r\n        const newViewInfo: ViewInfo = {\r\n          ...selectedViewInfo,\r\n          savedCode: codeToSave,\r\n        };\r\n        newViewInfos = [...newViewInfos.slice(0, selectedIndex), newViewInfo, ...newViewInfos.slice(selectedIndex + 1)];\r\n        this.viewInfos$.next(newViewInfos);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]): void {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`${view.FileName} also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(() => {\r\n          this.openView(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of ${view.FileName}. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(() => {\r\n          window.open('http://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<BeforeUnloadEvent>(window, 'beforeunload').subscribe(event => {\r\n          const allSaved = !this.viewInfos$.value.some(v => v.view != null && v.view.Code !== v.savedCode);\r\n          if (allSaved) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').subscribe(event => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { MonacoEditorModule } from '../monaco-editor';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n    MonacoEditorModule,\r\n    MatProgressSpinnerModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ],\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}