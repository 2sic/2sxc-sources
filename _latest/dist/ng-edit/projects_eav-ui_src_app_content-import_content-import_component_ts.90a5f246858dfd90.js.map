{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.90a5f246858dfd90.js","mappings":"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","names":["AppDialogConfigService","ServiceBase","constructor","http","context","globalConfigService","featuresService","super","EavLogger","this","dialogSettings$","log","a","svcId","loadFromService","ngOnDestroy","destroy","getCurrent$","appId","getShared$","getSitePrimaryApp$","pipe","map","dc","Context","Site","PrimaryApp","getGlobalPrimaryApp$","System","getDialogSettings","shareReplay","refCount","reqBy","get","params","toString","dlgSettings","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ContentImportService","evaluateContent","formValues","from","toBase64","switchMap","fileBase64","requestData","AppId","DefaultLanguage","defaultLanguage","ContentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","webApiEntityRoot","result","Success","Errors","Detail","importContent","core","_r3","fileInput_r4","click","$event","ctx_r1","fileChange","closeDialog","vm_r6","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r7","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r5","back","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Conditional_0_Template","_r8","ContentImportComponent_Conditional_0_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_0_Conditional_10_Case_3_Template","tmp_3_0","viewStateSelected","_r1","filesDropped","ContentImportComponent_Conditional_0_Conditional_10_Template","Name","ContentImportComponent","dialogData","dialogRef","route","contentImportService","appDialogConfigService","contentTypesService","hostClass","contentType$","BehaviorSubject","loading$","viewStates","waiting","default","evaluated","imported","viewStateSelected$","evaluationResult$","importResult$","viewModel$","combineLatest","loading","contentTypeStaticName","snapshot","paramMap","ngOnInit","next","forkJoin","subscribe","dialogSettings","Primary","complete","close","event","target","MAT_DIALOG_DATA","i5","VBU","selectors","hostVars","hostBindings","rf","ctx","decls","vars","consts","template","ContentImportComponent_Conditional_0_Template","tmp_0_0","FormsModule","i6","MatButtonModule","i7","MatRadioModule","i8","MatDialogActions","AsyncPipe","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","elementRef","zone","snackBar","markStyle","allowedFileTypes","EventEmitter","dropAreaClass","dragClass","timeouts","element","nativeElement","markStyleClass","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","readAsText"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { ServiceBase } from '../../shared/services/service-base';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { DialogContextSiteApp } from '../../shared/models/dialog-context.models';\r\n\r\nconst logThis = false;\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService extends ServiceBase implements OnDestroy {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    // private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    super(new EavLogger('AppDialogConfigService', logThis));\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions in dialogSettings$ are killed\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.getShared$(appId);\r\n  }\r\n\r\n    // new 2dg\r\n    getSitePrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.Site.PrimaryApp));\r\n    }\r\n\r\n    getGlobalPrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.System.PrimaryApp));\r\n    }\r\n\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    // if (!this.dialogSettings$[appIdToUse])\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$').pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\" appDragAndDrop\r\n    [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">{{ vm.contentType?.Name }} Import Data</div>\r\n    </div>\r\n    <div class=\"eav-dialog-description\">\r\n      <p>\r\n        This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n        importing, and that you created the import-file using the template provided by the Export. Please visit\r\n        <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n      </p>\r\n    </div>\r\n    @if (formValues != null) {\r\n      @switch (vm.viewStateSelected) {\r\n        <!-- FORM -->\r\n        @case (1) {\r\n          <form #ngForm=\"ngForm\">\r\n            <div class=\"eav-dialog-content\">\r\n              <div>\r\n                <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n                  <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n                </button>\r\n                <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n              </div>\r\n              <div>\r\n                <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n                <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\">\r\n                  <mat-radio-button value=\"Keep\">\r\n                    Import links as written in the file (for example /Portals/...)\r\n                  </mat-radio-button>\r\n                  <mat-radio-button value=\"Resolve\">\r\n                    Try to resolve paths to references\r\n                  </mat-radio-button>\r\n                </mat-radio-group>\r\n              </div>\r\n              <div>\r\n                <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n                <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n                  <mat-radio-button value=\"None\">\r\n                    Keep all entities not found in import\r\n                  </mat-radio-button>\r\n                  <mat-radio-button value=\"All\">\r\n                    Remove all entities not found in import\r\n                  </mat-radio-button>\r\n                </mat-radio-group>\r\n              </div>\r\n              <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n            </div>\r\n            <mat-dialog-actions align=\"end\">\r\n              <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n              <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n                (click)=\"evaluateContent()\">\r\n                Preview Import\r\n              </button>\r\n            </mat-dialog-actions>\r\n          </form>\r\n        }\r\n        <!-- END FORM -->\r\n        <!-- WAITING -->\r\n        @case (0) {\r\n          <div class=\"eav-dialog-content\">\r\n            <p>Please wait while processing...</p>\r\n          </div>\r\n        }\r\n        <!-- END WAITING -->\r\n        <!-- EVALUATION RESULT -->\r\n        @case (2) {\r\n          @if (vm.evaluationResult) {\r\n            <!-- DETAILS / STATISTICS -->\r\n            @if (vm.evaluationResult.Success) {\r\n              <div class=\"eav-dialog-content\">\r\n                <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n                <p class=\"eav-evaluation__title\">File contains:</p>\r\n                <ul class=\"eav-evaluation__content\">\r\n                  <li>{{ vm.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n                  <li>{{ vm.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n                  <li>{{ vm.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n                  {{ vm.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n                </ul>\r\n                <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n                <ul class=\"eav-evaluation__content\">\r\n                  <li>Create {{ vm.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n                  <li>Update {{ vm.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n                  <li>Delete {{ vm.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n                  <li>Ignore {{ vm.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n                  {{ vm.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n                </ul>\r\n                <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n              </div>\r\n            }\r\n            <!-- END DETAILS / STATISTICS -->\r\n            <!-- ERRORS -->\r\n            @if (!vm.evaluationResult.Success) {\r\n              <div class=\"eav-dialog-content\">\r\n                <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n                <ul class=\"eav-evaluation__content\">\r\n                  @for (error of vm.evaluationResult.Errors; track error) {\r\n                    <li>\r\n                      <div>{{ errors[error.ErrorCode] }}</div>\r\n                      @if (error.ErrorDetail) {\r\n                        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n                      }\r\n                      @if (error.LineNumber) {\r\n                        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n                      }\r\n                      @if (error.LineDetail) {\r\n                        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n                      }\r\n                    </li>\r\n                  }\r\n                </ul>\r\n              </div>\r\n            }\r\n            <!-- END ERRORS -->\r\n            <mat-dialog-actions align=\"end\">\r\n              <button mat-raised-button (click)=\"back()\">Back</button>\r\n              <button mat-raised-button color=\"accent\" [disabled]=\"!vm.evaluationResult.Success\" (click)=\"importContent()\">\r\n                Import\r\n              </button>\r\n            </mat-dialog-actions>\r\n          }\r\n        }\r\n        <!-- END EVALUATION RESULT -->\r\n        <!-- IMPORT RESULT -->\r\n        @case (3) {\r\n          @if (vm.importResult) {\r\n            <div class=\"eav-dialog-content\">\r\n              @if (vm.importResult.Success) {\r\n                <p>Import done.</p>\r\n              }\r\n              @if (!vm.importResult.Success) {\r\n                <p>Import failed.</p>\r\n              }\r\n            </div>\r\n          }\r\n          <mat-dialog-actions align=\"end\">\r\n            <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n          </mat-dialog-actions>\r\n        }\r\n        <!-- END IMPORT RESULT -->\r\n      }\r\n    }\r\n  </div>\r\n}\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, map } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    DragAndDropDirective,\r\n  ],\r\n  providers: [\r\n    ContentImportService,\r\n    ContentTypesService,\r\n    AppDialogConfigService,\r\n  ],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  viewModel$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({ selector: '[appDragAndDrop]', standalone: true })\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"x_google_ignoreList":[]}