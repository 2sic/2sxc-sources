{"version":3,"file":"default-node_modules_angular_material_fesm2022_input_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/text-field.mjs","./node_modules/@angular/material/fesm2022/input.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/platform';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Output, booleanAttribute, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/** Options to pass to the animationstart listener. */\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            },\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, deps: [{ token: i1.Platform }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: AutofillMonitor, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1.Platform }, { type: i0.NgZone }] });\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAutofill, deps: [{ token: i0.ElementRef }, { token: AutofillMonitor }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkAutofill, isStandalone: true, selector: \"[cdkAutofill]\", outputs: { cdkAutofill: \"cdkAutofill\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkAutofill, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkAutofill]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: AutofillMonitor }], propDecorators: { cdkAutofill: [{\n                type: Output\n            }] } });\n\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    /** Minimum amount of rows in the textarea. */\n    get minRows() {\n        return this._minRows;\n    }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() {\n        return this._maxRows;\n    }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() {\n        return this._enabled;\n    }\n    set enabled(value) {\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    get placeholder() {\n        return this._textareaElement.placeholder;\n    }\n    set placeholder(value) {\n        this._cachedPlaceholderHeight = undefined;\n        if (value) {\n            this._textareaElement.setAttribute('placeholder', value);\n        }\n        else {\n            this._textareaElement.removeAttribute('placeholder');\n        }\n        this._cacheTextareaPlaceholderHeight();\n    }\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._isViewInited = false;\n        /** Handles `focus` and `blur` events. */\n        this._handleFocusEvent = (event) => {\n            this._hasFocus = event.type === 'focus';\n        };\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ? `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ? `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n                this._textareaElement.addEventListener('focus', this._handleFocusEvent);\n                this._textareaElement.addEventListener('blur', this._handleFocusEvent);\n            });\n            this._isViewInited = true;\n            this.resizeToFitContent(true);\n        }\n    }\n    ngOnDestroy() {\n        this._textareaElement.removeEventListener('focus', this._handleFocusEvent);\n        this._textareaElement.removeEventListener('blur', this._handleFocusEvent);\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        textareaClone.remove();\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    _measureScrollHeight() {\n        const element = this._textareaElement;\n        const previousMargin = element.style.marginBottom || '';\n        const isFirefox = this._platform.FIREFOX;\n        const needsMarginFiller = isFirefox && this._hasFocus;\n        const measuringClass = isFirefox\n            ? 'cdk-textarea-autosize-measuring-firefox'\n            : 'cdk-textarea-autosize-measuring';\n        // In some cases the page might move around while we're measuring the `textarea` on Firefox. We\n        // work around it by assigning a temporary margin with the same height as the `textarea` so that\n        // it occupies the same amount of space. See #23233.\n        if (needsMarginFiller) {\n            element.style.marginBottom = `${element.clientHeight}px`;\n        }\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        element.classList.add(measuringClass);\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const scrollHeight = element.scrollHeight - 4;\n        element.classList.remove(measuringClass);\n        if (needsMarginFiller) {\n            element.style.marginBottom = previousMargin;\n        }\n        return scrollHeight;\n    }\n    _cacheTextareaPlaceholderHeight() {\n        if (!this._isViewInited || this._cachedPlaceholderHeight != undefined) {\n            return;\n        }\n        if (!this.placeholder) {\n            this._cachedPlaceholderHeight = 0;\n            return;\n        }\n        const value = this._textareaElement.value;\n        this._textareaElement.value = this._textareaElement.placeholder;\n        this._cachedPlaceholderHeight = this._measureScrollHeight();\n        this._textareaElement.value = value;\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        this._cacheTextareaPlaceholderHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const scrollHeight = this._measureScrollHeight();\n        const height = Math.max(scrollHeight, this._cachedPlaceholderHeight || 0);\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && this._hasFocus) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextareaAutosize, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i0.NgZone }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkTextareaAutosize, isStandalone: true, selector: \"textarea[cdkTextareaAutosize]\", inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\", booleanAttribute], placeholder: \"placeholder\" }, host: { attributes: { \"rows\": \"1\" }, listeners: { \"input\": \"_noopInputHandler()\" }, classAttribute: \"cdk-textarea-autosize\" }, exportAs: [\"cdkTextareaAutosize\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextareaAutosize, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'textarea[cdkTextareaAutosize]',\n                    exportAs: 'cdkTextareaAutosize',\n                    host: {\n                        'class': 'cdk-textarea-autosize',\n                        // Textarea elements that have the directive applied should have a single row by default.\n                        // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                        'rows': '1',\n                        '(input)': '_noopInputHandler()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }], propDecorators: { minRows: [{\n                type: Input,\n                args: ['cdkAutosizeMinRows']\n            }], maxRows: [{\n                type: Input,\n                args: ['cdkAutosizeMaxRows']\n            }], enabled: [{\n                type: Input,\n                args: [{ alias: 'cdkTextareaAutosize', transform: booleanAttribute }]\n            }], placeholder: [{\n                type: Input\n            }] } });\n\nclass TextFieldModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, imports: [CdkAutofill, CdkTextareaAutosize], exports: [CdkAutofill, CdkTextareaAutosize] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: TextFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkAutofill, CdkTextareaAutosize],\n                    exports: [CdkAutofill, CdkTextareaAutosize],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { getSupportedInputTypes } from '@angular/cdk/platform';\nimport * as i4 from '@angular/cdk/text-field';\nimport { TextFieldModule } from '@angular/cdk/text-field';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, Optional, Self, Inject, Input, NgModule } from '@angular/core';\nimport * as i2 from '@angular/forms';\nimport { Validators } from '@angular/forms';\nimport * as i3 from '@angular/material/core';\nimport { _ErrorStateTracker, MatCommonModule } from '@angular/material/core';\nimport * as i5 from '@angular/material/form-field';\nimport { MAT_FORM_FIELD, MatFormFieldControl, MatFormFieldModule } from '@angular/material/form-field';\nexport { MatError, MatFormField, MatHint, MatLabel, MatPrefix, MatSuffix } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit',\n];\nlet nextUniqueId = 0;\nclass MatInput {\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() {\n        return this._id;\n    }\n    set id(value) {\n        this._id = value || this._uid;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() {\n        return this._required ?? this.ngControl?.control?.hasValidator(Validators.required) ?? false;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    /** Input type of the element. */\n    get type() {\n        return this._type;\n    }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n        this._ensureWheelDefaultBehavior();\n    }\n    /** An object used to control when error messages are shown. */\n    get errorStateMatcher() {\n        return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n        this._errorStateTracker.matcher = value;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() {\n        return this._inputValueAccessor.value;\n    }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() {\n        return this._readonly;\n    }\n    set readonly(value) {\n        this._readonly = coerceBooleanProperty(value);\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n        return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n        this._errorStateTracker.errorState = value;\n    }\n    constructor(_elementRef, _platform, ngControl, parentForm, parentFormGroup, defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, _ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form field for determining whether the placeholder has been promoted.\n    _formField) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._ngZone = _ngZone;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        this._webkitBlinkWheelListenerAttached = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week',\n        ].filter(t => getSupportedInputTypes().has(t));\n        this._iOSKeyupListener = (event) => {\n            const el = event.target;\n            // Note: We specifically check for 0, rather than `!el.selectionStart`, because the two\n            // indicate different things. If the value is 0, it means that the caret is at the start\n            // of the input, whereas a value of `null` means that the input doesn't support\n            // manipulating the selection range. Inputs that don't support setting the selection range\n            // will throw an error so we want to avoid calling `setSelectionRange` on them. See:\n            // https://html.spec.whatwg.org/multipage/input.html#do-not-apply\n            if (!el.value && el.selectionStart === 0 && el.selectionEnd === 0) {\n                // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                // `1, 1` fixes it for the first time that you type text and\n                // then hold delete. Toggling to `1, 1` and then back to\n                // `0, 0` seems to completely fix it.\n                el.setSelectionRange(1, 1);\n                el.setSelectionRange(0, 0);\n            }\n        };\n        this._webkitBlinkWheelListener = () => {\n            // This is a noop function and is used to enable mouse wheel input\n            // on number inputs\n            // on blink and webkit browsers.\n        };\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            _ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', this._iOSKeyupListener);\n            });\n        }\n        this._errorStateTracker = new _ErrorStateTracker(defaultErrorStateMatcher, ngControl, parentFormGroup, parentForm, this.stateChanges);\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        this._isInFormField = !!_formField;\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple\n                ? 'mat-native-select-multiple'\n                : 'mat-native-select';\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n        if (this._platform.IOS) {\n            this._elementRef.nativeElement.removeEventListener('keyup', this._iOSKeyupListener);\n        }\n        if (this._webkitBlinkWheelListenerAttached) {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n            // Since the input isn't a `ControlValueAccessor`, we don't have a good way of knowing when\n            // the disabled state has changed. We can't use the `ngControl.statusChanges`, because it\n            // won't fire if the input is disabled with `emitEvents = false`, despite the input becoming\n            // disabled.\n            if (this.ngControl.disabled !== null && this.ngControl.disabled !== this.disabled) {\n                this.disabled = this.ngControl.disabled;\n                this.stateChanges.next();\n            }\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n        this._errorStateTracker.updateErrorState();\n    }\n    /** Callback for the cases where the focused state of the input changes. */\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        const placeholder = this._getPlaceholder();\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder\n                ? element.setAttribute('placeholder', placeholder)\n                : element.removeAttribute('placeholder');\n        }\n    }\n    /** Gets the current placeholder of the form field. */\n    _getPlaceholder() {\n        return this.placeholder || null;\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return (!this._isNeverEmpty() &&\n            !this._elementRef.nativeElement.value &&\n            !this._isBadInput() &&\n            !this.autofilled);\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return (this.focused ||\n                selectElement.multiple ||\n                !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label));\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n    /** Whether the form control is a native select that is displayed inline. */\n    _isInlineSelect() {\n        const element = this._elementRef.nativeElement;\n        return this._isNativeSelect && (element.multiple || element.size > 1);\n    }\n    /**\n     * In blink and webkit browsers a focused number input does not increment or decrement its value\n     * on mouse wheel interaction unless a wheel event listener is attached to it or one of its ancestors or a passive wheel listener is attached somewhere in the DOM.\n     * For example: Hitting a tooltip once enables the mouse wheel input for all number inputs as long as it exists.\n     * In order to get reliable and intuitive behavior we apply a wheel event on our own\n     * thus making sure increment and decrement by mouse wheel works every time.\n     * @docs-private\n     */\n    _ensureWheelDefaultBehavior() {\n        if (!this._webkitBlinkWheelListenerAttached &&\n            this._type === 'number' &&\n            (this._platform.BLINK || this._platform.WEBKIT)) {\n            this._ngZone.runOutsideAngular(() => {\n                this._elementRef.nativeElement.addEventListener('wheel', this._webkitBlinkWheelListener);\n            });\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n        if (this._webkitBlinkWheelListenerAttached && this._type !== 'number') {\n            this._elementRef.nativeElement.removeEventListener('wheel', this._webkitBlinkWheelListener);\n            this._webkitBlinkWheelListenerAttached = true;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInput, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: i2.NgControl, optional: true, self: true }, { token: i2.NgForm, optional: true }, { token: i2.FormGroupDirective, optional: true }, { token: i3.ErrorStateMatcher }, { token: MAT_INPUT_VALUE_ACCESSOR, optional: true, self: true }, { token: i4.AutofillMonitor }, { token: i0.NgZone }, { token: MAT_FORM_FIELD, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatInput, isStandalone: true, selector: \"input[matInput], textarea[matInput], select[matNativeControl],\\n      input[matNativeControl], textarea[matNativeControl]\", inputs: { disabled: \"disabled\", id: \"id\", placeholder: \"placeholder\", name: \"name\", required: \"required\", type: \"type\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"], value: \"value\", readonly: \"readonly\" }, host: { listeners: { \"focus\": \"_focusChanged(true)\", \"blur\": \"_focusChanged(false)\", \"input\": \"_onInput()\" }, properties: { \"class.mat-input-server\": \"_isServer\", \"class.mat-mdc-form-field-textarea-control\": \"_isInFormField && _isTextarea\", \"class.mat-mdc-form-field-input-control\": \"_isInFormField\", \"class.mdc-text-field__input\": \"_isInFormField\", \"class.mat-mdc-native-select-inline\": \"_isInlineSelect()\", \"id\": \"id\", \"disabled\": \"disabled\", \"required\": \"required\", \"attr.name\": \"name || null\", \"attr.readonly\": \"readonly && !_isNativeSelect || null\", \"attr.aria-invalid\": \"(empty && required) ? null : errorState\", \"attr.aria-required\": \"required\", \"attr.id\": \"id\" }, classAttribute: \"mat-mdc-input-element\" }, providers: [{ provide: MatFormFieldControl, useExisting: MatInput }], exportAs: [\"matInput\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInput, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                    exportAs: 'matInput',\n                    host: {\n                        'class': 'mat-mdc-input-element',\n                        // The BaseMatInput parent class adds `mat-input-element`, `mat-form-field-control` and\n                        // `mat-form-field-autofill-control` to the CSS class list, but this should not be added for\n                        // this MDC equivalent input.\n                        '[class.mat-input-server]': '_isServer',\n                        '[class.mat-mdc-form-field-textarea-control]': '_isInFormField && _isTextarea',\n                        '[class.mat-mdc-form-field-input-control]': '_isInFormField',\n                        '[class.mdc-text-field__input]': '_isInFormField',\n                        '[class.mat-mdc-native-select-inline]': '_isInlineSelect()',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[id]': 'id',\n                        '[disabled]': 'disabled',\n                        '[required]': 'required',\n                        '[attr.name]': 'name || null',\n                        '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                        // Only mark the input as invalid for assistive technology if it has a value since the\n                        // state usually overlaps with `aria-required` when the input is empty and can be redundant.\n                        '[attr.aria-invalid]': '(empty && required) ? null : errorState',\n                        '[attr.aria-required]': 'required',\n                        // Native input properties that are overwritten by Angular inputs need to be synced with\n                        // the native input element. Otherwise property bindings for those don't work.\n                        '[attr.id]': 'id',\n                        '(focus)': '_focusChanged(true)',\n                        '(blur)': '_focusChanged(false)',\n                        '(input)': '_onInput()',\n                    },\n                    providers: [{ provide: MatFormFieldControl, useExisting: MatInput }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.Platform }, { type: i2.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i2.NgForm, decorators: [{\n                    type: Optional\n                }] }, { type: i2.FormGroupDirective, decorators: [{\n                    type: Optional\n                }] }, { type: i3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [MAT_INPUT_VALUE_ACCESSOR]\n                }] }, { type: i4.AutofillMonitor }, { type: i0.NgZone }, { type: i5.MatFormField, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_FORM_FIELD]\n                }] }], propDecorators: { disabled: [{\n                type: Input\n            }], id: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], type: [{\n                type: Input\n            }], errorStateMatcher: [{\n                type: Input\n            }], userAriaDescribedBy: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], value: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }] } });\n\nclass MatInputModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatInput], exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, imports: [MatCommonModule, MatFormFieldModule, MatFormFieldModule, TextFieldModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatInputModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, MatFormFieldModule, MatInput],\n                    exports: [MatInput, MatFormFieldModule, TextFieldModule, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, getMatInputUnsupportedTypeError };\n"],"names":["i1","normalizePassiveListenerOptions","i0","Injectable","EventEmitter","Directive","Output","booleanAttribute","Optional","Inject","Input","NgModule","coerceElement","coerceNumberProperty","EMPTY","Subject","fromEvent","auditTime","takeUntil","DOCUMENT","listenerOptions","passive","AutofillMonitor","constructor","_platform","_ngZone","_monitoredElements","Map","monitor","elementOrRef","isBrowser","element","info","get","subject","result","cssClass","listener","event","animationName","classList","contains","add","run","next","target","isAutofilled","remove","runOutsideAngular","addEventListener","set","unlisten","removeEventListener","stopMonitoring","complete","delete","ngOnDestroy","forEach","_info","ɵfac","AutofillMonitor_Factory","__ngFactoryType__","ɵɵinject","Platform","NgZone","ɵprov","ɵɵdefineInjectable","token","factory","providedIn","ngDevMode","ɵsetClassMetadata","type","args","CdkAutofill","_elementRef","_autofillMonitor","cdkAutofill","ngOnInit","subscribe","emit","CdkAutofill_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","selectors","outputs","standalone","selector","CdkTextareaAutosize","minRows","_minRows","value","_setMinHeight","maxRows","_maxRows","_setMaxHeight","enabled","_enabled","resizeToFitContent","reset","placeholder","_textareaElement","_cachedPlaceholderHeight","undefined","setAttribute","removeAttribute","_cacheTextareaPlaceholderHeight","document","_destroyed","_previousMinRows","_isViewInited","_handleFocusEvent","_hasFocus","_document","nativeElement","minHeight","_cachedLineHeight","style","maxHeight","ngAfterViewInit","_initialHeight","height","window","_getWindow","pipe","_cacheTextareaLineHeight","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","_measureScrollHeight","previousMargin","marginBottom","isFirefox","FIREFOX","needsMarginFiller","measuringClass","scrollHeight","ngDoCheck","force","textarea","_previousValue","Math","max","requestAnimationFrame","_scrollToCaretPosition","setTimeout","_noopInputHandler","_getDocument","doc","defaultView","selectionStart","selectionEnd","isStopped","setSelectionRange","CdkTextareaAutosize_Factory","hostAttrs","hostBindings","CdkTextareaAutosize_HostBindings","rf","ctx","ɵɵlistener","CdkTextareaAutosize_input_HostBindingHandler","inputs","exportAs","features","ɵɵInputTransformsFeature","host","decorators","alias","transform","TextFieldModule","TextFieldModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports","coerceBooleanProperty","getSupportedInputTypes","i4","InjectionToken","Self","i2","Validators","i3","_ErrorStateTracker","MatCommonModule","i5","MAT_FORM_FIELD","MatFormFieldControl","MatFormFieldModule","MatError","MatFormField","MatHint","MatLabel","MatPrefix","MatSuffix","getMatInputUnsupportedTypeError","Error","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInput","disabled","_disabled","focused","stateChanges","id","_id","_uid","required","_required","ngControl","control","hasValidator","_type","_validateType","_isTextarea","has","_ensureWheelDefaultBehavior","errorStateMatcher","_errorStateTracker","matcher","_inputValueAccessor","readonly","_readonly","errorState","parentForm","parentFormGroup","defaultErrorStateMatcher","inputValueAccessor","_formField","_webkitBlinkWheelListenerAttached","controlType","autofilled","_neverEmptyInputTypes","filter","t","_iOSKeyupListener","el","_webkitBlinkWheelListener","nodeName","toLowerCase","_previousNativeValue","IOS","_isServer","_isNativeSelect","_isInFormField","multiple","ngOnChanges","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","focus","options","_focusChanged","isFocused","_onInput","newValue","_getPlaceholder","_previousPlaceholder","indexOf","_isNeverEmpty","_isBadInput","validity","badInput","empty","shouldLabelFloat","selectElement","firstOption","selectedIndex","label","setDescribedByIds","ids","length","join","onContainerClick","_isInlineSelect","size","BLINK","WEBKIT","MatInput_Factory","NgControl","NgForm","FormGroupDirective","ErrorStateMatcher","hostVars","MatInput_HostBindings","MatInput_focus_HostBindingHandler","MatInput_blur_HostBindingHandler","MatInput_input_HostBindingHandler","ɵɵhostProperty","ɵɵattribute","name","ɵɵclassProp","userAriaDescribedBy","ɵɵProvidersFeature","provide","useExisting","ɵɵNgOnChangesFeature","providers","MatInputModule","MatInputModule_Factory"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}