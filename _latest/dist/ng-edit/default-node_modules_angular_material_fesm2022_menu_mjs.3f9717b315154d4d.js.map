{"version":3,"file":"default-node_modules_angular_material_fesm2022_menu_mjs.3f9717b315154d4d.js","mappings":"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","names":["_c0","_class__svg_svg_4_Template","rf","ctx","i0","_c1","_c2","_class5_ng_template_0_Template","_r2","$event","ctx_r1","_handleKeydown","ctx_r3","closed","emit","ctx_r4","_onAnimationStart","ctx_r5","_onAnimationDone","ctx_r0","panelId","_classList","_panelAnimationState","ariaLabel","ariaLabelledby","ariaDescribedby","_c3","MAT_MENU_PANEL","InjectionToken","_MatMenuItemBase","mixinDisableRipple","mixinDisabled","MatMenuItem","_class","constructor","_elementRef","_document","_focusMonitor","_parentMenu","_changeDetectorRef","super","this","role","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","disabled","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","ɵfac","t","DOCUMENT","i1","ɵcmp","type","selectors","hostAttrs","hostVars","hostBindings","inputs","disableRipple","exportAs","features","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","i2","i3","encapsulation","changeDetection","MAT_MENU_CONTENT","_MatMenuContentBase","_class2","_template","_componentFactoryResolver","_appRef","_injector","_viewContainerRef","_attached","attach","context","_portal","TemplatePortal","detach","_outlet","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","ɵdir","MatMenuContent","_class3","ɵ_class3_BaseFactory","provide","useExisting","matMenuAnimations","transformMenu","trigger","state","style","opacity","transform","transition","animate","fadeInItems","menuPanelUid","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","_MatMenuBase","_class4","_xPosition","value","setPositionClasses","_yPosition","_overlapTrigger","coerceBooleanProperty","hasBackdrop","_hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","split","forEach","className","classList","_ngZone","defaultOptions","_directDescendantItems","QueryList","_animationDone","EventEmitter","close","overlayPanelClass","ngOnInit","ngAfterContentInit","_updateDirectDescendants","_keyManager","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","startWith","switchMap","items","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","_firstItemFocusSubscription","unsubscribe","_item","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","parentMenu","direction","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","onStable","take","menuPanel","first","closest","contains","document","setFirstItemActive","resetActiveItem","setElevation","depth","elevation","_baseElevation","newElevation","_elevationPrefix","customElevation","Object","keys","find","startsWith","_previousElevation","posX","posY","_startAnimation","_resetAnimation","_isAnimating","toState","scrollTop","_allItems","reset","filter","notifyOnChanges","contentQueries","dirIndex","_t","lazyContent","viewQuery","TemplateRef","templateRef","outputs","MatMenu","_class5","_defaultOptions","changeDetectorRef","styles","data","animation","MAT_MENU_SCROLL_STRATEGY","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","Overlay","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","overlay","scrollStrategies","reposition","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","_MatMenuTriggerBase","_class6","_deprecatedMatMenuTriggerFor","menu","v","_menu","_menuCloseSubscription","reason","_destroyMenu","_parentMaterialMenu","_menuItemInstance","_overlay","_element","scrollStrategy","_dir","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","EMPTY","_hoverSubscription","inject","ChangeDetectorRef","_handleTouchStart","isFakeTouchstartFromScreenReader","_openedBy","undefined","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","_scrollStrategy","addEventListener","_handleHover","removeEventListener","menuOpen","dir","toggleMenu","closeMenu","openMenu","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","_getPortal","menuData","_menuClosingActions","_initMenu","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","_setIsMenuOpen","_setMenuElevation","isOpen","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","positionChanges","change","connectionPair","overlayX","overlayY","run","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","_parentInnerPadding","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","delay","asapScheduler","i1$1","i3$1","MatMenuTrigger","_class7","ɵ_class7_BaseFactory","MatMenuModule","_class8","ɵmod","ɵinj","providers","imports","CommonModule","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/menu.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Inject, Optional, Input, Directive, QueryList, EventEmitter, TemplateRef, ContentChildren, ViewChild, ContentChild, Output, inject, ChangeDetectorRef, Self, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of, asapScheduler } from 'rxjs';\nimport { startWith, switchMap, take, takeUntil, filter, delay } from 'rxjs/operators';\nimport * as i3 from '@angular/material/core';\nimport { mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport * as i3$1 from '@angular/cdk/bidi';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n// Boilerplate for applying mixins to MatMenuItem.\n/** @docs-private */\nconst _MatMenuItemBase = mixinDisableRipple(mixinDisabled(class {\n}));\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem extends _MatMenuItemBase {\n    constructor(_elementRef, _document, _focusMonitor, _parentMenu, _changeDetectorRef) {\n        super();\n        this._elementRef = _elementRef;\n        this._document = _document;\n        this._focusMonitor = _focusMonitor;\n        this._parentMenu = _parentMenu;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** ARIA role for the menu item. */\n        this.role = 'menuitem';\n        /** Stream that emits when the menu item is hovered. */\n        this._hovered = new Subject();\n        /** Stream that emits when the menu item is focused. */\n        this._focused = new Subject();\n        /** Whether the menu item is highlighted. */\n        this._highlighted = false;\n        /** Whether the menu item acts as a trigger for a sub-menu. */\n        this._triggersSubmenu = false;\n        _parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        // @breaking-change 12.0.0 Remove null check for `_changeDetectorRef`.\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef?.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, deps: [{ token: i0.ElementRef }, { token: DOCUMENT }, { token: i1.FocusMonitor }, { token: MAT_MENU_PANEL, optional: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuItem, selector: \"[mat-menu-item]\", inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", role: \"role\" }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-mdc-focus-indicator\" }, exportAs: [\"matMenuItem\"], usesInheritance: true, ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\", dependencies: [{ kind: \"directive\", type: i2.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', inputs: ['disabled', 'disableRipple'], host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-mdc-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n<svg\\n  *ngIf=\\\"_triggersSubmenu\\\"\\n  class=\\\"mat-mdc-menu-submenu-icon\\\"\\n  viewBox=\\\"0 0 5 10\\\"\\n  focusable=\\\"false\\\"\\n  aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n\" }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i1.FocusMonitor }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { role: [{\n                type: Input\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\nclass _MatMenuContentBase {\n    constructor(_template, _componentFactoryResolver, _appRef, _injector, _viewContainerRef, _document, _changeDetectorRef) {\n        this._template = _template;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._injector = _injector;\n        this._viewContainerRef = _viewContainerRef;\n        this._document = _document;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Emits when the menu content has been attached. */\n        this._attached = new Subject();\n    }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), this._componentFactoryResolver, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        // @breaking-change 9.0.0 Make change detector ref required\n        this._changeDetectorRef?.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        if (this._outlet) {\n            this._outlet.dispose();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, deps: [{ token: i0.TemplateRef }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: i0.Injector }, { token: i0.ViewContainerRef }, { token: DOCUMENT }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuContentBase, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuContentBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: i0.Injector }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent extends _MatMenuContentBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuContent, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n */\nconst matMenuAnimations = {\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: trigger('transformMenu', [\n        state('void', style({\n            opacity: 0,\n            transform: 'scale(0.8)',\n        })),\n        transition('void => enter', animate('120ms cubic-bezier(0, 0, 0.2, 1)', style({\n            opacity: 1,\n            transform: 'scale(1)',\n        }))),\n        transition('* => void', animate('100ms 25ms linear', style({ opacity: 0 }))),\n    ]),\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: trigger('fadeInItems', [\n        // TODO(crisbeto): this is inside the `transformMenu`\n        // now. Remove next time we do breaking changes.\n        state('showing', style({ opacity: 1 })),\n        transition('void => *', [\n            style({ opacity: 0 }),\n            animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n        ]),\n    ]),\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nlet menuPanelUid = 0;\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/** Base class with all of the `MatMenu` functionality. */\nclass _MatMenuBase {\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** Whether the menu should overlap its trigger. */\n    get overlapTrigger() {\n        return this._overlapTrigger;\n    }\n    set overlapTrigger(value) {\n        this._overlapTrigger = coerceBooleanProperty(value);\n    }\n    /** Whether the menu has a backdrop. */\n    get hasBackdrop() {\n        return this._hasBackdrop;\n    }\n    set hasBackdrop(value) {\n        this._hasBackdrop = coerceBooleanProperty(value);\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                this._classList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                this._classList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n    }\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    constructor(_elementRef, _ngZone, defaultOptions, \n    // @breaking-change 15.0.0 `_changeDetectorRef` to become a required parameter.\n    _changeDetectorRef) {\n        this._elementRef = _elementRef;\n        this._ngZone = _ngZone;\n        this._changeDetectorRef = _changeDetectorRef;\n        /** Only the direct descendant menu items. */\n        this._directDescendantItems = new QueryList();\n        /** Config object to be passed into the menu's ngClass */\n        this._classList = {};\n        /** Current state of the panel animation. */\n        this._panelAnimationState = 'void';\n        /** Emits whenever an animation on the menu completes. */\n        this._animationDone = new Subject();\n        /** Event emitted when the menu is closed. */\n        this.closed = new EventEmitter();\n        /**\n         * Event emitted when the menu is closed.\n         * @deprecated Switch to `closed` instead\n         * @breaking-change 8.0.0\n         */\n        this.close = this.closed;\n        this.panelId = `mat-menu-panel-${menuPanelUid++}`;\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this._overlapTrigger = defaultOptions.overlapTrigger;\n        this._hasBackdrop = defaultOptions.hasBackdrop;\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusSubscription?.unsubscribe();\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n        // Don't allow the event to propagate if we've already handled it, or it may\n        // end up reaching other overlays that were opened earlier (see #22694).\n        event.stopPropagation();\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `onStable` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusSubscription?.unsubscribe();\n        this._firstItemFocusSubscription = this._ngZone.onStable.pipe(take(1)).subscribe(() => {\n            let menuPanel = null;\n            if (this._directDescendantItems.length) {\n                // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n                // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n                // because the panel is inside an `ng-template`. We work around it by starting from one of\n                // the items and walking up the DOM.\n                menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n            }\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * Sets the menu panel elevation.\n     * @param depth Number of parent menus that come before the menu.\n     */\n    setElevation(depth) {\n        // The elevation starts at the base and increases by one for each level.\n        // Capped at 24 because that's the maximum elevation defined in the Material design spec.\n        const elevation = Math.min(this._baseElevation + depth, 24);\n        const newElevation = `${this._elevationPrefix}${elevation}`;\n        const customElevation = Object.keys(this._classList).find(className => {\n            return className.startsWith(this._elevationPrefix);\n        });\n        if (!customElevation || customElevation === this._previousElevation) {\n            if (this._previousElevation) {\n                this._classList[this._previousElevation] = false;\n            }\n            this._classList[newElevation] = true;\n            this._previousElevation = newElevation;\n        }\n    }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        const classes = this._classList;\n        classes['mat-menu-before'] = posX === 'before';\n        classes['mat-menu-after'] = posX === 'after';\n        classes['mat-menu-above'] = posY === 'above';\n        classes['mat-menu-below'] = posY === 'below';\n        // @breaking-change 15.0.0 Remove null check for `_changeDetectorRef`.\n        this._changeDetectorRef?.markForCheck();\n    }\n    /** Starts the enter animation. */\n    _startAnimation() {\n        // @breaking-change 8.0.0 Combine with _resetAnimation.\n        this._panelAnimationState = 'enter';\n    }\n    /** Resets the panel animation to its initial state. */\n    _resetAnimation() {\n        // @breaking-change 8.0.0 Combine with _startAnimation.\n        this._panelAnimationState = 'void';\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(event) {\n        this._animationDone.next(event);\n        this._isAnimating = false;\n    }\n    _onAnimationStart(event) {\n        this._isAnimating = true;\n        // Scroll the content element to the top as soon as the animation starts. This is necessary,\n        // because we move focus to the first item while it's still being animated, which can throw\n        // the browser off when it determines the scroll position. Alternatively we can move focus\n        // when the animation is done, however moving focus asynchronously will interrupt screen\n        // readers which are in the process of reading out the menu already. We take the `element`\n        // from the `event` since we can't use a `ViewChild` to access the pane.\n        if (event.toState === 'enter' && this._keyManager.activeItemIndex === 0) {\n            event.element.scrollTop = 0;\n        }\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuBase, inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: \"overlapTrigger\", hasBackdrop: \"hasBackdrop\", panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuBase, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input\n            }], hasBackdrop: [{\n                type: Input\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\nclass MatMenu extends _MatMenuBase {\n    constructor(_elementRef, _ngZone, _defaultOptions, changeDetectorRef) {\n        super(_elementRef, _ngZone, _defaultOptions, changeDetectorRef);\n        this._elevationPrefix = 'mat-elevation-z';\n        this._baseElevation = 8;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: MAT_MENU_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenu, selector: \"mat-menu\", host: { attributes: { \"ngSkipHydration\": \"\" }, properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], exportAs: [\"matMenu\"], usesInheritance: true, ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], dependencies: [{ kind: \"directive\", type: i2.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }], animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                        'ngSkipHydration': '',\n                    }, animations: [matMenuAnimations.transformMenu, matMenuAnimations.fadeInItems], providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel mat-mdc-elevation-specific\\\"\\n    [id]=\\\"panelId\\\"\\n    [ngClass]=\\\"_classList\\\"\\n    (keydown)=\\\"_handleKeydown($event)\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    [@transformMenu]=\\\"_panelAnimationState\\\"\\n    (@transformMenu.start)=\\\"_onAnimationStart($event)\\\"\\n    (@transformMenu.done)=\\\"_onAnimationDone($event)\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;list-style-type:none}.mat-mdc-menu-content:focus{outline:none}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;white-space:normal;font-family:var(--mat-menu-item-label-text-font);line-height:var(--mat-menu-item-label-text-line-height);font-size:var(--mat-menu-item-label-text-size);letter-spacing:var(--mat-menu-item-label-text-tracking);font-weight:var(--mat-menu-item-label-text-weight)}.mat-mdc-menu-panel{--mat-menu-container-shape:4px;min-width:112px;max-width:280px;overflow:auto;-webkit-overflow-scrolling:touch;box-sizing:border-box;outline:0;border-radius:var(--mat-menu-container-shape);background-color:var(--mat-menu-container-color);will-change:transform,opacity}.mat-mdc-menu-panel.ng-animating{pointer-events:none}.cdk-high-contrast-active .mat-mdc-menu-panel{outline:solid 1px}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0);cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;align-items:center;min-height:48px}.mat-mdc-menu-item:focus{outline:none}[dir=rtl] .mat-mdc-menu-item,.mat-mdc-menu-item[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-menu-item::-moz-focus-inner{border:0}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color)}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color)}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item .mat-icon{margin-right:16px}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:16px}.mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:32px}[dir=rtl] .mat-mdc-menu-item.mat-mdc-menu-item-submenu-trigger{padding-right:16px;padding-left:32px}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color)}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color)}.cdk-high-contrast-active .mat-mdc-menu-item{margin-top:1px}.mat-mdc-menu-submenu-icon{position:absolute;top:50%;right:16px;transform:translateY(-50%);width:5px;height:10px;fill:currentColor}[dir=rtl] .mat-mdc-menu-submenu-icon{right:auto;left:16px;transform:translateY(-50%) scaleX(-1)}.cdk-high-contrast-active .mat-mdc-menu-submenu-icon{fill:CanvasText}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_DEFAULT_OPTIONS]\n                }] }, { type: i0.ChangeDetectorRef }]; } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy');\n/** @docs-private */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/** @docs-private */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\nclass _MatMenuTriggerBase {\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    constructor(_overlay, _element, _viewContainerRef, scrollStrategy, parentMenu, \n    // `MatMenuTrigger` is commonly used in combination with a `MatMenuItem`.\n    // tslint:disable-next-line: lightweight-tokens\n    _menuItemInstance, _dir, _focusMonitor, _ngZone) {\n        this._overlay = _overlay;\n        this._element = _element;\n        this._viewContainerRef = _viewContainerRef;\n        this._menuItemInstance = _menuItemInstance;\n        this._dir = _dir;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._overlayRef = null;\n        this._menuOpen = false;\n        this._closingActionsSubscription = Subscription.EMPTY;\n        this._hoverSubscription = Subscription.EMPTY;\n        this._menuCloseSubscription = Subscription.EMPTY;\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Handles touch start events on the trigger.\n         * Needs to be an arrow function so we can easily use addEventListener and removeEventListener.\n         */\n        this._handleTouchStart = (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        };\n        // Tracking input type is necessary so it's possible to only auto-focus\n        // the first item of the list when the menu is opened via the keyboard\n        this._openedBy = undefined;\n        /**\n         * Whether focus should be restored when the menu is closed.\n         * Note that disabling this option can have accessibility implications\n         * and it's up to you to manage focus, if you decide to turn it off.\n         */\n        this.restoreFocus = true;\n        /** Event emitted when the associated menu is opened. */\n        this.menuOpened = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is opened.\n         * @deprecated Switch to `menuOpened` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuOpen = this.menuOpened;\n        /** Event emitted when the associated menu is closed. */\n        this.menuClosed = new EventEmitter();\n        /**\n         * Event emitted when the associated menu is closed.\n         * @deprecated Switch to `menuClosed` instead\n         * @breaking-change 8.0.0\n         */\n        // tslint:disable-next-line:no-output-on-prefix\n        this.onMenuClose = this.menuClosed;\n        this._scrollStrategy = scrollStrategy;\n        this._parentMaterialMenu = parentMenu instanceof _MatMenuBase ? parentMenu : undefined;\n        _element.nativeElement.addEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n        this._element.nativeElement.removeEventListener('touchstart', this._handleTouchStart, passiveEventListenerOptions);\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        overlayRef.attach(this._getPortal(menu));\n        if (menu.lazyContent) {\n            menu.lazyContent.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        this._initMenu(menu);\n        if (menu instanceof _MatMenuBase) {\n            menu._startAnimation();\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        if (!this._overlayRef || !this.menuOpen) {\n            return;\n        }\n        const menu = this.menu;\n        this._closingActionsSubscription.unsubscribe();\n        this._overlayRef.detach();\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        if (menu instanceof _MatMenuBase) {\n            menu._resetAnimation();\n            if (menu.lazyContent) {\n                // Wait for the exit animation to finish before detaching the content.\n                menu._animationDone\n                    .pipe(filter(event => event.toState === 'void'), take(1), \n                // Interrupt if the content got re-attached.\n                takeUntil(menu.lazyContent._attached))\n                    .subscribe({\n                    next: () => menu.lazyContent.detach(),\n                    // No matter whether the content got re-attached, reset the menu.\n                    complete: () => this._setIsMenuOpen(false),\n                });\n            }\n            else {\n                this._setIsMenuOpen(false);\n            }\n        }\n        else {\n            this._setIsMenuOpen(false);\n            menu?.lazyContent?.detach();\n        }\n    }\n    /**\n     * This method sets the menu state to open and focuses the first item if\n     * the menu was opened via the keyboard.\n     */\n    _initMenu(menu) {\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        this._setMenuElevation(menu);\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n    }\n    /** Updates the menu elevation based on the amount of parent menus that it has. */\n    _setMenuElevation(menu) {\n        if (menu.setElevation) {\n            let depth = 0;\n            let parentMenu = menu.parentMenu;\n            while (parentMenu) {\n                depth++;\n                parentMenu = parentMenu.parentMenu;\n            }\n            menu.setElevation(depth);\n        }\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            // Consume the `keydownEvents` in order to prevent them from going to another overlay.\n            // Ideally we'd also have our keyboard event logic in here, however doing so will\n            // break anybody that may have implemented the `MatMenuPanel` themselves.\n            this._overlayRef.keydownEvents().subscribe();\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir,\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                // @breaking-change 15.0.0 Remove null check for `ngZone`.\n                // `positionChanges` fires outside of the `ngZone` and `setPositionClasses` might be\n                // updating something in the view so we need to bring it back in.\n                if (this._ngZone) {\n                    this._ngZone.run(() => menu.setPositionClasses(posX, posY));\n                }\n                else {\n                    menu.setPositionClasses(posX, posY);\n                }\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu._hovered().pipe(filter(active => active !== this._menuItemInstance), filter(() => this._menuOpen))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (!this.triggersSubmenu() || !this._parentMaterialMenu) {\n            return;\n        }\n        this._hoverSubscription = this._parentMaterialMenu\n            ._hovered()\n            // Since we might have multiple competing triggers for the same menu (e.g. a sub-menu\n            // with different data and triggers), we have to delay it by a tick to ensure that\n            // it won't be closed immediately after it is opened.\n            .pipe(filter(active => active === this._menuItemInstance && !active.disabled), delay(0, asapScheduler))\n            .subscribe(() => {\n            this._openedBy = 'mouse';\n            // If the same menu is used between multiple triggers, it might still be animating\n            // while the new trigger tries to re-open it. Wait for the animation to finish\n            // before doing so. Also interrupt if the user moves to another item.\n            if (this.menu instanceof _MatMenuBase && this.menu._isAnimating) {\n                // We need the `delay(0)` here in order to avoid\n                // 'changed after checked' errors in some cases. See #12194.\n                this.menu._animationDone\n                    .pipe(take(1), delay(0, asapScheduler), takeUntil(this._parentMaterialMenu._hovered()))\n                    .subscribe(() => this.openMenu());\n            }\n            else {\n                this.openMenu();\n            }\n        });\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, deps: [{ token: i1$1.Overlay }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: MAT_MENU_SCROLL_STRATEGY }, { token: MAT_MENU_PANEL, optional: true }, { token: MatMenuItem, optional: true, self: true }, { token: i3$1.Directionality, optional: true }, { token: i1.FocusMonitor }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: _MatMenuTriggerBase, inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: _MatMenuTriggerBase, decorators: [{\n            type: Directive,\n            args: [{\n                    host: {\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.Overlay }, { type: i0.ElementRef }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_SCROLL_STRATEGY]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_MENU_PANEL]\n                }, {\n                    type: Optional\n                }] }, { type: MatMenuItem, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }] }, { type: i3$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: i1.FocusMonitor }, { type: i0.NgZone }]; }, propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger extends _MatMenuTriggerBase {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatMenuTrigger, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", host: { classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }] });\n\nclass MatMenuModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule, CdkScrollableModule,\n            MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, MatRippleModule, MatCommonModule, OverlayModule],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    declarations: [MatMenu, MatMenuItem, MatMenuContent, MatMenuTrigger],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, _MatMenuBase, _MatMenuContentBase, _MatMenuTriggerBase, fadeInItems, matMenuAnimations, transformMenu };\n"],"x_google_ignoreList":[0]}