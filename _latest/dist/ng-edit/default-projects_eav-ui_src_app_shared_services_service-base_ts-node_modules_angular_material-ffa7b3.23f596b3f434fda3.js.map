{"version":3,"file":"default-projects_eav-ui_src_app_shared_services_service-base_ts-node_modules_angular_material-ffa7b3.23f596b3f434fda3.js","mappings":"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","names":["_c0","_c1","_c2","MatMenuItem_Conditional_4_Template","rf","ctx","i0","_c3","MatMenu_ng_template_0_Template","_r1","ctx_r1","closed","emit","$event","_onAnimationStart","animationName","_onAnimationDone","_classList","_animationsDisabled","_panelAnimationState","_isAnimating","panelId","ariaLabel","ariaLabelledby","ariaDescribedby","MAT_MENU_PANEL","InjectionToken","MatMenuItem","_elementRef","inject","ElementRef","_document","DOCUMENT","_focusMonitor","FocusMonitor","_parentMenu","optional","_changeDetectorRef","ChangeDetectorRef","role","disabled","disableRipple","_hovered","Subject","_focused","_highlighted","_triggersSubmenu","constructor","_CdkPrivateStyleLoader","load","_StructuralStylesLoader","this","addItem","focus","origin","options","focusVia","_getHostElement","next","ngAfterViewInit","monitor","ngOnDestroy","stopMonitoring","removeItem","complete","_getTabIndex","nativeElement","_checkDisabled","event","preventDefault","stopPropagation","_handleMouseEnter","getLabel","clone","cloneNode","icons","querySelectorAll","i","length","remove","textContent","trim","_setHighlighted","isHighlighted","markForCheck","_setTriggersSubmenu","triggersSubmenu","_hasFocus","activeElement","static","__ngFactoryType__","type","selectors","hostAttrs","hostVars","hostBindings","inputs","booleanAttribute","exportAs","attrs","ngContentSelectors","decls","vars","consts","template","dependencies","MatRipple","encapsulation","changeDetection","MAT_MENU_CONTENT","MatMenuContent","_template","TemplateRef","_appRef","ApplicationRef","_injector","Injector","_viewContainerRef","ViewContainerRef","_portal","_outlet","_attached","attach","context","TemplatePortal","detach","DomPortalOutlet","createElement","element","elementRef","parentNode","insertBefore","outletElement","isAttached","dispose","features","provide","useExisting","MAT_MENU_DEFAULT_OPTIONS","providedIn","factory","MAT_MENU_DEFAULT_OPTIONS_FACTORY","overlapTrigger","xPosition","yPosition","backdropClass","ENTER_ANIMATION","EXIT_ANIMATION","MatMenu","_keyManager","_xPosition","_yPosition","_firstItemFocusRef","_exitFallbackTimeout","_allItems","_directDescendantItems","QueryList","_animationDone","parentMenu","direction","overlayPanelClass","value","setPositionClasses","templateRef","items","lazyContent","hasBackdrop","panelClass","classes","previousPanelClass","_previousPanelClass","newClassList","split","forEach","className","classList","EventEmitter","close","_IdGenerator","getId","defaultOptions","ANIMATION_MODULE_TYPE","ngOnInit","ngAfterContentInit","_updateDirectDescendants","FocusKeyManager","withWrap","withTypeAhead","withHomeAndEnd","tabOut","subscribe","changes","pipe","startWith","switchMap","merge","map","item","focusedItem","updateActiveItem","itemsList","manager","activeItem","toArray","index","Math","max","min","activeItemIndex","setActiveItem","setNextItemActive","destroy","clearTimeout","_item","_handleKeydown","keyCode","ESCAPE","hasModifierKey","LEFT_ARROW","RIGHT_ARROW","UP_ARROW","DOWN_ARROW","setFocusOrigin","onKeydown","focusFirstItem","afterNextRender","menuPanel","_resolvePanel","contains","document","setFirstItemActive","injector","resetActiveItem","setElevation","_depth","posX","posY","state","isExit","undefined","_setIsOpen","isOpen","scrollTop","setTimeout","reset","filter","notifyOnChanges","first","closest","contentQueries","dirIndex","_t","viewQuery","outputs","styles","MAT_MENU_SCROLL_STRATEGY","overlay","Overlay","scrollStrategies","reposition","MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_MENU_SCROLL_STRATEGY_FACTORY","passiveEventListenerOptions","passive","PANELS_TO_TRIGGERS","WeakMap","MatMenuTrigger","_overlay","_element","_menuItemInstance","self","_dir","Directionality","_ngZone","NgZone","_scrollStrategy","_cleanupTouchstart","_overlayRef","_menuOpen","_closingActionsSubscription","Subscription","EMPTY","_hoverSubscription","_menuCloseSubscription","_pendingRemoval","_parentMaterialMenu","_parentInnerPadding","_openedBy","_deprecatedMatMenuTriggerFor","menu","v","_menu","unsubscribe","reason","_destroyMenu","menuData","restoreFocus","menuOpened","onMenuOpen","menuClosed","onMenuClose","renderer","Renderer2","_bindEventWithOptions","isFakeTouchstartFromScreenReader","_handleHover","_ownsMenu","delete","menuOpen","dir","toggleMenu","closeMenu","openMenu","previousTrigger","get","set","overlayRef","_createOverlay","overlayConfig","getConfig","positionStrategy","_setPosition","hasAttached","_getPortal","_menuClosingActions","_setIsMenuOpen","takeUntil","withLockedPosition","reapplyLastPosition","updatePosition","take","config","_getOverlayConfig","_subscribeToPositions","create","keydownEvents","OverlayConfig","position","flexibleConnectedTo","withGrowAfterOpen","withTransformOriginOn","scrollStrategy","positionChanges","change","run","connectionPair","overlayX","overlayY","originX","originFallbackX","overlayFallbackY","originY","originFallbackY","overlayFallbackX","offsetY","firstItem","offsetTop","withPositions","backdrop","backdropClick","detachments","parentClose","of","hover","active","_handleMousedown","isFakeMousedownFromScreenReader","button","ENTER","SPACE","_handleClick","MatMenuModule","providers","imports","MatRippleModule","MatCommonModule","OverlayModule","CdkScrollableModule","ServiceBase","subscriptions","ɵfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/material/fesm2022/menu.mjs","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, inject, ElementRef, ChangeDetectorRef, booleanAttribute, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, TemplateRef, ApplicationRef, Injector, ViewContainerRef, Directive, QueryList, EventEmitter, ANIMATION_MODULE_TYPE, afterNextRender, ContentChildren, ViewChild, ContentChild, Output, NgZone, Renderer2, NgModule } from '@angular/core';\nimport { FocusMonitor, _IdGenerator, FocusKeyManager, isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { UP_ARROW, DOWN_ARROW, RIGHT_ARROW, LEFT_ARROW, ESCAPE, hasModifierKey, ENTER, SPACE } from '@angular/cdk/keycodes';\nimport { Subject, merge, Subscription, of } from 'rxjs';\nimport { startWith, switchMap, takeUntil, take, filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nimport { _StructuralStylesLoader, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { TemplatePortal, DomPortalOutlet } from '@angular/cdk/portal';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { Overlay, OverlayConfig, OverlayModule } from '@angular/cdk/overlay';\nimport { _bindEventWithOptions } from '@angular/cdk/platform';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\n\n/**\n * Injection token used to provide the parent menu to menu-specific components.\n * @docs-private\n */\nconst MAT_MENU_PANEL = new InjectionToken('MAT_MENU_PANEL');\n\n/**\n * Single item inside a `mat-menu`. Provides the menu item styling and accessibility treatment.\n */\nclass MatMenuItem {\n    _elementRef = inject(ElementRef);\n    _document = inject(DOCUMENT);\n    _focusMonitor = inject(FocusMonitor);\n    _parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    /** ARIA role for the menu item. */\n    role = 'menuitem';\n    /** Whether the menu item is disabled. */\n    disabled = false;\n    /** Whether ripples are disabled on the menu item. */\n    disableRipple = false;\n    /** Stream that emits when the menu item is hovered. */\n    _hovered = new Subject();\n    /** Stream that emits when the menu item is focused. */\n    _focused = new Subject();\n    /** Whether the menu item is highlighted. */\n    _highlighted = false;\n    /** Whether the menu item acts as a trigger for a sub-menu. */\n    _triggersSubmenu = false;\n    constructor() {\n        inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n        this._parentMenu?.addItem?.(this);\n    }\n    /** Focuses the menu item. */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._getHostElement(), origin, options);\n        }\n        else {\n            this._getHostElement().focus(options);\n        }\n        this._focused.next(this);\n    }\n    ngAfterViewInit() {\n        if (this._focusMonitor) {\n            // Start monitoring the element, so it gets the appropriate focused classes. We want\n            // to show the focus style for menu items only when the focus was not caused by a\n            // mouse or touch interaction.\n            this._focusMonitor.monitor(this._elementRef, false);\n        }\n    }\n    ngOnDestroy() {\n        if (this._focusMonitor) {\n            this._focusMonitor.stopMonitoring(this._elementRef);\n        }\n        if (this._parentMenu && this._parentMenu.removeItem) {\n            this._parentMenu.removeItem(this);\n        }\n        this._hovered.complete();\n        this._focused.complete();\n    }\n    /** Used to set the `tabindex`. */\n    _getTabIndex() {\n        return this.disabled ? '-1' : '0';\n    }\n    /** Returns the host DOM element. */\n    _getHostElement() {\n        return this._elementRef.nativeElement;\n    }\n    /** Prevents the default element actions if it is disabled. */\n    _checkDisabled(event) {\n        if (this.disabled) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n    }\n    /** Emits to the hover stream. */\n    _handleMouseEnter() {\n        this._hovered.next(this);\n    }\n    /** Gets the label to be used when determining whether the option should be focused. */\n    getLabel() {\n        const clone = this._elementRef.nativeElement.cloneNode(true);\n        const icons = clone.querySelectorAll('mat-icon, .material-icons');\n        // Strip away icons, so they don't show up in the text.\n        for (let i = 0; i < icons.length; i++) {\n            icons[i].remove();\n        }\n        return clone.textContent?.trim() || '';\n    }\n    _setHighlighted(isHighlighted) {\n        // We need to mark this for check for the case where the content is coming from a\n        // `matMenuContent` whose change detection tree is at the declaration position,\n        // not the insertion position. See #23175.\n        this._highlighted = isHighlighted;\n        this._changeDetectorRef.markForCheck();\n    }\n    _setTriggersSubmenu(triggersSubmenu) {\n        this._triggersSubmenu = triggersSubmenu;\n        this._changeDetectorRef.markForCheck();\n    }\n    _hasFocus() {\n        return this._document && this._document.activeElement === this._getHostElement();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuItem, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"19.2.0\", type: MatMenuItem, isStandalone: true, selector: \"[mat-menu-item]\", inputs: { role: \"role\", disabled: [\"disabled\", \"disabled\", booleanAttribute], disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute] }, host: { listeners: { \"click\": \"_checkDisabled($event)\", \"mouseenter\": \"_handleMouseEnter()\" }, properties: { \"attr.role\": \"role\", \"class.mat-mdc-menu-item-highlighted\": \"_highlighted\", \"class.mat-mdc-menu-item-submenu-trigger\": \"_triggersSubmenu\", \"attr.tabindex\": \"_getTabIndex()\", \"attr.aria-disabled\": \"disabled\", \"attr.disabled\": \"disabled || null\" }, classAttribute: \"mat-mdc-menu-item mat-focus-indicator\" }, exportAs: [\"matMenuItem\"], ngImport: i0, template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\", dependencies: [{ kind: \"directive\", type: MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuItem, decorators: [{\n            type: Component,\n            args: [{ selector: '[mat-menu-item]', exportAs: 'matMenuItem', host: {\n                        '[attr.role]': 'role',\n                        'class': 'mat-mdc-menu-item mat-focus-indicator',\n                        '[class.mat-mdc-menu-item-highlighted]': '_highlighted',\n                        '[class.mat-mdc-menu-item-submenu-trigger]': '_triggersSubmenu',\n                        '[attr.tabindex]': '_getTabIndex()',\n                        '[attr.aria-disabled]': 'disabled',\n                        '[attr.disabled]': 'disabled || null',\n                        '(click)': '_checkDisabled($event)',\n                        '(mouseenter)': '_handleMouseEnter()',\n                    }, changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, imports: [MatRipple], template: \"<ng-content select=\\\"mat-icon, [matMenuItemIcon]\\\"></ng-content>\\n<span class=\\\"mat-mdc-menu-item-text\\\"><ng-content></ng-content></span>\\n<div class=\\\"mat-mdc-menu-ripple\\\" matRipple\\n     [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n     [matRippleTrigger]=\\\"_getHostElement()\\\">\\n</div>\\n\\n@if (_triggersSubmenu) {\\n     <svg\\n       class=\\\"mat-mdc-menu-submenu-icon\\\"\\n       viewBox=\\\"0 0 5 10\\\"\\n       focusable=\\\"false\\\"\\n       aria-hidden=\\\"true\\\"><polygon points=\\\"0,0 5,5 0,10\\\"/></svg>\\n}\\n\" }]\n        }], ctorParameters: () => [], propDecorators: { role: [{\n                type: Input\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Throws an exception for the case when menu's x-position value isn't valid.\n * In other words, it doesn't match 'before' or 'after'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionX() {\n    throw Error(`xPosition value must be either 'before' or after'.\n      Example: <mat-menu xPosition=\"before\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when menu's y-position value isn't valid.\n * In other words, it doesn't match 'above' or 'below'.\n * @docs-private\n */\nfunction throwMatMenuInvalidPositionY() {\n    throw Error(`yPosition value must be either 'above' or below'.\n      Example: <mat-menu yPosition=\"above\" #menu=\"matMenu\"></mat-menu>`);\n}\n/**\n * Throws an exception for the case when a menu is assigned\n * to a trigger that is placed inside the same menu.\n * @docs-private\n */\nfunction throwMatMenuRecursiveError() {\n    throw Error(`matMenuTriggerFor: menu cannot contain its own trigger. Assign a menu that is ` +\n        `not a parent of the trigger or move the trigger outside of the menu.`);\n}\n\n/**\n * Injection token that can be used to reference instances of `MatMenuContent`. It serves\n * as alternative token to the actual `MatMenuContent` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst MAT_MENU_CONTENT = new InjectionToken('MatMenuContent');\n/** Menu content that will be rendered lazily once the menu is opened. */\nclass MatMenuContent {\n    _template = inject(TemplateRef);\n    _appRef = inject(ApplicationRef);\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _document = inject(DOCUMENT);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _portal;\n    _outlet;\n    /** Emits when the menu content has been attached. */\n    _attached = new Subject();\n    constructor() { }\n    /**\n     * Attaches the content with a particular context.\n     * @docs-private\n     */\n    attach(context = {}) {\n        if (!this._portal) {\n            this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n        }\n        this.detach();\n        if (!this._outlet) {\n            this._outlet = new DomPortalOutlet(this._document.createElement('div'), null, this._appRef, this._injector);\n        }\n        const element = this._template.elementRef.nativeElement;\n        // Because we support opening the same menu from different triggers (which in turn have their\n        // own `OverlayRef` panel), we have to re-insert the host element every time, otherwise we\n        // risk it staying attached to a pane that's no longer in the DOM.\n        element.parentNode.insertBefore(this._outlet.outletElement, element);\n        // When `MatMenuContent` is used in an `OnPush` component, the insertion of the menu\n        // content via `createEmbeddedView` does not cause the content to be seen as \"dirty\"\n        // by Angular. This causes the `@ContentChildren` for menu items within the menu to\n        // not be updated by Angular. By explicitly marking for check here, we tell Angular that\n        // it needs to check for new menu items and update the `@ContentChild` in `MatMenu`.\n        this._changeDetectorRef.markForCheck();\n        this._portal.attach(this._outlet, context);\n        this._attached.next();\n    }\n    /**\n     * Detaches the content.\n     * @docs-private\n     */\n    detach() {\n        if (this._portal?.isAttached) {\n            this._portal.detach();\n        }\n    }\n    ngOnDestroy() {\n        this.detach();\n        this._outlet?.dispose();\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuContent, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatMenuContent, isStandalone: true, selector: \"ng-template[matMenuContent]\", providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matMenuContent]',\n                    providers: [{ provide: MAT_MENU_CONTENT, useExisting: MatMenuContent }],\n                }]\n        }], ctorParameters: () => [] });\n\n/** Injection token to be used to override the default options for `mat-menu`. */\nconst MAT_MENU_DEFAULT_OPTIONS = new InjectionToken('mat-menu-default-options', {\n    providedIn: 'root',\n    factory: MAT_MENU_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_MENU_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        overlapTrigger: false,\n        xPosition: 'after',\n        yPosition: 'below',\n        backdropClass: 'cdk-overlay-transparent-backdrop',\n    };\n}\n/** Name of the enter animation `@keyframes`. */\nconst ENTER_ANIMATION = '_mat-menu-enter';\n/** Name of the exit animation `@keyframes`. */\nconst EXIT_ANIMATION = '_mat-menu-exit';\nclass MatMenu {\n    _elementRef = inject(ElementRef);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _injector = inject(Injector);\n    _keyManager;\n    _xPosition;\n    _yPosition;\n    _firstItemFocusRef;\n    _exitFallbackTimeout;\n    /** Whether animations are currently disabled. */\n    _animationsDisabled;\n    /** All items inside the menu. Includes items nested inside another menu. */\n    _allItems;\n    /** Only the direct descendant menu items. */\n    _directDescendantItems = new QueryList();\n    /** Classes to be applied to the menu panel. */\n    _classList = {};\n    /** Current state of the panel animation. */\n    _panelAnimationState = 'void';\n    /** Emits whenever an animation on the menu completes. */\n    _animationDone = new Subject();\n    /** Whether the menu is animating. */\n    _isAnimating = false;\n    /** Parent menu of the current menu panel. */\n    parentMenu;\n    /** Layout direction of the menu. */\n    direction;\n    /** Class or list of classes to be added to the overlay panel. */\n    overlayPanelClass;\n    /** Class to be added to the backdrop element. */\n    backdropClass;\n    /** aria-label for the menu panel. */\n    ariaLabel;\n    /** aria-labelledby for the menu panel. */\n    ariaLabelledby;\n    /** aria-describedby for the menu panel. */\n    ariaDescribedby;\n    /** Position of the menu in the X axis. */\n    get xPosition() {\n        return this._xPosition;\n    }\n    set xPosition(value) {\n        if (value !== 'before' &&\n            value !== 'after' &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionX();\n        }\n        this._xPosition = value;\n        this.setPositionClasses();\n    }\n    /** Position of the menu in the Y axis. */\n    get yPosition() {\n        return this._yPosition;\n    }\n    set yPosition(value) {\n        if (value !== 'above' && value !== 'below' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwMatMenuInvalidPositionY();\n        }\n        this._yPosition = value;\n        this.setPositionClasses();\n    }\n    /** @docs-private */\n    templateRef;\n    /**\n     * List of the items inside of a menu.\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    items;\n    /**\n     * Menu content that will be rendered lazily.\n     * @docs-private\n     */\n    lazyContent;\n    /** Whether the menu should overlap its trigger. */\n    overlapTrigger;\n    /** Whether the menu has a backdrop. */\n    hasBackdrop;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @param classes list of class names\n     */\n    set panelClass(classes) {\n        const previousPanelClass = this._previousPanelClass;\n        const newClassList = { ...this._classList };\n        if (previousPanelClass && previousPanelClass.length) {\n            previousPanelClass.split(' ').forEach((className) => {\n                newClassList[className] = false;\n            });\n        }\n        this._previousPanelClass = classes;\n        if (classes && classes.length) {\n            classes.split(' ').forEach((className) => {\n                newClassList[className] = true;\n            });\n            this._elementRef.nativeElement.className = '';\n        }\n        this._classList = newClassList;\n    }\n    _previousPanelClass;\n    /**\n     * This method takes classes set on the host mat-menu element and applies them on the\n     * menu template that displays in the overlay container.  Otherwise, it's difficult\n     * to style the containing menu from outside the component.\n     * @deprecated Use `panelClass` instead.\n     * @breaking-change 8.0.0\n     */\n    get classList() {\n        return this.panelClass;\n    }\n    set classList(classes) {\n        this.panelClass = classes;\n    }\n    /** Event emitted when the menu is closed. */\n    closed = new EventEmitter();\n    /**\n     * Event emitted when the menu is closed.\n     * @deprecated Switch to `closed` instead\n     * @breaking-change 8.0.0\n     */\n    close = this.closed;\n    panelId = inject(_IdGenerator).getId('mat-menu-panel-');\n    constructor() {\n        const defaultOptions = inject(MAT_MENU_DEFAULT_OPTIONS);\n        this.overlayPanelClass = defaultOptions.overlayPanelClass || '';\n        this._xPosition = defaultOptions.xPosition;\n        this._yPosition = defaultOptions.yPosition;\n        this.backdropClass = defaultOptions.backdropClass;\n        this.overlapTrigger = defaultOptions.overlapTrigger;\n        this.hasBackdrop = defaultOptions.hasBackdrop;\n        this._animationsDisabled = inject(ANIMATION_MODULE_TYPE, { optional: true }) === 'NoopAnimations';\n    }\n    ngOnInit() {\n        this.setPositionClasses();\n    }\n    ngAfterContentInit() {\n        this._updateDirectDescendants();\n        this._keyManager = new FocusKeyManager(this._directDescendantItems)\n            .withWrap()\n            .withTypeAhead()\n            .withHomeAndEnd();\n        this._keyManager.tabOut.subscribe(() => this.closed.emit('tab'));\n        // If a user manually (programmatically) focuses a menu item, we need to reflect that focus\n        // change back to the key manager. Note that we don't need to unsubscribe here because _focused\n        // is internal and we know that it gets completed on destroy.\n        this._directDescendantItems.changes\n            .pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._focused))))\n            .subscribe(focusedItem => this._keyManager.updateActiveItem(focusedItem));\n        this._directDescendantItems.changes.subscribe((itemsList) => {\n            // Move focus to another item, if the active item is removed from the list.\n            // We need to debounce the callback, because multiple items might be removed\n            // in quick succession.\n            const manager = this._keyManager;\n            if (this._panelAnimationState === 'enter' && manager.activeItem?._hasFocus()) {\n                const items = itemsList.toArray();\n                const index = Math.max(0, Math.min(items.length - 1, manager.activeItemIndex || 0));\n                if (items[index] && !items[index].disabled) {\n                    manager.setActiveItem(index);\n                }\n                else {\n                    manager.setNextItemActive();\n                }\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._directDescendantItems.destroy();\n        this.closed.complete();\n        this._firstItemFocusRef?.destroy();\n        clearTimeout(this._exitFallbackTimeout);\n    }\n    /** Stream that emits whenever the hovered menu item changes. */\n    _hovered() {\n        // Coerce the `changes` property because Angular types it as `Observable<any>`\n        const itemChanges = this._directDescendantItems.changes;\n        return itemChanges.pipe(startWith(this._directDescendantItems), switchMap(items => merge(...items.map((item) => item._hovered))));\n    }\n    /*\n     * Registers a menu item with the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    addItem(_item) { }\n    /**\n     * Removes an item from the menu.\n     * @docs-private\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 9.0.0\n     */\n    removeItem(_item) { }\n    /** Handle a keyboard event from the menu, delegating to the appropriate action. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        const manager = this._keyManager;\n        switch (keyCode) {\n            case ESCAPE:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this.closed.emit('keydown');\n                }\n                break;\n            case LEFT_ARROW:\n                if (this.parentMenu && this.direction === 'ltr') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            case RIGHT_ARROW:\n                if (this.parentMenu && this.direction === 'rtl') {\n                    this.closed.emit('keydown');\n                }\n                break;\n            default:\n                if (keyCode === UP_ARROW || keyCode === DOWN_ARROW) {\n                    manager.setFocusOrigin('keyboard');\n                }\n                manager.onKeydown(event);\n                return;\n        }\n    }\n    /**\n     * Focus the first item in the menu.\n     * @param origin Action from which the focus originated. Used to set the correct styling.\n     */\n    focusFirstItem(origin = 'program') {\n        // Wait for `afterNextRender` to ensure iOS VoiceOver screen reader focuses the first item (#24735).\n        this._firstItemFocusRef?.destroy();\n        this._firstItemFocusRef = afterNextRender(() => {\n            const menuPanel = this._resolvePanel();\n            // If an item in the menuPanel is already focused, avoid overriding the focus.\n            if (!menuPanel || !menuPanel.contains(document.activeElement)) {\n                const manager = this._keyManager;\n                manager.setFocusOrigin(origin).setFirstItemActive();\n                // If there's no active item at this point, it means that all the items are disabled.\n                // Move focus to the menuPanel panel so keyboard events like Escape still work. Also this will\n                // give _some_ feedback to screen readers.\n                if (!manager.activeItem && menuPanel) {\n                    menuPanel.focus();\n                }\n            }\n        }, { injector: this._injector });\n    }\n    /**\n     * Resets the active item in the menu. This is used when the menu is opened, allowing\n     * the user to start from the first option when pressing the down arrow.\n     */\n    resetActiveItem() {\n        this._keyManager.setActiveItem(-1);\n    }\n    /**\n     * @deprecated No longer used and will be removed.\n     * @breaking-change 21.0.0\n     */\n    setElevation(_depth) { }\n    /**\n     * Adds classes to the menu panel based on its position. Can be used by\n     * consumers to add specific styling based on the position.\n     * @param posX Position of the menu along the x axis.\n     * @param posY Position of the menu along the y axis.\n     * @docs-private\n     */\n    setPositionClasses(posX = this.xPosition, posY = this.yPosition) {\n        this._classList = {\n            ...this._classList,\n            ['mat-menu-before']: posX === 'before',\n            ['mat-menu-after']: posX === 'after',\n            ['mat-menu-above']: posY === 'above',\n            ['mat-menu-below']: posY === 'below',\n        };\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Callback that is invoked when the panel animation completes. */\n    _onAnimationDone(state) {\n        const isExit = state === EXIT_ANIMATION;\n        if (isExit || state === ENTER_ANIMATION) {\n            if (isExit) {\n                clearTimeout(this._exitFallbackTimeout);\n                this._exitFallbackTimeout = undefined;\n            }\n            this._animationDone.next(isExit ? 'void' : 'enter');\n            this._isAnimating = false;\n        }\n    }\n    _onAnimationStart(state) {\n        if (state === ENTER_ANIMATION || state === EXIT_ANIMATION) {\n            this._isAnimating = true;\n        }\n    }\n    _setIsOpen(isOpen) {\n        this._panelAnimationState = isOpen ? 'enter' : 'void';\n        if (isOpen) {\n            if (this._keyManager.activeItemIndex === 0) {\n                // Scroll the content element to the top as soon as the animation starts. This is necessary,\n                // because we move focus to the first item while it's still being animated, which can throw\n                // the browser off when it determines the scroll position. Alternatively we can move focus\n                // when the animation is done, however moving focus asynchronously will interrupt screen\n                // readers which are in the process of reading out the menu already. We take the `element`\n                // from the `event` since we can't use a `ViewChild` to access the pane.\n                const menuPanel = this._resolvePanel();\n                if (menuPanel) {\n                    menuPanel.scrollTop = 0;\n                }\n            }\n        }\n        else if (!this._animationsDisabled) {\n            // Some apps do `* { animation: none !important; }` in tests which will prevent the\n            // `animationend` event from firing. Since the exit animation is loading-bearing for\n            // removing the content from the DOM, add a fallback timer.\n            this._exitFallbackTimeout = setTimeout(() => this._onAnimationDone(EXIT_ANIMATION), 200);\n        }\n        // Animation events won't fire when animations are disabled so we simulate them.\n        if (this._animationsDisabled) {\n            setTimeout(() => {\n                this._onAnimationDone(isOpen ? ENTER_ANIMATION : EXIT_ANIMATION);\n            });\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Sets up a stream that will keep track of any newly-added menu items and will update the list\n     * of direct descendants. We collect the descendants this way, because `_allItems` can include\n     * items that are part of child menus, and using a custom way of registering items is unreliable\n     * when it comes to maintaining the item order.\n     */\n    _updateDirectDescendants() {\n        this._allItems.changes\n            .pipe(startWith(this._allItems))\n            .subscribe((items) => {\n            this._directDescendantItems.reset(items.filter(item => item._parentMenu === this));\n            this._directDescendantItems.notifyOnChanges();\n        });\n    }\n    /** Gets the menu panel DOM node. */\n    _resolvePanel() {\n        let menuPanel = null;\n        if (this._directDescendantItems.length) {\n            // Because the `mat-menuPanel` is at the DOM insertion point, not inside the overlay, we don't\n            // have a nice way of getting a hold of the menuPanel panel. We can't use a `ViewChild` either\n            // because the panel is inside an `ng-template`. We work around it by starting from one of\n            // the items and walking up the DOM.\n            menuPanel = this._directDescendantItems.first._getHostElement().closest('[role=\"menu\"]');\n        }\n        return menuPanel;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenu, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatMenu, isStandalone: true, selector: \"mat-menu\", inputs: { backdropClass: \"backdropClass\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], xPosition: \"xPosition\", yPosition: \"yPosition\", overlapTrigger: [\"overlapTrigger\", \"overlapTrigger\", booleanAttribute], hasBackdrop: [\"hasBackdrop\", \"hasBackdrop\", (value) => (value == null ? null : booleanAttribute(value))], panelClass: [\"class\", \"panelClass\"], classList: \"classList\" }, outputs: { closed: \"closed\", close: \"close\" }, host: { properties: { \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"attr.aria-describedby\": \"null\" } }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], queries: [{ propertyName: \"lazyContent\", first: true, predicate: MAT_MENU_CONTENT, descendants: true }, { propertyName: \"_allItems\", predicate: MatMenuItem, descendants: true }, { propertyName: \"items\", predicate: MatMenuItem }], viewQueries: [{ propertyName: \"templateRef\", first: true, predicate: TemplateRef, descendants: true }], exportAs: [\"matMenu\"], ngImport: i0, template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-menu-panel-animations-disabled]=\\\"_animationsDisabled\\\"\\n    [class.mat-menu-panel-exit-animation]=\\\"_panelAnimationState === 'void'\\\"\\n    [class.mat-menu-panel-animating]=\\\"_isAnimating\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    (animationstart)=\\\"_onAnimationStart($event.animationName)\\\"\\n    (animationend)=\\\"_onAnimationDone($event.animationName)\\\"\\n    (animationcancel)=\\\"_onAnimationDone($event.animationName)\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}@keyframes _mat-menu-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-menu-exit{from{opacity:1}to{opacity:0}}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;box-sizing:border-box;outline:0;animation:_mat-menu-enter 120ms cubic-bezier(0, 0, 0.2, 1);border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.mat-menu-panel-exit-animation{animation:_mat-menu-exit 100ms 25ms linear forwards}.mat-mdc-menu-panel.mat-menu-panel-animations-disabled{animation:none}.mat-mdc-menu-panel.mat-menu-panel-animating{pointer-events:none}.mat-mdc-menu-panel.mat-menu-panel-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenu, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-menu', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, exportAs: 'matMenu', host: {\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[attr.aria-describedby]': 'null',\n                    }, providers: [{ provide: MAT_MENU_PANEL, useExisting: MatMenu }], template: \"<ng-template>\\n  <div\\n    class=\\\"mat-mdc-menu-panel\\\"\\n    [id]=\\\"panelId\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-menu-panel-animations-disabled]=\\\"_animationsDisabled\\\"\\n    [class.mat-menu-panel-exit-animation]=\\\"_panelAnimationState === 'void'\\\"\\n    [class.mat-menu-panel-animating]=\\\"_isAnimating\\\"\\n    (click)=\\\"closed.emit('click')\\\"\\n    tabindex=\\\"-1\\\"\\n    role=\\\"menu\\\"\\n    (animationstart)=\\\"_onAnimationStart($event.animationName)\\\"\\n    (animationend)=\\\"_onAnimationDone($event.animationName)\\\"\\n    (animationcancel)=\\\"_onAnimationDone($event.animationName)\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"ariaLabelledby || null\\\"\\n    [attr.aria-describedby]=\\\"ariaDescribedby || null\\\">\\n    <div class=\\\"mat-mdc-menu-content\\\">\\n      <ng-content></ng-content>\\n    </div>\\n  </div>\\n</ng-template>\\n\", styles: [\"mat-menu{display:none}.mat-mdc-menu-content{margin:0;padding:8px 0;outline:0}.mat-mdc-menu-content,.mat-mdc-menu-content .mat-mdc-menu-item .mat-mdc-menu-item-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;flex:1;white-space:normal;font-family:var(--mat-menu-item-label-text-font, var(--mat-sys-label-large-font));line-height:var(--mat-menu-item-label-text-line-height, var(--mat-sys-label-large-line-height));font-size:var(--mat-menu-item-label-text-size, var(--mat-sys-label-large-size));letter-spacing:var(--mat-menu-item-label-text-tracking, var(--mat-sys-label-large-tracking));font-weight:var(--mat-menu-item-label-text-weight, var(--mat-sys-label-large-weight))}@keyframes _mat-menu-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-menu-exit{from{opacity:1}to{opacity:0}}.mat-mdc-menu-panel{min-width:112px;max-width:280px;overflow:auto;box-sizing:border-box;outline:0;animation:_mat-menu-enter 120ms cubic-bezier(0, 0, 0.2, 1);border-radius:var(--mat-menu-container-shape, var(--mat-sys-corner-extra-small));background-color:var(--mat-menu-container-color, var(--mat-sys-surface-container));box-shadow:var(--mat-menu-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));will-change:transform,opacity}.mat-mdc-menu-panel.mat-menu-panel-exit-animation{animation:_mat-menu-exit 100ms 25ms linear forwards}.mat-mdc-menu-panel.mat-menu-panel-animations-disabled{animation:none}.mat-mdc-menu-panel.mat-menu-panel-animating{pointer-events:none}.mat-mdc-menu-panel.mat-menu-panel-animating:has(.mat-mdc-menu-content:empty){display:none}@media(forced-colors: active){.mat-mdc-menu-panel{outline:solid 1px}}.mat-mdc-menu-panel .mat-divider{color:var(--mat-menu-divider-color, var(--mat-sys-surface-variant));margin-bottom:var(--mat-menu-divider-bottom-spacing, 8px);margin-top:var(--mat-menu-divider-top-spacing, 8px)}.mat-mdc-menu-item{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;cursor:pointer;width:100%;text-align:left;box-sizing:border-box;color:inherit;font-size:inherit;background:none;text-decoration:none;margin:0;min-height:48px;padding-left:var(--mat-menu-item-leading-spacing, 12px);padding-right:var(--mat-menu-item-trailing-spacing, 12px);-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-mdc-menu-item::-moz-focus-inner{border:0}[dir=rtl] .mat-mdc-menu-item{padding-left:var(--mat-menu-item-trailing-spacing, 12px);padding-right:var(--mat-menu-item-leading-spacing, 12px)}.mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-leading-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-trailing-spacing, 12px)}[dir=rtl] .mat-mdc-menu-item:has(.material-icons,mat-icon,[matButtonIcon]){padding-left:var(--mat-menu-item-with-icon-trailing-spacing, 12px);padding-right:var(--mat-menu-item-with-icon-leading-spacing, 12px)}.mat-mdc-menu-item,.mat-mdc-menu-item:visited,.mat-mdc-menu-item:link{color:var(--mat-menu-item-label-text-color, var(--mat-sys-on-surface))}.mat-mdc-menu-item .mat-icon-no-color,.mat-mdc-menu-item .mat-mdc-menu-submenu-icon{color:var(--mat-menu-item-icon-color, var(--mat-sys-on-surface-variant))}.mat-mdc-menu-item[disabled]{cursor:default;opacity:.38}.mat-mdc-menu-item[disabled]::after{display:block;position:absolute;content:\\\"\\\";top:0;left:0;bottom:0;right:0}.mat-mdc-menu-item:focus{outline:0}.mat-mdc-menu-item .mat-icon{flex-shrink:0;margin-right:var(--mat-menu-item-spacing, 12px);height:var(--mat-menu-item-icon-size, 24px);width:var(--mat-menu-item-icon-size, 24px)}[dir=rtl] .mat-mdc-menu-item{text-align:right}[dir=rtl] .mat-mdc-menu-item .mat-icon{margin-right:0;margin-left:var(--mat-menu-item-spacing, 12px)}.mat-mdc-menu-item:not([disabled]):hover{background-color:var(--mat-menu-item-hover-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}.mat-mdc-menu-item:not([disabled]).cdk-program-focused,.mat-mdc-menu-item:not([disabled]).cdk-keyboard-focused,.mat-mdc-menu-item:not([disabled]).mat-mdc-menu-item-highlighted{background-color:var(--mat-menu-item-focus-state-layer-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(forced-colors: active){.mat-mdc-menu-item{margin-top:1px}}.mat-mdc-menu-submenu-icon{width:var(--mat-menu-item-icon-size, 24px);height:10px;fill:currentColor;padding-left:var(--mat-menu-item-spacing, 12px)}[dir=rtl] .mat-mdc-menu-submenu-icon{padding-right:var(--mat-menu-item-spacing, 12px);padding-left:0}[dir=rtl] .mat-mdc-menu-submenu-icon polygon{transform:scaleX(-1);transform-origin:center}@media(forced-colors: active){.mat-mdc-menu-submenu-icon{fill:CanvasText}}.mat-mdc-menu-item .mat-mdc-menu-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}\"] }]\n        }], ctorParameters: () => [], propDecorators: { _allItems: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: true }]\n            }], backdropClass: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], xPosition: [{\n                type: Input\n            }], yPosition: [{\n                type: Input\n            }], templateRef: [{\n                type: ViewChild,\n                args: [TemplateRef]\n            }], items: [{\n                type: ContentChildren,\n                args: [MatMenuItem, { descendants: false }]\n            }], lazyContent: [{\n                type: ContentChild,\n                args: [MAT_MENU_CONTENT]\n            }], overlapTrigger: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], hasBackdrop: [{\n                type: Input,\n                args: [{ transform: (value) => (value == null ? null : booleanAttribute(value)) }]\n            }], panelClass: [{\n                type: Input,\n                args: ['class']\n            }], classList: [{\n                type: Input\n            }], closed: [{\n                type: Output\n            }], close: [{\n                type: Output\n            }] } });\n\n/** Injection token that determines the scroll handling while the menu is open. */\nconst MAT_MENU_SCROLL_STRATEGY = new InjectionToken('mat-menu-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.reposition();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_MENU_SCROLL_STRATEGY_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.reposition();\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_MENU_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_MENU_SCROLL_STRATEGY_FACTORY,\n};\n/** Options for binding a passive event listener. */\nconst passiveEventListenerOptions = { passive: true };\n/**\n * Default top padding of the menu panel.\n * @deprecated No longer being used. Will be removed.\n * @breaking-change 15.0.0\n */\nconst MENU_PANEL_TOP_PADDING = 8;\n/** Mapping between menu panels and the last trigger that opened them. */\nconst PANELS_TO_TRIGGERS = new WeakMap();\n/** Directive applied to an element that should trigger a `mat-menu`. */\nclass MatMenuTrigger {\n    _overlay = inject(Overlay);\n    _element = inject(ElementRef);\n    _viewContainerRef = inject(ViewContainerRef);\n    _menuItemInstance = inject(MatMenuItem, { optional: true, self: true });\n    _dir = inject(Directionality, { optional: true });\n    _focusMonitor = inject(FocusMonitor);\n    _ngZone = inject(NgZone);\n    _scrollStrategy = inject(MAT_MENU_SCROLL_STRATEGY);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _cleanupTouchstart;\n    _portal;\n    _overlayRef = null;\n    _menuOpen = false;\n    _closingActionsSubscription = Subscription.EMPTY;\n    _hoverSubscription = Subscription.EMPTY;\n    _menuCloseSubscription = Subscription.EMPTY;\n    _pendingRemoval;\n    /**\n     * We're specifically looking for a `MatMenu` here since the generic `MatMenuPanel`\n     * interface lacks some functionality around nested menus and animations.\n     */\n    _parentMaterialMenu;\n    /**\n     * Cached value of the padding of the parent menu panel.\n     * Used to offset sub-menus to compensate for the padding.\n     */\n    _parentInnerPadding;\n    // Tracking input type is necessary so it's possible to only auto-focus\n    // the first item of the list when the menu is opened via the keyboard\n    _openedBy = undefined;\n    /**\n     * @deprecated\n     * @breaking-change 8.0.0\n     */\n    get _deprecatedMatMenuTriggerFor() {\n        return this.menu;\n    }\n    set _deprecatedMatMenuTriggerFor(v) {\n        this.menu = v;\n    }\n    /** References the menu instance that the trigger is associated with. */\n    get menu() {\n        return this._menu;\n    }\n    set menu(menu) {\n        if (menu === this._menu) {\n            return;\n        }\n        this._menu = menu;\n        this._menuCloseSubscription.unsubscribe();\n        if (menu) {\n            if (menu === this._parentMaterialMenu && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwMatMenuRecursiveError();\n            }\n            this._menuCloseSubscription = menu.close.subscribe((reason) => {\n                this._destroyMenu(reason);\n                // If a click closed the menu, we should close the entire chain of nested menus.\n                if ((reason === 'click' || reason === 'tab') && this._parentMaterialMenu) {\n                    this._parentMaterialMenu.closed.emit(reason);\n                }\n            });\n        }\n        this._menuItemInstance?._setTriggersSubmenu(this.triggersSubmenu());\n    }\n    _menu;\n    /** Data to be passed along to any lazily-rendered content. */\n    menuData;\n    /**\n     * Whether focus should be restored when the menu is closed.\n     * Note that disabling this option can have accessibility implications\n     * and it's up to you to manage focus, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /** Event emitted when the associated menu is opened. */\n    menuOpened = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is opened.\n     * @deprecated Switch to `menuOpened` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuOpen = this.menuOpened;\n    /** Event emitted when the associated menu is closed. */\n    menuClosed = new EventEmitter();\n    /**\n     * Event emitted when the associated menu is closed.\n     * @deprecated Switch to `menuClosed` instead\n     * @breaking-change 8.0.0\n     */\n    // tslint:disable-next-line:no-output-on-prefix\n    onMenuClose = this.menuClosed;\n    constructor() {\n        const parentMenu = inject(MAT_MENU_PANEL, { optional: true });\n        const renderer = inject(Renderer2);\n        this._parentMaterialMenu = parentMenu instanceof MatMenu ? parentMenu : undefined;\n        this._cleanupTouchstart = _bindEventWithOptions(renderer, this._element.nativeElement, 'touchstart', (event) => {\n            if (!isFakeTouchstartFromScreenReader(event)) {\n                this._openedBy = 'touch';\n            }\n        }, passiveEventListenerOptions);\n    }\n    ngAfterContentInit() {\n        this._handleHover();\n    }\n    ngOnDestroy() {\n        if (this.menu && this._ownsMenu(this.menu)) {\n            PANELS_TO_TRIGGERS.delete(this.menu);\n        }\n        this._cleanupTouchstart();\n        this._pendingRemoval?.unsubscribe();\n        this._menuCloseSubscription.unsubscribe();\n        this._closingActionsSubscription.unsubscribe();\n        this._hoverSubscription.unsubscribe();\n        if (this._overlayRef) {\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Whether the menu is open. */\n    get menuOpen() {\n        return this._menuOpen;\n    }\n    /** The text direction of the containing app. */\n    get dir() {\n        return this._dir && this._dir.value === 'rtl' ? 'rtl' : 'ltr';\n    }\n    /** Whether the menu triggers a sub-menu or a top-level one. */\n    triggersSubmenu() {\n        return !!(this._menuItemInstance && this._parentMaterialMenu && this.menu);\n    }\n    /** Toggles the menu between the open and closed states. */\n    toggleMenu() {\n        return this._menuOpen ? this.closeMenu() : this.openMenu();\n    }\n    /** Opens the menu. */\n    openMenu() {\n        const menu = this.menu;\n        if (this._menuOpen || !menu) {\n            return;\n        }\n        this._pendingRemoval?.unsubscribe();\n        const previousTrigger = PANELS_TO_TRIGGERS.get(menu);\n        PANELS_TO_TRIGGERS.set(menu, this);\n        // If the same menu is currently attached to another trigger,\n        // we need to close it so it doesn't end up in a broken state.\n        if (previousTrigger && previousTrigger !== this) {\n            previousTrigger.closeMenu();\n        }\n        const overlayRef = this._createOverlay(menu);\n        const overlayConfig = overlayRef.getConfig();\n        const positionStrategy = overlayConfig.positionStrategy;\n        this._setPosition(menu, positionStrategy);\n        overlayConfig.hasBackdrop =\n            menu.hasBackdrop == null ? !this.triggersSubmenu() : menu.hasBackdrop;\n        // We need the `hasAttached` check for the case where the user kicked off a removal animation,\n        // but re-entered the menu. Re-attaching the same portal will trigger an error otherwise.\n        if (!overlayRef.hasAttached()) {\n            overlayRef.attach(this._getPortal(menu));\n            menu.lazyContent?.attach(this.menuData);\n        }\n        this._closingActionsSubscription = this._menuClosingActions().subscribe(() => this.closeMenu());\n        menu.parentMenu = this.triggersSubmenu() ? this._parentMaterialMenu : undefined;\n        menu.direction = this.dir;\n        menu.focusFirstItem(this._openedBy || 'program');\n        this._setIsMenuOpen(true);\n        if (menu instanceof MatMenu) {\n            menu._setIsOpen(true);\n            menu._directDescendantItems.changes.pipe(takeUntil(menu.close)).subscribe(() => {\n                // Re-adjust the position without locking when the amount of items\n                // changes so that the overlay is allowed to pick a new optimal position.\n                positionStrategy.withLockedPosition(false).reapplyLastPosition();\n                positionStrategy.withLockedPosition(true);\n            });\n        }\n    }\n    /** Closes the menu. */\n    closeMenu() {\n        this.menu?.close.emit();\n    }\n    /**\n     * Focuses the menu trigger.\n     * @param origin Source of the menu trigger's focus.\n     */\n    focus(origin, options) {\n        if (this._focusMonitor && origin) {\n            this._focusMonitor.focusVia(this._element, origin, options);\n        }\n        else {\n            this._element.nativeElement.focus(options);\n        }\n    }\n    /**\n     * Updates the position of the menu to ensure that it fits all options within the viewport.\n     */\n    updatePosition() {\n        this._overlayRef?.updatePosition();\n    }\n    /** Closes the menu and does the necessary cleanup. */\n    _destroyMenu(reason) {\n        const overlayRef = this._overlayRef;\n        const menu = this._menu;\n        if (!overlayRef || !this.menuOpen) {\n            return;\n        }\n        this._closingActionsSubscription.unsubscribe();\n        this._pendingRemoval?.unsubscribe();\n        // Note that we don't wait for the animation to finish if another trigger took\n        // over the menu, because the panel will end up empty which looks glitchy.\n        if (menu instanceof MatMenu && this._ownsMenu(menu)) {\n            this._pendingRemoval = menu._animationDone.pipe(take(1)).subscribe(() => {\n                overlayRef.detach();\n                menu.lazyContent?.detach();\n            });\n            menu._setIsOpen(false);\n        }\n        else {\n            overlayRef.detach();\n            menu?.lazyContent?.detach();\n        }\n        if (menu && this._ownsMenu(menu)) {\n            PANELS_TO_TRIGGERS.delete(menu);\n        }\n        // Always restore focus if the user is navigating using the keyboard or the menu was opened\n        // programmatically. We don't restore for non-root triggers, because it can prevent focus\n        // from making it back to the root trigger when closing a long chain of menus by clicking\n        // on the backdrop.\n        if (this.restoreFocus && (reason === 'keydown' || !this._openedBy || !this.triggersSubmenu())) {\n            this.focus(this._openedBy);\n        }\n        this._openedBy = undefined;\n        this._setIsMenuOpen(false);\n    }\n    // set state rather than toggle to support triggers sharing a menu\n    _setIsMenuOpen(isOpen) {\n        if (isOpen !== this._menuOpen) {\n            this._menuOpen = isOpen;\n            this._menuOpen ? this.menuOpened.emit() : this.menuClosed.emit();\n            if (this.triggersSubmenu()) {\n                this._menuItemInstance._setHighlighted(isOpen);\n            }\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * This method creates the overlay from the provided menu's template and saves its\n     * OverlayRef so that it can be attached to the DOM when openMenu is called.\n     */\n    _createOverlay(menu) {\n        if (!this._overlayRef) {\n            const config = this._getOverlayConfig(menu);\n            this._subscribeToPositions(menu, config.positionStrategy);\n            this._overlayRef = this._overlay.create(config);\n            this._overlayRef.keydownEvents().subscribe(event => {\n                if (this.menu instanceof MatMenu) {\n                    this.menu._handleKeydown(event);\n                }\n            });\n        }\n        return this._overlayRef;\n    }\n    /**\n     * This method builds the configuration object needed to create the overlay, the OverlayState.\n     * @returns OverlayConfig\n     */\n    _getOverlayConfig(menu) {\n        return new OverlayConfig({\n            positionStrategy: this._overlay\n                .position()\n                .flexibleConnectedTo(this._element)\n                .withLockedPosition()\n                .withGrowAfterOpen()\n                .withTransformOriginOn('.mat-menu-panel, .mat-mdc-menu-panel'),\n            backdropClass: menu.backdropClass || 'cdk-overlay-transparent-backdrop',\n            panelClass: menu.overlayPanelClass,\n            scrollStrategy: this._scrollStrategy(),\n            direction: this._dir || 'ltr',\n        });\n    }\n    /**\n     * Listens to changes in the position of the overlay and sets the correct classes\n     * on the menu based on the new position. This ensures the animation origin is always\n     * correct, even if a fallback position is used for the overlay.\n     */\n    _subscribeToPositions(menu, position) {\n        if (menu.setPositionClasses) {\n            position.positionChanges.subscribe(change => {\n                this._ngZone.run(() => {\n                    const posX = change.connectionPair.overlayX === 'start' ? 'after' : 'before';\n                    const posY = change.connectionPair.overlayY === 'top' ? 'below' : 'above';\n                    menu.setPositionClasses(posX, posY);\n                });\n            });\n        }\n    }\n    /**\n     * Sets the appropriate positions on a position strategy\n     * so the overlay connects with the trigger correctly.\n     * @param positionStrategy Strategy whose position to update.\n     */\n    _setPosition(menu, positionStrategy) {\n        let [originX, originFallbackX] = menu.xPosition === 'before' ? ['end', 'start'] : ['start', 'end'];\n        let [overlayY, overlayFallbackY] = menu.yPosition === 'above' ? ['bottom', 'top'] : ['top', 'bottom'];\n        let [originY, originFallbackY] = [overlayY, overlayFallbackY];\n        let [overlayX, overlayFallbackX] = [originX, originFallbackX];\n        let offsetY = 0;\n        if (this.triggersSubmenu()) {\n            // When the menu is a sub-menu, it should always align itself\n            // to the edges of the trigger, instead of overlapping it.\n            overlayFallbackX = originX = menu.xPosition === 'before' ? 'start' : 'end';\n            originFallbackX = overlayX = originX === 'end' ? 'start' : 'end';\n            if (this._parentMaterialMenu) {\n                if (this._parentInnerPadding == null) {\n                    const firstItem = this._parentMaterialMenu.items.first;\n                    this._parentInnerPadding = firstItem ? firstItem._getHostElement().offsetTop : 0;\n                }\n                offsetY = overlayY === 'bottom' ? this._parentInnerPadding : -this._parentInnerPadding;\n            }\n        }\n        else if (!menu.overlapTrigger) {\n            originY = overlayY === 'top' ? 'bottom' : 'top';\n            originFallbackY = overlayFallbackY === 'top' ? 'bottom' : 'top';\n        }\n        positionStrategy.withPositions([\n            { originX, originY, overlayX, overlayY, offsetY },\n            { originX: originFallbackX, originY, overlayX: overlayFallbackX, overlayY, offsetY },\n            {\n                originX,\n                originY: originFallbackY,\n                overlayX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n            {\n                originX: originFallbackX,\n                originY: originFallbackY,\n                overlayX: overlayFallbackX,\n                overlayY: overlayFallbackY,\n                offsetY: -offsetY,\n            },\n        ]);\n    }\n    /** Returns a stream that emits whenever an action that should close the menu occurs. */\n    _menuClosingActions() {\n        const backdrop = this._overlayRef.backdropClick();\n        const detachments = this._overlayRef.detachments();\n        const parentClose = this._parentMaterialMenu ? this._parentMaterialMenu.closed : of();\n        const hover = this._parentMaterialMenu\n            ? this._parentMaterialMenu\n                ._hovered()\n                .pipe(filter(active => this._menuOpen && active !== this._menuItemInstance))\n            : of();\n        return merge(backdrop, parentClose, hover, detachments);\n    }\n    /** Handles mouse presses on the trigger. */\n    _handleMousedown(event) {\n        if (!isFakeMousedownFromScreenReader(event)) {\n            // Since right or middle button clicks won't trigger the `click` event,\n            // we shouldn't consider the menu as opened by mouse in those cases.\n            this._openedBy = event.button === 0 ? 'mouse' : undefined;\n            // Since clicking on the trigger won't close the menu if it opens a sub-menu,\n            // we should prevent focus from moving onto it via click to avoid the\n            // highlight from lingering on the menu item.\n            if (this.triggersSubmenu()) {\n                event.preventDefault();\n            }\n        }\n    }\n    /** Handles key presses on the trigger. */\n    _handleKeydown(event) {\n        const keyCode = event.keyCode;\n        // Pressing enter on the trigger will trigger the click handler later.\n        if (keyCode === ENTER || keyCode === SPACE) {\n            this._openedBy = 'keyboard';\n        }\n        if (this.triggersSubmenu() &&\n            ((keyCode === RIGHT_ARROW && this.dir === 'ltr') ||\n                (keyCode === LEFT_ARROW && this.dir === 'rtl'))) {\n            this._openedBy = 'keyboard';\n            this.openMenu();\n        }\n    }\n    /** Handles click events on the trigger. */\n    _handleClick(event) {\n        if (this.triggersSubmenu()) {\n            // Stop event propagation to avoid closing the parent menu.\n            event.stopPropagation();\n            this.openMenu();\n        }\n        else {\n            this.toggleMenu();\n        }\n    }\n    /** Handles the cases where the user hovers over the trigger. */\n    _handleHover() {\n        // Subscribe to changes in the hovered item in order to toggle the panel.\n        if (this.triggersSubmenu() && this._parentMaterialMenu) {\n            this._hoverSubscription = this._parentMaterialMenu._hovered().subscribe(active => {\n                if (active === this._menuItemInstance && !active.disabled) {\n                    this._openedBy = 'mouse';\n                    this.openMenu();\n                }\n            });\n        }\n    }\n    /** Gets the portal that should be attached to the overlay. */\n    _getPortal(menu) {\n        // Note that we can avoid this check by keeping the portal on the menu panel.\n        // While it would be cleaner, we'd have to introduce another required method on\n        // `MatMenuPanel`, making it harder to consume.\n        if (!this._portal || this._portal.templateRef !== menu.templateRef) {\n            this._portal = new TemplatePortal(menu.templateRef, this._viewContainerRef);\n        }\n        return this._portal;\n    }\n    /**\n     * Determines whether the trigger owns a specific menu panel, at the current point in time.\n     * This allows us to distinguish the case where the same panel is passed into multiple triggers\n     * and multiple are open at a time.\n     */\n    _ownsMenu(menu) {\n        return PANELS_TO_TRIGGERS.get(menu) === this;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"19.2.0\", type: MatMenuTrigger, isStandalone: true, selector: \"[mat-menu-trigger-for], [matMenuTriggerFor]\", inputs: { _deprecatedMatMenuTriggerFor: [\"mat-menu-trigger-for\", \"_deprecatedMatMenuTriggerFor\"], menu: [\"matMenuTriggerFor\", \"menu\"], menuData: [\"matMenuTriggerData\", \"menuData\"], restoreFocus: [\"matMenuTriggerRestoreFocus\", \"restoreFocus\"] }, outputs: { menuOpened: \"menuOpened\", onMenuOpen: \"onMenuOpen\", menuClosed: \"menuClosed\", onMenuClose: \"onMenuClose\" }, host: { listeners: { \"click\": \"_handleClick($event)\", \"mousedown\": \"_handleMousedown($event)\", \"keydown\": \"_handleKeydown($event)\" }, properties: { \"attr.aria-haspopup\": \"menu ? \\\"menu\\\" : null\", \"attr.aria-expanded\": \"menuOpen\", \"attr.aria-controls\": \"menuOpen ? menu.panelId : null\" }, classAttribute: \"mat-mdc-menu-trigger\" }, exportAs: [\"matMenuTrigger\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-menu-trigger-for], [matMenuTriggerFor]`,\n                    host: {\n                        'class': 'mat-mdc-menu-trigger',\n                        '[attr.aria-haspopup]': 'menu ? \"menu\" : null',\n                        '[attr.aria-expanded]': 'menuOpen',\n                        '[attr.aria-controls]': 'menuOpen ? menu.panelId : null',\n                        '(click)': '_handleClick($event)',\n                        '(mousedown)': '_handleMousedown($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                    },\n                    exportAs: 'matMenuTrigger',\n                }]\n        }], ctorParameters: () => [], propDecorators: { _deprecatedMatMenuTriggerFor: [{\n                type: Input,\n                args: ['mat-menu-trigger-for']\n            }], menu: [{\n                type: Input,\n                args: ['matMenuTriggerFor']\n            }], menuData: [{\n                type: Input,\n                args: ['matMenuTriggerData']\n            }], restoreFocus: [{\n                type: Input,\n                args: ['matMenuTriggerRestoreFocus']\n            }], menuOpened: [{\n                type: Output\n            }], onMenuOpen: [{\n                type: Output\n            }], menuClosed: [{\n                type: Output\n            }], onMenuClose: [{\n                type: Output\n            }] } });\n\nclass MatMenuModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuModule, imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule,\n            MatMenu,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger], exports: [CdkScrollableModule,\n            MatMenu,\n            MatCommonModule,\n            MatMenuItem,\n            MatMenuContent,\n            MatMenuTrigger] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuModule, providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [MatRippleModule,\n            MatCommonModule,\n            OverlayModule, CdkScrollableModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatMenuModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatRippleModule,\n                        MatCommonModule,\n                        OverlayModule,\n                        MatMenu,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatMenu,\n                        MatCommonModule,\n                        MatMenuItem,\n                        MatMenuContent,\n                        MatMenuTrigger,\n                    ],\n                    providers: [MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\n/**\n * Animations used by the mat-menu component.\n * Animation duration and timing values are based on:\n * https://material.io/guidelines/components/menus.html#menus-usage\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matMenuAnimations = {\n    // Represents:\n    // trigger('transformMenu', [\n    //   state(\n    //     'void',\n    //     style({\n    //       opacity: 0,\n    //       transform: 'scale(0.8)',\n    //     }),\n    //   ),\n    //   transition(\n    //     'void => enter',\n    //     animate(\n    //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n    //       style({\n    //         opacity: 1,\n    //         transform: 'scale(1)',\n    //       }),\n    //     ),\n    //   ),\n    //   transition('* => void', animate('100ms 25ms linear', style({opacity: 0}))),\n    // ])\n    /**\n     * This animation controls the menu panel's entry and exit from the page.\n     *\n     * When the menu panel is added to the DOM, it scales in and fades in its border.\n     *\n     * When the menu panel is removed from the DOM, it simply fades out after a brief\n     * delay to display the ripple.\n     */\n    transformMenu: {\n        type: 7,\n        name: 'transformMenu',\n        definitions: [\n            {\n                type: 0,\n                name: 'void',\n                styles: { type: 6, styles: { opacity: 0, transform: 'scale(0.8)' }, offset: null },\n            },\n            {\n                type: 1,\n                expr: 'void => enter',\n                animation: {\n                    type: 4,\n                    styles: { type: 6, styles: { opacity: 1, transform: 'scale(1)' }, offset: null },\n                    timings: '120ms cubic-bezier(0, 0, 0.2, 1)',\n                },\n                options: null,\n            },\n            {\n                type: 1,\n                expr: '* => void',\n                animation: {\n                    type: 4,\n                    styles: { type: 6, styles: { opacity: 0 }, offset: null },\n                    timings: '100ms 25ms linear',\n                },\n                options: null,\n            },\n        ],\n        options: {},\n    },\n    // Represents:\n    // trigger('fadeInItems', [\n    //   // TODO(crisbeto): this is inside the `transformMenu`\n    //   // now. Remove next time we do breaking changes.\n    //   state('showing', style({opacity: 1})),\n    //   transition('void => *', [\n    //     style({opacity: 0}),\n    //     animate('400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'),\n    //   ]),\n    // ])\n    /**\n     * This animation fades in the background color and content of the menu panel\n     * after its containing element is scaled in.\n     */\n    fadeInItems: {\n        type: 7,\n        name: 'fadeInItems',\n        definitions: [\n            {\n                type: 0,\n                name: 'showing',\n                styles: { type: 6, styles: { opacity: 1 }, offset: null },\n            },\n            {\n                type: 1,\n                expr: 'void => *',\n                animation: [\n                    { type: 6, styles: { opacity: 0 }, offset: null },\n                    { type: 4, styles: null, timings: '400ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)' },\n                ],\n                options: null,\n            },\n        ],\n        options: {},\n    },\n};\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst fadeInItems = matMenuAnimations.fadeInItems;\n/**\n * @deprecated\n * @breaking-change 8.0.0\n * @docs-private\n */\nconst transformMenu = matMenuAnimations.transformMenu;\n\nexport { MAT_MENU_CONTENT, MAT_MENU_DEFAULT_OPTIONS, MAT_MENU_PANEL, MAT_MENU_SCROLL_STRATEGY, MAT_MENU_SCROLL_STRATEGY_FACTORY_PROVIDER, MENU_PANEL_TOP_PADDING, MatMenu, MatMenuContent, MatMenuItem, MatMenuModule, MatMenuTrigger, fadeInItems, matMenuAnimations, transformMenu };\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[0]}