{"version":3,"file":"projects_eav-ui_src_app_content-items_services_entities_service_ts-projects_eav-ui_src_app_fe-5bc55f.4c186a8d46f49fa2.js","mappings":"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","names":["EntitiesService","_class","constructor","http","context","dnnContext","this","create","contentType","entity","post","params","appId","zoneId","update","entityId","delete","type","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","toString","force","i0","i1","i2","i3","factory","Éµfac","FeaturesModule","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","get","webApiRoot","nameId","DialogEntryComponent","dialog","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","consoleLogAngular","name","getComponent","then","component","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","ngOnDestroy","dialogRef","close","initContext","init","open","autoFocus","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","position","top","afterClosed","navRes","navigateUrl","pathFromRoot","length","window","parent","totalPopup","navigate","url","relativeTo","markForCheck","selectors","decls","vars","template","rf","ctx","FieldHintComponent_mat_hint_1_ng_container_1_Template","_r2","FieldHintComponent_mat_error_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","inputs","ngContentSelectors","_c1","consts","FieldHintComponent_mat_hint_1_Template","FieldHintComponent_mat_error_2_Template","FieldHintComponent_ng_template_3_Template","_c0","ClickStopPropagationDirective","onClick","event","stopPropagation","hostBindings","$event","copyToClipboard","str","el","document","createElement","value","setAttribute","style","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","pipe","catchError","error","console","warn","of","nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","overlap","_overlap","val","coerceBooleanProperty","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","hidden","_hidden","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","super","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","activeClass","classList","add","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","t","ANIMATION_MODULE_TYPE","Éµdir","hostAttrs","hostVars","disabled","features","MatBadgeModule","_class2","Éµmod","Éµinj","A11yModule","MatCommonModule","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","done","Promise","_asyncToGenerator","fn","self","args","arguments","apply","err"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ÉµÉµFactoryTarget.Directive }); }\n    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\nclass MatBadgeModule {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }\n    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"x_google_ignoreList":[12,13]}