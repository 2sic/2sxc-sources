{"version":3,"mappings":"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","names":["QueryDefinitionService","constructor","http","context","dnnContext","this","fetchPipeline","pipelineEntityId","dataSources","get","$2sxc","apiUrl","webApiQueryGet","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","buildDefaultModel","fixPipelineDataSources","templateDataSources","eavConstants","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","n","_a","s","Top","Left","fetchDataSources","webApiQueryDataSources","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","TypeNameForUi","UiHint","typeNameFilter","input","format","globalParts","split","classFullNameParts","savePipeline","pipeline","post","webApiQuerySave","Id","newPipelineModel","runPipeline","top","webApiQueryRun","debugStream","source","sourceOut","webApiQueryDebugStream","from","out","i0","factory","ctx_r14","QueryResultComponent","dialogData","dialogRef","visualQueryService","ngOnInit","pipelineModel$","value","t","Params","_b","filter","el","testParams","o","TestParameters","_c","_d","parameters","concat","timeUsed","result","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","sources","Sources","streams","Streams","closeDialog","close","show","original","MAT_DIALOG_DATA","selectors","ctx","StreamErrorResultComponent","errorData","openInsights","window","open","VisualQueryService","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","BehaviorSubject","Subject","parseInt","snapshot","paramMap","Subscription","ngOnDestroy","complete","dataSources$","putEntityCountOnConnections$","subscription","unsubscribe","init","attachKeyboardSave","refreshOnChildClosed","editPipelineEntity","formUrl","convertFormToUrl","items","navigate","relativeTo","refreshPipeline","saveAndRun","save","run","showDataSourceDetails","showDetails","cloneDeep","visualDesignerData","ShowDataSourceDetails","JSON","stringify","next","addDataSource","removeDataSource","pipelineDataSourceGuid","connections","streamsOut","StreamsOut","renameDataSource","name","changeDataSourceDescription","description","changeConnections","changeDataSourcePosition","position","Object","calculateDataSourceConfigs","dataSourceConfigs","forEach","Metadata","metadataItem","entries","attributeName","attributeValue","includes","Array","isArray","p","Title","d","dataSourceConfigs$","editDataSource","contentTypeName","key","getMetadata","subscribe","metadata","Items","refreshDataSourceConfigs","retrieveContentType","contentType","duration","ContentTypeName","For","Target","TargetType","Guid","error","callback","pipelineResult","showQueryResult","console","warn","setTimeout","stream","Error","showStreamErrorResult","Count","Source","SourceOut","streamResult","sourceName","showSnackBar","pipelineId","setTitle","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","add","fromEvent","firstChild","event","navigator","platform","match","metaKey","ctrlKey","keyCode","preventDefault","events","NavigationEnd","startWith","pairwise","hadChild","hasChild","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Unknown","Debug","System","typeInfos","typeInfo","ctx_r13","ctx_r15","ctx_r16","RenameStreamComponent","isSource","buildForm","label","toggleGuidedLabel","guidedLabel","toggleAdvancedMode","advancedMode","checked","rename","formValue","form","getRawValue","FormGroup","FormControl","Validators","scope","controls","pipelineResultExists","valueChanges","distinctUntilChanged","labelOptions","values","Scope","patchValue","getScopes","scopes","filtered","scopeOptions","dataSrcIdPrefix","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","destroy","a","reset","unbindContainer","removeEndpointsOnDataSource","elementId","bulkDelete","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","To","targetId","getStreamsOut","target","each","endpoint","join","putEntityCountOnConnections","sourceElementId","toUuid","outTargets","TargetIn","sEndp","getEndpoint","f","getUuid","setLabel","cssClass","click","overlay","AllowEdit","nextLinePaintStyle","uuid","uuidColorMap","assign","linePaintDefault","lineCount","maxCols","container","Container","Connector","curviness","PaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","finalPos","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","guid","pipeDataSource","connect","uuids","paintStyle","e","message","to","endpointName","isIn","isDynamic","getEndpointInfo","r","endpointInfo","style","required","l","model","enabled","fill","radius","anchor","faces","overlays","getEndpointOverlays","endpointOrOverlay","onChangeLabel","isTarget","dropOptions","hoverClass","activeClass","location","width","afterClosed","newLabel","bind","info","targetEndpoint","deleteEndpoint","deleteConnection","fireEvent","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","trimmed","trim","endsWith","substring","oxw","ctx_r20","ctx_r27","ctx_r30","PlumbEditorComponent","loadScripts","test","src","scriptLoaded$","plumber","pipelineDesignerData$","GeneralHelpers","templateModel$","combineLatest","pipelineDesignerData","hardReset","detectChanges","calculateTypeInfos","allowEdit","ngAfterViewInit","domDataSourcesLoaded$","domDataSourcesRef","changes","scriptLoaded","domDataSourcesLoaded","Plumber","domRootRef","nativeElement","configureDataSource","getTypeName","partAssemblyAndType","isOutDataSource","remove","confirm","openHelp","url","editName","newName","editDescription","newDescription","ctx_r22","ctx_r24","ctx_r25","ctx_r26","ctx_r28","RunExplorerComponent","asObservable","warnings$","warnings","queryParams","param","matched","midMatch","exec","testMid","urlMid","u","moduleId","oldMidMatch","calculateWarnings","visualDesignerData$","editPipeline","openParamsHelp","saveAndRunQuery","openRestApi","GoToDevRest","ctx_r7","ctx_r10","ctx_r12","AddExplorerComponent","difficulties","default","sorted$","difficulty$","difficulty","maxDifficulty","cloned","sort","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","toggleDifficulty","advanced","toggleItem","item","toggledItems","trackGroups","index","trackDataSources","routes","path","component","explorer","toggleExplorer","activeExplorer","VisualQueryComponent","decls","children","matcher","edit","loadChildren","Promise","then","m","EditModule","history","VisualQueryRoutingModule","RouterModule","VisualQueryModule","Context","MetadataService","ContentTypesService","imports","CommonModule","SharedComponentsModule","MatIconModule","MatButtonModule","MatSlideToggleModule","MatSnackBarModule","MatDialogModule","MatTabsModule","MatFormFieldModule","ReactiveFormsModule","MatSelectModule","MatInputModule"],"sources":["./projects/eav-ui/src/app/visual-query/services/query-definition.service.ts","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.html","./projects/eav-ui/src/app/visual-query/query-result/query-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/eav-ui/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/eav-ui/src/app/visual-query/services/visual-query.service.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/eav-ui/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/eav-ui/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/eav-ui/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/eav-ui/src/app/visual-query/visual-query-routing.module.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.ts","./projects/eav-ui/src/app/visual-query/visual-query.component.html","./projects/eav-ui/src/app/visual-query/visual-query.module.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          TypeNameForUi: undefined,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, filter, fromEvent, map, pairwise, startWith, Subject, Subscription } from 'rxjs';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceConfig, DataSourceConfigs, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n  dataSourceConfigs$ = new BehaviorSubject<DataSourceConfigs>({});\r\n  pipelineResult?: PipelineResult;\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private refreshPipeline = false;\r\n  private refreshDataSourceConfigs = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline(true, true, false));\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.refreshPipeline = true;\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  showDataSourceDetails(showDetails: boolean) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const visualDesignerData: Record<string, any> = GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {};\r\n    visualDesignerData.ShowDataSourceDetails = showDetails;\r\n    pipelineModel.Pipeline.VisualDesignerData = JSON.stringify(visualDesignerData);\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  private calculateDataSourceConfigs(dataSources: PipelineDataSource[]) {\r\n    const dataSourceConfigs: DataSourceConfigs = {};\r\n    dataSources.forEach(dataSource => {\r\n      if (dataSource.EntityId == null) { return; }\r\n      dataSourceConfigs[dataSource.EntityId] = [];\r\n      dataSource.Metadata?.forEach(metadataItem => {\r\n        Object.entries(metadataItem).forEach(([attributeName, attributeValue]) => {\r\n          if (attributeValue == null || attributeValue === '') { return; }\r\n          if (['Created', 'Guid', 'Id', 'Modified', 'Title', '_Type'].includes(attributeName)) { return; }\r\n          if (Array.isArray(attributeValue) && attributeValue[0]?.Title != null && attributeValue[0]?.Id != null) {\r\n            attributeValue = `${attributeValue[0].Title} (${attributeValue[0].Id})`;\r\n          }\r\n          const dataSourceConfig: DataSourceConfig = {\r\n            name: attributeName,\r\n            value: attributeValue,\r\n          };\r\n          dataSourceConfigs[dataSource.EntityId].push(dataSourceConfig);\r\n        });\r\n      });\r\n    });\r\n    this.dataSourceConfigs$.next(dataSourceConfigs);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const contentTypeName = dataSource.ContentType;\r\n    const targetType = eavConstants.metadata.entity.targetType;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata(targetType, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.Items.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata.Items[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        this.refreshDataSourceConfigs = true;\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName).subscribe({\r\n        next: contentType => {\r\n          if (contentType == null) {\r\n            this.snackBar.open('DataSource doesn\\'t have any configuration', undefined, { duration: 3000 });\r\n            return;\r\n          }\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                TargetType: eavConstants.metadata.entity.targetType,\r\n                Guid: key,\r\n              },\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n          this.refreshDataSourceConfigs = true;\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          const message = 'Server reports error - this usually means that this DataSource doesn\\'t have any configuration';\r\n          this.snackBar.open(message, undefined, { duration: 3000 });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.pipelineResult = pipelineResult;\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(refreshPipeline: boolean, refreshDataSourceConfigs: boolean, showSnackBar: boolean) {\r\n    if (showSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (showSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n      if (refreshPipeline) {\r\n        this.pipelineModel$.next(pipelineModel);\r\n      }\r\n      if (refreshDataSourceConfigs) {\r\n        this.calculateDataSourceConfigs(pipelineModel.DataSources);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        if (this.refreshPipeline || this.refreshDataSourceConfigs) {\r\n          this.fetchPipeline(this.refreshPipeline, this.refreshDataSourceConfigs, this.refreshPipeline);\r\n        }\r\n        this.refreshPipeline = false;\r\n        this.refreshDataSourceConfigs = false;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Rename stream</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <p class=\"dialog-description\"></p> -->\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Simple form -->\r\n    <ng-container *ngIf=\"!isSource || !pipelineResultExists\">\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"label\" required>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"isSource && !pipelineResultExists\">\r\n        You will get suggestions for out-streams after you run query\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n\r\n    <!-- Rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedLabel\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <mat-select *ngIf=\"guidedLabel\" formControlName=\"label\" required\r\n          [placeholder]=\"!labelOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let labelOption of labelOptions\" [value]=\"labelOption\">\r\n            {{ labelOption }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedLabel\" formControlName=\"label\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedLabel }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedLabel(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedLabel }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedLabel(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <!-- Extra button for rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n    </ng-container>\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"rename()\">\r\n      Rename\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { distinctUntilChanged, startWith, Subscription } from 'rxjs';\r\nimport { ContentTypesService } from '../../../app-administration/services';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { VisualQueryService } from '../../services/visual-query.service';\r\nimport { RenameStreamDialogControls, RenameStreamDialogData, RenameStreamDialogFormValue } from './rename-stream.models';\r\n\r\n@Component({\r\n  selector: 'app-rename-stream',\r\n  templateUrl: './rename-stream.component.html',\r\n  styleUrls: ['./rename-stream.component.scss']\r\n})\r\nexport class RenameStreamComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  controls: RenameStreamDialogControls;\r\n  isSource = this.dialogData.isSource;\r\n  pipelineResultExists = this.visualQueryService.pipelineResult != null;\r\n  scopeOptions: ScopeOption[] = [];\r\n  labelOptions: string[] = [];\r\n  guidedLabel = true;\r\n  advancedMode = false;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: RenameStreamDialogData,\r\n    private dialogRef: MatDialogRef<RenameStreamComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(label?: string): void {\r\n    this.dialogRef.close(label);\r\n  }\r\n\r\n  toggleGuidedLabel(guidedLabel: boolean): void {\r\n    this.guidedLabel = guidedLabel;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  rename(): void {\r\n    const formValue: RenameStreamDialogFormValue = this.form.getRawValue();\r\n    this.closeDialog(formValue.label);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({\r\n      label: new FormControl(this.dialogData.label, Validators.required),\r\n      scope: new FormControl(eavConstants.scopes.default.value),\r\n    });\r\n    this.controls = this.form.controls as any;\r\n\r\n    if (!this.isSource || !this.pipelineResultExists) { return; }\r\n\r\n    this.subscription.add(\r\n      this.controls.scope.valueChanges.pipe(\r\n        startWith<string>(this.controls.scope.value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.labelOptions = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n          .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out\r\n          .filter(out => out.Scope === scope)\r\n          .map(out => out.Name);\r\n        if (!this.labelOptions.includes(this.controls.label.value) && this.controls.label.value != null) {\r\n          this.controls.label.patchValue(null);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      const sourceOut = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n        .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out;\r\n      const filtered = scopes.filter(s => sourceOut.some(o => o.Scope === s.value));\r\n      this.scopeOptions = filtered;\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\nimport { RenameStreamComponent } from './rename-stream/rename-stream.component';\r\nimport { RenameStreamDialogData } from './rename-stream/rename-stream.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n  private dialogRef: MatDialogRef<RenameStreamComponent>;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.dialogRef?.close();\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (overlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint(pipelineDataSource.EntityGuid);\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(pipelineDataSource.EntityGuid), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn\r\n      ? this.buildTargetEndpoint(pipelineDataSource.EntityGuid, style)\r\n      : this.buildSourceEndpoint(pipelineDataSource.EntityGuid, style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endpoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endpoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = true;\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = false;\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: !isSource,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' },\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n        },\r\n      ],\r\n    ];\r\n  }\r\n\r\n  private onChangeLabel(endpointOrOverlay: PlumbType, isSource: boolean, pipelineDataSourceGuid: string) {\r\n    if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n    const overlay: PlumbType = endpointOrOverlay.getOverlay ? endpointOrOverlay.getOverlay('endpointLabel') : endpointOrOverlay;\r\n    const data: RenameStreamDialogData = {\r\n      pipelineDataSourceGuid,\r\n      isSource,\r\n      label: overlay.label,\r\n    };\r\n    this.dialogRef = this.dialog.open(RenameStreamComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.dialogRef.afterClosed().subscribe(newLabel => {\r\n      if (!newLabel) { return; }\r\n      overlay.setLabel(newLabel);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\" [ngClass]=\"{\r\n        'show-details': templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <ng-container\r\n        *ngIf=\"templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\">\r\n        <hr style=\"margin: 0\">\r\n        <table class=\"configs\">\r\n          <tr class=\"config\" *ngFor=\"let config of templateModel.dataSourceConfigs[dataSource.EntityId]\">\r\n            <td class=\"config-name\" [title]=\"config.name\">{{ config.name }}</td>\r\n            <td class=\"config-value\" [title]=\"config.value\">{{ config.value }}</td>\r\n          </tr>\r\n        </table>\r\n      </ng-container>\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <div class=\"add-endpoint sourceEndpoint dynamic\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n      </div>\r\n\r\n      <div class=\"many-in targetEndpoint dynamic\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, Observable, Subscription } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    const pipelineDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel?.Pipeline.VisualDesignerData) ?? {}),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([\r\n      this.visualQueryService.pipelineModel$,\r\n      this.visualQueryService.dataSources$,\r\n      pipelineDesignerData$,\r\n      this.visualQueryService.dataSourceConfigs$,\r\n    ]).pipe(\r\n      map(([pipelineModel, dataSources, pipelineDesignerData, dataSourceConfigs]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n          showDataSourceDetails: pipelineDesignerData.ShowDataSourceDetails ?? false,\r\n          dataSourceConfigs,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n          this.dialog,\r\n          this.viewContainerRef,\r\n          this.changeDetectorRef,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    const dataSource = this.visualQueryService.dataSources$.value.find(ds => ds.PartAssemblyAndType === partAssemblyAndType);\r\n    return this.queryDefinitionService.typeNameFilter(dataSource?.TypeNameForUi || partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\" *ngIf=\"visualDesignerData$ | async as visualDesignerData\">\r\n      <mat-slide-toggle color=\"primary\" labelPosition=\"before\" [checked]=\"visualDesignerData.ShowDataSourceDetails\"\r\n        (change)=\"showDataSourceDetails($event)\">\r\n        Show DataSource Params\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon>code_curly</mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { map, Observable } from 'rxjs';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n  visualDesignerData$: Observable<Record<string, any>>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$.asObservable();\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n    this.visualDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {}),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  showDataSourceDetails(event: MatSlideToggleChange): void {\r\n    this.visualQueryService.showDataSourceDetails(event.checked);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId?.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" color=\"primary\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, map, Observable } from 'rxjs';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { edit } from '../edit/edit.matcher';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { RenameStreamComponent } from './plumb-editor/rename-stream/rename-stream.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n    RenameStreamComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_visual-query_visual-query_module_ts.514dd580dd20d2db.js"}