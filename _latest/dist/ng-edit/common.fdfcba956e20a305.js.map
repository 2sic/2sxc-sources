{"version":3,"mappings":"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","names":["AnalyzeSettingsValueComponent","snackBar","this","params","value","copyToClipboard","open","duration","s","i0","selectors","ctx","contentExportDialog","name","initContext","panelSize","panelClass","getComponent","t","ContentExportComponent","routes","path","component","DialogEntryComponent","data","dialog","ContentExportRoutingModule","r","RouterModule","ContentExportModule","Context","ContentExportService","AppDialogConfigService","ContentTypesService","imports","CommonModule","SharedComponentsModule","MatDialogModule","MatButtonModule","MatIconModule","FormsModule","MatInputModule","MatSelectModule","MatRadioModule","contentImportDialog","Promise","ContentImportComponent","ContentImportRoutingModule","ContentImportModule","ContentImportService","http","context","dnnContext","formValues","from","toBase64","file","pipe","mergeMap","requestData","AppId","D","appId","toString","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","fileBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","post","$2sxc","apiUrl","webApiEntityRoot","map","result","Success","Errors","Detail","y","factory","contentItemImportDialog","ContentItemImportComponent","contentItemsDialog","ContentItemsComponent","children","GoToMetadata","loadChildren","then","m","title","matcher","edit","EditModule","refreshEdit","RefreshEditModule","ContentItemsRoutingModule","ContentItemsModule","ContentItemsService","EntitiesService","AgGridModule","MatProgressSpinnerModule","MatRippleModule","MatSnackBarModule","MatMenuModule","ReactiveFormsModule","MatSlideToggleModule","MatBadgeModule","DataTypeConstants","Boolean","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","typeName","f","i","_a","contentTypeFieldsDialog","ContentTypeFieldsComponent","editContentTypeFieldsDialog","EditContentTypeFieldsComponent","concat","GoToPermissions","ContentTypeFieldsRoutingModule","ContentTypeFieldsModule","ContentTypesFieldsService","importAppDialog","ImportAppComponent","ImportAppRoutingModule","ImportAppModule","ImportAppService","BooleanFilterComponent","filter","valueGetter","node","isFilterActive","filterType","model","filterChangedCallback","g","dropdownInsertValue","DragAndDropDirective","elementRef","zone","EventEmitter","Subscription","element","nativeElement","markStyleClass","markStyle","classList","add","dropAreaClass","runOutsideAngular","n","subscription","fromEvent","subscribe","event","preventDefault","stopPropagation","clearTimeouts","dragClass","timeouts","push","window","setTimeout","remove","unsubscribe","files","Array","dataTransfer","filterTypes","allowedFileTypes","length","filesDropped","emit","clearTimeout","timeout","E","allowedTypes","split","type","toLocaleLowerCase","filtered","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","MousedownStopPropagationDirective","scriptObjects","callback","iteration","arguments","isLast","newCallback","loadScripts","bind","scrObj","global","test","w","require","src","exportedVar"],"sources":["./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-value/analyze-settings-value.component.ts","./projects/ng-dialogs/src/app/app-administration/ag-grid-components/analyze-settings-value/analyze-settings-value.component.html","./projects/ng-dialogs/src/app/content-export/content-export-dialog.config.ts","./projects/ng-dialogs/src/app/content-export/content-export-routing.module.ts","./projects/ng-dialogs/src/app/content-export/content-export.module.ts","./projects/ng-dialogs/src/app/content-import/content-import-dialog.config.ts","./projects/ng-dialogs/src/app/content-import/content-import-routing.module.ts","./projects/ng-dialogs/src/app/content-import/content-import.module.ts","./projects/ng-dialogs/src/app/content-import/services/content-import.service.ts","./projects/ng-dialogs/src/app/content-items/content-item-import/content-item-import-dialog.config.ts","./projects/ng-dialogs/src/app/content-items/content-items-dialog.config.ts","./projects/ng-dialogs/src/app/content-items/content-items-routing.module.ts","./projects/ng-dialogs/src/app/content-items/content-items.module.ts","./projects/ng-dialogs/src/app/content-type-fields/constants/data-type.constants.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.helpers.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields-dialog.config.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields-routing.module.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.module.ts","./projects/ng-dialogs/src/app/import-app/import-app-dialog.config.ts","./projects/ng-dialogs/src/app/import-app/import-app-routing.module.ts","./projects/ng-dialogs/src/app/import-app/import-app.module.ts","./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/ng-dialogs/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/ng-dialogs/src/app/shared/directives/drag-and-drop.directive.ts","./projects/ng-dialogs/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/load-scripts.helper.ts"],"sourcesContent":["import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../../shared/helpers/copy-to-clipboard.helper';\r\n\r\n@Component({\r\n  selector: 'app-analyze-settings-value',\r\n  templateUrl: './analyze-settings-value.component.html',\r\n  styleUrls: ['./analyze-settings-value.component.scss'],\r\n})\r\nexport class AnalyzeSettingsValueComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.value);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"value-box highlight\" [tippy]=\"value\" (click)=\"copy()\">\r\n  <span class=\"value\">{{ value }}</span>\r\n</div>\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentExportDialog: DialogConfig = {\r\n  name: 'EXPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentExportComponent } = await import('./content-export.component');\r\n    return ContentExportComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentExportDialog } from './content-export-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentExportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentExportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentExportRoutingModule } from './content-export-routing.module';\r\nimport { ContentExportComponent } from './content-export.component';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentExportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentExportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentExportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentExportModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const contentItemImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_ITEM_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemImportComponent } = await import('./content-item-import.component');\r\n    return ContentItemImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentItemImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentItemsDialog: DialogConfig = {\r\n  name: 'CONTENT_ITEMS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentItemsComponent } = await import('./content-items.component');\r\n    return ContentItemsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentItemImportDialog } from './content-item-import/content-item-import-dialog.config';\r\nimport { contentItemsDialog } from './content-items-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentItemsDialog }, children: [\r\n      ...GoToMetadata.getRoutes(),\r\n      {\r\n        path: 'export/:contentTypeStaticName',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      {\r\n        path: 'export/:contentTypeStaticName/:selectedIds',\r\n        loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule)\r\n      },\r\n      { path: 'import', component: DialogEntryComponent, data: { dialog: contentItemImportDialog } },\r\n      {\r\n        path: ':contentTypeStaticName/import',\r\n        loadChildren: () => import('../content-import/content-import.module').then(m => m.ContentImportModule),\r\n        data: { title: 'Import Items' },\r\n      },\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentItemsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { ContentItemImportComponent } from './content-item-import/content-item-import.component';\r\nimport { ContentItemsRoutingModule } from './content-items-routing.module';\r\nimport { ContentItemsComponent } from './content-items.component';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentItemsComponent,\r\n    PubMetaFilterComponent,\r\n    ContentItemsStatusComponent,\r\n    ContentItemsActionsComponent,\r\n    ContentItemsEntityComponent,\r\n    ContentItemImportComponent,\r\n    CreateMetadataDialogComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentItemsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatProgressSpinnerModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    ReactiveFormsModule,\r\n    MatSlideToggleModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentItemsService,\r\n    EntitiesService,\r\n    ContentExportService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class ContentItemsModule { }\r\n","export const DataTypeConstants = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const;\r\n\r\nexport type DataTypeConstant = typeof DataTypeConstants[keyof typeof DataTypeConstants];\r\n","import { DataTypeConstants } from './constants/data-type.constants';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  const typeIconMap: Record<string, string> = {\r\n    [DataTypeConstants.Boolean]: 'toggle_on',\r\n    [DataTypeConstants.Custom]: 'extension',\r\n    [DataTypeConstants.DateTime]: 'today',\r\n    [DataTypeConstants.Empty]: 'crop_free',\r\n    [DataTypeConstants.Entity]: 'share',\r\n    [DataTypeConstants.Hyperlink]: 'link',\r\n    [DataTypeConstants.Number]: 'dialpad',\r\n    [DataTypeConstants.String]: 'text_fields',\r\n  };\r\n  return typeIconMap[typeName] ?? 'device_unknown';\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentTypeFieldsDialog: DialogConfig = {\r\n  name: 'CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentTypeFieldsComponent } = await import('./content-type-fields.component');\r\n    return ContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeFieldsDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_FIELDS_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeFieldsComponent } = await import('./edit-content-type-fields.component');\r\n    return EditContentTypeFieldsComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentTypeFieldsDialog } from './content-type-fields-dialog.config';\r\nimport { editContentTypeFieldsDialog } from './edit-content-type-fields/edit-content-type-fields-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: contentTypeFieldsDialog }, children: [\r\n      { path: 'add/:contentTypeStaticName', component: DialogEntryComponent, data: { dialog: editContentTypeFieldsDialog } },\r\n      {\r\n        path: 'update/:contentTypeStaticName/:id/:editMode',\r\n        component: DialogEntryComponent,\r\n        data: { dialog: editContentTypeFieldsDialog },\r\n      },\r\n      ...GoToMetadata.getRoutes(),\r\n      GoToPermissions.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n      },\r\n      {\r\n        matcher: refreshEdit,\r\n        loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n      },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentTypeFieldsRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { ContentTypeFieldsRoutingModule } from './content-type-fields-routing.module';\r\nimport { ContentTypeFieldsComponent } from './content-type-fields.component';\r\nimport { EditContentTypeFieldsComponent } from './edit-content-type-fields/edit-content-type-fields.component';\r\nimport { ReservedNamesValidatorDirective } from './edit-content-type-fields/reserved-names.directive';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentTypeFieldsComponent,\r\n    ContentTypeFieldsTitleComponent,\r\n    ContentTypeFieldsInputTypeComponent,\r\n    ContentTypeFieldsActionsComponent,\r\n    EditContentTypeFieldsComponent,\r\n    ContentTypeFieldsTypeComponent,\r\n    ContentTypeFieldsSpecialComponent,\r\n    ReservedNamesValidatorDirective,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentTypeFieldsRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentTypesService,\r\n    ContentTypesFieldsService,\r\n  ]\r\n})\r\nexport class ContentTypeFieldsModule { }\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const importAppDialog: DialogConfig = {\r\n  name: 'IMPORT_APP_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportAppComponent } = await import('./import-app.component');\r\n    return ImportAppComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportAppDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { importAppDialog } from './import-app-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: importAppDialog } }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ImportAppRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ImportAppRoutingModule } from './import-app-routing.module';\r\nimport { ImportAppComponent } from './import-app.component';\r\nimport { ImportAppService } from './services/import-app.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ImportAppComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ImportAppRoutingModule,\r\n    SharedComponentsModule,\r\n    MatProgressSpinnerModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ImportAppService,\r\n  ]\r\n})\r\nexport class ImportAppModule { }\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const value: boolean = this.params.valueGetter(params.node);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appMousedownStopPropagation]' })\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { EavWindow } from '../models/eav-window.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport function loadScripts(scriptObjects: ScriptObject[], callback: () => void, iteration = 0) {\r\n  const isLast = scriptObjects.length === iteration + 1;\r\n  const newCallback = isLast ? callback : loadScripts.bind(this, scriptObjects, callback, iteration + 1);\r\n  const scrObj = scriptObjects[iteration];\r\n\r\n  const global = typeof scrObj.test === 'string' ? scrObj.test : null;\r\n  const test = typeof scrObj.test === 'function' ? scrObj.test : null;\r\n  const w = window as Record<string, any>;\r\n\r\n  if (global != null && !!w[global]) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  if (test != null && test()) {\r\n    callback();\r\n    return;\r\n  }\r\n\r\n  window.require([scrObj.src], (exportedVar: any) => {\r\n    if (exportedVar && !w[global]) {\r\n      w[global] = exportedVar;\r\n    }\r\n    newCallback();\r\n  });\r\n}\r\n\r\nexport interface ScriptObject {\r\n  /** window.xxx or a function that returns a boolean */\r\n  test: string | (() => boolean);\r\n  src: string;\r\n}\r\n"],"sourceRoot":"webpack:///","file":"common.fdfcba956e20a305.js"}