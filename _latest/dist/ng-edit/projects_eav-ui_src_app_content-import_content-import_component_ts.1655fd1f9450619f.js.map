{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.1655fd1f9450619f.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","ContentImportService","constructor","context","dnnContext","evaluateContent","formValues","from","toBase64","switchMap","fileBase64","requestData","AppId","toString","DefaultLanguage","defaultLanguage","ContentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","$2sxc","webApiEntityRoot","result","Success","Errors","Detail","importContent","i0","i1","i2","i3","core","_r1","fileInput_r2","click","$event","ctx_r2","fileChange","closeDialog","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r5","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r4","back","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Template","_r6","ContentImportComponent_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_10_Case_3_Template","tmp_1_0","viewStateSelected","ContentImportComponent","dialogData","dialogRef","route","hostClass","contentImportService","transient","contentTypesService","dialogConfigSvc","DialogConfigAppService","viewStates","waiting","default","evaluated","imported","signal","contentTypeStaticName","snapshot","paramMap","ngOnInit","contentTypeTemp","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","set","Context","Language","Primary","close","event","target","filesDropped","MAT_DIALOG_DATA","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentImportComponent_Conditional_10_Template","Name","FormsModule","MatButtonModule","i4","MatRadioModule","i5","MatDialogActions","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","ngOnDestroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","elementRef","zone","snackBar","super","markStyle","allowedFileTypes","EventEmitter","dropAreaClass","dragClass","timeouts","element","nativeElement","markStyleClass","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityList","EntityService","log","classLog","queryService","QueryService","getEntities$","fnIf","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","parent","id","_angular_core__WEBPACK_IMPORTED_MODULE_7__","inject","DnnContext","HttpClient","queryUrl","hasParams","urlParams","Guids"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/http-service-base.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div class=\"eav-dialog\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Name }} Import Data</div>\r\n  </div>\r\n  <div class=\"eav-dialog-description\">\r\n    <p>\r\n      This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n      importing, and that you created the import-file using the template provided by the Export. Please visit\r\n      <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n    </p>\r\n  </div>\r\n  @if (formValues != null) {\r\n  @switch (viewStateSelected()) {\r\n  <!-- FORM -->\r\n  @case (1) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div>\r\n        <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\"\r\n          name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n  <!-- END FORM -->\r\n  <!-- WAITING -->\r\n  @case (0) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p>Please wait while processing...</p>\r\n  </div>\r\n  }\r\n  <!-- END WAITING -->\r\n  <!-- EVALUATION RESULT -->\r\n  @case (2) {\r\n  @if (evaluationResult()) {\r\n  <!-- DETAILS / STATISTICS -->\r\n  @if (evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <p class=\"eav-evaluation__title\">File contains:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>{{ evaluationResult().Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n      <li>{{ evaluationResult().Detail.LanguagesInDocumentCount }} languages</li>\r\n      <li>{{ evaluationResult().Detail.AttributeNamesInDocument.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>Create {{ evaluationResult().Detail.AmountOfEntitiesCreated }} content-items</li>\r\n      <li>Update {{ evaluationResult().Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n      <li>Delete {{ evaluationResult().Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n      <li>Ignore {{ evaluationResult().Detail.AttributeNamesNotImported.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n  </div>\r\n  }\r\n  <!-- END DETAILS / STATISTICS -->\r\n  <!-- ERRORS -->\r\n  @if (!evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      @for (error of evaluationResult().Errors; track error) {\r\n      <li>\r\n        <div>{{ errors[error.ErrorCode] }}</div>\r\n        @if (error.ErrorDetail) {\r\n        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n        }\r\n        @if (error.LineNumber) {\r\n        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n        }\r\n        @if (error.LineDetail) {\r\n        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n        }\r\n      </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n  }\r\n  <!-- END ERRORS -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"back()\">Back</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!evaluationResult().Success\" (click)=\"importContent()\">\r\n      Import\r\n    </button>\r\n  </mat-dialog-actions>\r\n  }\r\n  }\r\n  <!-- END EVALUATION RESULT -->\r\n  <!-- IMPORT RESULT -->\r\n  @case (3) {\r\n  @if (importResult()) {\r\n  <div class=\"eav-dialog-content\">\r\n    @if (importResult().Success) {\r\n    <p>Import done.</p>\r\n    }\r\n    @if (!importResult().Success) {\r\n    <p>Import failed.</p>\r\n    }\r\n  </div>\r\n  }\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n  }\r\n  <!-- END IMPORT RESULT -->\r\n  }\r\n  }\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, map } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../core';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class ContentImportComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentImportService = transient(ContentImportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentImport;\r\n\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n\r\n  contentType = signal<ContentType>(null);\r\n  viewStateSelected = signal(this.viewStates.default);\r\n  evaluationResult = signal<EvaluateContentResult>(null);\r\n  importResult = signal<ImportContentResult>(null);\r\n\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentTypeTemp = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentTypeTemp, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType.set(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected.set(this.viewStates.default);\r\n    this.evaluationResult.set(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({ selector: '[appDragAndDrop]', standalone: true })\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  \r\n  log = classLog({EntityService}, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { inject, Injectable } from '@angular/core';\r\nimport { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { Context } from '../../shared/services/context';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Base class for all services that need to make HTTP calls.\r\n * Provides important typical information and services, especially\r\n * * apiUrl(name) - to get the full API URL\r\n * * appId - the current app id\r\n * * zoneId - the current zone id\r\n */\r\n@Injectable()\r\nexport class HttpServiceBase {\r\n\r\n  protected dnnContext = inject(DnnContext);\r\n  protected http = inject(HttpClient);\r\n  protected context = inject(Context);\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Convert a short 2sxc-url into the correct full URL on the system.\r\n   * @param name 2sxc-style short url\r\n   * @returns \r\n   */\r\n  protected apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  /**\r\n   * The current app id\r\n   */\r\n  protected get appId() { return this.context.appId.toString(); }\r\n\r\n  /**\r\n   * The current zone id\r\n   */\r\n  protected get zoneId() { return this.context.zoneId.toString(); }\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}