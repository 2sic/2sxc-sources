{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.0191643837c14f5b.js","mappings":"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","names":["i0","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r4","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","BaseComponent","constructor","super","agInit","params","this","data","disableEdit","DisableEdit","enablePermissions","InputType","InputTypeCatalog","StringWysiwyg","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","static","t","fesm2022_core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","styles","ctx_r1","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","SharingOrInheriting","None","Sharing","Inheriting","closeDialog","message","dialogData","_r3","chooseShare","chooseInherit","field_r5","ContentType","Name","field_r6","StaticName","field_r7","row_r9","_r8","$implicit","inheritField","_c0","guid","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_4_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_6_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_7_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_9_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_10_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_11_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_12_Template","shareableFields","displayedShareableFieldsColumns","ShareOrInheritDialogComponent_Conditional_9_Conditional_1_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_2_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_Template","state","sharingOrInheriting","tmp_4_0","viewModel$","_r10","save","isSaveDisabled","ShareOrInheritDialogComponent","dialogRef","dialog","viewContainerRef","changeDetectorRef","initialState","shareableFields$","BehaviorSubject","undefined","inject","FeaturesService","fieldShareConfigManagement","isEnabled","FeatureNames","FieldShareConfigManagement","contentTypesFieldsService","transient","ContentTypesFieldsService","ngOnInit","title","getShareableFieldsFor","AttributeId","combineLatest","pipe","map","next","subscriptions","add","share","Id","subscribe","close","inherit","openFeatureDialog","MAT_DIALOG_DATA","ShareOrInheritDialogComponent_Conditional_5_Template","ShareOrInheritDialogComponent_Conditional_7_Template","ShareOrInheritDialogComponent_Conditional_8_Template","ShareOrInheritDialogComponent_Conditional_9_Template","ShareOrInheritDialogComponent_Conditional_10_Template","MatButtonModule","MatCardModule","MatTableModule","i5","NgClass","AsyncPipe","TranslateModule","i6","FeatureIconIndicatorComponent","$event","onRowDragEnter","onRowDragEnd","onRowDragMove","onGridReady","onSortChanged","onFilterChanged","vm_r3","contentType","Label","fields","gridOptions","sortApplied","filterApplied","ContentTypeFieldsComponent","BaseWithChildDialogComponent","router","route","snackBar","contentType$","fields$","buildGridOptions","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","contentTypesService","ContentTypesService","fetchFields","childDialogClosed$","ngOnDestroy","complete","gridApi","api","columnApi","event","setEnableCellTextSelection","setSuppressRowDrag","idArray","reOrder","movingNode","node","overNode","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","clearFocusedCell","arr","element","splice","columnStates","getColumnState","some","sort","suppressRowDrag","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navigate","relativeTo","nameCellRenderer","currentField","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","retrieveContentType","of","getFields","forkJoin","editFieldMetadata","ConfigTypes","open","duration","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","replace","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","rename","delete","confirm","openPermissions","GoToPermissions","getUrlAttribute","openImageConfiguration","console","log","imgConfig","Error","itemIdentifier","typeName","openMetadata","url","GoToMetadata","shareOrInherit","autoFocus","width","afterClosed","defaultGridOptions","getRowClass","rowClass","DisableSort","push","columnDefs","rowDrag","cellClass","split","valueGetter","cellRenderer","cellRendererParams","ColumnDefinitions","TextWide","headerName","onCellClicked","headerClass","sortable","substring","flex","minWidth","All","Notes","ActionsPinnedRight5","ContentTypeFieldsComponent_Conditional_0_Template","tmp_0_0","RouterOutlet","MatDialogActions","ToggleDebugDirective","SxcGridModule","encapsulation","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","ctx_r0","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","core","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","ActionsPinnedRight1","pinned","ActionsPinnedRight3","ActionsPinnedRight4","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","BooleanFilterComponent","IsHidden","Items","Fields","Character","Boolean","Boolean2","Boolean3","Number","TextWideType","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","EavLogger","events","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","filterParams","isFilterActive","doesFilterPass","colDef","column","context","getValue","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","FormsModule","MatRadioModule","empty","EmptyDefault","EmptyEnd","EmptyMessage","ends","newPicker","EntityPicker","StringPicker","NumberPicker","includes","isMessage","isNewPicker","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog-models.ts","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/base-with-child-dialog.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/fields/input-type-helpers.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  <!--\r\n    TODO: @SDV pls enhance as follows\r\n    ✅ If share is on or InheritMetadata is on, show various icons (already done)\r\n    ✅ If neither is on, it should not show an icon, until mouseover, then it should show the share icon to indicate it can be added\r\n    ❓ If the click should add sharing, open a dialog to configure share\r\n        - if there is no share it should Title \"Field Metadata Sharing\" show with the question \"Do you want to enable sharing to this field?\"\r\n          - if yes, it should call an endpoint on field/share(appId, attributeId, share: true, hide: false) (just add a todo in the code which will call the endpoint)\r\n        - If Share is already enabled, the Title should be \"Field Metadata Sharing\" (same) and content \"Shared as: [field.Guid]\"\r\n        - If it's in inherit mode, different dialog Title \"Field Inherits Metadata\", content \"Inherits from: [field.SysSettings.InheritMetadataOf]\"\r\n          - there is no endpoint to call here, because inherit is configured on create (separate todo)\r\n  -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsActionsComponent extends BaseComponent implements ICellRendererAngularComp, OnDestroy {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n  \r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import { Field } from \"../../shared/fields/field.model\";\r\n\r\nexport interface ShareOrInheritDialogViewModel {\r\n  shareableFields: Field[];\r\n}\r\n\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    @if (initialState != sharingOrInheriting.None) {\r\n      <button mat-icon-button tippy=\"Close dialog\"\r\n        (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    }\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @if (initialState == sharingOrInheriting.Sharing) {\r\n      <div>{{ message | translate }} {{ dialogData.Guid }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.Inheriting) {\r\n      <div>{{ message| translate }} {{\r\n      dialogData.SysSettings.InheritMetadataOf }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <div>\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\"\r\n          (click)=\"chooseShare()\">Share</button>\r\n        }\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\"\r\n          (click)=\"chooseInherit()\">Inherit</button>\r\n        }\r\n        @if (state == sharingOrInheriting.Sharing) {\r\n          <span>This will share the field definition</span>\r\n        }\r\n        @if (state == sharingOrInheriting.Inheriting && viewModel$ | async; as vm) {\r\n          <mat-card class=\"eav-table-div\">\r\n            <table mat-table [dataSource]=\"vm.shareableFields\" class=\"mat-elevation-z8 eav-fields-table\">\r\n              <ng-container matColumnDef=\"contentType\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"type\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n              </ng-container>\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"\r\n              [ngClass]=\"{'eav-selected-row': guid === row.Guid}\" (click)=\"inheritField(row)\"></tr>\r\n            </table>\r\n          </mat-card>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (initialState == sharingOrInheriting.None) {\r\n    <div class=\"eav-dialog-actions-custom\">\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\"\r\n        [disabled]=\"isSaveDisabled\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\" [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit, ViewContainerRef, inject } from '@angular/core';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { BehaviorSubject, Observable, combineLatest, map } from 'rxjs';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { ShareOrInheritDialogViewModel, SharingOrInheriting } from './share-or-inherit-dialog-models';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FeatureIconIndicatorComponent } from '../../features/feature-icon-indicator/feature-icon-indicator.component';\r\nimport { transient } from '../../core/transient';\r\n\r\n@Component({\r\n  selector: 'app-share-or-inherit-dialog',\r\n  templateUrl: './share-or-inherit-dialog.component.html',\r\n  styleUrls: ['./share-or-inherit-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    FeatureIconIndicatorComponent\r\n  ],\r\n})\r\nexport class ShareOrInheritDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type'];\r\n  title: string;\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n  initialState: SharingOrInheriting = SharingOrInheriting.None;\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n  isSaveDisabled: boolean = true;\r\n\r\n  shareableFields$ = new BehaviorSubject<Field[]>(undefined);\r\n  viewModel$: Observable<ShareOrInheritDialogViewModel>;\r\n\r\n  public features: FeaturesService = inject(FeaturesService);\r\n  private fieldShareConfigManagement = this.features.isEnabled(FeatureNames.FieldShareConfigManagement);\r\n  \r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    private dialogRef: MatDialogRef<ShareOrInheritDialogComponent>,\r\n    // All this is just for the feature dialog\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialState = !this.dialogData.SysSettings || (!this.dialogData.SysSettings.Share && !this.dialogData.SysSettings.InheritMetadataOf)\r\n      ? SharingOrInheriting.None\r\n      : this.dialogData.SysSettings.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n    if (this.initialState === SharingOrInheriting.None) {\r\n      this.title = 'SharingOrInheriting.TitleNone';\r\n      const shareableFields$ = this.contentTypesFieldsService.getShareableFieldsFor(this.dialogData.AttributeId);\r\n      this.viewModel$ = combineLatest([\r\n        shareableFields$\r\n      ]).pipe(\r\n        map(([shareableFields]) => {\r\n          this.shareableFields$.next(shareableFields);\r\n          return { shareableFields };\r\n        })\r\n      );\r\n    } else if (this.initialState === SharingOrInheriting.Sharing) {\r\n      this.title = 'SharingOrInheriting.TitleSharing';\r\n      this.message = 'SharingOrInheriting.MessageSharing';\r\n    } else if (this.initialState === SharingOrInheriting.Inheriting) {\r\n      this.title = 'SharingOrInheriting.TitleInheriting';\r\n      this.message = 'SharingOrInheriting.MessageInheriting';\r\n    }\r\n  }\r\n\r\n  chooseShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  chooseInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    this.isSaveDisabled = true;\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  save() {\r\n    if (!this.fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n      return;\r\n    }\r\n    \r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType?.Label || vm.contentType?.Name }} Fields\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.fields\" [gridOptions]=\"gridOptions\"\r\n          (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\" (rowDragMove)=\"onRowDragMove($event)\"\r\n          (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\" (filterChanged)=\"onFilterChanged($event)\"\r\n          [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n        [disabled]=\"vm.contentType == null || vm.contentType.EditInfo.ReadOnly\" (click)=\"add()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, Observable, combineLatest, forkJoin, map, of } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { BaseWithChildDialogComponent } from '../shared/components/base-with-child-dialog.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { ItemAddIdentifier, EditForm, ItemEditIdentifier, ItemIdentifier, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\n// tslint:disable-next-line:max-line-length\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { ShareOrInheritDialogComponent } from './share-or-inherit-dialog/share-or-inherit-dialog.component';\r\nimport { NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../core';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(undefined);\r\n  fields$ = new BehaviorSubject<Field[]>(undefined);\r\n  gridOptions = this.buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentTypeFieldsViewModel>;\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchFields(); }));\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.fields$\r\n    ]).pipe(\r\n      map(([contentType, fields]) => ({ contentType, fields }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const inputType = currentField.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentType$ = this.contentType$.value == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType$.value);\r\n    const fields$ = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n      this.contentType$.next(contentType);\r\n      this.fields$.next(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    // 2023-11-10 @2dm #ConfigTypesFromBackend\r\n    // https://github.com/2sic/2sxc/issues/3205\r\n    // Keep old code in till 2024-01 for ref in case something breaks\r\n    // console.warn('2dm - editFieldMetadata', field);\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes);\r\n    // const form: EditForm = {\r\n    //   items: [\r\n    //     this.createItemDefinition(field, 'All'),\r\n    //     this.createItemDefinition(field, field.Type),\r\n    //     this.createItemDefinition(field, field.InputType),\r\n    //   ],\r\n    // };\r\n\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openImageConfiguration(field: Field) {\r\n    console.log('2dm - openImageConfiguration', field);\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.dialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.IsTitle;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsTitleParams = {\r\n              onSetTitle: (field) => this.setTitle(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (params) => {\r\n            const field: Field = params.data;\r\n            this.editFieldMetadata(field);\r\n          },\r\n          cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n        },\r\n        {\r\n          field: 'Type',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Type;\r\n          },\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (params) => {\r\n            const field: Field = params.data;\r\n            return `${field.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' ');\r\n          },\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n            return inputType;\r\n          },\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => {\r\n            const params: ContentTypeFieldsInputTypeParams = {\r\n              onChangeInputType: (field) => this.changeInputType(field),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Name;\r\n          },\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (params) => {\r\n            const field: Field = params.data;\r\n            return field.Metadata?.All?.Notes;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.rename(field); break;\r\n                case 'delete': this.delete(field); break;\r\n                case 'permissions': this.openPermissions(field); break;\r\n                case 'metadata': this.openMetadata(field); break;\r\n                case 'shareOrInherit': this.shareOrInherit(field); break;\r\n                case 'image': this.openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n\r\ninterface ContentTypeFieldsViewModel {\r\n  contentType: ContentType;\r\n  fields: Field[];\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-rest-api-true-false',\r\n  templateUrl: './true-false.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [\r\n    TippyDirective,\r\n    MatIconModule,\r\n    NgClass,\r\n  ],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: 'secondary-action no-outline no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => {\r\n      const params: TrueFalseParams = {\r\n        reverse: false,\r\n      };\r\n      return params;\r\n    })(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static TextWideType: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n\r\n\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { BaseComponent } from './base.component';\r\nimport { EavLogger } from '../logging/eav-logger';\r\n\r\nconst logThis = false;\r\n\r\n// 2024-06-12 2dm experimental - remove comments if all is good mid of June\r\n// - previously had\r\n// @Directive()   // Needs the @Directive() so the compiler allows OnDestroy to be implemented\r\n// ...then tried this\r\n// @Component({\r\n//   selector: 'app-base-component-with-child',\r\n//   template: ''\r\n// })\r\n// ...but then added abstract, so I think it doesn't actually need all that\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseWithChildDialogComponent extends BaseComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', logThis);\r\n  }\r\n\r\n  // 2024-06-12 2dm - don't think this is needed since it's already on the base class\r\n  // ngOnDestroy() {\r\n  //   super.ngOnDestroy();\r\n  // }\r\n\r\n  protected childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n      // tap(() => console.log('2dm ' + 'childDialogClosed$'))\r\n    )\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { InputTypeCatalog, InputTypeStrict } from './input-type-catalog';\r\n\r\nconst empty: InputTypeStrict[] = [InputTypeCatalog.EmptyDefault, InputTypeCatalog.EmptyEnd, InputTypeCatalog.EmptyMessage];\r\n\r\nconst ends: InputTypeStrict[] = [InputTypeCatalog.EmptyDefault, InputTypeCatalog.EmptyEnd];\r\n\r\nconst newPicker: InputTypeStrict[] = [InputTypeCatalog.EntityPicker, InputTypeCatalog.StringPicker, InputTypeCatalog.NumberPicker];\r\n\r\nexport class InputTypeHelpers {\r\n  static isEmpty(inputType: InputTypeStrict): boolean {\r\n    return empty.includes(inputType);\r\n  }\r\n\r\n  static endsPreviousGroup(inputType: InputTypeStrict): boolean {\r\n    return ends.includes(inputType);\r\n  }\r\n\r\n  static isGroupStart(inputType: InputTypeStrict): boolean {\r\n    return inputType === InputTypeCatalog.EmptyDefault;\r\n  }\r\n  \r\n  static isGroupEnd(inputType: InputTypeStrict): boolean {\r\n    return inputType === InputTypeCatalog.EmptyEnd;\r\n  }\r\n\r\n  static isMessage(inputType: InputTypeStrict): boolean {\r\n    return inputType === InputTypeCatalog.EmptyMessage;\r\n  }\r\n\r\n  static isNewPicker(inputType: InputTypeStrict): boolean {\r\n    return newPicker.includes(inputType);\r\n  }\r\n\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[25]}