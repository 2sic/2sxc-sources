{"version":3,"file":"projects_eav-ui_src_app_manage-content-list_manage-content-list_component_ts.984e8d81b53cd670.js","mappings":"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","names":["AppDialogConfigService","constructor","contextSvcShared","context","this","log","EavLogger","getCurrent$","appId","a","getShared$","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_3__","jDH","factory","ɵfac","GlobalDialogConfigService","http","globalConfigService","dialogSettings$","svcId","getDialogSettings","pipe","shareReplay","refCount","reqBy","get","params","toString","map","dlgSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","i3","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn","_r2","ctx_r2","editHeader","vm_r4","header","Title","ManageContentListComponent_Conditional_0_Conditional_8_Conditional_4_Template","ManageContentListComponent_Conditional_0_Conditional_8_Conditional_5_Template","Type","item_r6","_r5","$implicit","addFromExisting","Index","addBelow","remove","editItem","Id","reordered","ManageContentListComponent_Conditional_0_Conditional_8_Template","ManageContentListComponent_Conditional_0_Conditional_9_Template","ManageContentListComponent_Conditional_0_Conditional_10_Template","$event","_r1","drop","ManageContentListComponent_Conditional_0_For_13_Template","trackByFn","closeDialog","saveList","saveAndCloseList","items","length","ManageContentListComponent","BaseWithChildDialogComponent","router","route","dialogRef","snackBar","translate","super","hostClass","items$","BehaviorSubject","header$","viewModel$","combineLatest","contentGroup","id","guid","snapshot","paramMap","part","index","parseInt","contentGroupService","transient","ContentGroupService","dialogConfigSvc","ngOnInit","fetchList","fetchHeader","fetchDialogSettings","subscriptions","add","childDialogClosed$","subscribe","ngOnDestroy","complete","dialogSettings","setDefaultLang","Primary","split","use","Current","close","open","value","duration","formUrl","convertFormToUrl","Add","Parent","Field","navigate","relativeTo","EntityId","queryParams","item","confirm","instant","removeItem","event","moveItemInArray","previousIndex","currentIndex","next","keepOrder","getList","oldIds","some","includes","sortOrder","sort","b","aIndex","indexOf","bIndex","getHeader","i4","_angular_core__WEBPACK_IMPORTED_MODULE_4__","VBU","selectors","hostVars","hostBindings","rf","ctx","ManageContentListComponent_Conditional_0_Template","tmp_0_0","RouterOutlet","CdkScrollable","MatButtonModule","i5","MatIconModule","i6","CdkDropList","CdkDrag","MatDialogActions","AsyncPipe","TranslateModule","MatDialogModule","TippyDirective","MousedownStopPropagationDirective","styles","BaseComponent","events","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","GlobalConfigService","debugState","signal","isDebug","computed","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","set","allow","oldConfig","newConfig","toggleDebugEnabled","_angular_core__WEBPACK_IMPORTED_MODULE_1__","source","options","injector","assertInInjectionContext","inject","Injector","subject","ReplaySubject","watcher","effect","err","untracked","error","manualCleanup","DestroyRef","onDestroy","destroy","asObservable","toSignal","requiresCleanup","cleanupRef","state","requireSync","kind","initialValue","sub","rejectErrors","unsubscribe","bind","current","ɵRuntimeError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/global-dialog-config.service.ts","./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.html","./projects/eav-ui/src/app/manage-content-list/manage-content-list.component.ts","./projects/eav-ui/src/app/shared/components/base-with-child-dialog.component.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalDialogConfigService } from './global-dialog-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'DialogConfigService';\r\n\r\n/**\r\n * Context aware dialog configuration service.\r\n * \r\n * It uses the shared service so the settings are cached when re-requested by anything else.\r\n */\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(private contextSvcShared: GlobalDialogConfigService, private context: Context) {\r\n  }\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.contextSvcShared.getShared$(appId);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'GlobalDialogConfigService';\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n/**\r\n * Service for getting dialog settings for the current app.\r\n * \r\n * Note that it should normally be shared, to save resources / network calls.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$')\r\n      .pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  private getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog eav-no-scrollbar\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">{{'ManageContentList.Title' | translate}}</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <router-outlet></router-outlet>\r\n      <div class=\"dialog-component-content fancy-scrollbar-light\" cdkScrollable>\r\n        @if (vm.header) {\r\n          <p>\r\n            {{'ManageContentList.Description' | translate}}\r\n          </p>\r\n          <p>\r\n            @if (vm.header.Type)\r\n            {\r\n              <span>{{ vm.header.Title }}</span>\r\n              <button mat-icon-button tippy=\"Edit header\" (click)=\"editHeader()\">\r\n                <mat-icon>edit</mat-icon>\r\n              </button>\r\n            }\r\n            @else {\r\n              {{'ManageContentList.NoHeader' | translate}}\r\n            }\r\n          </p>\r\n        }\r\n        @if (vm.items && vm.items?.length < 25 )\r\n        {\r\n          <p class=\"eav-sort-title\">\r\n            {{'ManageContentList.SortItems' | translate}}\r\n          </p>\r\n        }\r\n        @if (vm.items?.length >= 25 ) {\r\n          <p class=\"eav-sort-title\">\r\n            {{'ManageContentList.SortLotsOfItems' | translate}}\r\n          </p>\r\n        }\r\n        <div class=\"eav-dnd-list\" cdkDropList (cdkDropListDropped)=\"drop($event)\">\r\n          @for (item of vm.items; track trackByFn($index, item)) {\r\n            <div class=\"eav-dnd-item\" cdkDrag>\r\n              <div class=\"eav-dnd-item__title\">\r\n                <mat-icon class=\"eav-dnd-item__title-icon\" tippy=\"Drag to reorder the list\">drag_handle</mat-icon>\r\n                <span class=\"eav-dnd-item__title-text\" tippy=\"{{ item.Title }} ({{ item.Id }})\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </span>\r\n              </div>\r\n              <div>\r\n                <!-- most buttons should only exist if it has a real ID, except for remove - which should also remove null-entries -->\r\n                <button mat-icon-button [tippy]=\"'Fields.Picker.AddExistingItem' | translate\" appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0\" (click)=\"addFromExisting(item.Index)\">\r\n                  <mat-icon>playlist_add</mat-icon>\r\n                </button>\r\n                <button mat-icon-button [tippy]=\"'Fields.Picker.AddItemBelow' | translate\" appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0 || reordered\" (click)=\"addBelow(item.Index)\">\r\n                  <mat-icon>add</mat-icon>\r\n                </button>\r\n                <button mat-icon-button [tippy]=\"'Fields.Picker.Remove' | translate\" appMousedownStopPropagation\r\n                  [disabled]=\"reordered\" (click)=\"remove(item)\">\r\n                  <mat-icon>remove</mat-icon>\r\n                </button>\r\n                <button mat-icon-button [tippy]=\"'Fields.Picker.Edit' | translate\" appMousedownStopPropagation\r\n                  [disabled]=\"item.Id === 0\" (click)=\"editItem(item.Id)\">\r\n                  <mat-icon>edit</mat-icon>\r\n                </button>\r\n              </div>\r\n            </div>\r\n          }\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">{{'General.Buttons.Cancel' | translate}}</button>\r\n      <button mat-raised-button color=\"accent\" (click)=\"saveList()\">{{'General.Buttons.Save' | translate}}</button>\r\n      <button mat-raised-button color=\"accent\" (click)=\"saveAndCloseList()\" [tippy]=\"'Form.Buttons.SaveAndClose' | translate\">\r\n        <mat-icon class=\"eav-raised-button-icon\">done</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { CdkDragDrop, moveItemInArray, CdkDropList, CdkDrag } from '@angular/cdk/drag-drop';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentGroup } from './models/content-group.model';\r\nimport { GroupHeader } from './models/group-header.model';\r\nimport { ContentGroupService } from './services/content-group.service';\r\nimport { TranslateService, TranslateModule } from '@ngx-translate/core';\r\nimport { BaseWithChildDialogComponent } from '../shared/components/base-with-child-dialog.component';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { CdkScrollable } from '@angular/cdk/scrolling';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { MousedownStopPropagationDirective } from '../shared/directives/mousedown-stop-propagation.directive';\r\nimport { transient } from '../core';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\n\r\n@Component({\r\n  selector: 'app-manage-content-list',\r\n  templateUrl: './manage-content-list.component.html',\r\n  styleUrls: ['./manage-content-list.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    RouterOutlet,\r\n    CdkScrollable,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    CdkDropList,\r\n    CdkDrag,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    MatDialogModule,\r\n    TippyDirective,\r\n    MousedownStopPropagationDirective,\r\n  ],\r\n})\r\nexport class ManageContentListComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private items$ = new BehaviorSubject<GroupHeader[]>(null);\r\n  private header$ = new BehaviorSubject<GroupHeader>(null);\r\n  viewModel$ = combineLatest([this.items$, this.header$]).pipe(\r\n    map(([items, header]) => ({ items, header })),\r\n  );\r\n\r\n  private contentGroup: ContentGroup = {\r\n    id: null,\r\n    guid: this.route.snapshot.paramMap.get('guid'),\r\n    part: this.route.snapshot.paramMap.get('part'),\r\n    index: parseInt(this.route.snapshot.paramMap.get('index'), 10),\r\n  };\r\n  reordered = false;\r\n\r\n  private contentGroupService = transient(ContentGroupService);\r\n  private dialogConfigSvc = transient(AppDialogConfigService);\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ManageContentListComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private translate: TranslateService,\r\n  ) {\r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchList();\r\n    this.fetchHeader();\r\n    this.fetchDialogSettings();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => {\r\n      this.fetchList(true);\r\n      this.fetchHeader();\r\n    }));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.items$.complete();\r\n    this.header$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.dialogConfigSvc.getCurrent$().subscribe(dialogSettings => {\r\n      this.translate.setDefaultLang(dialogSettings.Context.Language.Primary.split('-')[0]);\r\n      this.translate.use(dialogSettings.Context.Language.Current.split('-')[0]);\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  saveList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items$.value).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.fetchList();\r\n      this.fetchHeader();\r\n    });\r\n  }\r\n\r\n  saveAndCloseList() {\r\n    this.snackBar.open('Saving...');\r\n    this.contentGroupService.saveList(this.contentGroup, this.items$.value).subscribe(() => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n  }\r\n\r\n  editHeader() {\r\n    const form: EditForm = {\r\n      items: [\r\n        {\r\n          Add: this.header$.value.Id === 0,\r\n          Index: 0,\r\n          Parent: this.contentGroup.guid,\r\n          Field: 'listcontent',\r\n        },\r\n        {\r\n          Add: this.header$.value.Id === 0,\r\n          Index: 0,\r\n          Parent: this.contentGroup.guid,\r\n          Field: 'listpresentation',\r\n        },\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(id: number) {\r\n    const form: EditForm = {\r\n      items: [{ EntityId: id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  addFromExisting(index: number) {\r\n    const queryParams = { add: true };\r\n    this.router.navigate([`${this.contentGroup.guid}/${this.contentGroup.part}/${index + 1}/replace`], { relativeTo: this.route, queryParams });\r\n  }\r\n\r\n  addBelow(index: number) {\r\n    const form: EditForm = {\r\n      items: [{ Add: true, Index: index + 1, Parent: this.contentGroup.guid, Field: this.contentGroup.part }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  remove(item: GroupHeader) {\r\n    if (!confirm(this.translate.instant('ManageContentList.ConfirmRemove'))) { return; }\r\n    this.snackBar.open('Removing...');\r\n    this.contentGroupService.removeItem(this.contentGroup, item.Index).subscribe(() => {\r\n      this.snackBar.open('Removed', null, { duration: 2000 });\r\n      this.fetchList();\r\n    });\r\n  }\r\n\r\n  drop(event: CdkDragDrop<GroupHeader[]>) {\r\n    const items = [...this.items$.value];\r\n    moveItemInArray(items, event.previousIndex, event.currentIndex);\r\n    this.items$.next(items);\r\n    this.reordered = true;\r\n  }\r\n\r\n  trackByFn(index: number, item: GroupHeader) {\r\n    // we use both Index and Id because all demo items have Id=0\r\n    return `${item.Index}+${item.Id}`;\r\n  }\r\n\r\n  private fetchList(keepOrder = false) {\r\n    this.contentGroupService.getList(this.contentGroup).subscribe(items => {\r\n      if (this.reordered) {\r\n        const oldIds = this.items$.value.map(item => item.Id);\r\n        const idsChanged = this.items$.value.length !== items.length || items.some(item => !oldIds.includes(item.Id));\r\n        // for usecase where list is fetched on child closed and wasn't changed in the meantime keeps the order before child was opened\r\n        if (!idsChanged && keepOrder) {\r\n          const sortOrder = this.items$.value.map(item => item.Index);\r\n          items.sort((a, b) => {\r\n            const aIndex = sortOrder.indexOf(a.Index);\r\n            const bIndex = sortOrder.indexOf(b.Index);\r\n            if (aIndex === -1 || bIndex === -1) { return 0; }\r\n            return aIndex - bIndex;\r\n          });\r\n        } else if (keepOrder) {\r\n          this.snackBar.open('List was changed from somewhere else. Order of items is reset', null, { duration: 5000 });\r\n        }\r\n      }\r\n      this.items$.next(items);\r\n      this.reordered = false;\r\n    });\r\n  }\r\n\r\n  private fetchHeader() {\r\n    this.contentGroupService.getHeader(this.contentGroup).subscribe(header => {\r\n      this.header$.next(header);\r\n    });\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith, tap } from 'rxjs';\r\nimport { BaseComponent } from './base.component';\r\nimport { EavLogger } from '../logging/eav-logger';\r\n\r\nconst logThis = false;\r\n\r\n// 2024-06-12 2dm experimental - remove comments if all is good mid of June\r\n// - previously had\r\n// @Directive()   // Needs the @Directive() so the compiler allows OnDestroy to be implemented\r\n// ...then tried this\r\n// @Component({\r\n//   selector: 'app-base-component-with-child',\r\n//   template: ''\r\n// })\r\n// ...but then added abstract, so I think it doesn't actually need all that\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseWithChildDialogComponent extends BaseComponent implements OnDestroy {\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    public log?: EavLogger\r\n  ) {\r\n    super();\r\n    this.log ??= new EavLogger('BaseComponent', logThis);\r\n  }\r\n\r\n  // 2024-06-12 2dm - don't think this is needed since it's already on the base class\r\n  // ngOnDestroy() {\r\n  //   super.ngOnDestroy();\r\n  // }\r\n\r\n  protected childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n      // tap(() => console.log('2dm ' + 'childDialogClosed$'))\r\n    )\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n","/**\n * @license Angular v17.3.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"x_google_ignoreList":[6]}