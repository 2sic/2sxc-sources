{"version":3,"file":"default-projects_eav-ui_src_app_shared_modules_save-close-button-fab_save-close-button-fab_co-727b96.6534c09bba86589f.js","mappings":"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","names":["delayWhen","delayDurationSelector","subscriptionDelay","source","concat","pipe","take","ignoreElements","operate","subscriber","subscribe","createOperatorSubscriber","noop","mergeMap","value","index","innerFrom","mapTo","delay","due","scheduler","asyncScheduler","duration","timer","_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","i0","formFieldId_r1","id","ctx_r1","_classList","showPanel","_animationsDisabled","_color","ariaLabel","_getPanelAriaLabelledby","MatAutocompleteSelectedEvent","option","constructor","this","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","providedIn","factory","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","autoActiveFirstOption","autoSelectActiveOption","hideSingleSelectionIndicator","requireSelection","hasBackdrop","MatAutocomplete","_changeDetectorRef","inject","ChangeDetectorRef","_elementRef","ElementRef","_defaults","_activeOptionChanges","Subscription","EMPTY","_keyManager","isOpen","_isOpen","_latestOpeningTrigger","_setColor","markForCheck","template","panel","options","optionGroups","ariaLabelledby","displayWith","panelWidth","disableRipple","optionSelected","EventEmitter","opened","closed","optionActivated","classList","nativeElement","className","_hideSingleSelectionIndicator","_syncParentProperties","_IdGenerator","getId","inertGroups","platform","Platform","SAFARI","ngAfterContentInit","ActiveDescendantKeyManager","withWrap","skipPredicate","_skipPredicate","change","emit","toArray","_setVisibility","ngOnDestroy","destroy","unsubscribe","_setScrollTop","scrollTop","_getScrollTop","length","_emitSelectEvent","event","labelId","static","__ngFactoryType__","type","selectors","contentQueries","dirIndex","MatOption","MAT_OPTGROUP","_t","viewQuery","TemplateRef","first","hostAttrs","inputs","booleanAttribute","outputs","exportAs","features","provide","MAT_OPTION_PARENT_COMPONENT","useExisting","ngContentSelectors","decls","vars","consts","styles","encapsulation","changeDetection","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","multi","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","injector","Injector","createRepositionScrollStrategy","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","deps","useFactory","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_overlay","_environmentInjector","EnvironmentInjector","_element","_injector","_viewContainerRef","ViewContainerRef","_zone","NgZone","_dir","Directionality","optional","_formField","MAT_FORM_FIELD","host","_viewportRuler","ViewportRuler","_scrollStrategy","_renderer","Renderer2","_overlayRef","_portal","_componentDestroyed","_initialized","Subject","_keydownSubscription","_outsideClickSubscription","_cleanupWindowBlur","_previousValue","_valueOnAttach","_valueOnLastKeydown","_positionStrategy","_manuallyFloatingLabel","_closingActionsSubscription","_viewportSubscription","_breakpointObserver","BreakpointObserver","_handsetLandscapeSubscription","_canOpenOnNextFocus","_valueBeforeAutoSelection","_pendingAutoselectedOption","_closeKeyEventStream","_overlayPanelClass","coerceArray","overlayPanelClass","_windowBlurHandler","panelOpen","_hasFocus","_onChange","_onTouched","autocomplete","position","connectedTo","autocompleteAttribute","autocompleteDisabled","_aboveClass","ngAfterViewInit","next","complete","listen","ngOnChanges","changes","_setStrategyPositions","updatePosition","_destroyPanel","_clearFromModal","_overlayAttached","openPanel","_openPanelInternal","closePanel","_resetLabel","run","hasAttached","detach","_updatePanelState","detectChanges","_trackedModal","removeAriaReferencedId","panelClosingActions","merge","optionSelections","tabOut","filter","_getOutsideClickStream","detachments","of","map","MatOptionSelectionChange","defer","startWith","switchMap","onSelectionChange","activeOption","activeItem","Observable","observer","listener","clickTarget","_getEventTarget","formField","getConnectedOverlayOrigin","customOrigin","elementRef","contains","overlayElement","cleanups","forEach","current","writeValue","Promise","resolve","then","_assignOptionValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","disabled","_handleKeydown","e","keyCode","hasModifier","hasModifierKey","ESCAPE","preventDefault","ENTER","_selectViaInteraction","_resetActiveItem","prevActiveItem","isArrowKey","UP_ARROW","DOWN_ARROW","TAB","onKeydown","_canOpen","_scrollToOption","activeItemIndex","_handleInput","target","parseFloat","selectedOption","find","selected","_getDisplayValue","deselect","_clearPreviousSelectedOption","valueOnAttach","_handleFocus","_attachOverlay","_floatLabel","_handleClick","_getFocusedElementPierceShadowDom","shouldAnimate","floatLabel","_animateAndLockLabel","_subscribeToClosingActions","initialRender","afterNextRender","optionChanges","tap","reapplyLastPosition","wasOpen","_emitOpened","_setValueAndClose","dispose","toDisplay","_updateNativeInputValue","_control","toSelect","focus","skip","emitEvent","addAriaReferencedId","overlayRef","setOrigin","_getConnectedElement","updateSize","width","_getPanelWidth","TemplatePortal","getLabelId","createOverlayRef","_getOverlayConfig","observe","Breakpoints","HandsetLandscape","result","matches","withFlexibleDimensions","withGrowAfterOpen","withViewportMargin","attach","color","_applyModalPanelOwnership","_handlePanelKeydown","stopPropagation","keydownEvents","outsidePointerEvents","OverlayConfig","positionStrategy","_getOverlayPosition","scrollStrategy","direction","undefined","backdropClass","panelClass","disableAnimations","strategy","createFlexibleConnectedPositionStrategy","withPush","belowPositions","originX","originY","overlayX","overlayY","abovePositions","positions","withPositions","_getHostWidth","getBoundingClientRect","firstEnabledOptionIndex","get","setActiveItem","element","readOnly","labelCount","_countGroupLabelsBeforeOption","_getHostElement","newScrollPosition","_getOptionScrollPosition","offsetTop","offsetHeight","modal","closest","panelId","hostVars","hostBindings","$event","toString","MatAutocompleteModule","providers","imports","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","_r1","onClick","triggerOnFormSubmit","label","ngClass","icon","SaveCloseButtonFabComponent","SaveCloseButtonBase","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","SaveCloseButtonFabComponent_ng_template_1_Template","NgClass","MatIconModule","i1","i2","i3","i4","MatRippleModule","i5","TranslateModule","i6","TippyDirective"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/rxjs/dist/esm/internal/operators/delayWhen.js","./node_modules/rxjs/dist/esm/internal/operators/ignoreElements.js","./node_modules/rxjs/dist/esm/internal/operators/delay.js","./node_modules/@angular/material/fesm2022/autocomplete.mjs","./node_modules/rxjs/dist/esm/internal/operators/mapTo.js","./projects/eav-ui/src/app/shared/modules/save-close-button-fab/save-close-button-fab.component.html","./projects/eav-ui/src/app/shared/modules/save-close-button-fab/save-close-button-fab.component.ts"],"sourcesContent":["import { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\nimport { innerFrom } from '../observable/innerFrom';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    }\n    return mergeMap((value, index) => innerFrom(delayDurationSelector(value, index)).pipe(take(1), mapTo(value)));\n}\n","import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function ignoreElements() {\n    return operate((source, subscriber) => {\n        source.subscribe(createOperatorSubscriber(subscriber, noop));\n    });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\nexport function delay(due, scheduler = asyncScheduler) {\n    const duration = timer(due, scheduler);\n    return delayWhen(() => duration);\n}\n","import { c as MAT_OPTION_PARENT_COMPONENT, M as MatOption, d as MAT_OPTGROUP, e as MatOptionSelectionChange, _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition } from './option-BzhYL_xC.mjs';\nexport { a as MatOptgroup } from './option-BzhYL_xC.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, Injector, EnvironmentInjector, ViewContainerRef, NgZone, Renderer2, afterNextRender, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { createRepositionScrollStrategy, createOverlayRef, OverlayConfig, createFlexibleConnectedPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { _IdGenerator, ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { Platform, _getFocusedElementPierceShadowDom, _getEventTarget } from '@angular/cdk/platform';\nimport { Subscription, Subject, merge, of, defer, Observable } from 'rxjs';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, TAB, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filter, map, startWith, switchMap, tap, delay, take } from 'rxjs/operators';\nimport { h as MAT_FORM_FIELD } from './form-field-C9DZXojn.mjs';\nimport { M as MatOptionModule } from './index-DwiL-HGk.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport './ripple-BYgV4oZC.mjs';\nimport '@angular/cdk/private';\nimport './pseudo-checkbox-DDmgx3P4.mjs';\nimport './structural-styles-CObeNzjn.mjs';\nimport '@angular/common';\nimport '@angular/cdk/observers/private';\nimport './index-BFRo2fUq.mjs';\nimport './pseudo-checkbox-module-4F8Up4PL.mjs';\n\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n    source;\n    option;\n    constructor(\n    /** Reference to the autocomplete panel that emitted the event. */\n    source, \n    /** Option that was selected. */\n    option) {\n        this.source = source;\n        this.option = option;\n    }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = new InjectionToken('mat-autocomplete-default-options', {\n    providedIn: 'root',\n    factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY,\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        autoActiveFirstOption: false,\n        autoSelectActiveOption: false,\n        hideSingleSelectionIndicator: false,\n        requireSelection: false,\n        hasBackdrop: false,\n    };\n}\n/** Autocomplete component. */\nclass MatAutocomplete {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS);\n    _animationsDisabled = _animationsDisabled();\n    _activeOptionChanges = Subscription.EMPTY;\n    /** Manages active item in option list based on key events. */\n    _keyManager;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n        return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n    /** Latest trigger that opened the autocomplete. */\n    _latestOpeningTrigger;\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n        this._color = value;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** @docs-private theme color of the panel */\n    _color;\n    // The @ViewChild query for TemplateRef here needs to be static because some code paths\n    // lead to the overlay being created before change detection has finished for this component.\n    // Notably, another component may trigger `focus` on the autocomplete-trigger.\n    /** @docs-private */\n    template;\n    /** Element for the panel containing the autocomplete options. */\n    panel;\n    /** Reference to all options within the autocomplete. */\n    options;\n    /** Reference to all option groups within the autocomplete. */\n    optionGroups;\n    /** Aria label of the autocomplete. */\n    ariaLabel;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith = null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption;\n    /** Whether the active option should be selected as the user is navigating. */\n    autoSelectActiveOption;\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    requireSelection;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth;\n    /** Whether ripples are disabled within the autocomplete panel. */\n    disableRipple;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    optionActivated = new EventEmitter();\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n        this._classList = value;\n        this._elementRef.nativeElement.className = '';\n    }\n    _classList;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n        return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n        this._hideSingleSelectionIndicator = value;\n        this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator;\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n        if (this.options) {\n            for (const option of this.options) {\n                option._changeDetectorRef.markForCheck();\n            }\n        }\n    }\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = inject(_IdGenerator).getId('mat-autocomplete-');\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    inertGroups;\n    constructor() {\n        const platform = inject(Platform);\n        // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n        // Safari using VoiceOver. We should occasionally check back to see whether the bug\n        // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n        // option altogether.\n        this.inertGroups = platform?.SAFARI || false;\n        this.autoActiveFirstOption = !!this._defaults.autoActiveFirstOption;\n        this.autoSelectActiveOption = !!this._defaults.autoSelectActiveOption;\n        this.requireSelection = !!this._defaults.requireSelection;\n        this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n        this._keyManager = new ActiveDescendantKeyManager(this.options)\n            .withWrap()\n            .skipPredicate(this._skipPredicate);\n        this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n            if (this.isOpen) {\n                this.optionActivated.emit({ source: this, option: this.options.toArray()[index] || null });\n            }\n        });\n        // Set the initial visibility state.\n        this._setVisibility();\n    }\n    ngOnDestroy() {\n        this._keyManager?.destroy();\n        this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n        if (this.panel) {\n            this.panel.nativeElement.scrollTop = scrollTop;\n        }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n        return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n        this.showPanel = !!this.options?.length;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n        const event = new MatAutocompleteSelectedEvent(this, option);\n        this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n        if (this.ariaLabel) {\n            return null;\n        }\n        const labelExpression = labelId ? labelId + ' ' : '';\n        return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n        return false;\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocomplete, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatAutocomplete, isStandalone: true, selector: \"mat-autocomplete\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], displayWith: \"displayWith\", autoActiveFirstOption: [\"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute], autoSelectActiveOption: [\"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute], requireSelection: [\"requireSelection\", \"requireSelection\", booleanAttribute], panelWidth: \"panelWidth\", disableRipple: [\"disableRipple\", \"disableRipple\", booleanAttribute], classList: [\"class\", \"classList\"], hideSingleSelectionIndicator: [\"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute] }, outputs: { optionSelected: \"optionSelected\", opened: \"opened\", closed: \"closed\", optionActivated: \"optionActivated\" }, host: { classAttribute: \"mat-mdc-autocomplete\" }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], queries: [{ propertyName: \"options\", predicate: MatOption, descendants: true }, { propertyName: \"optionGroups\", predicate: MAT_OPTGROUP, descendants: true }], viewQueries: [{ propertyName: \"template\", first: true, predicate: TemplateRef, descendants: true, static: true }, { propertyName: \"panel\", first: true, predicate: [\"panel\"], descendants: true }], exportAs: [\"matAutocomplete\"], ngImport: i0, template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-autocomplete-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:relative;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocomplete, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-autocomplete', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, exportAs: 'matAutocomplete', host: {\n                        'class': 'mat-mdc-autocomplete',\n                    }, providers: [{ provide: MAT_OPTION_PARENT_COMPONENT, useExisting: MatAutocomplete }], template: \"<ng-template let-formFieldId=\\\"id\\\">\\n  <div\\n    class=\\\"mat-mdc-autocomplete-panel mdc-menu-surface mdc-menu-surface--open\\\"\\n    role=\\\"listbox\\\"\\n    [id]=\\\"id\\\"\\n    [class]=\\\"_classList\\\"\\n    [class.mat-mdc-autocomplete-visible]=\\\"showPanel\\\"\\n    [class.mat-mdc-autocomplete-hidden]=\\\"!showPanel\\\"\\n    [class.mat-autocomplete-panel-animations-enabled]=\\\"!_animationsDisabled\\\"\\n    [class.mat-primary]=\\\"_color === 'primary'\\\"\\n    [class.mat-accent]=\\\"_color === 'accent'\\\"\\n    [class.mat-warn]=\\\"_color === 'warn'\\\"\\n    [attr.aria-label]=\\\"ariaLabel || null\\\"\\n    [attr.aria-labelledby]=\\\"_getPanelAriaLabelledby(formFieldId)\\\"\\n    #panel>\\n    <ng-content></ng-content>\\n  </div>\\n</ng-template>\\n\", styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:relative;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\\n\"] }]\n        }], ctorParameters: () => [], propDecorators: { template: [{\n                type: ViewChild,\n                args: [TemplateRef, { static: true }]\n            }], panel: [{\n                type: ViewChild,\n                args: ['panel']\n            }], options: [{\n                type: ContentChildren,\n                args: [MatOption, { descendants: true }]\n            }], optionGroups: [{\n                type: ContentChildren,\n                args: [MAT_OPTGROUP, { descendants: true }]\n            }], ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], displayWith: [{\n                type: Input\n            }], autoActiveFirstOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], autoSelectActiveOption: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], requireSelection: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], panelWidth: [{\n                type: Input\n            }], disableRipple: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], optionSelected: [{\n                type: Output\n            }], opened: [{\n                type: Output\n            }], closed: [{\n                type: Output\n            }], optionActivated: [{\n                type: Output\n            }], classList: [{\n                type: Input,\n                args: ['class']\n            }], hideSingleSelectionIndicator: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nclass MatAutocompleteOrigin {\n    elementRef = inject(ElementRef);\n    constructor() { }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteOrigin, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"20.0.0\", type: MatAutocompleteOrigin, isStandalone: true, selector: \"[matAutocompleteOrigin]\", exportAs: [\"matAutocompleteOrigin\"], ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteOrigin, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matAutocompleteOrigin]',\n                    exportAs: 'matAutocompleteOrigin',\n                }]\n        }], ctorParameters: () => [] });\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatAutocompleteTrigger),\n    multi: true,\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n    return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' +\n        'Make sure that the id passed to the `matAutocomplete` is correct and that ' +\n        \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = new InjectionToken('mat-autocomplete-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const injector = inject(Injector);\n        return () => createRepositionScrollStrategy(injector);\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(_overlay) {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n    provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n    deps: [],\n    useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY,\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nclass MatAutocompleteTrigger {\n    _environmentInjector = inject(EnvironmentInjector);\n    _element = inject(ElementRef);\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _zone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, { optional: true });\n    _formField = inject(MAT_FORM_FIELD, { optional: true, host: true });\n    _viewportRuler = inject(ViewportRuler);\n    _scrollStrategy = inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, { optional: true });\n    _overlayRef;\n    _portal;\n    _componentDestroyed = false;\n    _initialized = new Subject();\n    _keydownSubscription;\n    _outsideClickSubscription;\n    _cleanupWindowBlur;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    _previousValue;\n    /** Value of the input element when the panel was attached (even if there are no options). */\n    _valueOnAttach;\n    /** Value on the previous keydown event. */\n    _valueOnLastKeydown;\n    /** Strategy that is used to position the panel. */\n    _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    _manuallyFloatingLabel = false;\n    /** The subscription for closing actions (some are bound to document). */\n    _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    _viewportSubscription = Subscription.EMPTY;\n    /** Implements BreakpointObserver to be used to detect handset landscape */\n    _breakpointObserver = inject(BreakpointObserver);\n    _handsetLandscapeSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    _canOpenOnNextFocus = true;\n    /** Value inside the input before we auto-selected an option. */\n    _valueBeforeAutoSelection;\n    /**\n     * Current option that we have auto-selected as the user is navigating,\n     * but which hasn't been propagated to the model value yet.\n     */\n    _pendingAutoselectedOption;\n    /** Stream of keyboard events that can close the panel. */\n    _closeKeyEventStream = new Subject();\n    /** Classes to apply to the panel. Exposed as a public property for internal usage. */\n    _overlayPanelClass = coerceArray(this._defaults?.overlayPanelClass || []);\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    _windowBlurHandler = () => {\n        // If the user blurred the window while the autocomplete is focused, it means that it'll be\n        // refocused when they come back. In this case we want to skip the first focus event, if the\n        // pane was closed, in order to avoid reopening it unintentionally.\n        this._canOpenOnNextFocus = this.panelOpen || !this._hasFocus();\n    };\n    /** `View -> model callback called when value changes` */\n    _onChange = () => { };\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => { };\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    position = 'auto';\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute = 'off';\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled;\n    constructor() { }\n    /** Class to apply to the panel when it's above the input. */\n    _aboveClass = 'mat-mdc-autocomplete-panel-above';\n    ngAfterViewInit() {\n        this._initialized.next();\n        this._initialized.complete();\n        this._cleanupWindowBlur = this._renderer.listen('window', 'blur', this._windowBlurHandler);\n    }\n    ngOnChanges(changes) {\n        if (changes['position'] && this._positionStrategy) {\n            this._setStrategyPositions(this._positionStrategy);\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n        }\n    }\n    ngOnDestroy() {\n        this._cleanupWindowBlur?.();\n        this._handsetLandscapeSubscription.unsubscribe();\n        this._viewportSubscription.unsubscribe();\n        this._componentDestroyed = true;\n        this._destroyPanel();\n        this._closeKeyEventStream.complete();\n        this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n        return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    _overlayAttached = false;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n        this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n        this._resetLabel();\n        if (!this._overlayAttached) {\n            return;\n        }\n        if (this.panelOpen) {\n            // Only emit if the panel was visible.\n            // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n            // `_subscribeToClosingActions()` are also outside of the Angular zone.\n            // We should manually run in Angular zone to update UI after panel closing.\n            this._zone.run(() => {\n                this.autocomplete.closed.emit();\n            });\n        }\n        // Only reset if this trigger is the latest one that opened the\n        // autocomplete since another may have taken it over.\n        if (this.autocomplete._latestOpeningTrigger === this) {\n            this.autocomplete._isOpen = false;\n            this.autocomplete._latestOpeningTrigger = null;\n        }\n        this._overlayAttached = false;\n        this._pendingAutoselectedOption = null;\n        if (this._overlayRef && this._overlayRef.hasAttached()) {\n            this._overlayRef.detach();\n            this._closingActionsSubscription.unsubscribe();\n        }\n        this._updatePanelState();\n        // Note that in some cases this can end up being called after the component is destroyed.\n        // Add a check to ensure that we don't try to run change detection on a destroyed view.\n        if (!this._componentDestroyed) {\n            // We need to trigger change detection manually, because\n            // `fromEvent` doesn't seem to do it at the proper time.\n            // This ensures that the label is reset when the\n            // user clicks outside.\n            this._changeDetectorRef.detectChanges();\n        }\n        // Remove aria-owns attribute when the autocomplete is no longer visible.\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n        }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n        if (this._overlayAttached) {\n            this._overlayRef.updatePosition();\n        }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n        return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef\n            ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached))\n            : of()).pipe(\n        // Normalize the output so we return a consistent type.\n        map(event => (event instanceof MatOptionSelectionChange ? event : null)));\n    }\n    /** Stream of changes to the selection state of the autocomplete options. */\n    optionSelections = defer(() => {\n        const options = this.autocomplete ? this.autocomplete.options : null;\n        if (options) {\n            return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n        }\n        // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n        // Return a stream that we'll replace with the real one once everything is in place.\n        return this._initialized.pipe(switchMap(() => this.optionSelections));\n    });\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n        if (this.autocomplete && this.autocomplete._keyManager) {\n            return this.autocomplete._keyManager.activeItem;\n        }\n        return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n        return new Observable(observer => {\n            const listener = (event) => {\n                // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n                // fall back to check the first element in the path of the click event.\n                const clickTarget = _getEventTarget(event);\n                const formField = this._formField\n                    ? this._formField.getConnectedOverlayOrigin().nativeElement\n                    : null;\n                const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n                if (this._overlayAttached &&\n                    clickTarget !== this._element.nativeElement &&\n                    // Normally focus moves inside `mousedown` so this condition will almost always be\n                    // true. Its main purpose is to handle the case where the input is focused from an\n                    // outside click which propagates up to the `body` listener within the same sequence\n                    // and causes the panel to close immediately (see #3106).\n                    !this._hasFocus() &&\n                    (!formField || !formField.contains(clickTarget)) &&\n                    (!customOrigin || !customOrigin.contains(clickTarget)) &&\n                    !!this._overlayRef &&\n                    !this._overlayRef.overlayElement.contains(clickTarget)) {\n                    observer.next(event);\n                }\n            };\n            const cleanups = [\n                this._renderer.listen('document', 'click', listener),\n                this._renderer.listen('document', 'auxclick', listener),\n                this._renderer.listen('document', 'touchend', listener),\n            ];\n            return () => {\n                cleanups.forEach(current => current());\n            };\n        });\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(e) {\n        const event = e;\n        const keyCode = event.keyCode;\n        const hasModifier = hasModifierKey(event);\n        // Prevent the default action on all escape key presses. This is here primarily to bring IE\n        // in line with other browsers. By default, pressing escape on IE will cause it to revert\n        // the input value to the one that it had on focus, however it won't dispatch any events\n        // which means that the model value will be out of sync with the view.\n        if (keyCode === ESCAPE && !hasModifier) {\n            event.preventDefault();\n        }\n        this._valueOnLastKeydown = this._element.nativeElement.value;\n        if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n            this.activeOption._selectViaInteraction();\n            this._resetActiveItem();\n            event.preventDefault();\n        }\n        else if (this.autocomplete) {\n            const prevActiveItem = this.autocomplete._keyManager.activeItem;\n            const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n            if (keyCode === TAB || (isArrowKey && !hasModifier && this.panelOpen)) {\n                this.autocomplete._keyManager.onKeydown(event);\n            }\n            else if (isArrowKey && this._canOpen()) {\n                this._openPanelInternal(this._valueOnLastKeydown);\n            }\n            if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n                this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n                if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n                    if (!this._pendingAutoselectedOption) {\n                        this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n                    }\n                    this._pendingAutoselectedOption = this.activeOption;\n                    this._assignOptionValue(this.activeOption.value);\n                }\n            }\n        }\n    }\n    _handleInput(event) {\n        let target = event.target;\n        let value = target.value;\n        // Based on `NumberValueAccessor` from forms.\n        if (target.type === 'number') {\n            value = value == '' ? null : parseFloat(value);\n        }\n        // If the input has a placeholder, IE will fire the `input` event on page load,\n        // focus and blur, in addition to when the user actually changed the value. To\n        // filter out all of the extra events, we save the value on focus and between\n        // `input` events, and we check whether it changed.\n        // See: https://connect.microsoft.com/IE/feedback/details/885747/\n        if (this._previousValue !== value) {\n            this._previousValue = value;\n            this._pendingAutoselectedOption = null;\n            // If selection is required we don't write to the CVA while the user is typing.\n            // At the end of the selection either the user will have picked something\n            // or we'll reset the value back to null.\n            if (!this.autocomplete || !this.autocomplete.requireSelection) {\n                this._onChange(value);\n            }\n            if (!value) {\n                this._clearPreviousSelectedOption(null, false);\n            }\n            else if (this.panelOpen && !this.autocomplete.requireSelection) {\n                // Note that we don't reset this when `requireSelection` is enabled,\n                // because the option will be reset when the panel is closed.\n                const selectedOption = this.autocomplete.options?.find(option => option.selected);\n                if (selectedOption) {\n                    const display = this._getDisplayValue(selectedOption.value);\n                    if (value !== display) {\n                        selectedOption.deselect(false);\n                    }\n                }\n            }\n            if (this._canOpen() && this._hasFocus()) {\n                // When the `input` event fires, the input's value will have already changed. This means\n                // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n                // behind. This can be a problem when the user selects a value, changes a character while\n                // the input still has focus and then clicks away (see #28432). To work around it, we\n                // capture the value in `keydown` so we can use it here.\n                const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n                this._valueOnLastKeydown = null;\n                this._openPanelInternal(valueOnAttach);\n            }\n        }\n    }\n    _handleFocus() {\n        if (!this._canOpenOnNextFocus) {\n            this._canOpenOnNextFocus = true;\n        }\n        else if (this._canOpen()) {\n            this._previousValue = this._element.nativeElement.value;\n            this._attachOverlay(this._previousValue);\n            this._floatLabel(true);\n        }\n    }\n    _handleClick() {\n        if (this._canOpen() && !this.panelOpen) {\n            this._openPanelInternal();\n        }\n    }\n    /** Whether the input currently has focus. */\n    _hasFocus() {\n        return _getFocusedElementPierceShadowDom() === this._element.nativeElement;\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n        if (this._formField && this._formField.floatLabel === 'auto') {\n            if (shouldAnimate) {\n                this._formField._animateAndLockLabel();\n            }\n            else {\n                this._formField.floatLabel = 'always';\n            }\n            this._manuallyFloatingLabel = true;\n        }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n        if (this._manuallyFloatingLabel) {\n            if (this._formField) {\n                this._formField.floatLabel = 'auto';\n            }\n            this._manuallyFloatingLabel = false;\n        }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n        const initialRender = new Observable(subscriber => {\n            afterNextRender(() => {\n                subscriber.next();\n            }, { injector: this._environmentInjector });\n        });\n        const optionChanges = this.autocomplete.options?.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()), \n        // Defer emitting to the stream until the next tick, because changing\n        // bindings in here will cause \"changed after checked\" errors.\n        delay(0)) ?? of();\n        // When the options are initially rendered, and when the option list changes...\n        return (merge(initialRender, optionChanges)\n            .pipe(\n        // create a new stream of panelClosingActions, replacing any previous streams\n        // that were created, and flatten it so our stream only emits closing events...\n        switchMap(() => this._zone.run(() => {\n            // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n            // the Angular zone. This will lead to change detection being called outside of the Angular\n            // zone and the `autocomplete.opened` will also emit outside of the Angular.\n            const wasOpen = this.panelOpen;\n            this._resetActiveItem();\n            this._updatePanelState();\n            this._changeDetectorRef.detectChanges();\n            if (this.panelOpen) {\n                this._overlayRef.updatePosition();\n            }\n            if (wasOpen !== this.panelOpen) {\n                // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n                // `closed` event, because we may not have emitted it. This can happen\n                // - if the users opens the panel and there are no options, but the\n                //   options come in slightly later or as a result of the value changing,\n                // - if the panel is closed after the user entered a string that did not match any\n                //   of the available options,\n                // - if a valid string is entered after an invalid one.\n                if (this.panelOpen) {\n                    this._emitOpened();\n                }\n                else {\n                    this.autocomplete.closed.emit();\n                }\n            }\n            return this.panelClosingActions;\n        })), \n        // when the first closing event occurs...\n        take(1))\n            // set the value, close the panel, and complete.\n            .subscribe(event => this._setValueAndClose(event)));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n        this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n        if (this._overlayRef) {\n            this.closePanel();\n            this._overlayRef.dispose();\n            this._overlayRef = null;\n        }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n        const autocomplete = this.autocomplete;\n        return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n        const toDisplay = this._getDisplayValue(value);\n        if (value == null) {\n            this._clearPreviousSelectedOption(null, false);\n        }\n        // Simply falling back to an empty string if the display value is falsy does not work properly.\n        // The display value can also be the number zero and shouldn't fall back to an empty string.\n        this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n        // If it's used within a `MatFormField`, we should set it through the property so it can go\n        // through change detection.\n        if (this._formField) {\n            this._formField._control.value = value;\n        }\n        else {\n            this._element.nativeElement.value = value;\n        }\n        this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n        const panel = this.autocomplete;\n        const toSelect = event ? event.source : this._pendingAutoselectedOption;\n        if (toSelect) {\n            this._clearPreviousSelectedOption(toSelect);\n            this._assignOptionValue(toSelect.value);\n            // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n            // gets reset while the panel is still animating which looks glitchy. It'll likely break\n            // some tests to change it at this point.\n            this._onChange(toSelect.value);\n            panel._emitSelectEvent(toSelect);\n            this._element.nativeElement.focus();\n        }\n        else if (panel.requireSelection &&\n            this._element.nativeElement.value !== this._valueOnAttach) {\n            this._clearPreviousSelectedOption(null);\n            this._assignOptionValue(null);\n            this._onChange(null);\n        }\n        this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n        // Null checks are necessary here, because the autocomplete\n        // or its options may not have been assigned yet.\n        this.autocomplete?.options?.forEach(option => {\n            if (option !== skip && option.selected) {\n                option.deselect(emitEvent);\n            }\n        });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n        this._attachOverlay(valueOnAttach);\n        this._floatLabel();\n        // Add aria-owns attribute when the autocomplete becomes visible.\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n    }\n    _attachOverlay(valueOnAttach) {\n        if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatAutocompleteMissingPanelError();\n        }\n        let overlayRef = this._overlayRef;\n        if (!overlayRef) {\n            this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n                id: this._formField?.getLabelId(),\n            });\n            overlayRef = createOverlayRef(this._injector, this._getOverlayConfig());\n            this._overlayRef = overlayRef;\n            this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n                if (this.panelOpen && overlayRef) {\n                    overlayRef.updateSize({ width: this._getPanelWidth() });\n                }\n            });\n            // Subscribe to the breakpoint events stream to detect when screen is in\n            // handsetLandscape.\n            this._handsetLandscapeSubscription = this._breakpointObserver\n                .observe(Breakpoints.HandsetLandscape)\n                .subscribe(result => {\n                const isHandsetLandscape = result.matches;\n                // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n                // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n                if (isHandsetLandscape) {\n                    this._positionStrategy\n                        .withFlexibleDimensions(true)\n                        .withGrowAfterOpen(true)\n                        .withViewportMargin(8);\n                }\n                else {\n                    this._positionStrategy\n                        .withFlexibleDimensions(false)\n                        .withGrowAfterOpen(false)\n                        .withViewportMargin(0);\n                }\n            });\n        }\n        else {\n            // Update the trigger, panel width and direction, in case anything has changed.\n            this._positionStrategy.setOrigin(this._getConnectedElement());\n            overlayRef.updateSize({ width: this._getPanelWidth() });\n        }\n        if (overlayRef && !overlayRef.hasAttached()) {\n            overlayRef.attach(this._portal);\n            this._valueOnAttach = valueOnAttach;\n            this._valueOnLastKeydown = null;\n            this._closingActionsSubscription = this._subscribeToClosingActions();\n        }\n        const wasOpen = this.panelOpen;\n        this.autocomplete._isOpen = this._overlayAttached = true;\n        this.autocomplete._latestOpeningTrigger = this;\n        this.autocomplete._setColor(this._formField?.color);\n        this._updatePanelState();\n        this._applyModalPanelOwnership();\n        // We need to do an extra `panelOpen` check in here, because the\n        // autocomplete won't be shown if there are no options.\n        if (this.panelOpen && wasOpen !== this.panelOpen) {\n            this._emitOpened();\n        }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handlePanelKeydown = (event) => {\n        // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n        // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n        if ((event.keyCode === ESCAPE && !hasModifierKey(event)) ||\n            (event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey'))) {\n            // If the user had typed something in before we autoselected an option, and they decided\n            // to cancel the selection, restore the input value to the one they had typed in.\n            if (this._pendingAutoselectedOption) {\n                this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n                this._pendingAutoselectedOption = null;\n            }\n            this._closeKeyEventStream.next();\n            this._resetActiveItem();\n            // We need to stop propagation, otherwise the event will eventually\n            // reach the input itself and cause the overlay to be reopened.\n            event.stopPropagation();\n            event.preventDefault();\n        }\n    };\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n        this.autocomplete._setVisibility();\n        // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n        // because the act of subscribing will prevent events from reaching other overlays and\n        // we don't want to block the events if there are no options.\n        if (this.panelOpen) {\n            const overlayRef = this._overlayRef;\n            if (!this._keydownSubscription) {\n                // Use the `keydownEvents` in order to take advantage of\n                // the overlay event targeting provided by the CDK overlay.\n                this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n            }\n            if (!this._outsideClickSubscription) {\n                // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n                // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n                // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n                this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n            }\n        }\n        else {\n            this._keydownSubscription?.unsubscribe();\n            this._outsideClickSubscription?.unsubscribe();\n            this._keydownSubscription = this._outsideClickSubscription = null;\n        }\n    }\n    _getOverlayConfig() {\n        return new OverlayConfig({\n            positionStrategy: this._getOverlayPosition(),\n            scrollStrategy: this._scrollStrategy(),\n            width: this._getPanelWidth(),\n            direction: this._dir ?? undefined,\n            hasBackdrop: this._defaults?.hasBackdrop,\n            backdropClass: this._defaults?.backdropClass,\n            panelClass: this._overlayPanelClass,\n            disableAnimations: this._animationsDisabled,\n        });\n    }\n    _getOverlayPosition() {\n        // Set default Overlay Position\n        const strategy = createFlexibleConnectedPositionStrategy(this._injector, this._getConnectedElement())\n            .withFlexibleDimensions(false)\n            .withPush(false);\n        this._setStrategyPositions(strategy);\n        this._positionStrategy = strategy;\n        return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n        // Note that we provide horizontal fallback positions, even though by default the dropdown\n        // width matches the input, because consumers can override the width. See #18854.\n        const belowPositions = [\n            { originX: 'start', originY: 'bottom', overlayX: 'start', overlayY: 'top' },\n            { originX: 'end', originY: 'bottom', overlayX: 'end', overlayY: 'top' },\n        ];\n        // The overlay edge connected to the trigger should have squared corners, while\n        // the opposite end has rounded corners. We apply a CSS class to swap the\n        // border-radius based on the overlay position.\n        const panelClass = this._aboveClass;\n        const abovePositions = [\n            { originX: 'start', originY: 'top', overlayX: 'start', overlayY: 'bottom', panelClass },\n            { originX: 'end', originY: 'top', overlayX: 'end', overlayY: 'bottom', panelClass },\n        ];\n        let positions;\n        if (this.position === 'above') {\n            positions = abovePositions;\n        }\n        else if (this.position === 'below') {\n            positions = belowPositions;\n        }\n        else {\n            positions = [...belowPositions, ...abovePositions];\n        }\n        positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n        if (this.connectedTo) {\n            return this.connectedTo.elementRef;\n        }\n        return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n        return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n        return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n        const autocomplete = this.autocomplete;\n        if (autocomplete.autoActiveFirstOption) {\n            // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n            // because it activates the first option that passes the skip predicate, rather than the\n            // first *enabled* option.\n            let firstEnabledOptionIndex = -1;\n            for (let index = 0; index < autocomplete.options.length; index++) {\n                const option = autocomplete.options.get(index);\n                if (!option.disabled) {\n                    firstEnabledOptionIndex = index;\n                    break;\n                }\n            }\n            autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n        }\n        else {\n            autocomplete._keyManager.setActiveItem(-1);\n        }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n        const element = this._element.nativeElement;\n        return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n        // Given that we are not actually focusing active options, we must manually adjust scroll\n        // to reveal options below the fold. First, we find the offset of the option from the top\n        // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n        // the panel height + the option height, so the active option will be just visible at the\n        // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n        // will become the offset. If that offset is visible within the panel already, the scrollTop is\n        // not adjusted.\n        const autocomplete = this.autocomplete;\n        const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n        if (index === 0 && labelCount === 1) {\n            // If we've got one group label before the option and we're at the top option,\n            // scroll the list to the top. This is better UX than scrolling the list to the\n            // top of the option, because it allows the user to read the top group's label.\n            autocomplete._setScrollTop(0);\n        }\n        else if (autocomplete.panel) {\n            const option = autocomplete.options.toArray()[index];\n            if (option) {\n                const element = option._getHostElement();\n                const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n                autocomplete._setScrollTop(newScrollPosition);\n            }\n        }\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n        // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n        // the `LiveAnnouncer` and any other usages.\n        //\n        // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n        // section of the DOM we need to look through. This should cover all the cases we support, but\n        // the selector can be expanded if it turns out to be too narrow.\n        const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n        if (!modal) {\n            // Most commonly, the autocomplete trigger is not inside a modal.\n            return;\n        }\n        const panelId = this.autocomplete.id;\n        if (this._trackedModal) {\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        }\n        addAriaReferencedId(modal, 'aria-owns', panelId);\n        this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n        if (this._trackedModal) {\n            const panelId = this.autocomplete.id;\n            removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n            this._trackedModal = null;\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteTrigger, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatAutocompleteTrigger, isStandalone: true, selector: \"input[matAutocomplete], textarea[matAutocomplete]\", inputs: { autocomplete: [\"matAutocomplete\", \"autocomplete\"], position: [\"matAutocompletePosition\", \"position\"], connectedTo: [\"matAutocompleteConnectedTo\", \"connectedTo\"], autocompleteAttribute: [\"autocomplete\", \"autocompleteAttribute\"], autocompleteDisabled: [\"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute] }, host: { listeners: { \"focusin\": \"_handleFocus()\", \"blur\": \"_onTouched()\", \"input\": \"_handleInput($event)\", \"keydown\": \"_handleKeydown($event)\", \"click\": \"_handleClick()\" }, properties: { \"attr.autocomplete\": \"autocompleteAttribute\", \"attr.role\": \"autocompleteDisabled ? null : \\\"combobox\\\"\", \"attr.aria-autocomplete\": \"autocompleteDisabled ? null : \\\"list\\\"\", \"attr.aria-activedescendant\": \"(panelOpen && activeOption) ? activeOption.id : null\", \"attr.aria-expanded\": \"autocompleteDisabled ? null : panelOpen.toString()\", \"attr.aria-controls\": \"(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id\", \"attr.aria-haspopup\": \"autocompleteDisabled ? null : \\\"listbox\\\"\" }, classAttribute: \"mat-mdc-autocomplete-trigger\" }, providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR], exportAs: [\"matAutocompleteTrigger\"], usesOnChanges: true, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteTrigger, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `input[matAutocomplete], textarea[matAutocomplete]`,\n                    host: {\n                        'class': 'mat-mdc-autocomplete-trigger',\n                        '[attr.autocomplete]': 'autocompleteAttribute',\n                        '[attr.role]': 'autocompleteDisabled ? null : \"combobox\"',\n                        '[attr.aria-autocomplete]': 'autocompleteDisabled ? null : \"list\"',\n                        '[attr.aria-activedescendant]': '(panelOpen && activeOption) ? activeOption.id : null',\n                        '[attr.aria-expanded]': 'autocompleteDisabled ? null : panelOpen.toString()',\n                        '[attr.aria-controls]': '(autocompleteDisabled || !panelOpen) ? null : autocomplete?.id',\n                        '[attr.aria-haspopup]': 'autocompleteDisabled ? null : \"listbox\"',\n                        // Note: we use `focusin`, as opposed to `focus`, in order to open the panel\n                        // a little earlier. This avoids issues where IE delays the focusing of the input.\n                        '(focusin)': '_handleFocus()',\n                        '(blur)': '_onTouched()',\n                        '(input)': '_handleInput($event)',\n                        '(keydown)': '_handleKeydown($event)',\n                        '(click)': '_handleClick()',\n                    },\n                    exportAs: 'matAutocompleteTrigger',\n                    providers: [MAT_AUTOCOMPLETE_VALUE_ACCESSOR],\n                }]\n        }], ctorParameters: () => [], propDecorators: { autocomplete: [{\n                type: Input,\n                args: ['matAutocomplete']\n            }], position: [{\n                type: Input,\n                args: ['matAutocompletePosition']\n            }], connectedTo: [{\n                type: Input,\n                args: ['matAutocompleteConnectedTo']\n            }], autocompleteAttribute: [{\n                type: Input,\n                args: ['autocomplete']\n            }], autocompleteDisabled: [{\n                type: Input,\n                args: [{ alias: 'matAutocompleteDisabled', transform: booleanAttribute }]\n            }] } });\n\nclass MatAutocompleteModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteModule, imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocomplete,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin], exports: [CdkScrollableModule,\n            MatAutocomplete,\n            MatOptionModule,\n            MatCommonModule,\n            MatAutocompleteTrigger,\n            MatAutocompleteOrigin] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteModule, providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER], imports: [OverlayModule,\n            MatOptionModule,\n            MatCommonModule, CdkScrollableModule,\n            MatOptionModule,\n            MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatAutocompleteModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        OverlayModule,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocomplete,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    exports: [\n                        CdkScrollableModule,\n                        MatAutocomplete,\n                        MatOptionModule,\n                        MatCommonModule,\n                        MatAutocompleteTrigger,\n                        MatAutocompleteOrigin,\n                    ],\n                    providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n                }]\n        }] });\n\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, MatOption, getMatAutocompleteMissingPanelError };\n","import { map } from './map';\nexport function mapTo(value) {\n    return map(() => value);\n}\n","<extended-fab-speed-dial>\r\n  <ng-template extendedFabSpeedDialTriggerContent>\r\n    <button\r\n      [type]=\"triggerOnFormSubmit() ? 'submit' : 'button'\"\r\n      [tippy]=\"(label() | translate) + ' (' + ('Form.Buttons.ActionAndCloseShortcut' | translate) + ')'\"\r\n      tippyShowDelay=\"500\"\r\n      [ngClass]=\"ngClass()\"\r\n      [disabled]=\"isDisabled\"\r\n      (click)=\"onClick($event)\"\r\n      extended-fab-speed-dial-trigger\r\n      matRipple\r\n    >\r\n      <span>{{ label() | translate }}</span>\r\n      <span class=\"keybinding-hint\">\r\n        <kbd>⌃</kbd><kbd>⏎</kbd>\r\n      </span>\r\n      <mat-icon>{{ icon() }}</mat-icon>\r\n    </button>\r\n  </ng-template>\r\n</extended-fab-speed-dial>\r\n","import { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { ExtendedFabSpeedDialImports } from '../extended-fab-speed-dial/extended-fab-speed-dial.imports';\r\nimport { SaveCloseButtonBase } from '../save-close-button/save-close-button-base.directive';\r\n\r\n@Component({\r\n  selector: 'app-save-close-button-fab',\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    ...ExtendedFabSpeedDialImports,\r\n    MatRippleModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n  templateUrl: './save-close-button-fab.component.html',\r\n  styleUrls: ['../save-close-button/save-close-button.component.scss'],\r\n})\r\nexport class SaveCloseButtonFabComponent extends SaveCloseButtonBase {}"],"x_google_ignoreList":[0,1,2,3,4]}