{"version":3,"file":"projects_eav-ui_src_app_app-administration_app-configuration_app-configuration_component_ts.08c6deca80473a3d.js","mappings":"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","names":["AppInternalsService","HttpServiceBaseSignal","getAppInternalsLive","refresh","httpResource","url","this","apiUrl","params","appid","appId","static","__ngFactoryType__","root_effect_scheduler_DCy1y1b8","jDH","factory","ɵfac","AnalyzeParts","Settings","Resources","i0","_r1","ctx_r1","clipboard","copyToClipboard","contentItem","DisplayName","Folder","Version","RequiredVersion","RequiredDnnVersion","RequiredOqtaneVersion","formatValue","tmp_2_0","tmp_4_0","tmp_6_0","tmp_8_0","tmp_10_0","tmp_12_0","appConfigurationUrl","appConfigAvailable","tmp_16_0","appSettingsInternal","EntityLists","ToSxcContentApp","length","urlToOpenMetadata","tmp_18_0","MetadataList","Items","AppConfigurationCardComponent","#contentItemsSvc","#dialogRouter","constructor","context","snackBar","dialogSettings","input","required","transient","ContentItemsService","DialogRoutingService","signal","getAllLive","eavConstants","contentTypes","appConfiguration","value","ClipboardService","urlToEdit","ngOnDestroy","dismiss","#urlTo","urlSubRoute","getAllPromise","then","contentItems","set","convertFormToUrl","items","EditPrep","editId","Id","GoToMetadata","getUrlApp","Context","App","Name","i1","i2","debug_node_JnOYh9kg","VBU","selectors","inputs","decls","vars","consts","template","rf","ctx","AppConfigurationCardComponent_Conditional_0_Template","MatCardModule","i3","MatIconModule","i4","MatButtonModule","i5","MatBadgeModule","i6","TippyDirective","DocsLinkHelperComponent","styles","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_1_Template","AppConfigurationComponent_Conditional_0_Conditional_0_Conditional_2_Template","isGlobal","isSite","AppConfigurationComponent_Conditional_0_Conditional_36_ng_container_0_Template","goToGlobal_r3","AppConfigurationComponent_Conditional_0_Conditional_37_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_37_ng_container_1_Template","goToSite_r4","AppConfigurationComponent_Conditional_0_Conditional_80_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_81_ng_container_0_Template","AppConfigurationComponent_Conditional_0_Conditional_81_ng_container_1_Template","_r5","openGlobalSettings","_r6","openSiteSettings","AppConfigurationComponent_Conditional_0_Conditional_144_Conditional_0_Template","AppConfigurationComponent_Conditional_0_Conditional_144_Conditional_1_Template","isApp","AppConfigurationComponent_Conditional_0_Conditional_0_Template","$event","fixContentTypeIfNecessary","buttons","customSettings","customSettingsType","AppConfigurationComponent_Conditional_0_Conditional_36_Template","AppConfigurationComponent_Conditional_0_Conditional_37_Template","customResources","customResourcesType","AppConfigurationComponent_Conditional_0_Conditional_80_Template","AppConfigurationComponent_Conditional_0_Conditional_81_Template","AppConfigurationComponent_Conditional_0_ng_template_90_Template","AppConfigurationComponent_Conditional_0_ng_template_92_Template","AppConfigurationComponent_Conditional_0_Conditional_144_Template","topRowLabel","systemSettings","tooltip","count","customSettingsFields","urlToAnalyze","systemResources","customResourcesFields","appSpecsLazy","LightSpeedOutputCache","lightSpeedEnabled","lightspeed","ContentSecurityPolicy","urlToOpenPermissions","Enable","AppPermissions","Permissions","Count","urlToOpenLanguagePermissions","langPermsEnabled","AppConfigurationComponent","#featuresSvc","#dialogInNewWindowSvc","#contentTypesSvc","#appInternalsService","#contentItemsService","#dialogConfigSvc","inject","FeaturesService","DialogInNewWindowService","ContentTypesService","DialogConfigAppService","SystemSettingsScopes","AppScopes","FeatureNames","LightSpeed","toSignal","getCurrent$","#currentScope","computed","SettingsScope","cs","Global","Site","appSystemSettingsUrl","#appSystemSettingsUrlSource","urlToEditSystem","appSystemResourcesUrl","#appSystemResourcesUrlSource","appCustomSettingsUrl","#appCustomSettingsUrlSource","settings","appCustomResourcesUrl","#appCustomResourcesUrlSource","resources","appSettingsInternal$","Subject","appStateAdvanced","isEnabled","cspEnabled","PermissionsByLanguage","#dataStatistics","appSpecs","props","lsTypeName","appMetadata","ContentTypeName","appLightSpeedCount","filter","i","_Type","systemSettingsCount","SettingsSystem","SettingsEntityScope","customSettingsCount","AppSettings","customSettingsFieldsCount","FieldAll","systemResourcesCount","ResourcesSystem","customResourcesCount","AppResources","customResourcesFieldsCount","#customTypesExist","nothing","scopeName","viewModel","typeNames","typesExist","urlToConfig","urlToGetLightSpeedLink","ngOnInit","doOnDialogClosed","update","v","queryParams","errComponent","newUrl","URLSearchParams","toString","staticName","systemSettingsScope","systemSettingsEntities","error","systemSettingsEntity","newFromType","urlToEditCustom","customSettingsEntity","urlToEditDefault","AppAdminHelpers","getLightSpeedEditParams","siteApp","PrimaryApp","openAppAdministration","ZoneId","AppId","globalApp","System","GoToPermissions","enabled","part","typeName","event","preventDefault","stopPropagation","retrieveContentTypesPromise","scopes","configuration","some","ct","window","open","save","StaticName","Description","Scope","ChangeNameId","NewNameId","subscribe","success","alert","AppConfigurationComponent_Conditional_0_Template","MatBadgeIconDirective","NgTemplateOutlet","FeatureTextInfoComponent","RouterOutlet","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","type","encapsulation","changeDetection","MatBadge","_ngZone","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationsDisabled","_idGenerator","_IdGenerator","color","_color","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","booleanAttribute","imports","A11yModule","MatCommonModule","renderer","super","matBadgeIcon","setStyle","iconElement","createText","RendererStyleFlags2","Important","addClass","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","features"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings.models.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration-card/app-configuration-card.component.ts","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.html","./projects/eav-ui/src/app/app-administration/app-configuration/app-configuration.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/shared/directives/mat-badge-icon.directive.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService extends HttpServiceBaseSignal {\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n\r\n  getAppInternalsLive(refresh: Signal<unknown>) {\r\n    return httpResource<AppInternals>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiRoot),\r\n        params: { appid: this.appId }\r\n      });\r\n    });\r\n  }\r\n}\r\n","\r\nexport const AnalyzeParts = {\r\n  Settings: 'Settings',\r\n  Resources: 'Resources',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n\r\nexport interface SettingsStackItem {\r\n  Path: string;\r\n  Priority: number;\r\n  Source: string;\r\n  TotalResults: number;\r\n  Type: string;\r\n  Value: string;\r\n  _value: string;\r\n}\r\n","<!-- App Config -->\r\n@if (contentItem()) {\r\n  <mat-card class=\"eav-card\">\r\n    <mat-card-header class=\"eav-card-header\">\r\n      <mat-card-title>Configuration</mat-card-title>\r\n      <mat-icon>redeem</mat-icon>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Name:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].DisplayName)\">{{\r\n            formatValue(contentItem()[0]?.DisplayName)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Folder:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Folder)\">{{\r\n            formatValue(contentItem()[0]?.Folder)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Version:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].Version)\">{{\r\n            formatValue(contentItem()[0]?.Version)\r\n          }}</span>\r\n        </div>\r\n      </div>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">For</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <b>2sxc: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredVersion) }}\r\n          </span>\r\n          <b> DNN: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredDnnVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredDnnVersion) }}\r\n          </span>\r\n          <b> Oqt: </b\r\n          ><span [tippy]=\"'Click to copy to clipboard'\" (click)=\"clipboard.copyToClipboard(contentItem()[0].RequiredOqtaneVersion)\">\r\n            {{ formatValue(contentItem()[0]?.RequiredOqtaneVersion) }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n      <!-- </p> -->\r\n    </mat-card-content>\r\n    <div class=\"eav-card-space-div\"></div>\r\n    <mat-card-actions align=\"start\">\r\n      <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/configuration.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      <a\r\n        [href]=\"appConfigurationUrl()\"\r\n        mat-button\r\n        [disabled]=\"!appConfigAvailable()\"\r\n        class=\"eav-button__with-icon\"\r\n        tippy=\"Edit app system resources\"\r\n      >\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()?.EntityLists?.ToSxcContentApp.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >edit</mat-icon\r\n        >\r\n        <span>Edit</span>\r\n      </a>\r\n      <a [href]=\"urlToOpenMetadata()\" mat-button class=\"eav-button__with-icon\">\r\n        <mat-icon\r\n          matBadgeColor=\"accent\"\r\n          matBadgeSize=\"small\"\r\n          [matBadge]=\"appSettingsInternal()?.MetadataList.Items.length || null\"\r\n          matBadgePosition=\"below after\"\r\n          aria-hidden=\"false\"\r\n          class=\"eav-icon\"\r\n          >local_offer</mat-icon\r\n        >\r\n        <span>Metadata</span>\r\n      </a>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, input, OnDestroy, signal } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { transient } from '../../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../../content-items/services/content-items.service';\r\nimport { GoToMetadata } from '../../../metadata';\r\nimport { eavConstants } from '../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../../shared/helpers/url-prep.helper';\r\nimport { DialogSettings } from '../../../shared/models/dialog-settings.model';\r\nimport { EditPrep } from '../../../shared/models/edit-form.model';\r\nimport { DialogRoutingService } from '../../../shared/routing/dialog-routing.service';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { Context } from '../../../shared/services/context';\r\nimport { AppInternals } from '../../models/app-internals.model';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration-card',\r\n  templateUrl: './app-configuration-card.component.html',\r\n  styleUrls: ['./app-configuration-card.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ]\r\n})\r\nexport class AppConfigurationCardComponent implements OnDestroy {\r\n  dialogSettings = input.required<DialogSettings>();\r\n  appSettingsInternal = input.required<AppInternals>();\r\n  refresh = input.required<number>();\r\n\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  appConfigurationUrl = signal('');\r\n  appConfigAvailable = signal(false);\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.appConfigurationUrl = (this.urlToEdit());\r\n\r\n    // debug\r\n    // effect(() => {\r\n    //   const ci = this.contentItem();\r\n    //   console.log(\"CI\", ci);\r\n    // });\r\n  }\r\n\r\n  contentItem = this.#contentItemsSvc.getAllLive(\r\n    eavConstants.contentTypes.appConfiguration,\r\n    this.refresh\r\n  ).value;\r\n\r\n  ngOnDestroy() {\r\n    this.snackBar.dismiss();\r\n  }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  urlToEdit() {\r\n    let url = signal('');\r\n    this.#contentItemsSvc.getAllPromise(\r\n      eavConstants.contentTypes.appConfiguration\r\n    ).then(contentItems => {\r\n\r\n      if (contentItems.length !== 1)\r\n        return ''\r\n\r\n      this.appConfigAvailable.set(true);\r\n      url.set(this.#urlTo(\r\n        `edit/${convertFormToUrl({\r\n          items: [EditPrep.editId(contentItems[0].Id)],\r\n        })}`\r\n      ));\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToOpenMetadata() {\r\n    return this.#urlTo(\r\n      GoToMetadata.getUrlApp(\r\n        this.context.appId,\r\n        `Metadata for App: ${this.dialogSettings().Context.App.Name} (${this.context.appId})`,\r\n      )\r\n    );\r\n  }\r\n\r\n\r\n  formatValue(value?: string): string {\r\n    return value === \"\" ? \"-\" : value ?? \"-\";\r\n  }\r\n}\r\n","<!-- one of the three triggers must be true -->\r\n@if (isGlobal() || isSite() || isApp()) {\r\n  @if (isGlobal() || isSite()) {\r\n    <div class=\"alert alert-info scope-info\">\r\n      @if (isGlobal()) {\r\n        This is the Global App. Anything configured here will affect all Sites and Apps in this installation.\r\n      }\r\n      @if (isSite()) {\r\n        This is the Primary App of this Site. You can also configure site wide settings and resources here.\r\n      }\r\n      See <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>.\r\n    </div>\r\n  }\r\n  <div class=\"eav-cards-box\">\r\n    <!-- Settings -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Settings</mat-card-title>\r\n        <mat-icon>settings</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <!-- DEBUG ⚠️ types: {{ customTypesExist() | json }} -->\r\n        <p>\r\n          Settings are things like SQL-connection strings, default \"items-to-show\" numbers and similar. If necessary, settings like a link\r\n          to an RSS-Feed could be different in each language.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Settings</th>\r\n              <th>Custom Settings</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <tr>\r\n              <!-- TODO: @2pp - this is how I deduplicated code for settings -->\r\n              <!-- first row label changes with level we are at -->\r\n              <th>{{ buttons().topRowLabel }}</th>\r\n              <td>\r\n                <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().systemSettings.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <a\r\n                  [href]=\"buttons().customSettings.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customSettings.url, buttons().customSettingsType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customSettings.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customSettings.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n                <a\r\n                  [href]=\"buttons().customSettingsFields.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customSettings.url, buttons().customSettingsType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customSettingsFields.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >dns</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            <!-- More Buttons -->\r\n            @if (isSite()) {\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } @else if (isApp()) {\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- TODO: @2pp - this is how I deduplicated code for settings -->\r\n            <!-- Settings for Primary App -->\r\n            <!-- @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().systemSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a\r\n                    [href]=\"buttons().customSettings.url\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettings.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customSettings)\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettingsFields.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n            <!-- Settings for App and Content -->\r\n            <!-- @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"buttons().systemSettings.url\" mat-icon-button [tippy]=\"buttons().systemSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().systemSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"buttons().customSettings.url\" mat-icon-button [tippy]=\"buttons().customSettings.tooltip\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettings.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.settings)\"\r\n                    mat-icon-button\r\n                    [tippy]=\"buttons().customSettingsFields.tooltip\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"buttons().customSettingsFields.count\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Settings)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all settings\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Settings</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Resources -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Language Resources (i18n)</mat-card-title>\r\n        <mat-icon>translate</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>\r\n          Resources are used for labels and things like that in the App. They are usually needed to create multi-lingual views and such, and\r\n          should not be used for App-Settings.\r\n          <a href=\"https://go.2sxc.org/settings\" target=\"_blank\">docs</a>\r\n        </p>\r\n        <table class=\"eav-settings-and-resources-table\">\r\n          <thead>\r\n            <tr>\r\n              <th></th>\r\n              <th>System Resources</th>\r\n              <th>Custom Resources</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            <!-- TODO: @2pp - deduplicate resources like I deduplicated the settings \r\n              but be very careful to test & verify every scenario\r\n            -->\r\n            <!-- Resources for Global App -->\r\n            <tr>\r\n              <th>{{ buttons().topRowLabel }}</th>\r\n              <td>\r\n                <a [href]=\"buttons().systemResources.url\" mat-icon-button [tippy]=\"buttons().systemResources.tooltip\">\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().systemResources.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n              <td>\r\n                <a\r\n                  [href]=\"buttons().customResources.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customResources.url, buttons().customResourcesType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customResources.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customResources.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >edit</mat-icon\r\n                  >\r\n                </a>\r\n                <a\r\n                  [href]=\"buttons().customResourcesFields.url\"\r\n                  (click)=\"fixContentTypeIfNecessary(buttons().customResources.url, buttons().customResourcesType, $event)\"\r\n                  mat-icon-button\r\n                  [tippy]=\"buttons().customResourcesFields.tooltip\"\r\n                >\r\n                  <mat-icon\r\n                    matBadgeColor=\"accent\"\r\n                    matBadgeSize=\"small\"\r\n                    [matBadge]=\"buttons().customResourcesFields.count\"\r\n                    matBadgePosition=\"below after\"\r\n                    aria-hidden=\"false\"\r\n                    >dns</mat-icon\r\n                  >\r\n                </a>\r\n              </td>\r\n            </tr>\r\n            @if (isSite()) {\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } @else if (isApp()) {\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            }\r\n            <!-- Resources for Primary App -->\r\n            <!-- @if (isPrimary) {\r\n              <tr>\r\n                <th>Site</th>\r\n                <td>\r\n                  <a [href]=\"appSiteSystemResourcesUrl()\" mat-icon-button tippy=\"Edit site system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a\r\n                    [href]=\"appSiteCustomResourcesUrl()\"\r\n                    mat-icon-button\r\n                    tippy=\"Edit custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.customResources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom site resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n            <!-- Resources for App and Content -->\r\n            <!-- @if (isApp) {\r\n              <tr>\r\n                <th>{{ dialogSettings.Context.App.Name }}</th>\r\n                <td>\r\n                  <a [href]=\"appContentSystemResourcesUrl()\" mat-icon-button tippy=\"Edit app system resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.systemResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n                <td>\r\n                  <a [href]=\"appContentCustomResourcesUrl()\" mat-icon-button tippy=\"Edit custom app resources\">\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >edit</mat-icon\r\n                    >\r\n                  </a>\r\n                  <a\r\n                    [href]=\"urlToConfig(eavConstants.contentTypes.resources)\"\r\n                    mat-icon-button\r\n                    tippy=\"Configure fields of the custom app resources\"\r\n                  >\r\n                    <mat-icon\r\n                      matBadgeColor=\"accent\"\r\n                      matBadgeSize=\"small\"\r\n                      [matBadge]=\"viewModelSig()?.customResourcesFieldsCount || null\"\r\n                      matBadgePosition=\"below after\"\r\n                      aria-hidden=\"false\"\r\n                      >dns</mat-icon\r\n                    >\r\n                  </a>\r\n                </td>\r\n              </tr>\r\n              <ng-container *ngTemplateOutlet=\"goToSite\"></ng-container>\r\n              <ng-container *ngTemplateOutlet=\"goToGlobal\"></ng-container>\r\n            } -->\r\n          </tbody>\r\n        </table>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/settings'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToAnalyze(AnalyzeParts.Resources)\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          tippy=\"See the result of combining all resources\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">manage_search</mat-icon>\r\n          <span>Analyze Combined Resources</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Templates which are re-used in the table above -->\r\n    <ng-template #goToGlobal>\r\n      <tr>\r\n        <th>Global</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openGlobalSettings()\" tippy=\"Go to global\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template #goToSite>\r\n      <tr>\r\n        <th>Site</th>\r\n        <td>\r\n          <button mat-icon-button (click)=\"openSiteSettings()\" tippy=\"Go to site\">\r\n            <mat-icon>open_in_new</mat-icon>\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </div>\r\n  <div class=\"eav-cards-box\">\r\n    <app-app-configuration-card [dialogSettings]=\"dialogSettings()\" [appSettingsInternal]=\"appSpecsLazy()\" [refresh]=\"refresh()\">\r\n    </app-app-configuration-card>\r\n    <!-- LightSpeed -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Performance</mat-card-title>\r\n        <mat-icon>bolt</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>LightSpeed Output Cache to speed up page by 50-90%</p>\r\n        <app-feature-text-info [featureNameId]=\"LightSpeedOutputCache\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/lightspeed'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          class=\"default-link\"\r\n          [href]=\"buttons().lightspeed.url\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          disabled=\"{{ !lightSpeedEnabled() }}\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            [matBadge]=\"buttons().lightspeed.count\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >bolt</mat-icon\r\n          >\r\n          <span>Edit LightSpeed</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Security / CSP -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Security</mat-card-title>\r\n        <mat-icon>local_police</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>ContentSecurityPolicy (CSP) features in this App - for maximum control.</p>\r\n        <app-feature-text-info [featureNameId]=\"ContentSecurityPolicy\" [asInfo]=\"true\"></app-feature-text-info>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://go.2sxc.org/csp'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n    <!-- Permissions -->\r\n    <mat-card class=\"eav-card\">\r\n      <mat-card-header class=\"eav-card-header\">\r\n        <mat-card-title>Permissions</mat-card-title>\r\n        <mat-icon>person</mat-icon>\r\n      </mat-card-header>\r\n      <mat-card-content>\r\n        <p>Give access to the entire app (all data). Use with care.</p>\r\n      </mat-card-content>\r\n      <div class=\"eav-card-space-div\"></div>\r\n      <mat-card-actions align=\"start\">\r\n        <app-docs-link-helper [link]=\"'https://docs.2sxc.org/basics/app/permissions.html'\" [label]=\"\" [icon]=\"\"></app-docs-link-helper>\r\n        <a\r\n          [href]=\"urlToOpenPermissions()\"\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          [disabled]=\"!dialogSettings().Context.Enable.AppPermissions\"\r\n        >\r\n          <mat-icon\r\n            matBadgeColor=\"accent\"\r\n            matBadgeSize=\"small\"\r\n            matBadgePosition=\"below after\"\r\n            [matBadge]=\"dialogSettings().Context.App.Permissions.Count || null\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n            >person</mat-icon\r\n          >\r\n          <span>\r\n            Edit Permissions\r\n            @if (!dialogSettings().Context.Enable.AppPermissions) {\r\n              @if (isGlobal()) {\r\n                (not on Global App)\r\n              }\r\n              @if (isApp()) {\r\n                (not on Content)\r\n              }\r\n            }\r\n          </span>\r\n        </a>\r\n        <app-docs-link-helper\r\n          [link]=\"'https://patrons.2sxc.org/features/feat/PermissionsByLanguage'\"\r\n          [label]=\"\"\r\n          [icon]=\"\"\r\n        ></app-docs-link-helper>\r\n        <a [href]=\"urlToOpenLanguagePermissions(langPermsEnabled())\" mat-button class=\"eav-button__with-icon\">\r\n          <mat-icon\r\n            [matBadgeHidden]=\"langPermsEnabled()\"\r\n            matBadgeSize=\"small\"\r\n            matBadgeIcon=\"diamond\"\r\n            matBadgePosition=\"below after\"\r\n            aria-hidden=\"false\"\r\n            class=\"eav-icon\"\r\n          >\r\n            person\r\n          </mat-icon>\r\n          <span>Language Permissions</span>\r\n        </a>\r\n      </mat-card-actions>\r\n    </mat-card>\r\n  </div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { NgTemplateOutlet } from '@angular/common';\r\nimport { Component, OnInit, Signal, computed, inject, signal } from '@angular/core';\r\nimport { toSignal } from '@angular/core/rxjs-interop';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Subject } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { DocsLinkHelperComponent } from '../../admin-shared/docs-link-helper/docs-link-helper.component';\r\nimport { ContentItemsService } from '../../content-items/services/content-items.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesService } from '../../features/features.service';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { SystemSettingsScopes, eavConstants } from '../../shared/constants/eav.constants';\r\nimport { MatBadgeIconDirective } from '../../shared/directives/mat-badge-icon.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { AppScopes } from '../../shared/models/dialog-context.models';\r\nimport { EditPrep } from '../../shared/models/edit-form.model';\r\nimport { DialogInNewWindowService } from '../../shared/routing/dialog-in-new-window.service';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppAdminHelpers } from '../app-admin-helpers';\r\nimport { AppInternals } from '../models/app-internals.model';\r\nimport { ContentTypeEdit } from '../models/content-type.model';\r\nimport { AppInternalsService } from '../services/app-internals.service';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { AnalyzeParts } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\nimport { AppConfigurationCardComponent } from './app-configuration-card/app-configuration-card.component';\r\n\r\n@Component({\r\n  selector: 'app-app-configuration',\r\n  templateUrl: './app-configuration.component.html',\r\n  styleUrls: ['./app-configuration.component.scss'],\r\n  imports: [\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatBadgeModule,\r\n    MatBadgeIconDirective,\r\n    NgTemplateOutlet,\r\n    AppConfigurationCardComponent,\r\n    FeatureTextInfoComponent,\r\n    RouterOutlet,\r\n    TippyDirective,\r\n    DocsLinkHelperComponent,\r\n  ]\r\n})\r\nexport class AppConfigurationComponent implements OnInit {\r\n\r\n  #featuresSvc = inject(FeaturesService);\r\n\r\n  #dialogInNewWindowSvc = transient(DialogInNewWindowService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #appInternalsService = transient(AppInternalsService);\r\n  #contentItemsService = transient(ContentItemsService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private context: Context,\r\n  ) { }\r\n\r\n  eavConstants = eavConstants;\r\n  AnalyzeParts = AnalyzeParts;\r\n  SystemSettingsScopes = SystemSettingsScopes;\r\n  AppScopes = AppScopes;\r\n  LightSpeedOutputCache = FeatureNames.LightSpeed;\r\n  ContentSecurityPolicy = FeatureNames.ContentSecurityPolicy;\r\n\r\n  // Settings for the current dialog\r\n  dialogSettings = toSignal(this.#dialogConfigSvc.getCurrent$());\r\n  #currentScope = computed(() => this.dialogSettings()?.Context.App.SettingsScope);\r\n\r\n  // Booleans containing the current scope state\r\n  isGlobal = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.Global; });\r\n  isSite = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.Site; });\r\n  isApp = computed(() => { const cs = this.#currentScope(); return cs == null ? null : cs === AppScopes.App });\r\n\r\n  /*=== URL SIGNALS FOR EDIT ROUTES ===*/\r\n\r\n  //============== System Settings ==============\r\n\r\n  // Assign System Settings Url\r\n  #appSystemSettingsUrlSource: Signal<string>;\r\n  appSystemSettingsUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appSystemSettingsUrlSource ??= this.urlToEditSystem(\r\n      eavConstants.contentTypes.systemSettings,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appSystemSettingsUrlSource();\r\n  })\r\n\r\n  //============== System Resources ==============\r\n\r\n  // Assign System Resources Url\r\n  #appSystemResourcesUrlSource: Signal<string>;\r\n  appSystemResourcesUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appSystemResourcesUrlSource ??= this.urlToEditSystem(\r\n      eavConstants.contentTypes.systemResources,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appSystemResourcesUrlSource();\r\n  })\r\n\r\n  //============== Custm Settings ==============\r\n\r\n  // Assign Custom Settings Url\r\n  #appCustomSettingsUrlSource: Signal<string>;\r\n  appCustomSettingsUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appCustomSettingsUrlSource ??= this.urlToEditSystem(\r\n      isGlobal ? eavConstants.contentTypes.customSettings : isSite ? eavConstants.contentTypes.customSettings : eavConstants.contentTypes.settings,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appCustomSettingsUrlSource();\r\n  })\r\n\r\n  //============== Custom Resources ==============\r\n\r\n  // Assign Custom Resources Url\r\n  #appCustomResourcesUrlSource: Signal<string>;\r\n  appCustomResourcesUrl = computed(() => {\r\n    const isGlobal = this.isGlobal();\r\n    const isSite = this.isSite();\r\n    if (isGlobal == null || isSite == null) return null;\r\n    // Ensure that the source is only created once when global/site are ready.\r\n    this.#appCustomResourcesUrlSource ??= this.urlToEditSystem(\r\n      isGlobal ? eavConstants.contentTypes.customResources : isSite ? eavConstants.contentTypes.customResources : eavConstants.contentTypes.resources,\r\n      isGlobal ? SystemSettingsScopes.App : isSite ? SystemSettingsScopes.Site : SystemSettingsScopes.App\r\n    );\r\n    // return value unwrapped\r\n    return this.#appCustomResourcesUrlSource();\r\n  })\r\n\r\n  //============== END ==============\r\n\r\n  // More proper ViewModel\r\n  appSettingsInternal$ = new Subject<AppInternals>();\r\n\r\n  public appStateAdvanced = false;\r\n\r\n  protected lightSpeedEnabled = this.#featuresSvc.isEnabled[FeatureNames.LightSpeed];\r\n  protected cspEnabled = this.#featuresSvc.isEnabled[FeatureNames.ContentSecurityPolicy];\r\n  protected langPermsEnabled = this.#featuresSvc.isEnabled[FeatureNames.PermissionsByLanguage];\r\n\r\n  refresh = signal(0);\r\n  appSpecsLazy = this.#appInternalsService.getAppInternalsLive(this.refresh).value;\r\n\r\n  /** Statistics for the content-types and fields for later */\r\n  #dataStatistics = computed(() => {\r\n    const appSpecs = this.appSpecsLazy();\r\n\r\n    if (!appSpecs)\r\n      return null;\r\n\r\n    const props = appSpecs?.EntityLists;\r\n    const lsTypeName = eavConstants.appMetadata.LightSpeed.ContentTypeName;\r\n\r\n    const isSite = this.isSite();\r\n    const result: TempDataStatistics = {\r\n      appLightSpeedCount: appSpecs.MetadataList.Items.filter(i => i._Type.Name === lsTypeName).length,\r\n      systemSettingsCount: isSite\r\n        ? props.SettingsSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.SettingsSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customSettingsCount: props.AppSettings?.length,\r\n      customSettingsFieldsCount: appSpecs.FieldAll.AppSettings?.length,\r\n      systemResourcesCount: isSite\r\n        ? props.ResourcesSystem.filter(i => i.SettingsEntityScope === SystemSettingsScopes.Site).length\r\n        : props.ResourcesSystem.filter(i => !i.SettingsEntityScope).length,\r\n      customResourcesCount: props.AppResources?.length,\r\n      customResourcesFieldsCount: appSpecs?.FieldAll.AppResources?.length,\r\n    };\r\n\r\n    return result;\r\n  });\r\n\r\n  /** Test if current types for settings/resources exist, otherwise they must be created before opening dialogs */\r\n  #customTypesExist = computed(() => {\r\n    const appSpecs = this.appSpecsLazy();\r\n    return (!appSpecs)\r\n      ? { settings: false, resources: false }\r\n      : {\r\n        settings: appSpecs.FieldAll.AppSettings != null,\r\n        resources: appSpecs.FieldAll.AppResources != null,\r\n      }\r\n  });\r\n\r\n  ngOnInit() {\r\n    // Update dialog router when child a dialog was closesd\r\n    this.#dialogRouter.doOnDialogClosed(() => {\r\n      this.refresh.update(v => ++v)\r\n    });\r\n  }\r\n\r\n  buttons = computed<Buttons>(() => {\r\n    // if not ready, return a full object with empty values\r\n    const ready = this.dialogSettings() != null;\r\n    if (!ready) {\r\n      const nothing: ButtonSpecs = { tooltip: '', url: '', count: null };\r\n      return {\r\n        topRowLabel: 'loading...',\r\n        customSettingsType: '',\r\n        customResourcesType: '',\r\n        systemSettings: nothing,\r\n        customSettings: nothing,\r\n        customSettingsFields: nothing,\r\n        systemResources: nothing,\r\n        customResources: nothing,\r\n        customResourcesFields: nothing,\r\n        lightspeed: nothing,\r\n      }\r\n    }\r\n\r\n    // From the current settings computed booleans containing the scope state\r\n    const isGlobal = !!this.isGlobal();\r\n    const isSite = !!this.isSite();\r\n    const isApp = !!this.isApp();\r\n\r\n    // The name of the top row, to use in the row label and tooltips\r\n    const scopeName = this.dialogSettings().Context.App.SettingsScope;\r\n\r\n    // The statistics of the entities - should later be simplified once code is improved @2pp\r\n    const viewModel = this.#dataStatistics();\r\n\r\n    const typeNames = eavConstants.contentTypes;\r\n    const customSettingsType = isApp\r\n      ? typeNames.settings\r\n      : typeNames.customSettings;\r\n    const customResourcesType = isApp\r\n      ? typeNames.resources\r\n      : typeNames.customResources;\r\n\r\n    // Detect if the custom types exist\r\n    const typesExist = this.#customTypesExist();\r\n\r\n    return {\r\n      topRowLabel: scopeName,\r\n      customSettingsType: customSettingsType,\r\n      customResourcesType: customResourcesType,\r\n      systemSettings: {\r\n        tooltip: `Edit ${scopeName} system settings`,\r\n        url: this.appSystemSettingsUrl(),\r\n        count: viewModel?.systemSettingsCount || null,\r\n      },\r\n      customSettings: {\r\n        tooltip: `Edit ${scopeName} custom settings`,\r\n        url: typesExist.settings\r\n          ? this.appCustomSettingsUrl()\r\n          : null,\r\n        count: viewModel?.customSettingsCount || null,\r\n      },\r\n      customSettingsFields: {\r\n        tooltip: `Configure fields of the custom ${scopeName} settings`,\r\n        url: typesExist.settings\r\n          ? this.urlToConfig(customSettingsType)\r\n          : null,\r\n        count: viewModel?.customSettingsFieldsCount || null,\r\n      },\r\n      systemResources: {\r\n        tooltip: `Edit ${scopeName} system resources`,\r\n        url: this.appSystemResourcesUrl(),\r\n        count: viewModel?.systemResourcesCount || null,\r\n      },\r\n      customResources: {\r\n        tooltip: `Edit ${scopeName} custom resources`,\r\n        url: typesExist.resources\r\n          ? this.appCustomResourcesUrl()\r\n          : null,\r\n        count: viewModel?.customResourcesCount || null,\r\n      },\r\n      customResourcesFields: {\r\n        tooltip: `Edit ${scopeName} custom resources fields`,\r\n        url: this.urlToConfig(customResourcesType),\r\n        count: viewModel?.customResourcesFieldsCount || null,\r\n      },\r\n      lightspeed: {\r\n        tooltip: `Edit ${scopeName} LightSpeed`,\r\n        url: this.urlToGetLightSpeedLink(),\r\n        count: viewModel?.appLightSpeedCount || null,\r\n      },\r\n    } satisfies Buttons;\r\n  });\r\n\r\n  #urlTo(url: string, queryParams?: { [key: string]: string }, errComponent?: string) {\r\n    let newUrl = '#' + this.#dialogRouter.urlSubRoute(url);\r\n\r\n    if (queryParams)\r\n      newUrl += `?${new URLSearchParams(queryParams).toString()}`;\r\n    if (errComponent)\r\n      newUrl += `&errComponent=${errComponent}`;\r\n\r\n    return newUrl;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.systemSettings:\r\n  // case eavConstants.contentTypes.systemResources:\r\n  urlToEditSystem(staticName: string, systemSettingsScope?: Of<typeof SystemSettingsScopes>) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAllPromise(staticName).then(contentItems => {\r\n      const systemSettingsEntities = contentItems.filter(i =>\r\n        systemSettingsScope === SystemSettingsScopes.App\r\n          ? !i.SettingsEntityScope\r\n          : i.SettingsEntityScope === SystemSettingsScopes.Site\r\n      );\r\n      if (systemSettingsEntities.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const systemSettingsEntity = systemSettingsEntities[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              systemSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName, {\r\n                  ...(systemSettingsScope === SystemSettingsScopes.Site && {\r\n                    SettingsEntityScope: SystemSettingsScopes.Site,\r\n                  }),\r\n                })\r\n                : EditPrep.editId(systemSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case eavConstants.contentTypes.customSettings:\r\n  // case eavConstants.contentTypes.customResources:\r\n  urlToEditCustom(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAllPromise(staticName).then(contentItems => {\r\n      if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        const customSettingsEntity = contentItems[0];\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [\r\n              customSettingsEntity == null\r\n                ? EditPrep.newFromType(staticName)\r\n                : EditPrep.editId(customSettingsEntity.Id),\r\n            ],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  // case default:\r\n  urlToEditDefault(staticName: string) {\r\n    const url = signal('');\r\n    this.#contentItemsService.getAllPromise(staticName).then(contentItems => {\r\n      if (contentItems.length < 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorNoAppSettings' }, staticName));\r\n      } else if (contentItems.length > 1) {\r\n        url.set(this.#urlTo('message/e', { error: 'AppAdmin.ErrorTooManyAppSettings' }, staticName));\r\n      } else {\r\n        url.set(this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [EditPrep.editId(contentItems[0].Id)],\r\n          })}`\r\n        ));\r\n      }\r\n    });\r\n\r\n    return url;\r\n  }\r\n\r\n  urlToGetLightSpeedLink(): string {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl(\r\n        AppAdminHelpers.getLightSpeedEditParams(this.context.appId)\r\n      )}`\r\n    );\r\n  }\r\n\r\n  openSiteSettings() {\r\n    const siteApp = this.dialogSettings().Context.Site.PrimaryApp;\r\n    this.#dialogInNewWindowSvc.openAppAdministration(siteApp.ZoneId, siteApp.AppId, 'app');\r\n  }\r\n\r\n  openGlobalSettings() {\r\n    const globalApp = this.dialogSettings().Context.System.PrimaryApp;\r\n    this.#dialogInNewWindowSvc.openAppAdministration(globalApp.ZoneId, globalApp.AppId, 'app');\r\n  }\r\n\r\n  urlToConfig(staticName: string) {\r\n    return this.#urlTo(`fields/${staticName}`);\r\n  }\r\n\r\n  urlToOpenPermissions() {\r\n    return this.#urlTo(GoToPermissions.getUrlApp(this.context.appId));\r\n  }\r\n\r\n  urlToOpenLanguagePermissions(enabled: boolean) {\r\n    if (enabled)\r\n      return this.#urlTo('language-permissions')\r\n    else\r\n      return this.#urlTo('edit-language-permissions')\r\n  }\r\n\r\n  urlToAnalyze(part: Of<typeof AnalyzeParts>) {\r\n    return this.#urlTo(`analyze/${part}`);\r\n  }\r\n\r\n  fixContentTypeIfNecessary(url: string, typeName: string, event: MouseEvent) {\r\n    // If we have a url, everything is fine so we can just return and let the click happen\r\n    if (url) return;\r\n\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n\r\n    // Check server if the content-type exists\r\n    this.#contentTypesSvc.retrieveContentTypesPromise(eavConstants.scopes.configuration.value).then(contentTypes => {\r\n      const contentTypeExists = contentTypes.some(ct => ct.Name === typeName);\r\n      if (contentTypeExists) {\r\n        // Open Edit dialog\r\n        const url = (this.#urlTo(\r\n          `edit/${convertFormToUrl({\r\n            items: [EditPrep.newFromType(typeName)],\r\n          })}`\r\n        ));\r\n        if (url) {\r\n          window.open(url, \"_self\");\r\n          return\r\n        }\r\n        else\r\n          return\r\n      } else {\r\n        const newContentType = {\r\n          StaticName: '',\r\n          // NameId: '',\r\n          Name: typeName,\r\n          Description: '',\r\n          Scope: eavConstants.scopes.configuration.value,\r\n          // ChangeStaticName: false,\r\n          ChangeNameId: false,\r\n          // NewStaticName: '',\r\n          NewNameId: '',\r\n        } as ContentTypeEdit;\r\n\r\n        this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n          if (!success) return;\r\n          // trigger refresh\r\n          this.refresh.update(v => ++v);\r\n\r\n          // Inform user\r\n          alert('Created a new Content Type. Please try again 👍🏼.');\r\n        });\r\n        return false;\r\n      }\r\n    });\r\n  }\r\n\r\n  // 2025-01-21 2dm had to restore this functionality, keep this code till 2025-Q2 just in case\r\n  // fixContentType(staticName: string, action: 'edit' | 'config') {\r\n  //   this.#contentTypesSvc.retrieveContentTypes(eavConstants.scopes.configuration.value).subscribe(contentTypes => {\r\n  //     const contentTypeExists = contentTypes.some(ct => ct.Name === staticName);\r\n  //     if (contentTypeExists) {\r\n  //       if (action === 'edit') {\r\n  //         this.edit(staticName);\r\n  //       } else if (action === 'config') {\r\n  //         this.config(staticName);\r\n  //       }\r\n  //     } else {\r\n  //       const newContentType = {\r\n  //         StaticName: '',\r\n  //         // NameId: '',\r\n  //         Name: staticName,\r\n  //         Description: '',\r\n  //         Scope: eavConstants.scopes.configuration.value,\r\n  //         // ChangeStaticName: false,\r\n  //         ChangeNameId: false,\r\n  //         // NewStaticName: '',\r\n  //         NewNameId: '',\r\n  //       } as ContentTypeEdit;\r\n  //       this.#contentTypesSvc.save(newContentType).subscribe(success => {\r\n  //         if (!success) return;\r\n\r\n  //         if (action === 'edit') {\r\n  //           this.edit(staticName);\r\n  //         } else if (action === 'config') {\r\n  //           this.config(staticName);\r\n  //         }\r\n  //       });\r\n  //     }\r\n  //   });\r\n  // }\r\n}\r\n\r\nclass TempDataStatistics {\r\n  // Lightspeed\r\n  appLightSpeedCount: number;\r\n\r\n  systemSettingsCount: number;\r\n  customSettingsCount: number;\r\n  customSettingsFieldsCount: number;\r\n  systemResourcesCount: number;\r\n  customResourcesCount: number;\r\n  customResourcesFieldsCount: number;\r\n}\r\n\r\ninterface ButtonSpecs {\r\n  /** Tooltip on the button */\r\n  tooltip: string,\r\n  /** url to open a dialog, or null if the content-type doesn't exist and requires pre-work */\r\n  url: string,\r\n  /** count of fields or entities */\r\n  count: number,\r\n}\r\n\r\ninterface Buttons {\r\n  topRowLabel: string,\r\n  customSettingsType: string,\r\n  customResourcesType: string,\r\n  systemSettings: ButtonSpecs,\r\n  customSettings: ButtonSpecs,\r\n  customSettingsFields: ButtonSpecs,\r\n  systemResources: ButtonSpecs,\r\n  customResources: ButtonSpecs,\r\n  customResourcesFields: ButtonSpecs,\r\n  lightspeed: ButtonSpecs,\r\n}\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, DOCUMENT, HOST_TAG_NAME, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"20.0.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\\n\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const tagName = inject(HOST_TAG_NAME);\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.dev/components/badge/overview#accessibility\n            if (tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationsDisabled) {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && !this._animationsDisabled) {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"20.0.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import { Directive, Input, OnInit, Renderer2, RendererStyleFlags2 } from \"@angular/core\";\r\nimport { MatBadge } from \"@angular/material/badge\";\r\n\r\n@Directive({\r\n  selector: '[matBadgeIcon]',\r\n})\r\nexport class MatBadgeIconDirective extends MatBadge implements OnInit {\r\n  @Input() matBadgeIcon: string = '';\r\n\r\n  constructor( private renderer: Renderer2 ) { super(); }\r\n\r\n  ngOnInit(): void {\r\n    if(!this.matBadgeIcon)\r\n      return;\r\n\r\n    // TypeScript hack to get access to private function\r\n    const badgeElement = (this as any)['_createBadgeElement']();\r\n\r\n    // Style the badge element as a flex container\r\n    this.renderer.setStyle(badgeElement, 'display', 'flex');\r\n    \r\n    // Create the icon element\r\n    const iconElement = this.renderer.createElement('mat-icon');\r\n    this.renderer.appendChild(iconElement, this.renderer.createText(this.matBadgeIcon));\r\n    \r\n    // Set font for Material\r\n    this.renderer.setStyle(iconElement, 'font-family', 'Material Symbols Outlined');\r\n\r\n    // Set styles for the icon\r\n    this.renderer.setStyle(iconElement, 'font-size', '10');\r\n    this.renderer.setStyle(iconElement, 'height', '16px');\r\n    this.renderer.setStyle(iconElement, 'line-height', '16px');\r\n    this.renderer.setStyle(iconElement, 'color', '#fff', RendererStyleFlags2.Important);\r\n    \r\n    // Add Material icon classes\r\n    this.renderer.addClass(iconElement, 'mat-icon');\r\n    this.renderer.addClass(iconElement, 'material-icons');\r\n    \r\n    // Append the icon to the badge\r\n    this.renderer.appendChild(badgeElement, iconElement);\r\n  }\r\n}\r\n"],"x_google_ignoreList":[6]}