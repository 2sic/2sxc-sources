{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/ng-dialogs/src/app/metadata/go-to-metadata.ts"],"names":["nextId","_MatBadgeBase","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","this","value","_setColor","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","trim","length","_updateTextContent","description","removeDescription","destroyNode","textContent","_stringifyContent","_createBadgeElement","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","t","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","MatBadgeModule","ɵmod","ɵinj","imports","webApiFieldsAll","webApiFieldsRoot","http","context","dnnContext","apiUrl","name","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","inputConfigs","map","config","dataType","Type","substring","inputType","label","Label","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","staticName","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","All","reOrder","idArray","contentType","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","fieldId","newName","delete","IsTitle","Error","newField","AppId","ContentTypeId","StaticName","Index","SortOrder","updateInputType","id","field","ContentTypesFieldsService","getRoutes","defaultRoute","path","loadChildren","then","m","MetadataModule","data","title","getUrl","targetType","keyType","key","dialogTitle","url","encodeURIComponent","getUrlApp","getUrlAttribute","getUrlContentType","getUrlEntity","guid"],"mappings":"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","file":"default-node_modules_angular_material___ivy_ngcc___fesm2015_badge_js-projects_ng-dialogs_src_-e5e134.81d94c5aa6a8d72d0b10.js","sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outlined' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:type/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.type,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.type,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.type,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.type,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}