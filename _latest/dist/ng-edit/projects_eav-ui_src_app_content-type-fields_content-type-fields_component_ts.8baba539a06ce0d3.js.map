{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.8baba539a06ce0d3.js","mappings":"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","names":["i0","ctx_r1","feature","isEnabled","_r3","clipboard","copyToClipboard","guid","_r4","dialog","close","_r1","nameId","FeatureDetailsDialogComponent_Conditional_0_Conditional_13_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_14_Template","FeatureDetailsDialogComponent_Conditional_0_Conditional_26_Template","name","description","mySpecs","showStatus","showGuid","security","Impact","Message","link","showClose","FeatureDetailsDialogComponent","constructor","dialogSpecs","this","specs","input","computedObj","transient","ClipboardService","MAT_DIALOG_DATA","i1","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","FeatureDetailsDialogComponent_Conditional_0_Template","MatCardModule","i2","MatButtonModule","i3","MatIconModule","i4","SafeHtmlPipe","TranslateModule","i5","encapsulation","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","params","data","disableEdit","DisableEdit","enablePermissions","InputType","InputTypeCatalog","StringWysiwyg","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","MatBadgeModule","MatMenuModule","TippyDirective","styles","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","_c0","_c1","CdkTable_Conditional_2_Template","CdkTable_Conditional_3_Template","CdkTable_Conditional_4_Template","CDK_TABLE","InjectionToken","CdkCellDef","ɵfac","__ngFactoryType__","ɵdir","type","CdkHeaderCellDef","CdkFooterCellDef","CdkColumnDef","_name","_setNameInput","sticky","_sticky","_hasStickyChanged","stickyEnd","_stickyEnd","_table","hasStickyChanged","resetStickyChanged","_updateColumnCssClassName","_columnCssClassName","cssClassFriendlyName","replace","contentQueries","dirIndex","_t","cell","first","headerCell","footerCell","booleanAttribute","provide","useExisting","BaseCdkCell","columnDef","elementRef","nativeElement","classList","add","CdkHeaderCell","super","hostAttrs","CdkCell","role","_getCellRole","setAttribute","_Schedule","tasks","endTasks","_COALESCED_STYLE_SCHEDULER","_CoalescedStyleScheduler","_unusedNgZone","_currentSchedule","_ngZone","inject","NgZone","schedule","task","_createScheduleIfNeeded","push","scheduleEnd","runOutsideAngular","queueMicrotask","ɵprov","token","factory","BaseRowDef","_differs","ngOnChanges","changes","_columnsDiffer","columns","currentValue","find","create","diff","getColumnsDiff","extractCellTemplate","column","CdkHeaderRowDef","CdkFooterRowDef","CdkRowDef","when","CdkCellOutlet","mostRecentCellOutlet","_viewContainer","ngOnDestroy","CdkHeaderRow","ɵcmp","dependencies","CdkRow","CdkNoDataRow","templateRef","_contentClassName","STICKY_DIRECTIONS","StickyStyler","_isNativeHtmlTable","_stickCellCss","direction","_coalescedStyleScheduler","_isBrowser","_needsPositionStickyOnElement","_positionListener","_cachedCellWidths","_borderCellCss","top","bottom","left","right","clearStickyPositioning","rows","stickyDirections","elementsToClear","row","nodeType","ELEMENT_NODE","i","children","element","_removeStickyStyle","updateStickyColumns","stickyStartStates","stickyEndStates","recalculateCellWidths","some","state","firstRow","numCells","cellWidths","_getCellWidths","startPositions","_getStickyStartColumnPositions","endPositions","_getStickyEndColumnPositions","lastStickyStart","lastIndexOf","firstStickyEnd","indexOf","isRtl","start","end","_addStickyStyle","stickyColumnsUpdated","sizes","slice","map","width","index","stickyEndColumnsUpdated","reverse","stickRows","rowsToStick","stickyStates","position","states","stickyOffsets","stickyCellHeights","elementsToStick","rowIndex","stickyOffset","Array","from","height","getBoundingClientRect","borderedRowIndex","offset","isBorderedRowIndex","stickyHeaderRowsUpdated","offsets","elements","stickyFooterRowsUpdated","updateStickyFooterContainer","tableElement","tfoot","querySelector","dir","style","remove","zIndex","_getCalculatedZIndex","dirValue","isBorderElement","cssText","zIndexIncrements","firstRowCells","widths","positions","nextPosition","STICKY_POSITIONING_LISTENER","DataRowOutlet","viewContainer","table","_rowOutlet","_outletAssigned","HeaderRowOutlet","_headerRowOutlet","FooterRowOutlet","_footerRowOutlet","NoDataRowOutlet","_noDataRowOutlet","CdkTable","undefined","_cellRoleInternal","_elementRef","getAttribute","cellRole","trackBy","_trackByFn","fn","dataSource","_dataSource","_switchDataSource","multiTemplateDataRows","_multiTemplateDataRows","_forceRenderDataRows","updateStickyColumnStyles","fixedLayout","_fixedLayout","_forceRecalculateCellWidths","_stickyColumnStylesNeedReset","_changeDetectorRef","_dir","_document","_platform","_viewRepeater","_viewportRuler","_stickyPositioningListener","_onDestroy","Subject","_columnDefsByName","Map","_customColumnDefs","Set","_customRowDefs","_customHeaderRowDefs","_customFooterRowDefs","_headerRowDefChanged","_footerRowDefChanged","_cachedRenderRowsMap","stickyCssClass","needsPositionStickyOnElement","_isShowingNoDataRow","_hasAllOutlets","_hasInitialized","contentChanged","EventEmitter","viewChange","BehaviorSubject","Number","MAX_VALUE","_injector","Injector","_isServer","isBrowser","nodeName","ngOnInit","_setupStickyStyler","_dataDiffer","_i","dataRow","dataIndex","change","pipe","takeUntil","subscribe","ngAfterContentInit","ngAfterContentChecked","_canRender","_render","forEach","def","clear","_headerRowDefs","_footerRowDefs","_defaultRowDef","next","complete","isDataSource","disconnect","renderRows","_renderRows","_getAllRenderRows","_updateNoDataRow","applyChanges","record","_adjustedPreviousIndex","currentIndex","_getEmbeddedViewArgs","item","operation","_ViewRepeaterOperation","INSERTED","context","_renderCellTemplateForItem","rowDef","_updateRowIndexContext","forEachIdentityChange","get","$implicit","afterNextRender","injector","addColumnDef","removeColumnDef","delete","addRowDef","removeRowDef","addHeaderRowDef","headerRowDef","removeHeaderRowDef","addFooterRowDef","footerRowDef","removeFooterRowDef","setNoDataRow","noDataRow","_customNoDataRow","updateStickyHeaderRowStyles","headerRows","_getRenderedRows","thead","closestTableSection","display","_stickyStyler","updateStickyFooterRowStyles","footerRows","dataRows","headerRow","_addStickyColumnStyles","_rowDefs","footerRow","values","_cacheRowDefs","_cacheColumnDefs","rowDefsChanged","_renderUpdatedColumns","_forceRenderHeaderRows","_forceRenderFooterRows","_renderChangeSubscription","_observeRenderChanges","_checkStickyStates","prevCachedRenderRows","_data","renderRowsForData","_getRenderRowsForData","has","set","WeakMap","j","renderRow","cache","_getRowDefs","cachedRenderRows","shift","mergeArrayAndSet","_getOwnDefs","_contentColumnDefs","_contentHeaderRowDefs","_contentFooterRowDefs","_contentRowDefs","defaultRowDefs","columnsDiffReducer","acc","dataColumnsChanged","reduce","headerColumnsChanged","footerColumnsChanged","unsubscribe","dataStream","connect","isObservable","isArray","of","_renderRow","columnDefs","columnName","rowOutlet","renderedRows","viewRef","rootNodes","rowDefs","outlet","view","createEmbeddedView","cellTemplate","_getCellTemplates","markForCheck","renderIndex","count","last","even","odd","columnId","stickyCheckReducer","d","items","_noDataRow","shouldShow","container","rootNode","DOCUMENT","_VIEW_REPEATER_STRATEGY","hostVars","hostBindings","outputs","exportAs","useClass","_DisposeViewRepeaterStrategy","useValue","ngContentSelectors","array","concat","section","uppercaseSection","toUpperCase","current","parentNode","CdkTableModule","ɵmod","ɵinj","imports","ScrollingModule","MatTable_Conditional_2_Template","MatTable_Conditional_3_Template","MatTable_Conditional_4_Template","MatTable","arguments","ɵMatTable_BaseFactory","MatCellDef","ɵMatCellDef_BaseFactory","MatHeaderCellDef","ɵMatHeaderCellDef_BaseFactory","MatColumnDef","ɵMatColumnDef_BaseFactory","MatHeaderCell","ɵMatHeaderCell_BaseFactory","MatCell","ɵMatCell_BaseFactory","MatHeaderRowDef","ɵMatHeaderRowDef_BaseFactory","MatRowDef","ɵMatRowDef_BaseFactory","MatHeaderRow","ɵMatHeaderRow_BaseFactory","MatRow","ɵMatRow_BaseFactory","MatTableModule","MatCommonModule","MatTableDataSource","DataSource","_renderChangesSubscription","_filterData","_filter","sort","_sort","_updateChangeSubscription","paginator","_paginator","initialData","_renderData","_internalPageChanges","sortingDataAccessor","sortHeaderId","_isNumberValue","numberValue","sortData","active","a","b","valueA","valueB","valueAType","valueBType","comparatorResult","filterPredicate","dataStr","currentTerm","toLowerCase","transformedFilter","trim","sortChange","merge","initialized","pageChange","page","filteredData","combineLatest","orderedData","_orderData","paginatedData","_pageData","obj","_updatePaginator","startIndex","pageIndex","pageSize","filteredDataLength","Promise","resolve","then","lastPageIndex","Math","ceil","newPageIndex","min","field_r2","ContentType","Name","field_r3","StaticName","field_r4","field_r6","ctx_r6","selectField","fieldNameError","newName_r10","errors","reservedNames","FieldSharingAddMany_td_45_Conditional_6_Conditional_0_Template","FieldSharingAddMany_td_45_Conditional_6_Conditional_1_Template","pattern","$event","item_r9","_r8","newName","FieldSharingAddMany_td_45_Conditional_6_Template","fieldNamePattern","i_r11","item_r12","item_r14","_r13","removeField","FieldSharingAddMany","BaseComponent","#features","#contentTypesFieldsSvc","dialogData","snackBar","matDialog","viewContainerRef","changeDetectorRef","hostClass","FeaturesScopedService","ContentTypesFieldsService","optionsColumns","selectedColumns","shareableFields","selectedFields","saving","signalObj","#fieldShareConfigManagement","FeatureNames","ContentTypeFieldsReuseDefinitions","disableClose","subscriptions","backdropClick","form","dirty","confirm","getShareableFields","getReservedNames","names","ReservedNamesValidatorDirective","mergeReserved","existingFields","splice","save","open","inheritField","concatMap","addInheritedField","contentType","Id","catchError","_","toArray","duration","openFeatureDialog","viewQuery","NgForm","FieldSharingAddMany_th_26_Template","FieldSharingAddMany_td_27_Template","FieldSharingAddMany_th_29_Template","FieldSharingAddMany_td_30_Template","FieldSharingAddMany_th_32_Template","FieldSharingAddMany_td_33_Template","FieldSharingAddMany_th_35_Template","FieldSharingAddMany_td_36_Template","FieldSharingAddMany_tr_37_Template","FieldSharingAddMany_tr_38_Template","FieldSharingAddMany_th_44_Template","FieldSharingAddMany_td_45_Template","FieldSharingAddMany_th_47_Template","FieldSharingAddMany_td_48_Template","FieldSharingAddMany_th_50_Template","FieldSharingAddMany_td_51_Template","FieldSharingAddMany_tr_52_Template","FieldSharingAddMany_tr_53_Template","ngForm_r15","valid","FormsModule","i6","MatFormFieldModule","i7","MatInputModule","i8","MatDialogActions","i9","FeatureTextInfoComponent","FieldHintComponent","SharingOrInheriting","None","Sharing","Inheriting","ShareOrInheritDialogComponent_Case_9_ng_container_8_Template","detailsOrWarning_r3","s_r4","ShareOrInheritDialogComponent_Case_10_Conditional_4_For_2_Template","_forTrack0","inherited","s_r5","ShareOrInheritDialogComponent_Case_10_Conditional_6_For_6_Template","notInherited","ShareOrInheritDialogComponent_Case_10_Conditional_4_Template","ShareOrInheritDialogComponent_Case_10_ng_container_5_Template","ShareOrInheritDialogComponent_Case_10_Conditional_6_Template","requiredFeature","field_r7","field_r8","field_r9","row_r11","_r10","ShareOrInheritDialogComponent_Case_11_Case_20_th_11_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_12_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_14_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_15_Template","ShareOrInheritDialogComponent_Case_11_Case_20_th_17_Template","ShareOrInheritDialogComponent_Case_11_Case_20_td_18_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_tr_20_Template","_r6","setShare","startInherit","ShareOrInheritDialogComponent_Case_11_Case_19_Template","ShareOrInheritDialogComponent_Case_11_Case_20_Template","sharingOrInheriting","tmp_4_0","_r12","field_r13","AttributeId","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_For_2_Template","_forTrack1","details","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Conditional_1_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_0_Template","ShareOrInheritDialogComponent_ng_template_17_Conditional_1_Template","logSpecs","all","ShareOrInheritDialogComponent","log","classLog","signal","initialState","sysS","title","#inheritsInfo","withFieldNames","split","substring","groupBy","g","none","n","inherits","fnIf","getDescendants","fields","getAncestors","getShareableFieldsFor","share","inherit","ShareOrInheritDialogComponent_Case_9_Template","ShareOrInheritDialogComponent_Case_10_Template","ShareOrInheritDialogComponent_Case_11_Template","ShareOrInheritDialogComponent_Conditional_16_Template","ShareOrInheritDialogComponent_ng_template_17_Template","tmp_2_0","NgClass","NgTemplateOutlet","FeatureIconTextComponent","ContentTypeFieldsComponent","#dialogRouter","#contentTypesSvc","DialogRoutingService","ContentTypesService","gridOptions","#buildGridOptions","sortApplied","filterApplied","#rowDragSuppressed","#contentTypeStaticName","getParam","#gridApi","#columnApi","#fetchFields","doOnDialogClosed","onGridReady","api","columnApi","onRowDragEnter","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","reOrder","onRowDragMove","event","overNode","movingNode","node","newFields","fromIndex","toIndex","reordered","#moveInArray","clearFocusedCell","arr","onSortChanged","columnStates","getColumnState","#suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navRelative","addSharedField","autoFocus","afterClosed","#nameCellRenderer","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","contentTypeTemp","retrieveContentType","fieldsTemp","getFields","forkJoin","#editFieldMetadata","ConfigTypes","t","#createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","#setTitle","#changeInputType","#rename","#delete","#openPermissions","GoToPermissions","getUrlAttribute","#openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","#openMetadata","url","GoToMetadata","#shareOrInherit","defaultGridOptions","getRowClass","rowClass","DisableSort","rowDrag","cellClass","valueGetter","p","cellRenderer","cellRendererParams","ColumnDefinitions","TextWidePrimary","headerName","onCellClicked","ItemsText","flex","minWidth","sortable","All","headerClass","Notes","ActionsPinnedRight5","tmp_0_0","Label","RouterOutlet","ToggleDebugDirective","SxcGridModule","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","AppExportAssetsAdvanced","PickerUiCheckbox","PickerUiRadio","PickerSourceCsv","PickerSourceAppAssets","PickerFormulas","PickerUiMoreInfo","openDialog","FeatureComponentBase","asInfo","FeatureTextInfoComponent_Conditional_0_Template","show","webApiFeatureDetails","FeatureDetailService","HttpServiceBase","getFeatureDetail","getSignal","getFeatureDetails","nameIds","featureList","xx","update","prev","getHttpApiUrl","FeatureInfoDialogComponent","#featureDetailSvc","featureDetails","FeatureInfoDialogComponent_Conditional_0_Template","#matDialog","#viewContainerRef","#changeDetectorRef","#featuresService","featureNameId","required","showIf","MatDialog","ViewContainerRef","ChangeDetectorRef","getCurrent","feat","featureId","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","BooleanDefault","BooleanTristate","CustomDefault","CustomGps","CustomJsonEditor","DateTimeDefault","DefaultSuffix","EmptyDefault","EmptyEnd","EmptyMessage","EntityContentBlocks","EntityDefault","EntityQuery","ExternalWebComponent","HyperlinkDefault","HyperlinkLibrary","NumberDefault","NumberDropdown","StringDefault","StringDropdown","StringDropdownQuery","StringFontIconPicker","StringJson","StringTemplatePicker","StringUrlPath","EntityPicker","StringPicker","NumberPicker","Unknown","ServiceBase","router","route","snapshot","paramMap","getParams","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","l","childDialogClosed$","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","navParentFirstChild","parent","firstChild","events","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.html","./projects/eav-ui/src/app/apps-management/licence-info/feature-details-dialog/feature-details-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./node_modules/@angular/cdk/fesm2022/table.mjs","./node_modules/@angular/material/fesm2022/table.mjs","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-add-many/field-sharing-add-many.component.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.enums.ts","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.html","./projects/eav-ui/src/app/content-type-fields/field-sharing-configure/field-sharing-configure.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/fields/input-type-catalog.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts"],"sourcesContent":["@if (feature()) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature().name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature().description | safeHtml\"></p>\r\n      <!-- Name ID -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">ID:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span (click)=\"clipboard.copyToClipboard(feature().nameId)\">{{ feature().nameId }}</span>\r\n        </div>\r\n      </div>\r\n      <!-- Status -->\r\n      @if (mySpecs().showStatus) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">{{ 'Features.Status' | translate }}:</div>\r\n          <div class=\"eav-info-row__value\">\r\n            <span>{{ (feature().isEnabled ? 'Features.Active' : 'Features.NotActive') | translate }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- GUID -->\r\n      @if (mySpecs().showGuid) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">GUID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span (click)=\"clipboard.copyToClipboard(feature().guid)\">{{ feature().guid }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n      <!-- Security Rating -->\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">Security Rating:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ feature().security.Impact + ': ' + feature().security.Message }}</span>\r\n        </div>\r\n      </div>\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <a [href]=\"feature().link\" target=\"_blank\" mat-raised-button class=\"eav-card-action-button\" color=\"accent\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        Find out more\r\n      </a>\r\n      @if (mySpecs().showClose != false) {\r\n        <button mat-raised-button class=\"eav-card-action-button\" (click)=\"dialog.close()\">Close</button>\r\n      }\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}\r\n","import { Component, Inject, input, Optional } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { transient } from '../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../../shared/pipes/safe-html.pipe';\r\nimport { ClipboardService } from '../../../shared/services/clipboard.service';\r\nimport { computedObj } from '../../../shared/signals/signal.utilities';\r\nimport { FeatureDetailsDialogData } from './feature-details-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-feature-details-dialog',\r\n  templateUrl: './feature-details-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n    TranslateModule,\r\n  ]\r\n})\r\nexport class FeatureDetailsDialogComponent {\r\n  specs = input<FeatureDetailsDialogData>();\r\n\r\n  constructor(\r\n    @Optional() @Inject(MAT_DIALOG_DATA) private dialogSpecs: FeatureDetailsDialogData,\r\n    protected dialog: MatDialogRef<FeatureDetailsDialogComponent>,\r\n  ) { }\r\n\r\n  protected mySpecs = computedObj('mySpecs', () =>  this.specs() ?? this.dialogSpecs );\r\n  protected feature = computedObj('feature', () => this.mySpecs()?.feature);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Field } from '../../shared/fields/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule,],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n\r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","import * as i1 from '@angular/cdk/bidi';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, isDataSource, _ViewRepeaterOperation, _DisposeViewRepeaterStrategy } from '@angular/cdk/collections';\nexport { DataSource } from '@angular/cdk/collections';\nimport * as i2 from '@angular/cdk/platform';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Directive, booleanAttribute, Inject, Optional, Input, ContentChild, inject, NgZone, Injectable, Component, ChangeDetectionStrategy, ViewEncapsulation, EmbeddedViewRef, EventEmitter, Injector, afterNextRender, Attribute, SkipSelf, Output, ContentChildren, ViewChild, NgModule } from '@angular/core';\nimport { Subject, BehaviorSubject, isObservable, of } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\n\n/**\n * Used to provide a table to some of the sub-components without causing a circular dependency.\n * @docs-private\n */\nconst CDK_TABLE = new InjectionToken('CDK_TABLE');\n/** Injection token that can be used to specify the text column options. */\nconst TEXT_COLUMN_OPTIONS = new InjectionToken('text-column-options');\n\n/**\n * Cell definition for a CDK table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass CdkCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellDef, isStandalone: true, selector: \"[cdkCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Header cell definition for a CDK table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass CdkHeaderCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCellDef, isStandalone: true, selector: \"[cdkHeaderCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Footer cell definition for a CDK table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass CdkFooterCellDef {\n    constructor(/** @docs-private */ template) {\n        this.template = template;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCellDef, isStandalone: true, selector: \"[cdkFooterCellDef]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterCellDef]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n/**\n * Column definition for the CDK table.\n * Defines a set of cells available for a table column.\n */\nclass CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /** Whether the cell is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    /**\n     * Whether this column should be sticky positioned on the end of the row. Should make sure\n     * that it mimics the `CanStick` mixin such that `_hasStickyChanged` is set to true if the value\n     * has been changed.\n     */\n    get stickyEnd() {\n        return this._stickyEnd;\n    }\n    set stickyEnd(value) {\n        if (value !== this._stickyEnd) {\n            this._stickyEnd = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(_table) {\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n        this._stickyEnd = false;\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    /**\n     * Overridable method that sets the css classes that will be added to every cell in this\n     * column.\n     * In the future, columnCssClassName will change from type string[] to string and this\n     * will set a single string value.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        this._columnCssClassName = [`cdk-column-${this.cssClassFriendlyName}`];\n    }\n    /**\n     * This has been extracted to a util because of TS 4 and VE.\n     * View Engine doesn't support property rename inheritance.\n     * TS 4.0 doesn't allow properties to override accessors or vice-versa.\n     * @docs-private\n     */\n    _setNameInput(value) {\n        // If the directive is set without a name (updated programmatically), then this setter will\n        // trigger with an empty string and should not overwrite the programmatically set value.\n        if (value) {\n            this._name = value;\n            this.cssClassFriendlyName = value.replace(/[^a-z0-9_-]/gi, '-');\n            this._updateColumnCssClassName();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, deps: [{ token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkColumnDef, isStandalone: true, selector: \"[cdkColumnDef]\", inputs: { name: [\"cdkColumnDef\", \"name\"], sticky: [\"sticky\", \"sticky\", booleanAttribute], stickyEnd: [\"stickyEnd\", \"stickyEnd\", booleanAttribute] }, providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }], queries: [{ propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true }, { propertyName: \"footerCell\", first: true, predicate: CdkFooterCellDef, descendants: true }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkColumnDef]',\n                    providers: [{ provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: CdkColumnDef }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { name: [{\n                type: Input,\n                args: ['cdkColumnDef']\n            }], sticky: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], stickyEnd: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], cell: [{\n                type: ContentChild,\n                args: [CdkCellDef]\n            }], headerCell: [{\n                type: ContentChild,\n                args: [CdkHeaderCellDef]\n            }], footerCell: [{\n                type: ContentChild,\n                args: [CdkFooterCellDef]\n            }] } });\n/** Base class for the cells. Adds a CSS classname that identifies the column it renders in. */\nclass BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        elementRef.nativeElement.classList.add(...columnDef._columnCssClassName);\n    }\n}\n/** Header cell template container that adds the right classes and role. */\nclass CdkHeaderCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderCell, isStandalone: true, selector: \"cdk-header-cell, th[cdk-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"cdk-header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-header-cell, th[cdk-header-cell]',\n                    host: {\n                        'class': 'cdk-header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Footer cell template container that adds the right classes and role. */\nclass CdkFooterCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterCell, isStandalone: true, selector: \"cdk-footer-cell, td[cdk-footer-cell]\", host: { classAttribute: \"cdk-footer-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-footer-cell, td[cdk-footer-cell]',\n                    host: {\n                        'class': 'cdk-footer-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n/** Cell template container that adds the right classes and role. */\nclass CdkCell extends BaseCdkCell {\n    constructor(columnDef, elementRef) {\n        super(columnDef, elementRef);\n        const role = columnDef._table?._getCellRole();\n        if (role) {\n            elementRef.nativeElement.setAttribute('role', role);\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, deps: [{ token: CdkColumnDef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCell, isStandalone: true, selector: \"cdk-cell, td[cdk-cell]\", host: { classAttribute: \"cdk-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-cell, td[cdk-cell]',\n                    host: {\n                        'class': 'cdk-cell',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: CdkColumnDef }, { type: i0.ElementRef }] });\n\n/**\n * @docs-private\n */\nclass _Schedule {\n    constructor() {\n        this.tasks = [];\n        this.endTasks = [];\n    }\n}\n/** Injection token used to provide a coalesced style scheduler. */\nconst _COALESCED_STYLE_SCHEDULER = new InjectionToken('_COALESCED_STYLE_SCHEDULER');\n/**\n * Allows grouping up CSSDom mutations after the current execution context.\n * This can significantly improve performance when separate consecutive functions are\n * reading from the CSSDom and then mutating it.\n *\n * @docs-private\n */\nclass _CoalescedStyleScheduler {\n    constructor(_unusedNgZone) {\n        this._currentSchedule = null;\n        this._ngZone = inject(NgZone);\n    }\n    /**\n     * Schedules the specified task to run at the end of the current VM turn.\n     */\n    schedule(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.tasks.push(task);\n    }\n    /**\n     * Schedules the specified task to run after other scheduled tasks at the end of the current\n     * VM turn.\n     */\n    scheduleEnd(task) {\n        this._createScheduleIfNeeded();\n        this._currentSchedule.endTasks.push(task);\n    }\n    _createScheduleIfNeeded() {\n        if (this._currentSchedule) {\n            return;\n        }\n        this._currentSchedule = new _Schedule();\n        this._ngZone.runOutsideAngular(() => \n        // TODO(mmalerba): Scheduling this using something that runs less frequently\n        //  (e.g. requestAnimationFrame, setTimeout, etc.) causes noticeable jank with the column\n        //  resizer. We should audit the usages of schedule / scheduleEnd in that component and see\n        //  if we can refactor it so that we don't need to flush the tasks quite so frequently.\n        queueMicrotask(() => {\n            while (this._currentSchedule.tasks.length || this._currentSchedule.endTasks.length) {\n                const schedule = this._currentSchedule;\n                // Capture new tasks scheduled by the current set of tasks.\n                this._currentSchedule = new _Schedule();\n                for (const task of schedule.tasks) {\n                    task();\n                }\n                for (const task of schedule.endTasks) {\n                    task();\n                }\n            }\n            this._currentSchedule = null;\n        }));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _CoalescedStyleScheduler, decorators: [{\n            type: Injectable\n        }], ctorParameters: () => [{ type: i0.NgZone }] });\n\n/**\n * The row template that can be used by the mat-table. Should not be used outside of the\n * material library.\n */\nconst CDK_ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Base class for the CdkHeaderRowDef and CdkRowDef that handles checking their columns inputs\n * for changes and notifying the table.\n */\nclass BaseRowDef {\n    constructor(\n    /** @docs-private */ template, _differs) {\n        this.template = template;\n        this._differs = _differs;\n    }\n    ngOnChanges(changes) {\n        // Create a new columns differ if one does not yet exist. Initialize it based on initial value\n        // of the columns property or an empty array if none is provided.\n        if (!this._columnsDiffer) {\n            const columns = (changes['columns'] && changes['columns'].currentValue) || [];\n            this._columnsDiffer = this._differs.find(columns).create();\n            this._columnsDiffer.diff(columns);\n        }\n    }\n    /**\n     * Returns the difference between the current columns and the columns from the last diff, or null\n     * if there is no difference.\n     */\n    getColumnsDiff() {\n        return this._columnsDiffer.diff(this.columns);\n    }\n    /** Gets this row def's relevant cell template from the provided column def. */\n    extractCellTemplate(column) {\n        if (this instanceof CdkHeaderRowDef) {\n            return column.headerCell.template;\n        }\n        if (this instanceof CdkFooterRowDef) {\n            return column.footerCell.template;\n        }\n        else {\n            return column.cell.template;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: BaseRowDef, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: BaseRowDef, decorators: [{\n            type: Directive\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }] });\n/**\n * Header row definition for the CDK table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass CdkHeaderRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkHeaderRowDef, isStandalone: true, selector: \"[cdkHeaderRowDef]\", inputs: { columns: [\"cdkHeaderRowDef\", \"columns\"], sticky: [\"cdkHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkHeaderRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkHeaderRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkHeaderRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Footer row definition for the CDK table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass CdkFooterRowDef extends BaseRowDef {\n    /** Whether the row is sticky. */\n    get sticky() {\n        return this._sticky;\n    }\n    set sticky(value) {\n        if (value !== this._sticky) {\n            this._sticky = value;\n            this._hasStickyChanged = true;\n        }\n    }\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n        this._hasStickyChanged = false;\n        this._sticky = false;\n    }\n    // Prerender fails to recognize that ngOnChanges in a part of this class through inheritance.\n    // Explicitly define it so that the method is called as part of the Angular lifecycle.\n    ngOnChanges(changes) {\n        super.ngOnChanges(changes);\n    }\n    /** Whether the sticky state has changed. */\n    hasStickyChanged() {\n        const hasStickyChanged = this._hasStickyChanged;\n        this.resetStickyChanged();\n        return hasStickyChanged;\n    }\n    /** Resets the sticky changed state. */\n    resetStickyChanged() {\n        this._hasStickyChanged = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkFooterRowDef, isStandalone: true, selector: \"[cdkFooterRowDef]\", inputs: { columns: [\"cdkFooterRowDef\", \"columns\"], sticky: [\"cdkFooterRowDefSticky\", \"sticky\", booleanAttribute] }, usesInheritance: true, usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkFooterRowDef]',\n                    inputs: [{ name: 'columns', alias: 'cdkFooterRowDef' }],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }], propDecorators: { sticky: [{\n                type: Input,\n                args: [{ alias: 'cdkFooterRowDefSticky', transform: booleanAttribute }]\n            }] } });\n/**\n * Data row definition for the CDK table.\n * Captures the header row's template and other row properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass CdkRowDef extends BaseRowDef {\n    // TODO(andrewseguin): Add an input for providing a switch function to determine\n    //   if this template should be used.\n    constructor(template, _differs, _table) {\n        super(template, _differs);\n        this._table = _table;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: CDK_TABLE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRowDef, isStandalone: true, selector: \"[cdkRowDef]\", inputs: { columns: [\"cdkRowDefColumns\", \"columns\"], when: [\"cdkRowDefWhen\", \"when\"] }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkRowDef]',\n                    inputs: [\n                        { name: 'columns', alias: 'cdkRowDefColumns' },\n                        { name: 'when', alias: 'cdkRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TABLE]\n                }, {\n                    type: Optional\n                }] }] });\n/**\n * Outlet for rendering cells inside of a row or header row.\n * @docs-private\n */\nclass CdkCellOutlet {\n    /**\n     * Static property containing the latest constructed instance of this class.\n     * Used by the CDK table when each CdkHeaderRow and CdkRow component is created using\n     * createEmbeddedView. After one of these components are created, this property will provide\n     * a handle to provide that component's cells and context. After init, the CdkCellOutlet will\n     * construct the cells with the provided context.\n     */\n    static { this.mostRecentCellOutlet = null; }\n    constructor(_viewContainer) {\n        this._viewContainer = _viewContainer;\n        CdkCellOutlet.mostRecentCellOutlet = this;\n    }\n    ngOnDestroy() {\n        // If this was the last outlet being rendered in the view, remove the reference\n        // from the static property after it has been destroyed to avoid leaking memory.\n        if (CdkCellOutlet.mostRecentCellOutlet === this) {\n            CdkCellOutlet.mostRecentCellOutlet = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCellOutlet, isStandalone: true, selector: \"[cdkCellOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCellOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCellOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkHeaderRow, isStandalone: true, selector: \"cdk-header-row, tr[cdk-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-header-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-header-row, tr[cdk-header-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkFooterRow, isStandalone: true, selector: \"cdk-footer-row, tr[cdk-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-footer-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-footer-row, tr[cdk-footer-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-footer-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRow, isStandalone: true, selector: \"cdk-row, tr[cdk-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"cdk-row\" }, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-row, tr[cdk-row]',\n                    template: CDK_ROW_TEMPLATE,\n                    host: {\n                        'class': 'cdk-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass CdkNoDataRow {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._contentClassName = 'cdk-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkNoDataRow, isStandalone: true, selector: \"ng-template[cdkNoDataRow]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkNoDataRow]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }] });\n\n/**\n * List of all possible directions that can be used for sticky positioning.\n * @docs-private\n */\nconst STICKY_DIRECTIONS = ['top', 'bottom', 'left', 'right'];\n/**\n * Applies and removes sticky positioning styles to the `CdkTable` rows and columns cells.\n * @docs-private\n */\nclass StickyStyler {\n    /**\n     * @param _isNativeHtmlTable Whether the sticky logic should be based on a table\n     *     that uses the native `<table>` element.\n     * @param _stickCellCss The CSS class that will be applied to every row/cell that has\n     *     sticky positioning applied.\n     * @param direction The directionality context of the table (ltr/rtl); affects column positioning\n     *     by reversing left/right positions.\n     * @param _isBrowser Whether the table is currently being rendered on the server or the client.\n     * @param _needsPositionStickyOnElement Whether we need to specify position: sticky on cells\n     *     using inline styles. If false, it is assumed that position: sticky is included in\n     *     the component stylesheet for _stickCellCss.\n     * @param _positionListener A listener that is notified of changes to sticky rows/columns\n     *     and their dimensions.\n     */\n    constructor(_isNativeHtmlTable, _stickCellCss, direction, _coalescedStyleScheduler, _isBrowser = true, _needsPositionStickyOnElement = true, _positionListener) {\n        this._isNativeHtmlTable = _isNativeHtmlTable;\n        this._stickCellCss = _stickCellCss;\n        this.direction = direction;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._isBrowser = _isBrowser;\n        this._needsPositionStickyOnElement = _needsPositionStickyOnElement;\n        this._positionListener = _positionListener;\n        this._cachedCellWidths = [];\n        this._borderCellCss = {\n            'top': `${_stickCellCss}-border-elem-top`,\n            'bottom': `${_stickCellCss}-border-elem-bottom`,\n            'left': `${_stickCellCss}-border-elem-left`,\n            'right': `${_stickCellCss}-border-elem-right`,\n        };\n    }\n    /**\n     * Clears the sticky positioning styles from the row and its cells by resetting the `position`\n     * style, setting the zIndex to 0, and unsetting each provided sticky direction.\n     * @param rows The list of rows that should be cleared from sticking in the provided directions\n     * @param stickyDirections The directions that should no longer be set as sticky on the rows.\n     */\n    clearStickyPositioning(rows, stickyDirections) {\n        const elementsToClear = [];\n        for (const row of rows) {\n            // If the row isn't an element (e.g. if it's an `ng-container`),\n            // it won't have inline styles or `children` so we skip it.\n            if (row.nodeType !== row.ELEMENT_NODE) {\n                continue;\n            }\n            elementsToClear.push(row);\n            for (let i = 0; i < row.children.length; i++) {\n                elementsToClear.push(row.children[i]);\n            }\n        }\n        // Coalesce with sticky row/column updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            for (const element of elementsToClear) {\n                this._removeStickyStyle(element, stickyDirections);\n            }\n        });\n    }\n    /**\n     * Applies sticky left and right positions to the cells of each row according to the sticky\n     * states of the rendered column definitions.\n     * @param rows The rows that should have its set of cells stuck according to the sticky states.\n     * @param stickyStartStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the start of the row.\n     * @param stickyEndStates A list of boolean states where each state represents whether the cell\n     *     in this index position should be stuck to the end of the row.\n     * @param recalculateCellWidths Whether the sticky styler should recalculate the width of each\n     *     column cell. If `false` cached widths will be used instead.\n     */\n    updateStickyColumns(rows, stickyStartStates, stickyEndStates, recalculateCellWidths = true) {\n        if (!rows.length ||\n            !this._isBrowser ||\n            !(stickyStartStates.some(state => state) || stickyEndStates.some(state => state))) {\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({ sizes: [] });\n                this._positionListener.stickyEndColumnsUpdated({ sizes: [] });\n            }\n            return;\n        }\n        // Coalesce with sticky row updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const firstRow = rows[0];\n            const numCells = firstRow.children.length;\n            const cellWidths = this._getCellWidths(firstRow, recalculateCellWidths);\n            const startPositions = this._getStickyStartColumnPositions(cellWidths, stickyStartStates);\n            const endPositions = this._getStickyEndColumnPositions(cellWidths, stickyEndStates);\n            const lastStickyStart = stickyStartStates.lastIndexOf(true);\n            const firstStickyEnd = stickyEndStates.indexOf(true);\n            const isRtl = this.direction === 'rtl';\n            const start = isRtl ? 'right' : 'left';\n            const end = isRtl ? 'left' : 'right';\n            for (const row of rows) {\n                for (let i = 0; i < numCells; i++) {\n                    const cell = row.children[i];\n                    if (stickyStartStates[i]) {\n                        this._addStickyStyle(cell, start, startPositions[i], i === lastStickyStart);\n                    }\n                    if (stickyEndStates[i]) {\n                        this._addStickyStyle(cell, end, endPositions[i], i === firstStickyEnd);\n                    }\n                }\n            }\n            if (this._positionListener) {\n                this._positionListener.stickyColumnsUpdated({\n                    sizes: lastStickyStart === -1\n                        ? []\n                        : cellWidths\n                            .slice(0, lastStickyStart + 1)\n                            .map((width, index) => (stickyStartStates[index] ? width : null)),\n                });\n                this._positionListener.stickyEndColumnsUpdated({\n                    sizes: firstStickyEnd === -1\n                        ? []\n                        : cellWidths\n                            .slice(firstStickyEnd)\n                            .map((width, index) => (stickyEndStates[index + firstStickyEnd] ? width : null))\n                            .reverse(),\n                });\n            }\n        });\n    }\n    /**\n     * Applies sticky positioning to the row's cells if using the native table layout, and to the\n     * row itself otherwise.\n     * @param rowsToStick The list of rows that should be stuck according to their corresponding\n     *     sticky state and to the provided top or bottom position.\n     * @param stickyStates A list of boolean states where each state represents whether the row\n     *     should be stuck in the particular top or bottom position.\n     * @param position The position direction in which the row should be stuck if that row should be\n     *     sticky.\n     *\n     */\n    stickRows(rowsToStick, stickyStates, position) {\n        // Since we can't measure the rows on the server, we can't stick the rows properly.\n        if (!this._isBrowser) {\n            return;\n        }\n        // Coalesce with other sticky row updates (top/bottom), sticky columns updates\n        // (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            // If positioning the rows to the bottom, reverse their order when evaluating the sticky\n            // position such that the last row stuck will be \"bottom: 0px\" and so on. Note that the\n            // sticky states need to be reversed as well.\n            const rows = position === 'bottom' ? rowsToStick.slice().reverse() : rowsToStick;\n            const states = position === 'bottom' ? stickyStates.slice().reverse() : stickyStates;\n            // Measure row heights all at once before adding sticky styles to reduce layout thrashing.\n            const stickyOffsets = [];\n            const stickyCellHeights = [];\n            const elementsToStick = [];\n            for (let rowIndex = 0, stickyOffset = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                stickyOffsets[rowIndex] = stickyOffset;\n                const row = rows[rowIndex];\n                elementsToStick[rowIndex] = this._isNativeHtmlTable\n                    ? Array.from(row.children)\n                    : [row];\n                const height = row.getBoundingClientRect().height;\n                stickyOffset += height;\n                stickyCellHeights[rowIndex] = height;\n            }\n            const borderedRowIndex = states.lastIndexOf(true);\n            for (let rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n                if (!states[rowIndex]) {\n                    continue;\n                }\n                const offset = stickyOffsets[rowIndex];\n                const isBorderedRowIndex = rowIndex === borderedRowIndex;\n                for (const element of elementsToStick[rowIndex]) {\n                    this._addStickyStyle(element, position, offset, isBorderedRowIndex);\n                }\n            }\n            if (position === 'top') {\n                this._positionListener?.stickyHeaderRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n            else {\n                this._positionListener?.stickyFooterRowsUpdated({\n                    sizes: stickyCellHeights,\n                    offsets: stickyOffsets,\n                    elements: elementsToStick,\n                });\n            }\n        });\n    }\n    /**\n     * When using the native table in Safari, sticky footer cells do not stick. The only way to stick\n     * footer rows is to apply sticky styling to the tfoot container. This should only be done if\n     * all footer rows are sticky. If not all footer rows are sticky, remove sticky positioning from\n     * the tfoot element.\n     */\n    updateStickyFooterContainer(tableElement, stickyStates) {\n        if (!this._isNativeHtmlTable) {\n            return;\n        }\n        // Coalesce with other sticky updates (and potentially other changes like column resize).\n        this._coalescedStyleScheduler.schedule(() => {\n            const tfoot = tableElement.querySelector('tfoot');\n            if (tfoot) {\n                if (stickyStates.some(state => !state)) {\n                    this._removeStickyStyle(tfoot, ['bottom']);\n                }\n                else {\n                    this._addStickyStyle(tfoot, 'bottom', 0, false);\n                }\n            }\n        });\n    }\n    /**\n     * Removes the sticky style on the element by removing the sticky cell CSS class, re-evaluating\n     * the zIndex, removing each of the provided sticky directions, and removing the\n     * sticky position if there are no more directions.\n     */\n    _removeStickyStyle(element, stickyDirections) {\n        for (const dir of stickyDirections) {\n            element.style[dir] = '';\n            element.classList.remove(this._borderCellCss[dir]);\n        }\n        // If the element no longer has any more sticky directions, remove sticky positioning and\n        // the sticky CSS class.\n        // Short-circuit checking element.style[dir] for stickyDirections as they\n        // were already removed above.\n        const hasDirection = STICKY_DIRECTIONS.some(dir => stickyDirections.indexOf(dir) === -1 && element.style[dir]);\n        if (hasDirection) {\n            element.style.zIndex = this._getCalculatedZIndex(element);\n        }\n        else {\n            // When not hasDirection, _getCalculatedZIndex will always return ''.\n            element.style.zIndex = '';\n            if (this._needsPositionStickyOnElement) {\n                element.style.position = '';\n            }\n            element.classList.remove(this._stickCellCss);\n        }\n    }\n    /**\n     * Adds the sticky styling to the element by adding the sticky style class, changing position\n     * to be sticky (and -webkit-sticky), setting the appropriate zIndex, and adding a sticky\n     * direction and value.\n     */\n    _addStickyStyle(element, dir, dirValue, isBorderElement) {\n        element.classList.add(this._stickCellCss);\n        if (isBorderElement) {\n            element.classList.add(this._borderCellCss[dir]);\n        }\n        element.style[dir] = `${dirValue}px`;\n        element.style.zIndex = this._getCalculatedZIndex(element);\n        if (this._needsPositionStickyOnElement) {\n            element.style.cssText += 'position: -webkit-sticky; position: sticky; ';\n        }\n    }\n    /**\n     * Calculate what the z-index should be for the element, depending on what directions (top,\n     * bottom, left, right) have been set. It should be true that elements with a top direction\n     * should have the highest index since these are elements like a table header. If any of those\n     * elements are also sticky in another direction, then they should appear above other elements\n     * that are only sticky top (e.g. a sticky column on a sticky header). Bottom-sticky elements\n     * (e.g. footer rows) should then be next in the ordering such that they are below the header\n     * but above any non-sticky elements. Finally, left/right sticky elements (e.g. sticky columns)\n     * should minimally increment so that they are above non-sticky elements but below top and bottom\n     * elements.\n     */\n    _getCalculatedZIndex(element) {\n        const zIndexIncrements = {\n            top: 100,\n            bottom: 10,\n            left: 1,\n            right: 1,\n        };\n        let zIndex = 0;\n        // Use `Iterable` instead of `Array` because TypeScript, as of 3.6.3,\n        // loses the array generic type in the `for of`. But we *also* have to use `Array` because\n        // typescript won't iterate over an `Iterable` unless you compile with `--downlevelIteration`\n        for (const dir of STICKY_DIRECTIONS) {\n            if (element.style[dir]) {\n                zIndex += zIndexIncrements[dir];\n            }\n        }\n        return zIndex ? `${zIndex}` : '';\n    }\n    /** Gets the widths for each cell in the provided row. */\n    _getCellWidths(row, recalculateCellWidths = true) {\n        if (!recalculateCellWidths && this._cachedCellWidths.length) {\n            return this._cachedCellWidths;\n        }\n        const cellWidths = [];\n        const firstRowCells = row.children;\n        for (let i = 0; i < firstRowCells.length; i++) {\n            let cell = firstRowCells[i];\n            cellWidths.push(cell.getBoundingClientRect().width);\n        }\n        this._cachedCellWidths = cellWidths;\n        return cellWidths;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyStartColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = 0; i < widths.length; i++) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n    /**\n     * Determines the left and right positions of each sticky column cell, which will be the\n     * accumulation of all sticky column cell widths to the left and right, respectively.\n     * Non-sticky cells do not need to have a value set since their positions will not be applied.\n     */\n    _getStickyEndColumnPositions(widths, stickyStates) {\n        const positions = [];\n        let nextPosition = 0;\n        for (let i = widths.length; i > 0; i--) {\n            if (stickyStates[i]) {\n                positions[i] = nextPosition;\n                nextPosition += widths[i];\n            }\n        }\n        return positions;\n    }\n}\n\n/**\n * Returns an error to be thrown when attempting to find an nonexistent column.\n * @param id Id whose lookup failed.\n * @docs-private\n */\nfunction getTableUnknownColumnError(id) {\n    return Error(`Could not find column with id \"${id}\".`);\n}\n/**\n * Returns an error to be thrown when two column definitions have the same name.\n * @docs-private\n */\nfunction getTableDuplicateColumnNameError(name) {\n    return Error(`Duplicate column definition name provided: \"${name}\".`);\n}\n/**\n * Returns an error to be thrown when there are multiple rows that are missing a when function.\n * @docs-private\n */\nfunction getTableMultipleDefaultRowDefsError() {\n    return Error(`There can only be one default row without a when predicate function.`);\n}\n/**\n * Returns an error to be thrown when there are no matching row defs for a particular set of data.\n * @docs-private\n */\nfunction getTableMissingMatchingRowDefError(data) {\n    return Error(`Could not find a matching row definition for the` +\n        `provided row data: ${JSON.stringify(data)}`);\n}\n/**\n * Returns an error to be thrown when there is no row definitions present in the content.\n * @docs-private\n */\nfunction getTableMissingRowDefsError() {\n    return Error('Missing definitions for header, footer, and row; ' +\n        'cannot determine which columns should be rendered.');\n}\n/**\n * Returns an error to be thrown when the data source does not match the compatible types.\n * @docs-private\n */\nfunction getTableUnknownDataSourceError() {\n    return Error(`Provided data source did not match an array, Observable, or DataSource`);\n}\n/**\n * Returns an error to be thrown when the text column cannot find a parent table to inject.\n * @docs-private\n */\nfunction getTableTextColumnMissingParentTableError() {\n    return Error(`Text column could not find a parent table for registration.`);\n}\n/**\n * Returns an error to be thrown when a table text column doesn't have a name.\n * @docs-private\n */\nfunction getTableTextColumnMissingNameError() {\n    return Error(`Table text column must have a name.`);\n}\n\n/** The injection token used to specify the StickyPositioningListener. */\nconst STICKY_POSITIONING_LISTENER = new InjectionToken('CDK_SPL');\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass CdkRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkRecycleRows, isStandalone: true, selector: \"cdk-table[recycleRows], table[cdk-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'cdk-table[recycleRows], table[cdk-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\n * @docs-private\n */\nclass DataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._rowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: DataRowOutlet, isStandalone: true, selector: \"[rowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[rowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\n * @docs-private\n */\nclass HeaderRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._headerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: HeaderRowOutlet, isStandalone: true, selector: \"[headerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: HeaderRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[headerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view container's ng-container to insert the footer.\n * @docs-private\n */\nclass FooterRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._footerRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: FooterRowOutlet, isStandalone: true, selector: \"[footerRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: FooterRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[footerRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * Provides a handle for the table to grab the view\n * container's ng-container to insert the no data row.\n * @docs-private\n */\nclass NoDataRowOutlet {\n    constructor(viewContainer, elementRef) {\n        this.viewContainer = viewContainer;\n        this.elementRef = elementRef;\n        const table = inject(CDK_TABLE);\n        table._noDataRowOutlet = this;\n        table._outletAssigned();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, deps: [{ token: i0.ViewContainerRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: NoDataRowOutlet, isStandalone: true, selector: \"[noDataRowOutlet]\", ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: NoDataRowOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[noDataRowOutlet]',\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: i0.ElementRef }] });\n/**\n * The table template that can be used by the mat-table. Should not be used outside of the\n * material library.\n * @docs-private\n */\nconst CDK_TABLE_TEMPLATE = \n// Note that according to MDN, the `caption` element has to be projected as the **first**\n// element in the table. See https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption\n`\n  <ng-content select=\"caption\"/>\n  <ng-content select=\"colgroup, col\"/>\n\n  <!--\n    Unprojected content throws a hydration error so we need this to capture it.\n    It gets removed on the client so it doesn't affect the layout.\n  -->\n  @if (_isServer) {\n    <ng-content/>\n  }\n\n  @if (_isNativeHtmlTable) {\n    <thead role=\"rowgroup\">\n      <ng-container headerRowOutlet/>\n    </thead>\n    <tbody role=\"rowgroup\">\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n    </tbody>\n    <tfoot role=\"rowgroup\">\n      <ng-container footerRowOutlet/>\n    </tfoot>\n  } @else {\n    <ng-container headerRowOutlet/>\n    <ng-container rowOutlet/>\n    <ng-container noDataRowOutlet/>\n    <ng-container footerRowOutlet/>\n  }\n`;\n/**\n * Class used to conveniently type the embedded view ref for rows with a context.\n * @docs-private\n */\nclass RowViewRef extends EmbeddedViewRef {\n}\n/**\n * A data table that can render a header row, data rows, and a footer row.\n * Uses the dataSource input to determine the data to be rendered. The data can be provided either\n * as a data array, an Observable stream that emits the data array to render, or a DataSource with a\n * connect function that will return an Observable stream that emits the data array to render.\n */\nclass CdkTable {\n    /** Aria role to apply to the table's cells based on the table's own role. */\n    _getCellRole() {\n        if (this._cellRoleInternal === undefined) {\n            // Perform this lazily in case the table's role was updated by a directive after construction.\n            const role = this._elementRef.nativeElement.getAttribute('role');\n            const cellRole = role === 'grid' || role === 'treegrid' ? 'gridcell' : 'cell';\n            this._cellRoleInternal = this._isNativeHtmlTable && cellRole === 'cell' ? null : cellRole;\n        }\n        return this._cellRoleInternal;\n    }\n    /**\n     * Tracking function that will be used to check the differences in data changes. Used similarly\n     * to `ngFor` `trackBy` function. Optimize row operations by identifying a row based on its data\n     * relative to the function to know if a row should be added/removed/moved.\n     * Accepts a function that takes two parameters, `index` and `item`.\n     */\n    get trackBy() {\n        return this._trackByFn;\n    }\n    set trackBy(fn) {\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) && fn != null && typeof fn !== 'function') {\n            console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}.`);\n        }\n        this._trackByFn = fn;\n    }\n    /**\n     * The table's source of data, which can be provided in three ways (in order of complexity):\n     *   - Simple data array (each object represents one table row)\n     *   - Stream that emits a data array each time the array changes\n     *   - `DataSource` object that implements the connect/disconnect interface.\n     *\n     * If a data array is provided, the table must be notified when the array's objects are\n     * added, removed, or moved. This can be done by calling the `renderRows()` function which will\n     * render the diff since the last table render. If the data array reference is changed, the table\n     * will automatically trigger an update to the rows.\n     *\n     * When providing an Observable stream, the table will trigger an update automatically when the\n     * stream emits a new array of data.\n     *\n     * Finally, when providing a `DataSource` object, the table will use the Observable stream\n     * provided by the connect function and trigger updates when that stream emits new data array\n     * values. During the table's ngOnDestroy or when the data source is removed from the table, the\n     * table will call the DataSource's `disconnect` function (may be useful for cleaning up any\n     * subscriptions registered during the connect process).\n     */\n    get dataSource() {\n        return this._dataSource;\n    }\n    set dataSource(dataSource) {\n        if (this._dataSource !== dataSource) {\n            this._switchDataSource(dataSource);\n        }\n    }\n    /**\n     * Whether to allow multiple rows per data object by evaluating which rows evaluate their 'when'\n     * predicate to true. If `multiTemplateDataRows` is false, which is the default value, then each\n     * dataobject will render the first row that evaluates its when predicate to true, in the order\n     * defined in the table, or otherwise the default row which does not have a when predicate.\n     */\n    get multiTemplateDataRows() {\n        return this._multiTemplateDataRows;\n    }\n    set multiTemplateDataRows(value) {\n        this._multiTemplateDataRows = value;\n        // In Ivy if this value is set via a static attribute (e.g. <table multiTemplateDataRows>),\n        // this setter will be invoked before the row outlet has been defined hence the null check.\n        if (this._rowOutlet && this._rowOutlet.viewContainer.length) {\n            this._forceRenderDataRows();\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Whether to use a fixed table layout. Enabling this option will enforce consistent column widths\n     * and optimize rendering sticky styles for native tables. No-op for flex tables.\n     */\n    get fixedLayout() {\n        return this._fixedLayout;\n    }\n    set fixedLayout(value) {\n        this._fixedLayout = value;\n        // Toggling `fixedLayout` may change column widths. Sticky column styles should be recalculated.\n        this._forceRecalculateCellWidths = true;\n        this._stickyColumnStylesNeedReset = true;\n    }\n    constructor(_differs, _changeDetectorRef, _elementRef, role, _dir, _document, _platform, _viewRepeater, _coalescedStyleScheduler, _viewportRuler, \n    /**\n     * @deprecated `_stickyPositioningListener` parameter to become required.\n     * @breaking-change 13.0.0\n     */\n    _stickyPositioningListener, \n    /**\n     * @deprecated `_unusedNgZone` parameter to be removed.\n     * @breaking-change 19.0.0\n     */\n    _unusedNgZone) {\n        this._differs = _differs;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._elementRef = _elementRef;\n        this._dir = _dir;\n        this._platform = _platform;\n        this._viewRepeater = _viewRepeater;\n        this._coalescedStyleScheduler = _coalescedStyleScheduler;\n        this._viewportRuler = _viewportRuler;\n        this._stickyPositioningListener = _stickyPositioningListener;\n        /** Subject that emits when the component has been destroyed. */\n        this._onDestroy = new Subject();\n        /**\n         * Map of all the user's defined columns (header, data, and footer cell template) identified by\n         * name. Collection populated by the column definitions gathered by `ContentChildren` as well as\n         * any custom column definitions added to `_customColumnDefs`.\n         */\n        this._columnDefsByName = new Map();\n        /**\n         * Column definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * column definitions as *its* content child.\n         */\n        this._customColumnDefs = new Set();\n        /**\n         * Data row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in data rows as *its* content child.\n         */\n        this._customRowDefs = new Set();\n        /**\n         * Header row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has\n         * built-in header rows as *its* content child.\n         */\n        this._customHeaderRowDefs = new Set();\n        /**\n         * Footer row definitions that were defined outside of the direct content children of the table.\n         * These will be defined when, e.g., creating a wrapper around the cdkTable that has a\n         * built-in footer row as *its* content child.\n         */\n        this._customFooterRowDefs = new Set();\n        /**\n         * Whether the header row definition has been changed. Triggers an update to the header row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._headerRowDefChanged = true;\n        /**\n         * Whether the footer row definition has been changed. Triggers an update to the footer row after\n         * content is checked. Initialized as true so that the table renders the initial set of rows.\n         */\n        this._footerRowDefChanged = true;\n        /**\n         * Whether the sticky column styles need to be updated. Set to `true` when the visible columns\n         * change.\n         */\n        this._stickyColumnStylesNeedReset = true;\n        /**\n         * Whether the sticky styler should recalculate cell widths when applying sticky styles. If\n         * `false`, cached values will be used instead. This is only applicable to tables with\n         * {@link fixedLayout} enabled. For other tables, cell widths will always be recalculated.\n         */\n        this._forceRecalculateCellWidths = true;\n        /**\n         * Cache of the latest rendered `RenderRow` objects as a map for easy retrieval when constructing\n         * a new list of `RenderRow` objects for rendering rows. Since the new list is constructed with\n         * the cached `RenderRow` objects when possible, the row identity is preserved when the data\n         * and row template matches, which allows the `IterableDiffer` to check rows by reference\n         * and understand which rows are added/moved/removed.\n         *\n         * Implemented as a map of maps where the first key is the `data: T` object and the second is the\n         * `CdkRowDef<T>` object. With the two keys, the cache points to a `RenderRow<T>` object that\n         * contains an array of created pairs. The array is necessary to handle cases where the data\n         * array contains multiple duplicate data objects and each instantiated `RenderRow` must be\n         * stored.\n         */\n        this._cachedRenderRowsMap = new Map();\n        /**\n         * CSS class added to any row or cell that has sticky positioning applied. May be overridden by\n         * table subclasses.\n         */\n        this.stickyCssClass = 'cdk-table-sticky';\n        /**\n         * Whether to manually add position: sticky to all sticky cell elements. Not needed if\n         * the position is set in a selector associated with the value of stickyCssClass. May be\n         * overridden by table subclasses\n         */\n        this.needsPositionStickyOnElement = true;\n        /** Whether the no data row is currently showing anything. */\n        this._isShowingNoDataRow = false;\n        /** Whether the table has rendered out all the outlets for the first time. */\n        this._hasAllOutlets = false;\n        /** Whether the table is done initializing. */\n        this._hasInitialized = false;\n        this._cellRoleInternal = undefined;\n        this._multiTemplateDataRows = false;\n        this._fixedLayout = false;\n        /**\n         * Emits when the table completes rendering a set of data rows based on the latest data from the\n         * data source, even if the set of rows is empty.\n         */\n        this.contentChanged = new EventEmitter();\n        // TODO(andrewseguin): Remove max value as the end index\n        //   and instead calculate the view on init and scroll.\n        /**\n         * Stream containing the latest information on what rows are being displayed on screen.\n         * Can be used by the data source to as a heuristic of what data should be provided.\n         *\n         * @docs-private\n         */\n        this.viewChange = new BehaviorSubject({\n            start: 0,\n            end: Number.MAX_VALUE,\n        });\n        this._injector = inject(Injector);\n        if (!role) {\n            _elementRef.nativeElement.setAttribute('role', 'table');\n        }\n        this._document = _document;\n        this._isServer = !_platform.isBrowser;\n        this._isNativeHtmlTable = _elementRef.nativeElement.nodeName === 'TABLE';\n    }\n    ngOnInit() {\n        this._setupStickyStyler();\n        // Set up the trackBy function so that it uses the `RenderRow` as its identity by default. If\n        // the user has provided a custom trackBy, return the result of that function as evaluated\n        // with the values of the `RenderRow`'s data and index.\n        this._dataDiffer = this._differs.find([]).create((_i, dataRow) => {\n            return this.trackBy ? this.trackBy(dataRow.dataIndex, dataRow.data) : dataRow;\n        });\n        this._viewportRuler\n            .change()\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(() => {\n            this._forceRecalculateCellWidths = true;\n        });\n    }\n    ngAfterContentInit() {\n        this._hasInitialized = true;\n    }\n    ngAfterContentChecked() {\n        // Only start re-rendering in `ngAfterContentChecked` after the first render.\n        if (this._canRender()) {\n            this._render();\n        }\n    }\n    ngOnDestroy() {\n        [\n            this._rowOutlet?.viewContainer,\n            this._headerRowOutlet?.viewContainer,\n            this._footerRowOutlet?.viewContainer,\n            this._cachedRenderRowsMap,\n            this._customColumnDefs,\n            this._customRowDefs,\n            this._customHeaderRowDefs,\n            this._customFooterRowDefs,\n            this._columnDefsByName,\n        ].forEach((def) => {\n            def?.clear();\n        });\n        this._headerRowDefs = [];\n        this._footerRowDefs = [];\n        this._defaultRowDef = null;\n        this._onDestroy.next();\n        this._onDestroy.complete();\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n    }\n    /**\n     * Renders rows based on the table's latest set of data, which was either provided directly as an\n     * input or retrieved through an Observable stream (directly or from a DataSource).\n     * Checks for differences in the data since the last diff to perform only the necessary\n     * changes (add/remove/move rows).\n     *\n     * If the table's data source is a DataSource or Observable, this will be invoked automatically\n     * each time the provided Observable stream emits a new data array. Otherwise if your data is\n     * an array, this function will need to be called to render any changes.\n     */\n    renderRows() {\n        this._renderRows = this._getAllRenderRows();\n        const changes = this._dataDiffer.diff(this._renderRows);\n        if (!changes) {\n            this._updateNoDataRow();\n            this.contentChanged.next();\n            return;\n        }\n        const viewContainer = this._rowOutlet.viewContainer;\n        this._viewRepeater.applyChanges(changes, viewContainer, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record.item, currentIndex), record => record.item.data, (change) => {\n            if (change.operation === _ViewRepeaterOperation.INSERTED && change.context) {\n                this._renderCellTemplateForItem(change.record.item.rowDef, change.context);\n            }\n        });\n        // Update the meta context of a row's context data (index, count, first, last, ...)\n        this._updateRowIndexContext();\n        // Update rows that did not get added/removed/moved but may have had their identity changed,\n        // e.g. if trackBy matched data on some property but the actual data reference changed.\n        changes.forEachIdentityChange((record) => {\n            const rowView = viewContainer.get(record.currentIndex);\n            rowView.context.$implicit = record.item.data;\n        });\n        this._updateNoDataRow();\n        afterNextRender(() => {\n            this.updateStickyColumnStyles();\n        }, { injector: this._injector });\n        this.contentChanged.next();\n    }\n    /** Adds a column definition that was not included as part of the content children. */\n    addColumnDef(columnDef) {\n        this._customColumnDefs.add(columnDef);\n    }\n    /** Removes a column definition that was not included as part of the content children. */\n    removeColumnDef(columnDef) {\n        this._customColumnDefs.delete(columnDef);\n    }\n    /** Adds a row definition that was not included as part of the content children. */\n    addRowDef(rowDef) {\n        this._customRowDefs.add(rowDef);\n    }\n    /** Removes a row definition that was not included as part of the content children. */\n    removeRowDef(rowDef) {\n        this._customRowDefs.delete(rowDef);\n    }\n    /** Adds a header row definition that was not included as part of the content children. */\n    addHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.add(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Removes a header row definition that was not included as part of the content children. */\n    removeHeaderRowDef(headerRowDef) {\n        this._customHeaderRowDefs.delete(headerRowDef);\n        this._headerRowDefChanged = true;\n    }\n    /** Adds a footer row definition that was not included as part of the content children. */\n    addFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.add(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Removes a footer row definition that was not included as part of the content children. */\n    removeFooterRowDef(footerRowDef) {\n        this._customFooterRowDefs.delete(footerRowDef);\n        this._footerRowDefChanged = true;\n    }\n    /** Sets a no data row definition that was not included as a part of the content children. */\n    setNoDataRow(noDataRow) {\n        this._customNoDataRow = noDataRow;\n    }\n    /**\n     * Updates the header sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the top. Then, evaluating which cells need to be stuck to the top. This is\n     * automatically called when the header row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyHeaderRowStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        // Hide the thead element if there are no header rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const thead = closestTableSection(this._headerRowOutlet, 'thead');\n            if (thead) {\n                thead.style.display = headerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._headerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(headerRows, ['top']);\n        this._stickyStyler.stickRows(headerRows, stickyStates, 'top');\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._headerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the footer sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the bottom. Then, evaluating which cells need to be stuck to the bottom. This is\n     * automatically called when the footer row changes its displayed set of columns, or if its\n     * sticky input changes. May be called manually for cases where the cell content changes outside\n     * of these events.\n     */\n    updateStickyFooterRowStyles() {\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // Hide the tfoot element if there are no footer rows. This is necessary to satisfy\n        // overzealous a11y checkers that fail because the `rowgroup` element does not contain\n        // required child `row`.\n        if (this._isNativeHtmlTable) {\n            const tfoot = closestTableSection(this._footerRowOutlet, 'tfoot');\n            if (tfoot) {\n                tfoot.style.display = footerRows.length ? '' : 'none';\n            }\n        }\n        const stickyStates = this._footerRowDefs.map(def => def.sticky);\n        this._stickyStyler.clearStickyPositioning(footerRows, ['bottom']);\n        this._stickyStyler.stickRows(footerRows, stickyStates, 'bottom');\n        this._stickyStyler.updateStickyFooterContainer(this._elementRef.nativeElement, stickyStates);\n        // Reset the dirty state of the sticky input change since it has been used.\n        this._footerRowDefs.forEach(def => def.resetStickyChanged());\n    }\n    /**\n     * Updates the column sticky styles. First resets all applied styles with respect to the cells\n     * sticking to the left and right. Then sticky styles are added for the left and right according\n     * to the column definitions for each cell in each row. This is automatically called when\n     * the data source provides a new set of data or when a column definition changes its sticky\n     * input. May be called manually for cases where the cell content changes outside of these events.\n     */\n    updateStickyColumnStyles() {\n        const headerRows = this._getRenderedRows(this._headerRowOutlet);\n        const dataRows = this._getRenderedRows(this._rowOutlet);\n        const footerRows = this._getRenderedRows(this._footerRowOutlet);\n        // For tables not using a fixed layout, the column widths may change when new rows are rendered.\n        // In a table using a fixed layout, row content won't affect column width, so sticky styles\n        // don't need to be cleared unless either the sticky column config changes or one of the row\n        // defs change.\n        if ((this._isNativeHtmlTable && !this._fixedLayout) || this._stickyColumnStylesNeedReset) {\n            // Clear the left and right positioning from all columns in the table across all rows since\n            // sticky columns span across all table sections (header, data, footer)\n            this._stickyStyler.clearStickyPositioning([...headerRows, ...dataRows, ...footerRows], ['left', 'right']);\n            this._stickyColumnStylesNeedReset = false;\n        }\n        // Update the sticky styles for each header row depending on the def's sticky state\n        headerRows.forEach((headerRow, i) => {\n            this._addStickyColumnStyles([headerRow], this._headerRowDefs[i]);\n        });\n        // Update the sticky styles for each data row depending on its def's sticky state\n        this._rowDefs.forEach(rowDef => {\n            // Collect all the rows rendered with this row definition.\n            const rows = [];\n            for (let i = 0; i < dataRows.length; i++) {\n                if (this._renderRows[i].rowDef === rowDef) {\n                    rows.push(dataRows[i]);\n                }\n            }\n            this._addStickyColumnStyles(rows, rowDef);\n        });\n        // Update the sticky styles for each footer row depending on the def's sticky state\n        footerRows.forEach((footerRow, i) => {\n            this._addStickyColumnStyles([footerRow], this._footerRowDefs[i]);\n        });\n        // Reset the dirty state of the sticky input change since it has been used.\n        Array.from(this._columnDefsByName.values()).forEach(def => def.resetStickyChanged());\n    }\n    /** Invoked whenever an outlet is created and has been assigned to the table. */\n    _outletAssigned() {\n        // Trigger the first render once all outlets have been assigned. We do it this way, as\n        // opposed to waiting for the next `ngAfterContentChecked`, because we don't know when\n        // the next change detection will happen.\n        // Also we can't use queries to resolve the outlets, because they're wrapped in a\n        // conditional, so we have to rely on them being assigned via DI.\n        if (!this._hasAllOutlets &&\n            this._rowOutlet &&\n            this._headerRowOutlet &&\n            this._footerRowOutlet &&\n            this._noDataRowOutlet) {\n            this._hasAllOutlets = true;\n            // In some setups this may fire before `ngAfterContentInit`\n            // so we need a check here. See #28538.\n            if (this._canRender()) {\n                this._render();\n            }\n        }\n    }\n    /** Whether the table has all the information to start rendering. */\n    _canRender() {\n        return this._hasAllOutlets && this._hasInitialized;\n    }\n    /** Renders the table if its state has changed. */\n    _render() {\n        // Cache the row and column definitions gathered by ContentChildren and programmatic injection.\n        this._cacheRowDefs();\n        this._cacheColumnDefs();\n        // Make sure that the user has at least added header, footer, or data row def.\n        if (!this._headerRowDefs.length &&\n            !this._footerRowDefs.length &&\n            !this._rowDefs.length &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingRowDefsError();\n        }\n        // Render updates if the list of columns have been changed for the header, row, or footer defs.\n        const columnsChanged = this._renderUpdatedColumns();\n        const rowDefsChanged = columnsChanged || this._headerRowDefChanged || this._footerRowDefChanged;\n        // Ensure sticky column styles are reset if set to `true` elsewhere.\n        this._stickyColumnStylesNeedReset = this._stickyColumnStylesNeedReset || rowDefsChanged;\n        this._forceRecalculateCellWidths = rowDefsChanged;\n        // If the header row definition has been changed, trigger a render to the header row.\n        if (this._headerRowDefChanged) {\n            this._forceRenderHeaderRows();\n            this._headerRowDefChanged = false;\n        }\n        // If the footer row definition has been changed, trigger a render to the footer row.\n        if (this._footerRowDefChanged) {\n            this._forceRenderFooterRows();\n            this._footerRowDefChanged = false;\n        }\n        // If there is a data source and row definitions, connect to the data source unless a\n        // connection has already been made.\n        if (this.dataSource && this._rowDefs.length > 0 && !this._renderChangeSubscription) {\n            this._observeRenderChanges();\n        }\n        else if (this._stickyColumnStylesNeedReset) {\n            // In the above case, _observeRenderChanges will result in updateStickyColumnStyles being\n            // called when it row data arrives. Otherwise, we need to call it proactively.\n            this.updateStickyColumnStyles();\n        }\n        this._checkStickyStates();\n    }\n    /**\n     * Get the list of RenderRow objects to render according to the current list of data and defined\n     * row definitions. If the previous list already contained a particular pair, it should be reused\n     * so that the differ equates their references.\n     */\n    _getAllRenderRows() {\n        const renderRows = [];\n        // Store the cache and create a new one. Any re-used RenderRow objects will be moved into the\n        // new cache while unused ones can be picked up by garbage collection.\n        const prevCachedRenderRows = this._cachedRenderRowsMap;\n        this._cachedRenderRowsMap = new Map();\n        // For each data object, get the list of rows that should be rendered, represented by the\n        // respective `RenderRow` object which is the pair of `data` and `CdkRowDef`.\n        for (let i = 0; i < this._data.length; i++) {\n            let data = this._data[i];\n            const renderRowsForData = this._getRenderRowsForData(data, i, prevCachedRenderRows.get(data));\n            if (!this._cachedRenderRowsMap.has(data)) {\n                this._cachedRenderRowsMap.set(data, new WeakMap());\n            }\n            for (let j = 0; j < renderRowsForData.length; j++) {\n                let renderRow = renderRowsForData[j];\n                const cache = this._cachedRenderRowsMap.get(renderRow.data);\n                if (cache.has(renderRow.rowDef)) {\n                    cache.get(renderRow.rowDef).push(renderRow);\n                }\n                else {\n                    cache.set(renderRow.rowDef, [renderRow]);\n                }\n                renderRows.push(renderRow);\n            }\n        }\n        return renderRows;\n    }\n    /**\n     * Gets a list of `RenderRow<T>` for the provided data object and any `CdkRowDef` objects that\n     * should be rendered for this data. Reuses the cached RenderRow objects if they match the same\n     * `(T, CdkRowDef)` pair.\n     */\n    _getRenderRowsForData(data, dataIndex, cache) {\n        const rowDefs = this._getRowDefs(data, dataIndex);\n        return rowDefs.map(rowDef => {\n            const cachedRenderRows = cache && cache.has(rowDef) ? cache.get(rowDef) : [];\n            if (cachedRenderRows.length) {\n                const dataRow = cachedRenderRows.shift();\n                dataRow.dataIndex = dataIndex;\n                return dataRow;\n            }\n            else {\n                return { data, rowDef, dataIndex };\n            }\n        });\n    }\n    /** Update the map containing the content's column definitions. */\n    _cacheColumnDefs() {\n        this._columnDefsByName.clear();\n        const columnDefs = mergeArrayAndSet(this._getOwnDefs(this._contentColumnDefs), this._customColumnDefs);\n        columnDefs.forEach(columnDef => {\n            if (this._columnDefsByName.has(columnDef.name) &&\n                (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableDuplicateColumnNameError(columnDef.name);\n            }\n            this._columnDefsByName.set(columnDef.name, columnDef);\n        });\n    }\n    /** Update the list of all available row definitions that can be used. */\n    _cacheRowDefs() {\n        this._headerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentHeaderRowDefs), this._customHeaderRowDefs);\n        this._footerRowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentFooterRowDefs), this._customFooterRowDefs);\n        this._rowDefs = mergeArrayAndSet(this._getOwnDefs(this._contentRowDefs), this._customRowDefs);\n        // After all row definitions are determined, find the row definition to be considered default.\n        const defaultRowDefs = this._rowDefs.filter(def => !def.when);\n        if (!this.multiTemplateDataRows &&\n            defaultRowDefs.length > 1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMultipleDefaultRowDefsError();\n        }\n        this._defaultRowDef = defaultRowDefs[0];\n    }\n    /**\n     * Check if the header, data, or footer rows have changed what columns they want to display or\n     * whether the sticky states have changed for the header or footer. If there is a diff, then\n     * re-render that section.\n     */\n    _renderUpdatedColumns() {\n        const columnsDiffReducer = (acc, def) => acc || !!def.getColumnsDiff();\n        // Force re-render data rows if the list of column definitions have changed.\n        const dataColumnsChanged = this._rowDefs.reduce(columnsDiffReducer, false);\n        if (dataColumnsChanged) {\n            this._forceRenderDataRows();\n        }\n        // Force re-render header/footer rows if the list of column definitions have changed.\n        const headerColumnsChanged = this._headerRowDefs.reduce(columnsDiffReducer, false);\n        if (headerColumnsChanged) {\n            this._forceRenderHeaderRows();\n        }\n        const footerColumnsChanged = this._footerRowDefs.reduce(columnsDiffReducer, false);\n        if (footerColumnsChanged) {\n            this._forceRenderFooterRows();\n        }\n        return dataColumnsChanged || headerColumnsChanged || footerColumnsChanged;\n    }\n    /**\n     * Switch to the provided data source by resetting the data and unsubscribing from the current\n     * render change subscription if one exists. If the data source is null, interpret this by\n     * clearing the row outlet. Otherwise start listening for new data.\n     */\n    _switchDataSource(dataSource) {\n        this._data = [];\n        if (isDataSource(this.dataSource)) {\n            this.dataSource.disconnect(this);\n        }\n        // Stop listening for data from the previous data source.\n        if (this._renderChangeSubscription) {\n            this._renderChangeSubscription.unsubscribe();\n            this._renderChangeSubscription = null;\n        }\n        if (!dataSource) {\n            if (this._dataDiffer) {\n                this._dataDiffer.diff([]);\n            }\n            if (this._rowOutlet) {\n                this._rowOutlet.viewContainer.clear();\n            }\n        }\n        this._dataSource = dataSource;\n    }\n    /** Set up a subscription for the data provided by the data source. */\n    _observeRenderChanges() {\n        // If no data source has been set, there is nothing to observe for changes.\n        if (!this.dataSource) {\n            return;\n        }\n        let dataStream;\n        if (isDataSource(this.dataSource)) {\n            dataStream = this.dataSource.connect(this);\n        }\n        else if (isObservable(this.dataSource)) {\n            dataStream = this.dataSource;\n        }\n        else if (Array.isArray(this.dataSource)) {\n            dataStream = of(this.dataSource);\n        }\n        if (dataStream === undefined && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableUnknownDataSourceError();\n        }\n        this._renderChangeSubscription = dataStream\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(data => {\n            this._data = data || [];\n            this.renderRows();\n        });\n    }\n    /**\n     * Clears any existing content in the header row outlet and creates a new embedded view\n     * in the outlet using the header row definition.\n     */\n    _forceRenderHeaderRows() {\n        // Clear the header row outlet if any content exists.\n        if (this._headerRowOutlet.viewContainer.length > 0) {\n            this._headerRowOutlet.viewContainer.clear();\n        }\n        this._headerRowDefs.forEach((def, i) => this._renderRow(this._headerRowOutlet, def, i));\n        this.updateStickyHeaderRowStyles();\n    }\n    /**\n     * Clears any existing content in the footer row outlet and creates a new embedded view\n     * in the outlet using the footer row definition.\n     */\n    _forceRenderFooterRows() {\n        // Clear the footer row outlet if any content exists.\n        if (this._footerRowOutlet.viewContainer.length > 0) {\n            this._footerRowOutlet.viewContainer.clear();\n        }\n        this._footerRowDefs.forEach((def, i) => this._renderRow(this._footerRowOutlet, def, i));\n        this.updateStickyFooterRowStyles();\n    }\n    /** Adds the sticky column styles for the rows according to the columns' stick states. */\n    _addStickyColumnStyles(rows, rowDef) {\n        const columnDefs = Array.from(rowDef.columns || []).map(columnName => {\n            const columnDef = this._columnDefsByName.get(columnName);\n            if (!columnDef && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnName);\n            }\n            return columnDef;\n        });\n        const stickyStartStates = columnDefs.map(columnDef => columnDef.sticky);\n        const stickyEndStates = columnDefs.map(columnDef => columnDef.stickyEnd);\n        this._stickyStyler.updateStickyColumns(rows, stickyStartStates, stickyEndStates, !this._fixedLayout || this._forceRecalculateCellWidths);\n    }\n    /** Gets the list of rows that have been rendered in the row outlet. */\n    _getRenderedRows(rowOutlet) {\n        const renderedRows = [];\n        for (let i = 0; i < rowOutlet.viewContainer.length; i++) {\n            const viewRef = rowOutlet.viewContainer.get(i);\n            renderedRows.push(viewRef.rootNodes[0]);\n        }\n        return renderedRows;\n    }\n    /**\n     * Get the matching row definitions that should be used for this row data. If there is only\n     * one row definition, it is returned. Otherwise, find the row definitions that has a when\n     * predicate that returns true with the data. If none return true, return the default row\n     * definition.\n     */\n    _getRowDefs(data, dataIndex) {\n        if (this._rowDefs.length == 1) {\n            return [this._rowDefs[0]];\n        }\n        let rowDefs = [];\n        if (this.multiTemplateDataRows) {\n            rowDefs = this._rowDefs.filter(def => !def.when || def.when(dataIndex, data));\n        }\n        else {\n            let rowDef = this._rowDefs.find(def => def.when && def.when(dataIndex, data)) || this._defaultRowDef;\n            if (rowDef) {\n                rowDefs.push(rowDef);\n            }\n        }\n        if (!rowDefs.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableMissingMatchingRowDefError(data);\n        }\n        return rowDefs;\n    }\n    _getEmbeddedViewArgs(renderRow, index) {\n        const rowDef = renderRow.rowDef;\n        const context = { $implicit: renderRow.data };\n        return {\n            templateRef: rowDef.template,\n            context,\n            index,\n        };\n    }\n    /**\n     * Creates a new row template in the outlet and fills it with the set of cell templates.\n     * Optionally takes a context to provide to the row and cells, as well as an optional index\n     * of where to place the new row template in the outlet.\n     */\n    _renderRow(outlet, rowDef, index, context = {}) {\n        // TODO(andrewseguin): enforce that one outlet was instantiated from createEmbeddedView\n        const view = outlet.viewContainer.createEmbeddedView(rowDef.template, context, index);\n        this._renderCellTemplateForItem(rowDef, context);\n        return view;\n    }\n    _renderCellTemplateForItem(rowDef, context) {\n        for (let cellTemplate of this._getCellTemplates(rowDef)) {\n            if (CdkCellOutlet.mostRecentCellOutlet) {\n                CdkCellOutlet.mostRecentCellOutlet._viewContainer.createEmbeddedView(cellTemplate, context);\n            }\n        }\n        this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Updates the index-related context for each row to reflect any changes in the index of the rows,\n     * e.g. first/last/even/odd.\n     */\n    _updateRowIndexContext() {\n        const viewContainer = this._rowOutlet.viewContainer;\n        for (let renderIndex = 0, count = viewContainer.length; renderIndex < count; renderIndex++) {\n            const viewRef = viewContainer.get(renderIndex);\n            const context = viewRef.context;\n            context.count = count;\n            context.first = renderIndex === 0;\n            context.last = renderIndex === count - 1;\n            context.even = renderIndex % 2 === 0;\n            context.odd = !context.even;\n            if (this.multiTemplateDataRows) {\n                context.dataIndex = this._renderRows[renderIndex].dataIndex;\n                context.renderIndex = renderIndex;\n            }\n            else {\n                context.index = this._renderRows[renderIndex].dataIndex;\n            }\n        }\n    }\n    /** Gets the column definitions for the provided row def. */\n    _getCellTemplates(rowDef) {\n        if (!rowDef || !rowDef.columns) {\n            return [];\n        }\n        return Array.from(rowDef.columns, columnId => {\n            const column = this._columnDefsByName.get(columnId);\n            if (!column && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throw getTableUnknownColumnError(columnId);\n            }\n            return rowDef.extractCellTemplate(column);\n        });\n    }\n    /**\n     * Forces a re-render of the data rows. Should be called in cases where there has been an input\n     * change that affects the evaluation of which rows should be rendered, e.g. toggling\n     * `multiTemplateDataRows` or adding/removing row definitions.\n     */\n    _forceRenderDataRows() {\n        this._dataDiffer.diff([]);\n        this._rowOutlet.viewContainer.clear();\n        this.renderRows();\n    }\n    /**\n     * Checks if there has been a change in sticky states since last check and applies the correct\n     * sticky styles. Since checking resets the \"dirty\" state, this should only be performed once\n     * during a change detection and after the inputs are settled (after content check).\n     */\n    _checkStickyStates() {\n        const stickyCheckReducer = (acc, d) => {\n            return acc || d.hasStickyChanged();\n        };\n        // Note that the check needs to occur for every definition since it notifies the definition\n        // that it can reset its dirty state. Using another operator like `some` may short-circuit\n        // remaining definitions and leave them in an unchecked state.\n        if (this._headerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyHeaderRowStyles();\n        }\n        if (this._footerRowDefs.reduce(stickyCheckReducer, false)) {\n            this.updateStickyFooterRowStyles();\n        }\n        if (Array.from(this._columnDefsByName.values()).reduce(stickyCheckReducer, false)) {\n            this._stickyColumnStylesNeedReset = true;\n            this.updateStickyColumnStyles();\n        }\n    }\n    /**\n     * Creates the sticky styler that will be used for sticky rows and columns. Listens\n     * for directionality changes and provides the latest direction to the styler. Re-applies column\n     * stickiness when directionality changes.\n     */\n    _setupStickyStyler() {\n        const direction = this._dir ? this._dir.value : 'ltr';\n        this._stickyStyler = new StickyStyler(this._isNativeHtmlTable, this.stickyCssClass, direction, this._coalescedStyleScheduler, this._platform.isBrowser, this.needsPositionStickyOnElement, this._stickyPositioningListener);\n        (this._dir ? this._dir.change : of())\n            .pipe(takeUntil(this._onDestroy))\n            .subscribe(value => {\n            this._stickyStyler.direction = value;\n            this.updateStickyColumnStyles();\n        });\n    }\n    /** Filters definitions that belong to this table from a QueryList. */\n    _getOwnDefs(items) {\n        return items.filter(item => !item._table || item._table === this);\n    }\n    /** Creates or removes the no data row, depending on whether any data is being shown. */\n    _updateNoDataRow() {\n        const noDataRow = this._customNoDataRow || this._noDataRow;\n        if (!noDataRow) {\n            return;\n        }\n        const shouldShow = this._rowOutlet.viewContainer.length === 0;\n        if (shouldShow === this._isShowingNoDataRow) {\n            return;\n        }\n        const container = this._noDataRowOutlet.viewContainer;\n        if (shouldShow) {\n            const view = container.createEmbeddedView(noDataRow.templateRef);\n            const rootNode = view.rootNodes[0];\n            // Only add the attributes if we have a single root node since it's hard\n            // to figure out which one to add it to when there are multiple.\n            if (view.rootNodes.length === 1 && rootNode?.nodeType === this._document.ELEMENT_NODE) {\n                rootNode.setAttribute('role', 'row');\n                rootNode.classList.add(noDataRow._contentClassName);\n            }\n        }\n        else {\n            container.clear();\n        }\n        this._isShowingNoDataRow = shouldShow;\n        this._changeDetectorRef.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, deps: [{ token: i0.IterableDiffers }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: 'role', attribute: true }, { token: i1.Directionality, optional: true }, { token: DOCUMENT }, { token: i2.Platform }, { token: _VIEW_REPEATER_STRATEGY }, { token: _COALESCED_STYLE_SCHEDULER }, { token: i3.ViewportRuler }, { token: STICKY_POSITIONING_LISTENER, optional: true, skipSelf: true }, { token: i0.NgZone, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: CdkTable, isStandalone: true, selector: \"cdk-table, table[cdk-table]\", inputs: { trackBy: \"trackBy\", dataSource: \"dataSource\", multiTemplateDataRows: [\"multiTemplateDataRows\", \"multiTemplateDataRows\", booleanAttribute], fixedLayout: [\"fixedLayout\", \"fixedLayout\", booleanAttribute] }, outputs: { contentChanged: \"contentChanged\" }, host: { properties: { \"class.cdk-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"cdk-table\" }, providers: [\n            { provide: CDK_TABLE, useExisting: CdkTable },\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], queries: [{ propertyName: \"_noDataRow\", first: true, predicate: CdkNoDataRow, descendants: true }, { propertyName: \"_contentColumnDefs\", predicate: CdkColumnDef, descendants: true }, { propertyName: \"_contentRowDefs\", predicate: CdkRowDef, descendants: true }, { propertyName: \"_contentHeaderRowDefs\", predicate: CdkHeaderRowDef, descendants: true }, { propertyName: \"_contentFooterRowDefs\", predicate: CdkFooterRowDef, descendants: true }], exportAs: [\"cdkTable\"], ngImport: i0, template: \"\\n  <ng-content select=\\\"caption\\\"/>\\n  <ng-content select=\\\"colgroup, col\\\"/>\\n\\n  <!--\\n    Unprojected content throws a hydration error so we need this to capture it.\\n    It gets removed on the client so it doesn't affect the layout.\\n  -->\\n  @if (_isServer) {\\n    <ng-content/>\\n  }\\n\\n  @if (_isNativeHtmlTable) {\\n    <thead role=\\\"rowgroup\\\">\\n      <ng-container headerRowOutlet/>\\n    </thead>\\n    <tbody role=\\\"rowgroup\\\">\\n      <ng-container rowOutlet/>\\n      <ng-container noDataRowOutlet/>\\n    </tbody>\\n    <tfoot role=\\\"rowgroup\\\">\\n      <ng-container footerRowOutlet/>\\n    </tfoot>\\n  } @else {\\n    <ng-container headerRowOutlet/>\\n    <ng-container rowOutlet/>\\n    <ng-container noDataRowOutlet/>\\n    <ng-container footerRowOutlet/>\\n  }\\n\", isInline: true, styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-table, table[cdk-table]', exportAs: 'cdkTable', template: CDK_TABLE_TEMPLATE, host: {\n                        'class': 'cdk-table',\n                        '[class.cdk-table-fixed-layout]': 'fixedLayout',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [\n                        { provide: CDK_TABLE, useExisting: CdkTable },\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".cdk-table-fixed-layout{table-layout:fixed}\"] }]\n        }], ctorParameters: () => [{ type: i0.IterableDiffers }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['role']\n                }] }, { type: i1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2.Platform }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [_VIEW_REPEATER_STRATEGY]\n                }] }, { type: _CoalescedStyleScheduler, decorators: [{\n                    type: Inject,\n                    args: [_COALESCED_STYLE_SCHEDULER]\n                }] }, { type: i3.ViewportRuler }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [STICKY_POSITIONING_LISTENER]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Optional\n                }] }], propDecorators: { trackBy: [{\n                type: Input\n            }], dataSource: [{\n                type: Input\n            }], multiTemplateDataRows: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], fixedLayout: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], contentChanged: [{\n                type: Output\n            }], _contentColumnDefs: [{\n                type: ContentChildren,\n                args: [CdkColumnDef, { descendants: true }]\n            }], _contentRowDefs: [{\n                type: ContentChildren,\n                args: [CdkRowDef, { descendants: true }]\n            }], _contentHeaderRowDefs: [{\n                type: ContentChildren,\n                args: [CdkHeaderRowDef, {\n                        descendants: true,\n                    }]\n            }], _contentFooterRowDefs: [{\n                type: ContentChildren,\n                args: [CdkFooterRowDef, {\n                        descendants: true,\n                    }]\n            }], _noDataRow: [{\n                type: ContentChild,\n                args: [CdkNoDataRow]\n            }] } });\n/** Utility function that gets a merged list of the entries in an array and values of a Set. */\nfunction mergeArrayAndSet(array, set) {\n    return array.concat(Array.from(set));\n}\n/**\n * Finds the closest table section to an outlet. We can't use `HTMLElement.closest` for this,\n * because the node representing the outlet is a comment.\n */\nfunction closestTableSection(outlet, section) {\n    const uppercaseSection = section.toUpperCase();\n    let current = outlet.viewContainer.element.nativeElement;\n    while (current) {\n        // 1 is an element node.\n        const nodeName = current.nodeType === 1 ? current.nodeName : null;\n        if (nodeName === uppercaseSection) {\n            return current;\n        }\n        else if (nodeName === 'TABLE') {\n            // Stop traversing past the `table` node.\n            break;\n        }\n        current = current.parentNode;\n    }\n    return null;\n}\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass CdkTextColumn {\n    /** Column name that should be used to reference this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._name = name;\n        // With Ivy, inputs can be initialized before static query results are\n        // available. In that case, we defer the synchronization until \"ngOnInit\" fires.\n        this._syncColumnDefName();\n    }\n    constructor(\n    // `CdkTextColumn` is always requiring a table, but we just assert it manually\n    // for better error reporting.\n    // tslint:disable-next-line: lightweight-tokens\n    _table, _options) {\n        this._table = _table;\n        this._options = _options;\n        /** Alignment of the cell values. */\n        this.justify = 'start';\n        this._options = _options || {};\n    }\n    ngOnInit() {\n        this._syncColumnDefName();\n        if (this.headerText === undefined) {\n            this.headerText = this._createDefaultHeaderText();\n        }\n        if (!this.dataAccessor) {\n            this.dataAccessor =\n                this._options.defaultDataAccessor || ((data, name) => data[name]);\n        }\n        if (this._table) {\n            // Provide the cell and headerCell directly to the table with the static `ViewChild` query,\n            // since the columnDef will not pick up its content by the time the table finishes checking\n            // its content and initializing the rows.\n            this.columnDef.cell = this.cell;\n            this.columnDef.headerCell = this.headerCell;\n            this._table.addColumnDef(this.columnDef);\n        }\n        else if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            throw getTableTextColumnMissingParentTableError();\n        }\n    }\n    ngOnDestroy() {\n        if (this._table) {\n            this._table.removeColumnDef(this.columnDef);\n        }\n    }\n    /**\n     * Creates a default header text. Use the options' header text transformation function if one\n     * has been provided. Otherwise simply capitalize the column name.\n     */\n    _createDefaultHeaderText() {\n        const name = this.name;\n        if (!name && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getTableTextColumnMissingNameError();\n        }\n        if (this._options && this._options.defaultHeaderTextTransform) {\n            return this._options.defaultHeaderTextTransform(name);\n        }\n        return name[0].toUpperCase() + name.slice(1);\n    }\n    /** Synchronizes the column definition name with the text column name. */\n    _syncColumnDefName() {\n        if (this.columnDef) {\n            this.columnDef.name = this.name;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, deps: [{ token: CdkTable, optional: true }, { token: TEXT_COLUMN_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkTextColumn, isStandalone: true, selector: \"cdk-text-column\", inputs: { name: \"name\", headerText: \"headerText\", dataAccessor: \"dataAccessor\", justify: \"justify\" }, viewQueries: [{ propertyName: \"columnDef\", first: true, predicate: CdkColumnDef, descendants: true, static: true }, { propertyName: \"cell\", first: true, predicate: CdkCellDef, descendants: true, static: true }, { propertyName: \"headerCell\", first: true, predicate: CdkHeaderCellDef, descendants: true, static: true }], ngImport: i0, template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: CdkColumnDef, selector: \"[cdkColumnDef]\", inputs: [\"cdkColumnDef\", \"sticky\", \"stickyEnd\"] }, { kind: \"directive\", type: CdkHeaderCellDef, selector: \"[cdkHeaderCellDef]\" }, { kind: \"directive\", type: CdkHeaderCell, selector: \"cdk-header-cell, th[cdk-header-cell]\" }, { kind: \"directive\", type: CdkCellDef, selector: \"[cdkCellDef]\" }, { kind: \"directive\", type: CdkCell, selector: \"cdk-cell, td[cdk-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'cdk-text-column',\n                    template: `\n    <ng-container cdkColumnDef>\n      <th cdk-header-cell *cdkHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td cdk-cell *cdkCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [CdkColumnDef, CdkHeaderCellDef, CdkHeaderCell, CdkCellDef, CdkCell],\n                }]\n        }], ctorParameters: () => [{ type: CdkTable, decorators: [{\n                    type: Optional\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [TEXT_COLUMN_OPTIONS]\n                }] }], propDecorators: { name: [{\n                type: Input\n            }], headerText: [{\n                type: Input\n            }], dataAccessor: [{\n                type: Input\n            }], justify: [{\n                type: Input\n            }], columnDef: [{\n                type: ViewChild,\n                args: [CdkColumnDef, { static: true }]\n            }], cell: [{\n                type: ViewChild,\n                args: [CdkCellDef, { static: true }]\n            }], headerCell: [{\n                type: ViewChild,\n                args: [CdkHeaderCellDef, { static: true }]\n            }] } });\n\nconst EXPORTED_DECLARATIONS = [\n    CdkTable,\n    CdkRowDef,\n    CdkCellDef,\n    CdkCellOutlet,\n    CdkHeaderCellDef,\n    CdkFooterCellDef,\n    CdkColumnDef,\n    CdkCell,\n    CdkRow,\n    CdkHeaderCell,\n    CdkFooterCell,\n    CdkHeaderRow,\n    CdkHeaderRowDef,\n    CdkFooterRow,\n    CdkFooterRowDef,\n    DataRowOutlet,\n    HeaderRowOutlet,\n    FooterRowOutlet,\n    CdkTextColumn,\n    CdkNoDataRow,\n    CdkRecycleRows,\n    NoDataRowOutlet,\n];\nclass CdkTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule, CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet], exports: [CdkTable,\n            CdkRowDef,\n            CdkCellDef,\n            CdkCellOutlet,\n            CdkHeaderCellDef,\n            CdkFooterCellDef,\n            CdkColumnDef,\n            CdkCell,\n            CdkRow,\n            CdkHeaderCell,\n            CdkFooterCell,\n            CdkHeaderRow,\n            CdkHeaderRowDef,\n            CdkFooterRow,\n            CdkFooterRowDef,\n            DataRowOutlet,\n            HeaderRowOutlet,\n            FooterRowOutlet,\n            CdkTextColumn,\n            CdkNoDataRow,\n            CdkRecycleRows,\n            NoDataRowOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, imports: [ScrollingModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: EXPORTED_DECLARATIONS,\n                    imports: [ScrollingModule, ...EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Mixin to provide a directive with a function that checks if the sticky input has been\n * changed since the last time the function was called. Essentially adds a dirty-check to the\n * sticky value.\n * @docs-private\n * @deprecated Implement the `CanStick` interface instead.\n * @breaking-change 19.0.0\n */\nfunction mixinHasStickyInput(base) {\n    return class extends base {\n        /** Whether sticky positioning should be applied. */\n        get sticky() {\n            return this._sticky;\n        }\n        set sticky(v) {\n            const prevValue = this._sticky;\n            this._sticky = coerceBooleanProperty(v);\n            this._hasStickyChanged = prevValue !== this._sticky;\n        }\n        /** Whether the sticky value has changed since this was last called. */\n        hasStickyChanged() {\n            const hasStickyChanged = this._hasStickyChanged;\n            this._hasStickyChanged = false;\n            return hasStickyChanged;\n        }\n        /** Resets the dirty check for cases where the sticky state has been used without checking. */\n        resetStickyChanged() {\n            this._hasStickyChanged = false;\n        }\n        constructor(...args) {\n            super(...args);\n            this._sticky = false;\n            /** Whether the sticky input has changed since it was last checked. */\n            this._hasStickyChanged = false;\n        }\n    };\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseCdkCell, BaseRowDef, CDK_ROW_TEMPLATE, CDK_TABLE, CDK_TABLE_TEMPLATE, CdkCell, CdkCellDef, CdkCellOutlet, CdkColumnDef, CdkFooterCell, CdkFooterCellDef, CdkFooterRow, CdkFooterRowDef, CdkHeaderCell, CdkHeaderCellDef, CdkHeaderRow, CdkHeaderRowDef, CdkNoDataRow, CdkRecycleRows, CdkRow, CdkRowDef, CdkTable, CdkTableModule, CdkTextColumn, DataRowOutlet, FooterRowOutlet, HeaderRowOutlet, NoDataRowOutlet, STICKY_DIRECTIONS, STICKY_POSITIONING_LISTENER, StickyStyler, TEXT_COLUMN_OPTIONS, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, _Schedule, mixinHasStickyInput };\n","import * as i0 from '@angular/core';\nimport { Directive, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, booleanAttribute, NgModule } from '@angular/core';\nimport { CdkTable, CDK_TABLE, _COALESCED_STYLE_SCHEDULER, _CoalescedStyleScheduler, STICKY_POSITIONING_LISTENER, HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet, CdkCellDef, CdkHeaderCellDef, CdkFooterCellDef, CdkColumnDef, CdkHeaderCell, CdkFooterCell, CdkCell, CdkHeaderRowDef, CdkFooterRowDef, CdkRowDef, CdkHeaderRow, CdkCellOutlet, CdkFooterRow, CdkRow, CdkNoDataRow, CdkTextColumn, CdkTableModule } from '@angular/cdk/table';\nimport { _VIEW_REPEATER_STRATEGY, _RecycleViewRepeaterStrategy, _DisposeViewRepeaterStrategy, DataSource } from '@angular/cdk/collections';\nimport { MatCommonModule } from '@angular/material/core';\nimport { BehaviorSubject, Subject, merge, of, combineLatest } from 'rxjs';\nimport { _isNumberValue } from '@angular/cdk/coercion';\nimport { map } from 'rxjs/operators';\n\n/**\n * Enables the recycle view repeater strategy, which reduces rendering latency. Not compatible with\n * tables that animate rows.\n */\nclass MatRecycleRows {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRecycleRows, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRecycleRows, isStandalone: true, selector: \"mat-table[recycleRows], table[mat-table][recycleRows]\", providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRecycleRows, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-table[recycleRows], table[mat-table][recycleRows]',\n                    providers: [{ provide: _VIEW_REPEATER_STRATEGY, useClass: _RecycleViewRepeaterStrategy }],\n                    standalone: true,\n                }]\n        }] });\nclass MatTable extends CdkTable {\n    constructor() {\n        super(...arguments);\n        /** Overrides the sticky CSS class set by the `CdkTable`. */\n        this.stickyCssClass = 'mat-mdc-table-sticky';\n        /** Overrides the need to add position: sticky on every sticky cell element in `CdkTable`. */\n        this.needsPositionStickyOnElement = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTable, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"17.0.0\", version: \"18.2.0-next.2\", type: MatTable, isStandalone: true, selector: \"mat-table, table[mat-table]\", host: { properties: { \"class.mdc-table-fixed-layout\": \"fixedLayout\" }, classAttribute: \"mat-mdc-table mdc-data-table__table\" }, providers: [\n            { provide: CdkTable, useExisting: MatTable },\n            { provide: CDK_TABLE, useExisting: MatTable },\n            { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n            // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n            //  is only included in the build if used.\n            { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n            // Prevent nested tables from seeing this table's StickyPositioningListener.\n            { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n        ], exportAs: [\"matTable\"], usesInheritance: true, ngImport: i0, template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, isInline: true, styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-app-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-app-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-app-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-app-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-app-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-app-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-app-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-app-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"], dependencies: [{ kind: \"directive\", type: HeaderRowOutlet, selector: \"[headerRowOutlet]\" }, { kind: \"directive\", type: DataRowOutlet, selector: \"[rowOutlet]\" }, { kind: \"directive\", type: NoDataRowOutlet, selector: \"[noDataRowOutlet]\" }, { kind: \"directive\", type: FooterRowOutlet, selector: \"[footerRowOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTable, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-table, table[mat-table]', exportAs: 'matTable', template: `\n    <ng-content select=\"caption\"/>\n    <ng-content select=\"colgroup, col\"/>\n\n    <!--\n      Unprojected content throws a hydration error so we need this to capture it.\n      It gets removed on the client so it doesn't affect the layout.\n    -->\n    @if (_isServer) {\n      <ng-content/>\n    }\n\n    @if (_isNativeHtmlTable) {\n      <thead role=\"rowgroup\">\n        <ng-container headerRowOutlet/>\n      </thead>\n      <tbody class=\"mdc-data-table__content\" role=\"rowgroup\">\n        <ng-container rowOutlet/>\n        <ng-container noDataRowOutlet/>\n      </tbody>\n      <tfoot role=\"rowgroup\">\n        <ng-container footerRowOutlet/>\n      </tfoot>\n    } @else {\n      <ng-container headerRowOutlet/>\n      <ng-container rowOutlet/>\n      <ng-container noDataRowOutlet/>\n      <ng-container footerRowOutlet/>\n    }\n  `, host: {\n                        'class': 'mat-mdc-table mdc-data-table__table',\n                        '[class.mdc-table-fixed-layout]': 'fixedLayout',\n                    }, providers: [\n                        { provide: CdkTable, useExisting: MatTable },\n                        { provide: CDK_TABLE, useExisting: MatTable },\n                        { provide: _COALESCED_STYLE_SCHEDULER, useClass: _CoalescedStyleScheduler },\n                        // TODO(michaeljamesparsons) Abstract the view repeater strategy to a directive API so this code\n                        //  is only included in the build if used.\n                        { provide: _VIEW_REPEATER_STRATEGY, useClass: _DisposeViewRepeaterStrategy },\n                        // Prevent nested tables from seeing this table's StickyPositioningListener.\n                        { provide: STICKY_POSITIONING_LISTENER, useValue: null },\n                    ], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [HeaderRowOutlet, DataRowOutlet, NoDataRowOutlet, FooterRowOutlet], styles: [\".mat-mdc-table-sticky{position:sticky !important}mat-table{display:block}mat-header-row{min-height:56px}mat-row,mat-footer-row{min-height:48px}mat-row,mat-header-row,mat-footer-row{display:flex;border-width:0;border-bottom-width:1px;border-style:solid;align-items:center;box-sizing:border-box}mat-cell:first-of-type,mat-header-cell:first-of-type,mat-footer-cell:first-of-type{padding-left:24px}[dir=rtl] mat-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:first-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:first-of-type:not(:only-of-type){padding-left:0;padding-right:24px}mat-cell:last-of-type,mat-header-cell:last-of-type,mat-footer-cell:last-of-type{padding-right:24px}[dir=rtl] mat-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-header-cell:last-of-type:not(:only-of-type),[dir=rtl] mat-footer-cell:last-of-type:not(:only-of-type){padding-right:0;padding-left:24px}mat-cell,mat-header-cell,mat-footer-cell{flex:1;display:flex;align-items:center;overflow:hidden;word-wrap:break-word;min-height:inherit}.mat-mdc-table{min-width:100%;border:0;border-spacing:0;table-layout:auto;white-space:normal;background-color:var(--mat-table-background-color, var(--mat-app-surface))}.mdc-data-table__cell{box-sizing:border-box;overflow:hidden;text-align:left;text-overflow:ellipsis}[dir=rtl] .mdc-data-table__cell{text-align:right}.mdc-data-table__cell,.mdc-data-table__header-cell{padding:0 16px}.mat-mdc-header-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-header-container-height, 56px);color:var(--mat-table-header-headline-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-header-headline-font, var(--mat-app-title-small-font, Roboto, sans-serif));line-height:var(--mat-table-header-headline-line-height, var(--mat-app-title-small-line-height));font-size:var(--mat-table-header-headline-size, var(--mat-app-title-small-size, 14px));font-weight:var(--mat-table-header-headline-weight, var(--mat-app-title-small-weight, 500))}.mat-mdc-row{height:var(--mat-table-row-item-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)))}.mat-mdc-row,.mdc-data-table__content{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:var(--mat-table-row-item-label-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-row-item-label-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-row-item-label-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-row-item-label-text-weight, var(--mat-app-body-medium-weight))}.mat-mdc-footer-row{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;height:var(--mat-table-footer-container-height, 52px);color:var(--mat-table-row-item-label-text-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mat-table-footer-supporting-text-font, var(--mat-app-body-medium-font, Roboto, sans-serif));line-height:var(--mat-table-footer-supporting-text-line-height, var(--mat-app-body-medium-line-height));font-size:var(--mat-table-footer-supporting-text-size, var(--mat-app-body-medium-size, 14px));font-weight:var(--mat-table-footer-supporting-text-weight, var(--mat-app-body-medium-weight));letter-spacing:var(--mat-table-footer-supporting-text-tracking, var(--mat-app-body-medium-tracking))}.mat-mdc-header-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-header-headline-tracking, var(--mat-app-title-small-tracking));font-weight:inherit;line-height:inherit;box-sizing:border-box;text-overflow:ellipsis;overflow:hidden;outline:none;text-align:left}[dir=rtl] .mat-mdc-header-cell{text-align:right}.mat-mdc-cell{border-bottom-color:var(--mat-table-row-item-outline-color, var(--mat-app-outline, rgba(0, 0, 0, 0.12)));border-bottom-width:var(--mat-table-row-item-outline-width, 1px);border-bottom-style:solid;letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking));line-height:inherit}.mdc-data-table__row:last-child .mat-mdc-cell{border-bottom:none}.mat-mdc-footer-cell{letter-spacing:var(--mat-table-row-item-label-text-tracking, var(--mat-app-body-medium-tracking))}mat-row.mat-mdc-row,mat-header-row.mat-mdc-header-row,mat-footer-row.mat-mdc-footer-row{border-bottom:none}.mat-mdc-table tbody,.mat-mdc-table tfoot,.mat-mdc-table thead,.mat-mdc-cell,.mat-mdc-footer-cell,.mat-mdc-header-row,.mat-mdc-row,.mat-mdc-footer-row,.mat-mdc-table .mat-mdc-header-cell{background:inherit}.mat-mdc-table mat-header-row.mat-mdc-header-row,.mat-mdc-table mat-row.mat-mdc-row,.mat-mdc-table mat-footer-row.mat-mdc-footer-cell{height:unset}mat-header-cell.mat-mdc-header-cell,mat-cell.mat-mdc-cell,mat-footer-cell.mat-mdc-footer-cell{align-self:stretch}\"] }]\n        }] });\n\n/**\n * Cell definition for the mat-table.\n * Captures the template of a column's data row cell as well as cell-specific properties.\n */\nclass MatCellDef extends CdkCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatCellDef, isStandalone: true, selector: \"[matCellDef]\", providers: [{ provide: CdkCellDef, useExisting: MatCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matCellDef]',\n                    providers: [{ provide: CdkCellDef, useExisting: MatCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Header cell definition for the mat-table.\n * Captures the template of a column's header cell and as well as cell-specific properties.\n */\nclass MatHeaderCellDef extends CdkHeaderCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderCellDef, isStandalone: true, selector: \"[matHeaderCellDef]\", providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderCellDef]',\n                    providers: [{ provide: CdkHeaderCellDef, useExisting: MatHeaderCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer cell definition for the mat-table.\n * Captures the template of a column's footer cell and as well as cell-specific properties.\n */\nclass MatFooterCellDef extends CdkFooterCellDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCellDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterCellDef, isStandalone: true, selector: \"[matFooterCellDef]\", providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCellDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterCellDef]',\n                    providers: [{ provide: CdkFooterCellDef, useExisting: MatFooterCellDef }],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Column definition for the mat-table.\n * Defines a set of cells available for a table column.\n */\nclass MatColumnDef extends CdkColumnDef {\n    /** Unique name for this column. */\n    get name() {\n        return this._name;\n    }\n    set name(name) {\n        this._setNameInput(name);\n    }\n    /**\n     * Add \"mat-column-\" prefix in addition to \"cdk-column-\" prefix.\n     * In the future, this will only add \"mat-column-\" and columnCssClassName\n     * will change from type string[] to string.\n     * @docs-private\n     */\n    _updateColumnCssClassName() {\n        super._updateColumnCssClassName();\n        this._columnCssClassName.push(`mat-column-${this.cssClassFriendlyName}`);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatColumnDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatColumnDef, isStandalone: true, selector: \"[matColumnDef]\", inputs: { name: [\"matColumnDef\", \"name\"] }, providers: [\n            { provide: CdkColumnDef, useExisting: MatColumnDef },\n            { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n        ], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatColumnDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matColumnDef]',\n                    providers: [\n                        { provide: CdkColumnDef, useExisting: MatColumnDef },\n                        { provide: 'MAT_SORT_HEADER_COLUMN_DEF', useExisting: MatColumnDef },\n                    ],\n                    standalone: true,\n                }]\n        }], propDecorators: { name: [{\n                type: Input,\n                args: ['matColumnDef']\n            }] } });\n/** Header cell template container that adds the right classes and role. */\nclass MatHeaderCell extends CdkHeaderCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderCell, isStandalone: true, selector: \"mat-header-cell, th[mat-header-cell]\", host: { attributes: { \"role\": \"columnheader\" }, classAttribute: \"mat-mdc-header-cell mdc-data-table__header-cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-header-cell, th[mat-header-cell]',\n                    host: {\n                        'class': 'mat-mdc-header-cell mdc-data-table__header-cell',\n                        'role': 'columnheader',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Footer cell template container that adds the right classes and role. */\nclass MatFooterCell extends CdkFooterCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterCell, isStandalone: true, selector: \"mat-footer-cell, td[mat-footer-cell]\", host: { classAttribute: \"mat-mdc-footer-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-footer-cell, td[mat-footer-cell]',\n                    host: {\n                        'class': 'mat-mdc-footer-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n/** Cell template container that adds the right classes and role. */\nclass MatCell extends CdkCell {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCell, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatCell, isStandalone: true, selector: \"mat-cell, td[mat-cell]\", host: { classAttribute: \"mat-mdc-cell mdc-data-table__cell\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatCell, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-cell, td[mat-cell]',\n                    host: {\n                        'class': 'mat-mdc-cell mdc-data-table__cell',\n                    },\n                    standalone: true,\n                }]\n        }] });\n\n// We can't reuse `CDK_ROW_TEMPLATE` because it's incompatible with local compilation mode.\nconst ROW_TEMPLATE = `<ng-container cdkCellOutlet></ng-container>`;\n/**\n * Header row definition for the mat-table.\n * Captures the header row's template and other header properties such as the columns to display.\n */\nclass MatHeaderRowDef extends CdkHeaderRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatHeaderRowDef, isStandalone: true, selector: \"[matHeaderRowDef]\", inputs: { columns: [\"matHeaderRowDef\", \"columns\"], sticky: [\"matHeaderRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matHeaderRowDef]',\n                    providers: [{ provide: CdkHeaderRowDef, useExisting: MatHeaderRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matHeaderRowDef' },\n                        { name: 'sticky', alias: 'matHeaderRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Footer row definition for the mat-table.\n * Captures the footer row's template and other footer properties such as the columns to display.\n */\nclass MatFooterRowDef extends CdkFooterRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatFooterRowDef, isStandalone: true, selector: \"[matFooterRowDef]\", inputs: { columns: [\"matFooterRowDef\", \"columns\"], sticky: [\"matFooterRowDefSticky\", \"sticky\", booleanAttribute] }, providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matFooterRowDef]',\n                    providers: [{ provide: CdkFooterRowDef, useExisting: MatFooterRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matFooterRowDef' },\n                        { name: 'sticky', alias: 'matFooterRowDefSticky', transform: booleanAttribute },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/**\n * Data row definition for the mat-table.\n * Captures the data row's template and other properties such as the columns to display and\n * a when predicate that describes when this row should be used.\n */\nclass MatRowDef extends CdkRowDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRowDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRowDef, isStandalone: true, selector: \"[matRowDef]\", inputs: { columns: [\"matRowDefColumns\", \"columns\"], when: [\"matRowDefWhen\", \"when\"] }, providers: [{ provide: CdkRowDef, useExisting: MatRowDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRowDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matRowDef]',\n                    providers: [{ provide: CdkRowDef, useExisting: MatRowDef }],\n                    inputs: [\n                        { name: 'columns', alias: 'matRowDefColumns' },\n                        { name: 'when', alias: 'matRowDefWhen' },\n                    ],\n                    standalone: true,\n                }]\n        }] });\n/** Header template container that contains the cell outlet. Adds the right class and role. */\nclass MatHeaderRow extends CdkHeaderRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatHeaderRow, isStandalone: true, selector: \"mat-header-row, tr[mat-header-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-header-row mdc-data-table__header-row\" }, providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }], exportAs: [\"matHeaderRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatHeaderRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-header-row, tr[mat-header-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-header-row mdc-data-table__header-row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matHeaderRow',\n                    providers: [{ provide: CdkHeaderRow, useExisting: MatHeaderRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Footer template container that contains the cell outlet. Adds the right class and role. */\nclass MatFooterRow extends CdkFooterRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatFooterRow, isStandalone: true, selector: \"mat-footer-row, tr[mat-footer-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-footer-row mdc-data-table__row\" }, providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }], exportAs: [\"matFooterRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatFooterRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-footer-row, tr[mat-footer-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-footer-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matFooterRow',\n                    providers: [{ provide: CdkFooterRow, useExisting: MatFooterRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Data row template container that contains the cell outlet. Adds the right class and role. */\nclass MatRow extends CdkRow {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRow, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatRow, isStandalone: true, selector: \"mat-row, tr[mat-row]\", host: { attributes: { \"role\": \"row\" }, classAttribute: \"mat-mdc-row mdc-data-table__row\" }, providers: [{ provide: CdkRow, useExisting: MatRow }], exportAs: [\"matRow\"], usesInheritance: true, ngImport: i0, template: \"<ng-container cdkCellOutlet></ng-container>\", isInline: true, dependencies: [{ kind: \"directive\", type: CdkCellOutlet, selector: \"[cdkCellOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatRow, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-row, tr[mat-row]',\n                    template: ROW_TEMPLATE,\n                    host: {\n                        'class': 'mat-mdc-row mdc-data-table__row',\n                        'role': 'row',\n                    },\n                    // See note on CdkTable for explanation on why this uses the default change detection strategy.\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    encapsulation: ViewEncapsulation.None,\n                    exportAs: 'matRow',\n                    providers: [{ provide: CdkRow, useExisting: MatRow }],\n                    standalone: true,\n                    imports: [CdkCellOutlet],\n                }]\n        }] });\n/** Row that can be used to display a message when no data is shown in the table. */\nclass MatNoDataRow extends CdkNoDataRow {\n    constructor() {\n        super(...arguments);\n        this._contentClassName = 'mat-mdc-no-data-row';\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNoDataRow, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatNoDataRow, isStandalone: true, selector: \"ng-template[matNoDataRow]\", providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatNoDataRow, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[matNoDataRow]',\n                    providers: [{ provide: CdkNoDataRow, useExisting: MatNoDataRow }],\n                    standalone: true,\n                }]\n        }] });\n\n/**\n * Column that simply shows text content for the header and row cells. Assumes that the table\n * is using the native table implementation (`<table>`).\n *\n * By default, the name of this column will be the header text and data property accessor.\n * The header text can be overridden with the `headerText` input. Cell values can be overridden with\n * the `dataAccessor` input. Change the text justification to the start or end using the `justify`\n * input.\n */\nclass MatTextColumn extends CdkTextColumn {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTextColumn, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatTextColumn, isStandalone: true, selector: \"mat-text-column\", usesInheritance: true, ngImport: i0, template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: MatColumnDef, selector: \"[matColumnDef]\", inputs: [\"matColumnDef\"] }, { kind: \"directive\", type: MatHeaderCellDef, selector: \"[matHeaderCellDef]\" }, { kind: \"directive\", type: MatHeaderCell, selector: \"mat-header-cell, th[mat-header-cell]\" }, { kind: \"directive\", type: MatCellDef, selector: \"[matCellDef]\" }, { kind: \"directive\", type: MatCell, selector: \"mat-cell, td[mat-cell]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTextColumn, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'mat-text-column',\n                    template: `\n    <ng-container matColumnDef>\n      <th mat-header-cell *matHeaderCellDef [style.text-align]=\"justify\">\n        {{headerText}}\n      </th>\n      <td mat-cell *matCellDef=\"let data\" [style.text-align]=\"justify\">\n        {{dataAccessor(data, name)}}\n      </td>\n    </ng-container>\n  `,\n                    encapsulation: ViewEncapsulation.None,\n                    // Change detection is intentionally not set to OnPush. This component's template will be provided\n                    // to the table to be inserted into its view. This is problematic when change detection runs since\n                    // the bindings in this template will be evaluated _after_ the table's view is evaluated, which\n                    // mean's the template in the table's view will not have the updated value (and in fact will cause\n                    // an ExpressionChangedAfterItHasBeenCheckedError).\n                    // tslint:disable-next-line:validate-decorators\n                    changeDetection: ChangeDetectionStrategy.Default,\n                    standalone: true,\n                    imports: [MatColumnDef, MatHeaderCellDef, MatHeaderCell, MatCellDef, MatCell],\n                }]\n        }] });\n\nconst EXPORTED_DECLARATIONS = [\n    // Table\n    MatTable,\n    MatRecycleRows,\n    // Template defs\n    MatHeaderCellDef,\n    MatHeaderRowDef,\n    MatColumnDef,\n    MatCellDef,\n    MatRowDef,\n    MatFooterCellDef,\n    MatFooterRowDef,\n    // Cell directives\n    MatHeaderCell,\n    MatCell,\n    MatFooterCell,\n    // Row directives\n    MatHeaderRow,\n    MatRow,\n    MatFooterRow,\n    MatNoDataRow,\n    MatTextColumn,\n];\nclass MatTableModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn], exports: [MatCommonModule, \n            // Table\n            MatTable,\n            MatRecycleRows,\n            // Template defs\n            MatHeaderCellDef,\n            MatHeaderRowDef,\n            MatColumnDef,\n            MatCellDef,\n            MatRowDef,\n            MatFooterCellDef,\n            MatFooterRowDef,\n            // Cell directives\n            MatHeaderCell,\n            MatCell,\n            MatFooterCell,\n            // Row directives\n            MatHeaderRow,\n            MatRow,\n            MatFooterRow,\n            MatNoDataRow,\n            MatTextColumn] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, imports: [MatCommonModule, CdkTableModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatTableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CdkTableModule, ...EXPORTED_DECLARATIONS],\n                    exports: [MatCommonModule, EXPORTED_DECLARATIONS],\n                }]\n        }] });\n\n/**\n * Corresponds to `Number.MAX_SAFE_INTEGER`. Moved out into a variable here due to\n * flaky browser support and the value not being defined in Closure's typings.\n */\nconst MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * Data source that accepts a client-side data array and includes native support of filtering,\n * sorting (using MatSort), and pagination (using MatPaginator).\n *\n * Allows for sort customization by overriding sortingDataAccessor, which defines how data\n * properties are accessed. Also allows for filter customization by overriding filterPredicate,\n * which defines how row data is converted to a string for filter matching.\n *\n * **Note:** This class is meant to be a simple data source to help you get started. As such\n * it isn't equipped to handle some more advanced cases like robust i18n support or server-side\n * interactions. If your app needs to support more advanced use cases, consider implementing your\n * own `DataSource`.\n */\nclass MatTableDataSource extends DataSource {\n    /** Array of data that should be rendered by the table, where each object represents one row. */\n    get data() {\n        return this._data.value;\n    }\n    set data(data) {\n        data = Array.isArray(data) ? data : [];\n        this._data.next(data);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(data);\n        }\n    }\n    /**\n     * Filter term that should be used to filter out objects from the data array. To override how\n     * data objects match to this filter string, provide a custom function for filterPredicate.\n     */\n    get filter() {\n        return this._filter.value;\n    }\n    set filter(filter) {\n        this._filter.next(filter);\n        // Normally the `filteredData` is updated by the re-render\n        // subscription, but that won't happen if it's inactive.\n        if (!this._renderChangesSubscription) {\n            this._filterData(this.data);\n        }\n    }\n    /**\n     * Instance of the MatSort directive used by the table to control its sorting. Sort changes\n     * emitted by the MatSort will trigger an update to the table's rendered data.\n     */\n    get sort() {\n        return this._sort;\n    }\n    set sort(sort) {\n        this._sort = sort;\n        this._updateChangeSubscription();\n    }\n    /**\n     * Instance of the paginator component used by the table to control what page of the data is\n     * displayed. Page changes emitted by the paginator will trigger an update to the\n     * table's rendered data.\n     *\n     * Note that the data source uses the paginator's properties to calculate which page of data\n     * should be displayed. If the paginator receives its properties as template inputs,\n     * e.g. `[pageLength]=100` or `[pageIndex]=1`, then be sure that the paginator's view has been\n     * initialized before assigning it to this data source.\n     */\n    get paginator() {\n        return this._paginator;\n    }\n    set paginator(paginator) {\n        this._paginator = paginator;\n        this._updateChangeSubscription();\n    }\n    constructor(initialData = []) {\n        super();\n        /** Stream emitting render data to the table (depends on ordered data changes). */\n        this._renderData = new BehaviorSubject([]);\n        /** Stream that emits when a new filter string is set on the data source. */\n        this._filter = new BehaviorSubject('');\n        /** Used to react to internal changes of the paginator that are made by the data source itself. */\n        this._internalPageChanges = new Subject();\n        /**\n         * Subscription to the changes that should trigger an update to the table's rendered rows, such\n         * as filtering, sorting, pagination, or base data changes.\n         */\n        this._renderChangesSubscription = null;\n        /**\n         * Data accessor function that is used for accessing data properties for sorting through\n         * the default sortData function.\n         * This default function assumes that the sort header IDs (which defaults to the column name)\n         * matches the data's properties (e.g. column Xyz represents data['Xyz']).\n         * May be set to a custom function for different behavior.\n         * @param data Data object that is being accessed.\n         * @param sortHeaderId The name of the column that represents the data.\n         */\n        this.sortingDataAccessor = (data, sortHeaderId) => {\n            const value = data[sortHeaderId];\n            if (_isNumberValue(value)) {\n                const numberValue = Number(value);\n                // Numbers beyond `MAX_SAFE_INTEGER` can't be compared reliably so we leave them as strings.\n                // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER\n                return numberValue < MAX_SAFE_INTEGER ? numberValue : value;\n            }\n            return value;\n        };\n        /**\n         * Gets a sorted copy of the data array based on the state of the MatSort. Called\n         * after changes are made to the filtered data or when sort changes are emitted from MatSort.\n         * By default, the function retrieves the active sort and its direction and compares data\n         * by retrieving data using the sortingDataAccessor. May be overridden for a custom implementation\n         * of data ordering.\n         * @param data The array of data that should be sorted.\n         * @param sort The connected MatSort that holds the current sort state.\n         */\n        this.sortData = (data, sort) => {\n            const active = sort.active;\n            const direction = sort.direction;\n            if (!active || direction == '') {\n                return data;\n            }\n            return data.sort((a, b) => {\n                let valueA = this.sortingDataAccessor(a, active);\n                let valueB = this.sortingDataAccessor(b, active);\n                // If there are data in the column that can be converted to a number,\n                // it must be ensured that the rest of the data\n                // is of the same type so as not to order incorrectly.\n                const valueAType = typeof valueA;\n                const valueBType = typeof valueB;\n                if (valueAType !== valueBType) {\n                    if (valueAType === 'number') {\n                        valueA += '';\n                    }\n                    if (valueBType === 'number') {\n                        valueB += '';\n                    }\n                }\n                // If both valueA and valueB exist (truthy), then compare the two. Otherwise, check if\n                // one value exists while the other doesn't. In this case, existing value should come last.\n                // This avoids inconsistent results when comparing values to undefined/null.\n                // If neither value exists, return 0 (equal).\n                let comparatorResult = 0;\n                if (valueA != null && valueB != null) {\n                    // Check if one value is greater than the other; if equal, comparatorResult should remain 0.\n                    if (valueA > valueB) {\n                        comparatorResult = 1;\n                    }\n                    else if (valueA < valueB) {\n                        comparatorResult = -1;\n                    }\n                }\n                else if (valueA != null) {\n                    comparatorResult = 1;\n                }\n                else if (valueB != null) {\n                    comparatorResult = -1;\n                }\n                return comparatorResult * (direction == 'asc' ? 1 : -1);\n            });\n        };\n        /**\n         * Checks if a data object matches the data source's filter string. By default, each data object\n         * is converted to a string of its properties and returns true if the filter has\n         * at least one occurrence in that string. By default, the filter string has its whitespace\n         * trimmed and the match is case-insensitive. May be overridden for a custom implementation of\n         * filter matching.\n         * @param data Data object used to check against the filter.\n         * @param filter Filter string that has been set on the data source.\n         * @returns Whether the filter matches against the data\n         */\n        this.filterPredicate = (data, filter) => {\n            // Transform the data into a lowercase string of all property values.\n            const dataStr = Object.keys(data)\n                .reduce((currentTerm, key) => {\n                // Use an obscure Unicode character to delimit the words in the concatenated string.\n                // This avoids matches where the values of two columns combined will match the user's query\n                // (e.g. `Flute` and `Stop` will match `Test`). The character is intended to be something\n                // that has a very low chance of being typed in by somebody in a text field. This one in\n                // particular is \"White up-pointing triangle with dot\" from\n                // https://en.wikipedia.org/wiki/List_of_Unicode_characters\n                return currentTerm + data[key] + '◬';\n            }, '')\n                .toLowerCase();\n            // Transform the filter by converting it to lowercase and removing whitespace.\n            const transformedFilter = filter.trim().toLowerCase();\n            return dataStr.indexOf(transformedFilter) != -1;\n        };\n        this._data = new BehaviorSubject(initialData);\n        this._updateChangeSubscription();\n    }\n    /**\n     * Subscribe to changes that should trigger an update to the table's rendered rows. When the\n     * changes occur, process the current state of the filter, sort, and pagination along with\n     * the provided base data and send it to the table for rendering.\n     */\n    _updateChangeSubscription() {\n        // Sorting and/or pagination should be watched if sort and/or paginator are provided.\n        // The events should emit whenever the component emits a change or initializes, or if no\n        // component is provided, a stream with just a null event should be provided.\n        // The `sortChange` and `pageChange` acts as a signal to the combineLatests below so that the\n        // pipeline can progress to the next step. Note that the value from these streams are not used,\n        // they purely act as a signal to progress in the pipeline.\n        const sortChange = this._sort\n            ? merge(this._sort.sortChange, this._sort.initialized)\n            : of(null);\n        const pageChange = this._paginator\n            ? merge(this._paginator.page, this._internalPageChanges, this._paginator.initialized)\n            : of(null);\n        const dataStream = this._data;\n        // Watch for base data or filter changes to provide a filtered set of data.\n        const filteredData = combineLatest([dataStream, this._filter]).pipe(map(([data]) => this._filterData(data)));\n        // Watch for filtered data or sort changes to provide an ordered set of data.\n        const orderedData = combineLatest([filteredData, sortChange]).pipe(map(([data]) => this._orderData(data)));\n        // Watch for ordered data or page changes to provide a paged set of data.\n        const paginatedData = combineLatest([orderedData, pageChange]).pipe(map(([data]) => this._pageData(data)));\n        // Watched for paged data changes and send the result to the table to render.\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = paginatedData.subscribe(data => this._renderData.next(data));\n    }\n    /**\n     * Returns a filtered data array where each filter object contains the filter string within\n     * the result of the filterPredicate function. If no filter is set, returns the data array\n     * as provided.\n     */\n    _filterData(data) {\n        // If there is a filter string, filter out data that does not contain it.\n        // Each data object is converted to a string using the function defined by filterPredicate.\n        // May be overridden for customization.\n        this.filteredData =\n            this.filter == null || this.filter === ''\n                ? data\n                : data.filter(obj => this.filterPredicate(obj, this.filter));\n        if (this.paginator) {\n            this._updatePaginator(this.filteredData.length);\n        }\n        return this.filteredData;\n    }\n    /**\n     * Returns a sorted copy of the data if MatSort has a sort applied, otherwise just returns the\n     * data array as provided. Uses the default data accessor for data lookup, unless a\n     * sortDataAccessor function is defined.\n     */\n    _orderData(data) {\n        // If there is no active sort or direction, return the data without trying to sort.\n        if (!this.sort) {\n            return data;\n        }\n        return this.sortData(data.slice(), this.sort);\n    }\n    /**\n     * Returns a paged slice of the provided data array according to the provided paginator's page\n     * index and length. If there is no paginator provided, returns the data array as provided.\n     */\n    _pageData(data) {\n        if (!this.paginator) {\n            return data;\n        }\n        const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n        return data.slice(startIndex, startIndex + this.paginator.pageSize);\n    }\n    /**\n     * Updates the paginator to reflect the length of the filtered data, and makes sure that the page\n     * index does not exceed the paginator's last page. Values are changed in a resolved promise to\n     * guard against making property changes within a round of change detection.\n     */\n    _updatePaginator(filteredDataLength) {\n        Promise.resolve().then(() => {\n            const paginator = this.paginator;\n            if (!paginator) {\n                return;\n            }\n            paginator.length = filteredDataLength;\n            // If the page index is set beyond the page, reduce it to the last page.\n            if (paginator.pageIndex > 0) {\n                const lastPageIndex = Math.ceil(paginator.length / paginator.pageSize) - 1 || 0;\n                const newPageIndex = Math.min(paginator.pageIndex, lastPageIndex);\n                if (newPageIndex !== paginator.pageIndex) {\n                    paginator.pageIndex = newPageIndex;\n                    // Since the paginator only emits after user-generated changes,\n                    // we need our own stream so we know to should re-render the data.\n                    this._internalPageChanges.next();\n                }\n            }\n        });\n    }\n    /**\n     * Used by the MatTable. Called when it connects to the data source.\n     * @docs-private\n     */\n    connect() {\n        if (!this._renderChangesSubscription) {\n            this._updateChangeSubscription();\n        }\n        return this._renderData;\n    }\n    /**\n     * Used by the MatTable. Called when it disconnects from the data source.\n     * @docs-private\n     */\n    disconnect() {\n        this._renderChangesSubscription?.unsubscribe();\n        this._renderChangesSubscription = null;\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatCell, MatCellDef, MatColumnDef, MatFooterCell, MatFooterCellDef, MatFooterRow, MatFooterRowDef, MatHeaderCell, MatHeaderCellDef, MatHeaderRow, MatHeaderRowDef, MatNoDataRow, MatRecycleRows, MatRow, MatRowDef, MatTable, MatTableDataSource, MatTableModule, MatTextColumn };\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ \"SharingOrInheriting.TitleAddFieldsWhichInherit\" | translate}} (new v18)\r\n    </div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      Shared fields allow you to compose a content-type using fields which were defined in another content-type.\r\n      These fields exist on this content-type, but use the definition incl. label and all other specs from the original field.\r\n    </p>\r\n    <p>\r\n      This is a bit like <strong>Content-Type Inheritance</strong>, but instead of inheritance we're using <strong>composition</strong>, which is much more powerful.\r\n    </p>\r\n    <p>\r\n      {{ \"SharingOrInheriting.PickFieldsToInheritFrom\" | translate }}\r\n      <br>\r\n      <em>\r\n        Note that if this app doesn't have published/shared field definitions, the list below will be empty.\r\n      </em>\r\n    </p>\r\n    <div class=\"eav-tables-div\">\r\n      <mat-card class=\"eav-table-div-left\">\r\n        <table mat-table [dataSource]=\"shareableFields\">\r\n          <ng-container matColumnDef=\"contentType\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.ContentType.Name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.StaticName}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"type\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> {{field.Type}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"share\">\r\n            <th mat-header-cell *matHeaderCellDef> <b>Share</b> </th>\r\n            <td mat-cell *matCellDef=\"let field\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                (click)=\"selectField(field)\">Select</button> </td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: optionsColumns;\"></tr>\r\n        </table>\r\n      </mat-card>\r\n\r\n      <mat-card class=\"eav-table-div-right\">\r\n        <form #ngForm=\"ngForm\">\r\n          <table mat-table [dataSource]=\"selectedFields\">\r\n            <ng-container matColumnDef=\"newName\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>New Name</b> </th>\r\n              <td mat-cell *matCellDef=\"let item; index as i\" class=\"eav-table-cell\">\r\n                <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n                  <mat-label>New Name</mat-label>\r\n                  <input matInput [pattern]=\"fieldNamePattern\" [(ngModel)]=\"item.newName\" [name]=\"'StaticName' + i\"\r\n                    #newName=\"ngModel\" [appReservedNames]=\"reservedNames\">\r\n                </mat-form-field>\r\n                @if (newName.errors) {\r\n                  @if (newName.errors.pattern) {\r\n                    <app-field-hint [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n                  }\r\n                  @if (newName.errors.reservedNames) {\r\n                    <app-field-hint [isError]=\"true\">\r\n                      {{ newName.errors.reservedNames }}\r\n                    </app-field-hint>\r\n                  }\r\n                }\r\n              </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"source\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Source</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" style=\"word-break:break-all;\" class=\"eav-table-cell\"> {{\r\n                item.field.ContentType.Name }}/{{ item.field.StaticName }} ({{ item.field.Type }}) </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"remove\">\r\n              <th mat-header-cell *matHeaderCellDef> <b>Remove</b> </th>\r\n              <td mat-cell *matCellDef=\"let item\" class=\"eav-table-cell\"> <button mat-raised-button type=\"button\"\r\n                  (click)=\"removeField(item)\">Remove</button> </td>\r\n            </ng-container>\r\n\r\n            <tr mat-header-row *matHeaderRowDef=\"selectedColumns\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: selectedColumns;\"></tr>\r\n          </table>\r\n        </form>\r\n      </mat-card>\r\n    </div>\r\n\r\n    <!-- Show feature warning -->\r\n    <app-feature-text-info [featureNameId]=\"'ContentTypeFieldsReuseDefinitions'\" [asInfo]=\"true\">\r\n      <em>\r\n        Even if the feature is not licensed, it will always work but show warnings.\r\n      </em>\r\n    </app-feature-text-info>\r\n\r\n    <!-- Save buttons -->\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button type=\"button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\"\r\n        [disabled]=\"!ngForm.form.valid || selectedFields.data.length == 0 || saving()\" (click)=\"save()\">\r\n        Save\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnInit, ViewChild, ViewContainerRef, inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { catchError, concatMap, filter, of, toArray } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { signalObj } from '../../shared/signals/signal.utilities';\r\nimport { ReservedNamesValidatorDirective } from '../edit-content-type-fields/reserved-names.directive';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-add-many',\r\n  templateUrl: './field-sharing-add-many.component.html',\r\n  styleUrls: ['./field-sharing-add-many.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    ReservedNamesValidatorDirective,\r\n    MatDialogActions,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FieldHintComponent,\r\n  ],\r\n})\r\nexport class FieldSharingAddMany extends BaseComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  #features = inject(FeaturesScopedService);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: { contentType: ContentType, existingFields: Field[] },\r\n    protected dialog: MatDialogRef<FieldSharingAddMany>,\r\n    private snackBar: MatSnackBar,\r\n    // All this is just for the feature dialog\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n    this.dialog.disableClose = true;\r\n    this.subscriptions.add(\r\n      this.dialog.backdropClick().subscribe(() => {\r\n        if (this.form.dirty || this.selectedFields.data.length > 0) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) return;\r\n        }\r\n        this.dialog.close();\r\n      })\r\n    );\r\n  }\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type', 'share'];\r\n  selectedColumns: string[] = ['newName', 'source', 'remove'];\r\n\r\n  protected shareableFields = new MatTableDataSource<Field>([]);\r\n  protected selectedFields = new MatTableDataSource<NewNameField>([]);\r\n  protected fieldNamePattern = fieldNamePattern;\r\n  protected fieldNameError = fieldNameError;\r\n  protected reservedNames: Record<string, string> = {};\r\n\r\n  protected saving = signalObj('saving', false);\r\n\r\n  #fieldShareConfigManagement = this.#features.isEnabled[FeatureNames.ContentTypeFieldsReuseDefinitions];\r\n\r\n\r\n  ngOnInit() {\r\n    // TODO: @SDV Try to find a better way to do this\r\n    this.#contentTypesFieldsSvc.getShareableFields()\r\n      .subscribe(shareableFields => this.shareableFields.data = shareableFields);\r\n\r\n    this.#contentTypesFieldsSvc.getReservedNames()\r\n      .subscribe(names => {\r\n        this.reservedNames = ReservedNamesValidatorDirective.mergeReserved(names, this.dialogData.existingFields);\r\n      });\r\n  }\r\n\r\n  selectField(field: Field) {\r\n    this.selectedFields.data = [...this.selectedFields.data, { newName: field.StaticName, field }];\r\n  }\r\n\r\n  removeField(field: NewNameField) {\r\n    const selectedFields = this.selectedFields.data;\r\n    selectedFields.splice(selectedFields.indexOf(field), 1);\r\n    this.selectedFields.data = [...selectedFields];\r\n  }\r\n\r\n  // When API gets created we will need to send the selected fields to the API\r\n  save() {\r\n    if (!this.#fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.matDialog, FeatureNames.ContentTypeFieldsReuseDefinitions, this.viewContainerRef, this.changeDetectorRef);\r\n    } else {\r\n      this.saving.set(true);\r\n      this.snackBar.open('Saving...');\r\n      of(...this.selectedFields.data).pipe(\r\n        filter(inheritField => !!inheritField.newName),\r\n        concatMap(inheritField =>\r\n          this.#contentTypesFieldsSvc.addInheritedField(\r\n            this.dialogData.contentType.Id,\r\n            inheritField.field.ContentType.Id,\r\n            inheritField.field.Guid,\r\n            inheritField.newName\r\n          ).pipe(catchError(_ => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(_ => {\r\n        this.saving.set(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.dialog.close();\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nexport interface AppSharingFieldsViewModel {\r\n  shareableFields: Field[];\r\n  selectedFields: Field[];\r\n}\r\n\r\ninterface NewNameField {\r\n  newName: string;\r\n  field: Field;\r\n}\r\n","\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @switch (initialState) {\r\n      @case (sharingOrInheriting.Sharing) {\r\n        <p>\r\n          This field is published so it can be shared by other Content Types.\r\n          As such you cannot configure anything here, but just review the information.\r\n        </p>\r\n        <div>\r\n          Global Identifier: <strong>{{ dialogData.Guid }}</strong>\r\n        </div>\r\n        <h4>Inherited by</h4>\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n      }\r\n      @case (sharingOrInheriting.Inheriting) {\r\n        <p>\r\n          This field is inheriting it's definition from another previously shared field.\r\n        </p>\r\n        <h4>Inherits Definition from</h4>\r\n        @if (!features.isEnabled[requiredFeature]()) {\r\n          <ol>\r\n            @for (s of inherited(); track s.complete) {\r\n              <li>{{ s.complete }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n        <ng-container *ngTemplateOutlet=\"detailsOrWarning\"></ng-container>\r\n        \r\n        @if (notInherited().length) {\r\n          <h4>Not Inherited Definitions</h4>\r\n          <p>The following definitions are not inherited, so you can specify them on this field:</p>\r\n          <ol>\r\n            @for (s of notInherited(); track s) {\r\n              <li>{{ s }}</li>\r\n            }\r\n          </ol>\r\n        }\r\n      }\r\n      @case (sharingOrInheriting.None) {\r\n        <p>\r\n          This field is currently not shared or inherited.\r\n          You can choose to:\r\n        </p>\r\n        <ul>\r\n          <li>Make it public (<strong>share</strong>) so it can be re-used by other Content Types</li>\r\n          <li>Change it to <strong>inherit</strong> it's definition from another previously shared field</li>\r\n        </ul>\r\n        <br>\r\n        <div>\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" [color]=\"state == sharingOrInheriting.Sharing ? 'accent' : ''\" (click)=\"setShare()\">\r\n            Share\r\n          </button>  \r\n\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" [color]=\"state == sharingOrInheriting.Inheriting ? 'accent' : ''\"(click)=\"startInherit()\">\r\n            Inherit\r\n          </button>\r\n          @switch (state) {\r\n            @case (sharingOrInheriting.Sharing) {\r\n              <p>\r\n                This will share the field definition for others to use.\r\n                Save to complete the operation.\r\n              </p>\r\n            }\r\n            @case (sharingOrInheriting.Inheriting) {\r\n              <p>\r\n                The following fields have the same data type and share their definitions.\r\n                Select one to inherit from. Some notes:\r\n                <br>\r\n              </p>\r\n              <ul>\r\n                <li>\r\n                  Inheriting will remove/ignore all current definition of this field such as label, hidden, etc.\r\n                </li>\r\n                <li>\r\n                  If the field you want to inherit the definition from is missing from this list,\r\n                  it's either a different data type or it's not shared.\r\n                </li>\r\n              </ul>\r\n              <mat-card class=\"my-options-wrapper\">\r\n                <table mat-table [dataSource]=\"shareableFields()\" class=\"mat-elevation-z8\">\r\n                  <!-- Column Definition \"Content Type\" -->\r\n                  <ng-container matColumnDef=\"contentType\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Name\" -->\r\n                  <ng-container matColumnDef=\"name\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n                  </ng-container>\r\n                  <!-- Column Definition \"Type\" -->\r\n                  <ng-container matColumnDef=\"type\">\r\n                    <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                    <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n                  </ng-container>\r\n                  <!-- Header Row -->\r\n                  <tr mat-header-row *matHeaderRowDef=\"optionsColumns\"></tr>\r\n                  <!-- Repeater for each row -->\r\n                  <tr mat-row *matRowDef=\"let row; columns: optionsColumns;\" [ngClass]=\"{ 'my-selected': guid === row.Guid }\" (click)=\"inheritField(row)\">\r\n                  </tr>\r\n                </table>\r\n              </mat-card>\r\n            }\r\n          }\r\n        </div>  \r\n      }\r\n    }\r\n  </div>\r\n\r\n  <app-feature-text-info [featureNameId]=\"requiredFeature\" [asInfo]=\"true\">\r\n    <em>\r\n      Even if the feature is not licensed, it will always work but show warnings.\r\n    </em>\r\n  </app-feature-text-info>\r\n  \r\n  <div class=\"my-actions\">\r\n\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"dialog.close()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\" (click)=\"save()\">\r\n        <span>Save</span>\r\n      </button>\r\n    }\r\n  </div>\r\n</div>\r\n\r\n<!-- Reusable part showing a list of ancestors or descendants - or showing a license warning to see more -->\r\n<ng-template #detailsOrWarning>\r\n  @if (features.isEnabled[requiredFeature]()) {\r\n    @if (details().length) {\r\n      <ul>\r\n        @for (field of details(); track field.AttributeId) {\r\n          <li>\r\n            Guid: <strong>{{ field.Guid }}</strong>\r\n            <br>\r\n            Content Type: <strong>{{ field.ContentType.Name }}</strong>\r\n            <br>\r\n            Field: <strong>{{ field.StaticName }}</strong> ({{ field.AttributeId }})\r\n          </li>\r\n        }\r\n      </ul>\r\n    }\r\n    @else {\r\n      <em>\r\n        No details available. This field probably does not have any inheriting fields.\r\n      </em>\r\n    }\r\n  }\r\n  @else {\r\n    <em>\r\n      You can get more details about the parents by enabling the feature\r\n      <br>\r\n      {{ requiredFeature }}\r\n      <app-feature-icon-text [featureNameId]=\"requiredFeature\"></app-feature-icon-text>.\r\n    </em>\r\n  }\r\n</ng-template>","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Inject, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport groupBy from 'lodash-es/groupBy';\r\nimport { transient } from '../../../../../core/transient';\r\nimport { FeatureIconTextComponent } from '../../features/feature-icon-text/feature-icon-text.component';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { FeatureTextInfoComponent } from '../../features/feature-text-info/feature-text-info.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { classLog } from '../../shared/logging';\r\nimport { computedObj, signalObj } from '../../shared/signals/signal.utilities';\r\nimport { SharingOrInheriting } from './field-sharing-configure.enums';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  constructor: true,\r\n}\r\n\r\nconst noInheritGuid = '00000000-0000-0000-0000-000000000000';\r\n\r\n@Component({\r\n  selector: 'app-field-sharing-configure',\r\n  templateUrl: './field-sharing-configure.component.html',\r\n  styleUrls: ['./field-sharing-configure.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    NgTemplateOutlet,\r\n    TranslateModule,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconTextComponent,\r\n  ],\r\n})\r\nexport class ShareOrInheritDialogComponent {\r\n\r\n  log = classLog({ShareOrInheritDialogComponent}, logSpecs, true);\r\n\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    public features: FeaturesScopedService,\r\n    protected dialog: MatDialogRef<ShareOrInheritDialogComponent>,\r\n  ) {\r\n    const l = this.log.fnIf('constructor', {dialogData});\r\n\r\n    const sysS = dialogData.SysSettings;\r\n    if (sysS) {\r\n      if (sysS.Share)\r\n        this.#contentTypesFieldsSvc.getDescendants(dialogData.Id)\r\n          .subscribe(fields => this.details.set(fields));\r\n      else if (sysS.InheritMetadataOf)\r\n        this.#contentTypesFieldsSvc.getAncestors(dialogData.Id)\r\n          .subscribe(fields => this.details.set(fields));\r\n    }\r\n  }\r\n\r\n  requiredFeature = FeatureNames.ContentTypeFieldsReuseDefinitions;\r\n\r\n  details = signalObj<Field[]>('details', []);\r\n\r\n  optionsColumns: string[] = ['contentType', 'name', 'type'];\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n\r\n  // Constants for the UI\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n\r\n  shareableFields = signal<Field[]>(undefined);\r\n\r\n  // Figure out the initial state how at the time of opening the dialog\r\n  initialState: SharingOrInheriting = (() => {\r\n    const sysS = this.dialogData.SysSettings;\r\n    const notConfigured = !sysS || (!sysS.Share && !sysS.InheritMetadataOf);\r\n    return notConfigured\r\n      ? SharingOrInheriting.None\r\n      : sysS.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n  })();\r\n\r\n  // Assemble i18n title part, using the current state name\r\n  title: string = 'SharingOrInheriting.Title' + this.sharingOrInheriting[this.initialState];\r\n\r\n  /** Prepare info about inheritance, which is kind of compacted into a string */\r\n  #inheritsInfo = computedObj('inheritsInfo', () => {\r\n    const parts = this.dialogData.SysSettings.InheritMetadataOf.split(',');\r\n    const withFieldNames = parts.map(complete => ({\r\n      complete,\r\n      // Guid, required, could be empty-guid\r\n      guid: complete.substring(0, 36),\r\n      // Field name, optional; only required if it's the no-inherit guid\r\n      name: complete.substring(36),\r\n    }));\r\n    return groupBy(withFieldNames, g => g.guid === noInheritGuid ? 'none' : 'inherits');\r\n  });\r\n\r\n  /** Metadata content-type names which are not inherited */\r\n  notInherited = computedObj('notInherited', () => this.#inheritsInfo().none?.map(n => n.name) ?? []);\r\n\r\n  /** Metadata items which are inherited */\r\n  inherited = computedObj('inherited', () => this.#inheritsInfo().inherits ?? []);\r\n\r\n  setShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n  }\r\n\r\n  startInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    // Load possible fields which match the current field type\r\n    this.#contentTypesFieldsSvc.getShareableFieldsFor(this.dialogData.AttributeId)\r\n      .subscribe(fields => this.shareableFields.set(fields));\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n  }\r\n\r\n  save() {\r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.#contentTypesFieldsSvc.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialog.close());\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.#contentTypesFieldsSvc.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialog.close());\r\n    }\r\n  }\r\n\r\n}\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep, ItemAddIdentifier, ItemEditIdentifier, ItemIdentifier } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { FieldSharingAddMany } from './field-sharing-add-many/field-sharing-add-many.component';\r\nimport { ShareOrInheritDialogComponent } from './field-sharing-configure/field-sharing-configure.component';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TranslateModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #contentTypesFieldsSvc = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    protected dialog: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n  ) { }\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  fields = signal<Field[]>(undefined);\r\n\r\n  gridOptions = this.#buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  #gridApi: GridApi;\r\n  #columnApi: ColumnApi;\r\n  #rowDragSuppressed = false;\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n\r\n  ngOnInit() {\r\n    this.#fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchFields());\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApi = params.api;\r\n    this.#columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(_: RowDragEvent) {\r\n    this.#gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(_: RowDragEvent) {\r\n    this.#gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields().map(field => field.Id);\r\n    this.#contentTypesFieldsSvc.reOrder(idArray, this.contentType()).subscribe(() => {\r\n      this.#fetchFields(() => {\r\n        this.#gridApi.setEnableCellTextSelection(true);\r\n        this.#gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const overNode = event.overNode as { data: Field };\r\n    if (!overNode) return;\r\n    const movingNode = event.node as { data: Field };\r\n    if (movingNode === overNode) return;\r\n\r\n    const newFields = [...this.fields()];\r\n    const fromIndex = newFields.indexOf(movingNode.data);\r\n    const toIndex = newFields.indexOf(overNode.data);\r\n    const reordered = this.#moveInArray(newFields, fromIndex, toIndex);\r\n    this.fields.set(reordered);\r\n    this.#gridApi.clearFocusedCell();\r\n  }\r\n\r\n  #moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n    return [...arr];\r\n  }\r\n\r\n  onSortChanged(_: SortChangedEvent) {\r\n    const columnStates = this.#columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(_: FilterChangedEvent) {\r\n    const filterModel = this.#gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.#suppressRowDrag();\r\n  }\r\n\r\n  #suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = true;\r\n      this.#gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.#rowDragSuppressed) {\r\n      this.#rowDragSuppressed = false;\r\n      this.#gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.#contentTypeStaticName}`]);\r\n  }\r\n\r\n  addSharedField() {\r\n    this.matDialog.open(FieldSharingAddMany, {\r\n      autoFocus: false,\r\n      width: '1600px',\r\n      data: { contentType: this.contentType(), existingFields: this.fields() }\r\n    }).afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  #nameCellRenderer(params: Omit<ICellRendererParams, 'data'> & { data: Field }) {\r\n    const inputType = params.data.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields()) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === params.data.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  #fetchFields(callback?: () => void) {\r\n    const contentTypeTemp = this.contentType() == null\r\n      ? this.#contentTypesSvc.retrieveContentType(this.#contentTypeStaticName)\r\n      : of(this.contentType());\r\n    const fieldsTemp = this.#contentTypesFieldsSvc.getFields(this.#contentTypeStaticName);\r\n    forkJoin([contentTypeTemp, fieldsTemp]).subscribe(([contentType, fields]) => {\r\n      this.contentType.set(contentType);\r\n      this.fields.set(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  #editFieldMetadata(field: Field) {\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.#createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  #setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.#contentTypesFieldsSvc.setTitle(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #changeInputType(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/inputType`]);\r\n  }\r\n\r\n  #rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.#contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  #delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#contentTypesFieldsSvc.delete(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchFields();\r\n    });\r\n  }\r\n\r\n  #openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  #openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  #shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.matDialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.#fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.IsTitle,\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => ({\r\n            onSetTitle: (field) => this.#setTitle(field),\r\n          } satisfies ContentTypeFieldsTitleParams))(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (p: { data: Field }) => this.#editFieldMetadata(p.data),\r\n          cellRenderer: (params: ICellRendererParams) => this.#nameCellRenderer(params),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          field: 'Type',\r\n          width: 70,\r\n          valueGetter: (p: { data: Field }) => p.data.Type,\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ItemsText,\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.InputType.substring(p.data.InputType.indexOf('-') + 1),\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => ({\r\n            onChangeInputType: (field) => this.#changeInputType(field),\r\n          } satisfies ContentTypeFieldsInputTypeParams))(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Name,\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Notes,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.#rename(field); break;\r\n                case 'delete': this.#delete(field); break;\r\n                case 'permissions': this.#openPermissions(field); break;\r\n                case 'metadata': this.#openMetadata(field); break;\r\n                case 'shareOrInherit': this.#shareOrInherit(field); break;\r\n                case 'image': this.#openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","<div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Fields\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"dialog.close()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields()\" [gridOptions]=\"gridOptions\"\r\n        (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n        (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n        (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <!-- @if (isDebug()) { -->\r\n      <button mat-raised-button type=\"button\" (click)=\"addSharedField()\">{{ \"SharingOrInheriting.AddSharedField\" | translate }}</button>\r\n    <!-- } -->\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"contentType() == null || contentType().EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  ContentTypeFieldsReuseDefinitions: 'ContentTypeFieldsReuseDefinitions',\r\n  AppExportAssetsAdvanced: 'AppExportAssetsAdvanced',\r\n\r\n  // Picker features\r\n  PickerUiCheckbox: 'PickerUiCheckbox',\r\n  PickerUiRadio: 'PickerUiRadio',\r\n  PickerSourceCsv: 'PickerSourceCsv',\r\n  PickerSourceAppAssets: 'PickerSourceAppAssets',\r\n  PickerFormulas: 'PickerFormulas',\r\n  PickerUiMoreInfo: 'PickerUiMoreInfo',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","@if (show()) {\r\n  <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: feature()\">\r\n    <!-- Icon column -->\r\n    <mat-icon class=\"icon icon-{{icon()}}\">{{ icon() }}</mat-icon>\r\n    <!-- Text column -->\r\n    <div class=\"feature-text-info-content\">\r\n      <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n      <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  </div>\r\n}\r\n","import { Component, input } from '@angular/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TranslateModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  asInfo = input<boolean>(false);\r\n\r\n  constructor() { super(); }\r\n\r\n  icon = computedObj('icon', () => this.asInfo() ? 'info' : 'warning');\r\n}\r\n","import { Injectable, signal, Signal } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Feature } from '../models';\r\n\r\nconst webApiFeatureDetails = \"admin/feature/details\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService extends HttpServiceBase {\r\n\r\n  getFeatureDetail(nameId: string): Signal<Feature> {\r\n    return this.getSignal<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n  getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n    const featureList = signal<Feature[]>([]);\r\n    for (const nameId of nameIds) {\r\n      this.xx(nameId).subscribe(feature => {\r\n        featureList.update(prev => [...prev, feature]);\r\n      });\r\n    }\r\n    return featureList;\r\n  }\r\n\r\n  // TODO: Daniel fragen, getFeatureDetails(nameIds: string[]) ist nicht korrekt\r\n  // getFeatureDetails(nameIds: string[]): Signal<Feature[]> {\r\n  //   console.log('getFeatureDetails', nameIds);\r\n  //   const featureList = signal<Feature[]>([]);\r\n  //   for (const nameId of nameIds) {\r\n  //   console.log('getFeatureDetails', nameId);\r\n\r\n\r\n  //     const x = this.getFeatureDetail(nameId) ;\r\n  //     featureList.update(prev => [...prev, x()]);\r\n  //   }\r\n  //   return featureList;\r\n  // }\r\n\r\n  // Remove later\r\n  xx(nameId: string): Observable<Feature> {\r\n    return this.getHttpApiUrl<Feature>(webApiFeatureDetails, {\r\n      params: { nameId }\r\n    });\r\n  }\r\n\r\n\r\n\r\n}\r\n","@if (featureDetails(); as feature) {\r\n  <app-feature-details-dialog [specs]=\"{ feature: feature, showGuid: false, showStatus: true, showClose: true }\"></app-feature-details-dialog>\r\n}\r\n","import { Component, Inject } from \"@angular/core\";\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from \"@angular/material/dialog\";\r\nimport { transient } from \"projects/core\";\r\nimport { FeatureDetailsDialogComponent } from \"../../apps-management/licence-info/feature-details-dialog/feature-details-dialog.component\";\r\nimport { ClipboardService } from \"../../shared/services/clipboard.service\";\r\nimport { FeatureDetailService } from \"../services/feature-detail.service\";\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    FeatureDetailsDialogComponent\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent {\r\n  #featureDetailSvc = transient(FeatureDetailService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    protected dialog: MatDialogRef<FeatureInfoDialogComponent>,\r\n  ) { }\r\n\r\n  protected featureDetails = this.#featureDetailSvc.getFeatureDetail(this.dialogData);\r\n  protected clipboard = transient(ClipboardService);\r\n}\r\n","import { ChangeDetectorRef, Directive, ViewContainerRef, inject, input } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { computedObj } from '../../shared/signals/signal.utilities';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { FeaturesScopedService } from '../features-scoped.service';\r\n\r\n/**\r\n * Base component for various UI components which inform that a feature is not enabled.\r\n * It's meant to show the indicator/warning, and open a dialog with more information about the feature.\r\n */\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n\r\n  /** Feature NameId to check */\r\n  featureNameId = input.required<string>();\r\n\r\n  /** When to show it - typically when it is _not_ enabled (default) */\r\n  showIf = input<boolean>(false);\r\n\r\n  #matDialog = inject(MatDialog);\r\n  #viewContainerRef = inject(ViewContainerRef);\r\n  #changeDetectorRef = inject(ChangeDetectorRef);\r\n  #featuresService = inject(FeaturesScopedService);\r\n\r\n  constructor() { }\r\n\r\n  feature = computedObj('feature', () => this.#featuresService.getCurrent(this.featureNameId()));\r\n\r\n  show = computedObj('show', () => {\r\n    const feat = this.feature();\r\n    if (feat == null) return false;\r\n    return this.showIf() == (feat?.isEnabled ?? false);\r\n  })\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.#matDialog, this.featureNameId(), this.#viewContainerRef, this.#changeDetectorRef);\r\n  }\r\n}\r\n\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef?.markForCheck();\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const InputTypeCatalog = {\r\n  // Boolean\r\n  BooleanDefault: 'boolean-default',\r\n  BooleanTristate: 'boolean-tristate',\r\n\r\n  // Custom\r\n  CustomDefault: 'custom-default',\r\n  CustomGps: 'custom-gps',\r\n  CustomJsonEditor: 'custom-json-editor',\r\n\r\n  // Date / Time\r\n  DateTimeDefault: 'datetime-default',\r\n\r\n  DefaultSuffix: '-default',\r\n\r\n  // Empty\r\n  EmptyDefault: 'empty-default',\r\n  EmptyEnd: 'empty-end',\r\n  EmptyMessage: 'empty-message',\r\n\r\n  // Entity - all pickers\r\n  EntityContentBlocks: 'entity-content-blocks',\r\n  EntityDefault: 'entity-default',\r\n  EntityQuery: 'entity-query',\r\n\r\n  // External\r\n  ExternalWebComponent: 'external-web-component',\r\n\r\n  // Hyperlink / File\r\n  HyperlinkDefault: 'hyperlink-default',\r\n  HyperlinkLibrary: 'hyperlink-library',\r\n\r\n  // Numbers\r\n  NumberDefault: 'number-default',\r\n  NumberDropdown: 'number-dropdown', // picker\r\n\r\n  // String\r\n  StringDefault: 'string-default',\r\n  StringDropdown: 'string-dropdown', // picker\r\n  StringDropdownQuery: 'string-dropdown-query', // picker\r\n  StringFontIconPicker: 'string-font-icon-picker',\r\n  StringJson: 'string-json',\r\n  StringTemplatePicker: 'string-template-picker', // picker\r\n  StringUrlPath: 'string-url-path',\r\n  StringWysiwyg: 'string-wysiwyg',\r\n\r\n  /** New Pickers v17.x */\r\n  EntityPicker: 'entity-picker',\r\n  StringPicker: 'string-picker',\r\n  NumberPicker: 'number-picker',\r\n\r\n  /** for all situations where we need a fallback; new v16.04 */\r\n  Unknown: 'unknown',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  // TODO: @2pp UNCLEAR if this is needed, as it appears to do the same as navRelative, just in a difficult manner.\r\n  // TODO: Review and replace with navRelative where possible, probably we don't need this.\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[12,13]}