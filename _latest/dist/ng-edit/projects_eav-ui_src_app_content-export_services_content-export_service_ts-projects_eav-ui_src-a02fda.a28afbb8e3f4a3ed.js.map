{"version":3,"mappings":"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","names":["ContentExportService","constructor","context","dnnContext","this","exportContent","values","selectedIds","selectedIdsString","join","url","$2sxc","http","apiUrl","webApiEntityRoot","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","webApiTypeRoot","exportEntity","id","prefix","metadata","i0","factory","ContentItemsService","getAll","get","webApiEntityList","params","toString","contentType","getColumns","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","EntitiesService","create","entity","zoneId","update","entityId","delete","type","tryForce","force","webApiFieldsRoot","ContentTypesFieldsService","name","typeListRetrieve","appid","getInputTypesList","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","Object","All","reOrder","idArray","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","fieldId","newName","IsTitle","Error","add","newField","ContentTypeId","StaticName","Index","SortOrder","updateInputType","field","static","defaultRoute","path","loadChildren","Promise","then","m","MetadataModule","data","title","targetType","keyType","key","dialogTitle","encodeURIComponent","getUrl","eavConstants","guid","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"sources":["./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/metadata/go-to-metadata.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:targetType/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.targetType,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.targetType,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.targetType,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.targetType,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-export_services_content-export_service_ts-projects_eav-ui_src-a02fda.a28afbb8e3f4a3ed.js"}