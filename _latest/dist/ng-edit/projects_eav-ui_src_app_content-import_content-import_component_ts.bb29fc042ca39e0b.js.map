{"version":3,"file":"projects_eav-ui_src_app_content-import_content-import_component_ts.bb29fc042ca39e0b.js","mappings":"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","names":["webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","nameId","this","getHttpApiUrl","params","appId","contentTypeId","retrieveContentTypeSig","initial","getSignal","retrieveContentTypes","scope","retrieveContentTypesSig","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","contentType","http","post","apiUrl","appid","delete","staticName","NameId","import","files","formData","FormData","file","append","zoneId","createGhost","sourceNameId","__ngFactoryType__","factory","ɵfac","ContentImportService","evaluateContent","formValues","from","toBase64","switchMap","fileBase64","requestData","AppId","DefaultLanguage","defaultLanguage","ContentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","webApiEntityRoot","result","Success","Errors","Detail","importContent","i0","_r1","fileInput_r2","click","$event","ctx_r2","fileChange","closeDialog","evaluationResult","DocumentElementsCount","LanguagesInDocumentCount","AttributeNamesInDocument","length","join","AmountOfEntitiesCreated","AmountOfEntitiesUpdated","AmountOfEntitiesDeleted","AttributeNamesNotImported","error_r5","ErrorDetail","LineNumber","LineDetail","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_3_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_4_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Conditional_5_Template","errors","ErrorCode","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_For_5_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Conditional_1_Template","_r4","back","ContentImportComponent_Conditional_10_Case_2_Conditional_0_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_1_Template","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Conditional_2_Template","importResult","ContentImportComponent_Conditional_10_Case_3_Conditional_0_Template","_r6","ContentImportComponent_Conditional_10_Case_0_Template","ContentImportComponent_Conditional_10_Case_1_Template","ContentImportComponent_Conditional_10_Case_2_Template","ContentImportComponent_Conditional_10_Case_3_Template","tmp_1_0","viewStateSelected","ContentImportComponent","constructor","dialogData","dialog","route","hostClass","contentImportService","transient","contentTypesService","dialogConfigSvc","DialogConfigAppService","viewStates","waiting","default","evaluated","imported","signal","contentTypeStaticName","snapshot","paramMap","get","ngOnInit","contentTypeTemp","dialogSettings$","getCurrent$","forkJoin","subscribe","dialogSettings","set","Context","Language","Primary","close","event","target","filesDropped","MAT_DIALOG_DATA","i1","i2","selectors","hostVars","hostBindings","rf","ctx","ContentImportComponent_Conditional_10_Template","Name","FormsModule","i3","MatButtonModule","i4","MatRadioModule","i5","MatDialogActions","DragAndDropDirective","styles","BaseDirective","subscriptions","Subscription","ngOnDestroy","unsubscribe","elementRef","zone","snackBar","super","markStyle","input","allowedFileTypes","output","dropAreaClass","markStyleClass","dragClass","timeouts","element","nativeElement","classList","add","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","onDrop","Array","dataTransfer","filterTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","error","toString","readAsText","logSpecs","all","getEntities","getAvailableEntities","webApiEntityList","EntityService","log","classLog","queryService","QueryService","getEntities$","fnIf","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","parent","id","context","getFromQuery","queryUrl","hasParams","urlParams","Guids"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-import/services/content-import.service.ts","./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/base.directive.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypesSig(scope: string, initial: undefined): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ContentImportService extends HttpServiceBase {\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.appId,\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.appId,\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","<div class=\"eav-dialog\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Name }} Import Data</div>\r\n  </div>\r\n  <div class=\"eav-dialog-description\">\r\n    <p>\r\n      This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n      importing, and that you created the import-file using the template provided by the Export. Please visit\r\n      <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n    </p>\r\n  </div>\r\n  @if (formValues != null) {\r\n  @switch (viewStateSelected()) {\r\n  <!-- FORM -->\r\n  @case (1) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <div>\r\n        <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n          <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n        </button>\r\n        <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">References to pages / files</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.resourcesReferences\"\r\n          name=\"ResourcesReferences\">\r\n          <mat-radio-button value=\"Keep\">\r\n            Import links as written in the file (for example /Portals/...)\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"Resolve\">\r\n            Try to resolve paths to references\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <div>\r\n        <p class=\"eav-radio-group-label\">Clear all other entities</p>\r\n        <mat-radio-group class=\"eav-radio-group\" [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n          <mat-radio-button value=\"None\">\r\n            Keep all entities not found in import\r\n          </mat-radio-button>\r\n          <mat-radio-button value=\"All\">\r\n            Remove all entities not found in import\r\n          </mat-radio-button>\r\n        </mat-radio-group>\r\n      </div>\r\n      <p class=\"eav-hint\">Remember to backup your DNN first!</p>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n        (click)=\"evaluateContent()\">\r\n        Preview Import\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n  <!-- END FORM -->\r\n  <!-- WAITING -->\r\n  @case (0) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p>Please wait while processing...</p>\r\n  </div>\r\n  }\r\n  <!-- END WAITING -->\r\n  <!-- EVALUATION RESULT -->\r\n  @case (2) {\r\n  @if (evaluationResult()) {\r\n  <!-- DETAILS / STATISTICS -->\r\n  @if (evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <p class=\"eav-evaluation__title\">File contains:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>{{ evaluationResult().Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n      <li>{{ evaluationResult().Detail.LanguagesInDocumentCount }} languages</li>\r\n      <li>{{ evaluationResult().Detail.AttributeNamesInDocument.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-evaluation__title\">If you press Import, it will:</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      <li>Create {{ evaluationResult().Detail.AmountOfEntitiesCreated }} content-items</li>\r\n      <li>Update {{ evaluationResult().Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n      <li>Delete {{ evaluationResult().Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n      <li>Ignore {{ evaluationResult().Detail.AttributeNamesNotImported.length }} columns:\r\n        {{ evaluationResult().Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n    </ul>\r\n    <p class=\"eav-hint\">Note: The import validates much data and may take several minutes.</p>\r\n  </div>\r\n  }\r\n  <!-- END DETAILS / STATISTICS -->\r\n  <!-- ERRORS -->\r\n  @if (!evaluationResult().Success) {\r\n  <div class=\"eav-dialog-content\">\r\n    <p class=\"eav-evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n    <ul class=\"eav-evaluation__content\">\r\n      @for (error of evaluationResult().Errors; track error) {\r\n      <li>\r\n        <div>{{ errors[error.ErrorCode] }}</div>\r\n        @if (error.ErrorDetail) {\r\n        <div><i>Details: {{ error.ErrorDetail }}</i></div>\r\n        }\r\n        @if (error.LineNumber) {\r\n        <div><i>Line-no: {{ error.LineNumber }}</i></div>\r\n        }\r\n        @if (error.LineDetail) {\r\n        <div><i>Line-details: {{ error.LineDetail }}</i></div>\r\n        }\r\n      </li>\r\n      }\r\n    </ul>\r\n  </div>\r\n  }\r\n  <!-- END ERRORS -->\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button (click)=\"back()\">Back</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!evaluationResult().Success\" (click)=\"importContent()\">\r\n      Import\r\n    </button>\r\n  </mat-dialog-actions>\r\n  }\r\n  }\r\n  <!-- END EVALUATION RESULT -->\r\n  <!-- IMPORT RESULT -->\r\n  @case (3) {\r\n  @if (importResult()) {\r\n  <div class=\"eav-dialog-content\">\r\n    @if (importResult().Success) {\r\n    <p>Import done.</p>\r\n    }\r\n    @if (!importResult().Success) {\r\n    <p>Import failed.</p>\r\n    }\r\n  </div>\r\n  }\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n  </mat-dialog-actions>\r\n  }\r\n  <!-- END IMPORT RESULT -->\r\n  }\r\n  }\r\n</div>\r\n","import { Component, HostBinding, Inject, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MAT_DIALOG_DATA, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { forkJoin } from 'rxjs';\r\nimport { transient } from '../../../../core';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { DialogConfigAppService } from '../app-administration/services/dialog-config-app.service';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n    selector: 'app-content-import',\r\n    templateUrl: './content-import.component.html',\r\n    styleUrls: ['./content-import.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatButtonModule,\r\n        MatRadioModule,\r\n        MatDialogActions,\r\n        DragAndDropDirective,\r\n    ]\r\n})\r\nexport class ContentImportComponent implements OnInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentImportService = transient(ContentImportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  formValues: ContentImport;\r\n\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n\r\n  contentType = signal<ContentType>(null);\r\n  viewStateSelected = signal(this.viewStates.default);\r\n  evaluationResult = signal<EvaluateContentResult>(null);\r\n  importResult = signal<ImportContentResult>(null);\r\n\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialog: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentTypeTemp = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.dialogConfigSvc.getCurrent$();\r\n    forkJoin([contentTypeTemp, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType.set(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n    });\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected.set(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult.set(result);\r\n      this.viewStateSelected.set(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected.set(this.viewStates.default);\r\n    this.evaluationResult.set(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Directive()\r\n// tslint:disable-next-line:directive-class-suffix\r\nexport abstract class BaseDirective implements OnDestroy {\r\n  /** Holds all subscriptions to be unsubscribed on destroy */\r\n  protected subscriptions = new Subscription();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Directive, ElementRef, HostListener, input, NgZone, OnDestroy, OnInit, output, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent } from 'rxjs';\r\nimport { BaseDirective } from './base.directive';\r\n\r\n@Directive({\r\n  selector: '[appDragAndDrop]',\r\n})\r\nexport class DragAndDropDirective extends BaseDirective implements OnInit, OnDestroy {\r\n  markStyle = input<'outline' | 'fill' | 'shadow'>('outline');\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  allowedFileTypes = input<string>('');\r\n  protected filesDropped = output<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass = signal<string>('');\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass.set(`eav-droparea-${this.markStyle()}`);\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass());\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscriptions.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass(), this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes());\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes().replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}