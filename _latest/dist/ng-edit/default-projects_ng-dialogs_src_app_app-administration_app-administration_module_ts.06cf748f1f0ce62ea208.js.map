{"version":3,"sources":["./node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","./node_modules/@angular/material/__ivy_ngcc__/fesm2015/checkbox.js","./projects/ng-dialogs/src/app/app-administration/app-administration-nav/app-administration-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/export-app/export-app-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-app-parts/import-app-parts-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-content-type/import-content-type-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-query/import-query-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/import-view/import-view-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/views-usage/views-usage-dialog.config.ts","./projects/ng-dialogs/src/app/app-administration/app-administration-routing.module.ts","./projects/ng-dialogs/src/app/app-administration/app-administration.module.ts","./projects/ng-dialogs/src/app/content-export/services/content-export.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts"],"names":["nextId","_MatBadgeBase","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","this","value","_setColor","val","_description","newDescription","badgeElement","_badgeElement","_updateHostAriaDescription","setAttribute","removeAttribute","_hidden","indexOf","changes","contentChange","currentValue","trim","length","_updateTextContent","description","removeDescription","destroyNode","textContent","_stringifyContent","_createBadgeElement","createElement","activeClass","contentClass","_clearExistingBadges","classList","add","nativeElement","appendChild","requestAnimationFrame","runOutsideAngular","oldDescription","content","describe","colorPalette","remove","cssClass","element","childCount","children","currentChild","contains","removeChild","ɵfac","t","ɵdir","type","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","MatBadgeModule","ɵmod","ɵinj","imports","_c0","_c1","a0","enterDuration","_c2","MAT_CHECKBOX_DEFAULT_OPTIONS","providedIn","factory","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","useExisting","MatCheckbox","multi","MatCheckboxChange","_MatCheckboxBase","elementRef","_changeDetectorRef","_focusMonitor","tabIndex","_options","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","name","change","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","_required","monitor","subscribe","focusOrigin","Promise","resolve","then","markForCheck","_syncIndeterminate","stopMonitoring","checked","newValue","changed","_transitionCheckState","emit","disableRipple","detectChanges","fn","isDisabled","indeterminate","newState","oldState","_getAnimationClassForCheckStateTransition","animationClass","setTimeout","event","source","_inputElement","_a","stopPropagation","toggle","_emitChangeEvent","origin","options","focusVia","focus","animSuffix","nativeCheckbox","ɵcmp","viewQuery","_t","first","ripple","required","ariaDescribedby","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","$event","_onInteractionEvent","_onInputClick","_onLabelTextChange","_r0","_r2","inputId","_getAriaChecked","_isRippleDisabled","directives","styles","encapsulation","changeDetection","_MatCheckboxRequiredValidatorModule","MatCheckboxModule","appAdministrationDialog","initContext","panelSize","panelClass","getComponent","editContentTypeDialog","exportAppPartsDialog","exportAppDialog","importAppPartsDialog","importContentTypeDialog","importQueryDialog","importViewDialog","viewsUsageDialog","appAdministrationRoutes","path","component","data","dialog","redirectTo","pathMatch","title","loadChildren","m","ContentItemsModule","matcher","EditModule","RefreshEditModule","ContentTypeFieldsModule","ContentExportModule","ContentImportModule","history","AppAdministrationRoutingModule","AppAdministrationModule","A","context","dnnContext","exportContent","values","selectedIds","selectedIdsString","join","url","$2sxc","http","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","prefix","metadata","ContentExportService","getAll","get","params","toString","contentType","getColumns","staticName","importItem","file","pipe","fileBase64","post","AppId","ContentBase64","ContentItemsService","webApiFieldsAll","webApiFieldsRoot","typeListRetrieve","appid","getInputTypesList","inputConfigs","map","config","dataType","Type","substring","inputType","label","Label","Description","getReservedNames","getFields","StaticName","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","All","reOrder","idArray","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","fieldId","newName","delete","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","field","ContentTypesFieldsService"],"mappings":"4UAeIA,EAAS,EAGPC,GAAgB,QAAa,oD,iBAG7BC,E,0CACF,WAAYC,EAASC,EAAaC,EAAgBC,EAAWC,GAAc,6BACvE,gBACKJ,QAAUA,EACf,EAAKC,YAAcA,EACnB,EAAKC,eAAiBA,EACtB,EAAKC,UAAYA,EACjB,EAAKC,eAAiBA,EAEtB,EAAKC,aAAc,EACnB,EAAKC,OAAS,UACd,EAAKC,UAAW,EAKhB,EAAKC,SAAW,cAEhB,EAAKC,KAAO,SAEZ,EAAKC,IAAMb,IAnB4D,E,kCA4B3E,WAAc,OAAOc,KAAKL,Q,IAC1B,SAAUM,GACND,KAAKE,UAAUD,GACfD,KAAKL,OAASM,I,mBAGlB,WAAgB,OAAOD,KAAKJ,U,IAC5B,SAAYO,GACRH,KAAKJ,UAAW,QAAsBO,K,uBAG1C,WAAoB,OAAOH,KAAKI,c,IAChC,SAAgBC,GACZ,GAAIA,IAAmBL,KAAKI,aAAc,CACtC,IAAME,EAAeN,KAAKO,cAC1BP,KAAKQ,2BAA2BH,EAAgBL,KAAKI,cACrDJ,KAAKI,aAAeC,EAChBC,IACAD,EAAiBC,EAAaG,aAAa,aAAcJ,GACrDC,EAAaI,gBAAgB,kB,kBAK7C,WAAe,OAAOV,KAAKW,S,IAC3B,SAAWR,GACPH,KAAKW,SAAU,QAAsBR,K,qBAGzC,WACI,OAA2C,IAApCH,KAAKH,SAASe,QAAQ,W,qBAGjC,WACI,OAA4C,IAArCZ,KAAKH,SAASe,QAAQ,Y,yBAEjC,SAAYC,GACR,IAAMC,EAAgBD,EAAO,QAC7B,GAAIC,EAAe,CACf,IAAMb,EAAQa,EAAcC,aAC5Bf,KAAKN,YAAuB,MAATO,GAAiB,UAAGA,GAAQe,OAAOC,OAAS,EAC/DjB,KAAKkB,wB,yBAGb,WACI,IAAMZ,EAAeN,KAAKO,cACtBD,IACIN,KAAKmB,aACLnB,KAAKT,eAAe6B,kBAAkBd,EAAcN,KAAKmB,aAIzDnB,KAAKR,UAAU6B,aACfrB,KAAKR,UAAU6B,YAAYf,M,6BAQvC,WACI,OAAON,KAAKO,gB,gCAGhB,WAOI,OANKP,KAAKO,cAINP,KAAKO,cAAce,YAActB,KAAKuB,oBAHtCvB,KAAKO,cAAgBP,KAAKwB,sBAKvBxB,KAAKO,gB,iCAGhB,WACI,IAAMD,EAAeN,KAAKR,UAAUiC,cAAc,QAC5CC,EAAc,mBACdC,EAAe,oBAwBrB,OAtBA3B,KAAK4B,qBAAqBD,GAC1BrB,EAAaG,aAAa,KAA1B,4BAAqDT,KAAKD,MAC1DO,EAAauB,UAAUC,IAAIH,GAC3BrB,EAAagB,YAActB,KAAKuB,oBACJ,mBAAxBvB,KAAKP,gBACLa,EAAauB,UAAUC,IAAI,2BAE3B9B,KAAKmB,aACLb,EAAaG,aAAa,aAAcT,KAAKmB,aAEjDnB,KAAKV,YAAYyC,cAAcC,YAAY1B,GAEN,mBAA1B2B,uBAAgE,mBAAxBjC,KAAKP,eACpDO,KAAKX,QAAQ6C,kBAAkB,WAC3BD,sBAAsB,WAClB3B,EAAauB,UAAUC,IAAIJ,OAKnCpB,EAAauB,UAAUC,IAAIJ,GAExBpB,I,wCAGX,SAA2BD,EAAgB8B,GAEvC,IAAMC,EAAUpC,KAAKkB,qBACjBiB,GACAnC,KAAKT,eAAe6B,kBAAkBgB,EAASD,GAE/C9B,GACAL,KAAKT,eAAe8C,SAASD,EAAS/B,K,uBAI9C,SAAUiC,GACN,GAAIA,IAAiBtC,KAAKL,OAAQ,CAC9B,IAAMkC,EAAY7B,KAAKV,YAAYyC,cAAcF,UAC7C7B,KAAKL,QACLkC,EAAUU,OAAV,oBAA8BvC,KAAKL,SAEnC2C,GACAT,EAAUC,IAAV,oBAA2BQ,O,kCAKvC,SAAqBE,GAIjB,IAHA,IAAMC,EAAUzC,KAAKV,YAAYyC,cAC7BW,EAAaD,EAAQE,SAAS1B,OAE3ByB,KAAc,CACjB,IAAME,EAAeH,EAAQE,SAASD,GAClCE,EAAaf,UAAUgB,SAASL,IAChCC,EAAQK,YAAYF,M,+BAKhC,WAGI,IAAMR,EAAUpC,KAAKoC,QACrB,OAAkB,MAAXA,EAAkB,GAAlB,UAA0BA,O,GA7KlBjD,G,OAgLvBC,EAAS2D,UAAO,SAA0BC,GAAK,OAAO,IAAKA,GAAK5D,GAAU,MAAyB,OAAgB,MAAyB,OAAoB,MAAyB,MAAuB,MAAyB,OAAmB,MAAyB,KAAuB,KAC5SA,EAAS6D,UAAqB,MAAyB,CAAEC,KAAM9D,EAAU+D,UAAW,CAAC,CAAC,GAAI,WAAY,KAAMC,UAAW,CAAC,EAAG,aAAcC,SAAU,GAAIC,aAAc,SAA+BC,EAAIC,GAAgB,EAALD,GAC3M,MAAmB,oBAAqBC,EAAIC,QAA5C,CAAqD,kBAAmBD,EAAIE,UAA5E,CAAuF,mBAAoBF,EAAIE,UAA/G,CAA0H,oBAAqBF,EAAIG,UAAnJ,CAA8J,kBAAmBH,EAAIG,UAArL,CAAgM,kBAAgC,UAAbH,EAAI1D,KAAvN,CAAyO,mBAAiC,WAAb0D,EAAI1D,KAAjQ,CAAoR,kBAAgC,UAAb0D,EAAI1D,KAA3S,CAA6T,mBAAoB0D,EAAII,SAAWJ,EAAI9D,YAApW,CAAiX,qBAAsB8D,EAAIK,WAC1YC,OAAQ,CAAED,SAAU,CAAC,mBAAoB,YAAahE,SAAU,CAAC,mBAAoB,YAAaC,KAAM,CAAC,eAAgB,QAASiE,MAAO,CAAC,gBAAiB,SAAUN,QAAS,CAAC,kBAAmB,WAAYtC,YAAa,CAAC,sBAAuB,eAAgByC,OAAQ,CAAC,iBAAkB,UAAWxB,QAAS,CAAC,WAAY,YAAc4B,SAAU,CAAC,MAAmC,S,sBAuE9XC,E,qCAENA,EAAelB,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKiB,IAC5EA,EAAeC,UAAqB,MAAwB,CAAEhB,KAAMe,IACpEA,EAAeE,UAAqB,MAAwB,CAAEC,QAAS,CAAC,CAC5D,KACA,MACD,Q,kNCjQLC,EAAM,CAAC,SACPC,EAAM,SAAUC,GAAM,MAAO,CAAEC,cAAeD,IAC9CE,EAAM,CAAC,KACPC,EAA+B,IAAI,MAAe,+BAAgC,CACpFC,WAAY,OACZC,QAASC,IAGb,SAASA,IACL,MAAO,CACHd,MAAO,SACPe,YAAa,uBAYrB,IAAIC,EAAe,EAEbC,EAAWH,IAMXI,EAAsC,CACxCC,QAAS,KACTC,aAAa,SAAW,kBAAMC,IAC9BC,OAAO,GAGLC,E,8BAIAC,GAAmB,SAAc,SAAW,SAAmB,QAAa,kBAC9E,WAAYjG,IAAW,eACnBU,KAAKV,YAAcA,GAFuD,O,iBAa5E8F,E,0CACF,WAAYI,EAAYC,EAAoBC,EAAerG,EAASsG,EAAUlG,EAAgBmG,GAAQ,6BAClG,cAAMJ,IACDC,mBAAqBA,EAC1B,EAAKC,cAAgBA,EACrB,EAAKrG,QAAUA,EACf,EAAKI,eAAiBA,EACtB,EAAKmG,SAAWA,EAKhB,EAAKC,UAAY,GAIjB,EAAKC,eAAiB,KACtB,EAAKC,UAAL,yBAAmChB,GAEnC,EAAKiB,GAAK,EAAKD,UAEf,EAAKE,cAAgB,QAErB,EAAKC,KAAO,KAEZ,EAAKC,OAAS,IAAI,MAElB,EAAKC,oBAAsB,IAAI,MAK/B,EAAKC,WAAa,aAClB,EAAKC,uBAAyB,GAC9B,EAAKC,mBAAqB,EAC1B,EAAKC,8BAAgC,aACrC,EAAKC,UAAW,EAChB,EAAKC,WAAY,EACjB,EAAKC,gBAAiB,EACtB,EAAKf,SAAW,EAAKA,UAAYZ,EACjC,EAAKjB,MAAQ,EAAK6C,aAAe,EAAKhB,SAAS7B,OAASiB,EAASjB,MACjE,EAAK4B,SAAWkB,SAASlB,IAAa,EAxC4D,E,oCA2CtG,WAAgB,gBAAU3F,KAAKgG,IAAMhG,KAAK+F,UAA1B,Y,oBAEhB,WAAiB,OAAO/F,KAAK8G,W,IAC7B,SAAa7G,GAASD,KAAK8G,WAAY,QAAsB7G,K,6BAC7D,WAAe,WACXD,KAAK0F,cAAcqB,QAAQ/G,KAAKV,aAAa,GAAM0H,UAAU,SAAAC,GACpDA,GAMDC,QAAQC,UAAUC,KAAK,WACnB,EAAKf,aACL,EAAKZ,mBAAmB4B,mBAIpCrH,KAAKsH,mBAAmBtH,KAAK2G,kB,gCAGjC,c,yBACA,WACI3G,KAAK0F,cAAc6B,eAAevH,KAAKV,e,mBAK3C,WAAgB,OAAOU,KAAKyG,U,IAC5B,SAAYxG,GACJA,GAASD,KAAKwH,UACdxH,KAAKyG,SAAWxG,EAChBD,KAAKyF,mBAAmB4B,kB,oBAOhC,WAAiB,OAAOrH,KAAK0G,W,IAC7B,SAAazG,GACT,IAAMwH,GAAW,QAAsBxH,GACnCwH,IAAazH,KAAK6D,WAClB7D,KAAK0G,UAAYe,EACjBzH,KAAKyF,mBAAmB4B,kB,yBAShC,WAAsB,OAAOrH,KAAK2G,gB,IAClC,SAAkB1G,GACd,IAAMyH,EAAUzH,GAASD,KAAK2G,eAC9B3G,KAAK2G,gBAAiB,QAAsB1G,GACxCyH,IAEI1H,KAAK2H,sBADL3H,KAAK2G,eACsB,EAGA3G,KAAKwH,QAAU,EAAkB,GAEhExH,KAAKoG,oBAAoBwB,KAAK5H,KAAK2G,iBAEvC3G,KAAKsH,mBAAmBtH,KAAK2G,kB,+BAEjC,WACI,OAAO3G,KAAK6H,eAAiB7H,KAAK6D,W,gCAGtC,WAMI7D,KAAKyF,mBAAmBqC,kB,wBAG5B,SAAW7H,GACPD,KAAKwH,UAAYvH,I,8BAGrB,SAAiB8H,GACb/H,KAAKwG,8BAAgCuB,I,+BAGzC,SAAkBA,GACd/H,KAAKqG,WAAa0B,I,8BAGtB,SAAiBC,GACbhI,KAAK6D,SAAWmE,I,6BAEpB,WACI,OAAIhI,KAAKwH,QACE,OAEJxH,KAAKiI,cAAgB,QAAU,U,mCAE1C,SAAsBC,GAClB,IAAIC,EAAWnI,KAAKuG,mBAChB9D,EAAUzC,KAAKV,YAAYyC,cAC/B,GAAIoG,IAAaD,IAGblI,KAAKsG,uBAAuBrF,OAAS,GACrCwB,EAAQZ,UAAUU,OAAOvC,KAAKsG,wBAElCtG,KAAKsG,uBAAyBtG,KAAKoI,0CAA0CD,EAAUD,GACvFlI,KAAKuG,mBAAqB2B,EACtBlI,KAAKsG,uBAAuBrF,OAAS,GAAG,CACxCwB,EAAQZ,UAAUC,IAAI9B,KAAKsG,wBAE3B,IAAM+B,EAAiBrI,KAAKsG,uBAC5BtG,KAAKX,QAAQ6C,kBAAkB,WAC3BoG,WAAW,WACP7F,EAAQZ,UAAUU,OAAO8F,IAC1B,U,8BAIf,WACI,IAAME,EAAQ,IAAIjD,EAClBiD,EAAMC,OAASxI,KACfuI,EAAMf,QAAUxH,KAAKwH,QACrBxH,KAAKwG,8BAA8BxG,KAAKwH,SACxCxH,KAAKmG,OAAOyB,KAAKW,GAGbvI,KAAKyI,gBACLzI,KAAKyI,cAAc1G,cAAcyF,QAAUxH,KAAKwH,W,oBAIxD,WACIxH,KAAKwH,SAAWxH,KAAKwH,U,2BASzB,SAAce,GAAK,IACXG,EADW,OAET5D,EAAuC,QAAxB4D,EAAK1I,KAAK4F,gBAA6B,IAAP8C,OAAgB,EAASA,EAAG5D,YAQjFyD,EAAMI,kBAED3I,KAAK6D,UAA4B,SAAhBiB,EAeZ9E,KAAK6D,UAA4B,SAAhBiB,IAGvB9E,KAAKyI,cAAc1G,cAAcyF,QAAUxH,KAAKwH,QAChDxH,KAAKyI,cAAc1G,cAAckG,cAAgBjI,KAAKiI,gBAjBlDjI,KAAKiI,eAAiC,UAAhBnD,GACtBoC,QAAQC,UAAUC,KAAK,WACnB,EAAKT,gBAAiB,EACtB,EAAKP,oBAAoBwB,KAAK,EAAKjB,kBAG3C3G,KAAK4I,SACL5I,KAAK2H,sBAAsB3H,KAAKyG,SAAW,EAAkB,GAI7DzG,KAAK6I,sB,mBAUb,SAAMC,EAAQC,GACND,EACA9I,KAAK0F,cAAcsD,SAAShJ,KAAKyI,cAAeK,EAAQC,GAGxD/I,KAAKyI,cAAc1G,cAAckH,MAAMF,K,iCAG/C,SAAoBR,GAIhBA,EAAMI,oB,uDAEV,SAA0CR,EAAUD,GAEhD,GAA4B,mBAAxBlI,KAAKP,eACL,MAAO,GAEX,IAAIyJ,EAAa,GACjB,OAAQf,GACJ,KAAK,EAGD,GAAiB,IAAbD,EACAgB,EAAa,wBAEZ,IAAgB,GAAZhB,EAIL,MAAO,GAHPgB,EAAa,0BAKjB,MACJ,KAAK,EACDA,EAA0B,IAAbhB,EACT,oBAAsB,0BAC1B,MACJ,KAAK,EACDgB,EAA0B,IAAbhB,EACT,oBAAsB,wBAC1B,MACJ,KAAK,EACDgB,EAA0B,IAAbhB,EACT,wBAA0B,0BAGtC,kCAA4BgB,K,gCAUhC,SAAmBjJ,GACf,IAAMkJ,EAAiBnJ,KAAKyI,cACxBU,IACAA,EAAepH,cAAckG,cAAgBhI,O,GA9R/BsF,G,OAkS1BH,EAAYrC,UAAO,SAA6BC,GAAK,OAAO,IAAKA,GAAKoC,GAAa,MAAyB,OAAoB,MAAyB,OAA2B,MAAyB,MAAsB,MAAyB,OAAgB,MAAyB,YAAa,MAAyB,KAAuB,GAAI,MAAyBV,EAA8B,KAC7ZU,EAAYgE,UAAqB,MAAyB,CAAElG,KAAMkC,EAAajC,UAAW,CAAC,CAAC,iBAAkBkG,UAAW,SAA2B9F,EAAIC,GAIhJ,IAAI8F,EAJ4J,EAAL/F,IAC3J,KAAmBc,EAAK,GACxB,KAAmB,KAAW,IACvB,EAALd,IAEF,MAAsB+F,EAAK,WAA0B9F,EAAIiF,cAAgBa,EAAGC,OAC5E,MAAsBD,EAAK,WAA0B9F,EAAIgG,OAASF,EAAGC,SACpEnG,UAAW,CAAC,EAAG,gBAAiBC,SAAU,GAAIC,aAAc,SAAkCC,EAAIC,GAAgB,EAALD,IAC9G,MAAsB,KAAMC,EAAIwC,IAChC,MAAmB,WAAY,MAC/B,MAAmB,6BAA8BxC,EAAIyE,cAArD,CAAoE,uBAAwBzE,EAAIgE,QAAhG,CAAyG,wBAAyBhE,EAAIK,SAAtI,CAAgJ,4BAAkD,UAArBL,EAAIyC,cAAjL,CAA4M,0BAAkD,mBAAvBzC,EAAI/D,kBAC1OqE,OAAQ,CAAE+D,cAAe,gBAAiB9D,MAAO,QAAS4B,SAAU,WAAYE,UAAW,CAAC,aAAc,aAAcC,eAAgB,CAAC,kBAAmB,kBAAmBE,GAAI,KAAMC,cAAe,gBAAiBC,KAAM,OAAQuD,SAAU,WAAYjC,QAAS,UAAW3D,SAAU,WAAYoE,cAAe,gBAAiByB,gBAAiB,CAAC,mBAAoB,mBAAoBzJ,MAAO,SAAW0J,QAAS,CAAExD,OAAQ,SAAUC,oBAAqB,uBAAyBwD,SAAU,CAAC,eAAgB5F,SAAU,CAAC,MAA0B,CAACiB,IAAuC,OAAoC4E,mBAAoBpF,EAAKqF,MAAO,GAAIC,KAAM,GAAIC,OAAQ,CAAC,CAAC,EAAG,uBAAwB,CAAC,QAAS,IAAK,CAAC,EAAG,gCAAiC,CAAC,OAAQ,WAAY,EAAG,qBAAsB,sBAAuB,EAAG,KAAM,WAAY,UAAW,WAAY,WAAY,SAAU,SAAU,CAAC,QAAS,IAAK,CAAC,YAAa,GAAI,EAAG,sBAAuB,sBAAuB,EAAG,mBAAoB,oBAAqB,kBAAmB,oBAAqB,sBAAuB,CAAC,EAAG,qBAAsB,kCAAmC,CAAC,EAAG,sBAAuB,CAAC,EAAG,2BAA4B,CAAC,UAAW,MAAO,YAAa,QAAS,UAAW,YAAa,EAAG,MAAO,QAAS,WAAY,EAAG,0BAA2B,CAAC,OAAQ,OAAQ,SAAU,QAAS,IAAK,4BAA6B,EAAG,+BAAgC,CAAC,EAAG,0BAA2B,CAAC,EAAG,qBAAsB,EAAG,qBAAsB,CAAC,gBAAiB,IAAK,CAAC,EAAG,UAAW,SAAUC,SAAU,SAA8B1G,EAAIC,GA4B/kD,GA5B+lD,EAALD,IACxlD,QACA,MAAsB,EAAG,QAAS,EAAG,GACrC,MAAsB,EAAG,OAAQ,GACjC,MAAsB,EAAG,QAAS,EAAG,GACrC,MAAkB,SAAU,SAAsD2G,GAAU,OAAO1G,EAAI2G,oBAAoBD,IAA3H,CAAuI,QAAS,SAAqDA,GAAU,OAAO1G,EAAI4G,cAAcF,KACxO,QACA,MAAsB,EAAG,OAAQ,GACjC,MAAiB,EAAG,OAAQ,GAC5B,QACA,MAAiB,EAAG,OAAQ,GAC5B,MAAsB,EAAG,OAAQ,GACjC,QACA,MAAsB,EAAG,MAAO,GAChC,MAAiB,GAAI,OAAQ,IAC7B,QACA,QACA,MAAiB,GAAI,OAAQ,IAC7B,QACA,QACA,MAAsB,GAAI,OAAQ,GAAI,IACtC,MAAkB,oBAAqB,WAAqE,OAAO1G,EAAI6G,uBACvH,MAAsB,GAAI,OAAQ,IAClC,MAAc,GAAI,QAClB,QACA,MAAoB,IACpB,QACA,SACO,EAAL9G,EAAQ,CACV,IAAM+G,EAAM,MAAmB,GACzBC,EAAM,MAAmB,IAC/B,MAAmB,MAAO/G,EAAIgH,SAC9B,MAAiB,GACjB,MAAmB,+CAAgDD,EAAIjJ,cAAgBiJ,EAAIjJ,YAAYN,QACvG,MAAiB,GACjB,MAAkB,KAAMwC,EAAIgH,QAA5B,CAAqC,WAAYhH,EAAIiG,SAArD,CAA+D,UAAWjG,EAAIgE,QAA9E,CAAuF,WAAYhE,EAAIK,SAAvG,CAAiH,WAAYL,EAAImC,UACjI,MAAmB,QAASnC,EAAIvD,MAAhC,CAAuC,OAAQuD,EAAI0C,KAAnD,CAAyD,aAAc1C,EAAIqC,WAAa,KAAxF,CAA8F,kBAAmBrC,EAAIsC,eAArH,CAAqI,eAAgBtC,EAAIiH,kBAAzJ,CAA4K,mBAAoBjH,EAAIkG,iBACpM,MAAiB,GACjB,MAAkB,mBAAoBY,EAAtC,CAA2C,oBAAqB9G,EAAIkH,oBAApE,CAAyF,kBAAmB,GAA5G,CAAgH,qBAAqB,EAArI,CAA2I,qBAAsB,MAAuB,GAAIpG,EAA4B,mBAAvBd,EAAI/D,eAAsC,EAAI,QAC9OkL,WAAY,CAAC,KAAkB,MAA2BC,OAAQ,CAAC,44NAA64NC,cAAe,EAAGC,gBAAiB,I,sBAyIt/NC,E,qCAENA,EAAoChI,UAAO,SAAqDC,GAAK,OAAO,IAAKA,GAAK+H,IACtHA,EAAoC7G,UAAqB,MAAwB,CAAEhB,KAAM6H,IACzFA,EAAoC5G,UAAqB,MAAwB,I,sBAS3E6G,E,qCAENA,EAAkBjI,UAAO,SAAmCC,GAAK,OAAO,IAAKA,GAAKgI,IAClFA,EAAkB9G,UAAqB,MAAwB,CAAEhB,KAAM8H,IACvEA,EAAkB7G,UAAqB,MAAwB,CAAEC,QAAS,CAAC,CAC/D,KAAiB,KAAiB,KAClC2G,GACD,KAAiBA,K,waC3jBfE,EAAwC,CACnD/E,KAAM,4BACNgF,aAAa,EACbC,UAAW,QACXC,WAAY,KAENC,aAAY,W,oGAC0B,SAAM,+J,OAChD,MAAO,CAAP,EAD0C,SAAkD,sCCPnFC,EAAsC,CACjDpF,KAAM,2BACNgF,aAAa,EACbC,UAAW,QACXC,WAAY,KAENC,aAAY,W,oGACqB,SAAM,+J,OAC3C,MAAO,CAAP,EADqC,SAA6C,iCCPzEE,EAAqC,CAChDrF,KAAM,mBACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACoB,SAAM,+J,OAC1C,MAAO,CAAP,EADoC,SAA4C,gCCPvEG,EAAgC,CAC3CtF,KAAM,aACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACe,SAAM,2H,OACrC,MAAO,CAAP,EAD+B,SAAsC,2BCP5DI,EAAqC,CAChDvF,KAAM,mBACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACoB,SAAM,+J,OAC1C,MAAO,CAAP,EADoC,SAA4C,gCCPvEK,EAAwC,CACnDxF,KAAM,6BACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACuB,SAAM,+J,OAC7C,MAAO,CAAP,EADuC,SAA+C,mCCP7EM,EAAkC,CAC7CzF,KAAM,sBACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACiB,SAAM,4J,OACvC,MAAO,CAAP,EADiC,SAAwC,6BCPhEO,EAAiC,CAC5C1F,KAAM,qBACNgF,aAAa,EACbC,UAAW,SACXC,WAAY,KAENC,aAAY,W,oGACgB,SAAM,0J,OACtC,MAAO,CAAP,EADgC,SAAuC,4BCP9DQ,EAAiC,CAC5C3F,KAAM,qBACNgF,aAAa,EACbC,UAAW,QACXC,WAAY,KAENC,aAAY,W,oGACgB,SAAM,6H,OACtC,MAAO,CAAP,EADgC,SAAuC,4B,UCQrES,EAAkC,CACtC,CACEC,KAAM,GAAIC,UAAW,IAAsBC,KAAM,CAAEC,OAAQjB,GAA2BtI,SAAU,CAC9F,CAAEoJ,KAAM,GAAII,WAAY,OAAQC,UAAW,QAC3C,CAAEL,KAAM,OAAQC,UAAW,IAAqBC,KAAM,CAAEI,MAAO,aAC/D,CACEN,KAAM,cAAeC,UAAW,IAAqBrJ,SAAU,CAC7D,CACEoJ,KAAM,SACNC,UAAW,IACXC,KAAM,CAAEC,OAAQR,EAAyBW,MAAO,wBAElD,CACEN,KAAM,+BACNO,aAAc,WAAM,yCAAgDlF,KAAK,SAAAmF,GAAK,OAAAA,EAAEC,uBAElF,CACEC,QAAS,KACTH,aAAc,WAAM,weAAuClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEG,eAEzE,CACED,QAAS,KACTH,aAAc,WAAM,wEAA+ClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEI,sBAEjF,CACEZ,KAAM,MACNC,UAAW,IACXC,KAAM,CAAEC,OAAQZ,EAAuBe,MAAO,qBAEhD,CACEN,KAAM,8BACNC,UAAW,IACXC,KAAM,CAAEC,OAAQZ,EAAuBe,MAAO,sBAEhD,WACA,CACEN,KAAM,gCACNO,aAAc,WAAM,0CAA4DlF,KAAK,SAAAmF,GAAK,OAAAA,EAAEK,2BAC5FX,KAAM,CAAEI,MAAO,wBAEjB,CACEN,KAAM,gCACNO,aAAc,WAAM,0CAAkDlF,KAAK,SAAAmF,GAAK,OAAAA,EAAEM,uBAClFZ,KAAM,CAAEI,MAAO,iBAEjB,CACEN,KAAM,gCACNO,aAAc,WAAM,0CAAkDlF,KAAK,SAAAmF,GAAK,OAAAA,EAAEO,uBAClFb,KAAM,CAAEI,MAAO,iBAEjB,WAEFJ,KAAM,CAAEI,MAAO,aAEjB,CACEN,KAAM,UAAWC,UAAW,IAAqBrJ,SAAU,CACzD,CACEoJ,KAAM,SACNC,UAAW,IACXC,KAAM,CAAEC,OAAQP,EAAmBU,MAAO,iBAE5C,CACEI,QAAS,KACTH,aAAc,WAAM,weAAuClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEG,cACvET,KAAM,CAAEI,MAAO,kCAAmCU,SAAS,K,oBAExD,WAAqB,CAAEd,KAAM,CAAEI,MAAO,uBAC3C,YAEFJ,KAAM,CAAEI,MAAO,gBAEjB,CACEN,KAAM,QAASC,UAAW,IAAqBrJ,SAAU,CACvD,CACEoJ,KAAM,SACNC,UAAW,IACXC,KAAM,CAAEC,OAAQN,EAAkBS,MAAO,gBAE3C,CAAEN,KAAM,cAAeC,UAAW,IAAsBC,KAAM,CAAEC,OAAQL,IACxE,CACEY,QAAS,KACTH,aAAc,WAAM,weAAuClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEG,cACvET,KAAM,CAAEI,MAAO,cAEjB,CACEI,QAAS,KACTH,aAAc,WAAM,wEAA+ClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEI,uB,oBAE5E,WAAqB,CAAEV,KAAM,CAAEI,MAAO,uBAE7CJ,KAAM,CAAEI,MAAO,cAEjB,CACEN,KAAM,UAAWC,UAAW,IAAqBC,KAAM,CAAEI,MAAO,cAAgB1J,SAAU,CACxF,aAGJ,CACEoJ,KAAM,MAAOC,UAAW,IAAqBrJ,SAAU,CACrD,CACE8J,QAAS,KACTH,aAAc,WAAM,weAAuClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEG,cACvET,KAAM,CAAEI,MAAO,wBAEjB,CACEI,QAAS,KACTH,aAAc,WAAM,wEAA+ClF,KAAK,SAAAmF,GAAK,OAAAA,EAAEI,sBAEjF,CACEZ,KAAM,gCACNO,aAAc,WAAM,0CAA4DlF,KAAK,SAAAmF,GAAK,OAAAA,EAAEK,2BAC5FX,KAAM,CAAEI,MAAO,6C,oBAEZ,WAAqB,CAAEJ,KAAM,CAAEI,MAAO,qBAC3C,CAAEN,KAAM,SAAUC,UAAW,IAAsBC,KAAM,CAAEC,OAAQV,EAAiBa,MAAO,eAC3F,CAAEN,KAAM,eAAgBC,UAAW,IAAsBC,KAAM,CAAEC,OAAQX,EAAsBc,MAAO,qBACtG,CAAEN,KAAM,eAAgBC,UAAW,IAAsBC,KAAM,CAAEC,OAAQT,EAAsBY,MAAO,sBAExGJ,KAAM,CAAEI,MAAO,kBAMvB,2B,6CAIaW,I,wBAAAA,I,4BAHF,CAAC,cAAsBlB,IACtB,Q,EAFZ,G,gFChFA,4B,6CAmEamB,I,wBAAAA,I,6BAhBA,CACT,IACA,IACA,IACA,KACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,EAAAC,GACD,SArCQ,CACPF,EACA,IACA,KACA,KACA,KACA,KACA,oBAA4B,IAC5B,KACA,KACA,IACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,Q,EAjDJ,I,wHCtDA,aAEE,WAAoBG,EAA0BC,GAA1B,KAAAD,UAA0B,KAAAC,a,OAE9C,YAAAC,cAAA,SAAcC,EAAuBC,GACnC,IAAMC,EAAoBD,EAAc,gBAAkBA,EAAYE,OAAS,GACzEC,EAAM1N,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO,KAAmB,YAC7D,UAAY7N,KAAKmN,QAAQW,MACzB,aAAeR,EAAOS,SACtB,oBAAsBT,EAAOU,gBAC7B,gBAAkBV,EAAOW,sBACzB,iBAAmBX,EAAOY,aAC1B,wBAA0BZ,EAAOa,oBACjC,uBAAyBb,EAAOc,mBAChCZ,EAEJa,OAAOC,KAAKZ,EAAK,SAAU,KAG7B,YAAAa,WAAA,SAAWC,GACT,IAAMd,EAAM1N,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO,IAAiB,QAC3D,UAAY7N,KAAKmN,QAAQW,MACzB,SAAWU,EAEfH,OAAOC,KAAKZ,EAAK,SAAU,KAG7B,YAAAe,aAAA,SAAazI,EAAY0I,EAAgBC,GACvC,IAAMjB,EAAM1N,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO,KAAmB,QAC7D,UAAY7N,KAAKmN,QAAQW,MACzB,OAAS9H,EACT,WAAa0I,EACb,iBAAmBC,EAEvBN,OAAOC,KAAKZ,EAAK,SAAU,K,sCAjClBkB,GAAoB,yB,0BAApBA,EAAoB,QAApBA,EAAoB,Y,EADjC,I,gKCKA,aAEE,WAAoBhB,EAA0BT,EAA0BC,GAApD,KAAAQ,OAA0B,KAAAT,UAA0B,KAAAC,a,OAExE,YAAAyB,OAAA,SAAOZ,GACL,OAAOjO,KAAK4N,KAAKkB,IAAmB9O,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO,MAAmB,CACvFkB,OAAQ,CAAEjB,MAAO9N,KAAKmN,QAAQW,MAAMkB,WAAYC,YAAahB,MAIjE,YAAAiB,WAAA,SAAWjB,GACT,OAAOjO,KAAK4N,KAAKkB,IAAa9O,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO,MAAkB,CAChFkB,OAAQ,CAAEjB,MAAO9N,KAAKmN,QAAQW,MAAMkB,WAAYG,WAAYlB,MAIhE,YAAAmB,WAAA,SAAWC,GAAX,WACE,OAAO,QAAK,OAASA,IAAOC,MAC1B,QAAS,SAAAC,GACP,OAAO,EAAK3B,KAAK4B,KAAc,EAAKpC,WAAWO,MAAMC,KAAKC,OAAO,KAAmB,UAAW,CAC7F4B,MAAO,EAAKtC,QAAQW,MAAMkB,WAC1BU,cAAeH,Q,sCApBZI,GAAmB,qC,0BAAnBA,EAAmB,QAAnBA,EAAmB,Y,EADhC,I,qKCAaC,EAAkBC,kBAE/B,aAEE,WAAoBjC,EAA0BT,EAA0BC,GAApD,KAAAQ,OAA0B,KAAAT,UAA0B,KAAAC,a,OAEhE,YAAAS,OAAR,SAAe3H,GACb,OAAOlG,KAAKoN,WAAWO,MAAMC,KAAKC,OAAO3H,IAG3C,YAAA4J,iBAAA,WACE,OAAO9P,KAAK4N,KAAKkB,IAAc9O,KAAK6N,OAAOgC,yBAAiC,CAC1Ed,OAAQ,CAAEgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,eAIxC,YAAAgB,kBAAA,WACE,OAAOhQ,KAAK4N,KACTkB,IAAiB9O,KAAK6N,OAAOgC,0BAAkC,CAAEd,OAAQ,CAAEgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,cACrGM,MACC,OAAI,SAAAW,GAUF,OATyBA,EAAaC,IAAI,SAAAC,GAOxC,MANqC,CACnCC,SAAUD,EAAOE,KAAKC,UAAU,EAAGH,EAAOE,KAAKzP,QAAQ,MACvD2P,UAAWJ,EAAOE,KAClBG,MAAOL,EAAOM,MACdtP,YAAagP,EAAOO,mBAShC,YAAAC,iBAAA,WACE,OAAO3Q,KAAK4N,KAAKkB,IAAmB9O,KAAK6N,OAAOgC,+BAGlD,YAAAe,UAAA,SAAU3B,GACR,OAAOjP,KAAK4N,KACTkB,IAAa9O,KAAK6N,OAAO+B,GAAkB,CAC1Cb,OAAQ,CAAEgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,WAAYG,WAAYF,EAAY4B,cAEzEvB,MACC,OAAI,SAAAwB,G,QACF,GAAIA,E,IACF,IAAkB,eAAAA,GAAM,8BAAE,CAArB,IAAMC,EAAG,QACZ,GAAKA,EAAIC,SAAT,CACA,IAAMC,EAAKF,EAAIC,SAETE,EAASD,EAAGF,EAAIV,MAChBc,EAAUF,EAAGF,EAAIK,WACvBH,EAAGI,QAAS,SAAH,oBAHKJ,EAAGK,KAGUJ,GAAWC,K,iGAG1C,OAAOL,MAKf,YAAAS,QAAA,SAAQC,EAAmBvC,GACzB,OAAOjP,KAAK4N,KAAK4B,KAAcxP,KAAK6N,OAAOgC,oBAA4B,KAAM,CAC3Ed,OAAQ,CACNgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,WAC1ByC,cAAexC,EAAYyC,GAAG1C,WAC9B2C,MAAOC,KAAKC,UAAUL,OAK5B,YAAAM,SAAA,SAASC,EAAa9C,GACpB,OAAOjP,KAAK4N,KAAK4B,KAAWxP,KAAK6N,OAAO,IAAiB,YAAa,KAAM,CAC1EkB,OAAQ,CACNgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,WAC1ByC,cAAexC,EAAYyC,GAAG1C,WAC9BgD,YAAaD,EAAKL,GAAG1C,eAK3B,YAAAiD,OAAA,SAAOC,EAAiBT,EAAuBU,GAC7C,OAAOnS,KAAK4N,KAAK4B,KAAWxP,KAAK6N,OAAOgC,sBAA8B,KAAM,CAC1Ed,OAAQ,CACNgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,WAC1ByC,cAAeA,EAAczC,WAC7BgD,YAAaE,EAAQlD,WACrBmD,QAAO,MAKb,YAAAC,OAAA,SAAOL,EAAa9C,GAClB,GAAI8C,EAAKM,QACP,MAAM,IAAIC,MAAM,sBAGlB,OAAOtS,KAAK4N,KAAKwE,OAAgBpS,KAAK6N,OAAOgC,sBAA8B,CACzEd,OAAQ,CACNgB,MAAO/P,KAAKmN,QAAQW,MAAMkB,WAC1ByC,cAAexC,EAAYyC,GAAG1C,WAC9BgD,YAAaD,EAAKL,GAAG1C,eAK3B,YAAAlN,IAAA,SAAIyQ,EAA0Bd,GAC5B,OAAOzR,KAAK4N,KAAK4B,KAAaxP,KAAK6N,OAAOgC,mBAA2B,KAAM,CACzEd,OAAQ,CACNU,MAAOzP,KAAKmN,QAAQW,MAAMkB,WAC1BwD,cAAef,EAAczC,WAC7B0C,GAAIa,EAASb,GAAG1C,WAChBqB,KAAMkC,EAASlC,KACfe,UAAWmB,EAASnB,UACpBP,WAAY0B,EAAS1B,WACrBwB,QAASE,EAASF,QAAQrD,WAC1ByD,MAAOF,EAASG,UAAU1D,eAKhC,YAAA2D,gBAAA,SAAgB3M,EAAYmJ,EAAoBoB,GAC9C,OAAOvQ,KAAK4N,KAAK4B,KAAcxP,KAAK6N,OAAOgC,yBAAiC,KAAM,CAChFd,OAAQ,CAAEjB,MAAO9N,KAAKmN,QAAQW,MAAMkB,WAAYgD,YAAahM,EAAGgJ,WAAY4D,MAAOzD,EAAYoB,UAAS,M,sCAxHjGsC,GAAyB,qC,0BAAzBA,EAAyB,QAAzBA,EAAyB,Y,EADtC","file":"default-projects_ng-dialogs_src_app_app-administration_app-administration_module_ts.06cf748f1f0ce62ea208.js","sourcesContent":["import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); };\nMatBadgeModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, NgZone, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"input\"];\nconst _c1 = function (a0) { return { enterDuration: a0 }; };\nconst _c2 = [\"*\"];\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    /** Whether the checkbox is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() { return this._checked; }\n    set checked(value) {\n        if (value != this.checked) {\n            this._checked = value;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() { return this._indeterminate; }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this.toggle();\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'unchecked-checked' : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix = newState === 2 /* Unchecked */ ?\n                    'checked-unchecked' : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix = newState === 1 /* Checked */ ?\n                    'indeterminate-checked' : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = function MatCheckbox_Factory(t) { return new (t || MatCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_CHECKBOX_DEFAULT_OPTIONS, 8)); };\nMatCheckbox.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatCheckbox, selectors: [[\"mat-checkbox\"]], viewQuery: function MatCheckbox_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 5);\n        ɵngcc0.ɵɵviewQuery(MatRipple, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ripple = _t.first);\n    } }, hostAttrs: [1, \"mat-checkbox\"], hostVars: 12, hostBindings: function MatCheckbox_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-indeterminate\", ctx.indeterminate)(\"mat-checkbox-checked\", ctx.checked)(\"mat-checkbox-disabled\", ctx.disabled)(\"mat-checkbox-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], id: \"id\", labelPosition: \"labelPosition\", name: \"name\", required: \"required\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\", ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], value: \"value\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, exportAs: [\"matCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c2, decls: 17, vars: 21, consts: [[1, \"mat-checkbox-layout\"], [\"label\", \"\"], [1, \"mat-checkbox-inner-container\"], [\"type\", \"checkbox\", 1, \"mat-checkbox-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"checked\", \"disabled\", \"tabIndex\", \"change\", \"click\"], [\"input\", \"\"], [\"matRipple\", \"\", 1, \"mat-checkbox-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleRadius\", \"matRippleCentered\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-checkbox-persistent-ripple\"], [1, \"mat-checkbox-frame\"], [1, \"mat-checkbox-background\"], [\"version\", \"1.1\", \"focusable\", \"false\", \"viewBox\", \"0 0 24 24\", 0, \"xml\", \"space\", \"preserve\", 1, \"mat-checkbox-checkmark\"], [\"fill\", \"none\", \"stroke\", \"white\", \"d\", \"M4.1,12.7 9,17.6 20.3,6.3\", 1, \"mat-checkbox-checkmark-path\"], [1, \"mat-checkbox-mixedmark\"], [1, \"mat-checkbox-label\", 3, \"cdkObserveContent\"], [\"checkboxLabel\", \"\"], [2, \"display\", \"none\"]], template: function MatCheckbox_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"change\", function MatCheckbox_Template_input_change_3_listener($event) { return ctx._onInteractionEvent($event); })(\"click\", function MatCheckbox_Template_input_click_3_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"span\", 5);\n        ɵngcc0.ɵɵelement(6, \"span\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(7, \"span\", 7);\n        ɵngcc0.ɵɵelementStart(8, \"span\", 8);\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(9, \"svg\", 9);\n        ɵngcc0.ɵɵelement(10, \"path\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵnamespaceHTML();\n        ɵngcc0.ɵɵelement(11, \"span\", 11);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(12, \"span\", 12, 13);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatCheckbox_Template_span_cdkObserveContent_12_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(14, \"span\", 14);\n        ɵngcc0.ɵɵtext(15, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r2 = ɵngcc0.ɵɵreference(13);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-checkbox-inner-container-no-side-margin\", !_r2.textContent || !_r2.textContent.trim());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled)(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"value\", ctx.value)(\"name\", ctx.name)(\"aria-label\", ctx.ariaLabel || null)(\"aria-labelledby\", ctx.ariaLabelledby)(\"aria-checked\", ctx._getAriaChecked())(\"aria-describedby\", ctx.ariaDescribedby);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx._isRippleDisabled())(\"matRippleRadius\", 20)(\"matRippleCentered\", true)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction1(19, _c1, ctx._animationMode === \"NoopAnimations\" ? 0 : 150));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatCheckbox.ctorParameters = () => [\n    { type: ElementRef },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: NgZone },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [MAT_CHECKBOX_DEFAULT_OPTIONS,] }] }\n];\nMatCheckbox.propDecorators = {\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    ariaDescribedby: [{ type: Input, args: ['aria-describedby',] }],\n    id: [{ type: Input }],\n    required: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    name: [{ type: Input }],\n    change: [{ type: Output }],\n    indeterminateChange: [{ type: Output }],\n    value: [{ type: Input }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }],\n    ripple: [{ type: ViewChild, args: [MatRipple,] }],\n    checked: [{ type: Input }],\n    disabled: [{ type: Input }],\n    indeterminate: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckbox, [{\n        type: Component,\n        args: [{\n                selector: 'mat-checkbox',\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           xml:space=\\\"preserve\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                exportAs: 'matCheckbox',\n                host: {\n                    'class': 'mat-checkbox',\n                    '[id]': 'id',\n                    '[attr.tabindex]': 'null',\n                    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                    '[class.mat-checkbox-checked]': 'checked',\n                    '[class.mat-checkbox-disabled]': 'disabled',\n                    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`\n                },\n                providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n                inputs: ['disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;-moz-user-select:auto;-ms-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n            }] }]; }, { ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], change: [{\n            type: Output\n        }], indeterminateChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], indeterminate: [{\n            type: Input\n        }], ariaDescribedby: [{\n            type: Input,\n            args: ['aria-describedby']\n        }], value: [{\n            type: Input\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }], ripple: [{\n            type: ViewChild,\n            args: [MatRipple]\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = /*@__PURE__*/ function () { let ɵMatCheckboxRequiredValidator_BaseFactory; return function MatCheckboxRequiredValidator_Factory(t) { return (ɵMatCheckboxRequiredValidator_BaseFactory || (ɵMatCheckboxRequiredValidator_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatCheckboxRequiredValidator)))(t || MatCheckboxRequiredValidator); }; }();\nMatCheckboxRequiredValidator.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: MatCheckboxRequiredValidator, selectors: [[\"mat-checkbox\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"formControl\", \"\"], [\"mat-checkbox\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_CHECKBOX_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = function _MatCheckboxRequiredValidatorModule_Factory(t) { return new (t || _MatCheckboxRequiredValidatorModule)(); };\n_MatCheckboxRequiredValidatorModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: _MatCheckboxRequiredValidatorModule });\n_MatCheckboxRequiredValidatorModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(_MatCheckboxRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatCheckboxRequiredValidator],\n                declarations: [MatCheckboxRequiredValidator]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatCheckboxRequiredValidatorModule, { declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] }); })();\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = function MatCheckboxModule_Factory(t) { return new (t || MatCheckboxModule)(); };\nMatCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatCheckboxModule });\nMatCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[\n            MatRippleModule, MatCommonModule, ObserversModule,\n            _MatCheckboxRequiredValidatorModule\n        ], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    MatRippleModule, MatCommonModule, ObserversModule,\n                    _MatCheckboxRequiredValidatorModule\n                ],\n                exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                declarations: [MatCheckbox]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatCheckboxModule, { declarations: function () { return [MatCheckbox]; }, imports: function () { return [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule]; }, exports: function () { return [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n\n//# sourceMappingURL=checkbox.js.map","import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const appAdministrationDialog: DialogConfig = {\r\n  name: 'APP_ADMINISTRATION_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { AppAdministrationNavComponent } = await import('./app-administration-nav.component');\r\n    return AppAdministrationNavComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'small',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeComponent } = await import('./edit-content-type.component');\r\n    return EditContentTypeComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const exportAppPartsDialog: DialogConfig = {\r\n  name: 'EXPORT_APP_PARTS',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ExportAppPartsComponent } = await import('./export-app-parts.component');\r\n    return ExportAppPartsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const exportAppDialog: DialogConfig = {\r\n  name: 'EXPORT_APP',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ExportAppComponent } = await import('./export-app.component');\r\n    return ExportAppComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importAppPartsDialog: DialogConfig = {\r\n  name: 'IMPORT_APP_PARTS',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportAppPartsComponent } = await import('./import-app-parts.component');\r\n    return ImportAppPartsComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportAppPartsDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importContentTypeDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportContentTypeComponent } = await import('./import-content-type.component');\r\n    return ImportContentTypeComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportContentTypeDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importQueryDialog: DialogConfig = {\r\n  name: 'IMPORT_QUERY_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportQueryComponent } = await import('./import-query.component');\r\n    return ImportQueryComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportQueryDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importViewDialog: DialogConfig = {\r\n  name: 'IMPORT_VIEW_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportViewComponent } = await import('./import-view.component');\r\n    return ImportViewComponent;\r\n  }\r\n};\r\n\r\nexport interface ImportViewDialogData {\r\n  files?: File[];\r\n}\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const viewsUsageDialog: DialogConfig = {\r\n  name: 'VIEWS_USAGE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ViewsUsageComponent } = await import('./views-usage.component');\r\n    return ViewsUsageComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit, refreshEdit } from '../../../../edit/edit.matcher';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { EmptyRouteComponent } from '../shared/components/empty-route/empty-route.component';\r\nimport { appAdministrationDialog } from './app-administration-nav/app-administration-dialog.config';\r\nimport { editContentTypeDialog } from './sub-dialogs/edit-content-type/edit-content-type-dialog.config';\r\nimport { exportAppPartsDialog } from './sub-dialogs/export-app-parts/export-app-parts-dialog.config';\r\nimport { exportAppDialog } from './sub-dialogs/export-app/export-app-dialog.config';\r\nimport { importAppPartsDialog } from './sub-dialogs/import-app-parts/import-app-parts-dialog.config';\r\nimport { importContentTypeDialog } from './sub-dialogs/import-content-type/import-content-type-dialog.config';\r\nimport { importQueryDialog } from './sub-dialogs/import-query/import-query-dialog.config';\r\nimport { importViewDialog } from './sub-dialogs/import-view/import-view-dialog.config';\r\nimport { viewsUsageDialog } from './sub-dialogs/views-usage/views-usage-dialog.config';\r\n\r\nconst appAdministrationRoutes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: appAdministrationDialog }, children: [\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n      { path: 'home', component: EmptyRouteComponent, data: { title: 'App Home' } },\r\n      {\r\n        path: 'data/:scope', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importContentTypeDialog, title: 'Import Content Type' },\r\n          },\r\n          {\r\n            path: 'items/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-items/content-items.module').then(m => m.ContentItemsModule)\r\n          },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule)\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          {\r\n            path: 'add',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: editContentTypeDialog, title: 'Add Content Type' },\r\n          },\r\n          {\r\n            path: ':contentTypeStaticName/edit',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: editContentTypeDialog, title: 'Edit Content Type' },\r\n          },\r\n          GoToDevRest.route,\r\n          {\r\n            path: 'fields/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-type-fields/content-type-fields.module').then(m => m.ContentTypeFieldsModule),\r\n            data: { title: 'Content Type Fields' },\r\n          },\r\n          {\r\n            path: 'export/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule),\r\n            data: { title: 'Export Items' },\r\n          },\r\n          {\r\n            path: ':contentTypeStaticName/import',\r\n            loadChildren: () => import('../content-import/content-import.module').then(m => m.ContentImportModule),\r\n            data: { title: 'Import Items' },\r\n          },\r\n          GoToPermissions.route,\r\n        ],\r\n        data: { title: 'App Data' },\r\n      },\r\n      {\r\n        path: 'queries', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importQueryDialog, title: 'Import Query' }\r\n          },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit Query Name and Description', history: false },\r\n          },\r\n          { ...GoToPermissions.route, data: { title: 'Query Permissions' } },\r\n          GoToDevRest.route,\r\n        ],\r\n        data: { title: 'App Queries' },\r\n      },\r\n      {\r\n        path: 'views', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importViewDialog, title: 'Import View' },\r\n          },\r\n          { path: 'usage/:guid', component: DialogEntryComponent, data: { dialog: viewsUsageDialog } },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit View' },\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          { ...GoToPermissions.route, data: { title: 'View Permissions' } },\r\n        ],\r\n        data: { title: 'App Views' },\r\n      },\r\n      {\r\n        path: 'web-api', component: EmptyRouteComponent, data: { title: 'App WebApi' }, children: [\r\n          GoToDevRest.route,\r\n        ],\r\n      },\r\n      {\r\n        path: 'app', component: EmptyRouteComponent, children: [\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit App Properties' },\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../../../../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          {\r\n            path: 'fields/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-type-fields/content-type-fields.module').then(m => m.ContentTypeFieldsModule),\r\n            data: { title: 'Edit Fields of App Settings & Resources' },\r\n          },\r\n          { ...GoToPermissions.route, data: { title: 'App Permissions' } },\r\n          { path: 'export', component: DialogEntryComponent, data: { dialog: exportAppDialog, title: 'Export App' } },\r\n          { path: 'export/parts', component: DialogEntryComponent, data: { dialog: exportAppPartsDialog, title: 'Export App Parts' } },\r\n          { path: 'import/parts', component: DialogEntryComponent, data: { dialog: importAppPartsDialog, title: 'Import App Parts' } },\r\n        ],\r\n        data: { title: 'Manage App' },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(appAdministrationRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppAdministrationRoutingModule { }\r\n","import { AgGridModule } from '@ag-grid-community/angular';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { EcoFabSpeedDialModule } from '@ecodev/fab-speed-dial';\r\nimport { AppsListService } from '../apps-management/services/apps-list.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { DataActionsComponent } from './ag-grid-components/data-actions/data-actions.component';\r\nimport { DataFieldsComponent } from './ag-grid-components/data-fields/data-fields.component';\r\nimport { DataItemsComponent } from './ag-grid-components/data-items/data-items.component';\r\nimport { QueriesActionsComponent } from './ag-grid-components/queries-actions/queries-actions.component';\r\nimport { ViewsActionsComponent } from './ag-grid-components/views-actions/views-actions.component';\r\nimport { ViewsShowComponent } from './ag-grid-components/views-show/views-show.component';\r\nimport { ViewsTypeComponent } from './ag-grid-components/views-type/views-type.component';\r\nimport { ViewsUsageIdComponent } from './ag-grid-components/views-usage-id/views-usage-id.component';\r\nimport { ViewsUsageStatusFilterComponent } from './ag-grid-components/views-usage-status-filter/views-usage-status-filter.component';\r\nimport { WebApiActionsComponent } from './ag-grid-components/web-api-actions/web-api-actions.component';\r\nimport { AppAdministrationNavComponent } from './app-administration-nav/app-administration-nav.component';\r\nimport { AppAdministrationRoutingModule } from './app-administration-routing.module';\r\nimport { AppConfigurationComponent } from './app-configuration/app-configuration.component';\r\nimport { DataComponent } from './data/data.component';\r\nimport { GettingStartedComponent } from './getting-started/getting-started.component';\r\nimport { QueriesComponent } from './queries/queries.component';\r\nimport { AppDialogConfigService } from './services/app-dialog-config.service';\r\nimport { ContentTypesService } from './services/content-types.service';\r\nimport { ExportAppPartsService } from './services/export-app-parts.service';\r\nimport { ExportAppService } from './services/export-app.service';\r\nimport { ImportAppPartsService } from './services/import-app-parts.service';\r\nimport { PipelinesService } from './services/pipelines.service';\r\nimport { ViewsService } from './services/views.service';\r\nimport { WebApisService } from './services/web-apis.service';\r\nimport { EditContentTypeComponent } from './sub-dialogs/edit-content-type/edit-content-type.component';\r\nimport { ExportAppPartsComponent } from './sub-dialogs/export-app-parts/export-app-parts.component';\r\nimport { ExportAppComponent } from './sub-dialogs/export-app/export-app.component';\r\nimport { ImportAppPartsComponent } from './sub-dialogs/import-app-parts/import-app-parts.component';\r\nimport { ImportContentTypeComponent } from './sub-dialogs/import-content-type/import-content-type.component';\r\nimport { ImportQueryComponent } from './sub-dialogs/import-query/import-query.component';\r\nimport { ImportViewComponent } from './sub-dialogs/import-view/import-view.component';\r\nimport { ViewsUsageComponent } from './sub-dialogs/views-usage/views-usage.component';\r\nimport { ViewsComponent } from './views/views.component';\r\nimport { WebApiComponent } from './web-api/web-api.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GettingStartedComponent,\r\n    AppAdministrationNavComponent,\r\n    DataComponent,\r\n    QueriesComponent,\r\n    ViewsComponent,\r\n    WebApiComponent,\r\n    AppConfigurationComponent,\r\n    DataItemsComponent,\r\n    DataFieldsComponent,\r\n    DataActionsComponent,\r\n    QueriesActionsComponent,\r\n    ViewsTypeComponent,\r\n    ViewsShowComponent,\r\n    ViewsActionsComponent,\r\n    EditContentTypeComponent,\r\n    ImportQueryComponent,\r\n    ExportAppComponent,\r\n    ExportAppPartsComponent,\r\n    ImportAppPartsComponent,\r\n    WebApiActionsComponent,\r\n    ViewsUsageComponent,\r\n    ViewsUsageIdComponent,\r\n    ViewsUsageStatusFilterComponent,\r\n    ImportContentTypeComponent,\r\n    ImportViewComponent,\r\n  ],\r\n  imports: [\r\n    AppAdministrationRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AgGridModule.withComponents([]),\r\n    MatTabsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatCheckboxModule,\r\n    MatExpansionModule,\r\n    MatCardModule,\r\n    MatRippleModule,\r\n    EcoFabSpeedDialModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n    PipelinesService,\r\n    ViewsService,\r\n    ContentExportService,\r\n    WebApisService,\r\n    ContentItemsService,\r\n    ExportAppService,\r\n    ExportAppPartsService,\r\n    ImportAppPartsService,\r\n    DialogService,\r\n    AppsListService,\r\n  ]\r\n})\r\nexport class AppAdministrationModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}