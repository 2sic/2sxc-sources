{"version":3,"file":"default-projects_eav-ui_src_app_import-app_services_import-app_service_ts-node_modules_angula-fa40b3.4e98200dd29e3531.js","mappings":"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","names":["webApiAppRoot","ImportAppService","constructor","http","context","dnnContext","this","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","post","$2sxc","apiUrl","params","zoneId","toString","pipe","switchMap","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_4__","jDH","factory","ɵfac","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","selectors","standalone","features","decls","vars","template","rf","ctx","styles","encapsulation","changeDetection","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","None","HasDecoratorInputTransform","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule","_c0","_c1","EcoFabSpeedDialActionsComponent_ng_content_0_Template","_c2","_c3","_c4","_c5","getHostElement","button","EcoFabSpeedDialActionsComponent","injector","renderer","miniFabVisible","hideMiniFab","_parent","get","EcoFabSpeedDialComponent","ngAfterContentInit","_buttons","changes","subscribe","initButtonStates","setActionsVisibility","forEach","i","addClass","changeElementStyle","show","resetAnimationState","showMiniFabAnimation","setTimeout","transform","transitionDelay","animationMode","getTranslateFunction","hostElement","clearTimeout","unsubscribe","hide","obs","map","opacity","fromEvent","take","forkJoin","dir","direction","elem","style","setStyle","contentQueries","dirIndex","MatMiniFabButton","_t","ngContentSelectors","consts","dependencies","CommonModule","fixed","_fixed","_processOutsideClickState","open","_open","previousOpen","openChange","emit","isInitialized","_direction","previousDirection","_setElementClass","previousAnimationMode","Promise","resolve","then","elementRef","document","_documentClickUnlistener","EventEmitter","_unsetDocumentClickListener","toggle","_onClick","_childActions","elemClass","isAdd","finalClass","removeClass","_setDocumentClickListener","listen","first","outputs","EcoFabSpeedDialTriggerComponent","sp","spin","event","stopPropagation","$event"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./node_modules/@ecodev/fab-speed-dial/fesm2022/ecodev-fab-speed-dial.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","import * as i0 from '@angular/core';\nimport { Component, ContentChildren, EventEmitter, ViewEncapsulation, Inject, Input, HostBinding, Output, ContentChild, HostListener, NgModule } from '@angular/core';\nimport { MatMiniFabButton } from '@angular/material/button';\nimport * as i1 from '@angular/common';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { fromEvent, forkJoin } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst Z_INDEX_ITEM = 23;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getHostElement(button) {\n    return button._elementRef.nativeElement;\n}\nclass EcoFabSpeedDialActionsComponent {\n    constructor(injector, renderer) {\n        this.renderer = renderer;\n        /**\n         * Whether the min-fab button exist in DOM\n         */\n        this.miniFabVisible = false;\n        /**\n         * When we will remove mini-fab buttons from DOM, after the animation is complete\n         */\n        this.hideMiniFab = null;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    ngAfterContentInit() {\n        this._buttons.changes.subscribe(() => {\n            this.initButtonStates();\n            this._parent.setActionsVisibility();\n        });\n        this.initButtonStates();\n    }\n    initButtonStates() {\n        this._buttons.forEach((button, i) => {\n            this.renderer.addClass(getHostElement(button), 'eco-fab-action-item');\n            this.changeElementStyle(getHostElement(button), 'z-index', '' + (Z_INDEX_ITEM - i));\n        });\n    }\n    show() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n        this.showMiniFabAnimation = setTimeout(() => {\n            this._buttons.forEach((button, i) => {\n                let transitionDelay = 0;\n                let transform;\n                if (this._parent.animationMode === 'scale') {\n                    // Incremental transition delay of 65ms for each action button\n                    transitionDelay = 3 + 65 * i;\n                    transform = 'scale(1)';\n                }\n                else {\n                    transform = this.getTranslateFunction('0');\n                }\n                const hostElement = getHostElement(button);\n                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n                this.changeElementStyle(hostElement, 'opacity', '1');\n                this.changeElementStyle(hostElement, 'transform', transform);\n            });\n        }, 50); // Be sure that *ngIf can show elements before trying to animate them\n    }\n    resetAnimationState() {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n    hide() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        const obs = this._buttons.map((button, i) => {\n            let opacity = '1';\n            let transitionDelay = 0;\n            let transform;\n            if (this._parent.animationMode === 'scale') {\n                transitionDelay = 3 - 65 * i;\n                transform = 'scale(0)';\n                opacity = '0';\n            }\n            else {\n                transform = this.getTranslateFunction(55 * (i + 1) - i * 5 + 'px');\n            }\n            const hostElement = getHostElement(button);\n            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n            this.changeElementStyle(hostElement, 'opacity', opacity);\n            this.changeElementStyle(hostElement, 'transform', transform);\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n        // Wait for all animation to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => (this.miniFabVisible = false));\n    }\n    getTranslateFunction(value) {\n        const dir = this._parent.direction;\n        const translateFn = dir === 'up' || dir === 'down' ? 'translateY' : 'translateX';\n        const sign = dir === 'down' || dir === 'right' ? '-' : '';\n        return translateFn + '(' + sign + value + ')';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    changeElementStyle(elem, style, value) {\n        // FIXME - Find a way to create a \"wrapper\" around the action button(s) provided by the user, so we don't change it's style tag\n        this.renderer.setStyle(elem, style, value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, deps: [{ token: i0.Injector }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialActionsComponent, isStandalone: true, selector: \"eco-fab-speed-dial-actions\", queries: [{ propertyName: \"_buttons\", predicate: MatMiniFabButton }], ngImport: i0, template: ` <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`, isInline: true, dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-actions',\n                    template: ` <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`,\n                    standalone: true,\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.Renderer2 }]; }, propDecorators: { _buttons: [{\n                type: ContentChildren,\n                args: [MatMiniFabButton]\n            }] } });\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\nclass EcoFabSpeedDialComponent {\n    /**\n     * Whether this speed dial is fixed on screen (user cannot change it by clicking)\n     */\n    get fixed() {\n        return this._fixed;\n    }\n    set fixed(fixed) {\n        this._fixed = fixed;\n        this._processOutsideClickState();\n    }\n    /**\n     * Whether this speed dial is opened\n     */\n    get open() {\n        return this._open;\n    }\n    set open(open) {\n        const previousOpen = this._open;\n        this._open = open;\n        if (previousOpen !== this._open) {\n            this.openChange.emit(this._open);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        const previousDirection = this._direction;\n        this._direction = direction;\n        if (previousDirection !== this.direction) {\n            this._setElementClass(previousDirection, false);\n            this._setElementClass(this.direction, true);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The animation mode to open the speed dial. Can be 'fling' or 'scale'\n     */\n    get animationMode() {\n        return this._animationMode;\n    }\n    set animationMode(animationMode) {\n        const previousAnimationMode = this._animationMode;\n        this._animationMode = animationMode;\n        if (previousAnimationMode !== this._animationMode) {\n            this._setElementClass(previousAnimationMode, false);\n            this._setElementClass(this.animationMode, true);\n            if (this.isInitialized) {\n                // To start another detect lifecycle and force the \"close\" on the action buttons\n                Promise.resolve(null).then(() => (this.open = false));\n            }\n        }\n    }\n    constructor(elementRef, renderer, document) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.document = document;\n        this.isInitialized = false;\n        this._direction = 'up';\n        this._open = false;\n        this._animationMode = 'fling';\n        this._fixed = false;\n        this._documentClickUnlistener = null;\n        this.openChange = new EventEmitter();\n    }\n    ngAfterContentInit() {\n        this.isInitialized = true;\n        this.setActionsVisibility();\n        this._setElementClass(this.direction, true);\n        this._setElementClass(this.animationMode, true);\n    }\n    ngOnDestroy() {\n        this._unsetDocumentClickListener();\n    }\n    /**\n     * Toggle the open state of this speed dial\n     */\n    toggle() {\n        this.open = !this.open;\n    }\n    _onClick() {\n        if (!this.fixed && this.open) {\n            this.open = false;\n        }\n    }\n    setActionsVisibility() {\n        if (!this._childActions) {\n            return;\n        }\n        if (this.open) {\n            this._childActions.show();\n        }\n        else {\n            this._childActions.hide();\n        }\n        this._processOutsideClickState();\n    }\n    _setElementClass(elemClass, isAdd) {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n    _processOutsideClickState() {\n        if (!this.fixed && this.open) {\n            this._setDocumentClickListener();\n        }\n        else {\n            this._unsetDocumentClickListener();\n        }\n    }\n    _setDocumentClickListener() {\n        if (!this._documentClickUnlistener) {\n            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open = false;\n            });\n        }\n    }\n    _unsetDocumentClickListener() {\n        if (this._documentClickUnlistener) {\n            this._documentClickUnlistener();\n            this._documentClickUnlistener = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialComponent, isStandalone: true, selector: \"eco-fab-speed-dial\", inputs: { fixed: \"fixed\", open: \"open\", direction: \"direction\", animationMode: \"animationMode\" }, outputs: { openChange: \"openChange\" }, host: { listeners: { \"click\": \"_onClick()\" }, properties: { \"class.eco-opened\": \"this.open\" } }, queries: [{ propertyName: \"_childActions\", first: true, predicate: EcoFabSpeedDialActionsComponent, descendants: true }], ngImport: i0, template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `, isInline: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'eco-fab-speed-dial', template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `, encapsulation: ViewEncapsulation.None, standalone: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { fixed: [{\n                type: Input\n            }], open: [{\n                type: HostBinding,\n                args: ['class.eco-opened']\n            }, {\n                type: Input\n            }], direction: [{\n                type: Input\n            }], animationMode: [{\n                type: Input\n            }], openChange: [{\n                type: Output\n            }], _childActions: [{\n                type: ContentChild,\n                args: [EcoFabSpeedDialActionsComponent]\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\nclass EcoFabSpeedDialTriggerComponent {\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    get sp() {\n        return this.spin;\n    }\n    constructor(injector) {\n        this.spin = false;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    _onClick(event) {\n        if (!this._parent.fixed) {\n            this._parent.toggle();\n            event.stopPropagation();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialTriggerComponent, isStandalone: true, selector: \"eco-fab-speed-dial-trigger\", inputs: { spin: \"spin\" }, host: { listeners: { \"click\": \"_onClick($event)\" }, properties: { \"class.eco-spin\": \"this.sp\" } }, ngImport: i0, template: ` <ng-content select=\"[mat-fab]\"></ng-content>`, isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-trigger',\n                    template: ` <ng-content select=\"[mat-fab]\"></ng-content>`,\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; }, propDecorators: { sp: [{\n                type: HostBinding,\n                args: ['class.eco-spin']\n            }], spin: [{\n                type: Input\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\nconst components = [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent];\nclass EcoFabSpeedDialModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, imports: [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent], exports: [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, imports: [EcoFabSpeedDialActionsComponent] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: components,\n                    exports: components,\n                }]\n        }] });\n\n/*\n * Public API Surface of fab-speed-dial\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialModule, EcoFabSpeedDialTriggerComponent };\n"],"x_google_ignoreList":[1,2]}