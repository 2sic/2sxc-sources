{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.49980cc4de5b1118.js","mappings":"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","names":["logSpecs","getAll","getAllSig","ContentItemsService","HttpServiceBase","constructor","this","log","classLog","contentTypeStaticName","fnIf","getHttpApiUrl","webApiEntityList","params","appId","contentType","initial","getSignal","getColumns","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","http","post","apiUrl","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","__ngFactoryType__","factory","ɵfac","AgGridHelper","cellLink","link","body","classes","i0","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","input","isShort","toggleIsShort","selectors","inputs","ngContentSelectors","_c0","decls","vars","consts","template","rf","ctx","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","i1","NgClass","NgTemplateOutlet","styles","RxHelpers","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","Object","keys","keys2","length","every","key1","hasOwnProperty","arraysEqual","item","index","distinct","value","array","indexOf","ToggleDebugDirective","globalConfigService","onClick","event","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","hostBindings","$event","dropdownInsertValue","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","type","encapsulation","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","_color","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","hostAttrs","hostVars","booleanAttribute","MatBadgeModule","imports","A11yModule","MatCommonModule","EntityEditService","create","entity","zoneId","update","entityId","delete","id","tryForce","toString","force","EntityFilterComponent","filter","idFilterString","idFilter","agInit","filterParams","isFilterActive","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","viewQuery","FormsModule","MatRadioModule","i2","MatInputModule","i3","_r2","ctx_r2","do","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","ctx_r0","entities","ContentItemsEntityComponent","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","metadataCount","metadata","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseComponent","dialog","super","hostClass","contentItemsService","transient","contentTypesService","ContentTypesService","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","updatedForm","isAppMetadata","app","UiControl","disable","viewModel$","hint","complete","result","close","checked","target","scope","retrieveContentTypes","getScopes","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","ctx_r1","debugFilter","all","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","isDebug","GlobalConfigService","ContentExportService","DialogRoutingService","gridOptions","defaultGridOptions","onFilterChanged","_","#filterChanged","v","signal","#refresh","#gridApiSig","#contentTypeStaticName","getParam","getTypeSig","#itemsRaw","computed","aIf","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","doOnDialogClosed","fetchItems","onGridReady","set","fetchColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","filterTo","JsonHelpers","tryParse","sessionStorage","getItem","keyFilters","setColumnDefs","a","setFilterModel","url","urlSubRoute","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","navRelative","#urlToOpenEditView","urlToNewItem","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","f","state","urlToImportItem","createMetadata","open","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","export","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","SxcGridModule","mapUntilChanged","fn","isEqual","ServiceBase","router","route","snapshot","urlSegments","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","childDialogClosed$","end","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","stopPropagation"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts"],"sourcesContent":["import { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\nconst logSpecs = {\r\n  getAll: true,\r\n  getAllSig: true,\r\n}\r\n\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBase {\r\n\r\n  log = classLog({ ContentItemsService }, logSpecs);\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    this.log.fnIf('getAll', { contentTypeStaticName });\r\n    return this.getHttpApiUrl<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentTypeStaticName: string, initial: undefined): Signal<ContentItem[]> {\r\n    this.log.fnIf('getAllSig', { contentTypeStaticName, initial });\r\n    return this.getSignal<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    }, initial);\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { MatCommonModule } from '@angular/material/core';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n    selector: 'app-entity-filter',\r\n    templateUrl: './entity-filter.component.html',\r\n    styleUrls: ['./entity-filter.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatRadioModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n    selector: 'app-data-bundle-actions',\r\n    templateUrl: './content-items-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-items-entity',\r\n    templateUrl: './content-items-entity.component.html',\r\n    styleUrls: ['./content-items-entity.component.scss'],\r\n    imports: [TippyDirective,]\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n    selector: 'app-content-items-status',\r\n    templateUrl: './content-items-status.component.html',\r\n    styleUrls: ['./content-items-status.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        MatRippleModule,\r\n        NgClass,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle\r\n        color=\"accent\"\r\n        [tippy]=\"\r\n          vm.guidedMode\r\n            ? 'Guided mode helps you select options that work'\r\n            : 'Manual mode is for advanced uses and allows you to insert any values'\r\n        \"\r\n        [checked]=\"vm.guidedMode\"\r\n        (change)=\"toggleGuidedMode($event)\"\r\n      >\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n    selector: 'app-create-metadata-dialog',\r\n    templateUrl: './create-metadata-dialog.component.html',\r\n    imports: [\r\n        FormsModule,\r\n        ReactiveFormsModule,\r\n        MatFormFieldModule,\r\n        MatSelectModule,\r\n        MatOptionModule,\r\n        MatInputModule,\r\n        NgTemplateOutlet,\r\n        MatButtonModule,\r\n        NgClass,\r\n        MatIconModule,\r\n        MatDialogActions,\r\n        MatSlideToggleModule,\r\n        AsyncPipe,\r\n        FieldHintComponent,\r\n        ClickStopPropagationDirective,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    imports: [\r\n        MatRadioModule,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n      <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material\"\r\n        [rowData]=\"items()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </a>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Print filter to console\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"debugFilter()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n          <span>Filter</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  items: true,\r\n}\r\n\r\n@Component({\r\n    selector: 'app-content-items',\r\n    templateUrl: './content-items.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        MatIconModule,\r\n        RouterOutlet,\r\n        MatDialogActions,\r\n        SafeHtmlPipe,\r\n        DragAndDropDirective,\r\n        ToggleDebugDirective,\r\n        SxcGridModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent }, logSpecs);\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  /** Signal to trigger reloading of data */\r\n  #refresh = signal(0);\r\n\r\n  #gridApiSig: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.getTypeSig(this.#contentTypeStaticName,  /* initial: */ null);\r\n\r\n  #itemsRaw = computed(() => {\r\n    this.#refresh();  // watch for refresh\r\n    return this.#contentItemsSvc.getAllSig(this.#contentTypeStaticName, undefined);\r\n  });\r\n\r\n  items = computed(() => {\r\n    const data = this.#itemsRaw()();\r\n    this.log.aIf('items', {data});\r\n    return data;\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSig.set(params.api);\r\n    this.fetchColumns();\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#refresh.update(value => value + 1)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSig())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSig().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSig().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSig();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSig().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data._Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[7]}