{"version":3,"file":"default-projects_eav-ui_src_app_features_shared_base-feature_component_ts-node_modules_angula-dc462d.1ba55827712594e5.js","mappings":"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","names":["FeatureDetailService","constructor","http","dnnContext","this","getFeatureDetails","featureNameId","get","$2sxc","apiUrl","webApiRoot","params","nameId","static","t","i0","i1","i2","_angular_core__WEBPACK_IMPORTED_MODULE_0__","jDH","factory","ɵfac","id_r3","_r2","ctx_r3","copyToClipboard","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","feature_r5","_r1","findOutMore","link","closeDialog","name","description","isEnabled","tmp_6_0","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","viewModel$","text","open","duration","window","close","MAT_DIALOG_DATA","i3","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","FeatureInfoDialogComponent_Conditional_0_Template","tmp_0_0","MatCardModule","i4","MatButtonModule","i5","MatIconModule","i6","AsyncPipe","TranslateModule","i7","TippyDirective","SafeHtmlPipe","FeatureComponentProviders","FeatureComponentBase","value","featureNameId$","next","showIf","showIf$","BehaviorSubject","dialog","inject","MatDialog","viewContainerRef","ViewContainerRef","changeDetectorRef","ChangeDetectorRef","featuresService","FeaturesService","feature$","pipe","switchMap","featName","get$","show$","combineLatest","map","feat","openDialog","openFeatureDialog","FsC","inputs","featureId","autoFocus","data","width","markForCheck","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","styles","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","delete","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","None","HasDecoratorInputTransform","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","imports","A11yModule","MatCommonModule","_c0","_c1","EcoFabSpeedDialActionsComponent_ng_content_0_Template","_c2","_c3","_c4","_c5","getHostElement","button","EcoFabSpeedDialActionsComponent","injector","renderer","miniFabVisible","hideMiniFab","_parent","EcoFabSpeedDialComponent","ngAfterContentInit","_buttons","changes","subscribe","initButtonStates","setActionsVisibility","forEach","i","addClass","changeElementStyle","show","resetAnimationState","showMiniFabAnimation","setTimeout","transform","transitionDelay","animationMode","getTranslateFunction","hostElement","clearTimeout","unsubscribe","hide","obs","opacity","fromEvent","take","forkJoin","dir","direction","elem","style","setStyle","contentQueries","dirIndex","MatMiniFabButton","_t","ngContentSelectors","dependencies","CommonModule","fixed","_fixed","_processOutsideClickState","_open","previousOpen","openChange","emit","isInitialized","_direction","previousDirection","_setElementClass","previousAnimationMode","Promise","resolve","then","elementRef","document","_documentClickUnlistener","EventEmitter","_unsetDocumentClickListener","toggle","_onClick","_childActions","elemClass","isAdd","finalClass","removeClass","_setDocumentClickListener","listen","first","outputs","EcoFabSpeedDialTriggerComponent","sp","spin","event","stopPropagation","$event"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs","./node_modules/@ecodev/fab-speed-dial/fesm2022/ecodev-fab-speed-dial.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","@if (viewModel$ | async; as feature) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ feature.name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"feature.description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (feature.isEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (feature.nameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      <button mat-raised-button color=\"accent\"\r\n        class=\"eav-card-action-button\" (click)=\"findOutMore(feature.link)\">\r\n        <mat-icon>open_in_new</mat-icon>\r\n        {{ \"Features.FindOutMore\" | translate }}\r\n      </button>\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SafeHtmlPipe } from '../../shared/pipes/safe-html.pipe';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    AsyncPipe,\r\n    TranslateModule,\r\n    TippyDirective,\r\n    SafeHtmlPipe,\r\n  ]\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<Feature>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = this.featureDetailService.getFeatureDetails(this.dialogData);\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void {\r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Directive, Input, ViewContainerRef, inject } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\nexport const FeatureComponentProviders = [\r\n  FeatureDetailService,\r\n];\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  private dialog = inject(MatDialog);\r\n  private viewContainerRef = inject(ViewContainerRef);\r\n  private changeDetectorRef = inject(ChangeDetectorRef);\r\n  protected featuresService = inject(FeaturesService);\r\n\r\n  constructor() {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.isEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    openFeatureDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n}\r\n\r\n\r\nexport function openFeatureDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n  dialog.open(FeatureInfoDialogComponent, {\r\n    autoFocus: false,\r\n    data: featureId,\r\n    viewContainerRef: viewContainerRef,\r\n    width: '400px',\r\n  });\r\n\r\n  changeDetectorRef.markForCheck();\r\n}","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n","import * as i0 from '@angular/core';\nimport { Component, ContentChildren, EventEmitter, ViewEncapsulation, Inject, Input, HostBinding, Output, ContentChild, HostListener, NgModule } from '@angular/core';\nimport { MatMiniFabButton } from '@angular/material/button';\nimport * as i1 from '@angular/common';\nimport { CommonModule, DOCUMENT } from '@angular/common';\nimport { fromEvent, forkJoin } from 'rxjs';\nimport { take } from 'rxjs/operators';\n\nconst Z_INDEX_ITEM = 23;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction getHostElement(button) {\n    return button._elementRef.nativeElement;\n}\nclass EcoFabSpeedDialActionsComponent {\n    constructor(injector, renderer) {\n        this.renderer = renderer;\n        /**\n         * Whether the min-fab button exist in DOM\n         */\n        this.miniFabVisible = false;\n        /**\n         * When we will remove mini-fab buttons from DOM, after the animation is complete\n         */\n        this.hideMiniFab = null;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    ngAfterContentInit() {\n        this._buttons.changes.subscribe(() => {\n            this.initButtonStates();\n            this._parent.setActionsVisibility();\n        });\n        this.initButtonStates();\n    }\n    initButtonStates() {\n        this._buttons.forEach((button, i) => {\n            this.renderer.addClass(getHostElement(button), 'eco-fab-action-item');\n            this.changeElementStyle(getHostElement(button), 'z-index', '' + (Z_INDEX_ITEM - i));\n        });\n    }\n    show() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        this.miniFabVisible = true;\n        this.showMiniFabAnimation = setTimeout(() => {\n            this._buttons.forEach((button, i) => {\n                let transitionDelay = 0;\n                let transform;\n                if (this._parent.animationMode === 'scale') {\n                    // Incremental transition delay of 65ms for each action button\n                    transitionDelay = 3 + 65 * i;\n                    transform = 'scale(1)';\n                }\n                else {\n                    transform = this.getTranslateFunction('0');\n                }\n                const hostElement = getHostElement(button);\n                this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n                this.changeElementStyle(hostElement, 'opacity', '1');\n                this.changeElementStyle(hostElement, 'transform', transform);\n            });\n        }, 50); // Be sure that *ngIf can show elements before trying to animate them\n    }\n    resetAnimationState() {\n        clearTimeout(this.showMiniFabAnimation);\n        if (this.hideMiniFab) {\n            this.hideMiniFab.unsubscribe();\n            this.hideMiniFab = null;\n        }\n    }\n    hide() {\n        if (!this._buttons) {\n            return;\n        }\n        this.resetAnimationState();\n        const obs = this._buttons.map((button, i) => {\n            let opacity = '1';\n            let transitionDelay = 0;\n            let transform;\n            if (this._parent.animationMode === 'scale') {\n                transitionDelay = 3 - 65 * i;\n                transform = 'scale(0)';\n                opacity = '0';\n            }\n            else {\n                transform = this.getTranslateFunction(55 * (i + 1) - i * 5 + 'px');\n            }\n            const hostElement = getHostElement(button);\n            this.changeElementStyle(hostElement, 'transition-delay', transitionDelay + 'ms');\n            this.changeElementStyle(hostElement, 'opacity', opacity);\n            this.changeElementStyle(hostElement, 'transform', transform);\n            return fromEvent(hostElement, 'transitionend').pipe(take(1));\n        });\n        // Wait for all animation to finish, then destroy their elements\n        this.hideMiniFab = forkJoin(obs).subscribe(() => (this.miniFabVisible = false));\n    }\n    getTranslateFunction(value) {\n        const dir = this._parent.direction;\n        const translateFn = dir === 'up' || dir === 'down' ? 'translateY' : 'translateX';\n        const sign = dir === 'down' || dir === 'right' ? '-' : '';\n        return translateFn + '(' + sign + value + ')';\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    changeElementStyle(elem, style, value) {\n        // FIXME - Find a way to create a \"wrapper\" around the action button(s) provided by the user, so we don't change it's style tag\n        this.renderer.setStyle(elem, style, value);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, deps: [{ token: i0.Injector }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialActionsComponent, isStandalone: true, selector: \"eco-fab-speed-dial-actions\", queries: [{ propertyName: \"_buttons\", predicate: MatMiniFabButton }], ngImport: i0, template: ` <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`, isInline: true, dependencies: [{ kind: \"ngmodule\", type: CommonModule }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialActionsComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-actions',\n                    template: ` <ng-content select=\"[mat-mini-fab]\" *ngIf=\"miniFabVisible\"></ng-content>`,\n                    standalone: true,\n                    imports: [CommonModule],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.Renderer2 }]; }, propDecorators: { _buttons: [{\n                type: ContentChildren,\n                args: [MatMiniFabButton]\n            }] } });\n/** @dynamic @see https://github.com/angular/angular/issues/20351#issuecomment-344009887 */\nclass EcoFabSpeedDialComponent {\n    /**\n     * Whether this speed dial is fixed on screen (user cannot change it by clicking)\n     */\n    get fixed() {\n        return this._fixed;\n    }\n    set fixed(fixed) {\n        this._fixed = fixed;\n        this._processOutsideClickState();\n    }\n    /**\n     * Whether this speed dial is opened\n     */\n    get open() {\n        return this._open;\n    }\n    set open(open) {\n        const previousOpen = this._open;\n        this._open = open;\n        if (previousOpen !== this._open) {\n            this.openChange.emit(this._open);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The direction of the speed dial. Can be 'up', 'down', 'left' or 'right'\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(direction) {\n        const previousDirection = this._direction;\n        this._direction = direction;\n        if (previousDirection !== this.direction) {\n            this._setElementClass(previousDirection, false);\n            this._setElementClass(this.direction, true);\n            if (this.isInitialized) {\n                this.setActionsVisibility();\n            }\n        }\n    }\n    /**\n     * The animation mode to open the speed dial. Can be 'fling' or 'scale'\n     */\n    get animationMode() {\n        return this._animationMode;\n    }\n    set animationMode(animationMode) {\n        const previousAnimationMode = this._animationMode;\n        this._animationMode = animationMode;\n        if (previousAnimationMode !== this._animationMode) {\n            this._setElementClass(previousAnimationMode, false);\n            this._setElementClass(this.animationMode, true);\n            if (this.isInitialized) {\n                // To start another detect lifecycle and force the \"close\" on the action buttons\n                Promise.resolve(null).then(() => (this.open = false));\n            }\n        }\n    }\n    constructor(elementRef, renderer, document) {\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.document = document;\n        this.isInitialized = false;\n        this._direction = 'up';\n        this._open = false;\n        this._animationMode = 'fling';\n        this._fixed = false;\n        this._documentClickUnlistener = null;\n        this.openChange = new EventEmitter();\n    }\n    ngAfterContentInit() {\n        this.isInitialized = true;\n        this.setActionsVisibility();\n        this._setElementClass(this.direction, true);\n        this._setElementClass(this.animationMode, true);\n    }\n    ngOnDestroy() {\n        this._unsetDocumentClickListener();\n    }\n    /**\n     * Toggle the open state of this speed dial\n     */\n    toggle() {\n        this.open = !this.open;\n    }\n    _onClick() {\n        if (!this.fixed && this.open) {\n            this.open = false;\n        }\n    }\n    setActionsVisibility() {\n        if (!this._childActions) {\n            return;\n        }\n        if (this.open) {\n            this._childActions.show();\n        }\n        else {\n            this._childActions.hide();\n        }\n        this._processOutsideClickState();\n    }\n    _setElementClass(elemClass, isAdd) {\n        const finalClass = `eco-${elemClass}`;\n        if (isAdd) {\n            this.renderer.addClass(this.elementRef.nativeElement, finalClass);\n        }\n        else {\n            this.renderer.removeClass(this.elementRef.nativeElement, finalClass);\n        }\n    }\n    _processOutsideClickState() {\n        if (!this.fixed && this.open) {\n            this._setDocumentClickListener();\n        }\n        else {\n            this._unsetDocumentClickListener();\n        }\n    }\n    _setDocumentClickListener() {\n        if (!this._documentClickUnlistener) {\n            this._documentClickUnlistener = this.renderer.listen(this.document, 'click', () => {\n                this.open = false;\n            });\n        }\n    }\n    _unsetDocumentClickListener() {\n        if (this._documentClickUnlistener) {\n            this._documentClickUnlistener();\n            this._documentClickUnlistener = null;\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialComponent, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialComponent, isStandalone: true, selector: \"eco-fab-speed-dial\", inputs: { fixed: \"fixed\", open: \"open\", direction: \"direction\", animationMode: \"animationMode\" }, outputs: { openChange: \"openChange\" }, host: { listeners: { \"click\": \"_onClick()\" }, properties: { \"class.eco-opened\": \"this.open\" } }, queries: [{ propertyName: \"_childActions\", first: true, predicate: EcoFabSpeedDialActionsComponent, descendants: true }], ngImport: i0, template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `, isInline: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"], encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'eco-fab-speed-dial', template: `\n        <div class=\"eco-fab-speed-dial-container\">\n            <ng-content select=\"eco-fab-speed-dial-trigger\"></ng-content>\n            <ng-content select=\"eco-fab-speed-dial-actions\"></ng-content>\n        </div>\n    `, encapsulation: ViewEncapsulation.None, standalone: true, styles: [\"eco-fab-speed-dial{display:inline-block}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180{transform:rotate(180deg)}eco-fab-speed-dial.eco-opened .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transform:rotate(360deg)}eco-fab-speed-dial .eco-fab-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{pointer-events:auto;z-index:24}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin180,eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-trigger.eco-spin .spin360{transition:all .6s cubic-bezier(.4,0,.2,1)}eco-fab-speed-dial .eco-fab-speed-dial-container eco-fab-speed-dial-actions{display:flex;position:absolute;height:0;width:0}eco-fab-speed-dial.eco-fling .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{display:block;opacity:1;transition:all .3s cubic-bezier(.55,0,.55,.2)}eco-fab-speed-dial.eco-scale .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{transform:scale(0);transition:all .3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}eco-fab-speed-dial.eco-down eco-fab-speed-dial-actions{bottom:2px;left:7px}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column;order:2}eco-fab-speed-dial.eco-down .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-top:10px}eco-fab-speed-dial.eco-up eco-fab-speed-dial-actions{top:2px;left:7px}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container{flex-direction:column}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:column-reverse;order:1}eco-fab-speed-dial.eco-up .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-bottom:10px}eco-fab-speed-dial.eco-left eco-fab-speed-dial-actions{top:7px;left:2px}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:2}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row-reverse;order:1}eco-fab-speed-dial.eco-left .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-right:10px}eco-fab-speed-dial.eco-right eco-fab-speed-dial-actions{top:7px;right:2px}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container{flex-direction:row}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-trigger{order:1}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions{flex-direction:row;order:2}eco-fab-speed-dial.eco-right .eco-fab-speed-dial-container eco-fab-speed-dial-actions .eco-fab-action-item{margin-left:10px}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: Document, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { fixed: [{\n                type: Input\n            }], open: [{\n                type: HostBinding,\n                args: ['class.eco-opened']\n            }, {\n                type: Input\n            }], direction: [{\n                type: Input\n            }], animationMode: [{\n                type: Input\n            }], openChange: [{\n                type: Output\n            }], _childActions: [{\n                type: ContentChild,\n                args: [EcoFabSpeedDialActionsComponent]\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click']\n            }] } });\nclass EcoFabSpeedDialTriggerComponent {\n    /**\n     * Whether this trigger should spin (360dg) while opening the speed dial\n     */\n    get sp() {\n        return this.spin;\n    }\n    constructor(injector) {\n        this.spin = false;\n        this._parent = injector.get(EcoFabSpeedDialComponent);\n    }\n    _onClick(event) {\n        if (!this._parent.fixed) {\n            this._parent.toggle();\n            event.stopPropagation();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.1.2\", type: EcoFabSpeedDialTriggerComponent, isStandalone: true, selector: \"eco-fab-speed-dial-trigger\", inputs: { spin: \"spin\" }, host: { listeners: { \"click\": \"_onClick($event)\" }, properties: { \"class.eco-spin\": \"this.sp\" } }, ngImport: i0, template: ` <ng-content select=\"[mat-fab]\"></ng-content>`, isInline: true }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialTriggerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'eco-fab-speed-dial-trigger',\n                    template: ` <ng-content select=\"[mat-fab]\"></ng-content>`,\n                    standalone: true,\n                }]\n        }], ctorParameters: function () { return [{ type: i0.Injector }]; }, propDecorators: { sp: [{\n                type: HostBinding,\n                args: ['class.eco-spin']\n            }], spin: [{\n                type: Input\n            }], _onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }] } });\n\nconst components = [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent];\nclass EcoFabSpeedDialModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, imports: [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent], exports: [EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialTriggerComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, imports: [EcoFabSpeedDialActionsComponent] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.2\", ngImport: i0, type: EcoFabSpeedDialModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: components,\n                    exports: components,\n                }]\n        }] });\n\n/*\n * Public API Surface of fab-speed-dial\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EcoFabSpeedDialActionsComponent, EcoFabSpeedDialComponent, EcoFabSpeedDialModule, EcoFabSpeedDialTriggerComponent };\n"],"x_google_ignoreList":[4,5]}