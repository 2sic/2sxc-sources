{"version":3,"file":"projects_eav-ui_src_app_content-export_content-export_component_ts-projects_eav-ui_src_app_sh-5eade4.51a9ecce9f27242e.js","mappings":"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","names":["AppDialogConfigService","ServiceBase","constructor","http","context","globalConfigService","featuresService","super","EavLogger","this","dialogSettings$","log","a","svcId","loadFromService","ngOnDestroy","destroy","getCurrent$","appId","getShared$","getSitePrimaryApp$","pipe","map","dc","Context","Site","PrimaryApp","getGlobalPrimaryApp$","System","getDialogSettings","shareReplay","refCount","reqBy","get","params","toString","dlgSettings","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","static","t","i0","i1","i2","i3","i4","_angular_core__WEBPACK_IMPORTED_MODULE_8__","jDH","factory","ɵfac","webApiTypeRoot","webApiTypeScopes","ContentTypesService","dnnContext","apiUrl","name","$2sxc","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","_angular_core__WEBPACK_IMPORTED_MODULE_2__","lang_r3","NameId","ctx_r1","itemIds","length","$event","_r1","formValues","ContentExportComponent_Conditional_5_For_17_Template","recordExport","ContentExportComponent_Conditional_5_Conditional_26_Template","languageReferences","resourcesReferences","closeDialog","exportContent","languages","hasIdList","ngForm_r4","form","valid","ContentExportComponent","dialogRef","route","hostClass","contentExportService","transient","ContentExportService","contentTypesService","appDialogConfigService","loading$","BehaviorSubject","contentType$","contentTypeStaticName","snapshot","paramMap","selectedIds","split","id","parseInt","ngOnInit","next","forkJoin","subscribe","dialogSettings","defaultLanguage","Primary","complete","close","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","hostVars","hostBindings","rf","ctx","ContentExportComponent_Conditional_5_Template","tmp_0_0","Name","FormsModule","MatFormFieldModule","MatSelectModule","i5","i6","MatOptionModule","MatRadioModule","i7","MatDialogActions","MatButtonModule","i8","AsyncPipe","styles","SignalHelpers","boolEquals","equal","RxHelpers","valueEquals","numberEquals","stringEquals","objectEquals","objectsEqual","webApiEntityRoot","webApiEntityList","EntityService","formConfig","queryService","QueryService","getEntities$","p","switchMap","getAvailableEntities","contentTypeName","entitiesFilter","rxTap","enabled","getEntities","contentTypes","fields","data","Default","entityId","force","parentId","parentField","config","_angular_core__WEBPACK_IMPORTED_MODULE_9__","FeaturesService","dialogContext$","ReplaySubject","dialogContextSignal","signal","configService","ds","load","dialogContext","set","getAll","computed","Features","arraysEqual","get$","featureNameId","find","f","nameId","getSignal","isEnabled$","isEnabled","_angular_core__WEBPACK_IMPORTED_MODULE_4__","providedIn","GlobalConfigService","snackBar","debugState","isDebug","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","allow","oldConfig","newConfig","toggleDebugEnabled","open","duration","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/content-export/content-export.component.html","./projects/eav-ui/src/app/content-export/content-export.component.ts","./projects/eav-ui/src/app/shared/helpers/signal.helpers.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/features.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { ServiceBase } from '../../shared/services/service-base';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { DialogContextSiteApp } from '../../shared/models/dialog-context.models';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService extends ServiceBase implements OnDestroy {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n    featuresService: FeaturesService,\r\n  ) {\r\n    super(new EavLogger('AppDialogConfigService', logThis));\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n    featuresService.loadFromService(this);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n    // TODO: probably should add an onDestroy and ensure all subscriptions in dialogSettings$ are killed\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getCurrent$(): Observable<DialogSettings> {\r\n    const appId = this.context.appId;\r\n    this.log.a(`getCurrent\\$ - appId:${appId}`);\r\n    return this.getShared$(appId);\r\n  }\r\n\r\n    // new 2dg\r\n    getSitePrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.Site.PrimaryApp));\r\n    }\r\n\r\n    getGlobalPrimaryApp$(): Observable<DialogContextSiteApp> {\r\n      return this.getCurrent$().pipe(map(dc => dc?.Context.System.PrimaryApp));\r\n    }\r\n\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    // if (!this.dialogSettings$[appIdToUse])\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$').pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Export {{ (contentType$ | async)?.Name }}</div>\r\n  </div>\r\n  @if ((loading$ | async) === false) {\r\n  <form #ngForm=\"ngForm\">\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n        export the schema that you can then fill in using Excel. Please visit\r\n        <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n      </p>\r\n      <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n        <div>\r\n          <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n            <mat-label>Languages</mat-label>\r\n            <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n              <mat-option value=\"\">All</mat-option>\r\n              @for (lang of languages; track lang) {\r\n              <mat-option [value]=\"lang.NameId\">{{ lang.NameId }}</mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Export data</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n            @if (hasIdList) {\r\n            <mat-radio-button value=\"Selection\">\r\n              Export selected {{ itemIds.length }} items\r\n            </mat-radio-button>\r\n            }\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">Value references to other languages</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n        <div>\r\n          <p class=\"eav-radio-group-label\">File / page references</p>\r\n          <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n            [disabled]=\"formValues.recordExport === 'Blank'\" class=\"eav-radio-group\">\r\n            <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n            </mat-radio-button>\r\n            <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n              /Portals/0...)\r\n            </mat-radio-button>\r\n          </mat-radio-group>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n        Export Data\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </form>\r\n  }\r\n</div>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { transient } from '../core';\r\nimport { Language } from '../shared/models/language.model';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatRadioModule,\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    AsyncPipe,\r\n  ],\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private contentExportService = transient(ContentExportService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private appDialogConfigService = transient(AppDialogConfigService);\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getCurrent$();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.languages = dialogSettings.Context.Language.List;\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n","import { CreateComputedOptions } from '@angular/core';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\nimport { ValueEqualityFn } from '@angular/core/primitives/signals';\r\n\r\nexport class SignalHelpers {\r\n  /** Options for number signal to ensure equality only on value difference */\r\n  static boolEquals: CreateComputedOptions<boolean> = {\r\n    equal: RxHelpers.valueEquals<boolean>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static numberEquals: CreateComputedOptions<number> = {\r\n    equal: RxHelpers.valueEquals<number>\r\n  };\r\n\r\n  /** Options for string signal to ensure equality only on value difference */\r\n  static stringEquals: CreateComputedOptions<string> = {\r\n    equal: RxHelpers.valueEquals<string>\r\n  };\r\n\r\n  // note: this doesn't work as expected; leaving in so nobody tries to repeat this\r\n  // /** Options for string signal to ensure equality only on value difference */\r\n  // static valueEquals: CreateComputedOptions<boolean | string | number> = {\r\n  //   equal: RxHelpers.valueEquals<boolean | string | number>\r\n  // };\r\n\r\n  /** Options for object signal to ensure equality only on value difference */\r\n  static objectEquals = { equal: RxHelpers.objectsEqual };\r\n}\r\n\r\n// export class SignalEquals<T>: CreateComputedOptions<T> {\r\n//   equal: RxHelpers.objectsEqual<T>;\r\n// }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { FormConfigService } from '../../edit/state/form-config.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logThis = false;\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService extends ServiceBase {\r\n  private queryService = transient(QueryService);\r\n\r\n  constructor(private http: HttpClient,\r\n    private formConfig: FormConfigService,\r\n    private dnnContext: DnnContext,\r\n  )\r\n  {\r\n    super(new EavLogger('EntityService', logThis));\r\n  }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.rxTap('getEntities', { enabled: true });\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      log.pipe(),\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId: this.formConfig.config.appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, Signal, computed, signal } from '@angular/core';\r\nimport { map, Observable, ReplaySubject } from 'rxjs';\r\nimport { AppDialogConfigService } from '../../app-administration/services';\r\nimport { DialogContext } from '../models/dialog-settings.model';\r\nimport { ServiceBase } from './service-base';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { FeatureSummary } from '../../features/models/feature-summary.model';\r\nimport { SignalHelpers } from '../helpers/signal.helpers';\r\nimport { RxHelpers } from '../rxJs/rx.helpers';\r\n\r\nconst logThis = false;\r\n\r\n/**\r\n * Singleton Service to provide information about enabled/disabled features.\r\n *\r\n * It currently has a strange architecture, since it's singleton,\r\n * but needs context data.\r\n * So the AppDialogConfigService seems to call the loadFromService.\r\n * TODO: 2dm: I don't like this, should rethink the architecture, feels a bit flaky.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class FeaturesService extends ServiceBase {\r\n  // new 2dm WIP\r\n  // Provide context information and ensure that previously added data is always available\r\n  private dialogContext$ = new ReplaySubject<DialogContext>(1);\r\n  private dialogContextSignal = signal<DialogContext>(null);\r\n\r\n  constructor() {\r\n    super(new EavLogger('FeaturesService', logThis));\r\n  }\r\n\r\n  loadFromService(configService: AppDialogConfigService) {\r\n    configService.getCurrent$().subscribe(ds => this.load(ds.Context));\r\n  }\r\n\r\n  load(dialogContext: DialogContext) {\r\n    // new 2dm WIP\r\n    this.dialogContext$.next(dialogContext);\r\n    this.dialogContextSignal.set(dialogContext);\r\n  }\r\n\r\n  getAll(): Signal<FeatureSummary[]> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features ?? [],\r\n      { equal: RxHelpers.arraysEqual }\r\n    );\r\n  }\r\n\r\n  // new 2dm WIP\r\n  get$(featureNameId: string): Observable<FeatureSummary> {\r\n    return this.dialogContext$.pipe(\r\n      // tap(f => console.log('2dm', f, featureNameId)),\r\n      map(dc => dc?.Features.find(f => f.nameId === featureNameId))\r\n    );\r\n  }\r\n\r\n  getSignal(featureNameId: string): Signal<FeatureSummary> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === featureNameId),\r\n      { equal: RxHelpers.objectsEqual }\r\n    );\r\n  }\r\n\r\n  isEnabled$(nameId: string): Observable<boolean> {\r\n    return this.get$(nameId).pipe(map(f => f?.isEnabled ?? false));\r\n  }\r\n\r\n  isEnabled(nameId: string): Signal<boolean> {\r\n    return computed(\r\n      () => this.dialogContextSignal()?.Features.find(f => f.nameId === nameId)?.isEnabled ?? false,\r\n      SignalHelpers.boolEquals\r\n    );\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n"],"x_google_ignoreList":[]}