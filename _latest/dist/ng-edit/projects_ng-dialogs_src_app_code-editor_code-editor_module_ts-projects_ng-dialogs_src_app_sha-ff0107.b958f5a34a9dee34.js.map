{"version":3,"mappings":"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","names":["webApiTypeRoot","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopes","Object","keys","key","value","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","i0","factory","ctx_r5","CodeAndEditionWarningsComponent","snackRef","snackBarData","openCodeBehind","dismissWithAction","MAT_SNACK_BAR_DATA","selectors","Explorers","Templates","Snippets","SnippetsService","translate","getSnippets","view","res","relevant","filterAwayNotNeededSnippetsList","snippets","standardAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","keyPrefixes","keyPrefixIndex","v","Type","indexOf","newList","itm","setHasPrefix","set","substring","push","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","l","pair","length","link","trim","url","target","type","prefix","getFields","AppId","subscribe","fields","field","fieldname","valuePlaceholder","Metadata","merged","Notes","toLowerCase","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","replace","webApiFieldsAll","filter","DataTypeConstants","fld","md","typeMd","inputMd","All","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","templates","template","parent","paths","Path","last","pathFromRoot","path","existing","find","item","children","depth","isShared","Shared","isFolder","SortItemsPipe","transform","items","sort","item1","item2","pure","DepthPaddingPipe","sanitizer","padding","bypassSecurityTrustStyle","ctx_r8","oxw","ctx_r17","ctx_r20","CodeTemplatesComponent","EventEmitter","ngOnChanges","changes","calculateTree","f","calculateTreeAppShared","previousView","n","_a","previousValue","toggleItem","FileName","IsShared","showFileInTree","isToggled","toggledItemsShared","toggledItemsApp","includes","openTemplate","openView","emit","shared","GeneralHelpers","addFile","folder","createTemplate","toggledItems","ctx","ObjectToArrayPipe","Array","isArray","values","ctx_r11","ctx_r24","ctx_r26","ctx_r28","ctx_r30","ctx_r32","ctx_r36","CodeSnippetsComponent","addSnippet","snippet","insertSnippet","toggleSection","toggledSections","toggleFolder","toggledFolders","toggleInfo","toggledInfos","toggleMore","toggledMores","ctx_r10","ctx_r12","ctx_r14","ctx_r18","ctx_r22","ctx_r23","ctx_r25","routes","component","route","snackBar","sourceService","snippetsService","zone","titleService","dialog","viewContainerRef","theme","tabSize","init","codeItems","JSON","parse","sessionStorage","getItem","keyItems","N","keyIsShared","forEach","codeItem","startsWith","B","P","urlItems","ngOnInit","subscription","Subscription","templates$","BehaviorSubject","initialViews","s","EntityId","_b","activeView$","openViews$","viewInfos$","attachListeners","getAll","next","add","combineLatest","openViews","viewInfos","notLoaded","viewKey","some","forkJoin","newViewInfo","view$","share","snippets$","mergeMap","of","results","viewInfos1","selectedIndex","findIndex","explorerSnipps","editorSnipps","savedCode","Code","slice","showCodeAndEditionWarnings","activeView","active","defaultTitle","newTitle","getTitle","setTitle","templateVars$","tabs","viewInfo","L","isActive","isModified","J","_c","isLoading","activeViewInfo","_","ngOnDestroy","complete","unsubscribe","toggleExplorer","explorer","activeExplorer","open","FileLocationDialogComponent","autoFocus","width","afterClosed","createFileDialogData","global","purpose","CreateFileDialogComponent","data","create","templateKey","monacoEditorRef","codeChanged","code","selectedViewInfo","x","oldOpenViews","newOpenViews","closeEditor","oldActiveView","newActiveView","codeToSave","duration","newViewInfos","error","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","fullName","nameCode","Extension","codeFile","otherEditions","endsWith","fileName","edition","G","Edition","snackBarRef","openFromComponent","onAction","containerInstance","snackBarConfig","runOutsideAngular","fromEvent","window","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","run","CodeEditorComponent","MonacoEditorComponent","CodeEditorRoutingModule","RouterModule","TranslateLoaderWithErrorHandling","sxcVersion","CodeEditorModule","Context","SourceService","TranslateService","imports","SharedComponentsModule","CommonModule","MatDialogModule","MatButtonModule","MatIconModule","MatSnackBarModule","MatRippleModule","TranslateModule","buildTranslateConfiguration","translateLoaderFactoryCode","MonacoEditorModule","MatProgressSpinnerModule","CreateFileDialogModule","webApiFieldsRoot","ContentTypesFieldsService","typeListRetrieve","getInputTypesList","inputConfigs","config","dataType","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","contentTypeStaticName","reOrder","idArray","Id","order","stringify","attributeId","rename","fieldId","newName","IsTitle","Error","newField","ContentTypeId","Index","SortOrder","updateInputType","id","voidElements","el","toLocaleLowerCase","monaco","filename","container","options","globalCache","createGlobalCache","defineThemes","cachedValue","editorInstance","createInstance","completionItemProviders","addSnippets","resizeObserver","createResizeObserver","restoreState","addEvents","destroy","saveState","disconnect","completionItemProvider","dispose","getModel","updateValue","setValue","focus","onValueChange","callback","valueChangedCallback","onFocus","focusedCallback","onBlur","blurredCallback","getContribution","insert","setSnippets","setJsonSchema","jsonSchema","uri","jsonDiagnostics","languages","json","jsonDefaults","diagnosticsOptions","enableSchemaRequest","exists","schemas","schema","fileMatch","a","newSchema","setDiagnosticsOptions","_2sxc","themesAreDefined","savedStates","editor","defineTheme","base","inherit","rules","token","foreground","editorModelUri","Uri","editorModel","createModel","setModel","viewState","saveViewState","savedState","restoreViewState","registerCompletionItemProvider","getModeId","triggerCharacters","provideCompletionItems","model","position","suggestions","textUntilPosition","getValueInRange","startLineNumber","lineNumber","startColumn","endLineNumber","endColumn","column","trigger","tagStartIndex","codeInTag","quotes","from","c","tagEndIndex","tag","test","kind","CompletionItemKind","Snippet","insertText","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","range","word","getWordUntilPosition","documentation","Z","title","A","R","ResizeObserver","layout","observe","onDidChangeContent","newValue","getValue","onDidFocusEditorWidget","onDidBlurEditorWidget","ngAfterViewInit","require","vs","createEditor","monacoInstance","h","C","MonacoInstance","editorRef","nativeElement","valueChanged","focused","blurred","FieldHintComponent","toggleIsShort","isShort","ToggleDebugDirective","globalConfigService","onClick","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","SafeHtmlPipe","html","bypassSecurityTrustHtml","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","suffix","getTranslation","lang","catchError","console","warn","_MatProgressSpinnerBase","mixinColor","_elementRef","MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS","InjectionToken","providedIn","diameter","elementRef","_platform","_document","animationMode","defaults","changeDetectorRef","viewportRuler","ngZone","super","_diameter","_value","_resizeSubscription","mode","trackedDiameters","MatProgressSpinner","_diameters","_spinnerAnimationLabel","_getSpinnerAnimationLabel","has","head","Set","_noopAnimations","_forceAnimations","nodeName","strokeWidth","isBrowser","SAFARI","change","markForCheck","size","coerceNumberProperty","_styleRoot","_attachStyleNode","_strokeWidth","Math","max","min","element","_getShadowRoot","classList","_getCircleRadius","_getViewBox","viewBox","_getStrokeCircumference","PI","_getStrokeDashOffset","_getCircleStrokeWidth","_getCircleTransformOrigin","svg","scale","currentScale","styleRoot","currentDiameter","diameters","diametersForElement","styleTag","createElement","setAttribute","textContent","_getAnimationText","appendChild","strokeCircumference","WeakMap","ɵfac","i1","DOCUMENT","ANIMATION_MODULE_TYPE","i2","ɵcmp","decls","directives","i3","styles","ɵmod","ɵinj","MatCommonModule"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/content-types.service.ts","./projects/ng-dialogs/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.html","./projects/ng-dialogs/src/app/code-editor/code-and-edition-warnings/code-and-edition-warnings.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.models.ts","./projects/ng-dialogs/src/app/code-editor/services/snippets.service.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.helpers.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/order-items.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/depth-padding.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.html","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.component.ts","./projects/ng-dialogs/src/app/code-editor/code-templates/code-templates.models.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/object-to-array.pipe.ts","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.html","./projects/ng-dialogs/src/app/code-editor/code-snippets/code-snippets.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.component.html","./projects/ng-dialogs/src/app/code-editor/code-editor-routing.module.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.component.ts","./projects/ng-dialogs/src/app/code-editor/code-editor.module.ts","./projects/ng-dialogs/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.module.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-instance.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.ts","./projects/ng-dialogs/src/app/monaco-editor/monaco-editor.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts","./projects/ng-dialogs/src/app/shared/translation/translate-configuration.ts","./projects/ng-dialogs/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2015/progress-spinner.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Record<string, string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","<div class=\"messages\">\r\n  <ng-container *ngIf=\"snackBarData.codeFile\">\r\n    <div>\"{{ snackBarData.fileName }}\" also has a code-behind file \"{{ snackBarData.codeFile }}\".</div>\r\n    <br>\r\n  </ng-container>\r\n\r\n  <div *ngIf=\"snackBarData.otherEditions\">\r\n    <ng-container *ngIf=\"snackBarData.edition\">\r\n      You are editing \"{{ snackBarData.edition }}\" edition.\r\n    </ng-container>\r\n    There are {{ snackBarData.otherEditions }} other editions of \"{{ snackBarData.fileName }}\".\r\n    <ng-container *ngIf=\"!snackBarData.edition\">\r\n      You may be editing an edition which is not the one you see.\r\n    </ng-container>\r\n    See <a href=\"http://r.2sxc.org/polymorphism\" target=\"_blank\">docs</a>.\r\n  </div>\r\n</div>\r\n\r\n<div class=\"actions\">\r\n  <button mat-button color=\"primary\" *ngIf=\"snackBarData.codeFile\" (click)=\"openCodeBehind()\">\r\n    Open code-behind file\r\n  </button>\r\n</div>\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings.models';\r\n\r\n@Component({\r\n  selector: 'app-code-and-edition-warnings',\r\n  templateUrl: './code-and-edition-warnings.component.html',\r\n  styleUrls: ['./code-and-edition-warnings.component.scss'],\r\n})\r\nexport class CodeAndEditionWarningsComponent {\r\n  constructor(\r\n    private snackRef: MatSnackBarRef<CodeAndEditionWarningsComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA) public snackBarData: CodeAndEditionWarningsSnackBarData,\r\n  ) { }\r\n\r\n  openCodeBehind(): void {\r\n    this.snackBarData.openCodeBehind = true;\r\n    this.snackRef.dismissWithAction();\r\n  }\r\n}\r\n","import { FileAsset } from './models/file-asset.model';\r\nimport { Snippet, SnippetsSets } from './models/snippet.model';\r\nimport { SourceView } from './models/source-view.model';\r\n\r\nexport interface Tab {\r\n  viewKey: ViewKey;\r\n  label: string;\r\n  isActive: boolean;\r\n  isModified: boolean;\r\n  isLoading: boolean;\r\n}\r\n\r\nexport interface CodeEditorTemplateVars {\r\n  activeView: ViewKey;\r\n  tabs: Tab[];\r\n  viewKey: ViewKey;\r\n  view?: SourceView;\r\n  templates: FileAsset[];\r\n  explorerSnipps: SnippetsSets;\r\n  editorSnipps: Snippet[];\r\n}\r\n\r\nexport const Explorers = {\r\n  Templates: 'Templates',\r\n  Snippets: 'Snippets',\r\n} as const;\r\n\r\nexport type ExplorerOption = typeof Explorers[keyof typeof Explorers];\r\n\r\nexport interface ViewInfo {\r\n  viewKey: ViewKey;\r\n  view?: SourceView;\r\n  explorerSnipps?: SnippetsSets;\r\n  editorSnipps?: Snippet[];\r\n  savedCode?: string;\r\n}\r\n\r\nexport interface ViewKey {\r\n  /** ViewKey is templateId or path */\r\n  key: string;\r\n  shared: boolean;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { MoreSnippet, SetSnippet, SetSnippetLink, Snippet, SnippetsSets, SnippetsSubSubSets } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext, private translate: TranslateService) { }\r\n\r\n  getSnippets(view: SourceView): Observable<{ list: Snippet[]; sets: SnippetsSets; }> {\r\n    return this.http.get<{ snippets: Snippet[] }>('../ng-assets/snippets.json.js').pipe(\r\n      map(res => {\r\n        const relevant = this.filterAwayNotNeededSnippetsList(res.snippets, view);\r\n        const standardAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n        const sets = this.initSnippetsWithConfig(standardAndInputSnips.standardArray, view, standardAndInputSnips.inputTypeSnippets);\r\n        const sorted: { list: Snippet[]; sets: SnippetsSets; } = {\r\n          list: standardAndInputSnips.standardArray,\r\n          sets\r\n        };\r\n        return sorted;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** Scan the list for sets starting with @ or [ and filter if not needed right now */\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView): Snippet[] {\r\n    const keyPrefixes = ['@', '['];\r\n    const keyPrefixIndex = (v: SourceView) => (v.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n    const newList: Snippet[] = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substring(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]): { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substring(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    const extracted: { standardArray: Snippet[]; inputTypeSnippets: Record<string, Snippet[]>; } = {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n    return extracted;\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]): Record<string, Snippet[]> {\r\n    const inputTypeList: Record<string, Snippet[]> = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(\r\n    standardArray: Snippet[],\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): SnippetsSets {\r\n    const sets = this.makeTree(standardArray);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(\r\n        sets.Content.Fields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContent,\r\n        'Content',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields as SnippetsSubSubSets,\r\n        templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation',\r\n        templateConfiguration,\r\n        inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(\r\n          sets.List.Fields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeList,\r\n          'Header',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields as SnippetsSubSubSets,\r\n          templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation',\r\n          templateConfiguration,\r\n          inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  /** Convert the list into a tree with set/subset/item */\r\n  private makeTree(list: Snippet[]): SnippetsSets {\r\n    const tree: SnippetsSets = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted: SetSnippet = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      (tree[o.set][o.subset] as SetSnippet[]).push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: string, subset: string, snip: string, addition: string): string {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: string, subset: string, snip: string): string {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result: string = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: string): SetSnippetLink[] {\r\n    if (!linksString) { return null; }\r\n\r\n    const links: SetSnippetLink[] = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        const link: SetSnippetLink = {\r\n          name: pair[0].trim(),\r\n          url: pair[1].trim() + ':' + pair[2].trim(),\r\n        };\r\n        links.push(link);\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  /** spm TODO: this happens after snippets are calculated for the first time. Needs to be fixed */\r\n  private loadContentType(\r\n    target: SnippetsSubSubSets,\r\n    type: string,\r\n    prefix: string,\r\n    templateConfiguration: SourceView,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    this.getFields(templateConfiguration.AppId, type).subscribe(fields => {\r\n      // first add common items if the content-type actually exists\r\n      for (const field of fields) {\r\n        const fieldname = field.StaticName;\r\n        target[fieldname] = {\r\n          key: fieldname,\r\n          label: fieldname,\r\n          snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n          help: field.Metadata.merged.Notes || ' (' + field.Type.toLowerCase() + ') '\r\n        };\r\n        // try to add generic snippets specific to this input-type\r\n        const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n        this.attachSnippets(target, prefix, fieldname, field.InputType, snipDefaults, inputTypeSnippets);\r\n      }\r\n\r\n      if (fields.length) {\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        // tslint:disable-next-line:prefer-for-of\r\n        for (let i = 0; i < std.length; i++) {\r\n          target[std[i]] = {\r\n            key: std[i],\r\n            label: std[i],\r\n            snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n            help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n          };\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  private valuePlaceholder(obj: string, val: string, templateConfiguration: SourceView): string {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string): Observable<Field[]> {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    }).pipe(\r\n      map(fields => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        for (const fld of fields) {\r\n          if (!fld.Metadata) { continue; }\r\n          const md = fld.Metadata;\r\n          const allMd = md.All;\r\n          const typeMd = md[fld.Type];\r\n          const inputMd = md[fld.InputType];\r\n          md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n        }\r\n        return fields;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private attachSnippets(\r\n    target: SnippetsSubSubSets,\r\n    prefix: string,\r\n    fieldname: string,\r\n    inputType: string,\r\n    snipDefaults: SetSnippet,\r\n    inputTypeSnippets: Record<string, Snippet[]>,\r\n  ): void {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) { // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substring(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) { return; }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = {};\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true,\r\n        } as MoreSnippet);\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: string, objName: string, fieldName: string): string {\r\n    snip = snip\r\n      .replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { FileAsset } from '../models/file-asset.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { appSharedRoot } from './code-templates.models';\r\n\r\nexport function calculateTreeAppShared(templates: FileAsset[]): TreeItem[] {\r\n  const tree: TreeItem[] = [\r\n    {\r\n      depth: -1,\r\n      name: 'App Files',\r\n      pathFromRoot: appSharedRoot,\r\n      isShared: false,\r\n      isFolder: true,\r\n      children: calculateTree(templates.filter(f => !f.Shared)),\r\n    },\r\n    {\r\n      depth: -1,\r\n      name: 'Shared App Files',\r\n      pathFromRoot: appSharedRoot,\r\n      isShared: true,\r\n      isFolder: true,\r\n      children: calculateTree(templates.filter(f => f.Shared)),\r\n    },\r\n  ];\r\n  return tree;\r\n}\r\n\r\nfunction calculateTree(templates: FileAsset[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.Path.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isShared: template.Shared,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer, SafeStyle } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean): SafeStyle {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': isToggled(item.pathFromRoot, item.isShared) }\" [tippy]=\"item.name\" tippyShowDelay=\"750\"\r\n        (click)=\"openTemplate(item.pathFromRoot, item.isShared)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [ngClass]=\"{'app-shared-root': item.depth < 0}\"\r\n          [style]=\"item.depth + 1 | depthPadding: item.isFolder\" (click)=\"toggleItem(item.pathFromRoot, item.isShared)\">\r\n          <div class=\"folder-name\" [tippy]=\"item.name\" tippyShowDelay=\"750\">\r\n            <mat-icon>\r\n              {{ isToggled(item.pathFromRoot, item.isShared) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" tippy=\"Create file in this folder\" tippyShowDelay=\"750\" appClickStopPropagation\r\n            (click)=\"addFile(item.pathFromRoot, item.isShared)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"isToggled(item.pathFromRoot, item.isShared)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button tippy=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ViewKey } from '../code-editor.models';\r\nimport { FileAsset } from '../models/file-asset.model';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTreeAppShared } from './code-templates.helpers';\r\nimport { appSharedRoot, CreateTemplateParams } from './code-templates.models';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n})\r\nexport class CodeTemplatesComponent implements OnChanges {\r\n  @Input() view?: SourceView;\r\n  @Input() templates: FileAsset[];\r\n  @Output() openView: EventEmitter<ViewKey> = new EventEmitter();\r\n  @Output() createTemplate: EventEmitter<CreateTemplateParams> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItemsApp: string[] = [];\r\n  toggledItemsShared: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.templates != null) {\r\n      this.tree = calculateTreeAppShared(this.templates);\r\n    }\r\n    if (changes.view != null) {\r\n      const previousView: SourceView = changes.view?.previousValue;\r\n      if (previousView) {\r\n        this.toggleItem(previousView.FileName, previousView.IsShared);\r\n      }\r\n      if (this.view) {\r\n        this.showFileInTree(this.view.FileName, this.view.IsShared);\r\n      }\r\n    }\r\n  }\r\n\r\n  isToggled(path: string, isShared: boolean): boolean {\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    return toggledItems.includes(path);\r\n  }\r\n\r\n  openTemplate(path: string, isShared: boolean): void {\r\n    const viewKey: ViewKey = { key: path, shared: isShared };\r\n    this.openView.emit(viewKey);\r\n  }\r\n\r\n  toggleItem(path: string, isShared: boolean): void {\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    GeneralHelpers.toggleInArray(path, toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string, isShared?: boolean): void {\r\n    const params: CreateTemplateParams = { folder, isShared };\r\n    this.createTemplate.emit(params);\r\n  }\r\n\r\n  private showFileInTree(file: string, isShared: boolean): void {\r\n    if (file == null) { return; }\r\n    const toggledItems = isShared ? this.toggledItemsShared : this.toggledItemsApp;\r\n    if (toggledItems.includes(file)) { return; }\r\n\r\n    const paths = [appSharedRoot, ...file.split('/')];\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot, isShared);\r\n    }\r\n  }\r\n}\r\n","export const appSharedRoot = '' as const;\r\n\r\nexport interface CreateTemplateParams {\r\n  folder?: string;\r\n  isShared?: boolean;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Record<string, any> | Record<string, any>[]): Record<string, any>[] {\r\n    if (obj == null) { return; }\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [tippy]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      tippyShowDelay=\"750\" (click)=\"toggleSection(section.key)\">\r\n      <mat-icon>\r\n        {{ toggledSections.includes(section.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n      </mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section.key)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [tippy]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\" tippyShowDelay=\"750\"\r\n          (click)=\"toggleFolder(folder.key)\">\r\n          <mat-icon>\r\n            {{ toggledFolders.includes(folder.key) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n          </mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder.key)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [tippy]=\"snippet.snip\" tippyShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" tippy=\"Show More\" tippyShowDelay=\"750\" (click)=\"toggleMore(snippet.key)\">\r\n                {{ toggledMores.includes(snippet.key) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet.key)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet.key)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet.key)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [tippy]=\"more.snip\" tippyShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon tippy=\"Show Help\" tippyShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more.key)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more.key)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { SnippetsSets } from '../models/snippet.model';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n})\r\nexport class CodeSnippetsComponent {\r\n  @Input() snippets: SnippetsSets;\r\n  @Output() insertSnippet: EventEmitter<string> = new EventEmitter();\r\n  toggledSections: string[] = [];\r\n  toggledFolders: string[] = [];\r\n  toggledInfos: string[] = [];\r\n  toggledMores: string[] = [];\r\n\r\n  constructor() { }\r\n\r\n  addSnippet(snippet: string): void {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(key: string): void {\r\n    GeneralHelpers.toggleInArray(key, this.toggledMores);\r\n  }\r\n}\r\n","<div class=\"editor-root\" appToggleDebug [ngClass]=\"{ 'sxc-dark': monacoOptions.theme === '2sxc-dark' }\"\r\n  *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Templates }\" tippy=\"Templates\"\r\n      (click)=\"toggleExplorer(Explorers.Templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === Explorers.Snippets }\" tippy=\"Snippets\"\r\n      (click)=\"toggleExplorer(Explorers.Snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== Explorers.Templates\" [view]=\"data.view\" [templates]=\"data.templates\"\r\n    (openView)=\"openView($event)\" (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== Explorers.Snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"insertSnippet($event)\">\r\n  </app-code-snippets>\r\n\r\n  <div class=\"editor-group\">\r\n    <div class=\"tabs-container fancy-scrollbar-dark\" *ngIf=\"data.tabs.length > 0\">\r\n      <div class=\"tab\" *ngFor=\"let tab of data.tabs\" [ngClass]=\"{\r\n        'active': tab.isActive,\r\n        'modified': tab.isModified,\r\n        'loading': tab.isLoading\r\n      }\" (click)=\"openView(tab.viewKey)\">\r\n        <div class=\"tab-label-container\" [tippy]=\"tab.label\" tippyShowDelay=\"750\">\r\n          <mat-icon class=\"icon-shared\" *ngIf=\"tab.viewKey.shared\">share</mat-icon>\r\n          <span class=\"tab-label\">{{ tab.label }}</span>\r\n        </div>\r\n        <div class=\"tab-actions-container\">\r\n          <mat-icon *ngIf=\"tab.isModified\" class=\"tab-action icon-modified\" svgIcon=\"circle\"></mat-icon>\r\n          <mat-spinner *ngIf=\"tab.isLoading\" class=\"spinner\" mode=\"indeterminate\" diameter=\"14\" color=\"white\">\r\n          </mat-spinner>\r\n          <mat-icon class=\"tab-action icon-close\" tippy=\"Close\" appClickStopPropagation\r\n            (click)=\"closeEditor(tab.viewKey)\">\r\n            close\r\n          </mat-icon>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <app-monaco-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [value]=\"data.view.Code\"\r\n      (valueChanged)=\"codeChanged($event, data.viewKey)\" [options]=\"monacoOptions\" [snippets]=\"data.editorSnipps\"\r\n      [autoFocus]=\"true\">\r\n    </app-monaco-editor>\r\n  </div>\r\n\r\n  <button mat-fab mat-elevation-z24 tippy=\"Click to save or CTRL + S\" *ngIf=\"data.activeView\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { Component, NgZone, OnDestroy, OnInit, ViewChild, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Observable, of, Subscription } from 'rxjs';\r\nimport { map, mergeMap, share } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../edit/shared/helpers';\r\n// tslint:disable-next-line:max-line-length\r\nimport { CreateFileDialogComponent, CreateFileDialogData, CreateFileDialogResult, FileLocationDialogComponent } from '../create-file-dialog';\r\nimport { MonacoEditorComponent } from '../monaco-editor';\r\nimport { keyIsShared, keyItems } from '../shared/constants/session.constants';\r\nimport { SourceItem } from '../shared/models/edit-form.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeAndEditionWarningsSnackBarData } from './code-and-edition-warnings/code-and-edition-warnings.models';\r\nimport { CodeEditorTemplateVars, ExplorerOption, Explorers, Tab, ViewInfo, ViewKey } from './code-editor.models';\r\nimport { CreateTemplateParams } from './code-templates/code-templates.models';\r\nimport { FileAsset } from './models/file-asset.model';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(MonacoEditorComponent) private monacoEditorRef: MonacoEditorComponent;\r\n\r\n  Explorers = Explorers;\r\n  activeExplorer: ExplorerOption = Explorers.Templates;\r\n  monacoOptions = {\r\n    theme: '2sxc-dark',\r\n    tabSize: 2,\r\n  };\r\n  templateVars$: Observable<CodeEditorTemplateVars>;\r\n\r\n  private templates$: BehaviorSubject<FileAsset[]>;\r\n  private activeView$: BehaviorSubject<ViewKey>;\r\n  private openViews$: BehaviorSubject<ViewKey[]>;\r\n  private viewInfos$: BehaviorSubject<ViewInfo[]>;\r\n  private subscription: Subscription;\r\n  private urlItems: SourceItem[];\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) {\r\n    this.context.init(this.route);\r\n    const codeItems: SourceItem[] = JSON.parse(sessionStorage.getItem(keyItems));\r\n    const isShared = sessionStorage.getItem(keyIsShared) === 'true' ?? false;\r\n    codeItems.forEach(codeItem => {\r\n      // remove leading \"/\" from path\r\n      if (codeItem.Path.startsWith('/')) {\r\n        codeItem.Path = codeItem.Path.substring(1);\r\n      }\r\n      codeItem.IsShared ??= isShared;\r\n    });\r\n    this.urlItems = codeItems;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.templates$ = new BehaviorSubject<FileAsset[]>([]);\r\n    const initialViews = this.urlItems.map(item => {\r\n      const viewKey: ViewKey = { key: item.EntityId?.toString() ?? item.Path, shared: item.IsShared };\r\n      return viewKey;\r\n    });\r\n    this.activeView$ = new BehaviorSubject<ViewKey>(initialViews[0]);\r\n    this.openViews$ = new BehaviorSubject<ViewKey[]>(initialViews);\r\n    this.viewInfos$ = new BehaviorSubject<ViewInfo[]>([]);\r\n\r\n    this.attachListeners();\r\n\r\n    this.sourceService.getAll().subscribe(templates => {\r\n      this.templates$.next(templates);\r\n    });\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.templates$, this.openViews$]).subscribe(([templates, openViews]) => {\r\n        if (templates.length === 0) { return; }\r\n\r\n        let viewInfos = this.viewInfos$.value;\r\n        const notLoaded = openViews.filter(viewKey => !viewInfos.some(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey)));\r\n        if (notLoaded.length === 0) { return; }\r\n\r\n        forkJoin(\r\n          notLoaded.map(viewKey => {\r\n            // set viewKey in viewInfos to mark that view is being fetched\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n            };\r\n            viewInfos = [...viewInfos, newViewInfo];\r\n\r\n            const view$ = this.sourceService.get(viewKey.key, viewKey.shared, this.urlItems).pipe(share());\r\n            const snippets$ = view$.pipe(mergeMap(view => this.snippetsService.getSnippets(view)));\r\n            return forkJoin([of(viewKey), view$, snippets$]);\r\n          })\r\n        ).subscribe(results => {\r\n          let viewInfos1 = this.viewInfos$.value;\r\n\r\n          results.forEach(([viewKey, view, snippets]) => {\r\n            const selectedIndex = viewInfos1.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n            if (selectedIndex < 0) { return; }\r\n\r\n            const newViewInfo: ViewInfo = {\r\n              viewKey,\r\n              view,\r\n              explorerSnipps: snippets.sets,\r\n              editorSnipps: snippets.list,\r\n              savedCode: view.Code,\r\n            };\r\n            viewInfos1 = [...viewInfos1.slice(0, selectedIndex), newViewInfo, ...viewInfos1.slice(selectedIndex + 1)];\r\n            this.showCodeAndEditionWarnings(viewKey, view, templates);\r\n          });\r\n\r\n          this.viewInfos$.next(viewInfos1);\r\n        });\r\n\r\n        this.viewInfos$.next(viewInfos);\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.activeView$, this.viewInfos$]).subscribe(([activeView, viewInfos]) => {\r\n        const active = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, activeView));\r\n        const defaultTitle = 'Code Editor';\r\n        const newTitle = active == null ? defaultTitle : `${active.view?.FileName} - ${defaultTitle}`;\r\n        const oldTitle = this.titleService.getTitle();\r\n        if (newTitle !== oldTitle) {\r\n          this.titleService.setTitle(newTitle);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([this.templates$, this.activeView$, this.openViews$, this.viewInfos$]).pipe(\r\n      map(([templates, activeView, openViews, viewInfos]) => {\r\n        const tabs = openViews.map(viewKey => {\r\n          const viewInfo = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n          const label: Tab = {\r\n            viewKey,\r\n            label: viewInfo?.view?.FileName ?? viewKey.key,\r\n            isActive: GeneralHelpers.objectsEqual(viewKey, activeView),\r\n            isModified: viewInfo?.view?.Code !== viewInfo?.savedCode,\r\n            isLoading: viewInfo?.view == null,\r\n          };\r\n          return label;\r\n        });\r\n        const activeViewInfo = viewInfos.find(v => GeneralHelpers.objectsEqual(v.viewKey, activeView));\r\n\r\n        const templateVars: CodeEditorTemplateVars = {\r\n          activeView,\r\n          tabs,\r\n          viewKey: activeViewInfo?.viewKey,\r\n          view: activeViewInfo?.view,\r\n          templates,\r\n          explorerSnipps: activeViewInfo?.explorerSnipps,\r\n          editorSnipps: activeViewInfo?.editorSnipps,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.templates$.complete();\r\n    this.activeView$.complete();\r\n    this.openViews$.complete();\r\n    this.viewInfos$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: ExplorerOption): void {\r\n    this.activeExplorer = (this.activeExplorer !== explorer) ? explorer : null;\r\n  }\r\n\r\n  createTemplate(params: CreateTemplateParams): void {\r\n    if (params.isShared == null) {\r\n      const fileLocationDialogRef = this.dialog.open(FileLocationDialogComponent, {\r\n        autoFocus: false,\r\n        viewContainerRef: this.viewContainerRef,\r\n        width: '650px',\r\n      });\r\n      fileLocationDialogRef.afterClosed().subscribe((isShared?: boolean) => {\r\n        if (isShared == null) { return; }\r\n        params.isShared = isShared;\r\n        this.createTemplate(params);\r\n      });\r\n      return;\r\n    }\r\n\r\n    const createFileDialogData: CreateFileDialogData = {\r\n      folder: params.folder,\r\n      global: params.isShared,\r\n      purpose: params.folder === 'api' || params.folder?.startsWith('api/') ? 'Api' : undefined,\r\n    };\r\n    const createFileDialogRef = this.dialog.open(CreateFileDialogComponent, {\r\n      autoFocus: false,\r\n      data: createFileDialogData,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n\r\n    createFileDialogRef.afterClosed().subscribe((result?: CreateFileDialogResult) => {\r\n      if (!result) { return; }\r\n\r\n      this.sourceService.create(result.name, params.isShared, result.templateKey).subscribe(() => {\r\n        this.sourceService.getAll().subscribe(files => {\r\n          this.templates$.next(files);\r\n        });\r\n      });\r\n    });\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoEditorRef?.insertSnippet(snippet);\r\n  }\r\n\r\n  codeChanged(code: string, viewKey: ViewKey): void {\r\n    let viewInfos = this.viewInfos$.value;\r\n    const selectedIndex = viewInfos.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n    const selectedViewInfo = viewInfos[selectedIndex];\r\n    const newViewInfo: ViewInfo = {\r\n      ...selectedViewInfo,\r\n      view: {\r\n        ...selectedViewInfo.view,\r\n        Code: code,\r\n      },\r\n    };\r\n    viewInfos = [...viewInfos.slice(0, selectedIndex), newViewInfo, ...viewInfos.slice(selectedIndex + 1)];\r\n    this.viewInfos$.next(viewInfos);\r\n  }\r\n\r\n  openView(viewKey: ViewKey): void {\r\n    // fix viewKey because it can be a templateId or a path, and file might already be open\r\n    viewKey = this.viewInfos$.value.find(\r\n      v => !GeneralHelpers.objectsEqual(v.viewKey, viewKey) && v.view?.FileName === viewKey.key && v.view?.IsShared === viewKey.shared\r\n    )?.viewKey ?? viewKey;\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (!GeneralHelpers.objectsEqual(oldActiveView, viewKey)) {\r\n      this.activeView$.next(viewKey);\r\n    }\r\n    const oldOpenViews = this.openViews$.value;\r\n    if (!oldOpenViews.some(v => GeneralHelpers.objectsEqual(v, viewKey))) {\r\n      const newOpenViews = [...oldOpenViews, viewKey];\r\n      this.openViews$.next(newOpenViews);\r\n    }\r\n  }\r\n\r\n  closeEditor(viewKey: ViewKey): void {\r\n    const oldOpenViews = this.openViews$.value;\r\n    const newOpenViews = oldOpenViews.filter(key => !GeneralHelpers.objectsEqual(key, viewKey));\r\n\r\n    const oldActiveView = this.activeView$.value;\r\n    if (GeneralHelpers.objectsEqual(oldActiveView, viewKey)) {\r\n      const newActiveView = oldOpenViews[oldOpenViews.findIndex(v => GeneralHelpers.objectsEqual(v, oldActiveView)) - 1] ?? newOpenViews[0];\r\n      this.activeView$.next(newActiveView);\r\n    }\r\n\r\n    this.openViews$.next(newOpenViews);\r\n  }\r\n\r\n  save(viewKey?: ViewKey): void {\r\n    viewKey ??= this.activeView$.value;\r\n    const viewInfo = this.viewInfos$.value.find(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n    if (viewInfo?.view == null) { return; }\r\n\r\n    this.snackBar.open('Saving...');\r\n    const codeToSave = viewInfo.view.Code;\r\n    this.sourceService.save(viewKey.key, viewKey.shared, viewInfo.view, this.urlItems).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n\r\n        let newViewInfos = [...this.viewInfos$.value];\r\n        const selectedIndex = newViewInfos.findIndex(v => GeneralHelpers.objectsEqual(v.viewKey, viewKey));\r\n        if (selectedIndex < 0) { return; }\r\n\r\n        const selectedViewInfo = newViewInfos[selectedIndex];\r\n        const newViewInfo: ViewInfo = {\r\n          ...selectedViewInfo,\r\n          savedCode: codeToSave,\r\n        };\r\n        newViewInfos = [...newViewInfos.slice(0, selectedIndex), newViewInfo, ...newViewInfos.slice(selectedIndex + 1)];\r\n        this.viewInfos$.next(newViewInfos);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(viewKey: ViewKey, view: SourceView, files: FileAsset[]): void {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file.Path === pathWithSlash + nameCode && file.Shared === view.IsShared);\r\n    const otherEditions = files.filter(file => file.Path.endsWith(fullName) && file.Shared === view.IsShared).length - 1;\r\n\r\n    if (codeFile || otherEditions) {\r\n      const snackBarData: CodeAndEditionWarningsSnackBarData = {\r\n        fileName: fullName,\r\n        codeFile: codeFile?.Path,\r\n        edition: this.urlItems\r\n          .find(i => i.EntityId?.toString() === viewKey.key && i.IsShared === view.IsShared && i.Path === view.FileName)?.Edition,\r\n        otherEditions,\r\n        openCodeBehind: false,\r\n      };\r\n      const snackBarRef = this.snackBar.openFromComponent(CodeAndEditionWarningsComponent, {\r\n        data: snackBarData,\r\n        duration: 10000,\r\n      });\r\n\r\n      snackBarRef.onAction().subscribe(() => {\r\n        if ((snackBarRef.containerInstance.snackBarConfig.data as CodeAndEditionWarningsSnackBarData).openCodeBehind) {\r\n          const openViewKey: ViewKey = { key: codeFile?.Path, shared: codeFile?.Shared };\r\n          this.openView(openViewKey);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  private attachListeners(): void {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<BeforeUnloadEvent>(window, 'beforeunload').subscribe(event => {\r\n          const allSaved = !this.viewInfos$.value.some(v => v.view != null && v.view.Code !== v.savedCode);\r\n          if (allSaved) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').subscribe(event => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { CreateFileDialogModule } from '../create-file-dialog';\r\nimport { MonacoEditorModule } from '../monaco-editor';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { CodeAndEditionWarningsComponent } from './code-and-edition-warnings/code-and-edition-warnings.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n    CodeAndEditionWarningsComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatSnackBarModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n    MonacoEditorModule,\r\n    MatProgressSpinnerModule,\r\n    CreateFileDialogModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ],\r\n})\r\nexport class CodeEditorModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outlined' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { MonacoEditorComponent } from './monaco-editor.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n  ],\r\n  declarations: [\r\n    MonacoEditorComponent,\r\n  ],\r\n  exports: [\r\n    MonacoEditorComponent,\r\n  ],\r\n})\r\nexport class MonacoEditorModule { }\r\n","import { JsonSchema, Monaco2sxc, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\n\r\nexport const voidElements = 'area, base, br, col, embed, hr, img, input, link, meta, param, source, track, wbr'\r\n  .split(',')\r\n  .map(el => el.trim().toLocaleLowerCase());\r\n\r\nexport class MonacoInstance {\r\n  /** Editor instance configuration */\r\n  private editorInstance: MonacoType;\r\n  private completionItemProviders: MonacoType[];\r\n  private resizeObserver: ResizeObserver;\r\n  private globalCache: Monaco2sxc;\r\n  private cachedValue: string;\r\n  private valueChangedCallback?: (value: string) => void;\r\n  private focusedCallback?: () => void;\r\n  private blurredCallback?: () => void;\r\n\r\n  constructor(\r\n    /** Global Monaco configuration */\r\n    private monaco: MonacoType,\r\n    filename: string,\r\n    value: string,\r\n    container: HTMLElement,\r\n    options: MonacoType,\r\n    private snippets: Snippet[],\r\n  ) {\r\n    this.globalCache = this.createGlobalCache(monaco);\r\n    this.defineThemes(this.globalCache, this.monaco);\r\n    this.cachedValue = value;\r\n    this.editorInstance = this.createInstance(this.monaco, filename, value, container, options);\r\n    this.completionItemProviders = this.addSnippets(this.monaco, this.editorInstance);\r\n    this.resizeObserver = this.createResizeObserver(container, this.editorInstance);\r\n    this.restoreState(this.globalCache, this.editorInstance);\r\n    this.addEvents(this.editorInstance);\r\n  }\r\n\r\n  destroy(): void {\r\n    this.saveState(this.globalCache, this.editorInstance);\r\n    this.resizeObserver.disconnect();\r\n    this.completionItemProviders.forEach(completionItemProvider => {\r\n      completionItemProvider.dispose();\r\n    });\r\n    this.editorInstance.getModel().dispose();\r\n    this.editorInstance.dispose();\r\n  }\r\n\r\n  updateValue(value: string): void {\r\n    if (this.cachedValue === value) { return; }\r\n    this.cachedValue = value;\r\n    this.editorInstance.getModel().setValue(value);\r\n  }\r\n\r\n  focus(): void {\r\n    this.editorInstance.focus();\r\n  }\r\n\r\n  onValueChange(callback: (value: string) => void): void {\r\n    this.valueChangedCallback = callback;\r\n  }\r\n\r\n  onFocus(callback: () => void): void {\r\n    this.focusedCallback = callback;\r\n  }\r\n\r\n  onBlur(callback: () => void): void {\r\n    this.blurredCallback = callback;\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    const snippetController = this.editorInstance.getContribution('snippetController2');\r\n    snippetController.insert(snippet);\r\n  }\r\n\r\n  setSnippets(snippets: Snippet[]): void {\r\n    this.snippets = snippets;\r\n  }\r\n\r\n  setJsonSchema(jsonSchema: JsonSchema): void {\r\n    const uri = this.editorInstance.getModel().uri.toString();\r\n    const jsonDiagnostics = {\r\n      ...this.monaco.languages.json.jsonDefaults.diagnosticsOptions,\r\n      enableSchemaRequest: true,\r\n    };\r\n    const exists = jsonDiagnostics.schemas.some((schema: MonacoType) => schema.fileMatch[0] === uri);\r\n\r\n    if (jsonSchema?.value) {\r\n      const newSchema = jsonSchema.type === 'link'\r\n        ? { uri: jsonSchema.value, fileMatch: [uri] }\r\n        : { uri, fileMatch: [uri], schema: JSON.parse(jsonSchema.value) };\r\n\r\n      jsonDiagnostics.schemas = exists\r\n        ? jsonDiagnostics.schemas.map((schema: MonacoType) => schema.fileMatch[0] === uri ? newSchema : schema)\r\n        : [...jsonDiagnostics.schemas, newSchema];\r\n    } else {\r\n      if (!exists) { return; }\r\n      jsonDiagnostics.schemas = jsonDiagnostics.schemas.filter((schema: MonacoType) => schema.fileMatch[0] !== uri);\r\n    }\r\n\r\n    this.monaco.languages.json.jsonDefaults.setDiagnosticsOptions(jsonDiagnostics);\r\n  }\r\n\r\n  private createGlobalCache(monaco: MonacoType): Monaco2sxc {\r\n    if (monaco._2sxc == null) {\r\n      const _2sxc: Monaco2sxc = {\r\n        themesAreDefined: false,\r\n        savedStates: {},\r\n      };\r\n      monaco._2sxc = _2sxc;\r\n    }\r\n    return monaco._2sxc;\r\n  }\r\n\r\n  /** Registers our themes. Themes are global. Run before creating editor */\r\n  private defineThemes(globalCache: Monaco2sxc, monaco: MonacoType): void {\r\n    // there is currently no official way to get defined themes from Monaco to check if some theme was already defined\r\n    if (globalCache.themesAreDefined) { return; }\r\n    globalCache.themesAreDefined = true;\r\n\r\n    monaco.editor.defineTheme('2sxc-dark', {\r\n      base: 'vs-dark',\r\n      inherit: true,\r\n      rules: [\r\n        { token: 'metatag.cs', foreground: 'ffff00' },\r\n      ],\r\n    });\r\n  }\r\n\r\n  private createInstance(monaco: MonacoType, filename: string, value: string, container: HTMLElement, options: MonacoType): MonacoType {\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.istandaloneeditorconstructionoptions.html\r\n    const editorInstance = monaco.editor.create(container, options);\r\n    // editorInstance.updateOptions({ readOnly: true })\r\n    const editorModelUri = monaco.Uri.file(filename);\r\n    const editorModel = monaco.editor.createModel(value, undefined, editorModelUri);\r\n    editorInstance.setModel(editorModel);\r\n    // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.editor.itextmodelupdateoptions.html\r\n    // editorInstance.getModel().updateOptions({ tabSize: 2 });\r\n    return editorInstance;\r\n  }\r\n\r\n  private saveState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const viewState = JSON.stringify(editorInstance.saveViewState());\r\n\r\n    if (globalCache.savedStates[uri] == null) {\r\n      globalCache.savedStates[uri] = { viewState };\r\n    } else {\r\n      globalCache.savedStates[uri].viewState = viewState;\r\n    }\r\n  }\r\n\r\n  private restoreState(globalCache: Monaco2sxc, editorInstance: MonacoType): void {\r\n    const uri = editorInstance.getModel().uri.toString();\r\n    const savedState = globalCache.savedStates[uri];\r\n    if (savedState == null) { return; }\r\n\r\n    const viewState = JSON.parse(savedState.viewState);\r\n    editorInstance.restoreViewState(viewState);\r\n  }\r\n\r\n  private addSnippets(monaco: MonacoType, editorInstance: MonacoType): MonacoType[] {\r\n    const completionItemProviders = [\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        triggerCharacters: ['>'],\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const textUntilPosition: string = model.getValueInRange({\r\n            startLineNumber: position.lineNumber,\r\n            startColumn: 1,\r\n            endLineNumber: position.lineNumber,\r\n            endColumn: position.column,\r\n          });\r\n\r\n          // sometimes trigger character is wrong\r\n          const trigger = textUntilPosition[textUntilPosition.length - 1];\r\n          if (trigger !== '>') { return { suggestions: [] }; }\r\n\r\n          const tagStartIndex = textUntilPosition.lastIndexOf('<');\r\n          if (tagStartIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const codeInTag = textUntilPosition.substring(tagStartIndex);\r\n          // check that > is not in between quotes like in <div class=\"car>\"\r\n          let quotes = 0;\r\n          Array.from(codeInTag).forEach(c => {\r\n            if (c === '\"') { quotes++; }\r\n          });\r\n          if (quotes % 2 !== 0) { return { suggestions: [] }; }\r\n          // check that it's not a closing tag\r\n          if (codeInTag.startsWith('</')) { return { suggestions: [] }; }\r\n          // check that tag is not already closed\r\n          if (codeInTag.indexOf('>') !== codeInTag.length - 1) { return { suggestions: [] }; }\r\n\r\n          // tag name ends with space or tag is closed completely\r\n          let tagEndIndex = codeInTag.indexOf(' ');\r\n          if (tagEndIndex === -1) {\r\n            tagEndIndex = codeInTag.indexOf('>');\r\n          }\r\n          if (tagEndIndex === -1) { return { suggestions: [] }; }\r\n\r\n          const tag = codeInTag.substring(1, tagEndIndex);\r\n          if (!tag) { return { suggestions: [] }; }\r\n          if (voidElements.includes(tag.toLocaleLowerCase())) { return { suggestions: [] }; }\r\n          if (!/[a-zA-Z0-9_-]/.test(tag)) { return { suggestions: [] }; }\r\n\r\n          const suggestions = [{\r\n            label: `</${tag}>`,\r\n            kind: monaco.languages.CompletionItemKind.Snippet,\r\n            insertText: `\\$0</${tag}>`,\r\n            insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n            range: {\r\n              startLineNumber: position.lineNumber,\r\n              endLineNumber: position.lineNumber,\r\n              startColumn: position.column,\r\n              endColumn: position.column,\r\n            },\r\n          }];\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      monaco.languages.registerCompletionItemProvider(editorInstance.getModel().getModeId(), {\r\n        provideCompletionItems: (model: MonacoType, position: MonacoType) => {\r\n          if (this.snippets == null || editorInstance.getModel() !== model) { return { suggestions: [] }; }\r\n\r\n          const word = model.getWordUntilPosition(position);\r\n          const range = {\r\n            startLineNumber: position.lineNumber,\r\n            endLineNumber: position.lineNumber,\r\n            startColumn: word.startColumn,\r\n            endColumn: word.endColumn\r\n          };\r\n          // kind and rule copied from:\r\n          // https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-completion-provider-example\r\n          const suggestions = this.snippets.map(snippet => {\r\n            if (!snippet.content) { return; }\r\n            return {\r\n              label: snippet.name,\r\n              kind: monaco.languages.CompletionItemKind.Snippet,\r\n              documentation: `${snippet.title ?? ''}\\n${snippet.help ?? ''}\\n${snippet.links ?? ''}`,\r\n              insertText: snippet.content,\r\n              insertTextRules: monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet,\r\n              range,\r\n            };\r\n          }).filter(snippet => !!snippet);\r\n          return { suggestions };\r\n        },\r\n      }),\r\n\r\n      // monaco.languages.registerHoverProvider(editorInstance.getModel().getModeId(), {\r\n      //   provideHover: (model: MonacoType, position: MonacoType) => {\r\n      //     const word = model.getWordAtPosition(position);\r\n      //     if (!word) { return; }\r\n      //     // const range = {\r\n      //     //   startLineNumber: position.lineNumber,\r\n      //     //   endLineNumber: position.lineNumber,\r\n      //     //   startColumn: word.startColumn,\r\n      //     //   endColumn: word.endColumn,\r\n      //     // };\r\n      //     if (word.word.toLocaleLowerCase() === '2sxc') {\r\n      //       const contents = [\r\n      //         { value: '2sxc - Dynamic Content and Apps for DNN' },\r\n      //         { value: '[2sxc - Dynamic Content and Apps for DNN](https://2sxc.org)' },\r\n      //         { value: '**BOLD**  \\nLine2' },\r\n      //       ];\r\n      //       return { /*range,*/ contents };\r\n      //     }\r\n      //   }\r\n      // }),\r\n    ];\r\n\r\n    return completionItemProviders;\r\n  }\r\n\r\n  private createResizeObserver(container: HTMLElement, editorInstance: MonacoType): ResizeObserver {\r\n    const resizeObserver = new ResizeObserver(() => {\r\n      editorInstance.layout();\r\n    });\r\n    resizeObserver.observe(container);\r\n    return resizeObserver;\r\n  }\r\n\r\n  private addEvents(editorInstance: MonacoType): void {\r\n    editorInstance.getModel().onDidChangeContent(() => {\r\n      const newValue = editorInstance.getModel().getValue();\r\n      if (newValue === this.cachedValue) { return; }\r\n      this.cachedValue = newValue;\r\n      this.valueChangedCallback?.(newValue);\r\n    });\r\n\r\n    editorInstance.onDidFocusEditorWidget(() => {\r\n      this.focusedCallback?.();\r\n    });\r\n\r\n    editorInstance.onDidBlurEditorWidget(() => {\r\n      this.blurredCallback?.();\r\n    });\r\n\r\n    // this.editorInstance.onDidChangeModelDecorations((e: any) => {\r\n    //   const value = this.editorInstance.getModel().getValue();\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   const valid = !markers.some(\r\n    //     (marker: any) => marker.severity === this.monaco.MarkerSeverity.Error || marker.severity === this.monaco.MarkerSeverity.Warning\r\n    //   );\r\n    // });\r\n\r\n    // this.monaco.editor.onDidChangeMarkers(() => {\r\n    //   // markers updates are async and lagging behind value updates\r\n    //   const markers = this.monaco.editor.getModelMarkers({}).filter((marker: any) => marker.resource.path === `/${this.filename}`);\r\n    //   if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Error)) {\r\n    //     // has errors\r\n    //   } else if (markers.some((marker: any) => marker.severity === this.monaco.MarkerSeverity.Warning)) {\r\n    //     // has warnings\r\n    //   } else {\r\n    //     // has no errors or warnings\r\n    //   }\r\n    // });\r\n  }\r\n}\r\n","import { AfterViewInit, Component, ElementRef, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { JsonSchema, MonacoType } from '.';\r\nimport { Snippet } from '../code-editor/models/snippet.model';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { MonacoInstance } from './monaco-instance';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-monaco-editor',\r\n  templateUrl: './monaco-editor.component.html',\r\n  styleUrls: ['./monaco-editor.component.scss'],\r\n})\r\nexport class MonacoEditorComponent implements AfterViewInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') private editorRef: ElementRef<HTMLElement>;\r\n  @Input() filename: string;\r\n  @Input() value: string;\r\n  @Input() snippets?: Snippet[];\r\n  @Input() options?: Record<string, any>;\r\n  @Input() jsonSchema?: JsonSchema;\r\n  @Input() autoFocus = false;\r\n  @Output() private valueChanged = new EventEmitter<string>();\r\n  @Output() private focused = new EventEmitter<undefined>();\r\n  @Output() private blurred = new EventEmitter<undefined>();\r\n\r\n  private monaco: MonacoType;\r\n  private monacoInstance?: MonacoInstance;\r\n\r\n  constructor() { }\r\n\r\n  ngAfterViewInit(): void {\r\n    window.require.config({\r\n      paths: {\r\n        vs: ['https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/0.25.2/min/vs'],\r\n      },\r\n    });\r\n\r\n    window.require(['vs/editor/editor.main'], (monaco: any) => {\r\n      this.monaco = monaco;\r\n      this.createEditor(this.autoFocus);\r\n    });\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes.filename != null && this.monacoInstance != null) {\r\n      this.monacoInstance.destroy();\r\n      this.createEditor(true);\r\n    }\r\n    if (changes.value != null) {\r\n      this.monacoInstance?.updateValue(this.value);\r\n    }\r\n    if (changes.jsonSchema != null) {\r\n      this.monacoInstance?.setJsonSchema(this.jsonSchema);\r\n    }\r\n    if (changes.snippets != null) {\r\n      this.monacoInstance?.setSnippets(this.snippets);\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: string): void {\r\n    this.monacoInstance?.insertSnippet(snippet);\r\n    this.monacoInstance?.focus();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.monacoInstance?.destroy();\r\n  }\r\n\r\n  private createEditor(autoFocus: boolean): void {\r\n    this.monacoInstance = new MonacoInstance(\r\n      this.monaco, this.filename, this.value, this.editorRef.nativeElement, this.options, this.snippets,\r\n    );\r\n\r\n    if (this.jsonSchema) {\r\n      this.monacoInstance.setJsonSchema(this.jsonSchema);\r\n    }\r\n\r\n    this.monacoInstance.onValueChange(value => {\r\n      this.valueChanged.emit(value);\r\n    });\r\n\r\n    this.monacoInstance.onFocus(() => {\r\n      this.focused.emit();\r\n    });\r\n\r\n    this.monacoInstance.onBlur(() => {\r\n      this.blurred.emit();\r\n    });\r\n\r\n    if (autoFocus) {\r\n      this.monacoInstance.focus();\r\n    }\r\n  }\r\n}\r\n","<div class=\"editor\" #editor></div>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { coerceNumberProperty } from '@angular/cdk/coercion';\nimport * as i1 from '@angular/cdk/platform';\nimport { _getShadowRoot } from '@angular/cdk/platform';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { Subscription } from 'rxjs';\nimport * as i2 from '@angular/cdk/scrolling';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, _platform, _document, animationMode, defaults, \n    /**\n     * @deprecated `changeDetectorRef`, `viewportRuler` and `ngZone`\n     * parameters to become required.\n     * @breaking-change 14.0.0\n     */\n    changeDetectorRef, viewportRuler, ngZone) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._noopAnimations =\n            animationMode === 'NoopAnimations' && !!defaults && !defaults._forceAnimations;\n        if (elementRef.nativeElement.nodeName.toLowerCase() === 'mat-spinner') {\n            this.mode = 'indeterminate';\n        }\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n        // Safari has an issue where the circle isn't positioned correctly when the page has a\n        // different zoom level from the default. This handler triggers a recalculation of the\n        // `transform-origin` when the page zoom level changes.\n        // See `_getCircleTransformOrigin` for more info.\n        // @breaking-change 14.0.0 Remove null checks for `_changeDetectorRef`,\n        // `viewportRuler` and `ngZone`.\n        if (_platform.isBrowser && _platform.SAFARI && viewportRuler && changeDetectorRef && ngZone) {\n            this._resizeSubscription = viewportRuler.change(150).subscribe(() => {\n                // When the window is resize while the spinner is in `indeterminate` mode, we\n                // have to mark for check so the transform origin of the circle can be recomputed.\n                if (this.mode === 'indeterminate') {\n                    ngZone.run(() => changeDetectorRef.markForCheck());\n                }\n            });\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() {\n        return this._diameter;\n    }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        element.classList.add('mat-progress-spinner-indeterminate-animation');\n    }\n    ngOnDestroy() {\n        this._resizeSubscription.unsubscribe();\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return (this._getStrokeCircumference() * (100 - this._value)) / 100;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return (this.strokeWidth / this.diameter) * 100;\n    }\n    /** Gets the `transform-origin` for the inner circle element. */\n    _getCircleTransformOrigin(svg) {\n        var _a;\n        // Safari has an issue where the `transform-origin` doesn't work as expected when the page\n        // has a different zoom level from the default. The problem appears to be that a zoom\n        // is applied on the `svg` node itself. We can work around it by calculating the origin\n        // based on the zoom level. On all other browsers the `currentScale` appears to always be 1.\n        const scale = ((_a = svg.currentScale) !== null && _a !== void 0 ? _a : 1) * 50;\n        return `${scale}% ${scale}%`;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return (INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`));\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinner, deps: [{ token: i0.ElementRef }, { token: i1.Platform }, { token: DOCUMENT, optional: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS }, { token: i0.ChangeDetectorRef }, { token: i2.ViewportRuler }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nMatProgressSpinner.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.2.0\", type: MatProgressSpinner, selector: \"mat-progress-spinner, mat-spinner\", inputs: { color: \"color\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", mode: \"mode\", value: \"value\" }, host: { attributes: { \"role\": \"progressbar\", \"tabindex\": \"-1\" }, properties: { \"class._mat-animation-noopable\": \"_noopAnimations\", \"style.width.px\": \"diameter\", \"style.height.px\": \"diameter\", \"attr.aria-valuemin\": \"mode === \\\"determinate\\\" ? 0 : null\", \"attr.aria-valuemax\": \"mode === \\\"determinate\\\" ? 100 : null\", \"attr.aria-valuenow\": \"mode === \\\"determinate\\\" ? value : null\", \"attr.mode\": \"mode\" }, classAttribute: \"mat-progress-spinner mat-spinner\" }, exportAs: [\"matProgressSpinner\"], usesInheritance: true, ngImport: i0, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"], directives: [{ type: i3.NgSwitch, selector: \"[ngSwitch]\", inputs: [\"ngSwitch\"] }, { type: i3.NgSwitchCase, selector: \"[ngSwitchCase]\", inputs: [\"ngSwitchCase\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinner, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-progress-spinner, mat-spinner', exportAs: 'matProgressSpinner', host: {\n                        'role': 'progressbar',\n                        // `mat-spinner` is here for backward compatibility.\n                        'class': 'mat-progress-spinner mat-spinner',\n                        // set tab index to -1 so screen readers will read the aria-label\n                        // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                        'tabindex': '-1',\n                        '[class._mat-animation-noopable]': `_noopAnimations`,\n                        '[style.width.px]': 'diameter',\n                        '[style.height.px]': 'diameter',\n                        '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                        '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                        '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                        '[attr.mode]': 'mode',\n                    }, inputs: ['color'], changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\"\\n  #svg>\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"\\n    [style.transform-origin]=\\\"_getCircleTransformOrigin(svg)\\\"></circle>\\n</svg>\\n\", styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i1.Platform }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [DOCUMENT]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Inject,\n                        args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n                    }] }, { type: i0.ChangeDetectorRef }, { type: i2.ViewportRuler }, { type: i0.NgZone }];\n    }, propDecorators: { diameter: [{\n                type: Input\n            }], strokeWidth: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], value: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatProgressSpinnerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, declarations: [MatProgressSpinner], imports: [MatCommonModule, CommonModule], exports: [MatProgressSpinner, MatCommonModule] });\nMatProgressSpinnerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, imports: [[MatCommonModule, CommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.2.0\", ngImport: i0, type: MatProgressSpinnerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatCommonModule, CommonModule],\n                    exports: [MatProgressSpinner, MatCommonModule],\n                    declarations: [MatProgressSpinner],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * @deprecated Import `MatProgressSpinner` instead. Note that the\n *    `mat-spinner` selector isn't deprecated.\n * @breaking-change 8.0.0\n */\n// tslint:disable-next-line:variable-name\nconst MatSpinner = MatProgressSpinner;\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_code-editor_code-editor_module_ts-projects_ng-dialogs_src_app_sha-ff0107.b958f5a34a9dee34.js"}