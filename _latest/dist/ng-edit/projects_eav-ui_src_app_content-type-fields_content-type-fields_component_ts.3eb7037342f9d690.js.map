{"version":3,"file":"projects_eav-ui_src_app_content-type-fields_content-type-fields_component_ts.3eb7037342f9d690.js","mappings":"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","names":["i0","_r2","ctx_r2","do","shareText","shareOrInheritIcon","_r4","_r5","field","EditInfo","DisableRename","DisableDelete","IsTitle","ContentTypeFieldsActionsComponent","agInit","params","this","data","disableEdit","DisableEdit","enablePermissions","InputType","InputTypeCatalog","StringWysiwyg","Type","DataTypeCatalog","Hyperlink","enableMetadata","DisableMetadata","metadataCount","Metadata","Object","keys","filter","key","length","enableImageConfig","imageConfiguration","isRecommended","imgConfigCount","entityId","highlightOrDisabled","toggle","clickToConfigure","ss","SysSettings","Share","Guid","InheritMetadataOf","refresh","verb","static","t","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","ContentTypeFieldsActionsComponent_Conditional_10_Template","ContentTypeFieldsActionsComponent_Conditional_11_Template","ContentTypeFieldsActionsComponent_ng_template_17_Template","Permissions","Count","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","styles","ctx_r1","changeInputType","value","ContentTypeFieldsInputTypeComponent","onChangeInputType","ContentTypeFieldsInputTypeComponent_Conditional_0_Template","ContentTypeFieldsInputTypeComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent_Conditional_1_Template","ContentTypeFieldsSpecialComponent_Conditional_2_Template","setTitle","isTitle","suitableForTitle","ContentTypeFieldsTitleComponent","constructor","InputTypeHelpers","isEmpty","onSetTitle","ContentTypeFieldsTitleComponent_Conditional_1_Template","ContentTypeFieldsTitleComponent_Conditional_2_Template","ReadOnly","ContentTypeFieldsTypeComponent","icon","calculateTypeIcon","SharingOrInheriting","None","Sharing","Inheriting","closeDialog","message","dialogData","_r3","chooseShare","chooseInherit","field_r5","ContentType","Name","field_r6","StaticName","field_r7","row_r9","_r8","$implicit","inheritField","_c0","guid","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_4_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_6_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_7_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_th_9_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_td_10_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_11_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_tr_12_Template","shareableFields","displayedShareableFieldsColumns","ShareOrInheritDialogComponent_Conditional_9_Conditional_1_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_2_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_3_Template","ShareOrInheritDialogComponent_Conditional_9_Conditional_4_Template","state","sharingOrInheriting","_r10","save","isSaveDisabled","ShareOrInheritDialogComponent","BaseComponent","dialogRef","dialog","viewContainerRef","changeDetectorRef","super","initialState","signal","undefined","inject","FeaturesScopedService","fieldShareConfigManagement","isEnabled","FeatureNames","FieldShareConfigManagement","contentTypesFieldsService","transient","ContentTypesFieldsService","ngOnInit","title","getShareableFieldsFor","AttributeId","subscribe","set","subscriptions","add","share","Id","close","inherit","openFeatureDialog","MAT_DIALOG_DATA","ShareOrInheritDialogComponent_Conditional_5_Template","ShareOrInheritDialogComponent_Conditional_7_Template","ShareOrInheritDialogComponent_Conditional_8_Template","ShareOrInheritDialogComponent_Conditional_9_Template","ShareOrInheritDialogComponent_Conditional_10_Template","MatButtonModule","MatCardModule","MatTableModule","i5","NgClass","TranslateModule","i6","FeatureIconIndicatorComponent","ContentTypeFieldsComponent","#dialogRouter","snackBar","DialogRoutingService","contentType","fields","gridOptions","buildGridOptions","sortApplied","filterApplied","rowDragSuppressed","contentTypeStaticName","getParam","contentTypesService","ContentTypesService","fetchFields","doOnDialogClosed","onGridReady","gridApi","api","columnApi","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","map","reOrder","onRowDragMove","movingNode","node","overNode","movingData","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","clearFocusedCell","arr","element","splice","onSortChanged","columnStates","getColumnState","some","sort","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","navRelative","nameCellRenderer","inputType","endsPreviousGroup","isGroupOpen","isGroupStart","isGroupEnd","callback","contentTypeTemp","retrieveContentType","of","fieldsTemp","getFields","forkJoin","editFieldMetadata","ConfigTypes","open","duration","form","items","createItemDefinition","formUrl","convertFormToUrl","metadataType","keyForMdLookup","replace","newItemTypeName","existingMd","EditPrep","editId","newMetadata","eavConstants","metadata","attribute","Prefill","rename","delete","confirm","openPermissions","GoToPermissions","getUrlAttribute","openImageConfiguration","imgConfig","Error","itemIdentifier","typeName","openMetadata","url","GoToMetadata","shareOrInherit","autoFocus","width","afterClosed","defaultGridOptions","getRowClass","rowClass","DisableSort","push","columnDefs","rowDrag","cellClass","split","valueGetter","p","cellRenderer","cellRendererParams","ColumnDefinitions","TextWidePrimary","headerName","onCellClicked","headerClass","sortable","substring","flex","minWidth","All","Notes","ActionsPinnedRight5","$event","tmp_0_0","Label","RouterOutlet","MatDialogActions","ToggleDebugDirective","SxcGridModule","encapsulation","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","ctx_r0","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","cellClassSecAction","actionsRight","pinned","textSortFilter","ActionsPinnedRight1","ActionsPinnedRight3","ActionsPinnedRight4","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","BooleanFilterComponent","IsHidden","Items","Fields","Character","IdWithDefaultRenderer","IdFieldComponent","Boolean","Boolean2","Boolean3","Number","TextWide","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","idFieldParamsTooltipGetter","tooltipGetter","filterParams","isFilterActive","doesFilterPass","colDef","column","context","getValue","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","FormsModule","MatRadioModule","id","align","copy","copyToClipboard","_angular_core__WEBPACK_IMPORTED_MODULE_1__","logSpecs","ServiceBase","router","route","log","classLog","snapshot","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","l","fnIf","childDialogClosed$","end","navPath","navigate","commands","relativeTo","navParentFirstChild","parent","firstChild","events","pipe","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","jDH","factory","ɵfac","Subscription","ngOnDestroy","destroy","unsubscribe","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","type","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-special/content-type-fields-special.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.html","./projects/eav-ui/src/app/content-type-fields/content-type-fields-title/content-type-fields-title.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields-type/content-type-fields-type.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog-models.ts","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.html","./projects/eav-ui/src/app/content-type-fields/share-or-inherit-dialog/share-or-inherit-dialog.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.ts","./projects/eav-ui/src/app/content-type-fields/content-type-fields.component.html","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  <!-- Metadata Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableMetadata) }}\"\r\n    matRipple tippy=\"Metadata\"\r\n    (click)=\"enableMetadata ? do('metadata') : ''\"\r\n  >\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enableMetadata\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n    >local_offer</mat-icon>\r\n  </div>\r\n\r\n  <!-- Image Config Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enableImageConfig) }}\"\r\n    matRipple\r\n    tippy=\"{{ enableImageConfig ? 'Image Configuration' : 'no image configuration for this field' }}\"\r\n    (click)=\"enableImageConfig ? do('image') : ''\">\r\n    <mat-icon [matBadge]=\"imgConfigCount\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!imgConfigCount\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      matBadgeColor=\"accent\" [matBadgeDisabled]=\"!enableImageConfig\"\r\n      >filter_center_focus</mat-icon>\r\n  </div>\r\n\r\n  <!-- Permissions Button -->\r\n  <div class=\"eav-grid-action-button {{ highlightOrDisabled(enablePermissions) }}\"\r\n    matRipple\r\n    tippy=\"{{ enablePermissions ? 'Permissions' : 'no permissions to configure on this field' }}\"\r\n    (click)=\"enablePermissions ? do('permissions') : ''\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeDisabled]=\"!enablePermissions\"\r\n      [matBadgeHidden]=\"!field.Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\"\r\n      >person</mat-icon>\r\n  </div>\r\n\r\n\r\n  <!-- Share Button -->\r\n  <!--\r\n    TODO: @SDV pls enhance as follows\r\n    ✅ If share is on or InheritMetadata is on, show various icons (already done)\r\n    ✅ If neither is on, it should not show an icon, until mouseover, then it should show the share icon to indicate it can be added\r\n    ❓ If the click should add sharing, open a dialog to configure share\r\n        - if there is no share it should Title \"Field Metadata Sharing\" show with the question \"Do you want to enable sharing to this field?\"\r\n          - if yes, it should call an endpoint on field/share(appId, attributeId, share: true, hide: false) (just add a todo in the code which will call the endpoint)\r\n        - If Share is already enabled, the Title should be \"Field Metadata Sharing\" (same) and content \"Shared as: [field.Guid]\"\r\n        - If it's in inherit mode, different dialog Title \"Field Inherits Metadata\", content \"Inherits from: [field.SysSettings.InheritMetadataOf]\"\r\n          - there is no endpoint to call here, because inherit is configured on create (separate todo)\r\n  -->\r\n  @if (shareOrInheritIcon() != '') {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\">\r\n        {{ shareOrInheritIcon() }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @else {\r\n    <div class=\"eav-grid-action-button disabled eav-hover-icon-div\" matRipple [tippy]=\"shareText()\" (click)=\"do('shareOrInherit')\">\r\n      <mat-icon aria-hidden=\"false\" class=\"eav-hover-icon disabled\">\r\n        share\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <!-- More Button -->\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<!-- More Menu -->\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableRename\" (click)=\"do('rename')\">\r\n      <mat-icon>text_fields</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"field.EditInfo.DisableDelete || field.IsTitle\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeCatalog } from '../../shared/fields/data-type-catalog';\r\nimport { InputTypeCatalog } from '../../shared/fields/input-type-catalog';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsActions, ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  enableMetadata: boolean;\r\n\r\n  enableImageConfig: boolean;\r\n  imgConfigCount: number;\r\n  private params: ICellRendererParams & ContentTypeFieldsActionsParams;\r\n\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsActionsParams): void {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    const disableEdit = this.field.EditInfo.DisableEdit;\r\n\r\n    this.enablePermissions = !disableEdit && (this.field.InputType === InputTypeCatalog.StringWysiwyg || this.field.Type === DataTypeCatalog.Hyperlink);\r\n    this.enableMetadata = !this.field.EditInfo.DisableMetadata;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n\r\n    this.enableImageConfig = !disableEdit && this.field.imageConfiguration.isRecommended;\r\n    this.imgConfigCount = this.field.imageConfiguration.entityId ? 1 : 0;\r\n  }\r\n\r\n  highlightOrDisabled(toggle: boolean): string {\r\n    return toggle ? 'highlight' : 'disabled';\r\n  }\r\n\r\n  // #region Sharing Info for better icons #SharedFieldDefinition\r\n\r\n  shareText(): string {\r\n    const clickToConfigure = 'click to configure sharing';\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return clickToConfigure;\r\n    return ss.Share\r\n      ? 'shared enabled as ' + this.field.Guid\r\n      : ss.InheritMetadataOf\r\n        ? 'inherits ' + ss.InheritMetadataOf\r\n        : clickToConfigure;\r\n  }\r\n\r\n  shareOrInheritIcon(): string {\r\n    const ss = this.field.SysSettings;\r\n    if (!ss) return '';\r\n    return ss.Share\r\n      ? 'share'\r\n      : ss.InheritMetadataOf ? 'adjust' : '';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentTypeFieldsActions): void {\r\n    this.params.do(verb, this.field);\r\n  }\r\n\r\n}\r\n","@if (!field.EditInfo.DisableEdit) {\r\n  <div matRipple class=\"input-component highlight\" (click)=\"changeInputType()\">\r\n    <div class=\"text\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}\r\n\r\n@if (field.EditInfo.DisableEdit) {\r\n  <div class=\"input-component disabled\">\r\n    <div class=\"text disabled\">{{ value }}</div>\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>arrow_drop_down</mat-icon>\r\n    </div>\r\n  </div>\r\n}","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  field: Field;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsInputTypeParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsInputTypeParams): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.field = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  changeInputType(): void {\r\n    this.params.onChangeInputType(this.field);\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  @if (hasFormulas) {\r\n    <mat-icon tippy=\"Has Formulas\">functions</mat-icon>\r\n  }\r\n  @if (isEphemeral) {\r\n    <mat-icon tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n  standalone: true,\r\n  imports: [MatIconModule,],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  @if (!field.EditInfo.ReadOnly)\r\n  {\r\n    <div class=\"eav-grid-action-button highlight {{ isTitle ? '' : suitableForTitle ? 'hover-only' : 'no-button' }}\"\r\n      [attr.disabled]=\"isTitle || !suitableForTitle\"\r\n      matRipple\r\n      tippy=\"Use as title field\"\r\n      (click)=\"setTitle()\"\r\n    >\r\n      <mat-icon>star</mat-icon>\r\n    </div>\r\n  }\r\n  @else\r\n  {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>{{ isTitle ? 'star' : '' }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { InputTypeHelpers } from '../../shared/fields/input-type-helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n\r\n  isTitle: boolean;\r\n  \r\n  field: Field;\r\n\r\n  suitableForTitle = true;\r\n\r\n  private params: ICellRendererParams & ContentTypeFieldsTitleParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentTypeFieldsTitleParams): void {\r\n    this.params = params;\r\n    this.isTitle = params.value;\r\n    this.field = params.data;\r\n\r\n    this.suitableForTitle = !InputTypeHelpers.isEmpty(this.field.InputType)\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  setTitle(): void {\r\n    if (this.suitableForTitle)\r\n      this.params.onSetTitle(this.field);\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","\r\nexport enum SharingOrInheriting {\r\n  None,\r\n  Sharing,\r\n  Inheriting\r\n}\r\n","<div class=\"eav-dialog eav-no-scrollbar\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ title | translate }}\r\n    </div>\r\n    @if (initialState != sharingOrInheriting.None) {\r\n      <button mat-icon-button tippy=\"Close dialog\"\r\n        (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    }\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    @if (initialState == sharingOrInheriting.Sharing) {\r\n      <div>{{ message | translate }} {{ dialogData.Guid }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.Inheriting) {\r\n      <div>{{ message| translate }} {{\r\n      dialogData.SysSettings.InheritMetadataOf }}</div>\r\n    }\r\n    @if (initialState == sharingOrInheriting.None) {\r\n      <div>\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\"\r\n          (click)=\"chooseShare()\">Share</button>\r\n        }\r\n        @if (state == sharingOrInheriting.None) {\r\n          <button mat-raised-button type=\"button\"\r\n          (click)=\"chooseInherit()\">Inherit</button>\r\n        }\r\n        @if (state == sharingOrInheriting.Sharing) {\r\n          <span>This will share the field definition</span>\r\n        }\r\n        @if (state == sharingOrInheriting.Inheriting) {\r\n          <mat-card class=\"eav-table-div\">\r\n            <table mat-table [dataSource]=\"shareableFields()\" class=\"mat-elevation-z8 eav-fields-table\">\r\n              <ng-container matColumnDef=\"contentType\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Content Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.ContentType.Name}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"name\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Name</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.StaticName}} </td>\r\n              </ng-container>\r\n              <ng-container matColumnDef=\"type\">\r\n                <th mat-header-cell *matHeaderCellDef> <b>Type</b> </th>\r\n                <td mat-cell *matCellDef=\"let field\"> {{field.Type}} </td>\r\n              </ng-container>\r\n              <tr mat-header-row *matHeaderRowDef=\"displayedShareableFieldsColumns\"></tr>\r\n              <tr mat-row *matRowDef=\"let row; columns: displayedShareableFieldsColumns;\"\r\n              [ngClass]=\"{'eav-selected-row': guid === row.Guid}\" (click)=\"inheritField(row)\"></tr>\r\n            </table>\r\n          </mat-card>\r\n        }\r\n      </div>\r\n    }\r\n  </div>\r\n  @if (initialState == sharingOrInheriting.None) {\r\n    <div class=\"eav-dialog-actions-custom\">\r\n      <button mat-raised-button type=\"button\" class=\"eav-dialog-action-button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" class=\"eav-dialog-action-button\"\r\n        [disabled]=\"isSaveDisabled\" (click)=\"save()\">\r\n        <div class=\"eav-button-feature\">\r\n          <span>Save</span>\r\n          <app-feature-icon-indicator class=\"eav-button-feature-icon\" [featureNameId]=\"'FieldShareConfigManagement'\"></app-feature-icon-indicator>\r\n        </div>\r\n      </button>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ChangeDetectorRef, Component, Inject, OnDestroy, OnInit, ViewContainerRef, inject, signal } from '@angular/core';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ContentTypesFieldsService } from '../../shared/fields/content-types-fields.service';\r\nimport { SharingOrInheriting } from './share-or-inherit-dialog-models';\r\nimport { openFeatureDialog } from '../../features/shared/base-feature.component';\r\nimport { FeaturesScopedService } from '../../features/features-scoped.service';\r\nimport { FeatureNames } from '../../features/feature-names';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FeatureIconIndicatorComponent } from '../../features/feature-icon-indicator/feature-icon-indicator.component';\r\nimport { transient } from '../../core/transient';\r\n\r\n@Component({\r\n  selector: 'app-share-or-inherit-dialog',\r\n  templateUrl: './share-or-inherit-dialog.component.html',\r\n  styleUrls: ['./share-or-inherit-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatTableModule,\r\n    NgClass,\r\n    TranslateModule,\r\n    FeatureIconIndicatorComponent\r\n  ],\r\n})\r\nexport class ShareOrInheritDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  displayedShareableFieldsColumns: string[] = ['contentType', 'name', 'type'];\r\n  title: string;\r\n  message: string;\r\n  state: SharingOrInheriting = SharingOrInheriting.None;\r\n  initialState: SharingOrInheriting = SharingOrInheriting.None;\r\n  sharingOrInheriting = SharingOrInheriting;\r\n  guid: string = null;\r\n  isSaveDisabled: boolean = true;\r\n\r\n  shareableFields = signal<Field[]>(undefined);\r\n\r\n  public features = inject(FeaturesScopedService);\r\n  private fieldShareConfigManagement = this.features.isEnabled(FeatureNames.FieldShareConfigManagement);\r\n\r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: Field,\r\n    private dialogRef: MatDialogRef<ShareOrInheritDialogComponent>,\r\n    // All this is just for the feature dialog\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.initialState = !this.dialogData.SysSettings || (!this.dialogData.SysSettings.Share && !this.dialogData.SysSettings.InheritMetadataOf)\r\n      ? SharingOrInheriting.None\r\n      : this.dialogData.SysSettings.Share\r\n        ? SharingOrInheriting.Sharing\r\n        : SharingOrInheriting.Inheriting;\r\n    if (this.initialState === SharingOrInheriting.None) {\r\n      this.title = 'SharingOrInheriting.TitleNone';\r\n      const shareableFieldsTemp$ = this.contentTypesFieldsService.getShareableFieldsFor(this.dialogData.AttributeId);\r\n\r\n      shareableFieldsTemp$.subscribe((shareableFields) => {\r\n        this.shareableFields.set(shareableFields);\r\n      });\r\n\r\n    } else if (this.initialState === SharingOrInheriting.Sharing) {\r\n      this.title = 'SharingOrInheriting.TitleSharing';\r\n      this.message = 'SharingOrInheriting.MessageSharing';\r\n    } else if (this.initialState === SharingOrInheriting.Inheriting) {\r\n      this.title = 'SharingOrInheriting.TitleInheriting';\r\n      this.message = 'SharingOrInheriting.MessageInheriting';\r\n    }\r\n  }\r\n\r\n  chooseShare() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Sharing;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  chooseInherit() {\r\n    this.guid = null;\r\n    this.state = SharingOrInheriting.Inheriting;\r\n    this.isSaveDisabled = true;\r\n  }\r\n\r\n  inheritField(field: Field) {\r\n    this.guid = field.Guid;\r\n    this.isSaveDisabled = false;\r\n  }\r\n\r\n  save() {\r\n    if (!this.fieldShareConfigManagement()) {\r\n      openFeatureDialog(this.dialog, FeatureNames.FieldShareConfigManagement, this.viewContainerRef, this.changeDetectorRef);\r\n      return;\r\n    }\r\n\r\n    if (this.state == SharingOrInheriting.Sharing) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.share(this.dialogData.Id)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    } else if (this.state == SharingOrInheriting.Inheriting) {\r\n      this.subscriptions.add(this.contentTypesFieldsService.inherit(this.dialogData.Id, this.guid)\r\n        .subscribe(() => this.dialogRef.close()));\r\n    }\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { ColumnApi, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowClassParams, RowDragEvent, SortChangedEvent } from '@ag-grid-community/core';\r\nimport { Component, OnInit, signal } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { forkJoin, of } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { ItemAddIdentifier, EditForm, ItemEditIdentifier, ItemIdentifier, EditPrep } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsInputTypeParams } from './content-type-fields-input-type/content-type-fields-input-type.models';\r\nimport { ContentTypeFieldsSpecialComponent } from './content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTitleParams } from './content-type-fields-title/content-type-fields-title.models';\r\nimport { ContentTypeFieldsTypeComponent } from './content-type-fields-type/content-type-fields-type.component';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { ContentTypesFieldsService } from '../shared/fields/content-types-fields.service';\r\nimport { ShareOrInheritDialogComponent } from './share-or-inherit-dialog/share-or-inherit-dialog.component';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../core';\r\nimport { InputTypeHelpers } from '../shared/fields/input-type-helpers';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    NgClass,\r\n    MatDialogActions,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit {\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  contentType = signal<ContentType>(undefined);\r\n  fields = signal<Field[]>(undefined);\r\n\r\n  gridOptions = this.buildGridOptions();\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n\r\n  private gridApi: GridApi;\r\n  private columnApi: ColumnApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private contentTypesFieldsService = transient(ContentTypesFieldsService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchFields());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n    this.columnApi = params.columnApi;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields().map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType()).subscribe(() => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) return;\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields()];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields.set(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const columnStates = this.columnApi.getColumnState();\r\n    this.sortApplied = columnStates.some(state => state.sort != null);\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.#dialogRouter.navRelative([`add/${this.contentTypeStaticName}`]);\r\n  }\r\n\r\n  private nameCellRenderer(params: Omit<ICellRendererParams, 'data'> & { data: Field }) {\r\n    const inputType = params.data.InputType;\r\n\r\n    if (InputTypeHelpers.endsPreviousGroup(inputType))\r\n      return params.value;\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields()) {\r\n      if (InputTypeHelpers.isGroupStart(inputType)) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (InputTypeHelpers.isGroupEnd(inputType)) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === params.data.StaticName)\r\n        break;\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    const contentTypeTemp = this.contentType() == null\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n      : of(this.contentType());\r\n    const fieldsTemp = this.contentTypesFieldsService.getFields(this.contentTypeStaticName);\r\n    forkJoin([contentTypeTemp, fieldsTemp]).subscribe(([contentType, fields]) => {\r\n      this.contentType.set(contentType);\r\n      this.fields.set(fields);\r\n      if (callback != null)\r\n        callback();\r\n    });\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    // 2023-11-10 @2dm #ConfigTypesFromBackend\r\n    // https://github.com/2sic/2sxc/issues/3205\r\n    // Keep old code in till 2024-01 for ref in case something breaks\r\n    // console.warn('2dm - editFieldMetadata', field);\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes);\r\n    // const form: EditForm = {\r\n    //   items: [\r\n    //     this.createItemDefinition(field, 'All'),\r\n    //     this.createItemDefinition(field, field.Type),\r\n    //     this.createItemDefinition(field, field.InputType),\r\n    //   ],\r\n    // };\r\n\r\n    // If this field is inherited and therefor has no own metadata, show a snackbar and exit\r\n    if (field.SysSettings?.InheritMetadataOf) {\r\n      if (!Object.keys(field.ConfigTypes).length) {\r\n        this.snackBar.open('This field inherits all configuration so there is nothing to edit.', null, { duration: 3000 });\r\n        return;\r\n      }\r\n      this.snackBar.open('This field inherits some configuration. Edit will only show configuration which is not inherited.', null, { duration: 5000 });\r\n    }\r\n\r\n    // if this field is shared/can-be-inherited, show warning so the user is aware of it\r\n    if (field.SysSettings?.Share)\r\n      this.snackBar.open('This field is shared, so changing it will affect all other fields inheriting it.', null, { duration: 5000 });\r\n\r\n    const form: EditForm = {\r\n      items: Object.keys(field.ConfigTypes).map((t) => this.createItemDefinition(field, t))\r\n    };\r\n    // console.warn('2dm - editFieldMetadata', field.ConfigTypes, form);\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): ItemAddIdentifier | ItemEditIdentifier {\r\n    // The keys could start with an @ but may not, and in some cases we need it, others we don't\r\n    const keyForMdLookup = metadataType.replace('@', '');\r\n    const newItemTypeName = ('@' + metadataType).replace('@@', '@');\r\n\r\n    // Is an item of this type already loaded? Then just edit it, otherwise request new as Metadata\r\n    const existingMd = field.Metadata[keyForMdLookup];\r\n    return existingMd != null\r\n      ? EditPrep.editId(existingMd.Id) // if defined, return the entity-number to edit\r\n      : {\r\n        ...EditPrep.newMetadata(field.Id, newItemTypeName, eavConstants.metadata.attribute),\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n\r\n  private setTitle(field: Field) {\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.contentTypeStaticName}/${field.Id}/inputType`]);\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.#dialogRouter.navRelative([`update/${this.contentTypeStaticName}/${field.Id}/name`]);\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType()).subscribe(() => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlAttribute(field.Id)]);\r\n  }\r\n\r\n  private openImageConfiguration(field: Field) {\r\n    const imgConfig = field.imageConfiguration;\r\n    if (imgConfig?.isRecommended != true)\r\n      throw new Error('This field does not expect to have an image configuration');\r\n\r\n    const itemIdentifier: ItemIdentifier = imgConfig.entityId\r\n      ? EditPrep.editId(imgConfig.entityId)\r\n      : EditPrep.newMetadata(field.Id, imgConfig.typeName, eavConstants.metadata.attribute);\r\n    const formUrl = convertFormToUrl({ items: [itemIdentifier] });\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.#dialogRouter.navRelative([url]);\r\n  }\r\n\r\n  private shareOrInherit(field: Field) {\r\n    const shareOrInheritDialogRef = this.dialog.open(ShareOrInheritDialogComponent, {\r\n      autoFocus: false,\r\n      width: '800px',\r\n      data: field,\r\n    });\r\n    shareOrInheritDialogRef.afterClosed().subscribe(() => this.fetchFields());\r\n  }\r\n\r\n  //#region Grid Options\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      getRowClass(params: RowClassParams) {\r\n        const field: Field = params.data;\r\n        const rowClass: string[] = [];\r\n        if (field.EditInfo.DisableSort) { rowClass.push('disable-row-drag'); }\r\n        if (InputTypeHelpers.isGroupStart(field.InputType)) { rowClass.push('group-start-row'); }\r\n        if (InputTypeHelpers.isGroupEnd(field.InputType)) { rowClass.push('group-end-row'); }\r\n        return rowClass;\r\n      },\r\n      columnDefs: [\r\n        {\r\n          rowDrag: true,\r\n          width: 18,\r\n          cellClass: 'no-select no-padding no-outline'.split(' '),\r\n        },\r\n        {\r\n          field: 'Title',\r\n          width: 42,\r\n          cellClass: 'secondary-action no-padding no-outline'.split(' '),\r\n          valueGetter: (p: { data: Field }) => p.data.IsTitle,\r\n          cellRenderer: ContentTypeFieldsTitleComponent,\r\n          cellRendererParams: (() => ({\r\n            onSetTitle: (field) => this.setTitle(field),\r\n          } satisfies ContentTypeFieldsTitleParams))(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWidePrimary,\r\n          headerName: 'Name',\r\n          field: 'StaticName',\r\n          onCellClicked: (p: { data: Field }) => this.editFieldMetadata(p.data),\r\n          cellRenderer: (params: ICellRendererParams) => this.nameCellRenderer(params),\r\n        },\r\n        {\r\n          field: 'Type',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Type,\r\n          cellRenderer: ContentTypeFieldsTypeComponent,\r\n        },\r\n        {\r\n          headerName: 'Input',\r\n          field: 'InputType',\r\n          width: 160,\r\n          cellClass: (p: { data: Field }) => `${p.data.EditInfo.DisableEdit ? 'no-outline no-padding' : 'secondary-action no-padding'}`.split(' '),\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.InputType.substring(p.data.InputType.indexOf('-') + 1),\r\n          cellRenderer: ContentTypeFieldsInputTypeComponent,\r\n          cellRendererParams: (() => ({\r\n            onChangeInputType: (field) => this.changeInputType(field),\r\n          } satisfies ContentTypeFieldsInputTypeParams))(),\r\n        },\r\n        {\r\n          field: 'Label',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Name,\r\n        },\r\n        {\r\n          field: 'Special',\r\n          width: 66,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n          cellRenderer: ContentTypeFieldsSpecialComponent,\r\n        },\r\n        {\r\n          field: 'Notes',\r\n          flex: 2,\r\n          minWidth: 250,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          filter: 'agTextColumnFilter',\r\n          valueGetter: (p: { data: Field }) => p.data.Metadata?.All?.Notes,\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight5,\r\n          cellRenderer: ContentTypeFieldsActionsComponent,\r\n          cellRendererParams: (() => ({\r\n            do: (verb, field) => {\r\n              switch (verb) {\r\n                case 'rename': this.rename(field); break;\r\n                case 'delete': this.delete(field); break;\r\n                case 'permissions': this.openPermissions(field); break;\r\n                case 'metadata': this.openMetadata(field); break;\r\n                case 'shareOrInherit': this.shareOrInherit(field); break;\r\n                case 'image': this.openImageConfiguration(field); break;\r\n              }\r\n            }\r\n          } satisfies ContentTypeFieldsActionsParams))(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n\r\n  //#endregion\r\n}\r\n","<div class=\"eav-dialog nav-component-wrapper\" appToggleDebug>\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ contentType()?.Label || contentType()?.Name }} Fields\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields()\" [gridOptions]=\"gridOptions\"\r\n        (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n        (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n        (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n          'grid-sorted': sortApplied,\r\n          'grid-filtered': filterApplied\r\n          }\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\"\r\n      [disabled]=\"contentType() == null || contentType().EditInfo.ReadOnly\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-rest-api-true-false',\r\n  templateUrl: './true-false.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [\r\n    TippyDirective,\r\n    MatIconModule,\r\n    NgClass,\r\n  ],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\nimport { IdFieldComponent } from '../components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../components/id-field/id-field.models';\r\n\r\nconst cellClassSecAction = 'secondary-action no-padding'.split(' ');\r\n\r\nconst actionsRight: ColDef = {\r\n  cellClass: cellClassSecAction,\r\n  pinned: 'right',\r\n};\r\n\r\nconst textSortFilter: ColDef = {\r\n  sortable: true,\r\n  filter: 'agTextColumnFilter',\r\n};\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    ...actionsRight,\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 6 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    ...actionsRight,\r\n  };\r\n\r\n  // TODO: the name here is wrong - 7 indicates 6 buttons, but the size wouldn't allow this\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: cellClassSecAction + ' no-outline',\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: cellClassSecAction,\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static IdWithDefaultRenderer: ColDef = {\r\n    ...ColumnDefinitions.Id,\r\n    cellRenderer: IdFieldComponent,\r\n  }\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => ({\r\n      reverse: false,\r\n    } satisfies TrueFalseParams))(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWidePrimary: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    ...textSortFilter,\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    ...textSortFilter,\r\n  };\r\n\r\n  static idFieldParamsTooltipGetter<T extends { Id: string | number, Guid?: string }>(key?: keyof T): IdFieldParams<T> {\r\n    const objWithTooltipGetter: IdFieldParams<T> = {\r\n      tooltipGetter: (contentType: T) => `ID: ${contentType.Id}\\nGUID: ${contentType[key || \"Guid\"]}`,\r\n    };\r\n    return objWithTooltipGetter;\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[27]}