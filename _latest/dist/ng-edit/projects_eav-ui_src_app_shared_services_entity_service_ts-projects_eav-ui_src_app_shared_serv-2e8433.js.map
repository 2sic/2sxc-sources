{"version":3,"file":"projects_eav-ui_src_app_shared_services_entity_service_ts-projects_eav-ui_src_app_shared_serv-2e8433.js","mappings":"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","sources":["./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"names":["filter","map","shareReplay","switchMap","transient","classLog","HttpServiceBase","QueryService","logSpecs","all","getEntities","getAvailableEntities","delete","webApiEntityRoot","webApiEntityList","EntityService","constructor","log","queryService","getEntities$","params","fnIf","pipe","p","contentTypeName","entitiesFilter","contentTypes","itemIds","fields","data","Default","appId","contentType","entityId","force","parentId","parentField","parent","http","apiUrl","id","toString","__ngFactoryType__","factory","Éµfac","HttpClient","Context","context","getFromQuery","queryUrl","hasParams","paramsLower","toLocaleLowerCase","hasAppId","includes","allParams","urlParams","substring","post","Guids","join","i0","ÉµÉµinject","i1","i2","Subscription","ServiceBase","subscriptions","ngOnDestroy","destroy","unsubscribe"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}