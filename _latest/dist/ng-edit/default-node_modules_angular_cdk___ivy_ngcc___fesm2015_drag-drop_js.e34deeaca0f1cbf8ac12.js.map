{"version":3,"sources":["./node_modules/rxjs/_esm2015/internal/observable/interval.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/drag-drop.js"],"names":["dispatch","state","subscriber","counter","period","next","this","schedule","extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","toggleVisibility","styles","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","getEventTarget","cachedPosition","get","newTop","newLeft","scrolledParentNode","documentElement","viewportScrollPosition","topDifference","leftDifference","node","contains","composedPath","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","targetHandle","find","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","_previewRect","_preview","preventDefault","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_dropContainer","_updateActiveDropContainer","activeTransform","_pickupPositionOnPage","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","run","distance","_getDragDistance","delta","_pointerDirectionDelta","Math","abs","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","_startDragSequence","_pointerUp","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","newValue","_toggleNativeDragInteractions","_placeholder","getPlaceholderElement","getRootElement","handles","disabledHandles","add","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","delete","direction","_previewContainer","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","preview","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","getComputedStyle","transitionedProperties","property","prop","propertyIndex","rawDurations","rawDelays","getTransformTransitionDurationInMs","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","removeChild","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_draggables","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","scheduler","isNumeric","Observable","interval","animationFrame","pipe","takeUntil","_scrollNode","scrollStep","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","index","newIndex","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","splice","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","filter","every","_cacheItems","slice","orientation","_scrollableElements","findIndex","reverse","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","sibling","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getElementScrollDirections","getViewportSize","window","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","elementToMeasure","getVisibleElement","sort","a","b","current","_stopReceiving","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","nativeElement","activeSiblings","_sortFromLastPointerPosition","draggedItems","_startReceiving","predicate","amount","scrollBy","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","observer","merge","instance","ɵfac","t","ɵprov","factory","token","providedIn","DEFAULT_CONFIG","DragDrop","CDK_DRAG_PARENT","CDK_DROP_LIST_GROUP","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","CdkDropList","dragDrop","_changeDetectorRef","_scrollDispatcher","_dir","_group","_destroyed","connectedTo","id","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_items","_syncItemsWithRef","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","startWith","withDirection","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","inputs","outputs","exportAs","features","provide","useValue","useExisting","CDK_DRAG_HANDLE","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CdkDrag","_viewContainerRef","_selfHandle","_parentDrag","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","take","_updateRootElement","changes","tap","childHandleElements","rootElementSelector","withHandles","switchMap","_stateChanges","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","boundary","dir","templateRef","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","withPreviewContainer","_b","contentQueries","dirIndex","_t","first","currentElement","matches","msMatchesSelector","DragDropModule","ɵmod","ɵinj","providers","imports"],"mappings":"6YAeA,SAASA,EAASC,GACd,IAAQC,EAAgCD,EAAhCC,WAAYC,EAAoBF,EAApBE,QAASC,EAAWH,EAAXG,OAC7BF,EAAWG,KAAKF,GAChBG,KAAKC,SAAS,CAAEL,aAAYC,QAASA,EAAU,EAAGC,UAAUA,G,iHCQhE,SAASI,EAAaC,EAAMC,GACxB,IAAK,IAAIC,KAAOD,EACRA,EAAOE,eAAeD,KACtBF,EAAKE,GAAOD,EAAOC,IAG3B,OAAOF,EAQX,SAASI,EAA6BC,EAASC,GAC3C,IAAMC,EAAaD,EAAS,GAAK,OACjCP,EAAaM,EAAQG,MAAO,CACxBC,YAAaH,EAAS,GAAK,OAC3BI,eAAgBJ,EAAS,GAAK,OAC9BK,wBAAyBL,EAAS,GAAK,cACvCC,WAAYA,EACZK,aAAcL,EACdM,iBAAkBN,EAClBO,cAAeP,IASvB,SAASQ,EAAiBV,EAASC,GAC/B,IAAMU,EAASX,EAAQG,MACvBQ,EAAOC,SAAWX,EAAS,GAAK,QAChCU,EAAOE,IAAMF,EAAOG,QAAUb,EAAS,GAAK,IAC5CU,EAAOI,KAAOd,EAAS,GAAK,SAMhC,SAASe,EAAkBC,EAAWC,GAClC,OAAOA,EAAoBD,EAAY,IAAMC,EAAoBD,EAWrE,SAASE,EAAsBC,GAE3B,IAAMC,EAAaD,EAAME,cAAcC,QAAQ,OAAS,EAAI,EAAI,IAChE,OAAOC,WAAWJ,GAASC,EAoB/B,SAASI,EAAsBC,EAAeC,GAE1C,OADcD,EAAcE,iBAAiBD,GAChCE,MAAM,KAAKC,IAAI,SAAAC,GAAI,OAAIA,EAAKC,SAW7C,SAASC,EAAqBjC,GAC1B,IAAMkC,EAAalC,EAAQmC,wBAK3B,MAAO,CACHtB,IAAKqB,EAAWrB,IAChBuB,MAAOF,EAAWE,MAClBC,OAAQH,EAAWG,OACnBtB,KAAMmB,EAAWnB,KACjBuB,MAAOJ,EAAWI,MAClBC,OAAQL,EAAWK,QAS3B,SAASC,EAAmBN,EAAYO,EAAGC,GAEvC,OAAOA,GAD8BR,EAA7BrB,KACW6B,GADkBR,EAAxBG,QACqBI,GADGP,EAAhBnB,MAC0B0B,GADVP,EAAVE,MAS/B,SAASO,EAAiBT,EAAYrB,EAAKE,GACvCmB,EAAWrB,KAAOA,EAClBqB,EAAWG,OAASH,EAAWrB,IAAMqB,EAAWK,OAChDL,EAAWnB,MAAQA,EACnBmB,EAAWE,MAAQF,EAAWnB,KAAOmB,EAAWI,MASpD,SAASM,EAAwBC,EAAMC,EAAWC,EAAUC,GACxD,IACMC,EAD8CJ,EAAlBP,MACPQ,EACrBI,EAF8CL,EAAXN,OAEbO,EAC5B,OAAOE,EAH6CH,EAA5ChC,IAGgBqC,GAAcF,EAHcH,EAAhCR,OAGsCa,GACtDH,EAJgDF,EAAxB9B,KAINkC,GAAcF,EAJgBF,EAAvCT,MAI0Ca,E,IAWrDE,E,WACF,WAAYC,EAAWC,IAAc,eACjC7D,KAAK4D,UAAYA,EACjB5D,KAAK6D,eAAiBA,EAEtB7D,KAAK8D,UAAY,IAAIC,I,oCAGzB,WACI/D,KAAK8D,UAAUE,U,mBAGnB,SAAMC,GAAQ,WACVjE,KAAKgE,QACLhE,KAAK8D,UAAUI,IAAIlE,KAAK4D,UAAW,CAC/BO,eAAgBnE,KAAK6D,eAAeO,8BAExCH,EAASI,QAAQ,SAAA7D,GACb,EAAKsD,UAAUI,IAAI1D,EAAS,CACxB2D,eAAgB,CAAE9C,IAAKb,EAAQ8D,UAAW/C,KAAMf,EAAQ+D,YACxD7B,WAAYD,EAAqBjC,S,0BAK7C,SAAagE,GACT,IAAMC,EAASC,EAAeF,GACxBG,EAAiB3E,KAAK8D,UAAUc,IAAIH,GAC1C,IAAKE,EACD,OAAO,KAKX,IAEIE,EACAC,EAHEC,EAAqBN,IAAWzE,KAAK4D,UAAYa,EAAOO,gBAAkBP,EAC1EN,EAAiBQ,EAAeR,eAGtC,GAAIM,IAAWzE,KAAK4D,UAAW,CAC3B,IAAMqB,EAAyBjF,KAAK6D,eAAeO,4BACnDS,EAASI,EAAuB5D,IAChCyD,EAAUG,EAAuB1D,UAGjCsD,EAASJ,EAAOH,UAChBQ,EAAUL,EAAOF,WAErB,IAAMW,EAAgBf,EAAe9C,IAAMwD,EACrCM,EAAiBhB,EAAe5C,KAAOuD,EAU7C,OAPA9E,KAAK8D,UAAUO,QAAQ,SAACjD,EAAUgE,GAC1BhE,EAASsB,YAAc+B,IAAWW,GAAQL,EAAmBM,SAASD,IACtEjC,EAAiB/B,EAASsB,WAAYwC,EAAeC,KAG7DhB,EAAe9C,IAAMwD,EACrBV,EAAe5C,KAAOuD,EACf,CAAEzD,IAAK6D,EAAe3D,KAAM4D,O,KAI3C,SAAST,EAAeF,GACpB,OAAQA,EAAMc,aAAed,EAAMc,eAAe,GAAKd,EAAMC,OAWjE,SAASc,EAAcH,GACnB,IAAMI,EAAQJ,EAAKK,WAAU,GACvBC,EAAoBF,EAAMG,iBAAiB,QAC3CC,EAAWR,EAAKQ,SAAS9D,cAE/B0D,EAAMK,gBAAgB,MACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAkBK,OAAQD,IAC1CJ,EAAkBI,GAAGD,gBAAgB,MAUzC,MARiB,WAAbD,EACAI,EAAmBZ,EAAMI,GAEP,UAAbI,GAAqC,WAAbA,GAAsC,aAAbA,GACtDK,EAAkBb,EAAMI,GAE5BU,EAAa,SAAUd,EAAMI,EAAOQ,GACpCE,EAAa,0BAA2Bd,EAAMI,EAAOS,GAC9CT,EAGX,SAASU,EAAaC,EAAUf,EAAMI,EAAOY,GACzC,IAAMC,EAAqBjB,EAAKO,iBAAiBQ,GACjD,GAAIE,EAAmBN,OAEnB,IADA,IAAMO,EAAgBd,EAAMG,iBAAiBQ,GACpCL,EAAI,EAAGA,EAAIO,EAAmBN,OAAQD,IAC3CM,EAASC,EAAmBP,GAAIQ,EAAcR,IAK1D,IAAIS,EAAgB,EAEpB,SAASN,EAAkB7F,EAAQoF,GAEZ,SAAfA,EAAMgB,OACNhB,EAAM5D,MAAQxB,EAAOwB,OAKN,UAAf4D,EAAMgB,MAAoBhB,EAAMrD,OAChCqD,EAAMrD,KAAN,oBAA0BqD,EAAMrD,KAAhC,YAAwCoE,MAIhD,SAASP,EAAmB5F,EAAQoF,GAChC,IAAMiB,EAAUjB,EAAMkB,WAAW,MACjC,GAAID,EAGA,IACIA,EAAQE,UAAUvG,EAAQ,EAAG,GAEjC,MAAOwG,KAYf,IAAMC,GAA8B,QAAgC,CAAEC,SAAS,IAEzEC,GAA6B,QAAgC,CAAED,SAAS,IAWxEE,E,WACF,WAAYxG,EAASyG,EAASrD,EAAWsD,EAASrD,EAAgBsD,GAAiB,2BAC/EnH,KAAKiH,QAAUA,EACfjH,KAAK4D,UAAYA,EACjB5D,KAAKkH,QAAUA,EACflH,KAAK6D,eAAiBA,EACtB7D,KAAKmH,kBAAoBA,EAOzBnH,KAAKoH,kBAAoB,CAAEnE,EAAG,EAAGC,EAAG,GAEpClD,KAAKqH,iBAAmB,CAAEpE,EAAG,EAAGC,EAAG,GAKnClD,KAAKsH,qBAAsB,EAE3BtH,KAAKuH,YAAc,IAAIC,EAAA,GAEvBxH,KAAKyH,yBAA2BC,EAAA,QAEhC1H,KAAK2H,uBAAyBD,EAAA,QAE9B1H,KAAK4H,oBAAsBF,EAAA,QAE3B1H,KAAK6H,oBAAsBH,EAAA,QAE3B1H,KAAK8H,iBAAmB,KAExB9H,KAAK+H,4BAA6B,EAElC/H,KAAKgI,SAAW,GAEhBhI,KAAKiI,iBAAmB,IAAIC,IAE5BlI,KAAKmI,WAAa,MAKlBnI,KAAKoI,eAAiB,EACtBpI,KAAKqI,WAAY,EAEjBrI,KAAKsI,cAAgB,IAAId,EAAA,GAEzBxH,KAAKuI,QAAU,IAAIf,EAAA,GAEnBxH,KAAKwI,SAAW,IAAIhB,EAAA,GAEpBxH,KAAKyI,MAAQ,IAAIjB,EAAA,GAEjBxH,KAAK0I,QAAU,IAAIlB,EAAA,GAEnBxH,KAAK2I,OAAS,IAAInB,EAAA,GAElBxH,KAAK4I,QAAU,IAAIpB,EAAA,GAKnBxH,KAAK6I,MAAQ7I,KAAKuH,YAElBvH,KAAK8I,aAAe,SAACtE,GAGjB,GAFA,EAAK8D,cAAcvI,OAEf,EAAKiI,SAASjC,OAAQ,CACtB,IAAMgD,EAAe,EAAKf,SAASgB,KAAK,SAAAC,GACpC,IAAMxE,EAASC,EAAeF,GAC9B,QAASC,IAAWA,IAAWwE,GAAUA,EAAO5D,SAASZ,OAEzDsE,GAAiB,EAAKd,iBAAiBiB,IAAIH,IAAkB,EAAKI,UAClE,EAAKC,wBAAwBL,EAAcvE,QAGzC,EAAK2E,UACX,EAAKC,wBAAwB,EAAKC,aAAc7E,IAIxDxE,KAAKsJ,aAAe,SAAC9E,GACjB,IAAM+E,EAAkB,EAAKC,0BAA0BhF,GACvD,GAAK,EAAK8C,oBAAV,CA6BI,EAAKQ,mBAGA,EAAK2B,eAAkB,EAAKA,aAAa3G,OAAU,EAAK2G,aAAa1G,UACtE,EAAK0G,cAAgB,EAAKC,UAAY,EAAKL,cAAc1G,0BAMjE6B,EAAMmF,iBACN,IAAMC,EAA6B,EAAKC,+BAA+BN,GAIvE,GAHA,EAAKO,WAAY,EACjB,EAAKC,0BAA4BR,EACjC,EAAKS,6BAA6BJ,GAC9B,EAAKK,eACL,EAAKC,2BAA2BN,EAA4BL,OAE3D,CACD,IAAMY,EAAkB,EAAK9C,iBAO7B,GANA8C,EAAgBlH,EACZ2G,EAA2B3G,EAAI,EAAKmH,sBAAsBnH,EAAI,EAAKmE,kBAAkBnE,EACzFkH,EAAgBjH,EACZ0G,EAA2B1G,EAAI,EAAKkH,sBAAsBlH,EAAI,EAAKkE,kBAAkBlE,EACzF,EAAKmH,2BAA2BF,EAAgBlH,EAAGkH,EAAgBjH,GAEzC,oBAAfoH,YAA8B,EAAKjB,wBAAwBiB,WAAY,CAC9E,IAAMC,EAAmB,aAAH,OAAgBJ,EAAgBlH,EAAhC,YAAqCkH,EAAgBjH,EAArD,KACtB,EAAKmG,aAAamB,aAAa,YAAaD,IAMhD,EAAKhD,YAAYkD,UAAU1E,QAC3B,EAAKmB,QAAQwD,IAAI,WACb,EAAKnD,YAAYxH,KAAK,CAClBK,OAAQ,EACRmJ,gBAAiBK,EACjBpF,QACAmG,SAAU,EAAKC,iBAAiBhB,GAChCiB,MAAO,EAAKC,gCA9DpB,GAPkBC,KAAKC,IAAIzB,EAAgBtG,EAAI,EAAKmH,sBAAsBnH,GACxD8H,KAAKC,IAAIzB,EAAgBrG,EAAI,EAAKkH,sBAAsBlH,IACzB,EAAK+D,QAAQgE,mBAKzC,CACjB,IAAMC,EAAiBC,KAAKC,OAAS,EAAKC,eAAiB,EAAKC,mBAAmB9G,GAC7E+G,EAAY,EAAKtB,eACvB,IAAKiB,EAED,YADA,EAAKM,iBAAiBhH,GAMrB+G,IAAeA,EAAUE,cAAiBF,EAAUG,iBAGrDlH,EAAMmF,iBACN,EAAKrC,qBAAsB,EAC3B,EAAKJ,QAAQwD,IAAI,kBAAM,EAAKiB,mBAAmBnH,QAqD/DxE,KAAK4L,WAAa,SAACpH,GACf,EAAKgH,iBAAiBhH,IAE1BxE,KAAK6L,gBAAgBrL,GAASsL,WAAW7E,EAAQ8E,eAAiB,MAClE/L,KAAKgM,iBAAmB,IAAIrI,EAAsBC,EAAWC,GAC7DsD,EAAkB8E,iBAAiBjM,M,qCAGvC,WACI,OAAOA,KAAKqI,cAAgBrI,KAAKiK,iBAAkBjK,KAAKiK,eAAed,W,IAE3E,SAAavH,GACT,IAAMsK,GAAW,QAAsBtK,GACnCsK,IAAalM,KAAKqI,YAClBrI,KAAKqI,UAAY6D,EACjBlM,KAAKmM,gCACLnM,KAAKgI,SAAS3D,QAAQ,SAAA4E,GAAM,OAAI1I,EAA6B0I,EAAQiD,Q,mCAO7E,WACI,OAAOlM,KAAKoM,e,4BAGhB,WACI,OAAOpM,KAAKqJ,e,+BAMhB,WACI,OAAOrJ,KAAKyL,aAAezL,KAAKqM,wBAA0BrM,KAAKsM,mB,yBAGnE,SAAYC,GAAO,WACfvM,KAAKgI,SAAWuE,EAAQjK,IAAI,SAAA2G,GAAM,OAAI,QAAcA,KACpDjJ,KAAKgI,SAAS3D,QAAQ,SAAA4E,GAAM,OAAI1I,EAA6B0I,EAAQ,EAAKE,YAC1EnJ,KAAKmM,gCAKL,IAAMK,EAAkB,IAAItE,IAO5B,OANAlI,KAAKiI,iBAAiB5D,QAAQ,SAAA4E,GACtB,EAAKjB,SAASjG,QAAQkH,IAAW,GACjCuD,EAAgBC,IAAIxD,KAG5BjJ,KAAKiI,iBAAmBuE,EACjBxM,O,iCAMX,SAAoB0M,GAEhB,OADA1M,KAAK2M,iBAAmBD,EACjB1M,O,qCAMX,SAAwB0M,GAEpB,OADA1M,KAAK4M,qBAAuBF,EACrB1M,O,6BAOX,SAAgB6M,GAAW,WACjBrM,GAAU,QAAcqM,GAe9B,OAdIrM,IAAYR,KAAKqJ,eACbrJ,KAAKqJ,cACLrJ,KAAK8M,4BAA4B9M,KAAKqJ,cAE1CrJ,KAAKkH,QAAQ6F,kBAAkB,WAC3BvM,EAAQwM,iBAAiB,YAAa,EAAKlE,aAAc/B,GACzDvG,EAAQwM,iBAAiB,aAAc,EAAKlE,aAAcjC,KAE9D7G,KAAKiN,uBAAoBC,EACzBlN,KAAKqJ,aAAe7I,GAEE,oBAAf8J,YAA8BtK,KAAKqJ,wBAAwBiB,aAClEtK,KAAKmN,iBAAmBnN,KAAKqJ,aAAa+D,iBAEvCpN,O,iCAKX,SAAoBqN,GAAe,WAQ/B,OAPArN,KAAK8H,iBAAmBuF,GAAkB,QAAcA,GAAmB,KAC3ErN,KAAK6H,oBAAoByF,cACrBD,IACArN,KAAK6H,oBAAsB7H,KAAK6D,eAC3B0J,OAAO,IACPC,UAAU,kBAAM,EAAKC,oCAEvBzN,O,wBAGX,SAAW0N,GAEP,OADA1N,KAAK2N,eAAiBD,EACf1N,O,qBAGX,WACIA,KAAK8M,4BAA4B9M,KAAKqJ,cAGlCrJ,KAAKyL,cAGLmC,EAAW5N,KAAKqJ,cAEpBuE,EAAW5N,KAAK6N,SAChB7N,KAAK8N,kBACL9N,KAAK+N,sBACL/N,KAAKmH,kBAAkB6G,eAAehO,MACtCA,KAAKiO,uBACLjO,KAAKsI,cAAc4F,WACnBlO,KAAKuI,QAAQ2F,WACblO,KAAKwI,SAAS0F,WACdlO,KAAKyI,MAAMyF,WACXlO,KAAK0I,QAAQwF,WACblO,KAAK2I,OAAOuF,WACZlO,KAAK4I,QAAQsF,WACblO,KAAKuH,YAAY2G,WACjBlO,KAAKgI,SAAW,GAChBhI,KAAKiI,iBAAiBjE,QACtBhE,KAAKiK,oBAAiBiD,EACtBlN,KAAK6H,oBAAoByF,cACzBtN,KAAKgM,iBAAiBhI,QACtBhE,KAAK8H,iBAAmB9H,KAAKqJ,aAAerJ,KAAKmN,iBAAmBnN,KAAK4M,qBACrE5M,KAAK2M,iBAAmB3M,KAAK6N,QAAU7N,KAAK2N,eAAiB,O,wBAGrE,WACI,OAAO3N,KAAKsH,qBAAuBtH,KAAKmH,kBAAkBsE,WAAWzL,Q,mBAGzE,WACIA,KAAKqJ,aAAa1I,MAAMc,UAAYzB,KAAKiN,mBAAqB,GAC9DjN,KAAKqH,iBAAmB,CAAEpE,EAAG,EAAGC,EAAG,GACnClD,KAAKoH,kBAAoB,CAAEnE,EAAG,EAAGC,EAAG,K,2BAMxC,SAAc+F,IACLjJ,KAAKiI,iBAAiBiB,IAAID,IAAWjJ,KAAKgI,SAASjG,QAAQkH,IAAW,IACvEjJ,KAAKiI,iBAAiBwE,IAAIxD,GAC1B1I,EAA6B0I,GAAQ,M,0BAO7C,SAAaA,GACLjJ,KAAKiI,iBAAiBiB,IAAID,KAC1BjJ,KAAKiI,iBAAiBkG,OAAOlF,GAC7B1I,EAA6B0I,EAAQjJ,KAAKmJ,a,2BAIlD,SAAciF,GAEV,OADApO,KAAKmI,WAAaiG,EACXpO,O,gCAGX,SAAmBuL,GACfvL,KAAKiK,eAAiBsB,I,iCAK1B,WACI,IAAMnK,EAAWpB,KAAKyL,aAAezL,KAAKqH,iBAAmBrH,KAAKoH,kBAClE,MAAO,CAAEnE,EAAG7B,EAAS6B,EAAGC,EAAG9B,EAAS8B,K,iCAMxC,SAAoBtB,GAOhB,OANA5B,KAAKqH,iBAAmB,CAAEpE,EAAG,EAAGC,EAAG,GACnClD,KAAKoH,kBAAkBnE,EAAIrB,EAAMqB,EACjCjD,KAAKoH,kBAAkBlE,EAAItB,EAAMsB,EAC5BlD,KAAKiK,gBACNjK,KAAKqK,2BAA2BzI,EAAMqB,EAAGrB,EAAMsB,GAE5ClD,O,kCAMX,SAAqB4B,GAEjB,OADA5B,KAAKqO,kBAAoBzM,EAClB5B,O,0CAGX,WACI,IAAMoB,EAAWpB,KAAK+J,0BAClB3I,GAAYpB,KAAKiK,gBACjBjK,KAAKkK,2BAA2BlK,KAAK6J,+BAA+BzI,GAAWA,K,kCAIvF,WACIpB,KAAKyH,yBAAyB6F,cAC9BtN,KAAK2H,uBAAuB2F,cAC5BtN,KAAK4H,oBAAoB0F,gB,6BAG7B,WACQtN,KAAK0J,UACLkE,EAAW5N,KAAK0J,UAEhB1J,KAAKsO,aACLtO,KAAKsO,YAAYC,UAErBvO,KAAK0J,SAAW1J,KAAKsO,YAAc,O,iCAGvC,WACQtO,KAAKoM,cACLwB,EAAW5N,KAAKoM,cAEhBpM,KAAKwO,iBACLxO,KAAKwO,gBAAgBD,UAEzBvO,KAAKoM,aAAepM,KAAKwO,gBAAkB,O,8BAM/C,SAAiBhK,GAAK,WAKlB,GAAKxE,KAAKmH,kBAAkBsE,WAAWzL,QAGvCA,KAAKiO,uBACLjO,KAAKmH,kBAAkBsH,aAAazO,MACpCA,KAAKmM,gCACDnM,KAAKgI,WACLhI,KAAKqJ,aAAa1I,MAAMG,wBAA0Bd,KAAK0O,0BAEtD1O,KAAKsH,qBAIV,GADAtH,KAAKwI,SAASzI,KAAK,CAAEK,OAAQJ,OACzBA,KAAKiK,eAELjK,KAAKiK,eAAe0E,iBACpB3O,KAAK4O,+BAA+BC,KAAK,WACrC,EAAKC,sBAAsBtK,GAC3B,EAAKuK,2BACL,EAAK5H,kBAAkBsH,aAAa,SAGvC,CAIDzO,KAAKoH,kBAAkBnE,EAAIjD,KAAKqH,iBAAiBpE,EACjD,IAAMsG,EAAkBvJ,KAAKwJ,0BAA0BhF,GACvDxE,KAAKoH,kBAAkBlE,EAAIlD,KAAKqH,iBAAiBnE,EACjDlD,KAAKkH,QAAQwD,IAAI,WACb,EAAKjC,MAAM1I,KAAK,CACZK,OAAQ,EACRuK,SAAU,EAAKC,iBAAiBrB,GAChCyF,UAAWzF,MAGnBvJ,KAAK+O,2BACL/O,KAAKmH,kBAAkBsH,aAAazO,S,gCAI5C,SAAmBwE,GACXyK,EAAazK,KACbxE,KAAKkP,oBAAsB/D,KAAKC,OAEpCpL,KAAKmM,gCACL,IAAMgD,EAAgBnP,KAAKiK,eAC3B,GAAIkF,EAAe,CACf,IAAM3O,EAAUR,KAAKqJ,aACfqE,EAASlN,EAAQ4O,WACjBC,EAAcrP,KAAKoM,aAAepM,KAAKsP,4BACvCC,EAASvP,KAAK6N,QAAU7N,KAAK6N,SAAW7N,KAAK4D,UAAU4L,cAAc,IAErEC,EAAazP,KAAK0P,iBAExBhC,EAAOiC,aAAaJ,EAAQ/O,GAG5BR,KAAKiN,kBAAoBzM,EAAQG,MAAMc,WAAa,GAGpDzB,KAAK0J,SAAW1J,KAAK4P,wBAIrB1O,EAAiBV,GAAS,GAC1BR,KAAK4D,UAAUiM,KAAKC,YAAYpC,EAAOqC,aAAaV,EAAa7O,IACjER,KAAKgQ,0BAA0BtC,EAAQ+B,GAAYK,YAAY9P,KAAK0J,UACpE1J,KAAKuI,QAAQxI,KAAK,CAAEK,OAAQJ,OAC5BmP,EAAcc,QACdjQ,KAAKkQ,kBAAoBf,EACzBnP,KAAKmQ,cAAgBhB,EAAciB,aAAapQ,WAGhDA,KAAKuI,QAAQxI,KAAK,CAAEK,OAAQJ,OAC5BA,KAAKkQ,kBAAoBlQ,KAAKmQ,mBAAgBjD,EAIlDlN,KAAKgM,iBAAiBqE,MAAMlB,EAAgBA,EAAcmB,uBAAyB,M,qCAQvF,SAAwBC,EAAkB/L,GAAK,WAGvCxE,KAAK2N,gBACLnJ,EAAMgM,kBAEV,IAAM/E,EAAazL,KAAKyL,aAClBgF,EAAkBxB,EAAazK,GAC/BkM,GAA0BD,GAAoC,IAAjBjM,EAAMmM,OACnD9D,EAAc7M,KAAKqJ,aACnB5E,EAASC,EAAeF,GACxBoM,GAAoBH,GAAmBzQ,KAAKkP,qBAC9ClP,KAAKkP,oBArgBe,IAqgBiC/D,KAAKC,MAW9D,GAJI3G,GAAUA,EAAOoM,WAA4B,cAAfrM,EAAMgC,MACpChC,EAAMmF,mBAGN8B,GAAciF,GAA0BE,GAA5C,CAMI5Q,KAAKgI,SAASjC,SACd/F,KAAK0O,yBAA2B7B,EAAYlM,MAAMG,yBAA2B,GAC7E+L,EAAYlM,MAAMG,wBAA0B,eAEhDd,KAAKsH,oBAAsBtH,KAAK8J,WAAY,EAG5C9J,KAAKiO,uBACLjO,KAAKyH,yBAA2BzH,KAAKmH,kBAAkB2J,YAAYtD,UAAUxN,KAAKsJ,cAClFtJ,KAAK2H,uBAAyB3H,KAAKmH,kBAAkB4J,UAAUvD,UAAUxN,KAAK4L,YAC9E5L,KAAK4H,oBAAsB5H,KAAKmH,kBAC3B6J,SAAShR,KAAK0P,kBACdlC,UAAU,SAAAyD,GAAW,OAAI,EAAKC,gBAAgBD,KAC/CjR,KAAK8H,mBACL9H,KAAKmR,cAAgB1O,EAAqBzC,KAAK8H,mBAKnD,IAAMsJ,EAAkBpR,KAAK2M,iBAC7B3M,KAAKqR,yBAA2BD,GAAmBA,EAAgB1E,WAC9D0E,EAAgBE,UAAY,CAAErO,EAAG,EAAGC,EAAG,GACxClD,KAAKuR,6BAA6BhB,EAAkB/L,GACxD,IAAM+E,EAAkBvJ,KAAKoK,sBAAwBpK,KAAK+J,0BACtD/J,KAAKwJ,0BAA0BhF,GACnCxE,KAAK8K,uBAAyB,CAAE7H,EAAG,EAAGC,EAAG,GACzClD,KAAKwR,sCAAwC,CAAEvO,EAAGsG,EAAgBtG,EAAGC,EAAGqG,EAAgBrG,GACxFlD,KAAKqL,eAAiBF,KAAKC,MAC3BpL,KAAKmH,kBAAkBsK,cAAczR,KAAMwE,M,mCAG/C,SAAsBA,GAAK,WAKvBtD,EAAiBlB,KAAKqJ,cAAc,GACpCrJ,KAAK6N,QAAQuB,WAAWW,aAAa/P,KAAKqJ,aAAcrJ,KAAK6N,SAC7D7N,KAAK8N,kBACL9N,KAAK+N,sBACL/N,KAAKmR,cAAgBnR,KAAKyJ,aAAezJ,KAAKiN,uBAAoBC,EAElElN,KAAKkH,QAAQwD,IAAI,WACb,IAAMa,EAAY,EAAKtB,eACjByH,EAAenG,EAAU6E,aAAa,GACtC7G,EAAkB,EAAKC,0BAA0BhF,GACjDmG,EAAW,EAAKC,iBAAiBrB,GACjCoI,EAAyBpG,EAAUqG,iBAAiBrI,EAAgBtG,EAAGsG,EAAgBrG,GAC7F,EAAKuF,MAAM1I,KAAK,CAAEK,OAAQ,EAAMuK,WAAUqE,UAAWzF,IACrD,EAAKX,QAAQ7I,KAAK,CACd8R,KAAM,EACNH,eACAI,cAAe,EAAK3B,cACpB5E,UAAWA,EACXwG,kBAAmB,EAAK7B,kBACxByB,yBACAhH,WACAqE,UAAWzF,IAEfgC,EAAUyG,KAAK,EAAMN,EAAc,EAAKvB,cAAe,EAAKD,kBAAmByB,EAAwBhH,EAAUpB,GACjH,EAAKU,eAAiB,EAAKiG,sB,wCAOnC,cAAyD,WAA5BjN,EAA4B,EAA5BA,EAAGC,EAAyB,EAAzBA,EAAU+O,EAAe,EAAlBhP,EAAYiP,EAAM,EAAThP,EAExCiP,EAAenS,KAAKkQ,kBAAkBkC,iCAAiCpS,KAAMiD,EAAGC,IAK/EiP,GAAgBnS,KAAKiK,iBAAmBjK,KAAKkQ,mBAC9ClQ,KAAKkQ,kBAAkB0B,iBAAiB3O,EAAGC,KAC3CiP,EAAenS,KAAKkQ,mBAEpBiC,GAAgBA,IAAiBnS,KAAKiK,gBACtCjK,KAAKkH,QAAQwD,IAAI,WAEb,EAAK/B,OAAO5I,KAAK,CAAE8R,KAAM,EAAMtG,UAAW,EAAKtB,iBAC/C,EAAKA,eAAeoI,KAAK,GAEzB,EAAKpI,eAAiBkI,EACtB,EAAKlI,eAAeqI,MAAM,EAAMrP,EAAGC,EAAGiP,IAAiB,EAAKjC,mBAGxDiC,EAAaI,gBAAkB,EAAKpC,mBAAgBjD,GACxD,EAAKxE,QAAQ3I,KAAK,CACd8R,KAAM,EACNtG,UAAW4G,EACXT,aAAcS,EAAa/B,aAAa,OAKhDpQ,KAAKyL,eACLzL,KAAKiK,eAAeuI,2BAA2BP,EAAMC,GACrDlS,KAAKiK,eAAewI,UAAUzS,KAAMiD,EAAGC,EAAGlD,KAAK8K,wBAC/C9K,KAAK0S,uBAAuBzP,EAAIjD,KAAKqR,yBAAyBpO,EAAGC,EAAIlD,KAAKqR,yBAAyBnO,M,mCAO3G,WACI,IAGIyP,EAHEC,EAAgB5S,KAAK2M,iBACrBkG,EAAe7S,KAAK6S,aACpBzB,EAAkBwB,EAAgBA,EAAclG,SAAW,KAEjE,GAAI0E,GAAmBwB,EAAe,CAGlC,IAAME,EAAWF,EAActB,UAAYtR,KAAKqJ,aAAa1G,wBAA0B,KACjFoQ,EAAUH,EAAcI,cAAcC,mBAAmB7B,EAAiBwB,EAAcnM,SAC9FsM,EAAQG,gBACRP,EAAUQ,EAAYJ,EAAS/S,KAAK4D,WACpC5D,KAAKsO,YAAcyE,EACfH,EAActB,UACd8B,EAAiBT,EAASG,GAG1BH,EAAQhS,MAAMc,UACV4R,EAAarT,KAAKoK,sBAAsBnH,EAAGjD,KAAKoK,sBAAsBlH,OAG7E,CACD,IAAM1C,EAAUR,KAAKqJ,aAErB+J,EADAT,EAAUpN,EAAc/E,GACEA,EAAQmC,yBAC9B3C,KAAKiN,oBACL0F,EAAQhS,MAAMc,UAAYzB,KAAKiN,mBAyBvC,OAtBA/M,EAAayS,EAAQhS,MAAO,CAGxB2S,cAAe,OAEfC,OAAQ,IACRnS,SAAU,QACVC,IAAK,IACLE,KAAM,IACNiS,OAAQ,GAAF,OAAKxT,KAAKiH,QAAQuM,QAAU,OAEtCjT,EAA6BoS,GAAS,GACtCA,EAAQc,UAAUhH,IAAI,oBACtBkG,EAAQnI,aAAa,MAAOxK,KAAKmI,YAC7B0K,IACIa,MAAMC,QAAQd,GACdA,EAAaxO,QAAQ,SAAAuP,GAAS,OAAIjB,EAAQc,UAAUhH,IAAImH,KAGxDjB,EAAQc,UAAUhH,IAAIoG,IAGvBF,I,0CAMX,WAA4B,WAExB,IAAK3S,KAAK8J,UACN,OAAO+J,QAAQC,UAEnB,IAAMC,EAAkB/T,KAAKoM,aAAazJ,wBAE1C3C,KAAK0J,SAAS+J,UAAUhH,IAAI,sBAE5BzM,KAAK0S,uBAAuBqB,EAAgBxS,KAAMwS,EAAgB1S,KAKlE,IAAM2S,EAt7Bd,SAA4CxT,GACxC,IAAM0B,EAAgB+R,iBAAiBzT,GACjC0T,EAAyBjS,EAAsBC,EAAe,uBAC9DiS,EAAWD,EAAuBlL,KAAK,SAAAoL,GAAI,MAAa,cAATA,GAAiC,QAATA,IAE7E,IAAKD,EACD,OAAO,EAIX,IAAME,EAAgBH,EAAuBnS,QAAQoS,GAC/CG,EAAerS,EAAsBC,EAAe,uBACpDqS,EAAYtS,EAAsBC,EAAe,oBACvD,OAAOP,EAAsB2S,EAAaD,IACtC1S,EAAsB4S,EAAUF,IAw6BfG,CAAmCxU,KAAK0J,UACzD,OAAiB,IAAbsK,EACOH,QAAQC,UAEZ9T,KAAKkH,QAAQ6F,kBAAkB,WAClC,OAAO,IAAI8G,QAAQ,SAAAC,GACf,IAAMW,EAAW,SAAXA,EAAYjQ,KACTA,GAAUE,EAAeF,KAAW,EAAKkF,UACnB,cAAvBlF,EAAMkQ,gBACN,EAAKhL,SAASiL,oBAAoB,gBAAiBF,GACnDX,IACAc,aAAaC,KAMfA,EAAUC,WAAWL,EAAoB,IAAXT,GACpC,EAAKtK,SAASsD,iBAAiB,gBAAiByH,S,uCAK5D,WACI,IAEIpF,EAFE0F,EAAoB/U,KAAK4M,qBACzBoI,EAAsBD,EAAoBA,EAAkBrI,SAAW,KAW7E,OATIsI,GACAhV,KAAKwO,gBAAkBuG,EAAkB/B,cAAcC,mBAAmB+B,EAAqBD,EAAkBtO,SACjHzG,KAAKwO,gBAAgB0E,gBACrB7D,EAAc8D,EAAYnT,KAAKwO,gBAAiBxO,KAAK4D,YAGrDyL,EAAc9J,EAAcvF,KAAKqJ,cAErCgG,EAAYoE,UAAUhH,IAAI,wBACnB4C,I,0CAOX,SAA6BkB,EAAkB/L,GAC3C,IAAMyQ,EAAcjV,KAAKqJ,aAAa1G,wBAChCuS,EAAgB3E,IAAqBvQ,KAAKqJ,aAAe,KAAOkH,EAChE4E,EAAgBD,EAAgBA,EAAcvS,wBAA0BsS,EACxEG,EAAQnG,EAAazK,GAASA,EAAM6Q,cAAc,GAAK7Q,EACvDL,EAAiBnE,KAAKsV,6BAG5B,MAAO,CACHrS,EAAGkS,EAAc5T,KAAO0T,EAAY1T,MAH9B6T,EAAMG,MAAQJ,EAAc5T,KAAO4C,EAAe5C,MAIxD2B,EAAGiS,EAAc9T,IAAM4T,EAAY5T,KAH7B+T,EAAMI,MAAQL,EAAc9T,IAAM8C,EAAe9C,Q,uCAO/D,SAA0BmD,GACtB,IAAML,EAAiBnE,KAAKsV,6BACtBF,EAAQnG,EAAazK,GAQtBA,EAAMiR,QAAQ,IAAMjR,EAAMkR,eAAe,IAAM,CAAEH,MAAO,EAAGC,MAAO,GAAOhR,EACxEvB,EAAImS,EAAMG,MAAQpR,EAAe5C,KACjC2B,EAAIkS,EAAMI,MAAQrR,EAAe9C,IAGvC,GAAIrB,KAAKmN,iBAAkB,CACvB,IAAMwI,EAAY3V,KAAKmN,iBAAiByI,eACxC,GAAID,EAAW,CACX,IAAME,EAAW7V,KAAKmN,iBAAiB2I,iBAGvC,OAFAD,EAAS5S,EAAIA,EACb4S,EAAS3S,EAAIA,EACN2S,EAASE,gBAAgBJ,EAAUK,YAGlD,MAAO,CAAE/S,IAAGC,O,4CAGhB,SAA+BkS,GAC3B,IAAMa,EAAoBjW,KAAKiK,eAAiBjK,KAAKiK,eAAeiM,SAAW,KAC/E,EAAelW,KAAKmW,kBAAoBnW,KAAKmW,kBAAkBf,EAAOpV,MAAQoV,EAAxEnS,EAAN,EAAMA,EAAGC,EAAT,EAASA,EAOT,GANsB,MAAlBlD,KAAKkW,UAA0C,MAAtBD,EACzB/S,EAAIlD,KAAKoK,sBAAsBlH,EAER,MAAlBlD,KAAKkW,UAA0C,MAAtBD,IAC9BhT,EAAIjD,KAAKoK,sBAAsBnH,GAE/BjD,KAAKmR,cAAe,CACpB,MAAmCnR,KAAKqR,yBAA7B+E,EAAX,EAAQnT,EAAeoT,EAAvB,EAAoBnT,EACdoT,EAAetW,KAAKmR,cACpBoF,EAAcvW,KAAKyJ,aACnB+M,EAAOF,EAAajV,IAAMgV,EAC1BI,EAAOH,EAAazT,QAAU0T,EAAYxT,OAASsT,GAGzDpT,EAAIyT,EAAQzT,EAFCqT,EAAa/U,KAAO6U,EACpBE,EAAa1T,OAAS2T,EAAYzT,MAAQsT,IAEvDlT,EAAIwT,EAAQxT,EAAGsT,EAAMC,GAEzB,MAAO,CAAExT,IAAGC,O,0CAGhB,SAA6ByT,GACzB,IAAQ1T,EAAS0T,EAAT1T,EAAGC,EAAMyT,EAANzT,EACL2H,EAAQ7K,KAAK8K,uBACb8L,EAA0B5W,KAAKwR,sCAE/BqF,EAAU9L,KAAKC,IAAI/H,EAAI2T,EAAwB3T,GAC/C6T,EAAU/L,KAAKC,IAAI9H,EAAI0T,EAAwB1T,GAarD,OARI2T,EAAU7W,KAAKiH,QAAQ8P,kCACvBlM,EAAM5H,EAAIA,EAAI2T,EAAwB3T,EAAI,GAAK,EAC/C2T,EAAwB3T,EAAIA,GAE5B6T,EAAU9W,KAAKiH,QAAQ8P,kCACvBlM,EAAM3H,EAAIA,EAAI0T,EAAwB1T,EAAI,GAAK,EAC/C0T,EAAwB1T,EAAIA,GAEzB2H,I,2CAGX,WACI,GAAK7K,KAAKqJ,cAAiBrJ,KAAKgI,SAAhC,CAGA,IAAMgP,EAAehX,KAAKgI,SAASjC,OAAS,IAAM/F,KAAKyL,aACnDuL,IAAiBhX,KAAK+H,6BACtB/H,KAAK+H,2BAA6BiP,EAClCzW,EAA6BP,KAAKqJ,aAAc2N,O,yCAIxD,SAA4BxW,GACxBA,EAAQmU,oBAAoB,YAAa3U,KAAK8I,aAAc/B,GAC5DvG,EAAQmU,oBAAoB,aAAc3U,KAAK8I,aAAcjC,K,wCAOjE,SAA2B5D,EAAGC,GAC1B,IAAMzB,EAAY4R,EAAapQ,EAAGC,GAGJ,MAA1BlD,KAAKiN,oBACLjN,KAAKiN,kBAAoBjN,KAAKqJ,aAAa1I,MAAMc,WAAa,IAKlEzB,KAAKqJ,aAAa1I,MAAMc,UAAYD,EAAkBC,EAAWzB,KAAKiN,qB,oCAO1E,SAAuBhK,EAAGC,GACtB,IAAI0D,EAGElF,GAAqD,QAAhCkF,EAAK5G,KAAK2M,wBAAqC,IAAP/F,OAAgB,EAASA,EAAG8F,eAAYQ,EAAYlN,KAAKiN,kBACtHxL,EAAY4R,EAAapQ,EAAGC,GAClClD,KAAK0J,SAAS/I,MAAMc,UAAYD,EAAkBC,EAAWC,K,8BAMjE,SAAiBuV,GACb,IAAMC,EAAiBlX,KAAKoK,sBAC5B,OAAI8M,EACO,CAAEjU,EAAGgU,EAAgBhU,EAAIiU,EAAejU,EAAGC,EAAG+T,EAAgB/T,EAAIgU,EAAehU,GAErF,CAAED,EAAG,EAAGC,EAAG,K,sCAGtB,WACIlD,KAAKmR,cAAgBnR,KAAKyJ,kBAAeyD,EACzClN,KAAKgM,iBAAiBhI,U,4CAM1B,WACI,MAAehE,KAAKoH,kBAAdnE,EAAN,EAAMA,EAAGC,EAAT,EAASA,EACT,KAAW,IAAND,GAAiB,IAANC,GAAYlD,KAAKyL,eAAiBzL,KAAK8H,iBAAvD,CAGA,IAAMwO,EAAetW,KAAK8H,iBAAiBnF,wBACrCsS,EAAcjV,KAAKqJ,aAAa1G,wBAGtC,KAA4B,IAAvB2T,EAAaxT,OAAuC,IAAxBwT,EAAavT,QACnB,IAAtBkS,EAAYnS,OAAsC,IAAvBmS,EAAYlS,QAD5C,CAIA,IAAMoU,EAAeb,EAAa/U,KAAO0T,EAAY1T,KAC/C6V,EAAgBnC,EAAYrS,MAAQ0T,EAAa1T,MACjDyU,EAAcf,EAAajV,IAAM4T,EAAY5T,IAC7CiW,EAAiBrC,EAAYpS,OAASyT,EAAazT,OAGrDyT,EAAaxT,MAAQmS,EAAYnS,OAC7BqU,EAAe,IACflU,GAAKkU,GAELC,EAAgB,IAChBnU,GAAKmU,IAITnU,EAAI,EAIJqT,EAAavT,OAASkS,EAAYlS,QAC9BsU,EAAc,IACdnU,GAAKmU,GAELC,EAAiB,IACjBpU,GAAKoU,IAITpU,EAAI,EAEJD,IAAMjD,KAAKoH,kBAAkBnE,GAAKC,IAAMlD,KAAKoH,kBAAkBlE,GAC/DlD,KAAKuX,oBAAoB,CAAErU,IAAGD,U,gCAItC,SAAmBuB,GACf,IAAM5C,EAAQ5B,KAAKoI,eACnB,MAAqB,iBAAVxG,EACAA,EAEFqN,EAAazK,GACX5C,EAAM4V,MAEV5V,EAAQA,EAAM6V,MAAQ,I,6BAGjC,SAAgBjT,GACZ,IAAMkT,EAAmB1X,KAAKgM,iBAAiB2L,aAAanT,GAC5D,GAAIkT,EAAkB,CAClB,IAAMjT,EAASC,EAAeF,GAI1BxE,KAAKmR,gBAAkB1M,IAAWzE,KAAK4D,WACtCa,IAAWzE,KAAK8H,kBAAoBrD,EAAOY,SAASrF,KAAK8H,oBAC1D3E,EAAiBnD,KAAKmR,cAAeuG,EAAiBrW,IAAKqW,EAAiBnW,MAEhFvB,KAAKoK,sBAAsBnH,GAAKyU,EAAiBnW,KACjDvB,KAAKoK,sBAAsBlH,GAAKwU,EAAiBrW,IAG5CrB,KAAKiK,iBACNjK,KAAKqH,iBAAiBpE,GAAKyU,EAAiBnW,KAC5CvB,KAAKqH,iBAAiBnE,GAAKwU,EAAiBrW,IAC5CrB,KAAKqK,2BAA2BrK,KAAKqH,iBAAiBpE,EAAGjD,KAAKqH,iBAAiBnE,O,wCAK3F,WACI,IAAMyB,EAAiB3E,KAAKgM,iBAAiBlI,UAAUc,IAAI5E,KAAK4D,WAChE,OAAOe,EAAiBA,EAAeR,eACnCnE,KAAK6D,eAAeO,8B,4BAQ5B,WAII,YAH+B8I,IAA3BlN,KAAK4X,oBACL5X,KAAK4X,mBAAoB,QAAe5X,KAAKqJ,eAE1CrJ,KAAK4X,oB,uCAGhB,SAA0BC,EAAepI,GACrC,IAAMqI,EAAmB9X,KAAKqO,mBAAqB,SACnD,GAAyB,WAArByJ,EACA,OAAOD,EAEX,GAAyB,WAArBC,EAA+B,CAC/B,IAAMC,EAAc/X,KAAK4D,UAIzB,OAAO6L,GACHsI,EAAYC,mBACZD,EAAYE,yBACZF,EAAYG,sBACZH,EAAYI,qBACZJ,EAAYlI,KAEpB,OAAO,QAAciI,O,KAQ7B,SAASzE,EAAapQ,EAAGC,GAGrB,4BAAsB6H,KAAKqN,MAAMnV,GAAjC,eAA0C8H,KAAKqN,MAAMlV,GAArD,UAGJ,SAASwT,EAAQ9U,EAAOyW,EAAKC,GACzB,OAAOvN,KAAKuN,IAAID,EAAKtN,KAAKsN,IAAIC,EAAK1W,IAMvC,SAASgM,EAAWxI,GACZA,GAAQA,EAAKgK,YACbhK,EAAKgK,WAAWmJ,YAAYnT,GAIpC,SAAS6J,EAAazK,GAIlB,MAAyB,MAAlBA,EAAMgC,KAAK,GAMtB,SAAS2M,EAAYJ,EAASnP,GAC1B,IAAM4U,EAAYzF,EAAQyF,UAC1B,GAAyB,IAArBA,EAAUzS,QAAgByS,EAAU,GAAGC,WAAa7U,EAAU8U,aAC9D,OAAOF,EAAU,GAErB,IAAMG,EAAU/U,EAAUgV,cAAc,OAExC,OADAJ,EAAUnU,QAAQ,SAAAe,GAAI,OAAIuT,EAAQ7I,YAAY1K,KACvCuT,EAOX,SAASvF,EAAiB3O,EAAQoU,GAC9BpU,EAAO9D,MAAMmC,MAAb,UAAwB+V,EAAW/V,MAAnC,MACA2B,EAAO9D,MAAMoC,OAAb,UAAyB8V,EAAW9V,OAApC,MACA0B,EAAO9D,MAAMc,UAAY4R,EAAawF,EAAWtX,KAAMsX,EAAWxX,KAgBtE,SAASyX,EAAgBC,EAAOC,EAAWC,GACvC,IAAMC,EAAOC,GAAMH,EAAWD,EAAMhT,OAAS,GACvCqT,EAAKD,GAAMF,EAASF,EAAMhT,OAAS,GACzC,GAAImT,IAASE,EAAb,CAKA,IAFA,IAAM3U,EAASsU,EAAMG,GACfrO,EAAQuO,EAAKF,GAAQ,EAAI,EACtBpT,EAAIoT,EAAMpT,IAAMsT,EAAItT,GAAK+E,EAC9BkO,EAAMjT,GAAKiT,EAAMjT,EAAI+E,GAEzBkO,EAAMK,GAAM3U,GAgChB,SAAS0U,GAAMvX,EAAO0W,GAClB,OAAOvN,KAAKuN,IAAI,EAAGvN,KAAKsN,IAAIC,EAAK1W,IAcrC,IASMyX,G,WACF,WAAY7Y,EAAS2G,EAAmBvD,EAAWsD,EAASrD,GAAc,2BACtE7D,KAAKmH,kBAAoBA,EACzBnH,KAAKkH,QAAUA,EACflH,KAAK6D,eAAiBA,EAEtB7D,KAAKmJ,UAAW,EAEhBnJ,KAAKuS,iBAAkB,EAKvBvS,KAAKsZ,oBAAqB,EAE1BtZ,KAAKuZ,eAAiB,EAKtBvZ,KAAKwZ,eAAiB,kBAAM,GAE5BxZ,KAAKyZ,cAAgB,kBAAM,GAE3BzZ,KAAKsI,cAAgB,IAAId,EAAA,GAIzBxH,KAAK0I,QAAU,IAAIlB,EAAA,GAKnBxH,KAAK2I,OAAS,IAAInB,EAAA,GAElBxH,KAAK4I,QAAU,IAAIpB,EAAA,GAEnBxH,KAAK0Z,OAAS,IAAIlS,EAAA,GAElBxH,KAAK2Z,aAAc,EAEnB3Z,KAAK4Z,eAAiB,GAMtB5Z,KAAK6Z,cAAgB,CAAEC,KAAM,KAAMjP,MAAO,EAAGkP,UAAU,GAEvD/Z,KAAKga,YAAc,GAEnBha,KAAKia,UAAY,GAEjBja,KAAKka,aAAe,WAEpBla,KAAKma,gBAAkB,IAAIjS,IAE3BlI,KAAKmI,WAAa,MAElBnI,KAAKoa,4BAA8B1S,EAAA,QAEnC1H,KAAKqa,yBAA2B,EAEhCra,KAAKsa,2BAA6B,EAElCta,KAAKua,kBAAoB,IAAI/S,EAAA,GAE7BxH,KAAK4X,kBAAoB,KAEzB5X,KAAKwa,qBAAuB,WACxB,EAAK7L,iBD/gDX,WAAgD,IAA7B7O,EAA6B,uDAApB,EAAG2a,EAAiB,uDAAL,IAO7C,SANK,EAAAC,EAAA,GAAU5a,IAAWA,EAAS,KAC/BA,EAAS,GAER2a,GAA2C,mBAAvBA,EAAUxa,WAC/Bwa,EAAY,KAET,IAAIE,EAAA,EAAW,SAAA/a,GAElB,OADAA,EAAW6M,IAAIgO,EAAUxa,SAASP,EAAUI,EAAQ,CAAEF,aAAYC,QAAS,EAAGC,YACvEF,ICugDHgb,CAAS,EAAGC,EAAA,GACPC,MAAK,EAAAC,EAAA,GAAU,EAAKR,oBACpB/M,UAAU,WACX,IAAMpI,EAAO,EAAK4V,YACZC,EAAa,EAAK1B,eACc,IAAlC,EAAKc,yBACLa,GAAwB9V,GAAO6V,GAEQ,IAAlC,EAAKZ,0BACVa,GAAwB9V,EAAM6V,GAEM,IAApC,EAAKX,2BACLa,GAA0B/V,GAAO6V,GAEQ,IAApC,EAAKX,4BACVa,GAA0B/V,EAAM6V,MAI5Cjb,KAAKQ,SAAU,QAAcA,GAC7BR,KAAK4D,UAAYA,EACjB5D,KAAKob,sBAAsB,CAACpb,KAAKQ,UACjC2G,EAAkBkU,sBAAsBrb,MACxCA,KAAKgM,iBAAmB,IAAIrI,EAAsBC,EAAWC,G,sCAGjE,WACI7D,KAAK2O,iBACL3O,KAAKua,kBAAkBrM,WACvBlO,KAAKoa,4BAA4B9M,cACjCtN,KAAKsI,cAAc4F,WACnBlO,KAAK0I,QAAQwF,WACblO,KAAK2I,OAAOuF,WACZlO,KAAK4I,QAAQsF,WACblO,KAAK0Z,OAAOxL,WACZlO,KAAKma,gBAAgBnW,QACrBhE,KAAKgb,YAAc,KACnBhb,KAAKgM,iBAAiBhI,QACtBhE,KAAKmH,kBAAkBmU,oBAAoBtb,Q,wBAG/C,WACI,OAAOA,KAAK2Z,c,mBAGhB,WACI3Z,KAAKub,mBACLvb,KAAKwb,6B,mBAUT,SAAM3J,EAAMtO,EAAUC,EAAUiY,GAI5B,IAAIC,EAHJ1b,KAAKub,mBAIQ,MAATE,GAEkB,KADlBC,EAAW1b,KAAKuS,gBAAkBvS,KAAKga,YAAYjY,QAAQ8P,IAAS,KAIhE6J,EAAW1b,KAAK2b,iCAAiC9J,EAAMtO,EAAUC,IAIrEkY,EAAWD,EAEf,IAAMG,EAAmB5b,KAAK6b,kBACxBnK,EAAekK,EAAiB7Z,QAAQ8P,GACxCxC,EAAcwC,EAAKxF,wBACrByP,EAAuBF,EAAiBF,GAc5C,GAVII,IAAyBjK,IACzBiK,EAAuBF,EAAiBF,EAAW,IAInDhK,GAAgB,GAChBkK,EAAiBG,OAAOrK,EAAc,GAItCoK,IAAyB9b,KAAKmH,kBAAkBsE,WAAWqQ,GAAuB,CAClF,IAAMtb,EAAUsb,EAAqBxP,iBACrC9L,EAAQwb,cAAcrM,aAAaN,EAAa7O,GAChDob,EAAiBG,OAAOL,EAAU,EAAG7J,QAEpC,GAAI7R,KAAKic,yBAAyB1Y,EAAUC,GAAW,CACxD,IAAM0Y,EAAYN,EAAiB,GAAGtP,iBACtC4P,EAAU9M,WAAWO,aAAaN,EAAa6M,GAC/CN,EAAiBO,QAAQtK,QAGzB,QAAc7R,KAAKQ,SAASsP,YAAYT,GACxCuM,EAAiBQ,KAAKvK,GAG1BxC,EAAY1O,MAAMc,UAAY,GAG9BzB,KAAKqc,sBACLrc,KAAKsc,wBAELtc,KAAKwb,2BACLxb,KAAK0I,QAAQ3I,KAAK,CAAE8R,OAAMtG,UAAWvL,KAAM0R,aAAc1R,KAAKoQ,aAAayB,O,kBAM/E,SAAKA,GACD7R,KAAKuc,SACLvc,KAAK2I,OAAO5I,KAAK,CAAE8R,OAAMtG,UAAWvL,S,kBAYxC,SAAK6R,EAAMH,EAAcI,EAAeC,EAAmBJ,EAAwBhH,EAAUqE,GACzFhP,KAAKuc,SACLvc,KAAK4I,QAAQ7I,KAAK,CACd8R,OACAH,eACAI,gBACAvG,UAAWvL,KACX+R,oBACAJ,yBACAhH,WACAqE,gB,uBAOR,SAAUwN,GAAK,WACLC,EAAgBzc,KAAKga,YAc3B,OAbAha,KAAKga,YAAcwC,EACnBA,EAAMnY,QAAQ,SAAAwN,GAAI,OAAIA,EAAK6K,mBAAmB,KAC1C1c,KAAKyL,eACgBgR,EAAcE,OAAO,SAAA9K,GAAI,OAAIA,EAAKpG,eAGtCmR,MAAM,SAAA/K,GAAI,OAA6B,IAAzB2K,EAAMza,QAAQ8P,KACzC7R,KAAKuc,SAGLvc,KAAK6c,eAGN7c,O,2BAGX,SAAcoO,GAEV,OADApO,KAAKmI,WAAaiG,EACXpO,O,yBAOX,SAAY,GAER,OADAA,KAAKia,UAAY,EAAY6C,QACtB9c,O,6BAMX,SAAgB+c,GAEZ,OADA/c,KAAKka,aAAe6C,EACb/c,O,mCAMX,SAAsBiE,GAClB,IAAMzD,GAAU,QAAcR,KAAKQ,SAKnC,OAFAR,KAAKgd,qBAC8B,IAA/B/Y,EAASlC,QAAQvB,GAAjB,CAAoCA,GAApC,eAAgDyD,IAAYA,EAAS6Y,QAClE9c,O,kCAGX,WACI,OAAOA,KAAKgd,sB,0BAMhB,SAAanL,GACT,OAAK7R,KAAK2Z,YAQHsD,GAF6B,eAAtBjd,KAAKka,cAAqD,QAApBla,KAAKmI,WACrDnI,KAAK4Z,eAAekD,QAAQI,UAAYld,KAAK4Z,eACzB,SAAAuD,GAAW,OAAIA,EAAYrD,OAASjI,IAPjD7R,KAAKga,YAAYjY,QAAQ8P,K,yBAaxC,WACI,OAAO7R,KAAKma,gBAAgBiD,KAAO,I,uBASvC,SAAUvL,EAAMtO,EAAUC,EAAU6Z,GAEhC,IAAIrd,KAAKuS,iBAAoBvS,KAAKsd,aAC7Bla,EAAwBpD,KAAKsd,YA5TT,IA4TgD/Z,EAAUC,GADnF,CAIA,IAAM+Z,EAAWvd,KAAK4Z,eAChB8B,EAAW1b,KAAK2b,iCAAiC9J,EAAMtO,EAAUC,EAAU6Z,GACjF,MAAkB,IAAd3B,GAAmB6B,EAASxX,OAAS,GAAzC,CAGA,IAAMyX,EAAqC,eAAtBxd,KAAKka,aACpBxI,EAAeuL,GAAUM,EAAU,SAAAJ,GAAW,OAAIA,EAAYrD,OAASjI,IACvE4L,EAAuBF,EAAS7B,GAEhCgC,EAAcD,EAAqB/a,WACnCmI,EAAQ6G,EAAegK,EAAW,GAAK,EAEvCiC,EAAa3d,KAAK4d,iBAJAL,EAAS7L,GAAchP,WAIWgb,EAAa7S,GAEjEgT,EAAgB7d,KAAK8d,oBAAoBpM,EAAc6L,EAAU1S,GAGjEkT,EAAWR,EAAST,QAE1BhE,EAAgByE,EAAU7L,EAAcgK,GACxC1b,KAAK0Z,OAAO3Z,KAAK,CACb+R,cAAeJ,EACfA,aAAcgK,EACdnQ,UAAWvL,KACX6R,SAEJ0L,EAASlZ,QAAQ,SAAC2Z,EAASvC,GAEvB,GAAIsC,EAAStC,KAAWuC,EAAxB,CAGA,IAAMC,EAAgBD,EAAQlE,OAASjI,EACjCqM,EAASD,EAAgBN,EAAaE,EACtCM,EAAkBF,EAAgBpM,EAAKxF,wBACzC2R,EAAQlE,KAAKxN,iBAEjB0R,EAAQE,QAAUA,EAKdV,GAGAW,EAAgBxd,MAAMc,UAAYD,EAAkB,eAAD,OAAgBuJ,KAAKqN,MAAM4F,EAAQE,QAAnC,aAAuDF,EAAQtc,kBAClHyB,EAAiB6a,EAAQtb,WAAY,EAAGwb,KAGxCC,EAAgBxd,MAAMc,UAAYD,EAAkB,kBAAD,OAAmBuJ,KAAKqN,MAAM4F,EAAQE,QAAtC,UAAuDF,EAAQtc,kBAClHyB,EAAiB6a,EAAQtb,WAAYwb,EAAQ,OAIrDle,KAAK6Z,cAAcE,SAAW/W,EAAmB0a,EAAana,EAAUC,GACxExD,KAAK6Z,cAAcC,KAAO2D,EAAqB3D,KAC/C9Z,KAAK6Z,cAAchP,MAAQ2S,EAAeH,EAAapa,EAAIoa,EAAana,M,wCAQ5E,SAA2BK,EAAUC,GAAQ,WACzC,IAAIxD,KAAKsZ,mBAAT,CAGA,IAAI8E,EACAC,EAA0B,EAC1BC,EAA4B,EAgBhC,GAdAte,KAAKgM,iBAAiBlI,UAAUO,QAAQ,SAACjD,EAAUZ,GAG/C,GAAIA,IAAY,EAAKoD,WAAcxC,EAASsB,aAAc0b,GAGtDhb,EAAwBhC,EAASsB,WA5YhB,IA4YsDa,EAAUC,GAAW,OAuZ5G,SAAoChD,EAASkC,EAAYa,EAAUC,GAC/D,IAAM+a,EAAmBC,GAA2B9b,EAAYc,GAC1Dib,EAAqBC,GAA6Bhc,EAAYa,GAChE8a,EAA0B,EAC1BC,EAA4B,EAKhC,GAAIC,EAAkB,CAClB,IAAMja,EAAY9D,EAAQ8D,UACD,IAArBia,EACIja,EAAY,IACZ+Z,EAA0B,GAGzB7d,EAAQme,aAAera,EAAY9D,EAAQoe,eAChDP,EAA0B,GAGlC,GAAII,EAAoB,CACpB,IAAMla,EAAa/D,EAAQ+D,WACA,IAAvBka,EACIla,EAAa,IACb+Z,EAA4B,GAG3B9d,EAAQqe,YAActa,EAAa/D,EAAQse,cAChDR,EAA4B,GAGpC,MAAO,CAACD,EAAyBC,GArbkCS,CAA2Bve,EAASY,EAASsB,WAAYa,EAAUC,GAD9B,eAClE8a,EADkE,OAC3FD,EAD2F,OAE7DC,KAC3BF,EAAa5d,OAKpB6d,IAA4BC,EAA2B,CACxD,MAA0Bte,KAAK6D,eAAemb,kBAAtClc,EAAR,EAAQA,MAAOC,EAAf,EAAeA,OACTL,EAAa,CAAEI,QAAOC,SAAQ1B,IAAK,EAAGuB,MAAOE,EAAOD,OAAQE,EAAQxB,KAAM,GAChF8c,EAA0BG,GAA2B9b,EAAYc,GACjE8a,EAA4BI,GAA6Bhc,EAAYa,GACrE6a,EAAaa,QAEbb,GAAeC,IAA4Bre,KAAKqa,0BAChDiE,IAA8Bte,KAAKsa,4BACnC8D,IAAepe,KAAKgb,cACpBhb,KAAKqa,yBAA2BgE,EAChCre,KAAKsa,2BAA6BgE,EAClCte,KAAKgb,YAAcoD,GACdC,GAA2BC,IAA8BF,EAC1Dpe,KAAKkH,QAAQ6F,kBAAkB/M,KAAKwa,sBAGpCxa,KAAK2O,qB,4BAKjB,WACI3O,KAAKua,kBAAkBxa,S,8BAG3B,WACI,IAAMoB,GAAS,QAAcnB,KAAKQ,SAASG,MAC3CX,KAAKsI,cAAcvI,OACnBC,KAAK2Z,aAAc,EAInB3Z,KAAKkf,mBAAqB/d,EAAOge,kBAAoBhe,EAAOie,gBAAkB,GAC9Eje,EAAOie,eAAiBje,EAAOge,iBAAmB,OAClDnf,KAAK6c,cACL7c,KAAKoa,4BAA4B9M,cACjCtN,KAAKqf,0B,mCAGT,WACI,IAAM7e,GAAU,QAAcR,KAAKQ,SACnCR,KAAKgM,iBAAiBqE,MAAMrQ,KAAKgd,qBAGjChd,KAAKsd,YAActd,KAAKgM,iBAAiBlI,UAAUc,IAAIpE,GAASkC,a,iCAGpE,WACI,IAAM8a,EAAqC,eAAtBxd,KAAKka,aAC1Bla,KAAK4Z,eAAiB5Z,KAAK6b,kBAAkBvZ,IAAI,SAAAwX,GAC7C,IAAMwF,EAAmBxF,EAAKyF,oBAC9B,MAAO,CACHzF,OACAoE,OAAQ,EACRxc,iBAAkB4d,EAAiB3e,MAAMc,WAAa,GACtDiB,WAAYD,EAAqB6c,MAEtCE,KAAK,SAACC,EAAGC,GACR,OAAOlC,EAAeiC,EAAE/c,WAAWnB,KAAOme,EAAEhd,WAAWnB,KACnDke,EAAE/c,WAAWrB,IAAMqe,EAAEhd,WAAWrB,Q,oBAI5C,WAAM,WACFrB,KAAK2Z,aAAc,EACnB,IAAMxY,GAAS,QAAcnB,KAAKQ,SAASG,MAC3CQ,EAAOie,eAAiBje,EAAOge,iBAAmBnf,KAAKkf,mBAEvDlf,KAAK6b,kBAAkBxX,QAAQ,SAAAwN,GAC3B,IAAIjL,EACEiG,EAAcgF,EAAKvF,iBACzB,GAAIO,EAAa,CACb,IAAMnL,EAC2C,QADvBkF,EAAK,EAAKgT,eAC/B5Q,KAAK,SAAA2W,GAAO,OAAIA,EAAQ7F,OAASjI,WAA0B,IAAPjL,OAAgB,EAASA,EAAGlF,iBACrFmL,EAAYlM,MAAMc,UAAYC,GAAoB,MAG1D1B,KAAKia,UAAU5V,QAAQ,SAAA2Z,GAAO,OAAIA,EAAQ4B,eAAe,KACzD5f,KAAK6b,kBAAoB,GACzB7b,KAAK4Z,eAAiB,GACtB5Z,KAAK6Z,cAAcC,KAAO,KAC1B9Z,KAAK6Z,cAAchP,MAAQ,EAC3B7K,KAAK6Z,cAAcE,UAAW,EAC9B/Z,KAAK2O,iBACL3O,KAAKoa,4BAA4B9M,cACjCtN,KAAKgM,iBAAiBhI,U,iCAQ1B,SAAoB0N,EAAc6L,EAAU1S,GACxC,IAAM2S,EAAqC,eAAtBxd,KAAKka,aACpBjD,EAAkBsG,EAAS7L,GAAchP,WACzCmd,EAAmBtC,EAAS7L,GAAwB,EAAT7G,GAC7CgT,EAAgB5G,EAAgBuG,EAAe,QAAU,UAAY3S,EACzE,GAAIgV,EAAkB,CAClB,IAAM5P,EAAQuN,EAAe,OAAS,MAChCsC,EAAMtC,EAAe,QAAU,UAKtB,IAAX3S,EACAgT,GAAiBgC,EAAiBnd,WAAWuN,GAASgH,EAAgB6I,GAGtEjC,GAAiB5G,EAAgBhH,GAAS4P,EAAiBnd,WAAWod,GAG9E,OAAOjC,I,8BAQX,SAAiB5G,EAAiByG,EAAa7S,GAC3C,IAAM2S,EAAqC,eAAtBxd,KAAKka,aACtByD,EAAaH,EAAeE,EAAYnc,KAAO0V,EAAgB1V,KAC/Dmc,EAAYrc,IAAM4V,EAAgB5V,IAMtC,OAJe,IAAXwJ,IACA8S,GAAcH,EAAeE,EAAY5a,MAAQmU,EAAgBnU,MAC7D4a,EAAY3a,OAASkU,EAAgBlU,QAEtC4a,I,sCAOX,SAAyBpa,EAAUC,GAC/B,IAAKxD,KAAK6b,kBAAkB9V,OACxB,OAAO,EAEX,IAAMga,EAAgB/f,KAAK4Z,eACrB4D,EAAqC,eAAtBxd,KAAKka,aAI1B,GADiB6F,EAAc,GAAGjG,OAAS9Z,KAAK6b,kBAAkB,GACpD,CACV,IAAMmE,EAAeD,EAAcA,EAAcha,OAAS,GAAGrD,WAC7D,OAAO8a,EAAeja,GAAYyc,EAAapd,MAAQY,GAAYwc,EAAand,OAGhF,IAAMod,EAAgBF,EAAc,GAAGrd,WACvC,OAAO8a,EAAeja,GAAY0c,EAAc1e,KAAOiC,GAAYyc,EAAc5e,M,8CAUzF,SAAiCwQ,EAAMtO,EAAUC,EAAUqH,GAAK,WACtD2S,EAAqC,eAAtBxd,KAAKka,aACpBuB,EAAQwB,GAAUjd,KAAK4Z,eAAgB,WAAuBsG,EAAGnH,GAAS,IAAhCe,EAAgC,EAAhCA,KAAMpX,EAA0B,EAA1BA,WAClD,OAAIoX,IAASjI,EAGFkH,EAAMhT,OAAS,IAEtB8E,GAKIiP,IAAS,EAAKD,cAAcC,OAAQ,EAAKD,cAAcE,WAJzCyD,EAAe3S,EAAM5H,EAAI4H,EAAM3H,KAK/B,EAAK2W,cAAchP,SAIlC2S,EAGHja,GAAYwH,KAAKoV,MAAMzd,EAAWnB,OAASgC,EAAWwH,KAAKoV,MAAMzd,EAAWE,OAC5EY,GAAYuH,KAAKoV,MAAMzd,EAAWrB,MAAQmC,EAAWuH,KAAKoV,MAAMzd,EAAWG,WAEnF,OAAmB,IAAX4Y,GAAiBzb,KAAKyZ,cAAcgC,EAAO5J,EAAM7R,MAAcyb,GAAJ,I,yBAGvE,WACIzb,KAAK6b,kBAAoB7b,KAAKga,YAAY8C,QAC1C9c,KAAKqc,sBACLrc,KAAKsc,0B,8BAOT,SAAiBrZ,EAAGC,GAChB,OAA2B,MAApBlD,KAAKsd,aAAuBta,EAAmBhD,KAAKsd,YAAara,EAAGC,K,8CAS/E,SAAiC2O,EAAM5O,EAAGC,GACtC,OAAOlD,KAAKia,UAAUjR,KAAK,SAAAgV,GAAO,OAAIA,EAAQoC,YAAYvO,EAAM5O,EAAGC,O,yBAQvE,SAAY2O,EAAM5O,EAAGC,GACjB,IAAKlD,KAAKsd,cAAgBta,EAAmBhD,KAAKsd,YAAara,EAAGC,KAC7DlD,KAAKwZ,eAAe3H,EAAM7R,MAC3B,OAAO,EAEX,IAAMqgB,EAAmBrgB,KAAK0P,iBAAiB2Q,iBAAiBpd,EAAGC,GAGnE,IAAKmd,EACD,OAAO,EAEX,IAAMC,GAAgB,QAActgB,KAAKQ,SAOzC,OAAO6f,IAAqBC,GAAiBA,EAAcjb,SAASgb,K,6BAMxE,SAAgBrC,EAASxB,GAAK,WACpB+D,EAAiBvgB,KAAKma,iBACvBoG,EAAerX,IAAI8U,IAAYxB,EAAMI,MAAM,SAAA/K,GAK5C,OAAO,EAAK2H,eAAe3H,EAAM,IAAS,EAAKmI,YAAYjY,QAAQ8P,IAAS,MAE5E0O,EAAe9T,IAAIuR,GACnBhe,KAAKsc,wBACLtc,KAAKqf,2B,4BAOb,SAAerB,GACXhe,KAAKma,gBAAgBhM,OAAO6P,GAC5Bhe,KAAKoa,4BAA4B9M,gB,mCAMrC,WAAqB,WACjBtN,KAAKoa,4BAA8Bpa,KAAKmH,kBACnC6J,SAAShR,KAAK0P,kBACdlC,UAAU,SAAAhJ,GACX,GAAI,EAAKiH,aAAc,CACnB,IAAMiM,EAAmB,EAAK1L,iBAAiB2L,aAAanT,GACxDkT,IAKA,EAAKkC,eAAevV,QAAQ,YACxBlB,EAD2C,EAAhBT,WACEgV,EAAiBrW,IAAKqW,EAAiBnW,QAIxE,EAAKqY,eAAevV,QAAQ,YAAa,IAAVyV,EAAU,EAAVA,KACvB,EAAK3S,kBAAkBsE,WAAWqO,IAGlCA,EAAK0G,uCAKZ,EAAK9U,eACV,EAAK4Q,4B,4BAUjB,WACI,IAAKtc,KAAK4X,kBAAmB,CACzB,IAAMnI,GAAa,SAAe,QAAczP,KAAKQ,UACrDR,KAAK4X,kBAAoBnI,GAAczP,KAAK4D,UAEhD,OAAO5D,KAAK4X,oB,sCAGhB,WAAwB,WACd6I,EAAezgB,KAAK6b,kBAAkBc,OAAO,SAAA9K,GAAI,OAAIA,EAAKpG,eAChEzL,KAAKia,UAAU5V,QAAQ,SAAA2Z,GAAO,OAAIA,EAAQ0C,gBAAgB,EAAMD,S,KASxE,SAASxD,GAAUlE,EAAO4H,GACtB,IAAK,IAAI7a,EAAI,EAAGA,EAAIiT,EAAMhT,OAAQD,IAC9B,GAAI6a,EAAU5H,EAAMjT,GAAIA,EAAGiT,GACvB,OAAOjT,EAGf,OAAQ,EAOZ,SAASoV,GAAwB9V,EAAMwb,GAC/Bxb,IAAS6Z,OACT7Z,EAAKyb,SAAS,EAAGD,GAIjBxb,EAAKd,WAAasc,EAQ1B,SAASzF,GAA0B/V,EAAMwb,GACjCxb,IAAS6Z,OACT7Z,EAAKyb,SAASD,EAAQ,GAItBxb,EAAKb,YAAcqc,EAQ3B,SAASpC,GAA2B9b,EAAYc,GAC5C,IAAQnC,EAAwBqB,EAAxBrB,IAAKwB,EAAmBH,EAAnBG,OACPa,EA7vByB,IA4vBChB,EAAXK,OAErB,OAAIS,GAAYnC,EAAMqC,GAAcF,GAAYnC,EAAMqC,EAC3C,EAEFF,GAAYX,EAASa,GAAcF,GAAYX,EAASa,EACtD,EAEJ,EAOX,SAASgb,GAA6Bhc,EAAYa,GAC9C,IAAQhC,EAAuBmB,EAAvBnB,KAAMqB,EAAiBF,EAAjBE,MACRa,EA7wByB,IA4wBAf,EAAVI,MAErB,OAAIS,GAAYhC,EAAOkC,GAAcF,GAAYhC,EAAOkC,EAC7C,EAEFF,GAAYX,EAAQa,GAAcF,GAAYX,EAAQa,EACpD,EAEJ,EAoDX,IAAMqd,IAA8B,QAAgC,CAChEha,SAAS,EACTia,SAAS,I,kBAUPC,E,WACF,WAAY9Z,EAAStD,GAAS,2BAC1B5D,KAAKkH,QAAUA,EAEflH,KAAKihB,eAAiB,IAAI/Y,IAE1BlI,KAAKkhB,eAAiB,IAAIhZ,IAE1BlI,KAAKmhB,qBAAuB,GAE5BnhB,KAAKohB,iBAAmB,IAAIrd,IAK5B/D,KAAKqhB,mBAAqB,SAACxP,GAAD,OAAUA,EAAKpG,cAKzCzL,KAAK8Q,YAAc,IAAItJ,EAAA,GAKvBxH,KAAK+Q,UAAY,IAAIvJ,EAAA,GAMrBxH,KAAKshB,OAAS,IAAI9Z,EAAA,GAKlBxH,KAAKuhB,6BAA+B,SAAC/c,GAC7B,EAAK2c,qBAAqBpb,OAAS,GACnCvB,EAAMmF,kBAId3J,KAAKwhB,6BAA+B,SAAChd,GAC7B,EAAK2c,qBAAqBpb,OAAS,IAI/B,EAAKob,qBAAqBM,KAAK,EAAKJ,qBACpC7c,EAAMmF,iBAEV,EAAKmH,YAAY/Q,KAAKyE,KAG9BxE,KAAK4D,UAAYA,E,oDAGrB,SAAsBoO,GACbhS,KAAKihB,eAAe/X,IAAI8I,IACzBhS,KAAKihB,eAAexU,IAAIuF,K,8BAIhC,SAAiB8H,GAAI,WACjB9Z,KAAKkhB,eAAezU,IAAIqN,GAIS,IAA7B9Z,KAAKkhB,eAAe9D,MACpBpd,KAAKkH,QAAQ6F,kBAAkB,WAG3B,EAAKnJ,UAAUoJ,iBAAiB,YAAa,EAAKwU,6BAA8BV,Q,iCAK5F,SAAoB9O,GAChBhS,KAAKihB,eAAe9S,OAAO6D,K,4BAG/B,SAAe8H,GACX9Z,KAAKkhB,eAAe/S,OAAO2L,GAC3B9Z,KAAKyO,aAAaqL,GACe,IAA7B9Z,KAAKkhB,eAAe9D,MACpBpd,KAAK4D,UAAU+Q,oBAAoB,YAAa3U,KAAKwhB,6BAA8BV,M,2BAQ3F,SAAchH,EAAMtV,GAAK,WAErB,KAAIxE,KAAKmhB,qBAAqBpf,QAAQ+X,IAAS,KAG/C9Z,KAAKmhB,qBAAqB/E,KAAKtC,GACU,IAArC9Z,KAAKmhB,qBAAqBpb,QAAc,CACxC,IAAM,EAAevB,EAAMgC,KAAKkb,WAAW,SAI3C1hB,KAAKohB,iBACAld,IAAI,EAAe,WAAa,UAAW,CAC5CuQ,QAAS,SAACkN,GAAD,OAAO,EAAK5Q,UAAUhR,KAAK4hB,IACpCC,SAAS,IAER1d,IAAI,SAAU,CACfuQ,QAAS,SAACkN,GAAD,OAAO,EAAKL,OAAOvhB,KAAK4hB,IAGjCC,SAAS,IAMR1d,IAAI,cAAe,CACpBuQ,QAASzU,KAAKuhB,6BACdK,QAASd,KAIR,GACD9gB,KAAKohB,iBAAiBld,IAAI,YAAa,CACnCuQ,QAAS,SAACkN,GAAD,OAAO,EAAK7Q,YAAY/Q,KAAK4hB,IACtCC,QAASd,KAGjB9gB,KAAKkH,QAAQ6F,kBAAkB,WAC3B,EAAKqU,iBAAiB/c,QAAQ,SAACwd,EAAQ1f,GACnC,EAAKyB,UAAUoJ,iBAAiB7K,EAAM0f,EAAOpN,QAASoN,EAAOD,gB,0BAM7E,SAAa9H,GACT,IAAM2B,EAAQzb,KAAKmhB,qBAAqBpf,QAAQ+X,GAC5C2B,GAAS,IACTzb,KAAKmhB,qBAAqBpF,OAAON,EAAO,GACC,IAArCzb,KAAKmhB,qBAAqBpb,QAC1B/F,KAAK8hB,2B,wBAKjB,SAAWhI,GACP,OAAO9Z,KAAKmhB,qBAAqBpf,QAAQ+X,IAAS,I,sBAStD,SAASrK,GAAU,WACTsS,EAAU,CAAC/hB,KAAKshB,QAoBtB,OAnBI7R,GAAcA,IAAezP,KAAK4D,WAIlCme,EAAQ3F,KAAK,IAAIzB,EAAA,EAAW,SAACqH,GACzB,OAAO,EAAK9a,QAAQ6F,kBAAkB,WAClC,IACM3G,EAAW,SAAC5B,GACV,EAAK2c,qBAAqBpb,QAC1Bic,EAASjiB,KAAKyE,IAItB,OADAiL,EAAWzC,iBAAiB,SAAU5G,GANjB,GAOd,WACHqJ,EAAWkF,oBAAoB,SAAUvO,GARxB,SAa1B6b,EAAA,eAASF,K,yBAEpB,WAAW,WACP/hB,KAAKkhB,eAAe7c,QAAQ,SAAA6d,GAAQ,OAAI,EAAKlU,eAAekU,KAC5DliB,KAAKihB,eAAe5c,QAAQ,SAAA6d,GAAQ,OAAI,EAAK5G,oBAAoB4G,KACjEliB,KAAK8hB,wBACL9hB,KAAK8Q,YAAY5C,WACjBlO,KAAK+Q,UAAU7C,a,mCAGnB,WAAqB,WACjBlO,KAAKohB,iBAAiB/c,QAAQ,SAACwd,EAAQ1f,GACnC,EAAKyB,UAAU+Q,oBAAoBxS,EAAM0f,EAAOpN,QAASoN,EAAOD,WAEpE5hB,KAAKohB,iBAAiBpd,Y,YAG9Bgd,EAAiBmB,UAAO,SAAkCC,GAAK,OAAO,IAAKA,GAAKpB,GAAkB,MAAgB,OAAgB,MAAgB,QAClJA,EAAiBqB,WAAQ,MAAsB,CAAEC,QAAS,WAAsC,OAAO,IAAItB,EAAiB,MAAY,OAAY,MAAY,QAAkBuB,MAAOvB,EAAkBwB,WAAY,S,KAqBjNC,GAAiB,CACnBxX,mBAAoB,EACpB8L,gCAAiC,G,kBAK/B2L,E,WACF,WAAY9e,EAAWsD,EAASrD,EAAgBsD,IAAiB,eAC7DnH,KAAK4D,UAAYA,EACjB5D,KAAKkH,QAAUA,EACflH,KAAK6D,eAAiBA,EACtB7D,KAAKmH,kBAAoBA,E,yCAO7B,SAAW3G,GAAgC,IAAvBqhB,EAAuB,uDAAdY,GACzB,OAAO,IAAIzb,EAAQxG,EAASqhB,EAAQ7hB,KAAK4D,UAAW5D,KAAKkH,QAASlH,KAAK6D,eAAgB7D,KAAKmH,qB,4BAMhG,SAAe3G,GACX,OAAO,IAAI6Y,GAAY7Y,EAASR,KAAKmH,kBAAmBnH,KAAK4D,UAAW5D,KAAKkH,QAASlH,KAAK6D,oB,YAGnG6e,EAASP,UAAO,SAA0BC,GAAK,OAAO,IAAKA,GAAKM,GAAU,MAAgB,MAAW,MAAgB,OAAgB,MAAgB,MAAuB,MAAgB1B,MAC5L0B,EAASL,WAAQ,MAAsB,CAAEC,QAAS,WAA8B,OAAO,IAAII,EAAS,MAAY,MAAc,MAAY,OAAY,MAAY,MAAmB,MAAY1B,MAAuBuB,MAAOG,EAAUF,WAAY,S,KA4B/OG,GAAkB,IAAI,MAAe,mBAsBrCC,GAAsB,IAAI,MAAe,oBAkDzCC,GAAkB,IAAI,MAAe,mBA6BvCC,GAAmB,EAMjBC,GAAgB,IAAI,MAAe,e,kBAGnCC,E,WACF,WAEAxiB,EAASyiB,EAAUC,EAAoBC,EAAmBC,EAAMC,EAAQxB,GAAM,2BAC1E7hB,KAAKQ,QAAUA,EACfR,KAAKkjB,mBAAqBA,EAC1BljB,KAAKmjB,kBAAoBA,EACzBnjB,KAAKojB,KAAOA,EACZpjB,KAAKqjB,OAASA,EAEdrjB,KAAKsjB,WAAa,IAAI9b,EAAA,GAMtBxH,KAAKujB,YAAc,GAKnBvjB,KAAKwjB,GAAL,wBAA2BV,MAK3B9iB,KAAKwZ,eAAiB,kBAAM,GAE5BxZ,KAAKyZ,cAAgB,kBAAM,GAE3BzZ,KAAK4I,QAAU,IAAI,MAInB5I,KAAK0I,QAAU,IAAI,MAKnB1I,KAAK2I,OAAS,IAAI,MAElB3I,KAAK0Z,OAAS,IAAI,MAQlB1Z,KAAKyjB,eAAiB,IAAIvb,IAI1BlI,KAAK0jB,aAAeT,EAASU,eAAenjB,GAC5CR,KAAK0jB,aAAaE,KAAO5jB,KACrB6hB,GACA7hB,KAAK6jB,gBAAgBhC,GAEzB7hB,KAAK0jB,aAAalK,eAAiB,SAACM,EAAM9H,GACtC,OAAO,EAAKwH,eAAeM,EAAK8J,KAAM5R,EAAK4R,OAE/C5jB,KAAK0jB,aAAajK,cACd,SAACgC,EAAO3B,EAAM9H,GACV,OAAO,EAAKyH,cAAcgC,EAAO3B,EAAK8J,KAAM5R,EAAK4R,OAEzD5jB,KAAK8jB,4BAA4B9jB,KAAK0jB,cACtC1jB,KAAK+jB,cAAc/jB,KAAK0jB,cACxBV,EAAYgB,WAAW5H,KAAKpc,MACxBqjB,GACAA,EAAOY,OAAOxX,IAAIzM,M,qCAI1B,WACI,OAAOA,KAAKqI,aAAgBrI,KAAKqjB,QAAUrjB,KAAKqjB,OAAOla,U,IAE3D,SAAavH,GAKT5B,KAAK0jB,aAAava,SAAWnJ,KAAKqI,WAAY,QAAsBzG,K,qBAGxE,SAAQiQ,GACJ7R,KAAKyjB,eAAehX,IAAIoF,GACpB7R,KAAK0jB,aAAajY,cAClBzL,KAAKkkB,sB,wBAIb,SAAWrS,GACP7R,KAAKyjB,eAAetV,OAAO0D,GACvB7R,KAAK0jB,aAAajY,cAClBzL,KAAKkkB,sB,4BAIb,WACI,OAAOxQ,MAAMwF,KAAKlZ,KAAKyjB,gBAAgBjE,KAAK,SAACC,EAAGC,GAK5C,OAJyBD,EAAE0E,SAAS5E,oBAAoB6E,wBAAwB1E,EAAEyE,SAAS5E,qBAIjE8E,KAAKC,6BAA+B,EAAI,M,yBAG1E,WACI,IAAM7I,EAAQuH,EAAYgB,WAAWjiB,QAAQ/B,MACzCyb,GAAS,GACTuH,EAAYgB,WAAWjI,OAAON,EAAO,GAErCzb,KAAKqjB,QACLrjB,KAAKqjB,OAAOY,OAAO9V,OAAOnO,MAE9BA,KAAKyjB,eAAezf,QACpBhE,KAAK0jB,aAAaa,UAClBvkB,KAAKsjB,WAAWvjB,OAChBC,KAAKsjB,WAAWpV,a,yCAGpB,SAA4BsW,GAAG,WACvBxkB,KAAKojB,MACLpjB,KAAKojB,KAAK7V,OACLuN,MAAK,EAAA2J,EAAA,GAAUzkB,KAAKojB,KAAKxhB,QAAQ,EAAAmZ,EAAA,GAAU/a,KAAKsjB,aAChD9V,UAAU,SAAA5L,GAAK,OAAI4iB,EAAIE,cAAc9iB,KAE9C4iB,EAAIlc,cAAckF,UAAU,WACxB,IAAM+P,GAAW,QAAY,EAAKgG,aAAajhB,IAAI,SAAA0P,GAC/C,MAAoB,iBAATA,EACuBgR,EAAYgB,WAAWhb,KAAK,SAAA2b,GAAI,OAAIA,EAAKnB,KAAOxR,IAM3EA,IAWX,GATI,EAAKqR,QACL,EAAKA,OAAOY,OAAO5f,QAAQ,SAAA2N,IACS,IAA5BuL,EAASxb,QAAQiQ,IACjBuL,EAASnB,KAAKpK,MAMrB,EAAK4S,2BAA4B,CAClC,IAAMC,EAAoB,EAAK1B,kBAC1B2B,4BAA4B,EAAKtkB,SACjC8B,IAAI,SAAAyiB,GAAU,OAAIA,EAAWC,gBAAgB1E,gBAClD,EAAKoD,aAAatI,sBAAsByJ,GAGxC,EAAKD,4BAA6B,EAEtCJ,EAAIrb,SAAW,EAAKA,SACpBqb,EAAItO,SAAW,EAAKA,SACpBsO,EAAIjS,iBAAkB,QAAsB,EAAKA,iBACjDiS,EAAIlL,oBAAqB,QAAsB,EAAKA,oBACpDkL,EAAIjL,gBAAiB,QAAqB,EAAKA,eAAgB,GAC/DiL,EACKjB,YAAYhG,EAASZ,OAAO,SAAA3K,GAAI,OAAIA,GAAQA,IAAS,IAAM1P,IAAI,SAAAqiB,GAAI,OAAIA,EAAKjB,gBAC5EuB,gBAAgB,EAAKlI,iB,2BAIlC,SAAcyH,GAAG,WACbA,EAAIlc,cAAckF,UAAU,WACxB,EAAK0W,oBACL,EAAKhB,mBAAmBgC,iBAE5BV,EAAI9b,QAAQ8E,UAAU,SAAAhJ,GAClB,EAAKkE,QAAQyc,KAAK,CACd5Z,UAAW,EACXsG,KAAMrN,EAAMqN,KAAK+R,KACjBlS,aAAclN,EAAMkN,iBAG5B8S,EAAI7b,OAAO6E,UAAU,SAAAhJ,GACjB,EAAKmE,OAAOwc,KAAK,CACb5Z,UAAW,EACXsG,KAAMrN,EAAMqN,KAAK+R,OAErB,EAAKV,mBAAmBgC,iBAE5BV,EAAI9K,OAAOlM,UAAU,SAAAhJ,GACjB,EAAKkV,OAAOyL,KAAK,CACbrT,cAAetN,EAAMsN,cACrBJ,aAAclN,EAAMkN,aACpBnG,UAAW,EACXsG,KAAMrN,EAAMqN,KAAK+R,SAGzBY,EAAI5b,QAAQ4E,UAAU,SAAAhJ,GAClB,EAAKoE,QAAQuc,KAAK,CACdrT,cAAetN,EAAMsN,cACrBJ,aAAclN,EAAMkN,aACpBK,kBAAmBvN,EAAMuN,kBAAkB6R,KAC3CrY,UAAW/G,EAAM+G,UAAUqY,KAC3B/R,KAAMrN,EAAMqN,KAAK+R,KACjBjS,uBAAwBnN,EAAMmN,uBAC9BhH,SAAUnG,EAAMmG,SAChBqE,UAAWxK,EAAMwK,YAIrB,EAAKkU,mBAAmBgC,mB,6BAIhC,SAAgBrD,GACZ,IAAQ3L,EAAyF2L,EAAzF3L,SAAUkP,EAA+EvD,EAA/EuD,iBAAkB7S,EAA6DsP,EAA7DtP,gBAAiB8S,EAA4CxD,EAA5CwD,uBAAwBC,EAAoBzD,EAApByD,gBAC7EtlB,KAAKmJ,SAA+B,MAApBic,GAAmCA,EACnDplB,KAAKuS,gBAAqC,MAAnBA,GAAkCA,EACzDvS,KAAKsZ,mBAA+C,MAA1B+L,GAAyCA,EACnErlB,KAAK+c,YAAcuI,GAAmB,WAClCpP,IACAlW,KAAKkW,SAAWA,K,+BAIxB,WACIlW,KAAK0jB,aAAa6B,UAAUvlB,KAAKwlB,iBAAiBljB,IAAI,SAAAuP,GAAI,OAAIA,EAAKsS,gB,YAG3EnB,EAAYb,UAAO,SAA6BC,GAAK,OAAO,IAAKA,GAAKY,GAAa,MAAyB,OAAoB,MAAyBN,IAAW,MAAyB,OAA2B,MAAyB,MAA0B,MAAyB,KAAuB,GAAI,MAAyBE,GAAqB,IAAK,MAAyBC,GAAiB,KAC5ZG,EAAYyC,UAAqB,MAAyB,CAAEjf,KAAMwc,EAAa0C,UAAW,CAAC,CAAC,GAAI,cAAe,IAAK,CAAC,kBAAmBC,UAAW,CAAC,EAAG,iBAAkBC,SAAU,EAAGC,aAAc,SAAkCC,EAAIC,GAAgB,EAALD,IAC7O,MAAmB,KAAMC,EAAIvC,IAC7B,MAAmB,yBAA0BuC,EAAI5c,SAAjD,CAA2D,yBAA0B4c,EAAIrC,aAAajY,aAAtG,CAAoH,0BAA2Bsa,EAAIrC,aAAahY,iBAC/Jsa,OAAQ,CAAEzC,YAAa,CAAC,yBAA0B,eAAgBC,GAAI,KAAMhK,eAAgB,CAAC,4BAA6B,kBAAmBC,cAAe,CAAC,2BAA4B,iBAAkBtQ,SAAU,CAAC,sBAAuB,YAAaoJ,gBAAiB,CAAC,6BAA8B,mBAAoB+G,mBAAoB,CAAC,gCAAiC,sBAAuByD,YAAa,CAAC,yBAA0B,eAAgB7G,SAAU,CAAC,sBAAuB,YAAa0N,KAAM,CAAC,kBAAmB,QAASrK,eAAgB,CAAC,4BAA6B,mBAAqB0M,QAAS,CAAErd,QAAS,qBAAsBF,QAAS,qBAAsBC,OAAQ,oBAAqB+Q,OAAQ,qBAAuBwM,SAAU,CAAC,eAAgBC,SAAU,CAAC,MAA0B,CAE1xB,CAAEC,QAASxD,GAAqByD,cA1OjCnZ,GA2OC,CAAEkZ,QAASrD,GAAeuD,YAAatD,QAGnDA,EAAYgB,WAAa,G,KAqHnBuC,GAAkB,IAAI,MAAe,iBAiErCC,GAAuB,IAAI,MAAe,sBAwC1CC,GAAmB,IAAI,MAAe,kB,kBA4CtCC,E,WACF,WAEAlmB,EAEA2O,EAKAvL,EAAWsD,EAASyf,EAAmB9E,EAAQuB,EAAMH,EAAUC,EAAoB0D,EAAaC,GAAW,2BACvG7mB,KAAKQ,QAAUA,EACfR,KAAKmP,cAAgBA,EACrBnP,KAAKkH,QAAUA,EACflH,KAAK2mB,kBAAoBA,EACzB3mB,KAAKojB,KAAOA,EACZpjB,KAAKkjB,mBAAqBA,EAC1BljB,KAAK4mB,YAAcA,EACnB5mB,KAAK6mB,YAAcA,EACnB7mB,KAAKsjB,WAAa,IAAI9b,EAAA,GAEtBxH,KAAKuI,QAAU,IAAI,MAEnBvI,KAAKwI,SAAW,IAAI,MAEpBxI,KAAKyI,MAAQ,IAAI,MAEjBzI,KAAK0I,QAAU,IAAI,MAEnB1I,KAAK2I,OAAS,IAAI,MAElB3I,KAAK4I,QAAU,IAAI,MAKnB5I,KAAK6I,MAAQ,IAAI8R,EAAA,EAAW,SAACqH,GACzB,IAAM8E,EAAe,EAAK3C,SAAStb,MAAMiS,MAAK,EAAAxY,EAAA,GAAI,SAAAykB,GAAU,MAAK,CAC7D3mB,OAAQ,EACRmJ,gBAAiBwd,EAAWxd,gBAC5B/E,MAAOuiB,EAAWviB,MAClBqG,MAAOkc,EAAWlc,MAClBF,SAAUoc,EAAWpc,aACpB6C,UAAUwU,GACf,OAAO,WACH8E,EAAaxZ,iBAGrBtN,KAAKmkB,SAAWlB,EAAS+D,WAAWxmB,EAAS,CACzCyK,mBAAoB4W,GAAuC,MAA7BA,EAAO5W,mBACjC4W,EAAO5W,mBAAqB,EAChC8L,gCAAiC8K,GAAoD,MAA1CA,EAAO9K,gCAC9C8K,EAAO9K,gCAAkC,EAC7CvD,OAAQqO,aAAuC,EAASA,EAAOrO,SAEnExT,KAAKmkB,SAASP,KAAO5jB,KAIrB0mB,EAAQxF,eAAe9E,KAAKpc,MACxB6hB,GACA7hB,KAAK6jB,gBAAgBhC,GASrB1S,IACAnP,KAAKmkB,SAASzH,mBAAmBvN,EAAcuU,cAC/CvU,EAAc8X,QAAQjnB,OAE1BA,KAAKknB,YAAYlnB,KAAKmkB,UACtBnkB,KAAK+jB,cAAc/jB,KAAKmkB,U,qCAG5B,WACI,OAAOnkB,KAAKqI,WAAcrI,KAAKmP,eAAiBnP,KAAKmP,cAAchG,U,IAEvE,SAAavH,GACT5B,KAAKqI,WAAY,QAAsBzG,GACvC5B,KAAKmkB,SAAShb,SAAWnJ,KAAKqI,Y,mCAMlC,WACI,OAAOrI,KAAKmkB,SAAS9X,0B,4BAGzB,WACI,OAAOrM,KAAKmkB,SAAS7X,mB,mBAGzB,WACItM,KAAKmkB,SAASgD,U,iCAKlB,WACI,OAAOnnB,KAAKmkB,SAASiD,wB,6BAEzB,WAAe,WAKXpnB,KAAKkH,QAAQmgB,SACRvM,MAAK,EAAAwM,EAAA,GAAK,IAAI,EAAAvM,EAAA,GAAU/a,KAAKsjB,aAC7B9V,UAAU,WACX,EAAK+Z,qBAEL,EAAKvf,SAASwf,QAAQ1M,MAAK,EAAA2J,EAAA,GAAU,EAAKzc,WAE1C,EAAAyf,EAAA,GAAI,SAAClb,GACD,IAAMmb,EAAsBnb,EACvBoQ,OAAO,SAAA1T,GAAM,OAAIA,EAAO4d,cAAgB,IACxCvkB,IAAI,SAAA2G,GAAM,OAAIA,EAAOzI,UAItB,EAAKomB,aAAe,EAAKe,qBACzBD,EAAoBtL,KAAK,EAAK5b,SAElC,EAAK2jB,SAASyD,YAAYF,MAG9B,EAAAG,EAAA,GAAU,SAACtb,GACP,OAAO0V,EAAA,uBAAS1V,EAAQjK,IAAI,SAAAuP,GACxB,OAAOA,EAAKiW,cAAchN,MAAK,EAAA2J,EAAA,GAAU5S,WAE7C,EAAAkJ,EAAA,GAAU,EAAKuI,aAAa9V,UAAU,SAAAua,GAEtC,IAAMC,EAAU,EAAK7D,SACflb,EAAS8e,EAAevnB,QAAQ8f,cACtCyH,EAAe5e,SAAW6e,EAAQC,cAAchf,GAAU+e,EAAQE,aAAajf,KAE/E,EAAKkf,kBACL,EAAKhE,SAAS5M,oBAAoB,EAAK4Q,sB,yBAInD,SAAYX,GACR,IAAMY,EAAqBZ,EAAO,oBAC5Ba,EAAiBb,EAAO,iBAG1BY,IAAuBA,EAAmBE,aAC1CtoB,KAAKunB,qBAGLc,IAAmBA,EAAeC,aAAetoB,KAAKmoB,kBACtDnoB,KAAKmkB,SAAS5M,oBAAoBvX,KAAKmoB,oB,yBAG/C,WACQnoB,KAAKmP,eACLnP,KAAKmP,cAAcoZ,WAAWvoB,MAElC,IAAMyb,EAAQiL,EAAQxF,eAAenf,QAAQ/B,MACzCyb,GAAS,GACTiL,EAAQxF,eAAenF,OAAON,EAAO,GAEzCzb,KAAKsjB,WAAWvjB,OAChBC,KAAKsjB,WAAWpV,WAChBlO,KAAKmkB,SAASI,Y,gCAGlB,WACI,IAAM/jB,EAAUR,KAAKQ,QAAQ8f,cACvBzT,EAAc7M,KAAK2nB,oBACrBa,GAA2BhoB,EAASR,KAAK2nB,qBAAuBnnB,EAIpER,KAAKmkB,SAAStY,gBAAgBgB,GAAerM,K,iCAGjD,WACI,IAAMioB,EAAWzoB,KAAKqN,gBACtB,OAAKob,EAGmB,iBAAbA,EACAD,GAA2BxoB,KAAKQ,QAAQ8f,cAAemI,IAElD,QAAcA,GALnB,O,yBAaf,SAAYjE,GAAG,WACXA,EAAIlc,cAAckF,UAAU,WACxB,IAAKgX,EAAI/Y,aAAc,CACnB,IAAMid,EAAM,EAAKtF,KACXhb,EAAiB,EAAKA,eACtBiH,EAAc,EAAKzC,qBAAuB,CAC5CF,SAAU,EAAKE,qBAAqB+b,YACpCliB,QAAS,EAAKmG,qBAAqBgX,KACnC5Q,cAAe,EAAK2T,mBACpB,KACEhU,EAAU,EAAKhG,iBAAmB,CACpCD,SAAU,EAAKC,iBAAiBgc,YAChCliB,QAAS,EAAKkG,iBAAiBiX,KAC/BtS,UAAW,EAAK3E,iBAAiB2E,UACjC0B,cAAe,EAAK2T,mBACpB,KACJnC,EAAIrb,SAAW,EAAKA,SACpBqb,EAAItO,SAAW,EAAKA,SACpBsO,EAAIpc,eAA4C,iBAAnBA,GAA+BA,EACxDA,GAAiB,QAAqBA,GAC1Coc,EAAIrO,kBAAoB,EAAKA,kBAC7BqO,EAAI3R,aAAe,EAAKA,aACxB2R,EACKoE,oBAAoB,EAAKC,uBACzBC,wBAAwBzZ,GACxB0Z,oBAAoBpW,GACpBqW,qBAAqB,EAAKlR,kBAAoB,UAC/C4Q,GACAlE,EAAIE,cAAcgE,EAAI9mB,UAKlC4iB,EAAIlc,cAAcwS,MAAK,EAAAwM,EAAA,GAAK,IAAI9Z,UAAU,WACtC,IAAI5G,EAAIqiB,EAER,GAAI,EAAKpC,YACLrC,EAAI1Y,WAAW,EAAK+a,YAAY1C,eAMpC,IADA,IAAIzW,EAAS,EAAKlN,QAAQ8f,cAActE,cACjCtO,GAAQ,CAEX,GAAgC,QAA3B9G,EAAK8G,EAAO+F,iBAA8B,IAAP7M,OAAgB,EAASA,EAAGvB,SArP5D,YAqPuF,CAC3Fmf,EAAI1Y,YAEI,QAFSmd,EAAKvC,EAAQxF,eAAelY,KAAK,SAAA8Q,GAC9C,OAAOA,EAAKtZ,QAAQ8f,gBAAkB5S,WACnB,IAAPub,OAAgB,EAASA,EAAG9E,WAAa,MACzD,MAEJzW,EAASA,EAAOsO,mB,2BAK5B,SAAcwI,GAAG,WACbA,EAAIjc,QAAQiF,UAAU,WAClB,EAAKjF,QAAQ4c,KAAK,CAAE/kB,OAAQ,IAG5B,EAAK8iB,mBAAmBgC,iBAE5BV,EAAIhc,SAASgF,UAAU,WACnB,EAAKhF,SAAS2c,KAAK,CAAE/kB,OAAQ,MAEjCokB,EAAI/b,MAAM+E,UAAU,SAAAhJ,GAChB,EAAKiE,MAAM0c,KAAK,CACZ/kB,OAAQ,EACRuK,SAAUnG,EAAMmG,SAChBqE,UAAWxK,EAAMwK,YAIrB,EAAKkU,mBAAmBgC,iBAE5BV,EAAI9b,QAAQ8E,UAAU,SAAAhJ,GAClB,EAAKkE,QAAQyc,KAAK,CACd5Z,UAAW/G,EAAM+G,UAAUqY,KAC3B/R,KAAM,EACNH,aAAclN,EAAMkN,iBAG5B8S,EAAI7b,OAAO6E,UAAU,SAAAhJ,GACjB,EAAKmE,OAAOwc,KAAK,CACb5Z,UAAW/G,EAAM+G,UAAUqY,KAC3B/R,KAAM,MAGd2S,EAAI5b,QAAQ4E,UAAU,SAAAhJ,GAClB,EAAKoE,QAAQuc,KAAK,CACdrT,cAAetN,EAAMsN,cACrBJ,aAAclN,EAAMkN,aACpBK,kBAAmBvN,EAAMuN,kBAAkB6R,KAC3CrY,UAAW/G,EAAM+G,UAAUqY,KAC3BjS,uBAAwBnN,EAAMmN,uBAC9BE,KAAM,EACNlH,SAAUnG,EAAMmG,SAChBqE,UAAWxK,EAAMwK,gB,6BAK7B,SAAgB6S,GACZ,IAAQ3L,EAAwI2L,EAAxI3L,SAAU9N,EAA8HyZ,EAA9HzZ,eAAgB+N,EAA8G0L,EAA9G1L,kBAAmBtD,EAA2FgP,EAA3FhP,aAAcxF,EAA6EwU,EAA7ExU,gBAAiB+X,EAA4DvD,EAA5DuD,iBAAkBuC,EAA0C9F,EAA1C8F,oBAAqB7P,EAAqB+J,EAArB/J,iBAC3H9X,KAAKmJ,SAA+B,MAApBic,GAAmCA,EACnDplB,KAAKoI,eAAiBA,GAAkB,EACpC8N,IACAlW,KAAKkW,SAAWA,GAEhBC,IACAnW,KAAKmW,kBAAoBA,GAEzBtD,IACA7S,KAAK6S,aAAeA,GAEpBxF,IACArN,KAAKqN,gBAAkBA,GAEvBsa,IACA3nB,KAAK2nB,oBAAsBA,GAE3B7P,IACA9X,KAAK8X,iBAAmBA,O,YAIpC4O,EAAQvE,UAAO,SAAyBC,GAAK,OAAO,IAAKA,GAAKsE,GAAS,MAAyB,OAAoB,MAAyB3D,GAAe,IAAK,MAAyB,MAAW,MAAyB,OAAgB,MAAyB,OAA0B,MAAyBF,GAAiB,GAAI,MAAyB,KAAuB,GAAI,MAAyBH,IAAW,MAAyB,OAA2B,MAAyB6D,GAAiB,IAAK,MAAyB5D,GAAiB,MACpjB+D,EAAQjB,UAAqB,MAAyB,CAAEjf,KAAMkgB,EAAShB,UAAW,CAAC,CAAC,GAAI,UAAW,KAAMwD,eAAgB,SAAgCpD,EAAIC,EAAKoD,GAK1J,IAAIC,EAL2K,EAALtD,IAC1K,MAAsBqD,EAAU1C,GAAkB,GAClD,MAAsB0C,EAAU3C,GAAsB,GACtD,MAAsB2C,EAAU5C,GAAiB,IAC1C,EAALT,IAEF,MAAsBsD,EAAK,WAA0BrD,EAAIpZ,iBAAmByc,EAAGC,OAC/E,MAAsBD,EAAK,WAA0BrD,EAAInZ,qBAAuBwc,EAAGC,OACnF,MAAsBD,EAAK,WAA0BrD,EAAI/d,SAAWohB,KACnEzD,UAAW,CAAC,EAAG,YAAaC,SAAU,EAAGC,aAAc,SAA8BC,EAAIC,GAAgB,EAALD,GACrG,MAAmB,oBAAqBC,EAAI5c,SAA5C,CAAsD,oBAAqB4c,EAAI5B,SAAS1Y,eACvFua,OAAQ,CAAE7c,SAAU,CAAC,kBAAmB,YAAaf,eAAgB,CAAC,oBAAqB,kBAAmB8N,SAAU,CAAC,kBAAmB,YAAaC,kBAAmB,CAAC,2BAA4B,qBAAsBtD,aAAc,CAAC,sBAAuB,gBAAiBxF,gBAAiB,CAAC,kBAAmB,mBAAoBsa,oBAAqB,CAAC,qBAAsB,uBAAwB7P,iBAAkB,CAAC,0BAA2B,oBAAqB8L,KAAM,CAAC,cAAe,QAASuE,iBAAkB,CAAC,0BAA2B,qBAAuBlC,QAAS,CAAE1d,QAAS,iBAAkBC,SAAU,kBAAmBC,MAAO,eAAgBC,QAAS,iBAAkBC,OAAQ,gBAAiBC,QAAS,iBAAkBC,MAAO,gBAAkBqd,SAAU,CAAC,WAAYC,SAAU,CAAC,MAA0B,CAAC,CAAEC,QAASzD,GAAiB2D,YAAaI,KAAa,SACx3BA,EAAQxF,eAAiB,G,KA6IzB,SAASsH,GAA2BhoB,EAAS2F,GAEzC,IADA,IAAImjB,EAAiB9oB,EAAQwb,cACtBsN,GAAgB,CAEnB,GAAIA,EAAeC,QAAUD,EAAeC,QAAQpjB,GAChDmjB,EAAeE,kBAAkBrjB,GACjC,OAAOmjB,EAEXA,EAAiBA,EAAetN,cAEpC,OAAO,K,sBAULyN,E,qCAENA,EAAetH,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKqH,IAC5EA,EAAeC,UAAqB,MAAwB,CAAEljB,KAAMijB,IACpEA,EAAeE,UAAqB,MAAwB,CAAEC,UAAW,CACjElH,IACDmH,QAAS,CAAC,Q","file":"default-node_modules_angular_cdk___ivy_ngcc___fesm2015_drag-drop_js.e34deeaca0f1cbf8ac12.js","sourcesContent":["import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nexport function interval(period = 0, scheduler = async) {\n    if (!isNumeric(period) || period < 0) {\n        period = 0;\n    }\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n        scheduler = async;\n    }\n    return new Observable(subscriber => {\n        subscriber.add(scheduler.schedule(dispatch, period, { subscriber, counter: 0, period }));\n        return subscriber;\n    });\n}\nfunction dispatch(state) {\n    const { subscriber, counter, period } = state;\n    subscriber.next(counter);\n    this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n//# sourceMappingURL=interval.js.map","import * as i0 from '@angular/core';\nimport { Injectable, NgZone, Inject, InjectionToken, Directive, Input, EventEmitter, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i2 from '@angular/cdk/scrolling';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/scrolling';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @docs-private\n */\nfunction toggleVisibility(element, enable) {\n    const styles = element.style;\n    styles.position = enable ? '' : 'fixed';\n    styles.top = styles.opacity = enable ? '' : '0';\n    styles.left = enable ? '' : '-999em';\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform ? (transform + ' ' + initialTransform) : transform;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n/** Gets the target of an event while accounting for shadow dom. */\nfunction getEventTarget(event) {\n    return (event.composedPath ? event.composedPath()[0] : event.target);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = getEventTarget(event);\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = this._parentDragRef = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = this._initialTransform = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (getEventTarget(event) === this._preview &&\n                        event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        var _a;\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = ((_a = this._previewTemplate) === null || _a === void 0 ? void 0 : _a.template) ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body;\n        }\n        return coerceElement(previewContainer);\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -scrollStep);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, scrollStep);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled || !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            var _a;\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = (_a = this._itemPositions\n                    .find(current => current.drag === item)) === null || _a === void 0 ? void 0 : _a.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const index = findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return (index === -1 || !this.sortPredicate(index, item, this)) ? -1 : index;\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect || !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) && items.every(item => {\n            // Note that we have to add an exception to the `enterPredicate` for items that started off\n            // in this drop list. The drag ref has logic that allows an item to return to its initial\n            // container, if it has left the initial container and none of the connected containers\n            // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n            return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n        })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._activeDraggables.filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rjxs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc1.ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = i0.ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i2.ViewportRuler), i0.ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` +\n            `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate =\n            (index, drag, drop) => {\n                return this.sortPredicate(index, drag.data, drop.data);\n            };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: ScrollDispatcher },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    sortPredicate: [{ type: Input, args: ['cdkDropListSortPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    autoScrollStep: [{ type: Input, args: ['cdkDropListAutoScrollStep',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[attr.id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.ScrollDispatcher }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], sortPredicate: [{\n            type: Input,\n            args: ['cdkDropListSortPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }], autoScrollStep: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollStep']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPlaceholder.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nCdkDragPreview.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            var _a, _b;\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                // `classList` needs to be null checked, because IE doesn't have it on some elements.\n                if ((_a = parent.classList) === null || _a === void 0 ? void 0 : _a.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(((_b = CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })) === null || _b === void 0 ? void 0 : _b._dragRef) || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({\n                source: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance,\n                dropPoint: event.dropPoint\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDrag.ɵdir = /*@__PURE__*/ ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, 5);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag._dragInstances = [];\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] },\n    { type: CdkDrag, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [CDK_DRAG_PARENT,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    previewContainer: [{ type: Input, args: ['cdkDragPreviewContainer',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': DRAG_HOST_CLASS,\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ɵngcc0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }, { type: CdkDrag, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], previewContainer: [{\n            type: Input,\n            args: ['cdkDragPreviewContainer']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵfac = function DragDropModule_Factory(t) { return new (t || DragDropModule)(); };\nDragDropModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n\n//# sourceMappingURL=drag-drop.js.map"],"sourceRoot":"webpack:///"}