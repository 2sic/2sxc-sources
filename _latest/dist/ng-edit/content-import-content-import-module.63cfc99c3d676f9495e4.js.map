{"version":3,"sources":["./src/app/content-import/services/content-import.service.ts","./src/app/app-administration/services/app-dialog-config.service.ts","./src/app/app-administration/services/content-types.service.ts","./src/app/content-import/content-import-dialog.config.ts","./src/app/content-import/content-import-routing.module.ts","./src/app/content-import/content-import.module.ts","./src/app/shared/helpers/file-to-base64.helper.ts","./src/app/shared/components/dialog-entry/dialog-entry.component.ts"],"names":["http","context","dnnContext","evaluateContent","formValues","file","pipe","fileBase64","requestData","AppId","appId","toString","DefaultLanguage","defaultLanguage","ContentType","contentType","ContentBase64","ResourcesReferences","resourcesReferences","ClearEntities","clearEntities","post","$2sxc","apiUrl","result","Success","Errors","Detail","importContent","ContentImportService","getDialogSettings","this","get","webApiDialogRoot","params","appid","AppDialogConfigService","webApiTypeRoot","name","retrieveContentType","staticName","contentTypeId","retrieveContentTypes","scope","getScopes","scopes","Object","keys","map","key","value","save","delete","StaticName","import","files","formData","FormData","append","zoneId","createGhost","sourceStaticName","ContentTypesService","contentImportDialog","initContext","panelSize","panelClass","getComponent","routes","path","component","data","dialog","ContentImportRoutingModule","forChild","ContentImportModule","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","extras","state","ngOnInit","dialogConfig","snapshot","Error","id","then","init","dialogRef","open","autoFocus","backdropClass","closeOnNavigation","showScrollbar","position","top","afterClosed","subscribe","navRes","navigateUrl","pathFromRoot","length","window","parent","totalPopup","close","navigate","url","relativeTo","markForCheck","ngOnDestroy","DialogEntryComponent"],"mappings":"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","file":"content-import-content-import-module.63cfc99c3d676f9495e4.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentImport, EvaluateContentResult, ImportContentRequest, ImportContentResult } from '../models/content-import.model';\r\n\r\n@Injectable()\r\nexport class ContentImportService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  evaluateContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<EvaluateContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlPreview'), requestData).pipe(\r\n          map(result => {\r\n            if (!result.Success) {\r\n              result.Errors = result.Detail as any;\r\n              delete result.Detail;\r\n            }\r\n            return result;\r\n          }),\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  importContent(formValues: ContentImport) {\r\n    return from(toBase64(formValues.file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        const requestData: ImportContentRequest = {\r\n          AppId: this.context.appId.toString(),\r\n          DefaultLanguage: formValues.defaultLanguage,\r\n          ContentType: formValues.contentType,\r\n          ContentBase64: fileBase64,\r\n          ResourcesReferences: formValues.resourcesReferences,\r\n          ClearEntities: formValues.clearEntities,\r\n        };\r\n        return this.http.post<ImportContentResult>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'XmlUpload'), requestData);\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings() {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { EavScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\n\r\nexport const webApiTypeRoot = 'admin/type/';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeRoot + 'get'), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypeRoot + 'list'), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  getScopes() {\r\n    return this.http.get<Dictionary<string>>(this.apiUrl(webApiTypeRoot + 'scopes'), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopes => {\r\n        const scopeOptions: EavScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'save'), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeRoot + 'delete'), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<ImportAppResult>(this.apiUrl(webApiTypeRoot + 'import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeRoot + 'addghost'), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { DialogConfig } from '../shared/models/dialog-config.model';\r\n\r\nexport const contentImportDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ContentImportComponent } = await import('./content-import.component');\r\n    return ContentImportComponent;\r\n  }\r\n};\r\n\r\nexport interface ContentImportDialogData {\r\n  files?: File[];\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { contentImportDialog } from './content-import-dialog.config';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: DialogEntryComponent, data: { dialog: contentImportDialog } },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ContentImportRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { ContentImportRoutingModule } from './content-import-routing.module';\r\nimport { ContentImportComponent } from './content-import.component';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ContentImportComponent,\r\n  ],\r\n  entryComponents: [\r\n    ContentImportComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ContentImportRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatRadioModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    ContentImportService,\r\n    AppDialogConfigService,\r\n    ContentTypesService,\r\n  ]\r\n})\r\nexport class ContentImportModule { }\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { take } from 'rxjs/operators';\r\nimport { NavigateFormResult } from '../../../../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { Dictionary } from '../../models/dictionary.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Dictionary;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      if (dialogConfig.initContext) {\r\n        this.context.init(this.route);\r\n      }\r\n\r\n      this.dialogRef = this.dialog.open(component, {\r\n        autoFocus: false,\r\n        backdropClass: 'dialog-backdrop',\r\n        closeOnNavigation: false,\r\n        data: this.dialogData,\r\n        panelClass: [\r\n          'dialog-panel',\r\n          `dialog-panel-${dialogConfig.panelSize}`,\r\n          dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n          ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n        ],\r\n        // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n        // Real top margin is overwritten in css e.g. dialog-panel-large\r\n        position: { top: '0' },\r\n        viewContainerRef: this.viewContainerRef,\r\n      });\r\n\r\n      this.dialogRef.afterClosed().pipe(take(1)).subscribe((data: any) => {\r\n        consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n        const navRes = data as NavigateFormResult;\r\n        if (navRes?.navigateUrl != null) {\r\n          this.router.navigate([navRes.navigateUrl]);\r\n          return;\r\n        }\r\n\r\n        if (this.route.pathFromRoot.length <= 3) {\r\n          try {\r\n            window.parent.$2sxc.totalPopup.close();\r\n          } catch (error) { }\r\n          return;\r\n        }\r\n\r\n        if (this.route.snapshot.url.length > 0) {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n        } else {\r\n          this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n        }\r\n      });\r\n\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}