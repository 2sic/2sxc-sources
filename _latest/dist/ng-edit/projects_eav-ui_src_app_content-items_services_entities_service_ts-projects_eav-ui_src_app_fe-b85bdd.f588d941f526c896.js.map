{"version":3,"file":"projects_eav-ui_src_app_content-items_services_entities_service_ts-projects_eav-ui_src_app_fe-b85bdd.f588d941f526c896.js","mappings":"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","names":["EntitiesService","constructor","http","context","dnnContext","this","create","contentType","entity","post","params","appId","zoneId","update","entityId","delete","type","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","toString","force","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","wxM","factory","ɵfac","FeatureNames","AppSyncWithSiteFiles","WysiwygPasteFormatted","PasteImageFromClipboard","EditUiShowNotes","EditUiShowMetadataFor","NoSponsoredByToSic","EditUiTranslateWithGoogle","LightSpeed","ContentSecurityPolicy","PermissionsByLanguage","FieldShareConfigManagement","_r7","ctx_r6","openDialog","vm_r4","feature","icon","FeatureTextInfoComponent_Conditional_0_Conditional_0_Template","ctx","show","FeatureTextInfoComponent","FeatureComponentBase","asInfo","value","asInfo$","next","dialog","viewContainerRef","featuresService","changeDetectorRef","super","BehaviorSubject","viewModel$","combineLatest","feature$","show$","pipe","map","_angular_core__WEBPACK_IMPORTED_MODULE_0__","In1","selectors","inputs","features","decls","vars","consts","template","rf","FeatureTextInfoComponent_Conditional_0_Template","FeatureTextInfoComponent_Conditional_2_Template","FeatureTextInfoComponent_ng_template_3_Template","FeatureTextInfoComponent_contFlowTmp","FeaturesModule","a4G","s3X","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","getFeatureDetails","featureNameId","get","webApiRoot","nameId","id_r4","_r6","ctx_r5","copyToClipboard","link_r7","_r9","ctx_r8","findOutMore","FeatureInfoDialogComponent_Conditional_0_Conditional_15_Template","FeatureInfoDialogComponent_Conditional_0_Conditional_17_Template","_r11","ctx_r10","closeDialog","Name","Description","IsEnabled","FeatureInfoDialogComponent_Conditional_0_contFlowTmp","NameId","Link","FeatureInfoDialogComponent","dialogData","dialogRef","snackBar","featureDetailService","ngOnInit","text","open","duration","link","window","close","MAT_DIALOG_DATA","core","FeatureInfoDialogComponent_Conditional_0_Template","FeatureInfoDialogComponent_contFlowTmp","featureNameId$","showIf","showIf$","switchMap","featName","get$","feat","featureId","autoFocus","data","width","markForCheck","Sc5","DialogEntryComponent","router","route","navigation","getCurrentNavigation","extras","state","dialogConfig","snapshot","Error","consoleLogDev","name","getComponent","then","component","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","ngOnDestroy","initContext","init","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","position","top","afterClosed","navRes","navigateUrl","pathFromRoot","length","parent","totalPopup","navigate","url","relativeTo","FieldHintComponent_Case_1_ng_container_1_Template","_r3","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","ngContentSelectors","_c1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c0","FieldHintComponent_contFlowTmp","ClickStopPropagationDirective","onClick","event","stopPropagation","hostBindings","$event","str","el","document","createElement","setAttribute","style","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","UTH","pure","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","sxcVersion","prefix","suffix","getTranslation","lang","catchError","error","console","warn","of","nextId","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","activeClass","classList","add","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hidden","disabled","booleanAttribute","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/features/feature-names.ts","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.html","./projects/eav-ui/src/app/features/feature-text-info/feature-text-info.component.ts","./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.html","./projects/eav-ui/src/app/features/feature-info-dialog/feature-info-dialog.component.ts","./projects/eav-ui/src/app/features/shared/base-feature.component.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { webApiEntityRoot } from '../../edit/shared/services';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","// This will make it easier for us to see where certain feature names are in use\r\n\r\nexport const FeatureNames = {\r\n  AppSyncWithSiteFiles: 'AppSyncWithSiteFiles',\r\n  WysiwygPasteFormatted: 'WysiwygPasteFormatted',\r\n  PasteImageFromClipboard: 'PasteImageFromClipboard',\r\n  EditUiShowNotes: 'EditUiShowNotes',\r\n  EditUiShowMetadataFor: 'EditUiShowMetadataFor',\r\n  NoSponsoredByToSic: 'NoSponsoredByToSic',\r\n  EditUiTranslateWithGoogle: 'EditUiTranslateWithGoogle',\r\n  LightSpeed: 'LightSpeedOutputCache',\r\n  ContentSecurityPolicy: 'ContentSecurityPolicy',\r\n  PermissionsByLanguage: 'PermissionsByLanguage',\r\n  FieldShareConfigManagement: 'FieldShareConfigManagement',\r\n};\r\n","@if (viewModel$ | async; as vm) {\r\n  @if (vm.show) {\r\n    <div class=\"feature-text-info\" (click)=\"openDialog()\" [tippy]=\"'Features.Tooltip' | translate: vm.feature\">\r\n      <mat-icon class=\"icon icon-{{vm.icon}}\">{{ vm.icon }}</mat-icon>\r\n      <div class=\"feature-text-info-content\">\r\n        <div class=\"feature-text-info-title\">{{ 'Features.FeatureNotActivated' | translate }}</div>\r\n        <div class=\"feature-text-info-subtitle\">{{ 'Features.ClickToFindOutMore' | translate }}</div>\r\n      </div>\r\n    </div>\r\n  }\r\n} @else {\r\n  <div>loading...</div>\r\n}\r\n<ng-template #loading>\r\n  <div>loading...</div>\r\n</ng-template>","import { ChangeDetectorRef, Component, Input, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureSummary } from '../models';\r\nimport { FeatureComponentBase } from '../shared/base-feature.component';\r\nimport { BehaviorSubject, map, Observable, combineLatest, switchMap } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-feature-text-info',\r\n  templateUrl: './feature-text-info.component.html',\r\n  styleUrls: ['./feature-text-info.component.scss']\r\n})\r\nexport class FeatureTextInfoComponent extends FeatureComponentBase {\r\n  @Input()\r\n  public set asInfo(value: boolean) { this.asInfo$.next(value); }\r\n  asInfo$ = new BehaviorSubject<boolean>(false);\r\n\r\n  viewModel$: Observable<FeatureTextInfoViewModel>;\r\n\r\n  constructor(\r\n    dialog: MatDialog,\r\n    viewContainerRef: ViewContainerRef,\r\n    featuresService: FeaturesService,\r\n    changeDetectorRef: ChangeDetectorRef\r\n  ) {\r\n    super(dialog, viewContainerRef, changeDetectorRef , featuresService);\r\n    this.viewModel$ = combineLatest([this.feature$, this.asInfo$, this.show$]).pipe(map(([feature, asInfo, show]) => \r\n      ({\r\n        feature,\r\n        icon: asInfo ? 'info' : 'warning',\r\n        show\r\n      })));\r\n  }\r\n\r\n}\r\n\r\ninterface FeatureTextInfoViewModel {\r\n  feature: FeatureSummary;\r\n  icon: string;\r\n  show: boolean;\r\n}","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <mat-card>\r\n    <mat-card-header>\r\n      <mat-card-title>{{ vm.feature.Name }}</mat-card-title>\r\n    </mat-card-header>\r\n    <mat-card-content>\r\n      <p [innerHtml]=\"vm.feature.Description | safeHtml\"></p>\r\n      <div class=\"eav-info-row\">\r\n        <div class=\"eav-info-row__label\">{{ \"Features.Status\" | translate }}:</div>\r\n        <div class=\"eav-info-row__value\">\r\n          <span>{{ (vm.feature.IsEnabled ? \"Features.Active\" : \"Features.NotActive\") | translate }}</span>\r\n        </div>\r\n      </div>\r\n      @if (vm.feature.NameId; as id) {\r\n        <div class=\"eav-info-row\">\r\n          <div class=\"eav-info-row__label\">ID:</div>\r\n          <div class=\"eav-info-row__value eav_click\">\r\n            <span [tippy]=\"id\" (click)=\"copyToClipboard(id)\">{{ id }}</span>\r\n          </div>\r\n        </div>\r\n      }\r\n    </mat-card-content>\r\n    <mat-card-actions align=\"end\">\r\n      @if (vm.feature.Link; as link) {\r\n        <button mat-raised-button color=\"accent\"\r\n          class=\"eav-card-action-button\" (click)=\"findOutMore(link)\">\r\n          <mat-icon>open_in_new</mat-icon>\r\n          {{ \"Features.FindOutMore\" | translate }}\r\n        </button>\r\n      }\r\n      <button mat-raised-button class=\"eav-card-action-button\" (click)=\"closeDialog()\">\r\n        {{ \"Features.Close\" | translate }}\r\n      </button>\r\n    </mat-card-actions>\r\n  </mat-card>\r\n}","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Observable, combineLatest, map } from 'rxjs';\r\nimport { copyToClipboard } from '../../shared/helpers/copy-to-clipboard.helper';\r\nimport { Feature } from '../models';\r\nimport { FeatureDetailService } from '../services/feature-detail.service';\r\n\r\n@Component({\r\n  selector: 'app-feature-info-dialog',\r\n  templateUrl: './feature-info-dialog.component.html',\r\n  styleUrls: ['./feature-info-dialog.component.scss']\r\n})\r\nexport class FeatureInfoDialogComponent implements OnInit {\r\n  viewModel$: Observable<FeatureInfoViewModel>;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: string,\r\n    private dialogRef: MatDialogRef<FeatureInfoDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private featureDetailService: FeatureDetailService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.viewModel$ = combineLatest([\r\n      this.featureDetailService.getFeatureDetails(this.dialogData)\r\n    ]).pipe(map(([feature]) => ({ feature })));\r\n  }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n\r\n  findOutMore(link: string): void { \r\n    window.open(link, '_blank');\r\n  }\r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n\r\ninterface FeatureInfoViewModel {\r\n  feature: Feature;\r\n}","import { ChangeDetectorRef, Directive, Input, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { FeaturesService } from '../../shared/services/features.service';\r\nimport { FeatureInfoDialogComponent } from '../feature-info-dialog/feature-info-dialog.component';\r\nimport { BehaviorSubject, switchMap, Observable, map, combineLatest } from 'rxjs';\r\nimport { FeatureSummary } from '../models';\r\n\r\n@Directive()\r\nexport class FeatureComponentBase {\r\n  /** Feature NameId to check */\r\n  @Input()\r\n  public set featureNameId(value: string) { this.featureNameId$.next(value); }\r\n  protected featureNameId$ = new BehaviorSubject<string>(null);\r\n\r\n  /** By default, it will show if it's false - here we can change it to show if true */\r\n  @Input()\r\n  public set showIf(value: boolean) { this.showIf$.next(value == true); }\r\n  protected showIf$ = new BehaviorSubject<boolean>(false);\r\n\r\n  // TODO: @SDV - MAKE REACTIVE - SEE text-info-component example\r\n  // featureOn: boolean = true;\r\n  feature$: Observable<FeatureSummary>;\r\n  show$: Observable<boolean>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    protected featuresService: FeaturesService\r\n  ) {\r\n    this.feature$ = this.featureNameId$.pipe(\r\n      switchMap(featName => this.featuresService.get$(featName)\r\n    ));\r\n    this.show$ = combineLatest([this.feature$, this.showIf$]).pipe(\r\n      // tap(data => console.log('2dm - show$', data)),\r\n      map(([feat,showIf]) => showIf == (feat?.IsEnabled ?? false))\r\n    );\r\n  }\r\n\r\n  openDialog() {\r\n    FeatureComponentBase.openDialog(this.dialog, this.featureNameId$.value, this.viewContainerRef, this.changeDetectorRef);\r\n  }\r\n\r\n  /** Public/Static so it can be called from elsewhere */\r\n  public static openDialog(dialog: MatDialog, featureId: string, viewContainerRef: ViewContainerRef, changeDetectorRef: ChangeDetectorRef) {\r\n    dialog.open(FeatureInfoDialogComponent, {\r\n      autoFocus: false,\r\n      data: featureId,\r\n      viewContainerRef: viewContainerRef,\r\n      width: '400px',\r\n    });\r\n\r\n    changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogDev } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogDev('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogDev('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.0.4\", type: MatBadge, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.0.4\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[18]}