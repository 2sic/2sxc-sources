{"version":3,"sources":["./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./src/app/content-items/content-items.component.html","./src/app/content-items/content-items.component.ts","./src/app/content-items/content-items.helpers.ts"],"names":["agInit","params","this","item","data","refresh","clone","onClone","export","onExport","deleteItem","onDelete","ContentItemsActionsComponent","Array","isArray","value","encodedValue","htmlEncode","join","colDef","allowMultiValue","entities","length","text","replace","ContentItemsEntityComponent","Metadata","metadataTooltip","TargetType","KeyNumber","KeyString","KeyGuid","ContentItemsStatusComponent","published","metadata","isFilterActive","doesFilterPass","publishedPassed","metadataPassed","valueGetter","node","toString","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","PubMetaFilterComponent","dialogRef","contentTypesService","router","route","contentItemsService","entitiesService","contentExportService","snackBar","globalConfigService","contentType$","BehaviorSubject","items$","debugEnabled$","getDebugEnabled","modules","gridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","idFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","gridApi$","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","ngOnInit","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","onGridReady","next","api","retrieveContentType","subscribe","contentType","getAll","items","getColumns","columns","columnDefs","buildColumnDefs","filterModel","urlFilters","parsed","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","Status","filter","filterKeys","Object","keys","key","type","filterTo","buildFilterModel","sessionStorage","getItem","setColumnDefs","pipe","gridApi","take","setFilterModel","editItem","form","ContentTypeName","EntityId","Id","formUrl","navigate","relativeTo","exportContent","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","filesDropped","files","importFile","name","substring","lastIndexOf","toLocaleLowerCase","importContent","importItem","state","addMetadata","confirm","metadataKeys","validTargetTypes","map","metaKey","targetType","parseInt","prompt","target","entity","alert","includes","keyTypeKeys","keyTypes","validKeyTypes","keyTypeKey","keyType","number","For","Target","guid","Guid","Number","string","String","debugFilter","warn","add","events","event","startWith","firstChild","pairwise","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","idValueGetter","valueGetterStatus","flex","minWidth","onCellClicked","bind","headerTooltip","valueGetterUsage","pinned","cellRendererParams","delete","column","StaticName","Type","Entity","AllowMultiValue","e","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","DuplicateEntity","exportEntity","_Title","_RepositoryId","open","duration","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","Title","ContentItemsComponent"],"mappings":"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","file":"content-items-component.336576435b9d032c4e38.js","sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  private params: ContentItemsActionsParams;\r\n  private item: ContentItem;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple matTooltip=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [matTooltip]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"value.published\" matTooltip=\"Published\">visibility</mat-icon>\r\n  <mat-icon *ngIf=\"!value.published\" matTooltip=\"Not published\">visibility_off</mat-icon>\r\n  <mat-icon class=\"meta-icon\" *ngIf=\"value.metadata\" [matTooltip]=\"metadataTooltip\">local_offer</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  metadataTooltip: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    // spm TODO: something about data.DraftEntity and data.PublishedEntity is missing. Search in eav-ui project\r\n    this.value = params.value;\r\n    const item: ContentItem = params.data;\r\n    if (item.Metadata) {\r\n      this.metadataTooltip = 'Metadata'\r\n        + `\\nType: ${item.Metadata.TargetType}`\r\n        + (item.Metadata.KeyNumber ? `\\nNumber: ${item.Metadata.KeyNumber}` : '')\r\n        + (item.Metadata.KeyString ? `\\nString: ${item.Metadata.KeyString}` : '')\r\n        + (item.Metadata.KeyGuid ? `\\nGuid: ${item.Metadata.KeyGuid}` : '');\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n    };\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"actions-box\">\r\n      <button mat-button matTooltip=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button matTooltip=\"Add metadata to entity\" (click)=\"addMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" matTooltip=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" matTooltip=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, EavKeyTypeKey, EavMetadataKey } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { angularConsoleLog } from '../shared/helpers/angular-console-log.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters));\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      angularConsoleLog('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  addMetadata() {\r\n    if (!confirm(\r\n      'This is a special operation to add an item which is metadata for another item.'\r\n      + ' If you didn\\'t understand that, this is not for you :). Continue?'\r\n    )) { return; }\r\n\r\n    const metadataKeys = Object.keys(eavConstants.metadata) as EavMetadataKey[];\r\n    const validTargetTypes = metadataKeys.map(metaKey => eavConstants.metadata[metaKey].type);\r\n    const targetType = parseInt(prompt(\r\n      'What kind of assignment do you want?'\r\n      + metadataKeys.map(metaKey => `\\n${eavConstants.metadata[metaKey].type}: ${eavConstants.metadata[metaKey].target}`),\r\n      eavConstants.metadata.entity.type.toString()\r\n    ), 10);\r\n    if (!targetType) { return alert('No target type entered. Cancelled'); }\r\n    if (!validTargetTypes.includes(targetType)) { return alert('Invalid target type. Cancelled'); }\r\n\r\n    const key = prompt('What key do you want?');\r\n    if (!key) { return alert('No key entered. Cancelled'); }\r\n\r\n    const keyTypeKeys = Object.keys(eavConstants.keyTypes) as EavKeyTypeKey[];\r\n    const validKeyTypes = keyTypeKeys.map(keyTypeKey => eavConstants.keyTypes[keyTypeKey]);\r\n    const keyType = prompt(\r\n      'What key type do you want?'\r\n      + keyTypeKeys.map(keyTypeKey => `\\n${eavConstants.keyTypes[keyTypeKey]}`),\r\n      eavConstants.keyTypes.number\r\n    );\r\n    if (!keyType) { return alert('No key type entered. Cancelled'); }\r\n    if (!validKeyTypes.includes(keyType)) { return alert('Invalid key type. Cancelled'); }\r\n    if (keyType === eavConstants.keyTypes.number && !parseInt(key, 10)) {\r\n      return alert('Key type number and key don\\'t match. Cancelled');\r\n    }\r\n\r\n    let target: string;\r\n    for (const metaKey of metadataKeys) {\r\n      if (targetType !== eavConstants.metadata[metaKey].type) { continue; }\r\n      target = eavConstants.metadata[metaKey].target;\r\n      break;\r\n    }\r\n\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: this.contentTypeStaticName,\r\n        For: {\r\n          Target: target,\r\n          ...(keyType === eavConstants.keyTypes.guid && { Guid: key }),\r\n          ...(keyType === eavConstants.keyTypes.number && { Number: parseInt(key, 10) }),\r\n          ...(keyType === eavConstants.keyTypes.string && { String: key }),\r\n        },\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    alert('Check console for filter information');\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter', valueGetter: this.idValueGetter,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 80, headerClass: 'dense', cellClass: 'no-outline',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 120, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case 'Entity':\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'DateTime':\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case 'Boolean':\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case 'Number':\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private idValueGetter(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`;\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.Metadata,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n\r\n    // remove 'Z' and replace 'T'\r\n    return (params.colDef as ExtendedColDef).useTimePicker ? rawValue.substring(0, 19).replace('T', ' ') : rawValue.substring(0, 10);\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== typeof true) { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let parsed: { [key: string]: any };\r\n  try {\r\n    parsed = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!parsed) { return; }\r\n\r\n  // filters can be published, metadata, string, number and boolean\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (parsed.IsPublished || parsed.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: parsed.IsPublished ? parsed.IsPublished : '',\r\n      metadata: parsed.IsMetadata ? parsed.IsMetadata : '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  const filterKeys = Object.keys(parsed);\r\n  for (const key of filterKeys) {\r\n    if (key === 'IsPublished' || key === 'IsMetadata') { continue; }\r\n\r\n    const value = parsed[key];\r\n    if (typeof value === typeof '') {\r\n      const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof 0) {\r\n      const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n      filterModel[key] = filter;\r\n    } else if (typeof value === typeof true) {\r\n      const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n      filterModel[key] = filter;\r\n    }\r\n  }\r\n\r\n  return filterModel;\r\n}\r\n"],"sourceRoot":"webpack:///"}