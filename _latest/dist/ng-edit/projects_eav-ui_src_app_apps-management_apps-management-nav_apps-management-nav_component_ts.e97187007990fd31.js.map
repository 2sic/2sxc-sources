{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.e97187007990fd31.js","mappings":"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","names":["ExportAppService","HttpServiceBase","getAppInfo","initial","this","getSignal","params","appid","appId","zoneId","exportAppUrl","apiUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","getHttpApiUrl","toString","withPortalFiles","__ngFactoryType__","factory","ɵfac","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","ExportAppPartsService","getContentInfo","scope","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","ImportAppService","importApp","changedName","retryOnDuplicate","formData","FormData","append","http","post","pipe","switchMap","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","ViewsService","getAll","delete","id","Id","import","export","getPolymorphism","getUsage","guid","logSpecs","all","getAvailableEntities","getEntities","QueryService","constructor","context","log","classLog","getFromQuery","queryUrl","fields","entitiesFilter","fnIf","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","contentTypes","itemIds","i0","i1","i2","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","r","webApiEntityList","l","sig","res","httpResource","defaultValue","obs","from","fileBase64","AppId","ContentBase64","map","success","Success","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","retrieveContentType","nameId","contentTypeId","getTypeSig","retrieveContentTypes","getTypesSig","getScopes","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","staticName","NameId","files","createGhost","sourceNameId","AppsManagementNavItems","path","icon","tippy","child","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","#globalDialogConfigSvc","#dialogClose","dialog","media","inject","DialogConfigGlobalService","smallScreen","matchMedia","sideNavOpened","matches","navItems","transient","DialogRoutingService","ngOnInit","fetchDialogSettings","doOnDialogClosed","addEventListener","c","sidenav","opened","mode","closeDialog","close","getShared$","subscribe","i3","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i4","MatIconModule","i5","BreadcrumbModule","i6","MatButtonModule","i7","MatSidenavModule","i8","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","router","route","super","snapshot","urlSegments","getParam","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","add","childDialogClosed$","end","urlSubRoute","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","navRelative","commands","events","filter","event","NavigationEnd","startWith","firstChild","pairwise","hadChildBefore","hasChildNow","ImportAppPartsService","importAppParts","resetApp","webApiEntityRoot","EntityService","queryService","getEntities$","p","contentTypeName","shareReplay","data","Default","entityId","force","parentId","parentField","parent"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,  \r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n\r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllSig');\r\n    const sig =  this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n    return l.r(sig);\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star', tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { MediaMatcher } from '@angular/cdk/layout';\r\nimport { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { transient } from '../../../../../core';\r\nimport { DialogConfigGlobalService } from '../../app-administration/services';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\n\r\n@Component({\r\n    selector: 'app-apps-management-nav',\r\n    templateUrl: './apps-management-nav.component.html',\r\n    styleUrls: ['./apps-management-nav.component.scss'],\r\n    imports: [\r\n        MatToolbarModule,\r\n        MatIconModule,\r\n        BreadcrumbModule,\r\n        MatButtonModule,\r\n        MatSidenavModule,\r\n        RouterOutlet,\r\n        NavItemListComponent,\r\n        ToggleDebugDirective,\r\n    ]\r\n})\r\nexport class AppsManagementNavComponent implements OnInit {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  #globalDialogConfigSvc = inject(DialogConfigGlobalService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n  #dialogClose = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.#dialogClose.doOnDialogClosed(() => this.fetchDialogSettings());\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.#globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  get urlSegments() { return this.router.url.split('/'); }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}