{"version":3,"mappings":"uXAOO,MAAMA,EAAgB,aAGtB,IAAMC,EAAb,MAAM,QACJC,YAAoBC,EAA0BC,EAA0BC,GAApDC,YAA0BA,eAA0BA,kBAExEC,UAAUC,EAAYC,EAAqBC,GAAmB,GAC5D,MAAMC,EAAW,IAAIC,SACrBD,SAASE,OAAO,OAAQL,GACxBG,EAASE,OAAO,OAAmB,MAAXJ,IAAe,IAChCH,KAAKH,KAAKW,KAAuBR,KAAKD,WAAWU,MAAMZ,KAAKa,OAAOhB,EAAgB,UAAWW,EAAU,CAC7GM,OAAQ,CAAEC,OAAQZ,KAAKF,QAAQc,OAAOC,cACrCC,MACDC,OAAUC,UACR,GAAIZ,IAAsC,QAAlBa,IAAOC,SAAS,UAAEC,eAAEC,eAAgBC,YAAgC,CAC1F,MAAMC,EAAaC,OAAOP,EAAOE,SAAS,GAAGM,KAAO,4DACpD,GAAIF,EACF,OAAOtB,KAAKC,UAAUC,EAAMoB,GAAY,GAG5C,SAAOG,MAAGT,oDAjBLrB,GAAgB+B,+DAAhB/B,EAAgBgC,QAAhBhC,EAAgB,YAAhBA,GAAb,0FCMO,IAAMiC,EAAb,MAAM,QAIJhC,YACUiC,EACAC,EACAC,EACAC,EACAlC,EACAmC,SALAjC,cACAA,wBACAA,cACAA,aACAA,eACAA,yBAER,MAAMkC,EAAalC,KAAK+B,OAAOI,uBAC/BnC,KAAKoC,YAA+B,QAAlBC,EAAU,MAAVC,OAAU,EAAVA,EAAYC,cAAMpB,eAAEqB,QAAS,GAGjDC,WACE,MAAMC,EAA6B1C,KAAKgC,MAAMW,SAASC,KAAKf,OAC5D,GAAoB,MAAhBa,EACF,MAAM,IAAIG,MAAM,wFAElBC,OAAkB,eAAgBJ,EAAaK,KAAM,cAAe/C,KAAKF,QAAQkD,GAAI,WAAYhD,KAAKF,SAEtG4C,EAAaO,eAAeC,KAAKC,IAG1BnD,KAAK6B,OAAeuB,sBAAyBpD,KAAK6B,OAAewB,eAClErD,KAAK6B,OAAewB,eAAqCC,cAAcC,UAAU,KACjFvD,KAAKwD,oBAAoBd,EAAcS,KAGzCnD,KAAKwD,oBAAoBd,EAAcS,KAK7CM,cACEzD,KAAK0D,UAAUC,QAGTH,oBAAoBd,EAA4BS,GAClDT,EAAakB,aACf5D,KAAKF,QAAQ+D,KAAK7D,KAAKgC,OAGzBhC,KAAK0D,UAAY1D,KAAK6B,OAAOiC,KAAKX,EAAW,CAC3CY,WAAW,EACXC,cAAe,kBACfC,mBAAmB,EACnBrB,KAAM5C,KAAKoC,WACX8B,WAAY,CACV,eACA,gBAAgBxB,EAAayB,YAC7BzB,EAAa0B,cAAgB,iBAAmB,kBAC5C1B,EAAawB,WAAaxB,EAAawB,WAAa,IAI1DG,SAAU,CAAEC,IAAK,KACjBxC,iBAAkB9B,KAAK8B,mBAGzB9B,KAAK0D,UAAUa,cAAchB,UAAWX,KACtCE,OAAkB,qBAAsBJ,EAAaK,KAAM,QAASH,GAEpE,MAAM4B,EAAS5B,EACf,GAA2B,OAAjB,MAAN6B,OAAM,EAANA,EAAQC,aAKZ,GAAI1E,KAAKgC,MAAM2C,aAAaC,QAAU,EACpC,IACEC,OAAOC,OAAOrE,MAAMsE,WAAWpB,cACxBqB,SAKThF,KAAK+B,OAAOkD,SAAS,CAAC,MADpBjF,KAAKgC,MAAMW,SAASuC,IAAIN,OAAS,EACN,CAAEO,WAAYnF,KAAKgC,MAAM8C,OAAQtC,MAAOI,GAExC,CAAEuC,WAAYnF,KAAKgC,MAAM8C,OAAOA,OAAQtC,MAAOI,SAd5E5C,KAAK+B,OAAOkD,SAAS,CAACT,EAAOE,gBAkBjC1E,KAAKiC,kBAAkBmD,6DArFdxD,GAAoBF,mGAApBE,EAAoByD,uFAApBzD,GAAb,kNCTEF,gDAMIA,eAA8BA,+BAAmBA,kCACjDA,eAAmCA,SAAeA,kCAAfA,8CAMrCA,kBACEA,4EACFA,+BACAA,kBACEA,yEACFA,yIACAA,kBAKEA,SACFA,6CANoEA,6KAKlEA,yDAZJA,kBACEA,wBAGAA,wBAGAA,wBAOFA,mCAbQA,wCAGAA,yCAGmBA,qFAUzBA,SACEA,qBAA0BA,kDAAS4D,gBAAe5D,kBAAMA,QACxDA,qBACEA,kDAAS6D,WACT7D,oBACFA,QACFA,qCAJ2CA,6GAK3CA,SACEA,qBAAyCA,yCAAS8D,EAATC,OAASD,aAAY,KAAO9D,iBAAKA,QAC5EA,iDA7CJA,iBAAqEA,yDAAgBgE,kBAGnFhE,iBACEA,qCACFA,QAEAA,+BAEAA,mCAEAA,eAAK,cAC2EA,mDAASiE,UACrFjE,uBACAA,wBACFA,QACAA,uBAAuCA,mDAAUkE,kBAAjDlE,UAGFA,yBAgBAA,mBACEA,iCAOAA,iCAGFA,2CA9CkBA,wDAIcA,iEAGlBA,mCAEgBA,uEAGwBA,uCAC5CA,uCACgBA,kCAKoDA,gCAiB7DA,2DAOAA,6DC/BZ,IAAMmE,EAAb,MAAM,gBAAyCC,IAW7ClG,YACkCwC,EACxBsB,EACAqC,GAERC,QAJgChG,kBACxBA,iBACAA,gBAbgBA,eAAY,mBAEtCA,gBAAa,IAAIiG,KAAyB,GAC1CjG,YAAS,IAAIiG,IAAwB,IACrCjG,aAAU,IAAIiG,SAAkCC,GAChDlG,4BAAyBqB,IAazBoB,WACEzC,KAAKmG,aAAaC,IAChBpG,KAAKqG,OAAO9C,UAAU,UACO2C,IAAvBlG,KAAKsG,QAAQC,OACfvG,KAAKsG,QAAQE,UAAKN,MAKK,MAAzBlG,KAAKoC,WAAWqE,OAClBzG,KAAK0G,aAAa1G,KAAKoC,WAAWqE,OAGpCzG,KAAK2G,cAAaC,KAAc,CAC9B5G,KAAK6G,WAAY7G,KAAKqG,OAAQrG,KAAKsG,UAClCxF,QAAKgG,KAAI,EAAEC,EAAWN,EAAOzF,MAAa,CAAE+F,YAAWN,QAAOzF,aAGnEyC,cACEzD,KAAK6G,WAAWG,WAChBhH,KAAKqG,OAAOW,WACZhH,KAAKsG,QAAQU,WACbhB,MAAMvC,cAGRwD,YAAYC,GACVlH,KAAK0D,UAAUC,MAAMuD,GAGvBR,aAAaD,GACXzG,KAAKmH,SAASV,GACdzG,KAAKoH,SAGPC,aAAaC,GACX,MACMb,EAAQc,MAAMC,KADFF,EAAMG,OAA4BhB,OAEpDzG,KAAKmH,SAASV,GAGhBW,SACEpH,KAAK6G,WAAWL,MAAK,GACrBxG,KAAKmG,aAAaC,IAChBpG,KAAKoC,WAAWsF,QAAQ1H,KAAKqG,OAAOE,OAAOzF,MAAK6G,OAAK,IAAIpE,UAAU,CACjEiD,KAAOxF,IACLhB,KAAK6G,WAAWL,MAAK,GACrBxG,KAAKsG,QAAQE,KAAKxF,IAEpBgE,MAAO,KACLhF,KAAK6G,WAAWL,MAAK,GACrBxG,KAAKsG,QAAQE,UAAKN,GAClBlG,KAAK+F,SAASjC,KAAK,gEAA4DoC,EAAW,CAAE0B,SAAU,UAMtGT,SAASV,GACVzG,KAAKoC,WAAWyF,WACnBpB,EAAQA,EAAMqB,MAAM,EAAG,IAEzB9H,KAAKqG,OAAOG,KAAKC,iDAhFRZ,GAAyBnE,MAY1BqG,MAAerG,kDAZdmE,EAAyBR,8xCDZtC3D,gDACGA,8KCWUmE,GAAb,oCCSO,MAAMxE,EAAyB,CACpC2G,QAAS,EACTC,QAAS,EACTpF,MAAO,qJClBF,IAAMqF,EAAb,MAAM,gBAAoCpC,IAYxClG,YAAYuI,EAAgCC,EAAsBrC,GAChEC,QAD0ChG,YAAsBA,gBAXzDA,eAA2C,UAE3CA,sBAAmB,GACVA,kBAAe,IAAIqI,MAG7BrI,mBAAgB,eAEhBA,eAAY,eACZA,cAAqB,GAI3BA,KAAKsI,QAAUH,EAAWI,cAG5B9F,WACEzC,KAAKwI,eAAiB,gBAAgBxI,KAAKyI,YAC3CzI,KAAKsI,QAAQI,UAAUtC,IAAIpG,KAAK2I,cAAe3I,KAAKwI,gBACpDxI,KAAKoI,KAAKQ,kBAAkB,KAC1B5I,KAAKmG,aAAaC,OAChByC,KAAqB7I,KAAKsI,QAAS,YAAY/E,UAAU+D,IACvDA,EAAMwB,iBACNxB,EAAMyB,kBACN/I,KAAKgJ,gBACLhJ,KAAKsI,QAAQI,UAAUtC,IAAIpG,KAAKiJ,cAGpCjJ,KAAKmG,aAAaC,OAChByC,KAAqB7I,KAAKsI,QAAS,aAAa/E,UAAU+D,IACxDA,EAAMwB,iBACNxB,EAAMyB,kBACN/I,KAAKkJ,SAASC,KACZtE,OAAOuE,WAAW,KAAQpJ,KAAKsI,QAAQI,UAAUW,OAAOrJ,KAAKiJ,YAAe,UAOtFxF,cACEzD,KAAKgJ,gBACLhJ,KAAKsI,QAAQI,UAAUW,OAAOrJ,KAAK2I,cAAe3I,KAAKwI,eAAgBxI,KAAKiJ,WAC5EjD,MAAMvC,cAIR6F,OAAOhC,GACLA,EAAMwB,iBACNxB,EAAMyB,kBACN/I,KAAKgJ,gBACLhJ,KAAKsI,QAAQI,UAAUW,OAAOrJ,KAAKiJ,WAEnC,IAAIxC,EAAQc,MAAMC,KADDF,EAAMiC,aAAa9C,OAEpCA,EAAQzG,KAAKwJ,YAAY/C,EAAOzG,KAAKyJ,kBACjChD,EAAM7B,OAAS,GACjB5E,KAAK0G,aAAagD,KAAKjD,GAInBuC,gBACN,UAAWW,KAAW3J,KAAKkJ,SACzBU,aAAaD,GAEf3J,KAAKkJ,SAAW,GAGVM,YAAY/C,EAAegD,GACjC,GAAyB,KAArBA,EAA2B,OAAOhD,EAEtC,MAAMoD,EAAeJ,EAAiBK,MAAM,KAAKhD,IAAIiD,GAAQA,EAAKC,qBAC5DC,EAAWxD,EAAMyD,OAAOhK,IAC5B,MAAMiK,EAAWjK,EAAK6C,KAAKqH,YAAY,KACvC,GAAID,GAAY,EAAK,OAAO,EAC5B,MAAME,EAAMnK,EAAK6C,KAAKuH,UAAUH,EAAW,GAAGH,oBAE9C,OADgBH,EAAaU,SAASF,KAIxC,GAAI5D,EAAM7B,SAAWqF,EAASrF,OAAQ,CACpC,MAAM4F,EAAqBxK,KAAKyJ,iBAAiBgB,QAAQ,MAAO,MAIhEzK,KAAK+F,SAASjC,KAHEmG,EAASrF,OACrB,6EAA+E4F,EAC/E,+CAAiDA,EACzB,KAAM,CAAE5C,SAAU,MAEhD,OAAOqC,gDAvFE/B,GAAoBxG,gEAApBwG,EAAoB7C,qGAApBqF,8IAAb,2DCFO,IAAMC,EAAb,MAAM,QAEJ/K,YAAoBgL,oBAEpBC,UAAUC,GACR,OAAO9K,KAAK4K,UAAUG,wBAAwBD,iDALrCH,GAAYjJ,0DAAZiJ,EAAYK,UAAZL,GAAb","names":["webApiAppRoot","ImportAppService","constructor","http","context","dnnContext","this","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","post","$2sxc","apiUrl","params","zoneId","toString","pipe","switchMap","result","O","Messages","_a","MessageType","FileUploadMessageTypes","folderName","prompt","Text","of","i0","factory","DialogEntryComponent","dialog","viewContainerRef","router","route","changeDetectorRef","navigation","getCurrentNavigation","dialogData","E","x","extras","state","ngOnInit","dialogConfig","snapshot","data","Error","consoleLogAngular","name","id","getComponent","then","component","_dialogAnimatingOpen","_lastDialogRef","afterOpened","subscribe","openDialogComponent","ngOnDestroy","dialogRef","close","initContext","init","open","autoFocus","backdropClass","closeOnNavigation","panelClass","panelSize","showScrollbar","position","top","afterClosed","navRes","l","navigateUrl","pathFromRoot","length","window","parent","totalPopup","error","navigate","url","relativeTo","markForCheck","selectors","ctx_r15","ctx_r17","ctx_r19","oxw","ctx_r21","_r5","ctx_r24","FileUploadDialogComponent","BaseSubsinkComponent","snackBar","super","BehaviorSubject","undefined","subscription","add","files$","result$","value","next","files","filesDropped","viewModel$","combineLatest","uploading$","map","uploading","complete","closeDialog","refresh","setFiles","upload","filesChanged","event","Array","from","target","upload$","take","duration","multiple","slice","MAT_DIALOG_DATA","Warning","Success","DragAndDropDirective","elementRef","zone","EventEmitter","element","nativeElement","markStyleClass","markStyle","classList","dropAreaClass","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","dragClass","timeouts","push","setTimeout","remove","onDrop","dataTransfer","filterTypes","allowedFileTypes","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","extIndex","lastIndexOf","ext","substring","includes","allowedTypesString","replace","ctx","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/dialog-entry/dialog-entry.component.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.html","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.models.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectorRef, Component, OnDestroy, OnInit, Type, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { NavigateFormResult } from '../../../edit/shared/models';\r\nimport { consoleLogAngular } from '../../helpers/console-log-angular.helper';\r\nimport { DialogConfig } from '../../models/dialog-config.model';\r\nimport { EavWindow } from '../../models/eav-window.model';\r\nimport { Context } from '../../services/context';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-dialog-entry',\r\n  templateUrl: './dialog-entry.component.html',\r\n  styleUrls: ['./dialog-entry.component.scss'],\r\n})\r\nexport class DialogEntryComponent implements OnInit, OnDestroy {\r\n  private dialogData: Record<string, any>;\r\n  private dialogRef: MatDialogRef<any>;\r\n\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    const navigation = this.router.getCurrentNavigation();\r\n    this.dialogData = navigation?.extras?.state || {};\r\n  }\r\n\r\n  ngOnInit() {\r\n    const dialogConfig: DialogConfig = this.route.snapshot.data.dialog;\r\n    if (dialogConfig == null) {\r\n      throw new Error(`Could not find config for dialog. Did you forget to add DialogConfig to route data?`);\r\n    }\r\n    consoleLogAngular('Open dialog:', dialogConfig.name, 'Context id:', this.context.id, 'Context:', this.context);\r\n\r\n    dialogConfig.getComponent().then(component => {\r\n      // spm Workaround for \"feature\" where you can't open new dialog while last one is still opening\r\n      // https://github.com/angular/components/commit/728cf1c8ebd49e089f4bae945511bb0918972c26\r\n      if ((this.dialog as any)._dialogAnimatingOpen && (this.dialog as any)._lastDialogRef) {\r\n        ((this.dialog as any)._lastDialogRef as MatDialogRef<any>).afterOpened().subscribe(() => {\r\n          this.openDialogComponent(dialogConfig, component);\r\n        });\r\n      } else {\r\n        this.openDialogComponent(dialogConfig, component);\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private openDialogComponent(dialogConfig: DialogConfig, component: Type<any>) {\r\n    if (dialogConfig.initContext) {\r\n      this.context.init(this.route);\r\n    }\r\n\r\n    this.dialogRef = this.dialog.open(component, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: this.dialogData,\r\n      panelClass: [\r\n        'dialog-panel',\r\n        `dialog-panel-${dialogConfig.panelSize}`,\r\n        dialogConfig.showScrollbar ? 'show-scrollbar' : 'no-scrollbar',\r\n        ...(dialogConfig.panelClass ? dialogConfig.panelClass : []),\r\n      ],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n\r\n    this.dialogRef.afterClosed().subscribe((data: any) => {\r\n      consoleLogAngular('Dialog was closed:', dialogConfig.name, 'Data:', data);\r\n\r\n      const navRes = data as NavigateFormResult;\r\n      if (navRes?.navigateUrl != null) {\r\n        this.router.navigate([navRes.navigateUrl]);\r\n        return;\r\n      }\r\n\r\n      if (this.route.pathFromRoot.length <= 3) {\r\n        try {\r\n          window.parent.$2sxc.totalPopup.close();\r\n        } catch (error) { }\r\n        return;\r\n      }\r\n\r\n      if (this.route.snapshot.url.length > 0) {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent, state: data });\r\n      } else {\r\n        this.router.navigate(['./'], { relativeTo: this.route.parent.parent, state: data });\r\n      }\r\n    });\r\n\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n}\r\n","<div appDragAndDrop [allowedFileTypes]=\"dialogData.allowedFileTypes\" (filesDropped)=\"filesDropped($event)\" \r\n  *ngIf=\"viewModel$ | async as vm\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\" [innerHtml]=\"dialogData.title | safeHtml\"></div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"vm.uploading\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"dialogData.description | safeHtml\"></p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"vm.uploading\" (click)=\"fileInput.click()\">\r\n      <div *ngIf=\"!vm.files.length\">Select or drop file</div>\r\n      <div *ngFor=\"let file of vm.files\">{{ file.name }}</div>\r\n    </button>\r\n    <input #fileInput type=\"file\" multiple (change)=\"filesChanged($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light result-container\" *ngIf=\"vm.result\">\r\n    <div *ngIf=\"vm.result.Success\" class=\"sxc-message sxc-message-info\">\r\n      Upload succeeded. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!vm.result.Success\" class=\"sxc-message sxc-message-error\">\r\n      Upload failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of vm.result.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === FileUploadMessageTypes.Warning,\r\n      'sxc-message-success': message.MessageType === FileUploadMessageTypes.Success,\r\n      'sxc-message-error': message.MessageType === FileUploadMessageTypes.Error\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!vm.result?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!vm.files.length || vm.uploading || !!vm.result\"\r\n        (click)=\"upload()\">\r\n        Upload\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"vm.result?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog(true)\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Observable, Subscription, combineLatest, map, take } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../base-subsink-component/base-subsink.component';\r\nimport { FileUploadDialogData, FileUploadMessageTypes, FileUploadResult } from './file-upload-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-file-upload-dialog',\r\n  templateUrl: './file-upload-dialog.component.html',\r\n  styleUrls: ['./file-upload-dialog.component.scss'],\r\n})\r\nexport class FileUploadDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  uploading$ = new BehaviorSubject<boolean>(false);\r\n  files$ = new BehaviorSubject<File[]>([]);\r\n  result$ = new BehaviorSubject<FileUploadResult>(undefined);\r\n  FileUploadMessageTypes = FileUploadMessageTypes;\r\n\r\n  viewModel$: Observable<FileUploadDialogViewModel>;\r\n\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FileUploadDialogData,\r\n    private dialogRef: MatDialogRef<FileUploadDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { \r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription.add(\r\n      this.files$.subscribe(() => {\r\n        if (this.result$.value !== undefined) {\r\n          this.result$.next(undefined);\r\n        }\r\n      }),\r\n    );\r\n\r\n    if (this.dialogData.files != null) {\r\n      this.filesDropped(this.dialogData.files);\r\n    }\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.uploading$, this.files$, this.result$,\r\n    ]).pipe(map(([uploading, files, result]) => ({ uploading, files, result })));\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.uploading$.complete();\r\n    this.files$.complete();\r\n    this.result$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(refresh?: boolean): void {\r\n    this.dialogRef.close(refresh);\r\n  }\r\n\r\n  filesDropped(files: File[]): void {\r\n    this.setFiles(files);\r\n    this.upload();\r\n  }\r\n\r\n  filesChanged(event: Event): void {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = Array.from(fileList);\r\n    this.setFiles(files);\r\n  }\r\n\r\n  upload(): void {\r\n    this.uploading$.next(true);\r\n    this.subscription.add(\r\n      this.dialogData.upload$(this.files$.value).pipe(take(1)).subscribe({\r\n        next: (result) => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(result);\r\n        },\r\n        error: () => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(undefined);\r\n          this.snackBar.open('Upload failed. Please check console for more information', undefined, { duration: 3000 });\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  private setFiles(files: File[]): void {\r\n    if (!this.dialogData.multiple) {\r\n      files = files.slice(0, 1);\r\n    }\r\n    this.files$.next(files);\r\n  }\r\n}\r\n\r\ninterface FileUploadDialogViewModel {\r\n  uploading: boolean;\r\n  files: File[];\r\n  result: FileUploadResult;\r\n}","import { Observable } from 'rxjs';\r\n\r\nexport interface FileUploadDialogData {\r\n  title?: string;\r\n  description?: string;\r\n  allowedFileTypes?: string;\r\n  files?: File[];\r\n  multiple?: boolean;\r\n  upload$?(files: File[]): Observable<FileUploadResult>;\r\n}\r\n\r\nexport interface FileUploadResult {\r\n  Messages: FileUploadResultMessage[];\r\n  Success: boolean;\r\n}\r\n\r\nexport interface FileUploadResultMessage {\r\n  MessageType: FileUploadMessageType;\r\n  Text: string;\r\n}\r\n\r\nexport const FileUploadMessageTypes = {\r\n  Warning: 0,\r\n  Success: 1,\r\n  Error: 2,\r\n} as const;\r\n\r\nexport type FileUploadMessageType = typeof FileUploadMessageTypes[keyof typeof FileUploadMessageTypes];\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\nimport { BaseSubsinkComponent } from '../components/base-subsink-component/base-subsink.component';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    super();\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_import-app_services_import-app_service_ts-projects_eav-ui_src_app_sha-1ab7ba.c271265db2044bdc.js"}