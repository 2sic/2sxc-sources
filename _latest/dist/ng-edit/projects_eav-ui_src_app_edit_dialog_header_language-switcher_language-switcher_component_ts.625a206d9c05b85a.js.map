{"version":3,"file":"projects_eav-ui_src_app_edit_dialog_header_language-switcher_language-switcher_component_ts.625a206d9c05b85a.js","mappings":"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","names":["getLanguageOptions","languages","languageButtons","shortCodesCount","forEach","language","shortName","removeRegionName","Culture","shortCode","push","label","NameId","languageName","substring","includes","indexOf","toLocaleUpperCase","i0","option_r1","Code","toLocaleLowerCase","LanguageDropdownComponent","constructor","selectedValue","this","userLanguageSvc","isForced","optionType","value","stored","onSelectionChange","event","save","static","__ngFactoryType__","debug_node_JnOYh9kg","VBU","selectors","inputs","tooltip","options","decls","vars","consts","template","rf","ctx","$event","LanguageDropdownComponent_For_10_Template","MatFormFieldModule","i1","MatDialogModule","MatIconModule","MatButtonModule","TippyDirective","MatSelectModule","i2","TranslateModule","i3","encapsulation","LanguageSettingsDialogComponent","#languageSvc","inject","LanguageService","transient","UserLanguageService","dialog","MatDialogRef","getAll","ngOnInit","#watchKeyboardShortcuts","closeDialog","close","keydownEvents","subscribe","isCtrlEnter","preventDefault","i4","SaveCloseButtonFabComponent","styles","CenterSelectedHelper","ngZone","header","moveThreshold","stopClick","eventListeners","runOutsideAngular","checkIfMouseMoved","document","addEventListener","passive","element","type","listener","lngButtonDown","saveInitialPosition","lngButtonClick","doMove","stopClickIfMouseMoved","destroy","removeEventListener","positionX","pageX","positionY","pageY","Math","abs","button","target","buttonOffset","getBoundingClientRect","left","buttonWidth","width","headerOffset","headerWidth","scrollLeft","MouseScrollHelper","areButtonsDisabled","registerScroll","bind","headerDownListener","window","getSelection","removeAllRanges","oldScrollBehavior","getComputedStyle","getPropertyValue","style","scrollBehavior","doScroll","e","removeScroll","splice","length","newPositionX","ShowShadowsHelper","leftShadow","rightShadow","hidden","calculateShadows","maxScrollLeft","scrollWidth","clientWidth","hideBoth","hideLeft","hideRight","showBoth","classList","add","remove","_r1","ctx_r1","languageSettings","LanguageSwitcherComponent_For_8_Conditional_0_Conditional_2_Template","langButton_r3","disabled","userConfigurable","_r4","lngButtonMouseDown","$implicit","LanguageSwitcherComponent_For_8_Conditional_0_Template","LanguageSwitcherComponent_For_8_Conditional_1_Template","current","LanguageSwitcherComponent","languageService","languageInstanceService","formConfig","snackBar","translate","matDialog","viewContainerRef","log","classLog","input","computed","buttons","ngAfterViewInit","showShadowsHelper","headerRef","nativeElement","leftShadowRef","rightShadowRef","mouseScrollHelper","centerSelectedHelper","ngOnDestroy","l","fn","open","instant","duration","verticalPosition","end","setCurrent","config","formId","lngCode","uiCode","use","autoFocus","position","top","i5","i6","viewQuery","LanguageSwitcherComponent_For_8_Template","i7","MatIcon"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/dialog/header/language-switcher/language-switcher.helpers.ts","./projects/eav-ui/src/app/edit/dialog/header/language-settings-dialog/LanguageDropdownComponent/language-dropdown.component.html","./projects/eav-ui/src/app/edit/dialog/header/language-settings-dialog/LanguageDropdownComponent/language-dropdown.component.ts","./projects/eav-ui/src/app/edit/dialog/header/language-settings-dialog/language-settings-dialog.ts","./projects/eav-ui/src/app/edit/dialog/header/language-settings-dialog/language-settings-dialog.html","./projects/eav-ui/src/app/edit/dialog/header/language-switcher/center-selected.helper.ts","./projects/eav-ui/src/app/edit/dialog/header/language-switcher/mouse-scroll.helper.ts","./projects/eav-ui/src/app/edit/dialog/header/language-switcher/show-shadows.helper.ts","./projects/eav-ui/src/app/edit/dialog/header/language-switcher/language-switcher.component.html","./projects/eav-ui/src/app/edit/dialog/header/language-switcher/language-switcher.component.ts"],"sourcesContent":["import { Language } from '../../../form/form-languages.model';\r\n\r\nexport interface LanguageOption extends Language {\r\n  label: string;\r\n}\r\n\r\n/** Calculates properties of language buttons, e.g. name to be displayed */\r\nexport function getLanguageOptions(languages: Language[]): LanguageOption[] {\r\n  const languageButtons: LanguageOption[] = [];\r\n  const shortCodesCount: Record<string, number> = {};\r\n\r\n  // count the number of repetitions of the same language without region key\r\n  // e.g. English (United States) and English (Australia) are both English\r\n  languages.forEach(language => {\r\n    const shortName = removeRegionName(language.Culture);\r\n    if (shortCodesCount[shortName])\r\n      shortCodesCount[shortName]++;\r\n    else\r\n      shortCodesCount[shortName] = 1;\r\n  });\r\n\r\n  // if language repeats, append language key to name which will be displayed\r\n  languages.forEach(language => {\r\n    const shortCode = removeRegionName(language.Culture);\r\n\r\n    languageButtons.push({\r\n      ...language,\r\n      label: (shortCodesCount[shortCode] > 1) ? `${shortCode} (${language.NameId})` : shortCode,\r\n    });\r\n  });\r\n\r\n  return languageButtons;\r\n}\r\n\r\n/** Returns name without region, e.g. ENGLISH from English (United Stated) */\r\nfunction removeRegionName(languageName: string): string {\r\n  return languageName.substring(0, languageName.includes('(') ? languageName.indexOf('(') - 1 : 100).toLocaleUpperCase();\r\n}\r\n","<mat-form-field [tippy]=\"tooltip | translate\" appearance=\"fill\" color=\"accent\">\r\n  <mat-label>\r\n    {{ label | translate }}\r\n    {{ userLanguageSvc.isForced(optionType) ? '(disabled)' : '' }}\r\n  </mat-label>\r\n  <mat-select\r\n    [value]=\"selectedValue\"\r\n    (selectionChange)=\"onSelectionChange($event)\"\r\n    [disabled]=\"userLanguageSvc.isForced(optionType)\"\r\n    >\r\n    <mat-option value=\"\">\r\n      {{'LanguageSettings.UseCurrentLanguage' | translate}}\r\n    </mat-option>\r\n    @for (option of options; track option) {\r\n      <mat-option [value]=\"option.Code.toLocaleLowerCase()\">{{ option.label }}</mat-option>\r\n    }\r\n  </mat-select>\r\n</mat-form-field>","\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { TippyDirective } from 'projects/eav-ui/src/app/shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-language-dropdown',\r\n  templateUrl: './language-dropdown.component.html',\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    TippyDirective,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    TranslateModule\r\n]\r\n})\r\nexport class LanguageDropdownComponent {\r\n  @Input() label: string;\r\n  @Input() tooltip: string;\r\n  @Input() optionType: string;\r\n  @Input() options: any[];\r\n  @Input() userLanguageSvc: any;\r\n\r\n  constructor() { }\r\n\r\n  get selectedValue() {\r\n    return this.userLanguageSvc.isForced(this.optionType) \r\n      ? this.userLanguageSvc.value(this.optionType) \r\n      : this.userLanguageSvc.stored(this.optionType);\r\n  }\r\n\r\n  onSelectionChange(event: any) {\r\n    this.userLanguageSvc.save(this.optionType, event.value);\r\n  }\r\n}","import { Component, inject } from \"@angular/core\";\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from \"@angular/material/form-field\";\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from \"@angular/material/select\";\r\nimport { TranslateModule } from \"@ngx-translate/core\";\r\nimport { SaveCloseButtonFabComponent } from \"projects/eav-ui/src/app/shared/modules/save-close-button-fab/save-close-button-fab.component\";\r\nimport { UserLanguageService } from \"projects/eav-ui/src/app/shared/services/user-language.service\";\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { TippyDirective } from \"../../../../shared/directives/tippy.directive\";\r\nimport { LanguageService } from '../../../localization/language.service';\r\nimport { isCtrlEnter } from \"../../main/keyboard-shortcuts\";\r\nimport { getLanguageOptions } from '../language-switcher/language-switcher.helpers';\r\nimport { LanguageDropdownComponent } from \"./LanguageDropdownComponent/language-dropdown.component\";\r\n\r\n@Component({\r\n  selector: 'app-separate-languages-header',\r\n  templateUrl: './language-settings-dialog.html',\r\n  styleUrls: ['./language-settings-dialog.scss'],\r\n  imports: [\r\n    MatDialogModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    TippyDirective,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    LanguageDropdownComponent,\r\n    TranslateModule,\r\n    SaveCloseButtonFabComponent,\r\n  ]\r\n})\r\nexport class LanguageSettingsDialogComponent {\r\n  /** Language SVC - to get list of all possible languages */\r\n  #languageSvc = inject(LanguageService);\r\n\r\n  /** User language service - to get/set the current language */\r\n  protected userLanguageSvc = transient(UserLanguageService);\r\n\r\n  /** Dialog reference, for close */\r\n  protected dialog = inject(MatDialogRef<LanguageSettingsDialogComponent>);\r\n  \r\n  protected options = getLanguageOptions(this.#languageSvc.getAll());\r\n\r\n  constructor() { }\r\n  \r\n  ngOnInit() {\r\n    this.#watchKeyboardShortcuts();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  #watchKeyboardShortcuts(): void {\r\n    this.dialog.keydownEvents().subscribe(event => {\r\n      if (isCtrlEnter(event)) {\r\n        event.preventDefault();\r\n        this.closeDialog();\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{'LanguageSettings.Title' | translate}}</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n\r\n  <div class=\"eav-dialog-content\">\r\n    <p>{{'LanguageSettings.Intro' | translate}}</p>\r\n\r\n    <h3>{{'LanguageSettings.Subtitle' | translate}}</h3>\r\n\r\n    <app-language-dropdown\r\n      style=\"margin-right: 24px\"\r\n      [label]=\"'LanguageSettings.LabelsAndTextsOptionLabel'\"\r\n      [tooltip]=\"'LanguageSettings.LabelsAndTextsTooltip'\"\r\n      [optionType]=\"'form'\"\r\n      [options]=\"options\"\r\n      [userLanguageSvc]=\"userLanguageSvc\"\r\n    ></app-language-dropdown>\r\n\r\n    <app-language-dropdown\r\n      [label]=\"'LanguageSettings.ButtonsAndControlsOptionLabel'\"\r\n      [tooltip]=\"'LanguageSettings.ButtonsAndControlsTooltip'\"\r\n      [optionType]=\"'ui'\"\r\n      [options]=\"options\"\r\n      [userLanguageSvc]=\"userLanguageSvc\"\r\n    ></app-language-dropdown>\r\n  </div>\r\n  <mat-dialog-actions align=\"end\">\r\n    <app-save-close-button-fab\r\n      (action)=\"closeDialog()\"\r\n    />\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../shared/controls/element-event-listener.model';\r\n\r\nexport class CenterSelectedHelper {\r\n  private positionX: number;\r\n  private positionY: number;\r\n  private moveThreshold = 2; // pixels for which header can be scrolled while clicking to still register as click\r\n  private stopClick = false;\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const checkIfMouseMoved = (event: MouseEvent) => { this.checkIfMouseMoved(event); };\r\n      document.addEventListener('mouseup', checkIfMouseMoved, { passive: true });\r\n      this.eventListeners.push({ element: document, type: 'mouseup', listener: checkIfMouseMoved });\r\n    });\r\n  }\r\n\r\n  lngButtonDown(event: MouseEvent) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.saveInitialPosition(event);\r\n    });\r\n  }\r\n\r\n  lngButtonClick(event: MouseEvent) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.doMove(event);\r\n    });\r\n  }\r\n\r\n  stopClickIfMouseMoved() {\r\n    return this.stopClick;\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(({ element, type, listener }) => {\r\n        element.removeEventListener(type, listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private saveInitialPosition(event: MouseEvent) {\r\n    this.stopClick = false;\r\n    this.positionX = event.pageX;\r\n    this.positionY = event.pageY;\r\n  }\r\n\r\n  private checkIfMouseMoved(event: MouseEvent) {\r\n    if (!this.positionX || !this.positionY) {\r\n      this.stopClick = false;\r\n      return;\r\n    }\r\n    const newPositionX = event.pageX;\r\n    const newPositionY = event.pageY;\r\n\r\n    const newTotal = newPositionX + newPositionY;\r\n    const oldTotal = this.positionX + this.positionY;\r\n\r\n    this.stopClick = Math.abs(oldTotal - newTotal) > this.moveThreshold;\r\n    this.positionX = null;\r\n    this.positionY = null;\r\n  }\r\n\r\n  private doMove(event: MouseEvent) {\r\n    if (this.stopClick) return;\r\n\r\n    const button = event.target as HTMLButtonElement;\r\n    const buttonOffset = button.getBoundingClientRect().left;\r\n    const buttonWidth = button.getBoundingClientRect().width;\r\n    const headerOffset = this.header.getBoundingClientRect().left;\r\n    const headerWidth = this.header.getBoundingClientRect().width;\r\n\r\n    const currentPosition = buttonOffset + buttonWidth / 2;\r\n    const moveTo = headerOffset + headerWidth / 2;\r\n\r\n    this.header.scrollLeft += currentPosition - moveTo;\r\n  }\r\n}\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../shared/controls/element-event-listener.model';\r\n\r\nexport class MouseScrollHelper {\r\n  private oldScrollBehavior: string;\r\n  private positionX: number;\r\n  private headerDownListener: ElementEventListener;\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n    private areButtonsDisabled: () => boolean\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const registerScroll = this.registerScroll.bind(this);\r\n      this.header.addEventListener('pointerdown', registerScroll, { passive: true });\r\n      this.headerDownListener = { element: this.header, type: 'pointerdown', listener: registerScroll };\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.headerDownListener.element.removeEventListener(this.headerDownListener.type, this.headerDownListener.listener);\r\n      this.headerDownListener = null;\r\n      this.eventListeners.forEach(({ element, type, listener }) => {\r\n        element.removeEventListener(type, listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n    this.ngZone = null;\r\n    this.header = null;\r\n    this.areButtonsDisabled = null;\r\n  }\r\n\r\n  private registerScroll(event: MouseEvent) {\r\n    const disabled = this.areButtonsDisabled();\r\n    if (disabled || event.button !== 0) return;\r\n\r\n    window.getSelection().removeAllRanges();\r\n    this.oldScrollBehavior = getComputedStyle(this.header).getPropertyValue('scroll-behavior');\r\n\r\n    this.header.style.scrollBehavior = 'auto';\r\n    this.positionX = event.pageX;\r\n\r\n    const doScroll = (e: MouseEvent) => { this.doScroll(e); };\r\n    const removeScroll = () => { this.removeScroll(); };\r\n    document.addEventListener('pointermove', doScroll, { passive: true });\r\n    document.addEventListener('pointerup', removeScroll, { passive: true });\r\n    document.addEventListener('pointerleave', removeScroll, { passive: true });\r\n    this.eventListeners.push(\r\n      { element: document, type: 'pointermove', listener: doScroll },\r\n      { element: document, type: 'pointerup', listener: removeScroll },\r\n      { element: document, type: 'pointerleave', listener: removeScroll },\r\n    );\r\n  }\r\n\r\n  private removeScroll() {\r\n    this.header.style.scrollBehavior = this.oldScrollBehavior;\r\n\r\n    this.eventListeners.forEach(({ element, type, listener }) => {\r\n      element.removeEventListener(type, listener);\r\n    });\r\n    this.eventListeners.splice(0, this.eventListeners.length);\r\n  }\r\n\r\n  private doScroll(event: MouseEvent) {\r\n    const newPositionX = event.pageX;\r\n    if (newPositionX < this.positionX) {\r\n      this.header.scrollLeft += this.positionX - newPositionX;\r\n    } else if (newPositionX > this.positionX) {\r\n      this.header.scrollLeft += -(newPositionX - this.positionX);\r\n    }\r\n    this.positionX = newPositionX;\r\n  }\r\n}\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../shared/controls/element-event-listener.model';\r\n\r\nexport class ShowShadowsHelper {\r\n  private maxScrollLeft: number;\r\n  private hidden = 'hidden'; // CSS class which hides shadows\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n    private leftShadow: HTMLElement,\r\n    private rightShadow: HTMLElement,\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.calculateShadows();\r\n\r\n      const calculateShadows = () => { this.calculateShadows(); };\r\n      this.header.addEventListener('scroll', calculateShadows, { passive: true });\r\n      window.addEventListener('resize', calculateShadows, { passive: true });\r\n      this.eventListeners.push(\r\n        { element: this.header, type: 'scroll', listener: calculateShadows },\r\n        { element: window, type: 'resize', listener: calculateShadows },\r\n      );\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(({ element, type, listener }) => {\r\n        element.removeEventListener(type, listener);\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n    this.ngZone = null;\r\n    this.header = null;\r\n    this.leftShadow = null;\r\n    this.rightShadow = null;\r\n  }\r\n\r\n  private calculateShadows() {\r\n    this.maxScrollLeft = this.header.scrollWidth - this.header.clientWidth;\r\n\r\n    if (this.maxScrollLeft === 0) {\r\n      this.hideBoth();\r\n    } else if (this.header.scrollLeft === 0) {\r\n      this.hideLeft();\r\n    } else if (this.header.scrollLeft === this.maxScrollLeft) {\r\n      this.hideRight();\r\n    } else {\r\n      this.showBoth();\r\n    }\r\n  }\r\n\r\n  private hideBoth() {\r\n    this.leftShadow.classList.add(this.hidden);\r\n    this.rightShadow.classList.add(this.hidden);\r\n  }\r\n\r\n  private hideLeft() {\r\n    this.leftShadow.classList.add(this.hidden);\r\n    this.rightShadow.classList.remove(this.hidden);\r\n  }\r\n\r\n  private hideRight() {\r\n    this.leftShadow.classList.remove(this.hidden);\r\n    this.rightShadow.classList.add(this.hidden);\r\n  }\r\n\r\n  private showBoth() {\r\n    this.leftShadow.classList.remove(this.hidden);\r\n    this.rightShadow.classList.remove(this.hidden);\r\n  }\r\n}\r\n","<!-- Show all language tab-buttons on a edit dialog -->\r\n<div class=\"scrollable__overlay\">\r\n  <!-- Shadows when scrolling lots of languages -->\r\n  <div #leftShadow class=\"scrollable__overlay--left-shadow\"></div>\r\n  <div #rightShadow class=\"scrollable__overlay--right-shadow\"></div>\r\n\r\n  <!-- Scrolling area when lots of languages -->\r\n  <div #scrollable class=\"scrollable lang-switch\" tippyTranslate=\"Message.CantSwitchLanguage\" [tippyDisabled]=\"!disabled()\">\r\n    @for (langButton of buttons; track langButton) {\r\n      <!-- Current Button is a bit different, not clickable, but has language settings on hover -->\r\n      @if (current() === langButton.NameId) {\r\n        <button mat-flat-button\r\n          class=\"lang-switch__button hover-area\"\r\n          color=\"accent\"\r\n          [tippy]=\"langButton.Culture\"\r\n          [tippyDisabled]=\"disabled()\"\r\n        >\r\n          {{ langButton.label }}\r\n          <!-- manually switch with true/false | so it doesn't show inside the UI (WIP) -->\r\n          @if (userLanguageSvc.userConfigurable()) {\r\n            <mat-icon iconPositionEnd class=\"hover-only\" [tippy]=\"'LanguageSettings.Title' | translate\" (click)=\"languageSettings()\">settings</mat-icon>\r\n          }\r\n        </button>\r\n      }\r\n      @else {\r\n        <button mat-flat-button\r\n          class=\"lang-switch__button\"\r\n          color=\"white\"\r\n          (mousedown)=\"lngButtonMouseDown($event)\"\r\n          (click)=\"lngButtonClick($event, langButton)\"\r\n          [tippy]=\"langButton.Culture\"\r\n          [tippyDisabled]=\"disabled()\"\r\n        >\r\n          {{ langButton.label }}\r\n        </button>\r\n      }\r\n    }\r\n  </div>\r\n</div>\r\n","import { AfterViewInit, Component, ElementRef, NgZone, OnDestroy, ViewChild, ViewContainerRef, computed, input } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { UserLanguageService } from 'projects/eav-ui/src/app/shared/services/user-language.service';\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { classLog } from '../../../../shared/logging';\r\nimport { FormConfigService } from '../../../form/form-config.service';\r\nimport { FormLanguageService } from '../../../form/form-language.service';\r\nimport { Language } from '../../../form/form-languages.model';\r\nimport { LanguageService } from '../../../localization/language.service';\r\nimport { LanguageSettingsDialogComponent } from '../language-settings-dialog/language-settings-dialog';\r\nimport { CenterSelectedHelper } from './center-selected.helper';\r\nimport { getLanguageOptions } from './language-switcher.helpers';\r\nimport { MouseScrollHelper } from './mouse-scroll.helper';\r\nimport { ShowShadowsHelper } from './show-shadows.helper';\r\n\r\n@Component({\r\n  selector: 'app-language-switcher',\r\n  templateUrl: './language-switcher.component.html',\r\n  styleUrls: ['./language-switcher.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIcon,\r\n    TippyDirective,\r\n    TranslateModule,\r\n  ]\r\n})\r\nexport class LanguageSwitcherComponent implements AfterViewInit, OnDestroy {\r\n\r\n  log = classLog({LanguageSwitcherComponent});\r\n\r\n  @ViewChild('scrollable') private headerRef: ElementRef;\r\n  @ViewChild('leftShadow') private leftShadowRef: ElementRef;\r\n  @ViewChild('rightShadow') private rightShadowRef: ElementRef;\r\n\r\n  disabled = input<boolean>();\r\n\r\n  private centerSelectedHelper: CenterSelectedHelper;\r\n  private mouseScrollHelper: MouseScrollHelper;\r\n  private showShadowsHelper: ShowShadowsHelper;\r\n\r\n  current = computed(() => this.formConfig.language().current);\r\n\r\n  buttons = getLanguageOptions(this.languageService.getAll());\r\n\r\n  userLanguageSvc = transient(UserLanguageService);\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private languageInstanceService: FormLanguageService,\r\n    private ngZone: NgZone,\r\n    private formConfig: FormConfigService,\r\n    private snackBar: MatSnackBar,\r\n    private translate: TranslateService,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) { }\r\n\r\n  ngAfterViewInit() {\r\n    this.showShadowsHelper = new ShowShadowsHelper(\r\n      this.ngZone,\r\n      this.headerRef.nativeElement,\r\n      this.leftShadowRef.nativeElement,\r\n      this.rightShadowRef.nativeElement,\r\n    );\r\n    this.mouseScrollHelper = new MouseScrollHelper(this.ngZone, this.headerRef.nativeElement, () => this.disabled());\r\n    this.centerSelectedHelper = new CenterSelectedHelper(this.ngZone, this.headerRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.centerSelectedHelper?.destroy();\r\n    this.mouseScrollHelper?.destroy();\r\n    this.showShadowsHelper?.destroy();\r\n  }\r\n\r\n  lngButtonMouseDown(event: MouseEvent) {\r\n    this.centerSelectedHelper.lngButtonDown(event);\r\n  }\r\n\r\n  lngButtonClick(event: MouseEvent, language: Language) {\r\n    const l = this.log.fn('lngButtonClick');\r\n    if (this.disabled()) {\r\n      this.snackBar.open(this.translate.instant('Message.CantSwitchLanguage'), null, { duration: 3000, verticalPosition: 'top' });\r\n      return l.end('disabled');\r\n    }\r\n    this.centerSelectedHelper.lngButtonClick(event);\r\n\r\n    if (!this.centerSelectedHelper.stopClickIfMouseMoved()) {\r\n      this.languageInstanceService.setCurrent(this.formConfig.config.formId, language.NameId);\r\n\r\n      // Also set the UI language\r\n      const lngCode = this.userLanguageSvc.uiCode(language.NameId);\r\n      this.translate.use(lngCode);\r\n    }\r\n  }\r\n\r\n  languageSettings() {\r\n    this.matDialog.open(LanguageSettingsDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '750px',\r\n      position: { top: '50px' },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}