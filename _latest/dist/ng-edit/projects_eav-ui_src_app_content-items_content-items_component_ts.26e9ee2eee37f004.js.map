{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.26e9ee2eee37f004.js","mappings":"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","names":["logSpecs","getAll","getAllLive","getAllOnce","ContentItemsService","HttpServiceBaseSignal","constructor","this","log","classLog","getAllPromise","contentTypeStaticName","fnIf","fetchPromise","webApiEntityList","params","appId","contentType","httpResource","url","apiUrl","refresh","getColumnsPromise","webApiFieldsAll","staticName","importItem","file","from","toBase64","pipe","switchMap","fileBase64","http","post","webApiEntityRoot","AppId","ContentBase64","map","success","Success","Messages","static","__ngFactoryType__","_angular_core__WEBPACK_IMPORTED_MODULE_10__","jDH","factory","ɵfac","dropdownInsertValue","AgGridHelper","cellLink","link","body","classes","ClickStopPropagationDirective","a","onClick","event","stopPropagation","_angular_core__WEBPACK_IMPORTED_MODULE_1__","FsC","selectors","hostBindings","rf","ctx","i0","$event","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","FieldHintComponent","isError","input","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","VBU","inputs","ngContentSelectors","_c0","decls","vars","consts","template","_r1","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","MatFormFieldModule","i1","NgClass","NgTemplateOutlet","styles","EntityFilterComponent","filter","idFilterString","idFilter","agInit","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","el","parseInt","isNaN","filterChanged","filterChangedCallback","debug_node_JnOYh9kg","viewQuery","FormsModule","MatRadioModule","i2","MatInputModule","i3","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","verb","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","encapsulation","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","metadataCount","metadata","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r3","targetType","label","vm_r4","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_17_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Conditional_3_Template","ctx_r1","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_32_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_33_For_5_Template","scopeOptions","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Case_2_Template","tmp_4_0","entity","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_43_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_43_Conditional_1_Template","_r11","toggleGuidedKey","closeDialog","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_20_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_21_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_22_Template","CreateMetadataDialogComponent_Conditional_0_For_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_29_Template","toggleGuidedMode","CreateMetadataDialogComponent_Conditional_0_Conditional_32_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_33_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_43_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_45_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_46_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_47_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_48_Template","saveAndClose","ngForm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","canSave","CreateMetadataDialogComponent","BaseComponent","dialog","super","hostClass","formValid","signal","computed","contentItemsService","transient","contentTypesService","ContentTypesService","ngOnInit","#watchKeyboardShortcuts","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","then","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","keys","UiControl","disable","viewModel$","hint","ngAfterViewInit","statusChanges","set","valid","ngOnDestroy","complete","result","close","checked","target","keydownEvents","isCtrlEnter","preventDefault","scope","retrieveContentTypesPromise","getScopesPromise","hostVars","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","MatOptionModule","i6","MatButtonModule","i7","i8","MatDialogActions","MatSlideToggleModule","i9","AsyncPipe","SaveCloseButtonFabComponent","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","onGridReady","filesDropped","gridOptions","_r3","debugFilter","all","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","isDebug","inject","GlobalConfigService","EntityEditService","ContentExportService","DialogRoutingService","defaultGridOptions","onFilterChanged","_","#filterChanged","update","v","#helpTextConst","empty","description","content","uxHelpText","#gridApiSig","#contentTypeStaticName","getParam","getType","#itemsRaw","aIf","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","doOnDialogClosed","fetchItems","fetchColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","undefined","sessionStorage","getItem","keyFilters","setColumnDefs","setFilterModel","urlSubRoute","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","navRelative","#urlToOpenEditView","urlToNewItem","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","f","state","urlToImportItem","createMetadata","open","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","#export","#delete","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","exportEntity","#confirmAndExecuteDelete","message","forceDelete","dialogTitle","confirmText","ConfirmDeleteDialogComponent","entityId","_RepositoryId","entityTitle","title","confirmTranslateKey","hasDeleteSnackbar","isConfirmed","delete","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_10_Template","ContentItemsComponent_Conditional_33_Template","tmp_3_0","Name","Properties","ListInstructions","tmp_5_0","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","GridWithHelpComponent","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","indexOf","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","create","zoneId","id","tryForce","force","HttpContext","IGNORED_STATUSES","_angular_core__WEBPACK_IMPORTED_MODULE_5__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { httpResource } from '@angular/common/http';\r\nimport { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBaseSignal } from '../../shared/services/http-service-base-signal';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\nconst logSpecs = {\r\n  getAll: true,\r\n  getAllLive: true,\r\n  getAllOnce: true,\r\n\r\n}\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBaseSignal {\r\n\r\n  log = classLog({ ContentItemsService }, logSpecs);\r\n  \r\n  getAllPromise(contentTypeStaticName: string): Promise<ContentItem[]> {\r\n    this.log.fnIf('getAll', { contentTypeStaticName });\r\n    return this.fetchPromise<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllOnce(contentTypeStaticName: string) {\r\n    this.log.fnIf('getAllOnce', { contentTypeStaticName });\r\n    return httpResource<ContentItem[]>(() => {\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getAllLive(contentTypeStaticName: string, refresh: Signal<unknown>) {\r\n    this.log.fnIf('getAllLive', { contentTypeStaticName, refresh });\r\n    return httpResource<ContentItem[]>(() => {\r\n      refresh();\r\n      return ({\r\n        url: this.apiUrl(webApiEntityList),\r\n        params: { appId: this.appId, contentType: contentTypeStaticName }\r\n      });\r\n    });\r\n  }\r\n\r\n  getColumnsPromise(contentTypeStaticName: string): Promise<Field[]> {\r\n    return this.fetchPromise<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n    selector: 'app-field-hint',\r\n    templateUrl: './field-hint.component.html',\r\n    styleUrls: ['./field-hint.component.scss'],\r\n    imports: [\r\n        MatFormFieldModule,\r\n        NgClass,\r\n        NgTemplateOutlet\r\n    ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n    selector: 'app-entity-filter',\r\n    templateUrl: './entity-filter.component.html',\r\n    styleUrls: ['./entity-filter.component.scss'],\r\n    imports: [\r\n        FormsModule,\r\n        MatRadioModule,\r\n        MatFormFieldModule,\r\n        MatInputModule,\r\n    ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n    selector: 'app-data-bundle-actions',\r\n    templateUrl: './content-items-actions.component.html',\r\n    imports: [\r\n        MatRippleModule,\r\n        MatIconModule,\r\n        MatMenuModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n    selector: 'app-content-items-entity',\r\n    templateUrl: './content-items-entity.component.html',\r\n    styleUrls: ['./content-items-entity.component.scss'],\r\n    imports: [TippyDirective,]\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n    selector: 'app-content-items-status',\r\n    templateUrl: './content-items-status.component.html',\r\n    styleUrls: ['./content-items-status.component.scss'],\r\n    imports: [\r\n        MatIconModule,\r\n        MatRippleModule,\r\n        NgClass,\r\n        MatBadgeModule,\r\n        TippyDirective,\r\n    ]\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        Create Metadata\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"ngForm\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (ngForm.controls['targetType'].touched && !ngForm.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (ngForm.controls['targetType'].touched && ngForm.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (ngForm.controls['targetType'].touched && ngForm.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (ngForm.controls['keyType'].touched && ngForm.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <mat-slide-toggle\r\n          color=\"accent\"\r\n          [tippy]=\"\r\n            vm.guidedMode\r\n              ? 'Guided mode helps you select options that work'\r\n              : 'Manual mode is for advanced uses and allows you to insert any values'\r\n          \"\r\n          [checked]=\"vm.guidedMode\"\r\n          (change)=\"toggleGuidedMode($event)\"\r\n        >\r\n          {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n        </mat-slide-toggle>\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (ngForm.controls['key'].touched && ngForm.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (ngForm.controls['key'].touched && ngForm.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (ngForm.controls['key'].touched && ngForm.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <app-save-close-button-fab\r\n        [ngClass]=\"!canSave() ? 'disabled' : ''\"\r\n        [disabled]=\"!canSave()\"\r\n        (action)=\"saveAndClose()\"\r\n      />\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { AfterViewInit, Component, computed, HostBinding, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { isCtrlEnter } from '../../edit/dialog/main/keyboard-shortcuts';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SaveCloseButtonFabComponent } from '../../shared/modules/save-close-button-fab/save-close-button-fab.component';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss'],\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n    SaveCloseButtonFabComponent,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  ngForm: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  \r\n  protected formValid = signal(false);\r\n  protected canSave = computed(() => this.formValid());\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.#watchKeyboardShortcuts();\r\n\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.ngForm = new UntypedFormGroup({});\r\n    this.ngForm.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.ngForm.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.ngForm.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.ngForm.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.ngForm.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.ngForm)]));\r\n\r\n    this.subscriptions.add(\r\n      this.ngForm.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.ngForm.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.ngForm.controls['contentTypeForContentItems'].value != null) {\r\n          this.ngForm.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.ngForm.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.ngForm.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.ngForm.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.ngForm.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.ngForm.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.ngForm.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.ngForm.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.ngForm.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.ngForm.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAllPromise(contentTypeStaticName).then(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.ngForm.valueChanges.pipe(\r\n      startWith(this.ngForm.getRawValue() as MetadataFormValues),\r\n      map(() => this.ngForm.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.ngForm.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.ngForm.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.ngForm.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.ngForm?.statusChanges.subscribe(() => {\r\n      this.formValid.set(this.ngForm?.valid ?? false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  saveAndClose(): void {\r\n    const formValues: MetadataFormValues = this.ngForm.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  #watchKeyboardShortcuts(): void {\r\n    this.dialog.keydownEvents().subscribe(event => {\r\n      if (isCtrlEnter(event) && this.canSave()) {\r\n        event.preventDefault();\r\n        this.saveAndClose();\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypesPromise(scope).then(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopesPromise().then(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n    selector: 'app-pub-meta-filter',\r\n    templateUrl: './pub-meta-filter.component.html',\r\n    styleUrls: ['./pub-meta-filter.component.scss'],\r\n    imports: [\r\n        MatRadioModule,\r\n        FormsModule,\r\n    ]\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <app-grid-with-help style=\"height: 100%\" [helpText]=\"uxHelpText()\" [refresh]=\"refresh()\" [rowLength]=\"items()?.length\">\r\n    <div class=\"eav-dialog-header\" eav-dialog-header>\r\n      <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <!-- Info Content -->\r\n    <div class=\"eav-dialog-content\" eav-dialog-content>\r\n      @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n        <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n      }\r\n    </div>\r\n\r\n    @if (items()?.length > 0) {\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material eav-dialog-content\"\r\n        [rowData]=\"items()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    }\r\n\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <div class=\"eav-dialog-actions-div\">\r\n        <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n          <span>Data</span>\r\n        </a>\r\n        <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Data</span>\r\n        </a>\r\n        <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Item</span>\r\n        </a>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n          <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n          <span>Create Metadata</span>\r\n        </button>\r\n        @if (isDebug()) {\r\n          <button\r\n            mat-button\r\n            class=\"eav-button__with-icon\"\r\n            color=\"accent\"\r\n            tippy=\"Print filter to console\"\r\n            tippyPlacement=\"top\"\r\n            (click)=\"debugFilter()\"\r\n          >\r\n            <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n            <span>Filter</span>\r\n          </button>\r\n        }\r\n      </div>\r\n      <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n        <mat-icon>add</mat-icon>\r\n      </a>\r\n    </mat-dialog-actions>\r\n  </app-grid-with-help>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ConfirmDeleteDialogComponent } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.component';\r\nimport { ConfirmDeleteDialogData } from '../app-administration/sub-dialogs/confirm-delete-dialog/confirm-delete-dialog.models';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { GridWithHelpComponent, HelpTextConst } from '../shared/ag-grid/grid-with-help/grid-with-help.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  items: true,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TippyDirective,\r\n    GridWithHelpComponent\r\n  ]\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent }, logSpecs);\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  /** Signal to trigger reloading of data */\r\n  refresh = signal(0);\r\n\r\n  // UI Help Text for the UX Help Info Card\r\n  #helpTextConst: HelpTextConst = {\r\n    empty: {\r\n      description: '<p><b>This is where you manage data items</b></p>',\r\n      hint: \"<p>Click the (+) in the bottom right corner to create your first item (think: record / entity).</p>\"\r\n    },\r\n    content: {\r\n      description: '<p><b>Each row shows a data item</b> <br>They contain the data, similar to a database row.</p>',\r\n      hint: '<p>Click on the title to edit. <br>You can also do much more - best hover over the row and icons to discover the possibilities. <br><br>You can also do data import/export (one or many), copy items, and do advanced stuff like assigning metadata.</p>'\r\n    }\r\n  };\r\n\r\n  uxHelpText = computed(() => {\r\n    const data = this.items();\r\n    return data?.length === 0 ? this.#helpTextConst.empty : this.#helpTextConst.content;\r\n  })\r\n\r\n  #gridApiSig: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.getType(this.#contentTypeStaticName).value;\r\n\r\n  #itemsRaw = this.#contentItemsSvc.getAllLive(this.#contentTypeStaticName, this.refresh).value;\r\n\r\n  items = computed(() => {\r\n    const data = this.#itemsRaw();\r\n    this.log.aIf('items', { data });\r\n    return data;\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSig.set(params.api);\r\n    this.fetchColumns();\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.refresh.update(v => ++v)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumnsPromise(this.#contentTypeStaticName).then(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSig())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSig().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSig().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSig();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSig().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data._Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.#export(item); break;\r\n                case 'delete': this.#delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  #export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n\r\n  // Show initial delete confirmation\r\n  #delete(item: ContentItem) {\r\n    this.snackBar.open('Deleting...');\r\n    this.#confirmAndExecuteDelete(\r\n      item,\r\n      \"Delete Item?\",\r\n      false\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Shows a confirmation dialog and performs delete operation if confirmed\r\n   * @param item The item to delete\r\n   * @param message Confirmation message to display\r\n   * @param forceDelete Whether to force delete\r\n   * @param dialogTitle Optional dialog title\r\n   * @param confirmText Optional confirmation button text\r\n   */\r\n  #confirmAndExecuteDelete(item: ContentItem, message: string, forceDelete: boolean, dialogTitle?: string, confirmText?: string) {\r\n\r\n    const dialogData: ConfirmDeleteDialogData = {\r\n      entityId: item._RepositoryId,\r\n      entityTitle: item._Title,\r\n      message: message,\r\n      title: dialogTitle,\r\n      confirmTranslateKey: confirmText,\r\n      hasDeleteSnackbar: true \r\n    };\r\n\r\n    this.matDialog.open(ConfirmDeleteDialogComponent, {\r\n      autoFocus: false,\r\n      data: dialogData,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '400px',\r\n    }).afterClosed().subscribe(isConfirmed => {\r\n      if (!isConfirmed) return;\r\n\r\n      // Execute delete operation\r\n      this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, forceDelete)\r\n        .subscribe({\r\n          next: () => {\r\n            this.snackBar.open('Deleted', null, { duration: 2000 });\r\n            this.fetchItems();\r\n          },\r\n          error: (err: HttpErrorResponse) => {\r\n            // Only show force delete option if this was a regular delete attempt\r\n            // Open Dialog to confirm force delete\r\n            if (!forceDelete) {\r\n              this.snackBar.dismiss();\r\n              this.#confirmAndExecuteDelete(\r\n                item,\r\n                `${err.error.ExceptionMessage} \\n\\nDo you want to force delete`,\r\n                true,\r\n                'Force Delete',\r\n                'Force'\r\n              );\r\n            }\r\n          }\r\n        });\r\n    });\r\n  }\r\n\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import { HttpContext } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { IGNORED_STATUSES } from '../interceptors/handle-errors.interceptor';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBaseSignal } from './http-service-base-signal';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBaseSignal {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n      context: new HttpContext().set(IGNORED_STATUSES, [400]),\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[]}