{"version":3,"file":"default-node_modules_angular_cdk_fesm2022_drag-drop_mjs.40648dc35fb4627c.js","mappings":"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","names":["extendStyles","dest","source","importantProperties","key","hasOwnProperty","value","setProperty","has","removeProperty","toggleNativeDragInteractions","element","enable","userSelect","style","toggleVisibility","position","top","opacity","left","combineTransforms","transform","initialTransform","parseCssTimeUnitsToMs","multiplier","toLowerCase","indexOf","parseFloat","parseCssPropertyValue","computedStyle","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","right","bottom","width","height","x","y","isInsideClientRect","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","constructor","_document","this","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","event","target","_getEventTarget","cachedPosition","get","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","node","contains","window","scrollY","scrollX","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","cloneUniqueId","type","context","getContext","drawImage","passiveEventListenerOptions","normalizePassiveListenerOptions","passive","activeEventListenerOptions","dragImportantProperties","Set","DragRef","disabled","_disabled","_dropContainer","newValue","coerceBooleanProperty","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","Subject","_pointerMoveSubscription","Subscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","_direction","dragStartDelay","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_rootElement","_pointerMove","pointerPosition","_getPointerPositionOnPage","Math","abs","_pickupPositionOnPage","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","_initialClientRect","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","coerceElement","disabledHandles","add","withPreviewTemplate","template","_previewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","parent","_parentDragRef","dispose","remove","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","_preview","_previewRef","destroy","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","shadowRoot","_getShadowRoot","insertBefore","_createPreviewElement","body","appendChild","replaceChild","_getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","previewConfig","previewClass","preview","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","getTransform","margin","zIndex","classList","setAttribute","Array","isArray","className","Promise","resolve","placeholderRect","duration","getTransformTransitionDurationInMs","getComputedStyle","transitionedProperties","property","find","prop","propertyIndex","rawDurations","rawDelays","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","round","min","max","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","SingleAxisSortStrategy","_element","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","splice","parentElement","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","elementToMeasure","a","b","immediateSibling","end","itemPositions","lastItemRect","firstItemRect","floor","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_startScrollInterval","interval","period","scheduler","asyncScheduler","timer","animationFrameScheduler","pipe","takeUntil","_scrollNode","scrollStep","scrollBy","withScrollableParents","registerDropContainer","_sortStrategy","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_cacheParentPositions","_reset","previousItems","filter","every","connectedTo","withOrientation","_scrollableElements","size","_clientRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","computedVertical","getVerticalScrollDirection","computedHorizontal","getHorizontalScrollDirection","scrollHeight","clientHeight","scrollWidth","clientWidth","getViewportSize","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","elementFromPoint","nativeElement","_startReceiving","activeSiblings","initiator","receiver","draggedItems","activeCapturingEventOptions","capture","DragDropRegistry","_class","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","startsWith","e","options","config","_clearGlobalListeners","streams","Observable","observer","eventOptions","merge","ngOnDestroy","instance","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","DEFAULT_CONFIG","DragDrop","_class2","createDrag","createDropList","i1","CDK_DRAG_PARENT","InjectionToken","CDK_DRAG_HANDLE","CdkDragHandle","_class3","_stateChanges","parentDrag","_parentDrag","ɵdir","selectors","hostAttrs","inputs","standalone","features","provide","useExisting","CDK_DRAG_PLACEHOLDER","CDK_DRAG_PREVIEW","CDK_DRAG_CONFIG","CDK_DROP_LIST","CdkDrag","_class6","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","EventEmitter","subscription","movedEvent","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","onStable","take","_updateRootElement","_setupHandlesListener","freeDragPosition","ngOnChanges","changes","rootSelectorChange","rootElementSelector","positionChange","firstChange","removeItem","closest","_getBoundaryElement","boundary","ref","dir","templateRef","coerceNumberProperty","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","startWith","tap","childHandleElements","switchMap","handleInstance","dragRef","i1$1","contentQueries","rf","ctx","dirIndex","_t","first","hostVars","hostBindings","outputs","exportAs","CDK_DROP_LIST_GROUP","_uniqueIdCounter","CdkDropList","_class8","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_dropLists","_items","_syncItemsWithRef","getSortedItems","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","coerceArray","list","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","listAutoScrollDisabled","listOrientation","useValue","DragDropModule","_class9","ɵmod","ɵinj","providers","imports","CdkScrollableModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/drag-drop.mjs","./node_modules/rxjs/dist/esm/internal/observable/interval.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, Directive, Optional, SkipSelf, Input, EventEmitter, Self, ContentChildren, ContentChild, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, map, take, startWith, tap, switchMap } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height,\n        x: clientRect.x,\n        y: clientRect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, newValue));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = false;\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        event.preventDefault();\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            event.preventDefault();\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialClientRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.remove();\n        this._previewRef?.destroy();\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor = this._anchor || this._document.createComment(''));\n            // Needs to happen before the root element is moved.\n            const shadowRoot = this._getShadowRoot();\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = this._createPreviewElement();\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this._getPreviewInsertionPoint(parent, shadowRoot).appendChild(this._preview);\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._initialClientRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialClientRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialClientRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialClientRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialClientRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            'margin': '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': `${this._config.zIndex || 1000}`,\n        }, dragImportantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (_getEventTarget(event) === this._preview && event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialClientRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.style.transform = combineTransforms(transform, initialTransform);\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // ClientRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary ClientRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialClientRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_element, _dragDropRegistry) {\n        this._element = _element;\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${Math.round(sibling.offset)}px, 0, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${Math.round(sibling.offset)}px, 0)`, sibling.initialTransform);\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            coerceElement(this._element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustClientRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === 1 /* AutoScrollVerticalDirection.UP */) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === 2 /* AutoScrollVerticalDirection.DOWN */) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === 2 /* AutoScrollHorizontalDirection.RIGHT */) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n        this._sortStrategy = new SingleAxisSortStrategy(this.element, _dragDropRegistry);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._sortStrategy.direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        // TODO(crisbeto): eventually we should be constructing the new sort strategy here based on\n        // the new orientation. For now we can assume that it'll always be `SingleAxisSortStrategy`.\n        this._sortStrategy.orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._clientRect ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n        let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._clientRect != null && isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._clientRect ||\n            !isInsideClientRect(this._clientRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = (shadowRoot || this._document);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* AutoScrollVerticalDirection.UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* AutoScrollVerticalDirection.DOWN */;\n    }\n    return 0 /* AutoScrollVerticalDirection.NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* AutoScrollHorizontalDirection.LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* AutoScrollHorizontalDirection.RIGHT */;\n    }\n    return 0 /* AutoScrollHorizontalDirection.NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* AutoScrollVerticalDirection.NONE */;\n    let horizontalScrollDirection = 0 /* AutoScrollHorizontalDirection.NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* AutoScrollVerticalDirection.UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* AutoScrollVerticalDirection.UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* AutoScrollVerticalDirection.DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* AutoScrollHorizontalDirection.LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* AutoScrollHorizontalDirection.LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* AutoScrollHorizontalDirection.RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = [];\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances.length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances.some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.indexOf(drag) > -1) {\n            return;\n        }\n        this._activeDragInstances.push(drag);\n        if (this._activeDragInstances.length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        const index = this._activeDragInstances.indexOf(drag);\n        if (index > -1) {\n            this._activeDragInstances.splice(index, 1);\n            if (this._activeDragInstances.length === 0) {\n                this._clearGlobalListeners();\n            }\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances.length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }]; } });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        this._parentDrag = parentDrag;\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }]; }, propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDragHandleDisabled']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() {\n        return this._matchSize;\n    }\n    set matchSize(value) {\n        this._matchSize = coerceBooleanProperty(value);\n    }\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: \"matchSize\" }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; }, propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // Normally this isn't in the zone, but it can cause major performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this._ngZone.runOutsideAngular(() => {\n            // We need to wait for the zone to stabilize, in order for the reference\n            // element to be in the proper place in the DOM. This is mostly relevant\n            // for draggable elements inside portals since they get stamped out in\n            // their original DOM position and then they get transferred to the portal.\n            this._ngZone.onStable.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {\n                this._updateRootElement();\n                this._setupHandlesListener();\n                if (this.freeDragPosition) {\n                    this._dragRef.setFreeDragPosition(this.freeDragPosition);\n                }\n            });\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles.changes\n            .pipe(startWith(this._handles), \n        // Sync the new handles with the DragRef.\n        tap((handles) => {\n            const childHandleElements = handles\n                .filter(handle => handle._parentDrag === this)\n                .map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                childHandleElements.push(this.element);\n            }\n            this._dragRef.withHandles(childHandleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => {\n                return item._stateChanges.pipe(startWith(item));\n            }));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], queries: [{ propertyName: \"_previewTemplate\", first: true, predicate: CDK_DRAG_PREVIEW, descendants: true }, { propertyName: \"_placeholderTemplate\", first: true, predicate: CDK_DRAG_PLACEHOLDER, descendants: true }, { propertyName: \"_handles\", predicate: CDK_DRAG_HANDLE, descendants: true }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }]; }, propDecorators: { _handles: [{\n                type: ContentChildren,\n                args: [CDK_DRAG_HANDLE, { descendants: true }]\n            }], _previewTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PREVIEW]\n            }], _placeholderTemplate: [{\n                type: ContentChild,\n                args: [CDK_DRAG_PLACEHOLDER]\n            }], data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDragDisabled']\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: ['cdkDropListGroupDisabled']\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }]; }, propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: ['cdkDropListDisabled']\n            }], sortingDisabled: [{\n                type: Input,\n                args: ['cdkDropListSortingDisabled']\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollDisabled']\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n"],"x_google_ignoreList":[0,1]}