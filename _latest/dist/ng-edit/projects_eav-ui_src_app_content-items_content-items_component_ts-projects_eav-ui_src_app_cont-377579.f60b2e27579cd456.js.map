{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts-projects_eav-ui_src_app_cont-377579.f60b2e27579cd456.js","mappings":"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","names":["EntityFilterComponent","constructor","this","filter","idFilterString","idFilter","agInit","params","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","static","t","core","VBU","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","MatInputModule","i3","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","TippyDirective","ctx_r1","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","StaticName","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","contentType","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseComponent","dialogRef","contentItemsService","contentTypesService","super","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","getAll","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","appId","keys","ControlHelpers","disableControl","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","scope","retrieveContentTypes","getScopes","i4","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","i5","ReactiveFormsModule","i6","MatSelectModule","i7","i8","MatOptionModule","i9","NgTemplateOutlet","MatButtonModule","i10","i11","MatDialogActions","MatSlideToggleModule","i12","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r3","debugFilter","ContentItemsComponent_Conditional_0_Conditional_9_Template","onGridReady","filesDropped","exportContent","importContent","importItem","createMetadata","ContentItemsComponent_Conditional_0_Conditional_34_Template","editItem","vm_r4","Name","tmp_3_0","Properties","ListInstructions","gridOptions","isDebug","ContentItemsComponent","BaseWithChildDialogComponent","router","route","snackBar","dialog","viewContainerRef","changeDetectorRef","EavLogger","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","get","entitiesService","transient","EntitiesService","contentExportService","ContentExportService","inject","GlobalConfigService","fetchContentType","fetchItems","fetchColumns","childDialogClosed$","retrieveContentType","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","log","a","setFilterModel","url","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","open","autoFocus","width","afterClosed","itemFor","Number","string","String","markForCheck","warn","duration","ColumnDefinitions","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","headerClass","flex","minWidth","sortable","onCellClicked","headerTooltip","_Used","_Uses","ActionsPinnedRight3","clone","export","delete","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","ContentItemsService","ContentTypesService","ContentItemsComponent_Conditional_0_Template","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","http","dnnContext","create","post","zoneId","update","entityId","id","tryForce","$2sxc","apiUrl","webApiEntityRoot","force","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","Custom","Empty","Hyperlink","webApiFieldsRoot","webApiFieldsAll","webApiFieldsGetShared","ContentTypesFieldsService","typeListRetrieve","appid","getInputTypesList","inputConfigs","config","dataType","indexOf","inputType","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","staticName","fields","fld","md","merged","All","InputType","getShareableFields","getShareableFieldsFor","attributeId","addInheritedField","targetContentTypeId","sourceContentTypeStaticName","sourceFieldGuid","newName","AppId","ContentTypeId","SourceType","SourceField","share","inherit","inheritMetadataOf","reOrder","idArray","contentTypeId","order","stringify","setTitle","webApiTypeRoot","rename","fieldId","IsTitle","Error","newField","Index","SortOrder","updateInputType","_angular_core__WEBPACK_IMPORTED_MODULE_3__","TrueFalseComponent","trueIcon","falseIcon","reverse","_angular_core__WEBPACK_IMPORTED_MODULE_0__","encapsulation","AgBoolCellIconsDefault","states","true","tooltip","false","AgBoolIconRenderer_Conditional_1_ng_container_1_Template","showIcon_r2","clickable","AgBoolIconRenderer","allSettings","settings","d","getUrl","AgBoolIconRenderer_Conditional_1_Template","AgBoolIconRenderer_Conditional_2_Template","AgBoolIconRenderer_ng_template_3_Template","ActionsPinnedRight1","pinned","ActionsPinnedRight4","ActionsPinnedRight5","ActionsPinnedRight6","ActionsPinnedRight7","IconShow","IsHidden","Items","Fields","Character","Boolean2","Boolean3","TextWideType","TextWide","TextWideMin100","TextWideFlex3","TextNarrow","TextWideActionClass","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","align","copy","copyToClipboard","_angular_core__WEBPACK_IMPORTED_MODULE_1__","onClick","stopPropagation","FsC","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hidden","disabled","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/content-items/services/entities.service.ts","./projects/eav-ui/src/app/content-type-fields/constants/data-type.constants.ts","./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.ts","./projects/eav-ui/src/app/dev-rest/api/true-false/true-false.component.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-params.ts","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.html","./projects/eav-ui/src/app/shared/ag-grid/apps-list-show/ag-bool-icon-renderer.component.ts","./projects/eav-ui/src/app/shared/ag-grid/column-definitions.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.ts","./projects/eav-ui/src/app/shared/components/boolean-filter/boolean-filter.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.ts","./projects/eav-ui/src/app/shared/components/id-field/id-field.component.html","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"do('clone')\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n  <div class=\"eav-grid-action-button highlight\" matRipple\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n      matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n  <div class=\"eav-grid-action-button disabled\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n      : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n  </div>\r\n  <div class=\"eav-dialog-content\">\r\n    <p>\r\n      This is a special operation to add an item which is metadata for another item,\r\n      see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n    </p>\r\n    <form [formGroup]=\"form\">\r\n      <!-- Target Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Target</mat-label>\r\n        @if (vm.guidedMode) {\r\n        <mat-select formControlName=\"targetType\" required>\r\n          @for (option of targetTypeOptions; track option) {\r\n          <mat-option [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          }\r\n          @if (vm.unknownTargetType) {\r\n          <mat-option [value]=\"vm.formValues.targetType\">\r\n            {{ vm.formValues.targetType }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedMode) {\r\n        <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n      <app-field-hint [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n        doing\r\n      </app-field-hint>\r\n      }\r\n      @if (vm.targetTypeHint) {\r\n      <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      <!-- Key Type -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key type</mat-label>\r\n        <mat-select formControlName=\"keyType\" required>\r\n          @for (option of vm.keyTypeOptions; track option) {\r\n          <mat-option [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      <!-- Content Type for Content Items -->\r\n      @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <!-- Scope for Content Types -->\r\n      @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n      vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Scope</mat-label>\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n          @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      }\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n      <!-- Key -->\r\n      <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px;\">\r\n        <mat-label>Key</mat-label>\r\n        @if (vm.guidedMode) {\r\n        @switch (vm.formValues.targetType) {\r\n        @case (eavConstants.metadata.entity.targetType) {\r\n        @if (vm.guidedKey) {\r\n        <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n          @for (item of vm.contentItems; track item) {\r\n          <mat-option [value]=\"item.Guid\">\r\n            {{ item.Title }} ({{ item.Id }})\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedKey) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        @case (eavConstants.metadata.contentType.targetType) {\r\n        @if (vm.guidedKey) {\r\n        <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n          @for (contentType of vm.contentTypes; track contentType) {\r\n          <mat-option [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n          }\r\n        </mat-select>\r\n        }\r\n        @if (!vm.guidedKey) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        @default {\r\n        <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n        }\r\n        }\r\n        } @else {\r\n        @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n        <input matInput type=\"text\" formControlName=\"key\" required>\r\n        }\r\n        @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n        <input matInput type=\"number\" formControlName=\"key\" required>\r\n        }\r\n        }\r\n        <ng-template #defaultKeyInput>\r\n          @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n          <input matInput type=\"text\" formControlName=\"key\" required>\r\n          }\r\n          @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n          <input matInput type=\"number\" formControlName=\"key\" required>\r\n          }\r\n        </ng-template>\r\n        @if (vm.guidedMode && vm.guidedKeyExists) {\r\n        <div matTextSuffix class=\"eav-selection-suffix\">\r\n          <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n            [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\" (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon class=\"eav-icon\">search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\"\r\n            [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\" (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n        }\r\n      </mat-form-field>\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n      <app-field-hint [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      }\r\n      @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n      <app-field-hint [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n      }\r\n    </form>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <mat-slide-toggle color=\"accent\"\r\n      [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n      [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n      {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n    </mat-slide-toggle>\r\n    <div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { NgTemplateOutlet, NgClass, AsyncPipe } from '@angular/common';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { ControlHelpers } from '../../edit/shared/helpers/control.helpers';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        ControlHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        ControlHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRadioModule,\r\n    FormsModule,\r\n  ],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","@if (viewModel$ | async; as vm) {\r\n<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">\r\n      {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (vm.contentType?.Properties?.ListInstructions; as listInstructions) {\r\n    <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\">\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, inject, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, Subject, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseWithChildDialogComponent } from '../shared/components/base-with-child-dialog.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../core';\r\nimport { EavLogger } from '../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'ContentItemsComponent';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n  ],\r\n  providers: [\r\n    ContentItemsService, // used in import Content item and create metadata\r\n    ContentTypesService, // used create metadata\r\n  ],\r\n})\r\nexport class ContentItemsComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  private entitiesService = transient(EntitiesService);\r\n  private contentExportService = transient(ContentExportService);\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n\r\n  ) {\r\n    super(router, route, new EavLogger(nameOfThis, logThis));\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$\r\n    ]).pipe(\r\n      map(([contentType, items]) => ({ contentType, items }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.Id,\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'clone': this.clone(item); break;\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../../shared/models/edit-form.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { webApiEntityRoot } from '../../shared/services/entity.service';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\nexport interface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\nexport interface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","export const DataTypeConstants = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const;\r\n\r\nexport type DataTypeConstant = typeof DataTypeConstants[keyof typeof DataTypeConstants];\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = 'admin/field/all';\r\nexport const webApiFieldsGetShared = 'admin/field/GetSharedFields';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  /** Get all fields for some content type */\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  /** Get all possible sharable fields for a new sharing */\r\n  getShareableFields() {\r\n    return this.http.get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString() },\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get sharable fields which are possible for this attribute.\r\n   * \r\n   * Reason is that eg. a bool-attribute can only receive metadata from a bool attribute, etc.\r\n   * \r\n   * @param attributeId the existing attributeId which will receive the new metadata\r\n   */\r\n  getShareableFieldsFor(attributeId: number) {\r\n    // TODO: @SDV - do the same as in getShareableFields()\r\n    // but add parameter attributeId to the webapi call\r\n    // I'll create the backend afterwards\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsGetShared), {\r\n        params: { appid: this.context.appId.toString(), attributeId: attributeId.toString() },\r\n      });\r\n  }\r\n\r\n  addInheritedField(targetContentTypeId: number, sourceContentTypeStaticName: string, sourceFieldGuid: string, newName: string) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'AddInheritedField'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: targetContentTypeId.toString(),\r\n        SourceType: sourceContentTypeStaticName,\r\n        SourceField: sourceFieldGuid,\r\n        name: newName,\r\n      }\r\n    });\r\n  }\r\n\r\n  share(attributeId: number, share: boolean = true) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Share'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        share,\r\n      },\r\n    });\r\n  }\r\n\r\n  inherit(attributeId: number, sourceFieldGuid: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Inherit'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        attributeId: attributeId.toString(),\r\n        inheritMetadataOf: sourceFieldGuid,\r\n      },\r\n    });\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { TrueFalseParams } from './true-false.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-rest-api-true-false',\r\n  templateUrl: './true-false.component.html',\r\n  standalone: true,\r\n  imports: [MatIconModule],\r\n})\r\nexport class TrueFalseComponent implements ICellRendererAngularComp {\r\n  icon: string;\r\n\r\n  private trueIcon = 'check_circle';\r\n  private falseIcon = 'circle';\r\n\r\n  agInit(params: ICellRendererParams & TrueFalseParams): void {\r\n    let value: boolean = params.value;\r\n    if (params.reverse) { value = !value; }\r\n    if (params.trueIcon) { this.trueIcon = params.trueIcon; }\r\n    if (params.falseIcon) { this.falseIcon = params.falseIcon; }\r\n    this.icon = value ? this.trueIcon : this.falseIcon;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","export interface AgBoolCellIconSetting {\r\n  clickable?: boolean;\r\n  tooltip: string;\r\n  icon: string;\r\n  url?: string;\r\n  getUrl?: (data: any) => string;\r\n}\r\n\r\nexport interface AgBoolCellIconSettings {\r\n  states: Record<'true' | 'false' | string, AgBoolCellIconSetting>;\r\n}\r\n\r\nexport interface AgBoolCellIconsParams<T = any> {\r\n  settings(data: T): AgBoolCellIconSettings;\r\n}\r\n\r\nexport const AgBoolCellIconsDefault: AgBoolCellIconSettings = {\r\n  states: {\r\n    true: {\r\n      tooltip: 'true/on',\r\n      icon: 'radio_button_checked',\r\n    },\r\n    false: {\r\n      tooltip: 'false/off',\r\n      icon: 'radio_button_unchecked',\r\n    }\r\n  }\r\n};","<div class=\"icon-container\">\r\n  @if (data.url) {\r\n    <a [href]=\"data.url\" target=\"_blank\">\r\n      <ng-container *ngTemplateOutlet=\"showIcon\"></ng-container>\r\n    </a>\r\n  } @else {\r\n    <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n      <mat-icon>{{ data.icon }}</mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n\r\n<ng-template #showIcon>\r\n  <div class=\"icon-cell icon\" [ngClass]=\"{'clickable': data.clickable }\" [tippy]=\"data.tooltip\">\r\n    <mat-icon>{{ data.icon }}</mat-icon>\r\n  </div>\r\n</ng-template>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { AgBoolCellIconSetting, AgBoolCellIconSettings, AgBoolCellIconsDefault, AgBoolCellIconsParams } from './ag-bool-icon-params';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { NgClass } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-ag-bool-icon-renderer',\r\n  templateUrl: './ag-bool-icon-renderer.html',\r\n  standalone: true,\r\n  imports: [\r\n    TippyDirective,\r\n    MatIconModule,\r\n    NgClass,\r\n  ],\r\n})\r\nexport class AgBoolIconRenderer implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private allSettings: AgBoolCellIconSettings;\r\n\r\n  data: AgBoolCellIconSetting; // | { link: boolean  };\r\n\r\n  agInit(params: ICellRendererParams & AgBoolCellIconsParams): void {\r\n    this.value = params.value;\r\n\r\n    this.allSettings = params.settings?.(params.data) ?? AgBoolCellIconsDefault;\r\n    const d = this.allSettings.states[this.value ? 'true' : 'false'];\r\n    this.data = {\r\n      ...d,\r\n      url: d.url ?? d.getUrl?.(params.data),\r\n      // link: !!(d.url || d.getUrl),\r\n    };\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ColDef } from '@ag-grid-community/core';\r\nimport { BooleanFilterComponent } from '../components/boolean-filter/boolean-filter.component';\r\nimport { App } from '../../apps-management/models/app.model';\r\nimport { AgBoolIconRenderer } from './apps-list-show/ag-bool-icon-renderer.component';\r\nimport { TrueFalseComponent } from '../../dev-rest/api/true-false/true-false.component';\r\nimport { TrueFalseParams } from '../../dev-rest/api/true-false/true-false.models';\r\n\r\nexport class ColumnDefinitions {\r\n  static ActionsPinnedRight1: ColDef = {\r\n    width: 42,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight3: ColDef = {\r\n    width: 122,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight4: ColDef = {\r\n    width: 162,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight5: ColDef = {\r\n    width: 202,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight6: ColDef = {\r\n    width: 82,\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static ActionsPinnedRight7: ColDef = {\r\n    width: 62,\r\n    cellClass: 'secondary-action no-outline no-padding'.split(' '),\r\n    pinned: 'right',\r\n  };\r\n\r\n  static IconShow: ColDef = {\r\n    headerName: 'Show',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'icons no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: BooleanFilterComponent,\r\n    valueGetter: (params) => {\r\n      const app: App = params.data;\r\n      return !app.IsHidden;\r\n    },\r\n    cellRenderer: AgBoolIconRenderer,\r\n  };\r\n\r\n  static Items: ColDef = {\r\n    width: 102,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Fields: ColDef = {\r\n    width: 94,\r\n    headerClass: 'dense',\r\n    cellClass: 'secondary-action no-padding'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow columns, typically just showing 1 character\r\n   */\r\n  static Character: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Id: ColDef = {\r\n    headerName: 'ID',\r\n    field: 'Id',\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'id-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static Boolean: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n  };\r\n\r\n  static Boolean2: ColDef = {\r\n    width: 100,\r\n    sortable: true,\r\n    cellClass: 'no-outline',\r\n    filter: BooleanFilterComponent,\r\n  };\r\n\r\n  static Boolean3: ColDef = {\r\n    headerClass: 'dense',\r\n    width: 80,\r\n    cellClass: 'no-outline',\r\n    cellRenderer: TrueFalseComponent,\r\n    cellRendererParams: (() => {\r\n      const params: TrueFalseParams = {\r\n        reverse: false,\r\n      };\r\n      return params;\r\n    })(),\r\n  }\r\n\r\n  /**\r\n   * Very narrow ID column, with typical header name and label etc.\r\n   */\r\n  static Number: ColDef = {\r\n    width: 70,\r\n    headerClass: 'dense',\r\n    cellClass: 'number-cell no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agNumberColumnFilter',\r\n  };\r\n\r\n  static TextWideType: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action highlight'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWide: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideMin100: ColDef = {\r\n    flex: 1,\r\n    minWidth: 100,\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  }\r\n\r\n  static TextWideFlex3: ColDef = {\r\n    flex: 3,\r\n    minWidth: 250,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextNarrow: ColDef = {\r\n    flex: 1,\r\n    minWidth: 150,\r\n    cellClass: 'no-outline',\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n  static TextWideActionClass: ColDef = {\r\n    flex: 2,\r\n    minWidth: 250,\r\n    cellClass: 'primary-action no-padding no-outline'.split(' '),\r\n    sortable: true,\r\n    filter: 'agTextColumnFilter',\r\n  };\r\n\r\n\r\n\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n  ]\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: boolean = this.filterParams.valueGetter(valueGetterParams);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\nimport { NgClass } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy(): void {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>","import { Directive, HostListener } from '@angular/core';\r\n\r\nconst logThis = false;\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n  constructor() {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.onClick', event);\r\n    event.stopPropagation();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[33]}