{"version":3,"sources":["./src/app/dev-rest/scenarios/all-scenarios.ts","./src/app/dev-rest/examples/hint.ts","./src/app/dev-rest/examples/api-call.ts","./src/app/dev-rest/examples/code-sample.ts","./src/app/dev-rest/examples/generate-samples.ts","./src/app/dev-rest/help-popup/help-popup.component.html","./src/app/dev-rest/help-popup/help-popup.component.ts","./src/app/dev-rest/selector-with-help/selector-with-help.component.html","./src/app/dev-rest/selector-with-help/selector-with-help.component.ts","./src/app/dev-rest/dev-rest.component.html","./src/app/dev-rest/dev-rest.component.ts"],"names":["AllScenarios","key","in2sxc","useVirtual","inSameSite","inSameContext","name","description","notes","needsAnonymous","alert","info","tip","warning","type","message","link","this","icon","virtual","verb","url","teaser","instructions","enableButton","code","browseUrl","title","runInConsole","hints","trim","hint$2sxc","Hint","warningSimpleSampleOnly","generateApiCalls","$2sxc","scenario","moduleId","root","id","withId","ApiCall","snippetsGet","http","apiUrl","snippetsCreate","snippetsUpdate","snippetsDelete","path","list","push","CodeSample","endPointGetter","dialogRef","dialogData","ngOnInit","closeDialog","close","HelpPopupComponent","dialog","valueChange","selectionChange","value","items","find","item","emit","showHelp","open","width","data","body","autoFocus","SelectorWithHelpComponent","router","route","snackBar","contentTypesService","appDialogConfigService","permissionsService","entityService","context","dnnContext","hostClass","modules","gridOptions","columnDefs","headerName","field","headerClass","cellClass","flex","minWidth","scenarios","targetType","metadata","entity","keyType","keyTypes","guid","contentTypeStaticName","snapshot","paramMap","get","permissions$","Subject","subscription","Subscription","contentType$","BehaviorSubject","dialogSettings$","scenario$","modeInternal$","pipe","map","root$","combineLatest","contentType","dialogSettings","resolved","replace","Name","encodeURI","Context","App","Folder","domainPrefix","document","location","protocol","host","itemOfThisType$","reactiveEntities","filter","ct","contentTypeName","StaticName","length","i","templateVars$","d","modeInternal","diag","permissions","currentScenario","itemId","Id","itemGuid","Value","apiCalls","folder","permissionsHasAnonymous","p","Condition","indexOf","fetchData","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","changeScenario","next","callApiGet","subscribe","res","console","log","openSnackBar","openPermissions","navigate","relativeTo","copyCode","text","retrieveContentType","getDialogSettings","getAll","add","events","event","startWith","firstChild","pairwise","action","duration","DevRestComponent"],"mappings":"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","file":"dev-rest-component.054d684d194b5ab03cde.js","sourcesContent":["import { Scenario } from './scenario';\r\n\r\nexport const AllScenarios: Array<Scenario> = [\r\n  {\r\n    key: 'internal',\r\n    in2sxc: true,\r\n    useVirtual: true,\r\n    inSameSite: true,\r\n    inSameContext: true,\r\n    name: 'JS in this App on a page (easiest)',\r\n    description: `Internal access means that your JS code is running in a 2sxc-module on a DNN-page.\r\n    This is the default access.\r\n    In this scenario, various headers are included in the request,\r\n    incl. the module it\\'s coming from, which allows various automatic things to happen.\r\n    This results in simpler REST requests.`,\r\n    notes: `This mode makes it easy to re-distribute your app, as you can perform API calls relative to the module that\\'s hosting it.\r\n    This means, that even if you export/import the app to another system, the API-calls stay the same.`,\r\n  },\r\n  {\r\n    key: 'internal2',\r\n    in2sxc: true,\r\n    useVirtual: true,\r\n    inSameSite: true,\r\n    inSameContext: false,\r\n    name: 'JS in a DIFFERENT 2sxc App on the SAME site',\r\n    description: `When using JS from another app, you cannot auto-detect of the app, so the path is slightly different.`,\r\n    notes: '',\r\n  },\r\n  // {\r\n  //   key: 'external1',\r\n  //   in2sxc: false,\r\n  //   useVirtual: false,\r\n  //   inSameSite: false,\r\n  //   inSameContext: false,\r\n  //   name: 'JS from a DIFFERENT site',\r\n  //   description: `When coding from another site, the path needs to be complete (not virtual), since auto-detection of site etc. can't work.\r\n  //   In addition, most DNN-headers cause trouble because they tell the server a context which isn't actually true. `,\r\n  //   notes: '',\r\n  // },\r\n  {\r\n    key: 'external',\r\n    in2sxc: false,\r\n    useVirtual: false,\r\n    inSameSite: false,\r\n    inSameContext: false,\r\n    needsAnonymous: true,\r\n    name: 'External (other website, mobile device, etc.)',\r\n    description: `External access means that the JS code could be on another page / module in DNN (which is not the same app),\r\n    or it could be coming from a mobile App, or another website altogether.\r\n    In this case, automatic app-detection can\\'t work, as various headers are missing, and you must access the endpoint more explicitly.`,\r\n    notes: `This mode requires you to define the exact, full URL, so if you create copies of this app on another system,\r\n    the URL must be updated to access that system specifically.\r\n    Note that our samples are in JS, you'll have to figure it out yourself for other programming languages.`,\r\n  },\r\n];\r\n","// tslint:disable: curly\r\n\r\ntype typeName = 'alert' | 'info' | 'tip' | 'warning';\r\nconst map: { [name in typeName]: string } = {\r\n  alert: 'warning',\r\n  info: 'menu_book',\r\n  tip: 'star',\r\n  warning: 'warning',\r\n};\r\n\r\nexport class Hint {\r\n  public icon: string;\r\n  constructor(\r\n    public type: typeName,\r\n    public message: string,\r\n    public link: string = '',\r\n  ) {\r\n    this.icon = map[type];\r\n  }\r\n}\r\n","import { CodeSample } from './code-sample';\r\n\r\nexport class ApiCall {\r\n  constructor(\r\n    public virtual: boolean,\r\n    public verb: 'GET' | 'POST' | 'DELETE',\r\n    public url: string,\r\n    public teaser: string,\r\n    public instructions: string,\r\n    public enableButton: boolean,\r\n    public code: CodeSample[] = [],\r\n    public browseUrl: string = null,\r\n  ) { }\r\n}\r\n","import { Hint } from './hint';\r\n\r\nexport class CodeSample {\r\n  constructor(\r\n    public title: string,\r\n    public description: string,\r\n    public code: string,\r\n    public runInConsole: boolean,\r\n    public hints: Hint[] = [],\r\n    // public warning = '',\r\n  ) {\r\n    // the code often has a leading new-line - so we'll trim this\r\n    this.code = this.code.trim();\r\n  }\r\n}\r\n","import { SxcRoot } from '@2sic.com/2sxc-typings';\r\nimport { ApiCall, CodeSample, Scenario } from '..';\r\nimport { Hint } from './hint';\r\n// tslint:disable: curly\r\n\r\nconst hint$2sxc = new Hint('tip', `The <code>$2sxc</code> is a helper JS from 2sxc. It's always included for super-users (hosts).\r\n But if you need normal visitors to use the API, you must request it in your Razor using @Edit.Enable(...).\r\n <a href=\"https://docs.2sxc.org/specs/js/2sxc.html\" target=\"_blank\">see docs</a>`);\r\n\r\nconst warningSimpleSampleOnly = new Hint('warning', `WARNING: We only prepared the basic example running in the same app. You can of course also run this elsewhere,\r\nbut you'll have to compare it with the GET examples to be sure you have the right headers etc. `, '');\r\n\r\nexport function generateApiCalls($2sxc: SxcRoot, scenario: Scenario, moduleId: number, root: string, id: number) {\r\n  const virtual = root[0] !== '/';\r\n  root = root + '/';\r\n  const withId = root + id;\r\n  return [\r\n    new ApiCall(virtual, 'GET', root, 'read all', 'Read list of all items', true, snippetsGet($2sxc, scenario, root, moduleId),\r\n      $2sxc.http.apiUrl(root)),\r\n    new ApiCall(virtual, 'GET', withId, 'read one', 'Read a single item #' + id, true, snippetsGet($2sxc, scenario, withId, moduleId),\r\n      $2sxc.http.apiUrl(withId)),\r\n    new ApiCall(virtual, 'POST', root, 'create', 'Create an item', false, snippetsCreate(scenario, root, moduleId)),\r\n    new ApiCall(virtual, 'POST', withId, 'update', 'Update the item #' + id, false, snippetsUpdate(scenario, withId, moduleId)),\r\n    new ApiCall(virtual, 'DELETE', withId, 'delete', 'Delete item #' + id, false, snippetsDelete(scenario, withId, moduleId)),\r\n  ];\r\n}\r\n\r\nfunction snippetsGet($2sxc: SxcRoot, scenario: Scenario, path: string, moduleId: number): CodeSample[] {\r\n  const virtual = path[0] !== '/';\r\n  const list: CodeSample[] = [];\r\n  if (scenario.inSameContext)\r\n    list.push(new CodeSample('Example with global $2sxc and event-context',\r\n      'This example finds the context information from the HTML where an action started.',\r\n      `\r\n<button onclick=\"$2sxc(this).webApi.get('${path}').then(data => console.log(data))\">\r\n  get it\r\n</button>`, false, [hint$2sxc]));\r\n\r\n  if (scenario.in2sxc)\r\n    list.push(new CodeSample(`Example with global $2sxc and a Module-Id ${moduleId}`,\r\n      `This is how you get the context when your code doesn't start with a DOM context, so you need the moduleId.`,\r\n      `\r\n// get the sxc-controller for this module\r\nvar sxc = $2sxc(${moduleId});\r\n// now get the data in the promise\r\nsxc.webApi.get('${path}')\r\n  .then(data => {\r\n    console.log(data)\r\n  });`, false, [hint$2sxc]),\r\n      new CodeSample(`Same example as one-liner`,\r\n        'This is the same as above, but as a one-liner so you can run it directly in the F12 console right now.',\r\n        `$2sxc(${moduleId}).webApi.get('${path}').then(data => console.log('just got:', data));`, true));\r\n\r\n  if (scenario.in2sxc && scenario.inSameContext)\r\n    list.push(new CodeSample('Example where you get the Module-Id from Razor',\r\n      `This example doesn't use a fixed moduleId but let's the Razor add the current moduleId when the page is rendered.`,\r\n      `\r\n// this will be replaced on the server with the ID\r\nvar moduleId = @Dnn.Module.ModuleID;\r\nvar sxc = $2sxc(moduleId);\r\nvar data = sxc.webApi.get('${path}');`, false, [hint$2sxc]));\r\n\r\n  // jquery examples, they differ based on the scenario\r\n  const endPointGetter = virtual ? `$2sxc.http.apiUrl('${path}')` : `'${path}'`;\r\n  if (scenario.inSameSite) {\r\n    list.push(new CodeSample('Using jQuery inside DNN',\r\n      `This example uses jQuery instead of the $2sxc to do the AJAX call.\r\n      It shows you how to resolve the virtual path for use in other ways.`,\r\n      `\r\nvar endpoint = ${endPointGetter};\r\n$.ajax({\r\n  url:endpoint,\r\n  beforeSend: $.dnnSF(${moduleId}).setModuleHeaders\r\n})}).then(data => {\r\n  console.log('Got this data:', data);\r\n})`, false, []));\r\n    list.push(new CodeSample('Using jQuery as single-liner',\r\n      `The same example as above, just as single-liner so you can test it directly in the F12 console.\r\n      This will only work if you're on a DNN page with this module.`,\r\n      `$.ajax({url: ${endPointGetter}, beforeSend: $.dnnSF(${moduleId}).setModuleHeaders }).then(data => console.log(data))`,\r\n      false, []));\r\n  } else {\r\n    list.push(new CodeSample('Using jQuery in another Site or External',\r\n      `This example uses jQuery and doesn't use $2sxc or the DNN ServicesFramework,\r\n      because they would be either missing, or give wrong context-headers.\r\n      IMPORTANT: This will only work if you set anonymous permissions on the content-type.`,\r\n      `\r\nvar endpoint = '${path}';\r\n$.ajax({\r\nurl:endpoint,\r\n})}).then(data => {\r\n  console.log('Got this data:', data);\r\n})`, false, []));\r\n\r\n  }\r\n  // return generated snippets\r\n  return list;\r\n}\r\n\r\n/** Snippets for basic Post-Create */\r\nfunction snippetsCreate(scenario: Scenario, path: string, moduleId: number): CodeSample[] {\r\n  const showWarning = !scenario.inSameContext;\r\n  return [\r\n    new CodeSample('Basic Example',\r\n      `This example uses the ModuleId to get the context information.\r\nTo see other ways to get the context and headers, check out the GET examples.\r\nNote that this snippet doesn't use real names of properties to add.`,\r\n      `// get the sxc-controller for this module\r\nvar sxc = $2sxc(${moduleId});\r\n\r\n// The object we'll send to get created. It's just a simple object with properties\r\nvar newThing = {\r\n  property1: 17,\r\n  property2: 'Some Text',\r\n  // related items like tags can be assigned with IDs\r\n  // which you would usually get from somewhere first\r\n  propertyPointingToOtherIds: [74,50203],\r\n};\r\n\r\n// now create it and get the id back\r\nsxc.webApi.post('${path}', newThing)\r\n  .then(data => {\r\n    console.log('Got this ID information: ', data)\r\n  });`,\r\n      false,\r\n      showWarning ? [warningSimpleSampleOnly] : []),\r\n  ];\r\n}\r\n\r\n/** Snippets for basic Post-Update */\r\nfunction snippetsUpdate(scenario: Scenario, path: string, moduleId: number): CodeSample[] {\r\n  const showWarning = !scenario.inSameContext;\r\n  return [\r\n    new CodeSample('Basic Example',\r\n      `This example uses the ModuleId to get the context information.\r\nTo see other ways to get the context and headers, check out the GET examples.\r\nNote that this snippet doesn't use real names of properties to add.`,\r\n      `// get the sxc-controller for this module\r\nvar sxc = $2sxc(${moduleId});\r\n\r\n// The object we'll send to update the data. It's just a simple object with properties\r\nvar updateProperty1And2 = {\r\n  property1: 2742,\r\n  property2: 'Changed Text',\r\n};\r\n\r\n// now update the item\r\nsxc.webApi.post('${path}', updateProperty1And2)\r\n  .then(data => {\r\n    console.log('Update completed', data)\r\n  });`,\r\n      false,\r\n      showWarning ? [warningSimpleSampleOnly] : []),\r\n  ];\r\n}\r\n\r\n/** Snippets for basic Post-Update */\r\nfunction snippetsDelete(scenario: Scenario, path: string, moduleId: number): CodeSample[] {\r\n  const showWarning = !scenario.inSameContext;\r\n  return [\r\n    new CodeSample('Basic Example',\r\n      `This example uses the ModuleId to get the context information.\r\nTo see other ways to get the context and headers, check out the GET examples.\r\nNote that this snippet doesn't use real names of properties to add.`,\r\n      `// get the sxc-controller for this module\r\nvar sxc = $2sxc(${moduleId});\r\n\r\n// delete the item\r\nsxc.webApi.delete('${path}')\r\n  .then(data => {\r\n    console.log('Delete completed', data)\r\n  });`,\r\n      false,\r\n      showWarning ? [warningSimpleSampleOnly] : []),\r\n  ];\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>{{ dialogData.name }}</div>\r\n    <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<div class=\"dialog-component-content fancy-scrollbar-light\">\r\n  <p class=\"dialog-description\">\r\n    {{ dialogData.body }}\r\n  </p>\r\n\r\n  <p class=\"dialog-description\" *ngIf=\"dialogData.notes\">\r\n    <em>{{ dialogData.notes }}</em>\r\n  </p>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { HelpPopupData } from './help-popup.models';\r\n\r\n@Component({\r\n  selector: 'app-help-popup',\r\n  templateUrl: './help-popup.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class HelpPopupComponent implements OnInit {\r\n\r\n  constructor(private dialogRef: MatDialogRef<HelpPopupComponent>, @Inject(MAT_DIALOG_DATA) public dialogData: HelpPopupData) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","<div class=\"selector\">\r\n  <mat-form-field class=\"selector__dropdown\" color=\"accent\">\r\n    <mat-label>{{ label }}</mat-label>\r\n    <mat-select [value]=\"value\" (selectionChange)=\"selectionChange($event.value)\">\r\n      <mat-option *ngFor=\"let item of items\" [value]=\"item.key\">{{ item.name }}</mat-option>\r\n    </mat-select>\r\n  </mat-form-field>\r\n\r\n  <button mat-icon-button (click)=\"showHelp()\">\r\n    <mat-icon>help_outline</mat-icon>\r\n  </button>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { HelpPopupComponent } from '..';\r\nimport { HelpPopupData } from '../help-popup/help-popup.models';\r\nimport { Scenario } from '../scenarios';\r\n\r\n@Component({\r\n  selector: 'app-selector-with-help',\r\n  templateUrl: './selector-with-help.component.html',\r\n  styleUrls: ['./selector-with-help.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SelectorWithHelpComponent implements OnInit {\r\n  @Input() label: string;\r\n  @Input() items: Scenario[];\r\n  @Input() value: string;\r\n  @Output() private valueChange = new EventEmitter<Scenario>();\r\n\r\n  constructor(private dialog: MatDialog) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  selectionChange(key: string) {\r\n    this.value = key;\r\n    const scenario = this.items.find(item => item.key === this.value);\r\n    this.valueChange.emit(scenario);\r\n  }\r\n\r\n  showHelp() {\r\n    const scenario = this.items.find(item => item.key === this.value);\r\n    const data: HelpPopupData = {\r\n      name: scenario.name,\r\n      body: scenario.description,\r\n      notes: scenario.notes,\r\n    };\r\n\r\n    this.dialog.open(HelpPopupComponent, {\r\n      width: '500px',\r\n      data,\r\n      autoFocus: false,\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>Using REST with {{ data.contentType?.Name }}</div>\r\n      <button mat-icon-button matTooltip=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <app-selector-with-help label=\"Choose Scenario\" [items]=\"scenarios\" [value]=\"data.scenario.key\"\r\n    (valueChange)=\"changeScenario($event)\">\r\n  </app-selector-with-help>\r\n\r\n  <ng-container *ngTemplateOutlet=\"restTabs\"></ng-container>\r\n\r\n  <ng-template #restTabs>\r\n    <mat-tab-group dynamicHeight color=\"accent\"\r\n      class=\"mat-tab-group-fit-height mat-tab-group-fancy-scrollbar default-fonts\">\r\n      <mat-tab>\r\n        <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Introduction\">\r\n          <mat-icon>emoji_objects</mat-icon>\r\n          <span>Introduction</span>\r\n        </div>\r\n        <p>\r\n          All data can be used in JavaScript, SPAs or anywhere with the REST API\r\n          (see <a href=\"https://docs.2sxc.org/specs/web-api/intro.html\" target=\"_blank\">docs</a>).\r\n          Use this for things like:\r\n        </p>\r\n        <ul>\r\n          <li>Creating SPAs in DNN/2sxc</li>\r\n          <li>Getting data for mobile apps</li>\r\n          <li>Sharing data to other platforms</li>\r\n          <li>Using DNN/2sxc as a headless CMS</li>\r\n        </ul>\r\n        <p>\r\n          Just set off HTTP <code>GET</code> requests or similar\r\n          to the endpoint like <code>{{ data.root }}</code>. You can find the full list with example code\r\n          in the next tabs.\r\n          Make sure you also read about permissions and HTTP headers.\r\n        </p>\r\n        <h3>Scenarios</h3>\r\n        <ng-container *ngFor=\"let scenario of scenarios\">\r\n          <h4>Scenario: {{ scenario.name }}</h4>\r\n          <p>\r\n            {{ scenario.description }}\r\n          </p>\r\n          <p *ngIf=\"scenario.notes\">\r\n            <em>\r\n              {{ scenario.notes }}\r\n            </em>\r\n          </p>\r\n        </ng-container>\r\n      </mat-tab>\r\n\r\n      <mat-tab>\r\n        <div *matTabLabel class=\"mat-tab-label-box\"\r\n          [matTooltip]=\"(data.scenario.useVirtual ? 'Virtual ' : 'Absolute ') + 'REST URLs'\">\r\n          <mat-icon>code</mat-icon>\r\n          <span>{{ data.scenario.useVirtual ? 'Virtual' : 'Absolute' }} REST URLs</span>\r\n        </div>\r\n        <p *ngIf=\"data.scenario.useVirtual\" class=\"info icon-box\">\r\n          <mat-icon>menu_book</mat-icon>\r\n          Virtual REST URLs are short. They will be resolved internally\r\n          to the full length (based on the dnn-version, current portal, etc.)\r\n          thanks to $2sxc JS API. This happens when you use the\r\n          <a href=\"https://docs.2sxc.org/specs/js/sxcewebapi.html\" target=\"_blank\">\r\n            $2sxc(<em>id-or-htmlnode</em>).webApi.get(...)\r\n          </a>\r\n          or if you use\r\n          <a href=\"https://https://www.npmjs.com/package/@2sic.com/dnn-sxc-angular\" target=\"_blank\">\r\n            dnn-sxc-angular (npm package)\r\n          </a>\r\n          (which also passes url-resolving through $2sxc).\r\n        </p>\r\n        <p *ngIf=\"data.scenario.needsAnonymous && !data.permissionsHasAnonymous\" class=\"warning icon-box\">\r\n          <mat-icon>warning</mat-icon>\r\n          To use the REST API from external, you usually will want to set some permissions for <code>Anonymous</code>.\r\n          As of now, no such permissions are configured.\r\n        </p>\r\n        <p *ngIf=\"data.scenario.needsAnonymous && data.permissionsHasAnonymous\" class=\"alert icon-box\">\r\n          <mat-icon>warning</mat-icon>\r\n          It seems that you have some permissions configured for <code>Anonymous</code>.\r\n          This is correct if you plan on using the REST endpoints from externaly.\r\n          Please make sure that they are the ones you need, and that you don't accidentally open up too much.\r\n        </p>\r\n        <p>\r\n          The examples below use real values to make it easier to get started.\r\n          The values used are the current content-type <code>{{ data.contentType.Name }}</code>,\r\n          the current Module ID <code>{{ data.moduleId }}</code>\r\n          and the folder of the current App folder <code>{{ data.folder }}</code> (where needed).\r\n          The code also looked up an item of this type and will use it's ID <code>{{ data.itemId }}</code> in the\r\n          examples.\r\n        </p>\r\n\r\n        <ng-container *ngTemplateOutlet=\"restUrls\"></ng-container>\r\n      </mat-tab>\r\n\r\n      <!-- Permissions explained -->\r\n      <mat-tab>\r\n        <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"Permissions\">\r\n          <mat-icon>person</mat-icon>\r\n          <span>Permissions ({{ data.permissions.length }})</span>\r\n          <mat-icon *ngIf=\"!data.permissions.length\">warning</mat-icon>\r\n        </div>\r\n        <h3>Permissions ({{ data.permissions.length }})</h3>\r\n        <p>\r\n          This content-type ({{ data.contentType.Name }}) has {{ data.permissions.length }} permissions\r\n          configured.\r\n          <button mat-icon-button matTooltip=\"Open permissions\" (click)=\"openPermissions()\">\r\n            <mat-icon [matBadge]=\"data.permissions.length\" matBadgePosition=\"after\" matBadgeColor=\"accent\"\r\n              matBadgeSize=\"small\" *ngIf=\"data.permissions.length\">\r\n              person\r\n            </mat-icon>\r\n            <mat-icon *ngIf=\"!data.permissions.length\">person</mat-icon>\r\n          </button>\r\n        </p>\r\n        <p *ngIf=\"!data.permissions.length\" class=\"warning info-box\">\r\n          <mat-icon>warning</mat-icon>\r\n          Warning: you don't have any permissions configured. So only Super-Users (Host) will be able to use the API\r\n          endpoints.\r\n        </p>\r\n\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.permissions\" [modules]=\"modules\"\r\n          [gridOptions]=\"gridOptions\" [style.height]=\"(33 + data.permissions.length * 48) + 'px'\">\r\n        </ag-grid-angular>\r\n\r\n        <h4>Super-Users (Host) can use all Endpoints</h4>\r\n        <p>\r\n          As a super-user you can always access these REST endpoints, so this will make development easy.\r\n          Just remember to change the content-type permissions when you publish your work to public pages.\r\n        </p>\r\n\r\n        <h4>Set permissions for visitors to use this</h4>\r\n        <p>\r\n          To let JavaScript access the REST endpoints for normal users, you must set the permissions of the\r\n          content-type.\r\n          Usually you will just want to set it like <em>if user has view-permissions, let him read this\r\n            content-type</em>.\r\n          In rare cases (eg. JS based forms) you may also want to give it some write permissions. Just be careful.\r\n          If you give write permissions, you will usually <em>only</em> want to give create, but not edit.\r\n        </p>\r\n\r\n        <h4>Setting permissions for use outside of DNN</h4>\r\n        <p>\r\n          When calling API endpoints from a DNN page you will usually use the <code>$2sxc</code> or the DNN\r\n          Services-Framework.\r\n          These automatically add some HTTP-Headers (see tab about HTTP Headers) which let DNN determine that the\r\n          API-Call\r\n          was made on a specific page/module - and DNN uses this to check the permissions.\r\n        </p>\r\n        <p>\r\n          IF you are calling the endpoint from outside of DNN then these headers will be missing.\r\n          Because of this, permissions saying \"If has VIEW permissions, allow read\" will fail - because DNN cannot\r\n          determine\r\n          if the user has view permissions.\r\n        </p>\r\n        <p>\r\n          So to enable use from external, the condition must be \"If has ANONYMOUS permissions, allow ...\".\r\n          Because the ANONYMOUS check passes even if DNN doesn't know what page the module is on.\r\n        </p>\r\n      </mat-tab>\r\n\r\n      <!-- HTTP Headers Explained -->\r\n      <mat-tab>\r\n        <div *matTabLabel class=\"mat-tab-label-box\" matTooltip=\"HTTP headers and auto\">\r\n          <mat-icon>perm_device_information</mat-icon>\r\n          <span>HTTP headers and &nbsp;<code>auto</code></span>\r\n        </div>\r\n        <h3>Background</h3>\r\n        <p>\r\n          It's important that you know that DNN includes special headers in HTTP requests.\r\n          This is to include context, so it can find what page/module you were on.\r\n          The platform needs this because it usually needs to know things like:\r\n        </p>\r\n        <ul>\r\n          <li>What website / language am I on</li>\r\n          <li>\r\n            What module am I on, and what App is being shown (this is used to resolve the <code>/auto/</code> in the\r\n            path\r\n          </li>\r\n          <li>Does the user have VIEW / EDIT / etc. permissions</li>\r\n        </ul>\r\n        <p>\r\n\r\n        </p>\r\n        <h3>Common Headers when using the API from JS on a DNN Page</h3>\r\n        <p>\r\n          These are the context-headers which are needed in DNN by default:\r\n        </p>\r\n        <ol>\r\n          <li><code>TabId</code>: this is the page id, a number</li>\r\n          <li><code>ModuleId</code>: this is the module id, a number</li>\r\n          <li>\r\n            <code>RequestVerificationToken</code>: this is a crypto key to prove that the request originated from the\r\n            same site. It's only included in POST/PUT/DELETE but not GET requests.\r\n          </li>\r\n        </ol>\r\n        <p>\r\n          These are the headers which 2sxc sometimes adds:\r\n        </p>\r\n        <ol>\r\n          <li><code>ContentBlockId</code>: the unit of content we're editing/changing or</li>\r\n          <li>\r\n            <code>PageId</code>: we're trying to use this new header instead of TabId, which is just an odd name.\r\n            Still WIP\r\n          </li>\r\n        </ol>\r\n        <h3>Usually this happens automatically</h3>\r\n        <p>\r\n          When you use an helper object of 2sxc (like <code>$2sxc</code> or <code>dnn-sxc-angular</code>).\r\n        </p>\r\n        <h3>Common headers when accessing from external (another website / mobile)</h3>\r\n        <p>\r\n          When using an API from another system, there are <em>no additional headers</em>.\r\n          So the request doesn't have a <em>context</em>, which has the following consequences:\r\n        </p>\r\n        <ul>\r\n          <li>\r\n            App auto-detection con't work, so you have to replace <code>/auto/</code> in the path with <code>/{{ data.folder }}/</code>\r\n          </li>\r\n          <li>\r\n            DNN can't check if a user has VIEW or other permissions,\r\n            which is why you either have to use a user-ID or group-ID, or allow <em>Anonymous</em>\r\n          </li>\r\n        </ul>\r\n    </mat-tab>\r\n    </mat-tab-group>\r\n  </ng-template>\r\n\r\n\r\n\r\n  <!-- REST Tab showing the urls and code snippets -->\r\n  <ng-template #restUrls>\r\n    <mat-accordion multi class=\"rest-urls-accordion\">\r\n      <mat-expansion-panel *ngFor=\"let apiCall of data.apiCalls\">\r\n        <mat-expansion-panel-header>\r\n          <mat-panel-title>\r\n            <div class=\"rest-urls-title\">\r\n              <code>{{ apiCall.verb }}</code>: <code>{{ apiCall.url }}</code>\r\n              <span>&nbsp;to {{ apiCall.teaser }}</span>\r\n            </div>\r\n          </mat-panel-title>\r\n        </mat-expansion-panel-header>\r\n        <mat-panel-description style=\"display: block;\">\r\n          <h4>{{ apiCall.instructions }}</h4>\r\n          <p>\r\n            HTTP Verb: <code>{{ apiCall.verb }}</code> <br>\r\n            {{ data.scenario.useVirtual ? 'Virtual' : 'Absolute' }} Url: <code>{{ apiCall.url }}</code>\r\n          </p>\r\n          <p *ngIf=\"apiCall.enableButton\">\r\n            <button mat-raised-button (click)=\"callApiGet(apiCall.url)\">Call and Output to Console</button>\r\n            <a *ngIf=\"!data.scenario.useVirtual && apiCall.browseUrl\" [href]=\"apiCall.browseUrl\" target=\"_blank\">\r\n              Open in Browser\r\n            </a>\r\n          </p>\r\n\r\n          <ng-container *ngFor=\"let code of apiCall.code\">\r\n            <h4>{{ code.title }}</h4>\r\n            <p>{{ code.description }}</p>\r\n            <div class=\"code-example\">\r\n              <pre class=\"code-example__text\">{{ code.code }}</pre>\r\n              <button mat-icon-button class=\"code-example__copy\" matTooltip=\"Copy to clipboard\"\r\n                (click)=\"copyCode(code.code)\">\r\n                <mat-icon>copy</mat-icon>\r\n              </button>\r\n            </div>\r\n            <p *ngFor=\"let hint of code.hints\" class=\"icon-box {{ hint.type }}\">\r\n              <mat-icon>{{ hint.icon }}</mat-icon>\r\n              <span [innerHtml]=\"hint.message\"></span>\r\n            </p>\r\n          </ng-container>\r\n\r\n        </mat-panel-description>\r\n      </mat-expansion-panel>\r\n    </mat-accordion>\r\n  </ng-template>\r\n\r\n\r\n</ng-container>\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { AllCommunityModules, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { EntityService } from 'projects/edit';\r\nimport { EntityInfo } from 'projects/edit/shared/models/eav/entity-info';\r\nimport { BehaviorSubject, combineLatest, Observable, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { AllScenarios, generateApiCalls, Scenario } from '.';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { DialogSettings } from '../app-administration/models/dialog-settings.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { Permission } from '../permissions/models/permission.model';\r\nimport { PermissionsService } from '../permissions/services/permissions.service';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { copyToClipboard } from '../shared/helpers/copy-to-clipboard.helper';\r\nimport { Context } from '../shared/services/context';\r\nimport { DevRestTemplateVars } from './dev-rest.models';\r\n\r\nconst pathToContent = 'app/{appname}/content/{typename}';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest',\r\n  templateUrl: './dev-rest.component.html',\r\n  styleUrls: ['./dev-rest.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  // we need preserve whitespace, as many conditional parts are put together, and then spaces are missing between them\r\n  preserveWhitespaces: true,\r\n})\r\nexport class DevRestComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  /** AgGrid modules */\r\n  modules = AllCommunityModules;\r\n  /** AgGrid options */\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    columnDefs: [\r\n      { headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'no-padding no-outline' },\r\n      { headerName: 'Name', field: 'Title', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Identity', field: 'Identity', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Condition', field: 'Condition', flex: 2, minWidth: 250, cellClass: 'no-outline' },\r\n      { headerName: 'Grant', field: 'Grant', width: 70, headerClass: 'dense', cellClass: 'no-outline' },\r\n    ],\r\n  };\r\n\r\n  /** List of scenarios */\r\n  scenarios = AllScenarios;\r\n\r\n  templateVars$: Observable<DevRestTemplateVars>;\r\n\r\n  private targetType = eavConstants.metadata.entity.type;\r\n  private keyType = eavConstants.keyTypes.guid;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  /** Content Type to show REST infos about */\r\n  private contentType$: BehaviorSubject<ContentType>;\r\n\r\n  /** App, language, etc. */\r\n  private dialogSettings$: BehaviorSubject<DialogSettings>;\r\n\r\n  private permissions$ = new Subject<Permission[]>(); //: BehaviorSubject<Permission[]>;\r\n\r\n  /** Currently selected scenario */\r\n  private scenario$: BehaviorSubject<Scenario>;\r\n\r\n  private modeInternal$: Observable<boolean>;\r\n\r\n  private itemOfThisType$: Observable<EntityInfo>;\r\n\r\n  /** The root path for the current request */\r\n  private root$: Observable<string>;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<DevRestComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private http: HttpClient,\r\n    private contentTypesService: ContentTypesService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private permissionsService: PermissionsService,\r\n    entityService: EntityService,\r\n    /** Context for this dialog. Used for appId, zoneId, tabId, etc. */\r\n    context: Context,\r\n    /** dnn-sxc-angular context. Used to resolve urls */\r\n    dnnContext: DnnContext,\r\n  ) {\r\n    this.contentType$ = new BehaviorSubject<ContentType>(null);\r\n    this.dialogSettings$ = new BehaviorSubject<DialogSettings>(null);\r\n    // this.permissions$ = new BehaviorSubject<Permission[]>(null);\r\n    this.scenario$ = new BehaviorSubject<Scenario>(this.scenarios[0]);\r\n    this.modeInternal$ = this.scenario$.pipe(map(scenario => scenario.key === 'internal'));\r\n\r\n    this.root$ = combineLatest([this.contentType$, this.scenario$, this.dialogSettings$]).pipe(\r\n      map(([contentType, scenario, dialogSettings]) => {\r\n        if (contentType == null || dialogSettings == null) { return ''; }\r\n\r\n        // const internal = scenario === AllScenarios[0];\r\n        const resolved = pathToContent\r\n          .replace('{typename}', contentType.Name)\r\n          .replace('{appname}', scenario.inSameContext ? 'auto' : encodeURI(dialogSettings.Context.App.Folder));\r\n        const domainPrefix = document.location.protocol + '//' + document.location.host;\r\n        return scenario.useVirtual\r\n          ? resolved\r\n          : (scenario.inSameSite ? '' : domainPrefix) + dnnContext.$2sxc.http.apiUrl(resolved);\r\n      }),\r\n    );\r\n\r\n    // Get an item of this type for building urls\r\n    this.itemOfThisType$ = entityService.reactiveEntities(\r\n      this.contentType$.pipe(filter(ct => !!ct), map(ct => ({ contentTypeName: ct.StaticName, filter: '' })))\r\n    ).pipe(map(list => list.length ? list[0] : null), filter(i => !!i));\r\n\r\n    // we need to mix 2 combineLatest, because a combineLatest can only take 6 streams\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.contentType$, this.scenario$, this.modeInternal$]),\r\n      combineLatest([this.root$, this.itemOfThisType$, this.dialogSettings$.pipe(filter(d => !!d))]),\r\n      combineLatest([this.permissions$]),\r\n    ]).pipe(\r\n      map(([[contentType, scenario, modeInternal], [root, item, diag], [permissions]]) => ({\r\n        contentType,\r\n        currentScenario: scenario,\r\n        modeInternal,\r\n        root,\r\n        itemId: item.Id,\r\n        itemGuid: item.Value,\r\n        apiCalls: generateApiCalls(dnnContext.$2sxc, scenario, context.moduleId, root, item.Id),\r\n        folder: encodeURI(diag.Context.App.Folder),\r\n        moduleId: context.moduleId,\r\n        scenario,\r\n        permissions,\r\n        permissionsHasAnonymous: permissions.filter(p => p.Condition.indexOf('.Anonymous') > 0).length > 0,\r\n      })),\r\n    );\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchData();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.dialogSettings$.complete();\r\n    this.permissions$.complete();\r\n    this.scenario$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  changeScenario(scenario: Scenario) {\r\n    this.scenario$.next(scenario);\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  callApiGet(url: string) {\r\n    this.http.get<any>(url).subscribe(res => {\r\n      console.log(`Called ${url} and got this:`, res);\r\n      this.openSnackBar(`Called ${url}. You can see the full result in the F12 console`, 'API call returned');\r\n    });\r\n    this.openSnackBar(`Calling ${url}. You can see the full result in the F12 console`, 'API call sent');\r\n  }\r\n\r\n  openPermissions() {\r\n    this.router.navigate([`permissions/${this.targetType}/${this.keyType}/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  copyCode(text: string) {\r\n    copyToClipboard(text);\r\n    this.openSnackBar('Copied to clipboard');\r\n  }\r\n\r\n  private fetchData() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n    this.appDialogConfigService.getDialogSettings().subscribe(dialogSettings => {\r\n      this.dialogSettings$.next(dialogSettings);\r\n    });\r\n    this.permissionsService.getAll(this.targetType, this.keyType, this.contentTypeStaticName).subscribe(permissions => {\r\n      this.permissions$.next(permissions);\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchData();\r\n      })\r\n    );\r\n  }\r\n\r\n  private openSnackBar(message: string, action?: string) {\r\n    this.snackBar.open(message, action, {\r\n      duration: 2000,\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}