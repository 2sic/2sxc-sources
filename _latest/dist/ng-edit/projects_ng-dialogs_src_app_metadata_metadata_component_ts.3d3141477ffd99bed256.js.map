{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/app-administration/services/web-apis.service.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/ng-dialogs/src/app/metadata/metadata.component.html","./projects/ng-dialogs/src/app/metadata/metadata.component.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts"],"names":["http","context","dnnContext","getDialogSettings","appId","this","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","AppDialogConfigService","getContentInfo","scope","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppPartsService","getAppInfo","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ExportAppService","webApiAppPartsRoot","importAppParts","file","formData","FormData","append","post","resetApp","ImportAppPartsService","webApiQueryRun","webApiQueryRoot","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","getAll","contentType","importQuery","pipe","fileBase64","AppId","ContentBase64","clonePipeline","id","Id","delete","PipelinesService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ViewsService","global","path","mask","withSubfolders","paths","map","splitIndex","lastIndexOf","fileExtIndex","folder","substring","name","create","purpose","details","apiPath","WebApisService","webApiAppRoot","importApp","changedName","ImportAppService","agInit","refresh","deleteMetadata","onDelete","data","MetadataActionsComponent","dialogRef","contentTypesService","hostClass","dropdownInsertValue","guidedContentType","ngOnInit","contentTypes$","BehaviorSubject","scopeOptions$","buildForm","fetchScopes","templateVars$","combineLatest","contentTypes","scopeOptions","ngOnDestroy","complete","closeDialog","close","toggleGuidedContentType","confirm","formValues","form","getRawValue","defaultScope","addControl","controls","valueChanges","startWith","value","distinctUntilChanged","subscribe","newScope","patchValue","prompt","some","option","next","fetchContentTypes","retrieveContentTypes","getScopes","scopes","MetadataSaveDialogComponent","Number","Guid","String","Target","router","route","metadataService","snackBar","entitiesService","contentItemsService","dialog","viewContainerRef","changeDetectorRef","metadata$","modules","gridOptions","frameworkComponents","idFieldComponent","metadataActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","filter","cellRendererParams","tooltipGetter","paramsData","flex","minWidth","sort","onCellClicked","editMetadata","bind","pinned","subscription","Subscription","targetType","parseInt","snapshot","paramMap","keyType","key","title","decodeURIComponent","contentTypeStaticName","fetchFor","fetchMetadata","refreshOnChildClosed","unsubscribe","createMetadata","autoFocus","afterClosed","items","ContentTypeName","For","Object","values","find","type","target","formUrl","navigate","relativeTo","markForCheck","item","i","for","getMetadata","metadata","EntityId","Title","_Type","duration","error","add","events","event","firstChild","pairwise","MetadataComponent","onClick","stopPropagation","ClickStopPropagationDirective"],"mappings":"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","file":"projects_ng-dialogs_src_app_metadata_metadata_component_ts.3d3141477ffd99bed256.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFileCreate, webApiAppFilesAll, webApiExplorer } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\nimport { WebApi, WebApiDetails } from '../models';\r\n\r\n@Injectable()\r\nexport class WebApisService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: 'false', path: '', mask: '*Controller.cs', withSubfolders: 'true' },\r\n    }).pipe(\r\n      map(paths => {\r\n        const webApis: WebApi[] = paths.map(path => {\r\n          const splitIndex = path.lastIndexOf('/');\r\n          const fileExtIndex = path.lastIndexOf('.');\r\n          const folder = path.substring(0, splitIndex);\r\n          const name = path.substring(splitIndex + 1, fileExtIndex);\r\n          const webApi: WebApi = { path, folder, name };\r\n          return webApi;\r\n        });\r\n        return webApis;\r\n      }),\r\n    );\r\n  }\r\n\r\n  create(name: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), purpose: 'api', global: 'false', path: `api/${name}` },\r\n    });\r\n  }\r\n\r\n  details(apiPath: string) {\r\n    return this.http.get<WebApiDetails>(this.dnnContext.$2sxc.http.apiUrl(webApiExplorer), {\r\n      params: { path: apiPath },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Metadata } from '../../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: MetadataActionsParams;\r\n\r\n  agInit(params: MetadataActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata() {\r\n    const metadata: Metadata = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Select option\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Insert value\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogTemplateVars, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  templateVars$: Observable<MetadataSaveDialogTemplateVars>;\r\n  guidedContentType = true;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.templateVars$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const templateVars: MetadataSaveDialogTemplateVars = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    const defaultScope = eavConstants.scopes.default.value;\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(defaultScope));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || defaultScope;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ title || 'Metadata' }}</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    <ng-container *ngIf=\"!for\">This item is not metadata for anything else.</ng-container>\r\n    <ng-container *ngIf=\"for\">\r\n      This item is metadata for:\r\n      <br>Target: {{ for.Target }}\r\n      <ng-container *ngIf=\"for.Number\"><br>Number: {{ for.Number }}</ng-container>\r\n      <ng-container *ngIf=\"for.Guid\"><br>Guid: {{ for.Guid }}</ng-container>\r\n      <ng-container *ngIf=\"for.String\"><br>String: {{ for.String }}</ng-container>\r\n    </ng-container>\r\n  </p>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"metadata$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new metadata for this item\"\r\n      (click)=\"createMetadata()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { ContentItemFor } from '../content-items/models/content-item.model';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { MetadataActionsComponent } from './ag-grid-components/metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './ag-grid-components/metadata-actions/metadata-actions.models';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { Metadata } from './models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent implements OnInit, OnDestroy {\r\n  metadata$ = new BehaviorSubject<Metadata[]>(null);\r\n  for?: ContentItemFor;\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      metadataActionsComponent: MetadataActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agTextColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (paramsData: Metadata) => `ID: ${paramsData.Id}\\nGUID: ${paramsData.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Title', field: 'Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: this.editMetadata.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Content Type', field: '_Type.Name', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        width: 40, cellClass: 'secondary-action no-padding', cellRenderer: 'metadataActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: this.deleteMetadata.bind(this),\r\n        } as MetadataActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('type'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: contentType,\r\n          For: {\r\n            Target:\r\n              Object.values(eavConstants.metadata).find(option => option.type === this.targetType)?.target ?? this.targetType.toString(),\r\n            ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n            ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n            ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      this.for = item?.For;\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata<Metadata[]>(this.targetType, this.keyType, this.key).subscribe(metadata => {\r\n      this.metadata$.next(metadata);\r\n    });\r\n  }\r\n\r\n  private editMetadata(params: CellClickedEvent) {\r\n    const metadata: Metadata = params.data;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: Metadata) {\r\n    if (!confirm(`Delete '${metadata.Title}' (${metadata.Id})?`)) { return; }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchMetadata();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}