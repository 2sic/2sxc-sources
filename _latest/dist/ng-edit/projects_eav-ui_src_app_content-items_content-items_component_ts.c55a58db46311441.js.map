{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.c55a58db46311441.js","mappings":"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","names":["EntityFilterComponent","constructor","this","filter","idFilterString","idFilter","agInit","params","filterParams","isFilterActive","length","doesFilterPass","values","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","join","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","static","t","core","In1","selectors","viewQuery","rf","ctx","i0","$event","_r3","ctx_r2","deleteItem","ctx_r1","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","clone","onClone","export","onExport","onDelete","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","_r0","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","openMetadata","_c0","metadataCount","metadata","metadataTooltip","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","onOpenMetadata","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r22","targetType","label","vm_r1","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","targetTypeOptions","unknownTargetType","targetTypeHint","option_r30","contentType_r36","StaticName","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r43","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","ctx_r11","dropdownInsertValue","item_r55","Guid","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r65","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","_r15","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_contFlowTmp","ctx_r12","entity","contentType","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","ctx_r13","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","ctx_r14","_r81","ctx_r80","toggleGuidedKey","ctx_r82","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","_r85","ctx_r84","toggleGuidedMode","ctx_r86","closeDialog","ctx_r87","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseSubsinkComponent","dialogRef","contentItemsService","contentTypesService","super","hostClass","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscription","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","contentTypeStaticName","getAll","formValues$","GeneralHelpers","objectsEqual","combineLatest","foundTargetType","find","arraysEqual","updatedForm","isAppMetadata","app","appId","keys","disableControl","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","scope","retrieveContentTypes","getScopes","i1","i2","i3","i4","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","CreateMetadataDialogComponent_contFlowTmp","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","_r6","ctx_r5","debugFilter","_r8","ctx_r7","ContentItemsComponent_Conditional_0_Conditional_9_Template","ctx_r9","onGridReady","ctx_r10","filesDropped","exportContent","importContent","importItem","createMetadata","ContentItemsComponent_Conditional_0_Conditional_34_Template","ctx_r15","editItem","Name","ContentItemsComponent_Conditional_0_contFlowTmp","Properties","ListInstructions","gridOptions","debugEnabled","ContentItemsComponent","BaseComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","contentType$","Subject","items$","undefined","defaultGridOptions","gridApi$","snapshot","paramMap","get","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosedShallow","getDebugEnabled$","retrieveContentType","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","tryParse","v","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogDev","setFilterModel","url","GoToMetadata","getUrlEntity","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","rowNode","push","files","importFile","lastIndexOf","toLocaleLowerCase","state","open","autoFocus","width","afterClosed","itemFor","Number","string","String","markForCheck","warn","duration","headerClass","sortable","cellClass","ReadOnly","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","_RepositoryId","flex","minWidth","onCellClicked","headerTooltip","_Used","_Uses","pinned","delete","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","DuplicateEntity","exportEntity","err","dismiss","ExceptionMessage","rawValue","i5","i6","i7","i8","features","ContentItemsComponent_Conditional_0_Template","ContentItemsComponent_contFlowTmp","ClickStopPropagationDirective","onClick","stopPropagation","_angular_core__WEBPACK_IMPORTED_MODULE_0__","Sc5","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","window","getSelection","removeAllRanges","_angular_core__WEBPACK_IMPORTED_MODULE_1__"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/constants/guid.constants.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts"],"sourcesContent":["import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\" eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"deleteItem()\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ICellRendererParams & ContentItemsActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsParams): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone(): void {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export(): void {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem(): void {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n    <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n      (click)=\"openMetadata()\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\" matBadgePosition=\"below after\" aria-hidden=\"false\">{{ value.metadata ? 'loyalty'\r\n        : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ICellRendererParams & ContentItemsStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusParams): void {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata(): void {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item,\r\n        see <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint\r\n            [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're\r\n            doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a whole number\r\n          </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n            >\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\"\r\n              [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (vm.guidedMode && (vm.formValues.targetType === eavConstants.metadata.entity.targetType || vm.formValues.targetType === eavConstants.metadata.contentType.targetType)) {\r\n          <mat-form-field color=\"accent\" class=\"eav-form-field\"\r\n            >\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\"\r\n              [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" class=\"eav-form-field\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required\r\n                    [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\">\r\n                        {{ item.Title }} ({{ item.Id }})\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                }\r\n                @if (!vm.guidedKey) {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required>\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required\r\n                    [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.StaticName\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                }\r\n                @if (!vm.guidedKey) {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required>\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\"\r\n                formControlName=\"key\" required>\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\"\r\n                formControlName=\"key\" required>\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\"\r\n                formControlName=\"key\" required>\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\"\r\n                formControlName=\"key\" required>\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': vm.guidedKey }\" tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\">\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button mat-icon-button class=\"eav-selection-suffix-button\" type=\"button\" [ngClass]=\"{ 'active': !vm.guidedKey }\" tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\">\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\">\r\n            This field is required\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a whole number\r\n          </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint\r\n            [isError]=\"true\">\r\n            Must be a valid GUID\r\n          </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"vm.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"vm.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n          Confirm\r\n        </button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith, Subscription } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { GeneralHelpers } from '../../edit/shared/helpers';\r\nimport { BaseSubsinkComponent } from '../../shared/components/base-subsink-component/base-subsink.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseSubsinkComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","@if (viewModel$ | async; as vm) {\r\n  <div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">\r\n        {{ vm.contentType.Label || vm.contentType.Name }} Data\r\n      </div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n    <div class=\"eav-dialog-content nav-component-wrapper\">\r\n      <router-outlet></router-outlet>\r\n      @if (vm.contentType?.Properties?.ListInstructions; as listInstructions) {\r\n        <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n      }\r\n      <div class=\"grid-wrapper\">\r\n        <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.items\" [gridOptions]=\"gridOptions\"\r\n          (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n          (filesDropped)=\"filesDropped($event)\">\r\n        </ag-grid-angular>\r\n      </div>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <div class=\"eav-dialog-actions-div\">\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" (click)=\"importContent()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Data</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" (click)=\"importItem()\">\r\n          <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n          <span>Item</span>\r\n        </button>\r\n        <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n          <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n          <span>Create Metadata</span>\r\n        </button>\r\n        @if (vm.debugEnabled) {\r\n          <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Print filter to console\" (click)=\"debugFilter()\">\r\n            <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n            <span>Filter</span>\r\n          </button>\r\n        }\r\n      </div>\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, map, Observable, pairwise, startWith, Subject, Subscription, take } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GlobalConfigService } from '../edit/shared/store/ngrx-data';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BaseComponent } from '../shared/components/base-component/base.component';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogDev } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './content-items-status/content-items-status.models';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  contentType$ = new Subject<ContentType>();\r\n  items$ = new BehaviorSubject<ContentItem[]>(undefined);\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  viewModel$: Observable<ContentItemsViewModel>;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { \r\n    super(router, route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.subscription.add(this.refreshOnChildClosedShallow().subscribe(() => { this.fetchItems(); }));\r\n\r\n    this.viewModel$ = combineLatest([\r\n      this.contentType$, this.items$, this.globalConfigService.getDebugEnabled$()\r\n    ]).pipe(\r\n      map(([contentType, items, debugEnabled]) => ({ contentType, items, debugEnabled }))\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogDev('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        const contentItem: ContentItem = rowNode.data;\r\n        ids.push(contentItem.Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID',\r\n        field: 'Id',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        sortable: true,\r\n        filter: 'agNumberColumnFilter',\r\n        cellClass: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return `id-action no-padding no-outline ${contentItem._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem.Id;\r\n        },\r\n        cellRenderer: IdFieldComponent,\r\n        cellRendererParams: (() => {\r\n          const params: IdFieldParams<ContentItem> = {\r\n            tooltipGetter: (item) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsStatusParams = {\r\n            onOpenMetadata: (item) => this.openMetadata(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'primary-action highlight'.split(' '),\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        onCellClicked: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          this.editItem(contentItem);\r\n        },\r\n        valueGetter: (params) => {\r\n          const contentItem: ContentItem = params.data;\r\n          return contentItem._Title;\r\n        },\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (params) => {\r\n          const item: ContentItem = params.data;\r\n          return `${item._Used} / ${item._Uses}`;\r\n        },\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        width: 122,\r\n        pinned: 'right',\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            onClone: (item) => this.clone(item),\r\n            onExport: (item) => this.export(item),\r\n            onDelete: (item) => this.delete(item),\r\n          };\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n\r\ninterface ContentItemsViewModel {\r\n  contentType: ContentType;\r\n  items: ContentItem[];\r\n  debugEnabled: boolean;\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { GeneralHelpers } from '../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}