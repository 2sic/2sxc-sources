{"version":3,"file":"projects_eav-ui_src_app_edit_routing_edit-reload_component_ts-projects_eav-ui_src_app_shared_-16a4bf.e5aaa39cca0d8f44.js","mappings":"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","names":["EditReloadComponent","constructor","router","route","this","log","classLog","l","fn","p","snapshot","params","url","UrlHelpers","newUrlIfCurrentContainsOldUrl","items","rNull","navigate","r","static","__ngFactoryType__","i0","i1","_angular_core__WEBPACK_IMPORTED_MODULE_2__","VBU","selectors","decls","vars","template","rf","ctx","encapsulation","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","_angular_core__WEBPACK_IMPORTED_MODULE_1__","jDH","factory","…µfac","ErrorStateMatcher","isErrorState","control","form","invalid","touched","submitted","token","providedIn","MatFormFieldModule","type","imports","MatCommonModule","ObserversModule","MatFormField","logSpecs","all","getAvailableEntities","getEntities","QueryService","http","context","getFromQuery","queryUrl","fields","entitiesFilter","fnIf","hasParams","urlParams","toLocaleLowerCase","includes","appId","substring","post","Guids","contentTypes","itemIds","join","i2","_ErrorStateTracker","_defaultMatcher","ngControl","_parentFormGroup","_parentForm","_stateChanges","errorState","matcher","updateErrorState","oldState","parent","newState","next"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/routing/edit-reload.component.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/material/fesm2022/error-options-DCNQlTOA.mjs","./node_modules/@angular/material/fesm2022/module-DzZHEh7B.mjs","./projects/eav-ui/src/app/shared/services/query.service.ts","./node_modules/@angular/material/fesm2022/error-state-Dtb1IHM-.mjs"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { classLog } from '../../shared/logging';\r\nimport { UrlHelpers } from '../shared/helpers';\r\nimport { EditUrlParams } from './edit-url-params.model';\r\n\r\n/**\r\n * The purpose of this component is to refresh the edit dialog completely.\r\n * It works as follows:\r\n * 1. A close event of the child which requests a full refresh (probably just the history?)\r\n *    will cause the router to replace the Path to a url going to this control. This flushes the previous edit.\r\n * 2. This component will then navigate to the original edit dialog, restoring the original parameters. \r\n * \r\n * TODO: not sure if this is the best way to do this...\r\n */\r\n@Component({\r\n  selector: 'app-edit-reload',\r\n  template: '',\r\n})\r\nexport class EditReloadComponent {\r\n\r\n  log = classLog({EditReloadComponent});\r\n\r\n  constructor(router: Router, route: ActivatedRoute) {\r\n    const l = this.log.fn('constructor', null, 'üîÑÔ∏è');\r\n    const p = route.snapshot.params as EditUrlParams;\r\n    const url = UrlHelpers.newUrlIfCurrentContainsOldUrl(route, `edit/refresh/${p.items}`, `edit/${p.items}`);\r\n    if (!url) return l.rNull('No URL to navigate to');\r\n    router.navigate([url]);\r\n    l.r('‚úÖ refresh complete');\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\n\n/** Error state matcher that matches when a control is invalid and dirty. */\nclass ShowOnDirtyErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.dirty || (form && form.submitted)));\n    }\n    static …µfac = i0.…µ…µngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, deps: [], target: i0.…µ…µFactoryTarget.Injectable });\n    static …µprov = i0.…µ…µngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher });\n}\ni0.…µ…µngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ShowOnDirtyErrorStateMatcher, decorators: [{\n            type: Injectable\n        }] });\n/** Provider that defines how form controls behave with regards to displaying error messages. */\nclass ErrorStateMatcher {\n    isErrorState(control, form) {\n        return !!(control && control.invalid && (control.touched || (form && form.submitted)));\n    }\n    static …µfac = i0.…µ…µngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, deps: [], target: i0.…µ…µFactoryTarget.Injectable });\n    static …µprov = i0.…µ…µngDeclareInjectable({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, providedIn: 'root' });\n}\ni0.…µ…µngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: ErrorStateMatcher, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\n\nexport { ErrorStateMatcher as E, ShowOnDirtyErrorStateMatcher as S };\n","import { ObserversModule } from '@angular/cdk/observers';\nimport * as i0 from '@angular/core';\nimport { NgModule } from '@angular/core';\nimport { j as MatFormField, M as MatLabel, b as MatError, c as MatHint, e as MatPrefix, g as MatSuffix } from './form-field-C9DZXojn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\n\nclass MatFormFieldModule {\n    static …µfac = i0.…µ…µngDeclareFactory({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, deps: [], target: i0.…µ…µFactoryTarget.NgModule });\n    static …µmod = i0.…µ…µngDeclareNgModule({ minVersion: \"14.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField,\n            MatLabel,\n            MatError,\n            MatHint,\n            MatPrefix,\n            MatSuffix], exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule] });\n    static …µinj = i0.…µ…µngDeclareInjector({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, imports: [MatCommonModule,\n            ObserversModule,\n            MatFormField, MatCommonModule] });\n}\ni0.…µ…µngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"20.0.0\", ngImport: i0, type: MatFormFieldModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        MatCommonModule,\n                        ObserversModule,\n                        MatFormField,\n                        MatLabel,\n                        MatError,\n                        MatHint,\n                        MatPrefix,\n                        MatSuffix,\n                    ],\n                    exports: [MatFormField, MatLabel, MatHint, MatError, MatPrefix, MatSuffix, MatCommonModule],\n                }]\n        }] });\n\nexport { MatFormFieldModule as M };\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","/**\n * Class that tracks the error state of a component.\n * @docs-private\n */\nclass _ErrorStateTracker {\n    _defaultMatcher;\n    ngControl;\n    _parentFormGroup;\n    _parentForm;\n    _stateChanges;\n    /** Whether the tracker is currently in an error state. */\n    errorState = false;\n    /** User-defined matcher for the error state. */\n    matcher;\n    constructor(_defaultMatcher, ngControl, _parentFormGroup, _parentForm, _stateChanges) {\n        this._defaultMatcher = _defaultMatcher;\n        this.ngControl = ngControl;\n        this._parentFormGroup = _parentFormGroup;\n        this._parentForm = _parentForm;\n        this._stateChanges = _stateChanges;\n    }\n    /** Updates the error state based on the provided error state matcher. */\n    updateErrorState() {\n        const oldState = this.errorState;\n        const parent = this._parentFormGroup || this._parentForm;\n        const matcher = this.matcher || this._defaultMatcher;\n        const control = this.ngControl ? this.ngControl.control : null;\n        const newState = matcher?.isErrorState(control, parent) ?? false;\n        if (newState !== oldState) {\n            this.errorState = newState;\n            this._stateChanges.next();\n        }\n    }\n}\n\nexport { _ErrorStateTracker as _ };\n"],"x_google_ignoreList":[2,3,5]}