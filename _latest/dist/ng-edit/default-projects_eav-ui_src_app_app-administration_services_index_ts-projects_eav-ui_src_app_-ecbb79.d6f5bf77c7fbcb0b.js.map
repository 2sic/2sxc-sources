{"version":3,"file":"default-projects_eav-ui_src_app_app-administration_services_index_ts-projects_eav-ui_src_app_-ecbb79.d6f5bf77c7fbcb0b.js","mappings":"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","names":["webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","HttpServiceBase","getAll","contentType","this","http","get","apiUrl","webApiEntityList","params","appId","importQuery","file","from","toBase64","pipe","switchMap","fileBase64","post","AppId","ContentBase64","map","success","Success","Messages","clonePipeline","id","Id","toString","delete","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_6__","jDH","factory","Éµfac","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","import","formData","FormData","append","zoneId","export","url","window","open","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","i0","ctx_r0","data","permissions","length","DevRestTabPermissionsComponent","constructor","#dialogRouter","transient","DialogRoutingService","gridOptions","buildGridOptions","openPermissions","navRelative","GoToPermissions","getUrlContentType","permissionTarget","defaultGridOptions","columnDefs","ColumnDefinitions","TextWide","headerName","field","width","headerClass","cellClass","_angular_core__WEBPACK_IMPORTED_MODULE_5__","VBU","selectors","inputs","standalone","features","decls","vars","consts","template","rf","ctx","DevRestTabPermissionsComponent_Conditional_8_Template","DevRestTabPermissionsComponent_Conditional_9_Template","DevRestTabPermissionsComponent_Conditional_10_Template","name","MatButtonModule","i1","TippyDirective","MatIconModule","i2","MatBadgeModule","i3","SxcGridModule","i4","encapsulation","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","Éµcmp","type","styles","changeDetection","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","Éµdir","hostAttrs","hostVars","hostBindings","hidden","disabled","None","HasDecoratorInputTransform","booleanAttribute","Éµmod","Éµinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/dev-rest/tab-permissions/tab-permissions.component.html","./projects/eav-ui/src/app/dev-rest/tab-permissions/tab-permissions.component.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","<h3>Permissions ({{ data.permissions.length }})</h3>\r\n<p>\r\n  This target <code>{{ data.name }}</code> has {{ data.permissions.length }} permissions\r\n  configured.\r\n  <button mat-icon-button tippy=\"Open permissions\" (click)=\"openPermissions()\">\r\n    @if (data.permissions.length) {\r\n      <mat-icon [matBadge]=\"data.permissions.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    }\r\n    @if (!data.permissions.length) {\r\n      <mat-icon>person</mat-icon>\r\n    }\r\n  </button>\r\n</p>\r\n@if (!data.permissions.length) {\r\n  <p class=\"warning info-box\">\r\n    <mat-icon>warning</mat-icon>\r\n    Warning: you don't have any permissions configured. So only Super-Users (Host) will be able to use the API\r\n    endpoints.\r\n  </p>\r\n}\r\n\r\n<ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.permissions\" [gridOptions]=\"gridOptions\"\r\n  [style.height]=\"(33 + data.permissions.length * 48) + 'px'\">\r\n</ag-grid-angular>\r\n\r\n<h4>Super-Users (Host) can use all Endpoints</h4>\r\n<p>\r\n  As a super-user you can always access these REST endpoints, so this will make development easy.\r\n  Just remember to change the content-type permissions when you publish your work to public pages.\r\n</p>\r\n\r\n<h4>Set permissions for visitors to use this</h4>\r\n<p>\r\n  To let JavaScript access the REST endpoints for normal users, you must set the permissions of the\r\n  content-type.\r\n  Usually you will just want to set it like <em>if user has view-permissions, let him read this\r\n    content-type</em>.\r\n  In rare cases (eg. JS based forms) you may also want to give it some write permissions. Just be careful.\r\n  If you give write permissions, you will usually <em>only</em> want to give create, but not edit.\r\n</p>\r\n\r\n<h4>Setting permissions for use outside of DNN</h4>\r\n<p>\r\n  When calling API endpoints from a DNN page you will usually use the <code>$2sxc</code> or the DNN\r\n  Services-Framework.\r\n  These automatically add some HTTP-Headers (see tab about HTTP Headers) which let DNN determine that the\r\n  API-Call\r\n  was made on a specific page/module - and DNN uses this to check the permissions.\r\n</p>\r\n<p>\r\n  IF you are calling the endpoint from outside of DNN then these headers will be missing.\r\n  Because of this, permissions saying \"If has VIEW permissions, allow read\" will fail - because DNN cannot\r\n  determine\r\n  if the user has view permissions.\r\n</p>\r\n<p>\r\n  So to enable use from external, the condition must be \"If has ANONYMOUS permissions, allow ...\".\r\n  Because the ANONYMOUS check passes even if DNN doesn't know what page the module is on.\r\n</p>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, Input } from '@angular/core';\r\nimport { DevRestBaseViewModel } from '..';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-dev-rest-tab-permissions',\r\n  templateUrl: './tab-permissions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    TippyDirective,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class DevRestTabPermissionsComponent {\r\n  @Input() data: DevRestBaseViewModel;\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  openPermissions() {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlContentType(this.data.permissionTarget)]);\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Title',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Identity',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Condition',\r\n        },\r\n        {\r\n          field: 'Grant',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ÉµÉµFactoryTarget.Component }); }\n    static { this.Éµcmp = i0.ÉµÉµngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ÉµÉµFactoryTarget.Directive }); }\n    static { this.Éµdir = i0.ÉµÉµngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.Éµfac = i0.ÉµÉµngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ÉµÉµFactoryTarget.NgModule }); }\n    static { this.Éµmod = i0.ÉµÉµngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.Éµinj = i0.ÉµÉµngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ÉµÉµngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[5]}