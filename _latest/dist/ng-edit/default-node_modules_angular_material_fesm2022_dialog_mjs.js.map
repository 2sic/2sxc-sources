{"version":3,"file":"default-node_modules_angular_material_fesm2022_dialog_mjs.js","mappings":"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","sources":["./node_modules/@angular/cdk/fesm2022/dialog.mjs","./node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ChangeDetectorRef, Injector, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n        /**\n         * Whether the dialog should close when the underlying overlay is detached. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n         * external detachment can happen as a result of a scroll strategy triggering it or when the\n         * browser location changes.\n         */\n        this.closeOnOverlayDetachments = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        this._platform = inject(Platform);\n        /** The class that traps and manages focus within the dialog. */\n        this._focusTrap = null;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Queue of the IDs of the dialog's label element, based on their definition order. The first\n         * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n         * where there are two or more titles in the DOM at a time and the first one is destroyed while\n         * the rest are present.\n         */\n        this._ariaLabelledByQueue = [];\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        this._injector = inject(Injector);\n        this._isDestroyed = false;\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._document = _document;\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._isDestroyed = true;\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        if (this._isDestroyed) {\n            return;\n        }\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait until after the next render.\n        afterNextRender(() => {\n            const element = this._elementRef.nativeElement;\n            switch (this._config.autoFocus) {\n                case false:\n                case 'dialog':\n                    // Ensure that focus is on the dialog container. It's possible that a different\n                    // component tried to move focus while the open animation was running. See:\n                    // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                    // if the focus isn't inside the dialog already, because it's possible that the consumer\n                    // turned off `autoFocus` in order to move focus themselves.\n                    if (!this._containsFocus()) {\n                        element.focus();\n                    }\n                    break;\n                case true:\n                case 'first-tabbable':\n                    const focusedSuccessfully = this._focusTrap?.focusInitialElement();\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                    break;\n                case 'first-heading':\n                    this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                    break;\n                default:\n                    this._focusByCssSelector(this._config.autoFocus);\n                    break;\n            }\n        }, { injector: this._injector });\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, inject, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport * as i3 from '@angular/cdk/scrolling';\nimport { CdkScrollable } from '@angular/cdk/scrolling';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Number of actions projected in the dialog. */\n        this._actionSectionCount = 0;\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._enterAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._exitAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._enterAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mat-mdc-dialog-inner-container mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mat-mdc-dialog-container{width:100%;height:100%;display:block;box-sizing:border-box;max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;outline:0}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-inner-container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;transition:opacity linear var(--mat-dialog-transition-duration, 0ms);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mdc-dialog--closing .mat-mdc-dialog-inner-container{transition:opacity 75ms linear;transform:none}.mdc-dialog--open .mat-mdc-dialog-inner-container{opacity:1}._mat-animation-noopable .mat-mdc-dialog-inner-container{transition:none}.mat-mdc-dialog-surface{display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;width:100%;height:100%;position:relative;overflow-y:auto;outline:0;transform:scale(0.8);transition:transform var(--mat-dialog-transition-duration, 0ms) cubic-bezier(0, 0, 0.2, 1);max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit;box-shadow:var(--mat-dialog-container-elevation-shadow, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12));border-radius:var(--mdc-dialog-container-shape, var(--mat-app-corner-extra-large, 4px));background-color:var(--mdc-dialog-container-color, var(--mat-app-surface, white))}[dir=rtl] .mat-mdc-dialog-surface{text-align:right}.mdc-dialog--open .mat-mdc-dialog-surface,.mdc-dialog--closing .mat-mdc-dialog-surface{transform:none}._mat-animation-noopable .mat-mdc-dialog-surface{transition:none}.mat-mdc-dialog-surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}.mat-mdc-dialog-title{display:block;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mat-mdc-dialog-title{text-align:right}.mat-mdc-dialog-container .mat-mdc-dialog-title{color:var(--mdc-dialog-subhead-color, var(--mat-app-on-surface, rgba(0, 0, 0, 0.87)));font-family:var(--mdc-dialog-subhead-font, var(--mat-app-headline-small-font, inherit));line-height:var(--mdc-dialog-subhead-line-height, var(--mat-app-headline-small-line-height, 1.5rem));font-size:var(--mdc-dialog-subhead-size, var(--mat-app-headline-small-size, 1rem));font-weight:var(--mdc-dialog-subhead-weight, var(--mat-app-headline-small-weight, 400));letter-spacing:var(--mdc-dialog-subhead-tracking, var(--mat-app-headline-small-tracking, 0.03125em))}.mat-mdc-dialog-content{display:block;flex-grow:1;box-sizing:border-box;margin:0;overflow:auto;max-height:65vh}.mat-mdc-dialog-content>:first-child{margin-top:0}.mat-mdc-dialog-content>:last-child{margin-bottom:0}.mat-mdc-dialog-container .mat-mdc-dialog-content{color:var(--mdc-dialog-supporting-text-color, var(--mat-app-on-surface-variant, rgba(0, 0, 0, 0.6)));font-family:var(--mdc-dialog-supporting-text-font, var(--mat-app-body-medium-font, inherit));line-height:var(--mdc-dialog-supporting-text-line-height, var(--mat-app-body-medium-line-height, 1.5rem));font-size:var(--mdc-dialog-supporting-text-size, var(--mat-app-body-medium-size, 1rem));font-weight:var(--mdc-dialog-supporting-text-weight, var(--mat-app-body-medium-weight, 400));letter-spacing:var(--mdc-dialog-supporting-text-tracking, var(--mat-app-body-medium-tracking, 0.03125em))}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0);padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.cdk-high-contrast-active .mat-mdc-dialog-actions{border-top-color:CanvasText}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}.mat-mdc-dialog-component-host{display:contents}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: i1.FocusMonitor }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = MatDialogState.OPEN;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    constructor(_overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, _defaultOptions, _scrollStrategy, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._dialog = injector.get(Dialog);\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `mat-mdc-dialog-${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }] });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    standalone: true,\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive,\n            args: [{ standalone: true }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    constructor() {\n        super(...arguments);\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, hostDirectives: [{ directive: i3.CdkScrollable }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    standalone: true,\n                    hostDirectives: [CdkScrollable],\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n"],"names":["i1","A11yModule","i1$1","Overlay","OverlayConfig","OverlayRef","OverlayModule","Platform","_getFocusedElementPierceShadowDom","BasePortalOutlet","CdkPortalOutlet","ComponentPortal","TemplatePortal","PortalModule","DOCUMENT","i0","inject","ChangeDetectorRef","Injector","afterNextRender","Component","ViewEncapsulation","ChangeDetectionStrategy","Optional","Inject","ViewChild","InjectionToken","TemplateRef","Injectable","SkipSelf","NgModule","ESCAPE","hasModifierKey","Subject","defer","of","Directionality","startWith","CdkDialogContainer_ng_template_0_Template","rf","ctx","DialogConfig","constructor","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","throwDialogContentAlreadyAttachedError","Error","CdkDialogContainer","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","_platform","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_changeDetectorRef","_injector","_isDestroyed","attachDomPortal","portal","_portalOutlet","hasAttached","ngDevMode","result","_contentAttached","push","_addAriaLabelledBy","id","markForCheck","_removeAriaLabelledBy","index","indexOf","splice","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","focusedSuccessfully","focusInitialElement","_focusDialogContainer","injector","focusConfig","focusTargetElement","activeElement","body","contains","focusVia","destroy","isBrowser","create","backdropClick","subscribe","ɵfac","CdkDialogContainer_Factory","__ngFactoryType__","ɵɵdirectiveInject","ElementRef","FocusTrapFactory","InteractivityChecker","NgZone","FocusMonitor","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CdkDialogContainer_Query","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","hostAttrs","hostVars","hostBindings","CdkDialogContainer_HostBindings","ɵɵattribute","features","ɵɵInheritDefinitionFeature","decls","vars","consts","template","CdkDialogContainer_Template","ɵɵtemplate","dependencies","styles","encapsulation","ɵsetClassMetadata","args","None","changeDetection","Default","standalone","imports","host","undefined","decorators","static","DialogRef","overlayRef","config","closed","keydownEvents","outsidePointerEvents","event","keyCode","preventDefault","close","focusOrigin","_detachSubscription","detachments","containerInstance","closedSubject","unsubscribe","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","providedIn","factory","overlay","scrollStrategies","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","DIALOG_SCROLL_STRATEGY_PROVIDER","provide","deps","useFactory","uniqueId","Dialog","openDialogs","_parentDialog","_openDialogsAtThisLevel","afterOpened","_afterOpenedAtThisLevel","_overlay","_defaultOptions","_overlayContainer","scrollStrategy","_afterAllClosedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","length","_getAfterAllClosed","pipe","_scrollStrategy","open","componentOrTemplateRef","defaults","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","userInjector","viewContainerRef","providers","useValue","containerType","container","containerPortal","parent","componentFactoryResolver","containerRef","attach","instance","_createInjector","context","$implicit","templateContext","contentRef","componentRef","fallbackInjector","get","optional","value","change","emitEvent","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","Dialog_Factory","ɵɵinject","OverlayContainer","ɵprov","ɵɵdefineInjectable","token","items","DialogModule","DialogModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","i2","EventEmitter","ANIMATION_MODULE_TYPE","Directive","Input","coerceNumberProperty","merge","filter","take","i3","CdkScrollable","MatCommonModule","trigger","style","transition","group","animate","query","animateChild","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","OPEN_ANIMATION_DURATION","CLOSE_ANIMATION_DURATION","MatDialogContainer","elementRef","focusTrapFactory","dialogConfig","interactivityChecker","ngZone","_animationMode","focusMonitor","_animationStateChanged","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","enterAnimationDuration","_exitAnimationDuration","exitAnimationDuration","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_openAnimationDone","_finishDialogClose","emit","totalTime","_startOpenAnimation","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","Promise","resolve","then","_startExitAnimation","remove","_updateActionSectionCount","delta","duration","clearTimeout","setTimeout","requestAnimationFrame","ref","location","MatDialogContainer_Factory","MatDialogContainer_HostBindings","ɵɵhostProperty","ɵɵclassProp","MatDialogContainer_Template","ɵɵelementStart","ɵɵelementEnd","time","endsWith","substring","MatDialogState","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_state","OPEN","_closeFallbackTimeout","_result","_closeDialogVia","dialogResult","detachBackdrop","CLOSING","afterClosed","beforeClosed","strategy","left","right","top","bottom","getState","CLOSED","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY","MAT_DIALOG_SCROLL_STRATEGY_PROVIDER","MatDialog","dialogConfigClass","_dialog","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","cdkConfig","_closeDialogs","dialogs","MatDialog_Factory","Location","dialogElementUid","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","currentValue","_onButtonClick","screenX","screenY","MatDialogClose_Factory","ɵdir","ɵɵdefineDirective","MatDialogClose_HostBindings","ɵɵlistener","MatDialogClose_click_HostBindingHandler","$event","inputs","_matDialogClose","exportAs","ɵɵNgOnChangesFeature","MatDialogLayoutSection","_dialogRef","_onAdd","_onRemove","MatDialogLayoutSection_Factory","MatDialogTitle","arguments","ɵMatDialogTitle_BaseFactory","MatDialogTitle_Factory","ɵɵgetInheritedFactory","MatDialogTitle_HostBindings","MatDialogContent","MatDialogContent_Factory","ɵɵHostDirectivesFeature","hostDirectives","MatDialogActions","ɵMatDialogActions_BaseFactory","MatDialogActions_Factory","MatDialogActions_HostBindings","align","DIRECTIVES","MatDialogModule","MatDialogModule_Factory","_defaultParams","params","matDialogAnimations","opacity","transform"],"sourceRoot":"webpack:///","x_google_ignoreList":[0,1]}