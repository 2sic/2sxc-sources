{"version":3,"file":"projects_eav-ui_src_app_shared_services_entity_service_ts-projects_eav-ui_src_app_shared_serv-61805e.159056f4904edd21.js","mappings":"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","names":["logSpecs","all","getAvailableEntities","getEntities","QueryService","constructor","http","context","this","log","classLog","getFromQuery","queryUrl","params","fields","entitiesFilter","fnIf","hasParams","urlParams","toLocaleLowerCase","includes","appId","substring","post","Guids","contentTypes","itemIds","join","i0","i1","i2","factory","Éµfac","ServiceBase","subscriptions","Subscription","ngOnDestroy","destroy","unsubscribe","visualQueryRoutes","path","loadComponent","Promise","__webpack_require__","e","then","bind","m","VisualQueryComponent","children","GoToDevRest","route","EditRoutesNoHistory","delete","webApiEntityRoot","webApiEntityList","EntityService","HttpServiceBase","queryService","transient","getEntities$","pipe","filter","p","switchMap","contentTypeName","shareReplay","map","data","Default","contentType","entityId","force","parentId","parentField","parent","apiUrl","id","toString","__ngFactoryType__"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./projects/eav-ui/src/app/visual-query/visual-query.routing.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n","import { Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { EditRoutesNoHistory } from '../edit/edit.routing';\r\n\r\nexport const visualQueryRoutes: Routes = [\r\n  {\r\n    path: '',\r\n    loadComponent: () => import('./visual-query.component').then(m => m.VisualQueryComponent),\r\n    children: [\r\n      GoToDevRest.route,\r\n      ...EditRoutesNoHistory,\r\n    ]\r\n  },\r\n];\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}