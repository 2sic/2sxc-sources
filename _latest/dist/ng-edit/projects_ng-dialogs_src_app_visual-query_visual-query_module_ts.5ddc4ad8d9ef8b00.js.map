{"version":3,"mappings":"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","names":["QueryDefinitionService","http","context","dnnContext","this","pipelineEntityId","dataSources","get","$2sxc","apiUrl","webApiQueryGet","params","appId","toString","id","pipe","map","pipelineModel","DataSources","length","a","buildDefaultModel","fixPipelineDataSources","s","eavConstants","templateDS","dataSource","find","ds","PartAssemblyAndType","push","Description","EntityGuid","EntityId","undefined","Name","VisualDesignerData","c","u","Pipeline","StreamWiring","pipelineDataSources","some","pipelineDS","outDs","pipelineDataSource","i","_a","d","Top","Left","f","webApiQueryDataSources","ContentType","Difficulty","DynamicIn","DynamicOut","EnableConfig","HelpLink","Icon","In","Out","PrimaryType","TypeNameForUi","UiHint","input","format","globalParts","split","classFullName","classFullNameParts","className","pipeline","post","webApiQuerySave","Id","newPipelineModel","top","webApiQueryRun","source","sourceOut","webApiQueryDebugStream","from","out","l","i0","factory","ctx_r14","QueryResultComponent","dialogData","dialogRef","visualQueryService","pipelineModel$","value","t","Params","_b","filter","el","testParams","r","TestParameters","_c","_d","parameters","concat","timeUsed","result","QueryTimer","Milliseconds","ticksUsed","Ticks","optionsForTop","Query","debugStream","sources","Sources","streams","Streams","close","original","runPipeline","closeDialog","MAT_DIALOG_DATA","selectors","ctx","StreamErrorResultComponent","C","errorData","window","open","VisualQueryService","router","route","queryDefinitionService","titleService","snackBar","dialog","viewContainerRef","zone","metadataService","contentTypesService","changeDetectorRef","BehaviorSubject","Subject","parseInt","snapshot","paramMap","Subscription","complete","dataSources$","putEntityCountOnConnections$","subscription","unsubscribe","fetchDataSources","fetchPipeline","attachKeyboardSave","refreshOnChildClosed","savePipeline","formUrl","convertFormToUrl","items","navigate","relativeTo","refreshPipeline","save","run","showDetails","cloneDeep","visualDesignerData","ShowDataSourceDetails","JSON","stringify","next","pipelineDataSourceGuid","connections","streamsOut","StreamsOut","name","description","position","Object","dataSourceConfigs","forEach","Metadata","entries","metadataItem","attributeName","attributeValue","includes","Array","isArray","g","Title","v","dataSourceConfigs$","contentTypeName","key","getMetadata","subscribe","metadata","Items","refreshDataSourceConfigs","retrieveContentType","contentType","ContentTypeName","For","Target","TargetType","Guid","duration","error","callback","arguments","pipelineResult","showQueryResult","console","warn","setTimeout","stream","Error","showStreamErrorResult","Count","pipelineId","Source","SourceOut","streamResult","sourceName","showSnackBar","setTitle","calculateDataSourceConfigs","autoFocus","backdropClass","closeOnNavigation","data","panelClass","markForCheck","ErrorData","runOutsideAngular","add","fromEvent","firstChild","navigator","platform","match","event","metaKey","ctrlKey","keyCode","preventDefault","events","NavigationEnd","startWith","pairwise","guiTypes","Cache","Filter","Logic","Lookup","Modify","Security","Sort","Unknown","Debug","System","typeInfos","typeInfo","ctx_r13","ctx_r15","ctx_r16","RenameStreamComponent","isSource","buildForm","label","guidedLabel","advancedMode","checked","formValue","form","getRawValue","FormGroup","FormControl","Validators","scope","controls","pipelineResultExists","valueChanges","distinctUntilChanged","labelOptions","values","Scope","patchValue","getScopes","filtered","scopes","o","scopeOptions","dataSrcIdPrefix","Plumber","jsPlumbRoot","onConnectionsChanged","onDragend","onDebugStream","stroke","strokeWidth","outlineStroke","outlineWidth","lineColors","instance","jsPlumb","getInstance","getInstanceDefaults","batch","initDomDataSources","initWirings","bindEvents","repaintEverything","n","reset","unbindContainer","elementId","bulkDelete","selectEndpoints","element","delete","getAllConnections","connection","From","sourceId","replace","endpoints","getOverlay","To","targetId","target","each","endpoint","join","sourceElementId","toUuid","TargetIn","sEndp","getEndpoint","getUuid","setLabel","cssClass","click","overlay","AllowEdit","uuid","uuidColorMap","assign","linePaintDefault","lineCount","maxCols","container","Container","Connector","curviness","PaintStyle","nextLinePaintStyle","HoverPaintStyle","domDataSource","querySelector","draggable","grid","stop","finalPos","addEndpoint","targetEndpointUnlimited","buildTargetEndpoint","maxConnections","makeTarget","makeSource","buildSourceEndpoint","wire","fromUuid","targetElementId","guid","pipeDataSource","connect","uuids","paintStyle","e","message","to","endpointName","isIn","style","isDynamic","getEndpointInfo","endpointInfo","required","model","enabled","fill","radius","anchor","faces","overlays","getEndpointOverlays","endpointOrOverlay","onChangeLabel","isTarget","dropOptions","hoverClass","activeClass","location","width","afterClosed","newLabel","bind","info","targetEndpoint","deleteEndpoint","endpointLabel","labelPrompt","getLabel","getEndpoints","canvas","classList","contains","Math","floor","random","deleteConnection","fireEvent","trimmed","trim","endsWith","substring","ctx_r20","ctx_r27","ctx_r30","PlumbEditorComponent","loadScripts","test","src","scriptLoaded$","plumber","putEntityCountOnConnections","pipelineDesignerData$","GeneralHelpers","templateModel$","combineLatest","pipelineDesignerData","hardReset","detectChanges","calculateTypeInfos","allowEdit","showDataSourceDetails","domDataSourcesLoaded$","domDataSourcesRef","changes","destroy","domRootRef","nativeElement","getStreamsOut","changeConnections","changeDataSourcePosition","saveAndRun","editDataSource","partAssemblyAndType","typeNameFilter","confirm","removeEndpointsOnDataSource","removeDataSource","url","newName","renameDataSource","newDescription","changeDataSourceDescription","ctx_r22","ctx_r24","ctx_r25","ctx_r26","ctx_r28","RunExplorerComponent","asObservable","warnings$","warnings","queryParams","param","midMatch","exec","testMid","urlMid","moduleId","calculateWarnings","visualDesignerData$","editPipelineEntity","GoToDevRest","ctx_r7","ctx_r10","ctx_r12","AddExplorerComponent","difficulties","default","sorted$","difficulty$","maxDifficulty","sort","b","toLocaleLowerCase","localeCompare","sorted","type","filterAndSortDataSources","advanced","addDataSource","item","toggledItems","index","routes","path","component","VisualQueryComponent","explorer","init","activeExplorer","decls","children","matcher","edit","loadChildren","Promise","then","m","EditModule","history","VisualQueryRoutingModule","RouterModule","VisualQueryModule","Context","MetadataService","ContentTypesService","imports","CommonModule","SharedComponentsModule","MatIconModule","MatButtonModule","MatSlideToggleModule","MatSnackBarModule","MatDialogModule","MatTabsModule","MatFormFieldModule","ReactiveFormsModule","MatSelectModule","MatInputModule"],"sources":["./projects/ng-dialogs/src/app/visual-query/services/query-definition.service.ts","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.html","./projects/ng-dialogs/src/app/visual-query/query-result/query-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.ts","./projects/ng-dialogs/src/app/visual-query/stream-error-result/stream-error-result.component.html","./projects/ng-dialogs/src/app/visual-query/services/visual-query.service.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.helpers.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.html","./projects/ng-dialogs/src/app/visual-query/plumb-editor/rename-stream/rename-stream.component.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumber.helper.ts","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.html","./projects/ng-dialogs/src/app/visual-query/plumb-editor/plumb-editor.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/run-explorer/run-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.html","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.component.ts","./projects/ng-dialogs/src/app/visual-query/add-explorer/add-explorer.helpers.ts","./projects/ng-dialogs/src/app/visual-query/visual-query-routing.module.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.ts","./projects/ng-dialogs/src/app/visual-query/visual-query.component.html","./projects/ng-dialogs/src/app/visual-query/visual-query.module.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiQueryDataSources, webApiQueryDebugStream, webApiQueryGet, webApiQueryRun, webApiQuerySave } from '../../app-administration/services';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult } from '../models';\r\n\r\n@Injectable()\r\nexport class QueryDefinitionService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  fetchPipeline(pipelineEntityId: number, dataSources: DataSource[]) {\r\n    return this.http.get<PipelineModel>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryGet), {\r\n      params: { appId: this.context.appId.toString(), id: pipelineEntityId.toString() }\r\n    }).pipe(\r\n      map(pipelineModel => {\r\n        // if pipeline is new, populate it with default model\r\n        if (!pipelineModel.DataSources.length) {\r\n          this.buildDefaultModel(pipelineModel, dataSources);\r\n        }\r\n        this.fixPipelineDataSources(pipelineModel.DataSources);\r\n        return pipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  private buildDefaultModel(pipelineModel: PipelineModel, dataSources: DataSource[]) {\r\n    const templateDataSources = eavConstants.pipelineDesigner.defaultPipeline.dataSources;\r\n    for (const templateDS of templateDataSources) {\r\n      const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === templateDS.PartAssemblyAndType);\r\n      const pipelineDataSource: PipelineDataSource = {\r\n        Description: '',\r\n        EntityGuid: templateDS.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: dataSource.Name,\r\n        PartAssemblyAndType: templateDS.PartAssemblyAndType,\r\n        VisualDesignerData: templateDS.VisualDesignerData,\r\n      };\r\n      pipelineModel.DataSources.push(pipelineDataSource);\r\n    }\r\n\r\n    pipelineModel.Pipeline.StreamWiring = eavConstants.pipelineDesigner.defaultPipeline.streamWiring;\r\n  }\r\n\r\n  private fixPipelineDataSources(pipelineDataSources: PipelineDataSource[]) {\r\n    const outDataSourceExists = pipelineDataSources.some(\r\n      pipelineDS => pipelineDS.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    );\r\n    if (!outDataSourceExists) {\r\n      const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n      const outDsConst: PipelineDataSource = {\r\n        Description: outDs.Description,\r\n        EntityGuid: outDs.EntityGuid,\r\n        EntityId: undefined,\r\n        Name: outDs.Name,\r\n        PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n        VisualDesignerData: outDs.VisualDesignerData,\r\n      };\r\n      pipelineDataSources.push(outDsConst);\r\n    }\r\n\r\n    for (const pipelineDataSource of pipelineDataSources) {\r\n      pipelineDataSource.VisualDesignerData ??= { Top: 50, Left: 50 };\r\n    }\r\n  }\r\n\r\n  fetchDataSources() {\r\n    return this.http.get<DataSource[]>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDataSources)).pipe(\r\n      map(dataSources => {\r\n        const outDs = eavConstants.pipelineDesigner.outDataSource;\r\n        const outDsConst: DataSource = {\r\n          ContentType: undefined,\r\n          Difficulty: eavConstants.pipelineDesigner.dataSourceDifficulties.default,\r\n          DynamicIn: true,\r\n          DynamicOut: false,\r\n          EnableConfig: undefined,\r\n          HelpLink: undefined,\r\n          Icon: undefined,\r\n          In: outDs.In,\r\n          Name: outDs.Name,\r\n          Out: undefined,\r\n          PartAssemblyAndType: outDs.PartAssemblyAndType,\r\n          PrimaryType: outDs.PrimaryType,\r\n          TypeNameForUi: undefined,\r\n          UiHint: undefined,\r\n        };\r\n        dataSources.push(outDsConst);\r\n        return dataSources;\r\n      }),\r\n    );\r\n  }\r\n\r\n  typeNameFilter(input: string, format: 'className' | 'classFullName') {\r\n    const globalParts = input.split(', ');\r\n\r\n    switch (format) {\r\n      case 'classFullName':\r\n        const classFullName = globalParts[0];\r\n        return classFullName;\r\n      case 'className':\r\n        const classFullNameParts = globalParts[0].split('.');\r\n        const className = classFullNameParts[classFullNameParts.length - 1];\r\n        return className;\r\n      default:\r\n        return input;\r\n    }\r\n  }\r\n\r\n  /** Save the current query and reload entire definition as returned from server */\r\n  savePipeline(pipelineModel: PipelineModel) {\r\n    const pipeline = pipelineModel.Pipeline;\r\n    const dataSources = pipelineModel.DataSources;\r\n\r\n    return this.http.post<PipelineModel>(\r\n      this.dnnContext.$2sxc.http.apiUrl(webApiQuerySave),\r\n      { pipeline, dataSources },\r\n      { params: { appId: this.context.appId.toString(), Id: pipeline.EntityId.toString() } }\r\n    ).pipe(\r\n      map(newPipelineModel => {\r\n        this.fixPipelineDataSources(newPipelineModel.DataSources);\r\n        return newPipelineModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  runPipeline(id: number, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryRun), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), top: top.toString() }\r\n    });\r\n  }\r\n\r\n  /** `top` - fetch first X items */\r\n  debugStream(id: number, source: string, sourceOut: string, top: number) {\r\n    return this.http.get<PipelineResult>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDebugStream), {\r\n      params: { appId: this.context.appId.toString(), id: id.toString(), from: source, out: sourceOut, top: top.toString() }\r\n    });\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>\r\n      Query Results\r\n      <ng-container *ngIf=\"debugStream\">\r\n        for Stream: \"{{ debugStream.name }}\" on Source: \"{{ debugStream.sourceName }}\"\r\n      </ng-container>\r\n    </div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  The Full result was logged to the Browser Console. Further down you'll find more debug-infos.\r\n  Executed in {{ timeUsed }}ms ({{ ticksUsed }} ticks)\r\n</p>\r\n\r\n<mat-tab-group dynamicHeight color=\"accent\">\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Results\">\r\n      <span>Results</span>\r\n    </div>\r\n\r\n    <p class=\"description\">\r\n      <ng-container *ngIf=\"top === 0\">Showing All results</ng-container>\r\n      <ng-container *ngIf=\"top !== 0\">Showing top {{ top }} results</ng-container>\r\n      <button mat-button *ngFor=\"let option of optionsForTop\" (click)=\"show(option)\">\r\n        Show\r\n        <ng-container *ngIf=\"option === 0\">All</ng-container>\r\n        <ng-container *ngIf=\"option !== 0\">{{ option }}</ng-container>\r\n      </button>\r\n    </p>\r\n    <pre>{{ result | json }}</pre>\r\n  </mat-tab>\r\n\r\n  <mat-tab *ngIf=\"parameters?.length\">\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Parameters\">\r\n      <span>Parameters</span>\r\n    </div>\r\n\r\n    <br />\r\n    <ul class=\"description\">\r\n      <li *ngFor=\"let param of parameters\">{{ param }}</li>\r\n    </ul>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Sources\">\r\n      <span>Sources</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Name and Guid</th>\r\n        <th>Type</th>\r\n        <th>Configuration</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let source of sources | keyvalue\">\r\n        <td>\r\n          <div *ngIf=\"source.value.Definition?.Name\">{{ source.value.Definition?.Name }}</div>\r\n          <pre>{{ source.value.Guid }}</pre>\r\n        </td>\r\n        <td>{{ source.value.Type }}</td>\r\n        <td>\r\n          <ol>\r\n            <li *ngFor=\"let config of source.value.Configuration | keyvalue\">\r\n              <b>{{ config.key }}</b>=<em>{{ config.value }}</em>\r\n            </li>\r\n          </ol>\r\n        </td>\r\n        <td>{{ source.value.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n\r\n  <mat-tab>\r\n    <div *matTabLabel class=\"mat-tab-label-box\" tippy=\"Streams\">\r\n      <span>Streams</span>\r\n    </div>\r\n\r\n    <br />\r\n    <table class=\"description\">\r\n      <tr>\r\n        <th>Source</th>\r\n        <th>Target</th>\r\n        <th>Items</th>\r\n        <th>Error</th>\r\n      </tr>\r\n      <tr *ngFor=\"let stream of streams\">\r\n        <td>\r\n          <pre>{{ stream.Source + \":\" + stream.SourceOut }}</pre>\r\n        </td>\r\n        <td>\r\n          <pre>{{ stream.Target + \":\" + stream.TargetIn }}</pre>\r\n        </td>\r\n        <td>{{ stream.Count }}</td>\r\n        <td>{{ stream.Error }}</td>\r\n      </tr>\r\n    </table>\r\n  </mat-tab>\r\n</mat-tab-group>\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { DebugStreamInfo, PipelineResultQuery, PipelineResultSources, PipelineResultStream } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { QueryResultDialogData } from './query-result.models';\r\n\r\n@Component({\r\n  selector: 'app-query-result',\r\n  templateUrl: './query-result.component.html',\r\n  styleUrls: ['./query-result.component.scss'],\r\n})\r\nexport class QueryResultComponent implements OnInit {\r\n  parameters: string[];\r\n  timeUsed: number;\r\n  ticksUsed: number;\r\n  top: number;\r\n  optionsForTop: number[];\r\n  result: PipelineResultQuery;\r\n  debugStream: DebugStreamInfo;\r\n  sources: PipelineResultSources;\r\n  streams: PipelineResultStream[];\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: QueryResultDialogData,\r\n    private dialogRef: MatDialogRef<QueryResultComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const pipeline = this.visualQueryService.pipelineModel$.value.Pipeline;\r\n    const params = (pipeline.Params?.split('\\n') ?? []).filter(el => !!el);\r\n    const testParams = (pipeline.TestParameters?.split('\\n') ?? []).filter(el => !!el);\r\n    this.parameters = [].concat(params, testParams);\r\n    this.timeUsed = this.dialogData.result.QueryTimer.Milliseconds;\r\n    this.ticksUsed = this.dialogData.result.QueryTimer.Ticks;\r\n    this.top = this.dialogData.top;\r\n    this.optionsForTop = [25, 100, 1000, 0];\r\n    this.result = this.dialogData.result.Query;\r\n    this.debugStream = this.dialogData.debugStream;\r\n    this.sources = this.dialogData.result.Sources;\r\n    this.streams = this.dialogData.result.Streams;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  show(top: number) {\r\n    if (top === this.top) { return; }\r\n\r\n    if (this.debugStream) {\r\n      this.visualQueryService.debugStream(this.debugStream.original, top);\r\n    } else {\r\n      this.visualQueryService.runPipeline(top);\r\n    }\r\n\r\n    this.closeDialog();\r\n  }\r\n}\r\n","import { Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { StreamErrorData } from '../models';\r\nimport { StreamErrorResultDialogData } from './stream-error-result.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-stream-error-result',\r\n  templateUrl: './stream-error-result.component.html',\r\n  styleUrls: ['./stream-error-result.component.scss'],\r\n})\r\nexport class StreamErrorResultComponent implements OnInit {\r\n  errorData: StreamErrorData;\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: StreamErrorResultDialogData,\r\n    private dialogRef: MatDialogRef<StreamErrorResultComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.errorData = this.dialogData.errorData;\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openInsights() {\r\n    window.open(window.$2sxc.http.apiUrl('sys/insights/logs?key=web-api'), '_blank');\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Stream Error Results</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<br />\r\n\r\n<pre>{{ errorData | json }}</pre>\r\n\r\n<div>\r\n  <button mat-button tippy=\"Open 2sxc Insights\" (click)=\"openInsights()\">\r\n    <mat-icon>speed</mat-icon>\r\n    <span>Insights</span>\r\n  </button>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Injectable, NgZone, OnDestroy, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { BehaviorSubject, fromEvent, Subject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../../permissions/services/metadata.service';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\n// tslint:disable-next-line:max-line-length\r\nimport { DataSource, DataSourceConfig, DataSourceConfigs, DebugStreamInfo, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { QueryResultComponent } from '../query-result/query-result.component';\r\nimport { QueryResultDialogData } from '../query-result/query-result.models';\r\nimport { StreamErrorResultComponent } from '../stream-error-result/stream-error-result.component';\r\nimport { StreamErrorResultDialogData } from '../stream-error-result/stream-error-result.models';\r\nimport { QueryDefinitionService } from './query-definition.service';\r\n\r\n@Injectable()\r\nexport class VisualQueryService implements OnDestroy {\r\n  pipelineModel$ = new BehaviorSubject<PipelineModel>(null);\r\n  dataSources$ = new BehaviorSubject<DataSource[]>(null);\r\n  putEntityCountOnConnections$ = new Subject<PipelineResult>();\r\n  dataSourceConfigs$ = new BehaviorSubject<DataSourceConfigs>({});\r\n  pipelineResult?: PipelineResult;\r\n\r\n  private pipelineId = parseInt(this.route.snapshot.paramMap.get('pipelineId'), 10);\r\n  private refreshPipeline = false;\r\n  private refreshDataSourceConfigs = false;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private titleService: Title,\r\n    private snackBar: MatSnackBar,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private zone: NgZone,\r\n    private metadataService: MetadataService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnDestroy() {\r\n    this.pipelineModel$.complete();\r\n    this.dataSources$.complete();\r\n    this.putEntityCountOnConnections$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  init() {\r\n    this.fetchDataSources(() => this.fetchPipeline(true, true, false));\r\n    this.attachKeyboardSave();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  editPipelineEntity() {\r\n    // save Pipeline, then open Edit Dialog\r\n    this.savePipeline(() => {\r\n      const form: EditForm = {\r\n        items: [{ EntityId: this.pipelineModel$.value.Pipeline.EntityId }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.refreshPipeline = true;\r\n    });\r\n  }\r\n\r\n  saveAndRun(save: boolean, run: boolean) {\r\n    if (save && run) {\r\n      this.savePipeline(() => { this.runPipeline(); });\r\n    } else if (save) {\r\n      this.savePipeline();\r\n    } else if (run) {\r\n      this.runPipeline();\r\n    }\r\n  }\r\n\r\n  showDataSourceDetails(showDetails: boolean) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const visualDesignerData: Record<string, any> = GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {};\r\n    visualDesignerData.ShowDataSourceDetails = showDetails;\r\n    pipelineModel.Pipeline.VisualDesignerData = JSON.stringify(visualDesignerData);\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const newPipelineDataSource: PipelineDataSource = {\r\n      Description: '',\r\n      EntityGuid: 'unsaved' + (pipelineModel.DataSources.length + 1),\r\n      EntityId: undefined,\r\n      Name: dataSource.Name,\r\n      PartAssemblyAndType: dataSource.PartAssemblyAndType,\r\n      VisualDesignerData: { Top: 100, Left: 100 },\r\n    };\r\n    pipelineModel.DataSources.push(newPipelineDataSource);\r\n    this.pipelineModel$.next(pipelineModel);\r\n    this.savePipeline();\r\n  }\r\n\r\n  removeDataSource(pipelineDataSourceGuid: string, connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.DataSources = pipelineModel.DataSources.filter(pipelineDS => pipelineDS.EntityGuid !== pipelineDataSourceGuid);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  renameDataSource(pipelineDataSourceGuid: string, name: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Name = name;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourceDescription(pipelineDataSourceGuid: string, description: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    pipelineDataSource.Description = description;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeConnections(connections: StreamWire[], streamsOut: string) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    pipelineModel.Pipeline.StreamWiring = connections;\r\n    pipelineModel.Pipeline.StreamsOut = streamsOut;\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  changeDataSourcePosition(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    const pipelineModel = cloneDeep(this.pipelineModel$.value);\r\n    const pipelineDataSource = pipelineModel.DataSources.find(pipelineDS => pipelineDS.EntityGuid === pipelineDataSourceGuid);\r\n    if (!pipelineDataSource) {\r\n      // spm NOTE: fixes problem where dataSource position can't be updated if dataSource with guid unsavedXX gets saved while dragging.\r\n      // Can happen if dataSource is just added and user drags it and save happens.\r\n      return;\r\n    }\r\n    pipelineDataSource.VisualDesignerData = { ...pipelineDataSource.VisualDesignerData, ...position };\r\n    this.pipelineModel$.next(pipelineModel);\r\n  }\r\n\r\n  private calculateDataSourceConfigs(dataSources: PipelineDataSource[]) {\r\n    const dataSourceConfigs: DataSourceConfigs = {};\r\n    dataSources.forEach(dataSource => {\r\n      if (dataSource.EntityId == null) { return; }\r\n      dataSourceConfigs[dataSource.EntityId] = [];\r\n      dataSource.Metadata?.forEach(metadataItem => {\r\n        Object.entries(metadataItem).forEach(([attributeName, attributeValue]) => {\r\n          if (attributeValue == null || attributeValue === '') { return; }\r\n          if (['Created', 'Guid', 'Id', 'Modified', 'Title', '_Type'].includes(attributeName)) { return; }\r\n          if (Array.isArray(attributeValue) && attributeValue[0]?.Title != null && attributeValue[0]?.Id != null) {\r\n            attributeValue = `${attributeValue[0].Title} (${attributeValue[0].Id})`;\r\n          }\r\n          const dataSourceConfig: DataSourceConfig = {\r\n            name: attributeName,\r\n            value: attributeValue,\r\n          };\r\n          dataSourceConfigs[dataSource.EntityId].push(dataSourceConfig);\r\n        });\r\n      });\r\n    });\r\n    this.dataSourceConfigs$.next(dataSourceConfigs);\r\n  }\r\n\r\n  editDataSource(pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources$.value.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const contentTypeName = dataSource.ContentType;\r\n    const targetType = eavConstants.metadata.entity.targetType;\r\n    const keyType = eavConstants.metadata.entity.keyType;\r\n    const key = pipelineDataSource.EntityGuid;\r\n\r\n    // query for existing Entity\r\n    this.metadataService.getMetadata(targetType, keyType, key, contentTypeName).subscribe(metadata => {\r\n      // edit existing Entity\r\n      if (metadata.Items.length) {\r\n        const form: EditForm = {\r\n          items: [{ EntityId: metadata.Items[0].Id }],\r\n        };\r\n        const formUrl = convertFormToUrl(form);\r\n        this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n        this.refreshDataSourceConfigs = true;\r\n        return;\r\n      }\r\n\r\n      // Check if the type exists, and if yes, create new Entity\r\n      this.contentTypesService.retrieveContentType(contentTypeName).subscribe({\r\n        next: contentType => {\r\n          if (contentType == null) {\r\n            this.snackBar.open('DataSource doesn\\'t have any configuration', undefined, { duration: 3000 });\r\n            return;\r\n          }\r\n          const form: EditForm = {\r\n            items: [{\r\n              ContentTypeName: contentTypeName,\r\n              For: {\r\n                Target: eavConstants.metadata.entity.target,\r\n                TargetType: eavConstants.metadata.entity.targetType,\r\n                Guid: key,\r\n              },\r\n            }],\r\n          };\r\n          const formUrl = convertFormToUrl(form);\r\n          this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n          this.refreshDataSourceConfigs = true;\r\n        },\r\n        error: (error: HttpErrorResponse) => {\r\n          const message = 'Server reports error - this usually means that this DataSource doesn\\'t have any configuration';\r\n          this.snackBar.open(message, undefined, { duration: 3000 });\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  private savePipeline(callback?: () => void) {\r\n    this.snackBar.open('Saving...');\r\n    this.queryDefinitionService.savePipeline(this.pipelineModel$.value).subscribe({\r\n      next: pipelineModel => {\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.pipelineModel$.next(pipelineModel);\r\n        if (callback != null) { callback(); }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Save Pipeline failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  runPipeline(top = 25) {\r\n    this.snackBar.open('Running query...');\r\n    this.queryDefinitionService.runPipeline(this.pipelineModel$.value.Pipeline.EntityId, top).subscribe({\r\n      next: pipelineResult => {\r\n        this.snackBar.open('Query worked', null, { duration: 2000 });\r\n        this.pipelineResult = pipelineResult;\r\n        this.showQueryResult(pipelineResult, top);\r\n        console.warn(pipelineResult);\r\n        // push cloned pipelineModel to reset jsPlumb\r\n        this.pipelineModel$.next(cloneDeep(this.pipelineModel$.value));\r\n        setTimeout(() => { this.putEntityCountOnConnections$.next(pipelineResult); });\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Query failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  debugStream(stream: PipelineResultStream, top = 25) {\r\n    if (stream.Error) {\r\n      this.showStreamErrorResult(stream);\r\n      return;\r\n    }\r\n\r\n    if (stream.Count === 0) { return; }\r\n\r\n    this.snackBar.open('Running stream...');\r\n    const pipelineId = this.pipelineModel$.value.Pipeline.EntityId;\r\n    this.queryDefinitionService.debugStream(pipelineId, stream.Source, stream.SourceOut, top).subscribe({\r\n      next: streamResult => {\r\n        this.snackBar.open('Stream worked', null, { duration: 2000 });\r\n        const pipelineDataSource = this.pipelineModel$.value.DataSources.find(ds => ds.EntityGuid === stream.Source);\r\n        const debugStream: DebugStreamInfo = {\r\n          name: stream.SourceOut,\r\n          source: stream.Source,\r\n          sourceName: pipelineDataSource.Name,\r\n          original: stream,\r\n        };\r\n        this.showQueryResult(streamResult, top, debugStream);\r\n        console.warn(streamResult);\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.snackBar.open('Stream failed', null, { duration: 2000 });\r\n      },\r\n    });\r\n  }\r\n\r\n  private fetchPipeline(refreshPipeline: boolean, refreshDataSourceConfigs: boolean, showSnackBar: boolean) {\r\n    if (showSnackBar) {\r\n      this.snackBar.open('Reloading query, please wait...');\r\n    }\r\n    this.queryDefinitionService.fetchPipeline(this.pipelineId, this.dataSources$.value).subscribe(pipelineModel => {\r\n      if (showSnackBar) {\r\n        this.snackBar.open('Query reloaded', null, { duration: 2000 });\r\n      }\r\n      this.titleService.setTitle(`${pipelineModel.Pipeline.Name} - Visual Query`);\r\n      if (refreshPipeline) {\r\n        this.pipelineModel$.next(pipelineModel);\r\n      }\r\n      if (refreshDataSourceConfigs) {\r\n        this.calculateDataSourceConfigs(pipelineModel.DataSources);\r\n      }\r\n    });\r\n  }\r\n\r\n  private showQueryResult(result: PipelineResult, top: number, debugStream?: DebugStreamInfo) {\r\n    const dialogData: QueryResultDialogData = {\r\n      result,\r\n      debugStream,\r\n      top,\r\n    };\r\n    this.dialog.open(QueryResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private showStreamErrorResult(stream: PipelineResultStream) {\r\n    const dialogData: StreamErrorResultDialogData = {\r\n      errorData: stream.ErrorData,\r\n    };\r\n    this.dialog.open(StreamErrorResultComponent, {\r\n      autoFocus: false,\r\n      backdropClass: 'dialog-backdrop',\r\n      closeOnNavigation: false,\r\n      data: dialogData,\r\n      panelClass: ['dialog-panel', `dialog-panel-medium`, 'no-scrollbar'],\r\n      // spm NOTE: position used to force align-items: flex-start; on cdk-global-overlay-wrapper.\r\n      // Real top margin is overwritten in css e.g. dialog-panel-large\r\n      position: { top: '0' },\r\n      viewContainerRef: this.viewContainerRef,\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private fetchDataSources(callback?: () => void) {\r\n    this.queryDefinitionService.fetchDataSources().subscribe(dataSources => {\r\n      this.dataSources$.next(dataSources);\r\n      callback();\r\n    });\r\n  }\r\n\r\n  private attachKeyboardSave() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<KeyboardEvent>(window, 'keydown').pipe(\r\n          filter(() => !this.route.snapshot.firstChild),\r\n          filter(event => {\r\n            const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n            return CTRL_S;\r\n          }),\r\n        ).subscribe(event => {\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.savePipeline(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        if (this.refreshPipeline || this.refreshDataSourceConfigs) {\r\n          this.fetchPipeline(this.refreshPipeline, this.refreshDataSourceConfigs, this.refreshPipeline);\r\n        }\r\n        this.refreshPipeline = false;\r\n        this.refreshDataSourceConfigs = false;\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","import { DataSource, PipelineDataSource } from '../models';\r\nimport { GuiTypes, TypeInfo, TypeInfos } from './plumb-editor.models';\r\n\r\nexport const guiTypes: GuiTypes = {\r\n  Cache: { Name: 'Cache', Icon: 'history', UiHint: 'Caching of data' },\r\n  Filter: { Name: 'Filter', Icon: 'filter_list', UiHint: 'Filter data - usually returning less items than came in' },\r\n  Logic: { Name: 'Logic', Icon: 'share', UiHint: 'Logic operations - usually choosing between different streams' },\r\n  Lookup: { Name: 'Lookup', Icon: 'search', UiHint: 'Lookup operation - usually looking for other data based on a criteria' },\r\n  Modify: { Name: 'Modify', Icon: 'edit_attributes', UiHint: 'Modify data - usually changing, adding or removing values' },\r\n  Security: { Name: 'Security', Icon: 'account_circle', UiHint: 'Security - usually limit what the user sees based on his identity' },\r\n  Sort: { Name: 'Sort', Icon: 'sort', UiHint: 'Sort the items' },\r\n  Source: { Name: 'Source', Icon: 'cloud_upload', UiHint: 'Source of new data - usually SQL, CSV or similar' },\r\n  Target: { Name: 'Target', Icon: 'adjust', UiHint: 'Target - usually just a destination of data' },\r\n  Unknown: { Name: 'Unknown', Icon: 'fiber_manual_record', UiHint: 'Unknown type' },\r\n  Debug: { Name: 'Debug', Icon: 'bug_report', UiHint: 'Debugging Tools'},\r\n  System: { Name: 'System', Icon: 'military_tech', UiHint: 'System Data' },\r\n};\r\n\r\nexport function calculateTypeInfos(pipelineDataSources: PipelineDataSource[], dataSources: DataSource[]) {\r\n  const typeInfos: TypeInfos = {};\r\n\r\n  for (const pipelineDataSource of pipelineDataSources) {\r\n    let typeInfo: TypeInfo;\r\n    const dataSource = dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    if (dataSource) {\r\n      typeInfo = { ...(dataSource.PrimaryType ? guiTypes[dataSource.PrimaryType] : guiTypes.Unknown) };\r\n      if (dataSource.Icon != null) { typeInfo.Icon = dataSource.Icon; }\r\n      if (dataSource.DynamicIn != null) { typeInfo.DynamicIn = dataSource.DynamicIn; }\r\n      if (dataSource.DynamicOut != null) { typeInfo.DynamicOut = dataSource.DynamicOut; }\r\n      if (dataSource.HelpLink != null) { typeInfo.HelpLink = dataSource.HelpLink; }\r\n      if (dataSource.EnableConfig != null) { typeInfo.EnableConfig = dataSource.EnableConfig; }\r\n      if (dataSource.UiHint != null) { typeInfo.UiHint = dataSource.UiHint; }\r\n    }\r\n    if (!typeInfo) { typeInfo = { ...guiTypes.Unknown }; }\r\n    typeInfos[pipelineDataSource.EntityGuid] = typeInfo;\r\n  }\r\n\r\n  return typeInfos;\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <div>Rename stream</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n\r\n<!-- <p class=\"dialog-description\"></p> -->\r\n\r\n<form [formGroup]=\"form\" class=\"dialog-form\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n    <!-- Simple form -->\r\n    <ng-container *ngIf=\"!isSource || !pipelineResultExists\">\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <input matInput type=\"text\" formControlName=\"label\" required>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"isSource && !pipelineResultExists\">\r\n        You will get suggestions for out-streams after you run query\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n\r\n    <!-- Rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedLabel\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Label -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Label</mat-label>\r\n        <mat-select *ngIf=\"guidedLabel\" formControlName=\"label\" required\r\n          [placeholder]=\"!labelOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let labelOption of labelOptions\" [value]=\"labelOption\">\r\n            {{ labelOption }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedLabel\" formControlName=\"label\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedLabel }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedLabel(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedLabel }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedLabel(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"controls.label.touched && controls.label.errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </ng-container>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <!-- Extra button for rich form -->\r\n    <ng-container *ngIf=\"isSource && pipelineResultExists\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n    </ng-container>\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"rename()\">\r\n      Rename\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectorRef, Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, startWith } from 'rxjs/operators';\r\nimport { ContentTypesService } from '../../../app-administration/services';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { VisualQueryService } from '../../services/visual-query.service';\r\nimport { RenameStreamDialogControls, RenameStreamDialogData, RenameStreamDialogFormValue } from './rename-stream.models';\r\n\r\n@Component({\r\n  selector: 'app-rename-stream',\r\n  templateUrl: './rename-stream.component.html',\r\n  styleUrls: ['./rename-stream.component.scss']\r\n})\r\nexport class RenameStreamComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  controls: RenameStreamDialogControls;\r\n  isSource = this.dialogData.isSource;\r\n  pipelineResultExists = this.visualQueryService.pipelineResult != null;\r\n  scopeOptions: ScopeOption[] = [];\r\n  labelOptions: string[] = [];\r\n  guidedLabel = true;\r\n  advancedMode = false;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: RenameStreamDialogData,\r\n    private dialogRef: MatDialogRef<RenameStreamComponent>,\r\n    private visualQueryService: VisualQueryService,\r\n    private contentTypesService: ContentTypesService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.buildForm();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(label?: string): void {\r\n    this.dialogRef.close(label);\r\n  }\r\n\r\n  toggleGuidedLabel(guidedLabel: boolean): void {\r\n    this.guidedLabel = guidedLabel;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  rename(): void {\r\n    const formValue: RenameStreamDialogFormValue = this.form.getRawValue();\r\n    this.closeDialog(formValue.label);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({\r\n      label: new FormControl(this.dialogData.label, Validators.required),\r\n      scope: new FormControl(eavConstants.scopes.default.value),\r\n    });\r\n    this.controls = this.form.controls as any;\r\n\r\n    if (!this.isSource || !this.pipelineResultExists) { return; }\r\n\r\n    this.subscription.add(\r\n      this.controls.scope.valueChanges.pipe(\r\n        startWith<string>(this.controls.scope.value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.labelOptions = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n          .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out\r\n          .filter(out => out.Scope === scope)\r\n          .map(out => out.Name);\r\n        if (!this.labelOptions.includes(this.controls.label.value) && this.controls.label.value != null) {\r\n          this.controls.label.patchValue(null);\r\n        }\r\n      })\r\n    );\r\n\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      const sourceOut = Object.values(this.visualQueryService.pipelineResult.Sources)\r\n        .find(source => source.Guid === this.dialogData.pipelineDataSourceGuid).Out;\r\n      const filtered = scopes.filter(s => sourceOut.some(o => o.Scope === s.value));\r\n      this.scopeOptions = filtered;\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n}\r\n","import { ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { DataSource, PipelineDataSource, PipelineModel, PipelineResult, PipelineResultStream, StreamWire, VisualDesignerData } from '../models';\r\nimport { EndpointInfo, PlumbType } from './plumb-editor.models';\r\nimport { RenameStreamComponent } from './rename-stream/rename-stream.component';\r\nimport { RenameStreamDialogData } from './rename-stream/rename-stream.models';\r\n\r\ndeclare const window: EavWindow;\r\n\r\nexport const dataSrcIdPrefix = 'dataSource_';\r\n\r\nexport class Plumber {\r\n  private instance: PlumbType;\r\n  private lineCount = 0;\r\n  private linePaintDefault = {\r\n    stroke: '#61B7CF',\r\n    strokeWidth: 4,\r\n    outlineStroke: 'white',\r\n    outlineWidth: 2,\r\n  };\r\n  private lineColors = [\r\n    '#009688', '#00bcd4', '#3f51b5', '#9c27b0', '#e91e63',\r\n    '#db4437', '#ff9800', '#60a917', '#60a917', '#008a00',\r\n    '#00aba9', '#1ba1e2', '#0050ef', '#6a00ff', '#aa00ff',\r\n    '#f472d0', '#d80073', '#a20025', '#e51400', '#fa6800',\r\n    '#f0a30a', '#e3c800', '#825a2c', '#6d8764', '#647687',\r\n    '#76608a', '#a0522d',\r\n  ];\r\n  private maxCols = this.lineColors.length - 1;\r\n  private uuidColorMap: Record<string, any> = {};\r\n  private bulkDelete = false;\r\n  private dialogRef: MatDialogRef<RenameStreamComponent>;\r\n\r\n  constructor(\r\n    private jsPlumbRoot: HTMLElement,\r\n    private pipelineModel: PipelineModel,\r\n    private dataSources: DataSource[],\r\n    private onConnectionsChanged: () => void,\r\n    private onDragend: (pipelineDataSourceGuid: string, position: VisualDesignerData) => void,\r\n    private onDebugStream: (stream: PipelineResultStream) => void,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) {\r\n    this.instance = window.jsPlumb.getInstance(this.getInstanceDefaults(this.jsPlumbRoot));\r\n    this.instance.batch(() => {\r\n      this.initDomDataSources();\r\n      this.initWirings();\r\n      this.bindEvents();\r\n    });\r\n    // spm NOTE: repaint after initial paint fixes:\r\n    // Error: <svg> attribute width: Expected length, \"-Infinity\".\r\n    this.instance.repaintEverything();\r\n  }\r\n\r\n  destroy() {\r\n    this.dialogRef?.close();\r\n    this.instance.reset();\r\n    this.instance.unbindContainer();\r\n  }\r\n\r\n  removeEndpointsOnDataSource(pipelineDataSourceGuid: string) {\r\n    const elementId = dataSrcIdPrefix + pipelineDataSourceGuid;\r\n    this.bulkDelete = true;\r\n    this.instance.batch(() => {\r\n      this.instance.selectEndpoints({ element: elementId }).delete();\r\n    });\r\n    this.bulkDelete = false;\r\n  }\r\n\r\n  getAllConnections() {\r\n    const connectionInfos: StreamWire[] = this.instance.getAllConnections().map((connection: PlumbType) => {\r\n      const wire: StreamWire = {\r\n        From: connection.sourceId.replace(dataSrcIdPrefix, ''),\r\n        Out: connection.endpoints[0].getOverlay('endpointLabel').label,\r\n        To: connection.targetId.replace(dataSrcIdPrefix, ''),\r\n        In: connection.endpoints[1].getOverlay('endpointLabel').label,\r\n      };\r\n      return wire;\r\n    });\r\n    return connectionInfos;\r\n  }\r\n\r\n  getStreamsOut() {\r\n    const streamsOut: string[] = [];\r\n    this.instance.selectEndpoints({ target: dataSrcIdPrefix + 'Out' }).each((endpoint: PlumbType) => {\r\n      streamsOut.push(endpoint.getOverlay('endpointLabel').label);\r\n    });\r\n    const streamsOutStr = streamsOut.join(',');\r\n    return streamsOutStr;\r\n  }\r\n\r\n  putEntityCountOnConnections(result: PipelineResult) {\r\n    result.Streams?.forEach(stream => {\r\n      const sourceElementId = dataSrcIdPrefix + stream.Source;\r\n      const outTargets = ['00000000-0000-0000-0000-000000000000', this.pipelineModel.Pipeline.EntityGuid];\r\n      const targetElementId = outTargets.includes(stream.Target) ? dataSrcIdPrefix + 'Out' : dataSrcIdPrefix + stream.Target;\r\n\r\n      const fromUuid = sourceElementId + '_out_' + stream.SourceOut;\r\n      const toUuid = targetElementId + '_in_' + stream.TargetIn;\r\n\r\n      const sEndp: PlumbType = this.instance.getEndpoint(fromUuid);\r\n      sEndp?.connections\r\n        ?.filter((connection: PlumbType) => connection.endpoints[1].getUuid() === toUuid)\r\n        ?.forEach((connection: PlumbType) => {\r\n          const label = !stream.Error ? stream.Count.toString() : '';\r\n          const cssClass = 'streamEntitiesCount ' + (!stream.Error ? '' : 'streamEntitiesError');\r\n          connection.setLabel({\r\n            label,\r\n            cssClass,\r\n            events: {\r\n              click: (overlay: PlumbType) => {\r\n                if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n                this.onDebugStream(stream);\r\n              },\r\n            },\r\n          });\r\n        });\r\n    });\r\n  }\r\n\r\n  private nextLinePaintStyle(uuid: string) {\r\n    return (\r\n      this.uuidColorMap[uuid] ||\r\n      (this.uuidColorMap[uuid] = Object.assign({}, this.linePaintDefault, { stroke: this.lineColors[this.lineCount++ % this.maxCols] }))\r\n    );\r\n  }\r\n\r\n  private getInstanceDefaults(container: HTMLElement) {\r\n    const defaults = {\r\n      Container: container,\r\n      Connector: ['Bezier', { curviness: 70 }],\r\n      PaintStyle: this.nextLinePaintStyle('dummy'),\r\n      HoverPaintStyle: {\r\n        stroke: '#216477',\r\n        strokeWidth: 4,\r\n        outlineStroke: 'white',\r\n        outlineWidth: 2,\r\n      },\r\n    };\r\n    return defaults;\r\n  }\r\n\r\n  /** Create sources, targets and endpoints */\r\n  private initDomDataSources() {\r\n    for (const pipelineDataSource of this.pipelineModel.DataSources) {\r\n      const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + dataSrcIdPrefix + pipelineDataSource.EntityGuid);\r\n      if (!domDataSource) { continue; }\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      if (!dataSource) { continue; }\r\n\r\n      if (this.pipelineModel.Pipeline.AllowEdit) {\r\n        // WARNING! Must happen before instance.makeSource()\r\n        this.instance.draggable(domDataSource, {\r\n          grid: [20, 20], stop: (event: PlumbType) => {\r\n            const element: HTMLElement = event.el;\r\n            const pipelineDataSourceGuid: string = element.id.replace(dataSrcIdPrefix, '');\r\n            const position: VisualDesignerData = {\r\n              Top: event.finalPos[1],\r\n              Left: event.finalPos[0],\r\n            };\r\n            setTimeout(() => { this.onDragend(pipelineDataSourceGuid, position); });\r\n          }\r\n        });\r\n      }\r\n\r\n      // Add Out-Endpoints from Definition\r\n      dataSource.Out?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, false, pipelineDataSource);\r\n      });\r\n\r\n      // Add In-Endpoints from Definition\r\n      dataSource.In?.forEach(name => {\r\n        this.addEndpoint(domDataSource, name, true, pipelineDataSource);\r\n      });\r\n\r\n      // Make DataSource a Target for new Endpoints (if .In is an Array)\r\n      if (dataSource.In) {\r\n        const targetEndpointUnlimited = this.buildTargetEndpoint(pipelineDataSource.EntityGuid);\r\n        targetEndpointUnlimited.maxConnections = -1;\r\n        this.instance.makeTarget(domDataSource, targetEndpointUnlimited);\r\n      }\r\n\r\n      if (dataSource.DynamicOut) {\r\n        this.instance.makeSource(domDataSource, this.buildSourceEndpoint(pipelineDataSource.EntityGuid), { filter: '.add-endpoint' });\r\n      }\r\n    }\r\n  }\r\n\r\n  /** Create wires */\r\n  private initWirings() {\r\n    this.pipelineModel.Pipeline.StreamWiring?.forEach(wire => {\r\n      // read connections from Pipeline\r\n      const sourceElementId = dataSrcIdPrefix + wire.From;\r\n      const fromUuid = sourceElementId + '_out_' + wire.Out;\r\n      const targetElementId = dataSrcIdPrefix + wire.To;\r\n      const toUuid = targetElementId + '_in_' + wire.In;\r\n\r\n      // Ensure In-Endpoint exist\r\n      if (!this.instance.getEndpoint(fromUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + sourceElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.Out, false, pipelineDataSource);\r\n      }\r\n\r\n      // Ensure Out-Endpoint exist\r\n      if (!this.instance.getEndpoint(toUuid)) {\r\n        const domDataSource = this.jsPlumbRoot.querySelector<HTMLElement>('#' + targetElementId);\r\n        if (!domDataSource) { return; }\r\n\r\n        const guid: string = domDataSource.id.replace(dataSrcIdPrefix, '');\r\n        const pipelineDataSource = this.pipelineModel.DataSources.find(pipeDataSource => pipeDataSource.EntityGuid === guid);\r\n        this.addEndpoint(domDataSource, wire.In, true, pipelineDataSource);\r\n      }\r\n\r\n      try {\r\n        this.instance.connect({\r\n          uuids: [fromUuid, toUuid],\r\n          paintStyle: this.nextLinePaintStyle(fromUuid),\r\n        });\r\n      } catch (e) {\r\n        console.error({ message: 'Connection failed', from: fromUuid, to: toUuid });\r\n      }\r\n    });\r\n  }\r\n\r\n  private addEndpoint(domDataSource: HTMLElement, endpointName: string, isIn: boolean, pipelineDataSource: PipelineDataSource) {\r\n    const dataSource = this.dataSources.find(d => d.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n    const isDynamic = isIn\r\n      ? !dataSource.In?.some(name => this.getEndpointInfo(name, false))\r\n      : !dataSource.Out?.some(name => this.getEndpointInfo(name, false));\r\n    const endpointInfo = this.getEndpointInfo(endpointName, isDynamic);\r\n\r\n    let style: string;\r\n    if (isDynamic) {\r\n      style = 'dynamic';\r\n    } else if (!endpointInfo.required) {\r\n      style = '';\r\n    } else {\r\n      const wireExists = this.pipelineModel.Pipeline.StreamWiring?.some(wire => {\r\n        const targetElementId = dataSrcIdPrefix + wire.To;\r\n        const targetEndpointName = wire.In;\r\n\r\n        return targetElementId === domDataSource.id && targetEndpointName === endpointInfo.name;\r\n      });\r\n      style = wireExists ? '' : 'required';\r\n    }\r\n\r\n    const uuid = domDataSource.id + (isIn ? '_in_' : '_out_') + endpointInfo.name;\r\n    const model = isIn\r\n      ? this.buildTargetEndpoint(pipelineDataSource.EntityGuid, style)\r\n      : this.buildSourceEndpoint(pipelineDataSource.EntityGuid, style);\r\n    // Endpoints on Out-DataSource must be always enabled\r\n    const params = {\r\n      uuid,\r\n      enabled: this.pipelineModel.Pipeline.AllowEdit\r\n        || pipelineDataSource.EntityGuid === eavConstants.pipelineDesigner.outDataSource.EntityGuid\r\n    };\r\n\r\n    const endpoint: PlumbType = this.instance.addEndpoint(domDataSource, model, params);\r\n    endpoint.getOverlay('endpointLabel').setLabel(endpointInfo.name);\r\n  }\r\n\r\n  private buildSourceEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = true;\r\n    const sourceEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'sourceEndpoint ' + style ?? '',\r\n      maxConnections: -1,\r\n      isSource,\r\n      anchor: ['Continuous', { faces: ['top'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return sourceEndpoint;\r\n  }\r\n\r\n  private buildTargetEndpoint(pipelineDataSourceGuid: string, style?: string) {\r\n    const isSource = false;\r\n    const targetEndpoint = {\r\n      paintStyle: { fill: 'transparent', radius: 10 },\r\n      cssClass: 'targetEndpoint ' + style ?? '',\r\n      maxConnections: 1,\r\n      isTarget: !isSource,\r\n      anchor: ['Continuous', { faces: ['bottom'] }],\r\n      overlays: this.getEndpointOverlays(isSource),\r\n      dropOptions: { hoverClass: 'hover', activeClass: 'active' },\r\n      events: {\r\n        click: (endpointOrOverlay: PlumbType) => {\r\n          this.onChangeLabel(endpointOrOverlay, isSource, pipelineDataSourceGuid);\r\n        },\r\n      },\r\n    };\r\n    return targetEndpoint;\r\n  }\r\n\r\n  private getEndpointOverlays(isSource: boolean) {\r\n    return [\r\n      [\r\n        'Label', {\r\n          id: 'endpointLabel',\r\n          location: [0.5, isSource ? 0 : 1],\r\n          label: 'Default',\r\n          cssClass: isSource ? 'endpointSourceLabel' : 'endpointTargetLabel',\r\n        },\r\n      ],\r\n    ];\r\n  }\r\n\r\n  private onChangeLabel(endpointOrOverlay: PlumbType, isSource: boolean, pipelineDataSourceGuid: string) {\r\n    if (!this.pipelineModel.Pipeline.AllowEdit) { return; }\r\n\r\n    const overlay: PlumbType = endpointOrOverlay.getOverlay ? endpointOrOverlay.getOverlay('endpointLabel') : endpointOrOverlay;\r\n    const data: RenameStreamDialogData = {\r\n      pipelineDataSourceGuid,\r\n      isSource,\r\n      label: overlay.label,\r\n    };\r\n    this.dialogRef = this.dialog.open(RenameStreamComponent, {\r\n      autoFocus: false,\r\n      data,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    this.dialogRef.afterClosed().subscribe(newLabel => {\r\n      if (!newLabel) { return; }\r\n      overlay.setLabel(newLabel);\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private bindEvents() {\r\n    this.instance.bind('connectionDetached', (info: PlumbType) => {\r\n      if (this.bulkDelete) { return; }\r\n      const domDataSource: HTMLElement = info.target;\r\n      const pipelineDataSource = this.pipelineModel.DataSources.find(\r\n        pipelineDS => pipelineDS.EntityGuid === domDataSource.id.replace(dataSrcIdPrefix, '')\r\n      );\r\n      const dataSource = this.dataSources.find(ds => ds.PartAssemblyAndType === pipelineDataSource.PartAssemblyAndType);\r\n      const label: string = info.targetEndpoint.getOverlay('endpointLabel').label;\r\n      const isDynamic = !dataSource.In.some(name => this.getEndpointInfo(name, false).name === label);\r\n      if (isDynamic) {\r\n        this.instance.deleteEndpoint(info.targetEndpoint);\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      } else {\r\n        setTimeout(() => { this.onConnectionsChanged(); });\r\n      }\r\n    });\r\n\r\n    this.instance.bind('connection', (info: PlumbType) => {\r\n      if (info.sourceId === info.targetId) {\r\n        setTimeout(() => {\r\n          this.instance.deleteConnection(info.connection, { fireEvent: false });\r\n          setTimeout(() => { this.onConnectionsChanged(); });\r\n        });\r\n        return;\r\n      }\r\n      const endpointLabel: PlumbType = info.targetEndpoint.getOverlay('endpointLabel');\r\n      const labelPrompt: string = endpointLabel.getLabel();\r\n      const endpoints: PlumbType[] = this.instance.getEndpoints(info.target.id);\r\n      const targetEndpointHasSameLabel = endpoints.some(endpoint => {\r\n        const label: string = endpoint.getOverlay('endpointLabel').getLabel();\r\n        return label === labelPrompt &&\r\n          info.targetEndpoint.id !== endpoint.id &&\r\n          (endpoint.canvas as HTMLCanvasElement).classList.contains('targetEndpoint');\r\n      });\r\n      if (targetEndpointHasSameLabel) {\r\n        endpointLabel.setLabel(`PleaseRename${Math.floor(Math.random() * 99999)}`);\r\n      }\r\n      setTimeout(() => { this.onConnectionsChanged(); });\r\n    });\r\n  }\r\n\r\n  private getEndpointInfo(endpointName: string, isDynamic: boolean): EndpointInfo {\r\n    let name: string;\r\n    let required: boolean;\r\n\r\n    if (isDynamic) {\r\n      name = endpointName;\r\n      required = false;\r\n    } else {\r\n      const trimmed = endpointName.trim();\r\n      required = trimmed.endsWith('*');\r\n      name = !required ? trimmed : trimmed.substring(0, trimmed.length - 1);\r\n    }\r\n\r\n    const endpointInfo: EndpointInfo = {\r\n      name,\r\n      required,\r\n    };\r\n    return endpointInfo;\r\n  }\r\n}\r\n","<div #domRoot id=\"pipeline-root\" *ngIf=\"(templateModel$ | async) as templateModel\">\r\n  <!-- do not use trackBy, jsPlumb drag stops working properly after delete -->\r\n  <ng-container *ngIf=\"!hardReset\">\r\n    <div #domDataSource *ngFor=\"let dataSource of templateModel.pipelineDataSources\"\r\n      [id]=\"dataSrcIdPrefix + dataSource.EntityGuid\" class=\"dataSource\" [ngStyle]=\"{\r\n        'top': dataSource.VisualDesignerData.Top + 'px',\r\n        'left': dataSource.VisualDesignerData.Left + 'px',\r\n        'min-width': dataSource.VisualDesignerData.Width ? dataSource.VisualDesignerData.Width + 'px' : null\r\n      }\" [ngClass]=\"{\r\n        'show-details': templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\r\n      }\">\r\n\r\n      <div class=\"actions left\">\r\n        <mat-icon class=\"type-info\" [title]=\"templateModel.typeInfos[dataSource.EntityGuid].UiHint\">\r\n          {{ templateModel.typeInfos[dataSource.EntityGuid].Icon }}\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"configure\" title=\"Configure data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].EnableConfig\"\r\n          (click)=\"configureDataSource(dataSource)\">\r\n          settings\r\n        </mat-icon>\r\n\r\n        <mat-icon class=\"help\" title=\"Help for this data source\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.typeInfos[dataSource.EntityGuid].HelpLink\"\r\n          (click)=\"openHelp(templateModel.typeInfos[dataSource.EntityGuid].HelpLink)\">\r\n          help_outline\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"actions right\">\r\n        <mat-icon class=\"delete\" title=\"Delete\" appMousedownStopPropagation\r\n          *ngIf=\"templateModel.allowEdit && !isOutDataSource(dataSource)\" (click)=\"remove(dataSource)\">\r\n          delete\r\n        </mat-icon>\r\n      </div>\r\n\r\n      <div class=\"name\" title=\"Click to edit name\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editName(dataSource)\">\r\n        <span>{{ dataSource.Name || '(no name)' }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <div class=\"description\" title=\"Click to edit description\" appMousedownStopPropagation\r\n        (click)=\"templateModel.allowEdit && editDescription(dataSource)\">\r\n        <span>{{ dataSource.Description }}</span>\r\n        <mat-icon class=\"show-hover-inline\">edit</mat-icon>\r\n      </div>\r\n      <br>\r\n\r\n      <ng-container\r\n        *ngIf=\"templateModel.showDataSourceDetails && templateModel.dataSourceConfigs[dataSource.EntityId]?.length\">\r\n        <hr style=\"margin: 0\">\r\n        <table class=\"configs\">\r\n          <tr class=\"config\" *ngFor=\"let config of templateModel.dataSourceConfigs[dataSource.EntityId]\">\r\n            <td class=\"config-name\" [title]=\"config.name\">{{ config.name }}</td>\r\n            <td class=\"config-value\" [title]=\"config.value\">{{ config.value }}</td>\r\n          </tr>\r\n        </table>\r\n      </ng-container>\r\n\r\n      <div class=\"typename\" [title]=\"dataSource.PartAssemblyAndType\">\r\n        Type: {{ getTypeName(dataSource.PartAssemblyAndType) }}\r\n      </div>\r\n\r\n      <mat-icon class=\"add-endpoint\" title=\"Drag a new Out-Connection\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicOut\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n\r\n      <mat-icon class=\"many-in\" title=\"This data source supports multiple In-Connections\"\r\n        *ngIf=\"templateModel.allowEdit && templateModel.typeInfos[dataSource.EntityGuid].DynamicIn\">\r\n        arrow_drop_up\r\n      </mat-icon>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewInit, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { PipelineDataSource, PipelineResultStream, VisualDesignerData } from '../models';\r\nimport { QueryDefinitionService } from '../services/query-definition.service';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateTypeInfos } from './plumb-editor.helpers';\r\nimport { PlumbEditorTemplateModel } from './plumb-editor.models';\r\nimport { dataSrcIdPrefix, Plumber } from './plumber.helper';\r\n\r\nconst jsPlumbUrl = 'https://cdnjs.cloudflare.com/ajax/libs/jsPlumb/2.14.5/js/jsplumb.min.js';\r\n\r\n@Component({\r\n  selector: 'app-plumb-editor',\r\n  templateUrl: './plumb-editor.component.html',\r\n  styles: [':host { display: block; width: 100%; height: 100%; }'],\r\n  styleUrls: ['./plumb-editor.component.scss'],\r\n})\r\nexport class PlumbEditorComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('domRoot') private domRootRef: ElementRef<HTMLDivElement>;\r\n  @ViewChildren('domDataSource') private domDataSourcesRef: QueryList<ElementRef<HTMLDivElement>>;\r\n\r\n  dataSrcIdPrefix = dataSrcIdPrefix;\r\n  templateModel$: Observable<PlumbEditorTemplateModel>;\r\n  hardReset = false;\r\n\r\n  private plumber: Plumber;\r\n  private scriptLoaded$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private visualQueryService: VisualQueryService,\r\n    private queryDefinitionService: QueryDefinitionService,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts([{ test: 'jsPlumb', src: jsPlumbUrl }], () => {\r\n      this.scriptLoaded$.next(true);\r\n    });\r\n\r\n    this.subscription.add(\r\n      this.visualQueryService.putEntityCountOnConnections$.subscribe(result => {\r\n        this.plumber.putEntityCountOnConnections(result);\r\n      })\r\n    );\r\n\r\n    const pipelineDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel?.Pipeline.VisualDesignerData) ?? {}),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.templateModel$ = combineLatest([\r\n      this.visualQueryService.pipelineModel$,\r\n      this.visualQueryService.dataSources$,\r\n      pipelineDesignerData$,\r\n      this.visualQueryService.dataSourceConfigs$,\r\n    ]).pipe(\r\n      map(([pipelineModel, dataSources, pipelineDesignerData, dataSourceConfigs]) => {\r\n        if (pipelineModel == null || dataSources == null) { return; }\r\n\r\n        // workaround for jsPlumb not working with dom elements which it initialized on previously.\r\n        // This wipes dom entirely and gives us new elements\r\n        this.hardReset = true;\r\n        this.changeDetectorRef.detectChanges();\r\n        this.hardReset = false;\r\n        const templateModel: PlumbEditorTemplateModel = {\r\n          pipelineDataSources: pipelineModel.DataSources,\r\n          typeInfos: calculateTypeInfos(pipelineModel.DataSources, dataSources),\r\n          allowEdit: pipelineModel.Pipeline.AllowEdit,\r\n          showDataSourceDetails: pipelineDesignerData.ShowDataSourceDetails ?? false,\r\n          dataSourceConfigs,\r\n        };\r\n        return templateModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // https://stackoverflow.com/questions/37087864/execute-a-function-when-ngfor-finished-in-angular-2/37088348#37088348\r\n    const domDataSourcesLoaded$ = this.domDataSourcesRef.changes.pipe(map(() => true));\r\n\r\n    this.subscription.add(\r\n      combineLatest([this.scriptLoaded$, domDataSourcesLoaded$]).subscribe(([scriptLoaded, domDataSourcesLoaded]) => {\r\n        if (!scriptLoaded || !domDataSourcesLoaded) { return; }\r\n\r\n        this.plumber?.destroy();\r\n        this.plumber = new Plumber(\r\n          this.domRootRef.nativeElement,\r\n          this.visualQueryService.pipelineModel$.value,\r\n          this.visualQueryService.dataSources$.value,\r\n          this.onConnectionsChanged.bind(this),\r\n          this.onDragend.bind(this),\r\n          this.onDebugStream.bind(this),\r\n          this.dialog,\r\n          this.viewContainerRef,\r\n          this.changeDetectorRef,\r\n        );\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.plumber?.destroy();\r\n    this.scriptLoaded$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  onConnectionsChanged() {\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.changeConnections(connections, streamsOut);\r\n  }\r\n\r\n  onDragend(pipelineDataSourceGuid: string, position: VisualDesignerData) {\r\n    this.visualQueryService.changeDataSourcePosition(pipelineDataSourceGuid, position);\r\n  }\r\n\r\n  onDebugStream(stream: PipelineResultStream) {\r\n    this.visualQueryService.debugStream(stream);\r\n  }\r\n\r\n  configureDataSource(dataSource: PipelineDataSource) {\r\n    // ensure dataSource entity is saved\r\n    if (dataSource.EntityGuid.includes('unsaved')) {\r\n      this.visualQueryService.saveAndRun(true, false);\r\n    } else {\r\n      this.visualQueryService.editDataSource(dataSource);\r\n    }\r\n  }\r\n\r\n  getTypeName(partAssemblyAndType: string) {\r\n    const dataSource = this.visualQueryService.dataSources$.value.find(ds => ds.PartAssemblyAndType === partAssemblyAndType);\r\n    return this.queryDefinitionService.typeNameFilter(dataSource?.TypeNameForUi || partAssemblyAndType, 'className');\r\n  }\r\n\r\n  isOutDataSource(pipelineDataSource: PipelineDataSource) {\r\n    return pipelineDataSource.PartAssemblyAndType === eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType;\r\n  }\r\n\r\n  remove(pipelineDataSource: PipelineDataSource) {\r\n    if (!confirm(`Delete ${pipelineDataSource.Name} data source?`)) { return; }\r\n\r\n    this.plumber.removeEndpointsOnDataSource(pipelineDataSource.EntityGuid);\r\n    const connections = this.plumber.getAllConnections();\r\n    const streamsOut = this.plumber.getStreamsOut();\r\n    this.visualQueryService.removeDataSource(pipelineDataSource.EntityGuid, connections, streamsOut);\r\n  }\r\n\r\n  openHelp(url: string) {\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  editName(dataSource: PipelineDataSource) {\r\n    const newName = prompt('Rename data source', dataSource.Name)?.trim();\r\n    if (newName == null || newName === '') { return; }\r\n\r\n    this.visualQueryService.renameDataSource(dataSource.EntityGuid, newName);\r\n  }\r\n\r\n  editDescription(dataSource: PipelineDataSource) {\r\n    const newDescription = prompt('Edit description', dataSource.Description)?.trim();\r\n    if (newDescription == null) { return; }\r\n\r\n    this.visualQueryService.changeDataSourceDescription(dataSource.EntityGuid, newDescription);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"(pipelineModel$ | async) as pipelineModel\">\r\n\r\n  <div class=\"wrapper\">\r\n    <div class=\"actions\">\r\n      <button mat-raised-button class=\"action\" color=\"accent\" (click)=\"saveAndRunQuery(true, true)\">\r\n        Save and run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(false, true)\">\r\n        Run\r\n      </button>\r\n      <button mat-raised-button class=\"action\" (click)=\"saveAndRunQuery(true, false)\">\r\n        Save\r\n      </button>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">\r\n        <div>Query Parameters</div>\r\n        <div>\r\n          <button mat-icon-button tippy=\"Edit parameters\" (click)=\"editPipeline()\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button tippy=\"Query Params Docs\" (click)=\"openParamsHelp()\">\r\n            <mat-icon>info</mat-icon>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.Params?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.Params?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\">\r\n      <div class=\"title\">Test Parameters</div>\r\n      <ul class=\"values\" *ngIf=\"pipelineModel.Pipeline.TestParameters?.length\">\r\n        <li *ngFor=\"let param of pipelineModel.Pipeline.TestParameters?.split('\\n')\">\r\n          {{ param }}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n\r\n    <div class=\"parameters\" *ngIf=\"visualDesignerData$ | async as visualDesignerData\">\r\n      <mat-slide-toggle color=\"primary\" labelPosition=\"before\" [checked]=\"visualDesignerData.ShowDataSourceDetails\"\r\n        (change)=\"showDataSourceDetails($event)\">\r\n        Show DataSource Params\r\n      </mat-slide-toggle>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"(warnings$ | async) as warnings\">\r\n      <div class=\"warnings\" *ngIf=\"warnings.length\">\r\n        <div class=\"title\">\r\n          <span>Warnings</span>\r\n          <mat-icon style=\"color: red\">warning</mat-icon>\r\n        </div>\r\n        <ol class=\"values\">\r\n          <li *ngFor=\"let warning of warnings\" [innerHTML]=\"warning\">\r\n          </li>\r\n        </ol>\r\n      </div>\r\n    </ng-container>\r\n\r\n    <div class=\"description\" *ngIf=\"pipelineModel.Pipeline.Description\">\r\n      <div class=\"title\">Query Description</div>\r\n      <div>{{ pipelineModel.Pipeline.Description }}</div>\r\n    </div>\r\n\r\n    <div class=\"footer-actions\">\r\n      <button mat-raised-button class=\"action\" (click)=\"openRestApi()\">\r\n        <span>Use in JSON / REST API</span>\r\n        <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      </button>\r\n    </div>\r\n\r\n  </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { GoToDevRest } from '../../dev-rest';\r\nimport { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { calculateWarnings } from './run-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-run-explorer',\r\n  templateUrl: './run-explorer.component.html',\r\n  styleUrls: ['./run-explorer.component.scss'],\r\n})\r\nexport class RunExplorerComponent implements OnInit {\r\n  pipelineModel$: Observable<PipelineModel>;\r\n  warnings$: Observable<string[]>;\r\n  visualDesignerData$: Observable<Record<string, any>>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private context: Context,\r\n    private visualQueryService: VisualQueryService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.pipelineModel$ = this.visualQueryService.pipelineModel$.asObservable();\r\n    this.warnings$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => calculateWarnings(pipelineModel, this.context)),\r\n    );\r\n    this.visualDesignerData$ = this.visualQueryService.pipelineModel$.pipe(\r\n      map(pipelineModel => GeneralHelpers.tryParse(pipelineModel.Pipeline.VisualDesignerData) ?? {}),\r\n    );\r\n  }\r\n\r\n  editPipeline() {\r\n    this.visualQueryService.editPipelineEntity();\r\n  }\r\n\r\n  openParamsHelp() {\r\n    window.open('http://r.2sxc.org/QueryParams', '_blank');\r\n  }\r\n\r\n  saveAndRunQuery(save: boolean, run: boolean) {\r\n    this.visualQueryService.saveAndRun(save, run);\r\n  }\r\n\r\n  showDataSourceDetails(event: MatSlideToggleChange): void {\r\n    this.visualQueryService.showDataSourceDetails(event.checked);\r\n  }\r\n\r\n  openRestApi() {\r\n    const queryGuid = this.visualQueryService.pipelineModel$.value.Pipeline.EntityGuid;\r\n    this.router.navigate([GoToDevRest.getUrlQuery(queryGuid)], { relativeTo: this.route });\r\n  }\r\n}\r\n","import { Context } from '../../shared/services/context';\r\nimport { PipelineModel } from '../models';\r\n\r\n/**\r\n * Check if there are special warnings the developer should know.\r\n * Typically when the test ModuleId is different from the one we're currently working on\r\n */\r\nexport function calculateWarnings(pipelineModel: PipelineModel, context: Context) {\r\n  const warnings: string[] = [];\r\n\r\n  try {\r\n    const queryParams = pipelineModel.Pipeline.Params?.split(/\\r?\\n/) || [];\r\n    const testParams = pipelineModel.Pipeline.TestParameters?.split(/\\r?\\n/) || [];\r\n\r\n    queryParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Query Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const paramSyntax = /^[a-zA-Z0-9]+=(.*)$/gmi;\r\n      const matched = paramSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Query Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>key=value</code> <br>\r\n          or resolve to a token like: <br>\r\n          <code>key=[source:key]</code>\r\n        `);\r\n      }\r\n    });\r\n\r\n    testParams.forEach(param => {\r\n      param = param?.trim();\r\n      if (!param) { return; }\r\n\r\n      // Check if the syntax on Test Parameters is off.\r\n      // It should contain [...]=...\r\n      // But it's easy to forget the [ and ] brackets\r\n      const testParamSyntax = /^\\[[a-zA-Z]+:[a-zA-Z0-9]+\\]=(.*)$/gmi;\r\n      const matched = testParamSyntax.test(param);\r\n      if (!matched) {\r\n        warnings.push(`\r\n          A <em>Test Parameter</em> seems wrong: <br>\r\n          <code>${param}</code> <br>\r\n          It should use the syntax: <br>\r\n          <code>[source:key]=value</code>\r\n        `);\r\n      }\r\n\r\n      // Check if we should show the warning about the test ModuleId.\r\n      // This is because in the old days, the ModuleId wasn't auto-filled, so people had to add it as a test value.\r\n      // Now it's not necessary any more\r\n      const midRegex = /^\\[module:id\\]=([0-9]*)$/gmi;\r\n      const midMatch = midRegex.exec(param);\r\n      if (midMatch) {\r\n        const testMid = midMatch[1];\r\n        const urlMid = context.moduleId.toString();\r\n        if (testMid !== urlMid) {\r\n          warnings.push(`\r\n            Your test ModuleId (${testMid}) is different from the current ModuleId (${urlMid}).<br>\r\n            Note that 2sxc automatically provides the ModuleId - so you usually do not need to set it\r\n          `);\r\n        }\r\n      }\r\n\r\n      const oldMidRegex = /^\\[module:moduleid\\]=([0-9]*)$/gmi;\r\n      const oldMidMatch = oldMidRegex.exec(param);\r\n      if (oldMidMatch) {\r\n        warnings.push(`\r\n          You are using deprecated [Module:ModuleId] test parameter.<br>\r\n          Please use [Module:Id]\r\n        `);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.error('Something went wrong in calculateWarnings for params', error);\r\n  }\r\n\r\n  return warnings;\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\" *ngIf=\"sorted$ | async as sorted\">\r\n\r\n  <mat-slide-toggle labelPosition=\"before\" color=\"primary\" (change)=\"toggleDifficulty($event)\">\r\n    Show Advanced\r\n  </mat-slide-toggle>\r\n\r\n  <ng-container *ngFor=\"let group of sorted | keyvalue; trackBy: trackGroups\">\r\n    <div class=\"collapsible\" [tippy]=\"guiTypes[group.key].UiHint || group.key\" tippyShowDelay=\"750\"\r\n      (click)=\"toggleItem(group.key)\">\r\n      <mat-icon>{{ guiTypes[group.key].Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n      <span>{{ group.key }}</span>\r\n    </div>\r\n\r\n    <div class=\"list\" *ngIf=\"toggledItems.includes(group.key)\">\r\n      <div class=\"list-item\" *ngFor=\"let dataSource of group.value; trackBy: trackDataSources\"\r\n        [tippy]=\"dataSource.UiHint || dataSource.Name\" tippyShowDelay=\"750\" (click)=\"addDataSource(dataSource)\">\r\n        <mat-icon>{{ dataSource.Icon || guiTypes.Unknown.Icon }}</mat-icon>\r\n        <span>{{ dataSource.Name }}</span>\r\n      </div>\r\n    </div>\r\n  </ng-container>\r\n</div>\r\n","import { KeyValue } from '@angular/common';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\nimport { guiTypes } from '../plumb-editor/plumb-editor.helpers';\r\nimport { VisualQueryService } from '../services/visual-query.service';\r\nimport { filterAndSortDataSources } from './add-explorer.helpers';\r\n\r\n@Component({\r\n  selector: 'app-add-explorer',\r\n  templateUrl: './add-explorer.component.html',\r\n  styleUrls: ['./add-explorer.component.scss'],\r\n})\r\nexport class AddExplorerComponent implements OnInit, OnDestroy {\r\n  sorted$: Observable<SortedDataSources>;\r\n  toggledItems: string[] = [];\r\n  guiTypes = guiTypes;\r\n\r\n  private difficulties = eavConstants.pipelineDesigner.dataSourceDifficulties;\r\n  private difficulty$ = new BehaviorSubject(this.difficulties.default);\r\n\r\n  constructor(private visualQueryService: VisualQueryService) { }\r\n\r\n  ngOnInit() {\r\n    this.sorted$ = combineLatest([this.visualQueryService.dataSources$, this.difficulty$]).pipe(\r\n      map(([dataSources, difficulty]) => filterAndSortDataSources(dataSources, difficulty)),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.difficulty$.complete();\r\n  }\r\n\r\n  toggleDifficulty(event: MatSlideToggleChange) {\r\n    const difficulty = event.checked ? this.difficulties.advanced : this.difficulties.default;\r\n    this.difficulty$.next(difficulty);\r\n  }\r\n\r\n  addDataSource(dataSource: DataSource) {\r\n    this.visualQueryService.addDataSource(dataSource);\r\n  }\r\n\r\n  toggleItem(item: string) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledItems);\r\n  }\r\n\r\n  trackGroups(index: number, type: KeyValue<string, DataSource[]>) {\r\n    return type.key;\r\n  }\r\n\r\n  trackDataSources(index: number, dataSource: DataSource) {\r\n    return dataSource.PartAssemblyAndType;\r\n  }\r\n}\r\n","import cloneDeep from 'lodash-es/cloneDeep';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DataSource, SortedDataSources } from '../models';\r\n\r\nexport function filterAndSortDataSources(dataSources: DataSource[], maxDifficulty: number) {\r\n  if (!dataSources) { return; }\r\n\r\n  const cloned = cloneDeep(dataSources);\r\n\r\n  const filtered = cloned.filter(dataSource =>\r\n    dataSource.Difficulty <= maxDifficulty\r\n    && dataSource.PartAssemblyAndType !== eavConstants.pipelineDesigner.outDataSource.PartAssemblyAndType\r\n  );\r\n\r\n  filtered.sort((a, b) => a.Name.toLocaleLowerCase().localeCompare(b.Name.toLocaleLowerCase()));\r\n\r\n  const sorted: SortedDataSources = {};\r\n  for (const dataSource of filtered) {\r\n    const type = dataSource.PrimaryType;\r\n    if (sorted[type]) {\r\n      sorted[type].push(dataSource);\r\n    } else {\r\n      sorted[type] = [dataSource];\r\n    }\r\n  }\r\n\r\n  return sorted;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { edit } from '../../../../edit/edit.matcher';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '', component: VisualQueryComponent, children: [\r\n      GoToDevRest.route,\r\n      {\r\n        matcher: edit,\r\n        loadChildren: () => import('../../../../edit/edit.module').then(m => m.EditModule),\r\n        data: { history: false },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class VisualQueryRoutingModule { }\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Context } from '../shared/services/context';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { VisualQueryService } from './services/visual-query.service';\r\n\r\n@Component({\r\n  selector: 'app-visual-query',\r\n  templateUrl: './visual-query.component.html',\r\n  styleUrls: ['./visual-query.component.scss'],\r\n  providers: [VisualQueryService],\r\n})\r\nexport class VisualQueryComponent implements OnInit {\r\n  @ViewChild(PlumbEditorComponent) plumbEditor: PlumbEditorComponent;\r\n\r\n  explorer = {\r\n    run: 'run',\r\n    add: 'add'\r\n  };\r\n  activeExplorer = this.explorer.run;\r\n\r\n  constructor(private context: Context, private route: ActivatedRoute, private visualQueryService: VisualQueryService) {\r\n    this.context.init(this.route);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.visualQueryService.init();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    this.activeExplorer = (this.activeExplorer === explorer) ? null : explorer;\r\n  }\r\n\r\n  openHelp() {\r\n    window.open('http://r.2sxc.org/visual-query', '_blank');\r\n  }\r\n\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<div class=\"editor-root\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" tippy=\"Run\" [ngClass]=\"{ 'active': activeExplorer === explorer.run }\"\r\n      (click)=\"toggleExplorer(explorer.run)\">\r\n      <mat-icon>play_arrow</mat-icon>\r\n    </div>\r\n    <div class=\"button\" tippy=\"Add\" [ngClass]=\"{ 'active': activeExplorer === explorer.add }\"\r\n      (click)=\"toggleExplorer(explorer.add)\">\r\n      <mat-icon>add</mat-icon>\r\n    </div>\r\n    <div class=\"spacer\"></div>\r\n    <div class=\"button\" tippy=\"Help\" (click)=\"openHelp()\">\r\n      <mat-icon>help_outline</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-run-explorer [hidden]=\"activeExplorer !== explorer.run\"></app-run-explorer>\r\n\r\n  <app-add-explorer [hidden]=\"activeExplorer !== explorer.add\"></app-add-explorer>\r\n\r\n  <app-plumb-editor></app-plumb-editor>\r\n</div>\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { MetadataService } from '../permissions/services/metadata.service';\r\nimport { Context } from '../shared/services/context';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AddExplorerComponent } from './add-explorer/add-explorer.component';\r\nimport { PlumbEditorComponent } from './plumb-editor/plumb-editor.component';\r\nimport { RenameStreamComponent } from './plumb-editor/rename-stream/rename-stream.component';\r\nimport { QueryResultComponent } from './query-result/query-result.component';\r\nimport { RunExplorerComponent } from './run-explorer/run-explorer.component';\r\nimport { QueryDefinitionService } from './services/query-definition.service';\r\nimport { StreamErrorResultComponent } from './stream-error-result/stream-error-result.component';\r\nimport { VisualQueryRoutingModule } from './visual-query-routing.module';\r\nimport { VisualQueryComponent } from './visual-query.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    VisualQueryComponent,\r\n    RunExplorerComponent,\r\n    AddExplorerComponent,\r\n    PlumbEditorComponent,\r\n    QueryResultComponent,\r\n    StreamErrorResultComponent,\r\n    RenameStreamComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    SharedComponentsModule,\r\n    VisualQueryRoutingModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    MatTabsModule,\r\n    MatFormFieldModule,\r\n    ReactiveFormsModule,\r\n    MatSelectModule,\r\n    MatInputModule,\r\n    MatSlideToggleModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    QueryDefinitionService,\r\n    MetadataService,\r\n    ContentTypesService,\r\n  ],\r\n})\r\nexport class VisualQueryModule { }\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_visual-query_visual-query_module_ts.5ddc4ad8d9ef8b00.js"}