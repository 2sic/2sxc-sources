{"version":3,"file":"default-projects_eav-ui_src_app_shared_directives_mousedown-stop-propagation_directive_ts-pro-96cd25.js","mappings":"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","sources":["./projects/eav-ui/src/app/shared/directives/mousedown-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./node_modules/rxjs/dist/esm/internal/observable/interval.js","./node_modules/@angular/cdk/fesm2022/drag-drop.mjs"],"sourcesContent":["import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appMousedownStopPropagation]',\r\n  standalone: true\r\n})\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { asyncScheduler } from '../scheduler/async';\nimport { timer } from './timer';\nexport function interval(period = 0, scheduler = asyncScheduler) {\n    if (period < 0) {\n        period = 0;\n    }\n    return timer(period, period, scheduler);\n}\n","import * as i0 from '@angular/core';\nimport { signal, Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, EnvironmentInjector, createComponent, Injectable, Inject, InjectionToken, booleanAttribute, Directive, Optional, SkipSelf, Input, EventEmitter, Injector, afterNextRender, numberAttribute, Self, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport * as i1 from '@angular/cdk/scrolling';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { isFakeTouchstartFromScreenReader, isFakeMousedownFromScreenReader } from '@angular/cdk/a11y';\nimport { coerceElement, coerceNumberProperty, coerceArray } from '@angular/cdk/coercion';\nimport { _getEventTarget, normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge, BehaviorSubject } from 'rxjs';\nimport { takeUntil, map, take, tap, switchMap, startWith } from 'rxjs/operators';\nimport * as i1$1 from '@angular/cdk/bidi';\n\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n// Counter for unique cloned radio button names.\nlet cloneUniqueId = 0;\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    // Browsers throw an error when assigning the value of a file input programmatically.\n    if (clone.type !== 'file') {\n        clone.value = source.value;\n    }\n    // Radio button `name` attributes must be unique for radio button groups\n    // otherwise original radio buttons can lose their checked state\n    // once the clone is inserted in the DOM.\n    if (clone.type === 'radio' && clone.name) {\n        clone.name = `mat-clone-${clone.name}-${cloneUniqueId++}`;\n    }\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch { }\n    }\n}\n\n/** Gets a mutable version of an element's bounding `DOMRect`. */\nfunction getMutableClientRect(element) {\n    const rect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `DOMRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: rect.top,\n        right: rect.right,\n        bottom: rect.bottom,\n        left: rect.left,\n        width: rect.width,\n        height: rect.height,\n        x: rect.x,\n        y: rect.y,\n    };\n}\n/**\n * Checks whether some coordinates are within a `DOMRect`.\n * @param clientRect DOMRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `DOMRect`, as well as their bottom/right counterparts.\n * @param domRect `DOMRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustDomRect(domRect, top, left) {\n    domRect.top += top;\n    domRect.bottom = domRect.top + domRect.height;\n    domRect.left += left;\n    domRect.right = domRect.left + domRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a DOMRect.\n * @param rect DOMRect to check against.\n * @param threshold Threshold around the DOMRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearDomRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return (pointerY > top - yThreshold &&\n        pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold &&\n        pointerX < right + xThreshold);\n}\n\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document) {\n        this._document = _document;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element),\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = _getEventTarget(event);\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && target.contains(node)) {\n                adjustDomRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n    /**\n     * Gets the scroll position of the viewport. Note that we use the scrollX and scrollY directly,\n     * instead of going through the `ViewportRuler`, because the first value the ruler looks at is\n     * the top/left offset of the `document.documentElement` which works for most cases, but breaks\n     * if the element is offset by something like the `BlockScrollStrategy`.\n     */\n    getViewportScrollPosition() {\n        return { top: window.scrollY, left: window.scrollX };\n    }\n}\n\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n\n/**\n * Shallow-extends a stylesheet object with another stylesheet-like object.\n * Note that the keys in `source` have to be dash-cased.\n * @docs-private\n */\nfunction extendStyles(dest, source, importantProperties) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            const value = source[key];\n            if (value) {\n                dest.setProperty(key, value, importantProperties?.has(key) ? 'important' : '');\n            }\n            else {\n                dest.removeProperty(key);\n            }\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        'touch-action': enable ? '' : 'none',\n        '-webkit-user-drag': enable ? '' : 'none',\n        '-webkit-tap-highlight-color': enable ? '' : 'transparent',\n        'user-select': userSelect,\n        '-ms-user-select': userSelect,\n        '-webkit-user-select': userSelect,\n        '-moz-user-select': userSelect,\n    });\n}\n/**\n * Toggles whether an element is visible while preserving its dimensions.\n * @param element Element whose visibility to toggle\n * @param enable Whether the element should be visible.\n * @param importantProperties Properties to be set as `!important`.\n * @docs-private\n */\nfunction toggleVisibility(element, enable, importantProperties) {\n    extendStyles(element.style, {\n        position: enable ? '' : 'fixed',\n        top: enable ? '' : '0',\n        opacity: enable ? '' : '0',\n        left: enable ? '' : '-999em',\n    }, importantProperties);\n}\n/**\n * Combines a transform string with an optional other transform\n * that exited before the base transform was applied.\n */\nfunction combineTransforms(transform, initialTransform) {\n    return initialTransform && initialTransform != 'none'\n        ? transform + ' ' + initialTransform\n        : transform;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return (parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]));\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/** Inline styles to be set as `!important` while dragging. */\nconst importantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\nclass PreviewRef {\n    get element() {\n        return this._preview;\n    }\n    constructor(_document, _rootElement, _direction, _initialDomRect, _previewTemplate, _previewClass, _pickupPositionOnPage, _initialTransform, _zIndex) {\n        this._document = _document;\n        this._rootElement = _rootElement;\n        this._direction = _direction;\n        this._initialDomRect = _initialDomRect;\n        this._previewTemplate = _previewTemplate;\n        this._previewClass = _previewClass;\n        this._pickupPositionOnPage = _pickupPositionOnPage;\n        this._initialTransform = _initialTransform;\n        this._zIndex = _zIndex;\n    }\n    attach(parent) {\n        this._preview = this._createPreview();\n        parent.appendChild(this._preview);\n        // The null check is necessary for browsers that don't support the popover API.\n        // Note that we use a string access for compatibility with Closure.\n        if (supportsPopover(this._preview)) {\n            this._preview['showPopover']();\n        }\n    }\n    destroy() {\n        this._preview.remove();\n        this._previewEmbeddedView?.destroy();\n        this._preview = this._previewEmbeddedView = null;\n    }\n    setTransform(value) {\n        this._preview.style.transform = value;\n    }\n    getBoundingClientRect() {\n        return this._preview.getBoundingClientRect();\n    }\n    addClass(className) {\n        this._preview.classList.add(className);\n    }\n    getTransitionDuration() {\n        return getTransformTransitionDurationInMs(this._preview);\n    }\n    addEventListener(name, handler) {\n        this._preview.addEventListener(name, handler);\n    }\n    removeEventListener(name, handler) {\n        this._preview.removeEventListener(name, handler);\n    }\n    _createPreview() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this._previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._initialDomRect : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewEmbeddedView = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform = getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            preview = deepCloneNode(this._rootElement);\n            matchElementSize(preview, this._initialDomRect);\n            if (this._initialTransform) {\n                preview.style.transform = this._initialTransform;\n            }\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            'pointer-events': 'none',\n            // If the preview has a margin, it can throw off our positioning so we reset it. The reset\n            // value for `margin-right` needs to be `auto` when opened as a popover, because our\n            // positioning is always top/left based, but native popover seems to position itself\n            // to the top/right if `<html>` or `<body>` have `dir=\"rtl\"` (see #29604). Setting it\n            // to `auto` pushed it to the top/left corner in RTL and is a noop in LTR.\n            'margin': supportsPopover(preview) ? '0 auto 0 0' : '0',\n            'position': 'fixed',\n            'top': '0',\n            'left': '0',\n            'z-index': this._zIndex + '',\n        }, importantProperties);\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('popover', 'manual');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n}\n/** Checks whether a specific element supports the popover API. */\nfunction supportsPopover(element) {\n    return 'showPopover' in element;\n}\n\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions$1 = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/** Inline styles to be set as `!important` while dragging. */\nconst dragImportantProperties = new Set([\n    // Needs to be important, because some `mat-table` sets `position: sticky !important`. See #22781.\n    'position',\n]);\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        if (value !== this._disabled) {\n            this._disabled = value;\n            this._toggleNativeDragInteractions();\n            this._handles.forEach(handle => toggleNativeDragInteractions(handle, value));\n        }\n    }\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /**\n         * Whether the dragging sequence has been started. Doesn't\n         * necessarily mean that the element has been moved.\n         */\n        this._hasStartedDragging = signal(false);\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents;\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging()) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    const container = this._dropContainer;\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!container || (!container.isDragging() && !container.isReceiving())) {\n                        // Prevent the default action as soon as the dragging sequence is considered as\n                        // \"started\" since waiting for the next event can allow the device to begin scrolling.\n                        if (event.cancelable) {\n                            event.preventDefault();\n                        }\n                        this._hasStartedDragging.set(true);\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We prevent the default action down here so that we know that dragging has started. This is\n            // important for touch devices where doing this too early can unnecessarily block scrolling,\n            // if there's a dragging delay.\n            if (event.cancelable) {\n                event.preventDefault();\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                // If there's a position constraint function, we want the element's top/left to be at the\n                // specific position on the page. Use the initial position as a reference if that's the case.\n                const offset = this.constrainPosition ? this._initialDomRect : this._pickupPositionOnPage;\n                const activeTransform = this._activeTransform;\n                activeTransform.x = constrainedPointerPosition.x - offset.x + this._passiveTransform.x;\n                activeTransform.y = constrainedPointerPosition.y - offset.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta,\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        /** Handles a native `dragstart` event. */\n        this._nativeDragStart = (event) => {\n            if (this._handles.length) {\n                const targetHandle = this._getTargetHandle(event);\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    event.preventDefault();\n                }\n            }\n            else if (!this.disabled) {\n                // Usually this isn't necessary since the we prevent the default action in `pointerDown`,\n                // but some cases like dragging of links can slip through (see #24403).\n                event.preventDefault();\n            }\n        };\n        this.withRootElement(element).withParent(_config.parentDragRef || null);\n        this._parentPositions = new ParentPositionTracker(_document);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, this.disabled));\n        this._toggleNativeDragInteractions();\n        // Delete any lingering disabled handles that may have been destroyed. Note that we re-create\n        // the set, rather than iterate over it and filter out the destroyed handles, because while\n        // the ES spec allows for sets to be modified while they're being iterated over, some polyfills\n        // use an array internally which may throw an error.\n        const disabledHandles = new Set();\n        this._disabledHandles.forEach(handle => {\n            if (this._handles.indexOf(handle) > -1) {\n                disabledHandles.add(handle);\n            }\n        });\n        this._disabledHandles = disabledHandles;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n                element.addEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Sets the parent ref that the ref is nested in.  */\n    withParent(parent) {\n        this._parentDragRef = parent;\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            this._rootElement?.remove();\n        }\n        this._anchor?.remove();\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeListeners();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement =\n            this._rootElement =\n                this._ownerSVGElement =\n                    this._placeholderTemplate =\n                        this._previewTemplate =\n                            this._anchor =\n                                this._parentDragRef =\n                                    null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging() && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (!this._disabledHandles.has(handle) && this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n            toggleNativeDragInteractions(handle, true);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        if (this._disabledHandles.has(handle)) {\n            this._disabledHandles.delete(handle);\n            toggleNativeDragInteractions(handle, this.disabled);\n        }\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /**\n     * Sets the container into which to insert the preview element.\n     * @param value Container into which to insert the preview.\n     */\n    withPreviewContainer(value) {\n        this._previewContainer = value;\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeListeners() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n        this._getShadowRoot()?.removeEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        this._preview?.destroy();\n        this._preview = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        this._placeholder?.remove();\n        this._placeholderRef?.destroy();\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeListeners();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor =\n                this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging()) {\n            return;\n        }\n        this.released.next({ source: this, event });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(pointerPosition),\n                    dropPoint: pointerPosition,\n                    event,\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        // Needs to happen before the root element is moved.\n        const shadowRoot = this._getShadowRoot();\n        const dropContainer = this._dropContainer;\n        if (shadowRoot) {\n            // In some browsers the global `selectstart` that we maintain in the `DragDropRegistry`\n            // doesn't cross the shadow boundary so we have to prevent it at the shadow root (see #28792).\n            this._ngZone.runOutsideAngular(() => {\n                shadowRoot.addEventListener('selectstart', shadowDomSelectStart, activeCapturingEventOptions$1);\n            });\n        }\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const placeholder = (this._placeholder = this._createPlaceholderElement());\n            const anchor = (this._anchor =\n                this._anchor ||\n                    this._document.createComment(typeof ngDevMode === 'undefined' || ngDevMode ? 'cdk-drag-anchor' : ''));\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // There's no risk of transforms stacking when inside a drop container so\n            // we can keep the initial transform up to date any time dragging starts.\n            this._initialTransform = element.style.transform || '';\n            // Create the preview after the initial transform has\n            // been cached, because it can be affected by the transform.\n            this._preview = new PreviewRef(this._document, this._rootElement, this._direction, this._initialDomRect, this._previewTemplate || null, this.previewClass || null, this._pickupPositionOnPage, this._initialTransform, this._config.zIndex || 1000);\n            this._preview.attach(this._getPreviewInsertionPoint(parent, shadowRoot));\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            toggleVisibility(element, false, dragImportantProperties);\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            this.started.next({ source: this, event }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this, event });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Stop propagation if the item is inside another\n        // draggable so we don't start multiple drag sequences.\n        if (this._parentDragRef) {\n            event.stopPropagation();\n        }\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const target = _getEventTarget(event);\n        const isSyntheticEvent = !isTouchSequence &&\n            this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        const isFakeEvent = isTouchSequence\n            ? isFakeTouchstartFromScreenReader(event)\n            : isFakeMousedownFromScreenReader(event);\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (target && target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent || isFakeEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            const rootStyles = rootElement.style;\n            this._rootElementTapHighlight = rootStyles.webkitTapHighlightColor || '';\n            rootStyles.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasMoved = false;\n        this._hasStartedDragging.set(this._hasMoved);\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeListeners();\n        this._initialDomRect = this._rootElement.getBoundingClientRect();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(scrollEvent => this._updateOnScroll(scrollEvent));\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement =\n            previewTemplate && previewTemplate.template && !previewTemplate.matchSize\n                ? { x: 0, y: 0 }\n                : this._getPointerPositionInElement(this._initialDomRect, referenceElement, event);\n        const pointerPosition = (this._pickupPositionOnPage =\n            this._lastKnownPointerPosition =\n                this._getPointerPositionOnPage(event));\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        toggleVisibility(this._rootElement, true, dragImportantProperties);\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._initialDomRect =\n            this._boundaryRect =\n                this._previewRect =\n                    this._initialTransform =\n                        undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(pointerPosition);\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance, dropPoint: pointerPosition, event });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance,\n                dropPoint: pointerPosition,\n                event,\n            });\n            container.drop(this, currentIndex, this._initialIndex, this._initialContainer, isPointerOverContainer, distance, pointerPosition, event);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer &&\n            this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled\n                    ? this._initialIndex\n                    : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this),\n                });\n            });\n        }\n        // Dragging may have been interrupted as a result of the events above.\n        if (this.isDragging()) {\n            this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n            this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n            if (this.constrainPosition) {\n                this._applyPreviewTransform(x, y);\n            }\n            else {\n                this._applyPreviewTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n            }\n        }\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.addClass('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._applyPreviewTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = this._preview.getTransitionDuration();\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event ||\n                        (this._preview &&\n                            _getEventTarget(event) === this._preview.element &&\n                            event.propertyName === 'transform')) {\n                        this._preview?.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        // Stop pointer events on the preview so the user can't\n        // interact with it while the preview is animating.\n        placeholder.style.pointerEvents = 'none';\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(elementRect, referenceElement, event) {\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y,\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event)\n            ? // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n                // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n                // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n                // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n                // throwing an error. The value returned here will be incorrect, but since this only\n                // breaks inside a developer tool and the value is only used for secondary information,\n                // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n                event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }\n            : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition\n            ? this.constrainPosition(point, this, this._initialDomRect, this._pickupPositionInElement)\n            : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y =\n                this._pickupPositionOnPage.y -\n                    (this.constrainPosition ? this._pickupPositionInElement.y : 0);\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x =\n                this._pickupPositionOnPage.x -\n                    (this.constrainPosition ? this._pickupPositionInElement.x : 0);\n        }\n        if (this._boundaryRect) {\n            // If not using a custom constrain we need to account for the pickup position in the element\n            // otherwise we do not need to do this, as it has already been accounted for\n            const { x: pickupX, y: pickupY } = !this.constrainPosition\n                ? this._pickupPositionInElement\n                : { x: 0, y: 0 };\n            const boundaryRect = this._boundaryRect;\n            const { width: previewWidth, height: previewHeight } = this._getPreviewRect();\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewHeight - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewWidth - pickupX);\n            x = clamp$1(x, minX, maxX);\n            y = clamp$1(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n        element.removeEventListener('dragstart', this._nativeDragStart, activeEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const scale = 1 / this.scale;\n        const transform = getTransform(x * scale, y * scale);\n        const styles = this._rootElement.style;\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        // Should be excluded none because none + translate3d(x, y, x) is invalid css\n        if (this._initialTransform == null) {\n            this._initialTransform =\n                styles.transform && styles.transform != 'none' ? styles.transform : '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        styles.transform = combineTransforms(transform, this._initialTransform);\n    }\n    /**\n     * Applies a `transform` to the preview, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyPreviewTransform(x, y) {\n        // Only apply the initial transform if the preview is a clone of the original element, otherwise\n        // it could be completely different and the transform might not make sense anymore.\n        const initialTransform = this._previewTemplate?.template ? undefined : this._initialTransform;\n        const transform = getTransform(x, y);\n        this._preview.setTransform(combineTransforms(transform, initialTransform));\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        // Note: don't use `_clientRectAtStart` here, because we want the latest position.\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = _getEventTarget(event);\n            // DOMRect dimensions are based on the scroll position of the page and its parent\n            // node so we have to update the cached boundary DOMRect if the user has scrolled.\n            if (this._boundaryRect &&\n                target !== this._boundaryElement &&\n                target.contains(this._boundaryElement)) {\n                adjustDomRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        return (this._parentPositions.positions.get(this._document)?.scrollPosition ||\n            this._parentPositions.getViewportScrollPosition());\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (this._cachedShadowRoot === undefined) {\n            this._cachedShadowRoot = _getShadowRoot(this._rootElement);\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Gets the element into which the drag preview should be inserted. */\n    _getPreviewInsertionPoint(initialParent, shadowRoot) {\n        const previewContainer = this._previewContainer || 'global';\n        if (previewContainer === 'parent') {\n            return initialParent;\n        }\n        if (previewContainer === 'global') {\n            const documentRef = this._document;\n            // We can't use the body if the user is in fullscreen mode,\n            // because the preview will render under the fullscreen element.\n            // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n            return (shadowRoot ||\n                documentRef.fullscreenElement ||\n                documentRef.webkitFullscreenElement ||\n                documentRef.mozFullScreenElement ||\n                documentRef.msFullscreenElement ||\n                documentRef.body);\n        }\n        return coerceElement(previewContainer);\n    }\n    /** Lazily resolves and returns the dimensions of the preview. */\n    _getPreviewRect() {\n        // Cache the preview element rect if we haven't cached it already or if\n        // we cached it too early before the element dimensions were computed.\n        if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n            this._previewRect = this._preview\n                ? this._preview.getBoundingClientRect()\n                : this._initialDomRect;\n        }\n        return this._previewRect;\n    }\n    /** Gets a handle that is the target of an event. */\n    _getTargetHandle(event) {\n        return this._handles.find(handle => {\n            return event.target && (event.target === handle || handle.contains(event.target));\n        });\n    }\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp$1(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Callback invoked for `selectstart` events inside the shadow DOM. */\nfunction shadowDomSelectStart(event) {\n    event.preventDefault();\n}\n\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp(fromIndex, array.length - 1);\n    const to = clamp(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp(currentIndex, currentArray.length - 1);\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * Strategy that only supports sorting along a single axis.\n * Items are reordered using CSS transforms which allows for sorting to be animated.\n * @docs-private\n */\nclass SingleAxisSortStrategy {\n    constructor(_dragDropRegistry) {\n        this._dragDropRegistry = _dragDropRegistry;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /** Direction in which the list is oriented. */\n        this.orientation = 'vertical';\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            delta: 0,\n            overlaps: false,\n        };\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return null;\n        }\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentIndex = siblings.findIndex(currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem\n                ? item.getPlaceholderElement()\n                : sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            const transformAmount = Math.round(sibling.offset * (1 / sibling.drag.scale));\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = combineTransforms(`translate3d(${transformAmount}px, 0, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = combineTransforms(`translate3d(0, ${transformAmount}px, 0)`, sibling.initialTransform);\n                adjustDomRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n        return { previousIndex: currentIndex, currentIndex: newIndex };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        const newIndex = index == null || index < 0\n            ? // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // If we didn't find a new position reference, it means that either the item didn't start off\n        // in this container, or that the item requested to be inserted at the end of the list.\n        if (!newPositionReference &&\n            (newIndex == null || newIndex === -1 || newIndex < activeDraggables.length - 1) &&\n            this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            newPositionReference = activeDraggables[0];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else {\n            this._element.appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that usually `start` is called together with `enter` when an item goes into a new\n        // container. This will cache item positions, but we need to refresh them since the amount\n        // of items has changed.\n        this._cacheItemPositions();\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeDraggables = items.slice();\n        this._cacheItemPositions();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables?.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                const initialTransform = this._itemPositions.find(p => p.drag === item)?.initialTransform;\n                rootElement.style.transform = initialTransform || '';\n            }\n        });\n        this._itemPositions = [];\n        this._activeDraggables = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeDraggables;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this.orientation === 'horizontal' && this.direction === 'rtl'\n            ? this._itemPositions.slice().reverse()\n            : this._itemPositions;\n        return items.findIndex(currentItem => currentItem.drag === item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll(topDifference, leftDifference) {\n        // Since we know the amount that the user has scrolled we can shift all of the\n        // client rectangles ourselves. This is cheaper than re-measuring everything and\n        // we can avoid inconsistent behavior where we might be measuring the element before\n        // its position has changed.\n        this._itemPositions.forEach(({ clientRect }) => {\n            adjustDomRect(clientRect, topDifference, leftDifference);\n        });\n        // We need two loops for this, because we want all of the cached\n        // positions to be up-to-date before we re-sort the item.\n        this._itemPositions.forEach(({ drag }) => {\n            if (this._dragDropRegistry.isDragging(drag)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                drag._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        this._element = container;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this.orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables\n            .map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return {\n                drag,\n                offset: 0,\n                initialTransform: elementToMeasure.style.transform || '',\n                clientRect: getMutableClientRect(elementToMeasure),\n            };\n        })\n            .sort((a, b) => {\n            return isHorizontal\n                ? a.clientRect.left - b.clientRect.left\n                : a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        let itemOffset = isHorizontal\n            ? newPosition.left - currentPosition.left\n            : newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal\n                ? newPosition.width - currentPosition.width\n                : newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this.orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this.orientation === 'horizontal';\n        const index = this._itemPositions.findIndex(({ drag, clientRect }) => {\n            // Skip the item itself.\n            if (drag === item) {\n                return false;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag &&\n                    this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal\n                ? // Round these down since most browsers report client rects with\n                    // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                    pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right)\n                : pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n}\n\n/**\n * Strategy that only supports sorting on a list that might wrap.\n * Items are reordered by moving their DOM nodes around.\n * @docs-private\n */\nclass MixedSortStrategy {\n    constructor(_document, _dragDropRegistry) {\n        this._document = _document;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occurred and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = {\n            drag: null,\n            deltaX: 0,\n            deltaY: 0,\n            overlaps: false,\n        };\n        /**\n         * Keeps track of the relationship between a node and its next sibling. This information\n         * is used to restore the DOM to the order it was in before dragging started.\n         */\n        this._relatedNodes = [];\n    }\n    /**\n     * To be called when the drag sequence starts.\n     * @param items Items that are currently in the list.\n     */\n    start(items) {\n        const childNodes = this._element.childNodes;\n        this._relatedNodes = [];\n        for (let i = 0; i < childNodes.length; i++) {\n            const node = childNodes[i];\n            this._relatedNodes.push([node, node.nextSibling]);\n        }\n        this.withItems(items);\n    }\n    /**\n     * To be called when an item is being sorted.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    sort(item, pointerX, pointerY, pointerDelta) {\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n        const previousSwap = this._previousSwap;\n        if (newIndex === -1 || this._activeItems[newIndex] === item) {\n            return null;\n        }\n        const toSwapWith = this._activeItems[newIndex];\n        // Prevent too many swaps over the same item.\n        if (previousSwap.drag === toSwapWith &&\n            previousSwap.overlaps &&\n            previousSwap.deltaX === pointerDelta.x &&\n            previousSwap.deltaY === pointerDelta.y) {\n            return null;\n        }\n        const previousIndex = this.getItemIndex(item);\n        const current = item.getPlaceholderElement();\n        const overlapElement = toSwapWith.getRootElement();\n        if (newIndex > previousIndex) {\n            overlapElement.after(current);\n        }\n        else {\n            overlapElement.before(current);\n        }\n        moveItemInArray(this._activeItems, previousIndex, newIndex);\n        const newOverlapElement = this._getRootNode().elementFromPoint(pointerX, pointerY);\n        // Note: it's tempting to save the entire `pointerDelta` object here, however that'll\n        // break this functionality, because the same object is passed for all `sort` calls.\n        previousSwap.deltaX = pointerDelta.x;\n        previousSwap.deltaY = pointerDelta.y;\n        previousSwap.drag = toSwapWith;\n        previousSwap.overlaps =\n            overlapElement === newOverlapElement || overlapElement.contains(newOverlapElement);\n        return {\n            previousIndex,\n            currentIndex: newIndex,\n        };\n    }\n    /**\n     * Called when an item is being moved into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        let enterIndex = index == null || index < 0\n            ? this._getItemIndexFromPointerPosition(item, pointerX, pointerY)\n            : index;\n        // In some cases (e.g. when the container has padding) we might not be able to figure\n        // out which item to insert the dragged item next to, because the pointer didn't overlap\n        // with anything. In that case we find the item that's closest to the pointer.\n        if (enterIndex === -1) {\n            enterIndex = this._getClosestItemIndexToPointer(item, pointerX, pointerY);\n        }\n        const targetItem = this._activeItems[enterIndex];\n        const currentIndex = this._activeItems.indexOf(item);\n        if (currentIndex > -1) {\n            this._activeItems.splice(currentIndex, 1);\n        }\n        if (targetItem && !this._dragDropRegistry.isDragging(targetItem)) {\n            this._activeItems.splice(enterIndex, 0, item);\n            targetItem.getRootElement().before(item.getPlaceholderElement());\n        }\n        else {\n            this._activeItems.push(item);\n            this._element.appendChild(item.getPlaceholderElement());\n        }\n    }\n    /** Sets the items that are currently part of the list. */\n    withItems(items) {\n        this._activeItems = items.slice();\n    }\n    /** Assigns a sort predicate to the strategy. */\n    withSortPredicate(predicate) {\n        this._sortPredicate = predicate;\n    }\n    /** Resets the strategy to its initial state before dragging was started. */\n    reset() {\n        const root = this._element;\n        const previousSwap = this._previousSwap;\n        // Moving elements around in the DOM can break things like the `@for` loop, because it\n        // uses comment nodes to know where to insert elements. To avoid such issues, we restore\n        // the DOM nodes in the list to their original order when the list is reset.\n        // Note that this could be simpler if we just saved all the nodes, cleared the root\n        // and then appended them in the original order. We don't do it, because it can break\n        // down depending on when the snapshot was taken. E.g. we may end up snapshotting the\n        // placeholder element which is removed after dragging.\n        for (let i = this._relatedNodes.length - 1; i > -1; i--) {\n            const [node, nextSibling] = this._relatedNodes[i];\n            if (node.parentNode === root && node.nextSibling !== nextSibling) {\n                if (nextSibling === null) {\n                    root.appendChild(node);\n                }\n                else if (nextSibling.parentNode === root) {\n                    root.insertBefore(node, nextSibling);\n                }\n            }\n        }\n        this._relatedNodes = [];\n        this._activeItems = [];\n        previousSwap.drag = null;\n        previousSwap.deltaX = previousSwap.deltaY = 0;\n        previousSwap.overlaps = false;\n    }\n    /**\n     * Gets a snapshot of items currently in the list.\n     * Can include items that we dragged in from another list.\n     */\n    getActiveItemsSnapshot() {\n        return this._activeItems;\n    }\n    /** Gets the index of a specific item. */\n    getItemIndex(item) {\n        return this._activeItems.indexOf(item);\n    }\n    /** Used to notify the strategy that the scroll position has changed. */\n    updateOnScroll() {\n        this._activeItems.forEach(item => {\n            if (this._dragDropRegistry.isDragging(item)) {\n                // We need to re-sort the item manually, because the pointer move\n                // events won't be dispatched while the user is scrolling.\n                item._sortFromLastPointerPosition();\n            }\n        });\n    }\n    withElementContainer(container) {\n        if (container !== this._element) {\n            this._element = container;\n            this._rootNode = undefined;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY) {\n        const elementAtPoint = this._getRootNode().elementFromPoint(Math.floor(pointerX), Math.floor(pointerY));\n        const index = elementAtPoint\n            ? this._activeItems.findIndex(item => {\n                const root = item.getRootElement();\n                return elementAtPoint === root || root.contains(elementAtPoint);\n            })\n            : -1;\n        return index === -1 || !this._sortPredicate(index, item) ? -1 : index;\n    }\n    /** Lazily resolves the list's root node. */\n    _getRootNode() {\n        // Resolve the root node lazily to ensure that the drop list is in its final place in the DOM.\n        if (!this._rootNode) {\n            this._rootNode = _getShadowRoot(this._element) || this._document;\n        }\n        return this._rootNode;\n    }\n    /**\n     * Finds the index of the item that's closest to the item being dragged.\n     * @param item Item being dragged.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _getClosestItemIndexToPointer(item, pointerX, pointerY) {\n        if (this._activeItems.length === 0) {\n            return -1;\n        }\n        if (this._activeItems.length === 1) {\n            return 0;\n        }\n        let minDistance = Infinity;\n        let minIndex = -1;\n        // Find the Euclidean distance (https://en.wikipedia.org/wiki/Euclidean_distance) between each\n        // item and the pointer, and return the smallest one. Note that this is a bit flawed in that DOM\n        // nodes are rectangles, not points, so we use the top/left coordinates. It should be enough\n        // for our purposes.\n        for (let i = 0; i < this._activeItems.length; i++) {\n            const current = this._activeItems[i];\n            if (current !== item) {\n                const { x, y } = current.getRootElement().getBoundingClientRect();\n                const distance = Math.hypot(pointerX - x, pointerY - y);\n                if (distance < minDistance) {\n                    minDistance = distance;\n                    minIndex = i;\n                }\n            }\n        }\n        return minIndex;\n    }\n}\n\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/** Vertical direction in which we can auto-scroll. */\nvar AutoScrollVerticalDirection;\n(function (AutoScrollVerticalDirection) {\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"UP\"] = 1] = \"UP\";\n    AutoScrollVerticalDirection[AutoScrollVerticalDirection[\"DOWN\"] = 2] = \"DOWN\";\n})(AutoScrollVerticalDirection || (AutoScrollVerticalDirection = {}));\n/** Horizontal direction in which we can auto-scroll. */\nvar AutoScrollHorizontalDirection;\n(function (AutoScrollHorizontalDirection) {\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"NONE\"] = 0] = \"NONE\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"LEFT\"] = 1] = \"LEFT\";\n    AutoScrollHorizontalDirection[AutoScrollHorizontalDirection[\"RIGHT\"] = 2] = \"RIGHT\";\n})(AutoScrollHorizontalDirection || (AutoScrollHorizontalDirection = {}));\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /** Number of pixels to scroll for each frame when auto-scrolling an element. */\n        this.autoScrollStep = 2;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Function that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Emits when a dragging sequence is started in a list connected to the current one. */\n        this.receivingStarted = new Subject();\n        /** Emits when a dragging sequence is stopped from a list connected to the current one. */\n        this.receivingStopped = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Draggable items in the container. */\n        this._draggables = [];\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Elements that can be scrolled while the user is dragging. */\n        this._scrollableElements = [];\n        /** Direction of the list's layout. */\n        this._direction = 'ltr';\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                const scrollStep = this.autoScrollStep;\n                if (this._verticalScrollDirection === AutoScrollVerticalDirection.UP) {\n                    node.scrollBy(0, -scrollStep);\n                }\n                else if (this._verticalScrollDirection === AutoScrollVerticalDirection.DOWN) {\n                    node.scrollBy(0, scrollStep);\n                }\n                if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.LEFT) {\n                    node.scrollBy(-scrollStep, 0);\n                }\n                else if (this._horizontalScrollDirection === AutoScrollHorizontalDirection.RIGHT) {\n                    node.scrollBy(scrollStep, 0);\n                }\n            });\n        };\n        const coercedElement = (this.element = coerceElement(element));\n        this._document = _document;\n        this.withOrientation('vertical').withElementContainer(coercedElement);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this.receivingStarted.complete();\n        this.receivingStopped.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        this._draggingStarted();\n        this._notifyReceivingSiblings();\n    }\n    /**\n     * Attempts to move an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this._draggingStarted();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        if (index == null && this.sortingDisabled) {\n            index = this._draggables.indexOf(item);\n        }\n        this._sortStrategy.enter(item, pointerX, pointerY, index);\n        // Note that this usually happens inside `_draggingStarted` as well, but the dimensions\n        // can change when the sort strategy moves the item around inside `enter`.\n        this._cacheParentPositions();\n        // Notify siblings at the end so that the item has been inserted into the `activeDraggables`.\n        this._notifyReceivingSiblings();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousIndex Index of the item when dragging started.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param event Event that triggered the dropping sequence.\n     *\n     * @breaking-change 15.0.0 `previousIndex` and `event` parameters to become required.\n     */\n    drop(item, currentIndex, previousIndex, previousContainer, isPointerOverContainer, distance, dropPoint, event = {}) {\n        this._reset();\n        this.dropped.next({\n            item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance,\n            dropPoint,\n            event,\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._sortStrategy.withItems(this._draggables);\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        if (this._sortStrategy instanceof SingleAxisSortStrategy) {\n            this._sortStrategy.direction = direction;\n        }\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        if (orientation === 'mixed') {\n            this._sortStrategy = new MixedSortStrategy(this._document, this._dragDropRegistry);\n        }\n        else {\n            const strategy = new SingleAxisSortStrategy(this._dragDropRegistry);\n            strategy.direction = this._direction;\n            strategy.orientation = orientation;\n            this._sortStrategy = strategy;\n        }\n        this._sortStrategy.withElementContainer(this._container);\n        this._sortStrategy.withSortPredicate((index, item) => this.sortPredicate(index, item, this));\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = this._container;\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /**\n     * Configures the drop list so that a different element is used as the container for the\n     * dragged items. This is useful for the cases when one might not have control over the\n     * full DOM that sets up the dragging.\n     * Note that the alternate container needs to be a descendant of the drop list.\n     * @param container New element container to be assigned.\n     */\n    withElementContainer(container) {\n        if (container === this._container) {\n            return this;\n        }\n        const element = coerceElement(this.element);\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            container !== element &&\n            !element.contains(container)) {\n            throw new Error('Invalid DOM structure for drop list. Alternate container element must be a descendant of the drop list.');\n        }\n        const oldContainerIndex = this._scrollableElements.indexOf(this._container);\n        const newContainerIndex = this._scrollableElements.indexOf(container);\n        if (oldContainerIndex > -1) {\n            this._scrollableElements.splice(oldContainerIndex, 1);\n        }\n        if (newContainerIndex > -1) {\n            this._scrollableElements.splice(newContainerIndex, 1);\n        }\n        if (this._sortStrategy) {\n            this._sortStrategy.withElementContainer(container);\n        }\n        this._cachedShadowRoot = null;\n        this._scrollableElements.unshift(container);\n        this._container = container;\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        return this._isDragging\n            ? this._sortStrategy.getItemIndex(item)\n            : this._draggables.indexOf(item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !this._domRect ||\n            !isPointerNearDomRect(this._domRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const result = this._sortStrategy.sort(item, pointerX, pointerY, pointerDelta);\n        if (result) {\n            this.sorted.next({\n                previousIndex: result.previousIndex,\n                currentIndex: result.currentIndex,\n                container: this,\n                item,\n            });\n        }\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n        let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearDomRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, this._direction, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const domRect = {\n                width,\n                height,\n                top: 0,\n                right: width,\n                bottom: height,\n                left: 0,\n            };\n            verticalScrollDirection = getVerticalScrollDirection(domRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(domRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode &&\n            (verticalScrollDirection !== this._verticalScrollDirection ||\n                horizontalScrollDirection !== this._horizontalScrollDirection ||\n                scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Starts the dragging sequence within the list. */\n    _draggingStarted() {\n        const styles = this._container.style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        if ((typeof ngDevMode === 'undefined' || ngDevMode) &&\n            // Prevent the check from running on apps not using an alternate container. Ideally we\n            // would always run it, but introducing it at this stage would be a breaking change.\n            this._container !== coerceElement(this.element)) {\n            for (const drag of this._draggables) {\n                if (!drag.isDragging() && drag.getVisibleElement().parentNode !== this._container) {\n                    throw new Error('Invalid DOM structure for drop list. All items must be placed directly inside of the element container.');\n                }\n            }\n        }\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._sortStrategy.start(this._draggables);\n        this._cacheParentPositions();\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `DOMRect`.\n        this._domRect = this._parentPositions.positions.get(this._container).clientRect;\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = this._container.style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._sortStrategy.reset();\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return this._domRect != null && isInsideClientRect(this._domRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!this._domRect ||\n            !isInsideClientRect(this._domRect, x, y) ||\n            !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        // The `DOMRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === this._container || this._container.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling, items) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling) &&\n            items.every(item => {\n                // Note that we have to add an exception to the `enterPredicate` for items that started off\n                // in this drop list. The drag ref has logic that allows an item to return to its initial\n                // container, if it has left the initial container and none of the connected containers\n                // allow it to enter. See `DragRef._updateActiveDropContainer` for more context.\n                return this.enterPredicate(item, this) || this._draggables.indexOf(item) > -1;\n            })) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n            this.receivingStarted.next({\n                initiator: sibling,\n                receiver: this,\n                items,\n            });\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n        this.receivingStopped.next({ initiator: sibling, receiver: this });\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry\n            .scrolled(this._getShadowRoot())\n            .subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    this._sortStrategy.updateOnScroll(scrollDifference.top, scrollDifference.left);\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(this._container);\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n    /** Notifies any siblings that may potentially receive the item. */\n    _notifyReceivingSiblings() {\n        const draggedItems = this._sortStrategy\n            .getActiveItemsSnapshot()\n            .filter(item => item.isDragging());\n        this._siblings.forEach(sibling => sibling._startReceiving(this, draggedItems));\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return AutoScrollVerticalDirection.UP;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return AutoScrollVerticalDirection.DOWN;\n    }\n    return AutoScrollVerticalDirection.NONE;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return AutoScrollHorizontalDirection.LEFT;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return AutoScrollHorizontalDirection.RIGHT;\n    }\n    return AutoScrollHorizontalDirection.NONE;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param direction Layout direction of the drop list.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, direction, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = AutoScrollVerticalDirection.NONE;\n    let horizontalScrollDirection = AutoScrollHorizontalDirection.NONE;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === AutoScrollVerticalDirection.UP) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = AutoScrollVerticalDirection.UP;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = AutoScrollVerticalDirection.DOWN;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (direction === 'rtl') {\n            if (computedHorizontal === AutoScrollHorizontalDirection.RIGHT) {\n                // In RTL `scrollLeft` will be negative when scrolled.\n                if (scrollLeft < 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n                }\n            }\n            else if (element.scrollWidth + scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n            }\n        }\n        else {\n            if (computedHorizontal === AutoScrollHorizontalDirection.LEFT) {\n                if (scrollLeft > 0) {\n                    horizontalScrollDirection = AutoScrollHorizontalDirection.LEFT;\n                }\n            }\n            else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n                horizontalScrollDirection = AutoScrollHorizontalDirection.RIGHT;\n            }\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true,\n});\n/** Keeps track of the apps currently containing drag items. */\nconst activeApps = new Set();\n/**\n * Component used to load the drag&drop reset styles.\n * @docs-private\n */\nclass _ResetsLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _ResetsLoader, isStandalone: true, selector: \"ng-component\", host: { attributes: { \"cdk-drag-resets-container\": \"\" } }, ngImport: i0, template: '', isInline: true, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _ResetsLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, host: { 'cdk-drag-resets-container': '' }, styles: [\"@layer cdk-resets{.cdk-drag-preview{background:none;border:none;padding:0;color:inherit}}.cdk-drag-placeholder *,.cdk-drag-preview *{pointer-events:none !important}\"] }]\n        }] });\n// TODO(crisbeto): remove generics when making breaking changes.\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        this._appRef = inject(ApplicationRef);\n        this._environmentInjector = inject(EnvironmentInjector);\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = signal([]);\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Predicate function to check if an item is being dragged.  Moved out into a property,\n         * because it'll be called a lot and we don't want to create a new function every time.\n         */\n        this._draggingPredicate = (item) => item.isDragging();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /**\n         * Emits when the viewport has been scrolled while the user is dragging an item.\n         * @deprecated To be turned into a private member. Use the `scrolled` method instead.\n         * @breaking-change 13.0.0\n         */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                event.preventDefault();\n            }\n        };\n        /** Event listener for `touchmove` that is bound even if no dragging is happening. */\n        this._persistentTouchmoveListener = (event) => {\n            if (this._activeDragInstances().length > 0) {\n                // Note that we only want to prevent the default action after dragging has actually started.\n                // Usually this is the same time at which the item is added to the `_activeDragInstances`,\n                // but it could be pushed back if the user has set up a drag delay or threshold.\n                if (this._activeDragInstances().some(this._draggingPredicate)) {\n                    event.preventDefault();\n                }\n                this.pointerMove.next(event);\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._persistentTouchmoveListener, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances().indexOf(drag) > -1) {\n            return;\n        }\n        this._loadResets();\n        this._activeDragInstances.update(instances => [...instances, drag]);\n        if (this._activeDragInstances().length === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(isTouchEvent ? 'touchend' : 'mouseup', {\n                handler: (e) => this.pointerUp.next(e),\n                options: true,\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true,\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions,\n            });\n            // We don't have to bind a move event for touch drag sequences, because\n            // we already have a persistent global one bound from `registerDragItem`.\n            if (!isTouchEvent) {\n                this._globalListeners.set('mousemove', {\n                    handler: (e) => this.pointerMove.next(e),\n                    options: activeCapturingEventOptions,\n                });\n            }\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.update(instances => {\n            const index = instances.indexOf(drag);\n            if (index > -1) {\n                instances.splice(index, 1);\n                return [...instances];\n            }\n            return instances;\n        });\n        if (this._activeDragInstances().length === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances().indexOf(drag) > -1;\n    }\n    /**\n     * Gets a stream that will emit when any element on the page is scrolled while an item is being\n     * dragged.\n     * @param shadowRoot Optional shadow root that the current dragging sequence started from.\n     *   Top-level listeners won't pick up events coming from the shadow DOM so this parameter can\n     *   be used to include an additional top-level listener at the shadow root level.\n     */\n    scrolled(shadowRoot) {\n        const streams = [this.scroll];\n        if (shadowRoot && shadowRoot !== this._document) {\n            // Note that this is basically the same as `fromEvent` from rxjs, but we do it ourselves,\n            // because we want to guarantee that the event is bound outside of the `NgZone`. With\n            // `fromEvent` it'll only happen if the subscription is outside the `NgZone`.\n            streams.push(new Observable((observer) => {\n                return this._ngZone.runOutsideAngular(() => {\n                    const eventOptions = true;\n                    const callback = (event) => {\n                        if (this._activeDragInstances().length) {\n                            observer.next(event);\n                        }\n                    };\n                    shadowRoot.addEventListener('scroll', callback, eventOptions);\n                    return () => {\n                        shadowRoot.removeEventListener('scroll', callback, eventOptions);\n                    };\n                });\n            }));\n        }\n        return merge(...streams);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n    // TODO(crisbeto): abstract this away into something reusable.\n    /** Loads the CSS resets needed for the module to work correctly. */\n    _loadResets() {\n        if (!activeApps.has(this._appRef)) {\n            activeApps.add(this._appRef);\n            const componentRef = createComponent(_ResetsLoader, {\n                environmentInjector: this._environmentInjector,\n            });\n            this._appRef.onDestroy(() => {\n                activeApps.delete(this._appRef);\n                if (activeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, deps: [{ token: i0.NgZone }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropRegistry, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5,\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, deps: [{ token: DOCUMENT }, { token: i0.NgZone }, { token: i1.ViewportRuler }, { token: DragDropRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDrop, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i1.ViewportRuler }, { type: DragDropRegistry }] });\n\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * Asserts that a particular node is an element.\n * @param node Node to be checked.\n * @param name Name to attach to the error message.\n */\nfunction assertElementNode(node, name) {\n    if (node.nodeType !== 1) {\n        throw Error(`${name} must be attached to an element node. ` + `Currently attached to \"${node.nodeName}\".`);\n    }\n}\n\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._stateChanges.next(this);\n    }\n    constructor(element, _parentDrag) {\n        this.element = element;\n        this._parentDrag = _parentDrag;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDragHandle');\n        }\n        _parentDrag?._addHandle(this);\n    }\n    ngOnDestroy() {\n        this._parentDrag?._removeHandle(this);\n        this._stateChanges.complete();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, deps: [{ token: i0.ElementRef }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragHandle, isStandalone: true, selector: \"[cdkDragHandle]\", inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\", booleanAttribute] }, host: { classAttribute: \"cdk-drag-handle\" }, providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragHandle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDragHandle]',\n                    standalone: true,\n                    host: {\n                        'class': 'cdk-drag-handle',\n                    },\n                    providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragHandleDisabled', transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\nconst DRAG_HOST_CLASS = 'cdk-drag';\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    static { this._dragInstances = []; }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = value;\n        this._dragRef.disabled = this._disabled;\n    }\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, \n    /**\n     * @deprecated `_document` parameter no longer being used and will be removed.\n     * @breaking-change 12.0.0\n     */\n    _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle, _parentDrag) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._parentDrag = _parentDrag;\n        this._destroyed = new Subject();\n        this._handles = new BehaviorSubject([]);\n        /**\n         * If the parent of the dragged element has a `scale` transform, it can throw off the\n         * positioning when the user starts dragging. Use this input to notify the CDK of the scale.\n         */\n        this.scale = 1;\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved\n                .pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance,\n            })))\n                .subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._injector = inject(Injector);\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ? config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null\n                ? config.pointerDirectionChangeThreshold\n                : 5,\n            zIndex: config?.zIndex,\n        });\n        this._dragRef.data = this;\n        // We have to keep track of the drag instances in order to be able to match an element to\n        // a drag instance. We can't go through the global registry of `DragRef`, because the root\n        // element could be different.\n        CdkDrag._dragInstances.push(this);\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n            // The drop container reads this so we need to sync it here.\n            dropContainer._dropListRef.beforeStarted.pipe(takeUntil(this._destroyed)).subscribe(() => {\n                this._dragRef.scale = this.scale;\n            });\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._dragRef.setFreeDragPosition(value);\n    }\n    ngAfterViewInit() {\n        // We need to wait until after render, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position, and then they get transferred to the portal.\n        afterNextRender(() => {\n            this._updateRootElement();\n            this._setupHandlesListener();\n            this._dragRef.scale = this.scale;\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        }, { injector: this._injector });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in the `afterNextRender` queued up in the constructor.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Scale affects the free drag position so we need to sync it up here.\n        this._dragRef.scale = this.scale;\n        // Skip the first change since it's being handled in the `afterNextRender` queued up in the\n        // constructor.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        const index = CdkDrag._dragInstances.indexOf(this);\n        if (index > -1) {\n            CdkDrag._dragInstances.splice(index, 1);\n        }\n        // Unnecessary in most cases, but used to avoid extra change detections with `zone-paths-rxjs`.\n        this._ngZone.runOutsideAngular(() => {\n            this._handles.complete();\n            this._destroyed.next();\n            this._destroyed.complete();\n            this._dragRef.dispose();\n        });\n    }\n    _addHandle(handle) {\n        const handles = this._handles.getValue();\n        handles.push(handle);\n        this._handles.next(handles);\n    }\n    _removeHandle(handle) {\n        const handles = this._handles.getValue();\n        const index = handles.indexOf(handle);\n        if (index > -1) {\n            handles.splice(index, 1);\n            this._handles.next(handles);\n        }\n    }\n    _setPreviewTemplate(preview) {\n        this._previewTemplate = preview;\n    }\n    _resetPreviewTemplate(preview) {\n        if (preview === this._previewTemplate) {\n            this._previewTemplate = null;\n        }\n    }\n    _setPlaceholderTemplate(placeholder) {\n        this._placeholderTemplate = placeholder;\n    }\n    _resetPlaceholderTemplate(placeholder) {\n        if (placeholder === this._placeholderTemplate) {\n            this._placeholderTemplate = null;\n        }\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        let rootElement = element;\n        if (this.rootElementSelector) {\n            rootElement =\n                element.closest !== undefined\n                    ? element.closest(this.rootElementSelector)\n                    : // Comment tag doesn't have closest method, so use parent's one.\n                        element.parentElement?.closest(this.rootElementSelector);\n        }\n        if (rootElement && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            assertElementNode(rootElement, 'cdkDrag');\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return this.element.nativeElement.closest(boundary);\n        }\n        return coerceElement(boundary);\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate\n                    ? {\n                        template: this._placeholderTemplate.templateRef,\n                        context: this._placeholderTemplate.data,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                const preview = this._previewTemplate\n                    ? {\n                        template: this._previewTemplate.templateRef,\n                        context: this._previewTemplate.data,\n                        matchSize: this._previewTemplate.matchSize,\n                        viewContainer: this._viewContainerRef,\n                    }\n                    : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.scale = this.scale;\n                ref.dragStartDelay =\n                    typeof dragStartDelay === 'object' && dragStartDelay\n                        ? dragStartDelay\n                        : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview)\n                    .withPreviewContainer(this.previewContainer || 'global');\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n        // This only needs to be resolved once.\n        ref.beforeStarted.pipe(take(1)).subscribe(() => {\n            // If we managed to resolve a parent through DI, use it.\n            if (this._parentDrag) {\n                ref.withParent(this._parentDrag._dragRef);\n                return;\n            }\n            // Otherwise fall back to resolving the parent by looking up the DOM. This can happen if\n            // the item was projected into another item by something like `ngTemplateOutlet`.\n            let parent = this.element.nativeElement.parentElement;\n            while (parent) {\n                if (parent.classList.contains(DRAG_HOST_CLASS)) {\n                    ref.withParent(CdkDrag._dragInstances.find(drag => {\n                        return drag.element.nativeElement === parent;\n                    })?._dragRef || null);\n                    break;\n                }\n                parent = parent.parentElement;\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(startEvent => {\n            this.started.emit({ source: this, event: startEvent.event });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(releaseEvent => {\n            this.released.emit({ source: this, event: releaseEvent.event });\n        });\n        ref.ended.subscribe(endEvent => {\n            this.ended.emit({\n                source: this,\n                distance: endEvent.distance,\n                dropPoint: endEvent.dropPoint,\n                event: endEvent.event,\n            });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(enterEvent => {\n            this.entered.emit({\n                container: enterEvent.container.data,\n                item: this,\n                currentIndex: enterEvent.currentIndex,\n            });\n        });\n        ref.exited.subscribe(exitEvent => {\n            this.exited.emit({\n                container: exitEvent.container.data,\n                item: this,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                item: this,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector, previewContainer, } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n        if (previewContainer) {\n            this.previewContainer = previewContainer;\n        }\n    }\n    /** Sets up the listener that syncs the handles with the drag ref. */\n    _setupHandlesListener() {\n        // Listen for any newly-added handles.\n        this._handles\n            .pipe(\n        // Sync the new handles with the DragRef.\n        tap(handles => {\n            const handleElements = handles.map(handle => handle.element);\n            // Usually handles are only allowed to be a descendant of the drag element, but if\n            // the consumer defined a different drag root, we should allow the drag element\n            // itself to be a handle too.\n            if (this._selfHandle && this.rootElementSelector) {\n                handleElements.push(this.element);\n            }\n            this._dragRef.withHandles(handleElements);\n        }), \n        // Listen if the state of any of the handles changes.\n        switchMap((handles) => {\n            return merge(...handles.map(item => item._stateChanges.pipe(startWith(item))));\n        }), takeUntil(this._destroyed))\n            .subscribe(handleInstance => {\n            // Enabled/disable the handle that changed in the DragRef.\n            const dragRef = this._dragRef;\n            const handle = handleInstance.element.nativeElement;\n            handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, deps: [{ token: i0.ElementRef }, { token: CDK_DROP_LIST, optional: true, skipSelf: true }, { token: DOCUMENT }, { token: i0.NgZone }, { token: i0.ViewContainerRef }, { token: CDK_DRAG_CONFIG, optional: true }, { token: i1$1.Directionality, optional: true }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: CDK_DRAG_HANDLE, optional: true, self: true }, { token: CDK_DRAG_PARENT, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDrag, isStandalone: true, selector: \"[cdkDrag]\", inputs: { data: [\"cdkDragData\", \"data\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"], disabled: [\"cdkDragDisabled\", \"disabled\", booleanAttribute], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], previewContainer: [\"cdkDragPreviewContainer\", \"previewContainer\"], scale: [\"cdkDragScale\", \"scale\", numberAttribute] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, host: { properties: { \"class.cdk-drag-disabled\": \"disabled\", \"class.cdk-drag-dragging\": \"_dragRef.isDragging()\" }, classAttribute: \"cdk-drag\" }, providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }], exportAs: [\"cdkDrag\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDrag, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDrag]',\n                    exportAs: 'cdkDrag',\n                    standalone: true,\n                    host: {\n                        'class': DRAG_HOST_CLASS,\n                        '[class.cdk-drag-disabled]': 'disabled',\n                        '[class.cdk-drag-dragging]': '_dragRef.isDragging()',\n                    },\n                    providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }],\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_DROP_LIST]\n                }, {\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i0.NgZone }, { type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_HANDLE]\n                }] }, { type: CdkDrag, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_PARENT]\n                }] }], propDecorators: { data: [{\n                type: Input,\n                args: ['cdkDragData']\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDragLockAxis']\n            }], rootElementSelector: [{\n                type: Input,\n                args: ['cdkDragRootElement']\n            }], boundaryElement: [{\n                type: Input,\n                args: ['cdkDragBoundary']\n            }], dragStartDelay: [{\n                type: Input,\n                args: ['cdkDragStartDelay']\n            }], freeDragPosition: [{\n                type: Input,\n                args: ['cdkDragFreeDragPosition']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDragDisabled', transform: booleanAttribute }]\n            }], constrainPosition: [{\n                type: Input,\n                args: ['cdkDragConstrainPosition']\n            }], previewClass: [{\n                type: Input,\n                args: ['cdkDragPreviewClass']\n            }], previewContainer: [{\n                type: Input,\n                args: ['cdkDragPreviewContainer']\n            }], scale: [{\n                type: Input,\n                args: [{ alias: 'cdkDragScale', transform: numberAttribute }]\n            }], started: [{\n                type: Output,\n                args: ['cdkDragStarted']\n            }], released: [{\n                type: Output,\n                args: ['cdkDragReleased']\n            }], ended: [{\n                type: Output,\n                args: ['cdkDragEnded']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDragEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDragExited']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDragDropped']\n            }], moved: [{\n                type: Output,\n                args: ['cdkDragMoved']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        /** Whether starting a dragging sequence from inside this group is disabled. */\n        this.disabled = false;\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropListGroup, isStandalone: true, selector: \"[cdkDropListGroup]\", inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\", booleanAttribute] }, providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }], exportAs: [\"cdkDropListGroup\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropListGroup, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropListGroup]',\n                    exportAs: 'cdkDropListGroup',\n                    standalone: true,\n                    providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }],\n                }]\n        }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListGroupDisabled', transform: booleanAttribute }]\n            }] } });\n\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    /** Keeps track of the drop lists that are currently on the page. */\n    static { this._dropLists = []; }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = value;\n    }\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _scrollDispatcher, _dir, _group, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._scrollDispatcher = _scrollDispatcher;\n        this._dir = _dir;\n        this._group = _group;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Functions that is used to determine whether an item can be sorted into a particular index. */\n        this.sortPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            assertElementNode(element.nativeElement, 'cdkDropList');\n        }\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._dropListRef.sortPredicate = (index, drag, drop) => {\n            return this.sortPredicate(index, drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef\n                .getVisibleElement()\n                .compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            if (!this._scrollableParentsResolved) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            if (this.elementContainerSelector) {\n                const container = this.element.nativeElement.querySelector(this.elementContainerSelector);\n                if (!container && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                    throw new Error(`CdkDropList could not find an element container matching the selector \"${this.elementContainerSelector}\"`);\n                }\n                ref.withElementContainer(container);\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = this.sortingDisabled;\n            ref.autoScrollDisabled = this.autoScrollDisabled;\n            ref.autoScrollStep = coerceNumberProperty(this.autoScrollStep, 2);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex,\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data,\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data,\n            });\n        });\n        ref.dropped.subscribe(dropEvent => {\n            this.dropped.emit({\n                previousIndex: dropEvent.previousIndex,\n                currentIndex: dropEvent.currentIndex,\n                previousContainer: dropEvent.previousContainer.data,\n                container: dropEvent.container.data,\n                item: dropEvent.item.data,\n                isPointerOverContainer: dropEvent.isPointerOverContainer,\n                distance: dropEvent.distance,\n                dropPoint: dropEvent.dropPoint,\n                event: dropEvent.event,\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n        merge(ref.receivingStarted, ref.receivingStopped).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, deps: [{ token: i0.ElementRef }, { token: DragDrop }, { token: i0.ChangeDetectorRef }, { token: i1.ScrollDispatcher }, { token: i1$1.Directionality, optional: true }, { token: CDK_DROP_LIST_GROUP, optional: true, skipSelf: true }, { token: CDK_DRAG_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDropList, isStandalone: true, selector: \"[cdkDropList], cdk-drop-list\", inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], data: [\"cdkDropListData\", \"data\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], id: \"id\", lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], disabled: [\"cdkDropListDisabled\", \"disabled\", booleanAttribute], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\", booleanAttribute], enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], sortPredicate: [\"cdkDropListSortPredicate\", \"sortPredicate\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\", booleanAttribute], autoScrollStep: [\"cdkDropListAutoScrollStep\", \"autoScrollStep\"], elementContainerSelector: [\"cdkDropListElementContainer\", \"elementContainerSelector\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, host: { properties: { \"attr.id\": \"id\", \"class.cdk-drop-list-disabled\": \"disabled\", \"class.cdk-drop-list-dragging\": \"_dropListRef.isDragging()\", \"class.cdk-drop-list-receiving\": \"_dropListRef.isReceiving()\" }, classAttribute: \"cdk-drop-list\" }, providers: [\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ], exportAs: [\"cdkDropList\"], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDropList, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkDropList], cdk-drop-list',\n                    exportAs: 'cdkDropList',\n                    standalone: true,\n                    providers: [\n                        // Prevent child drop lists from picking up the same group as their parent.\n                        { provide: CDK_DROP_LIST_GROUP, useValue: undefined },\n                        { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                    ],\n                    host: {\n                        'class': 'cdk-drop-list',\n                        '[attr.id]': 'id',\n                        '[class.cdk-drop-list-disabled]': 'disabled',\n                        '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                        '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: DragDrop }, { type: i0.ChangeDetectorRef }, { type: i1.ScrollDispatcher }, { type: i1$1.Directionality, decorators: [{\n                    type: Optional\n                }] }, { type: CdkDropListGroup, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DROP_LIST_GROUP]\n                }, {\n                    type: SkipSelf\n                }] }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_DRAG_CONFIG]\n                }] }], propDecorators: { connectedTo: [{\n                type: Input,\n                args: ['cdkDropListConnectedTo']\n            }], data: [{\n                type: Input,\n                args: ['cdkDropListData']\n            }], orientation: [{\n                type: Input,\n                args: ['cdkDropListOrientation']\n            }], id: [{\n                type: Input\n            }], lockAxis: [{\n                type: Input,\n                args: ['cdkDropListLockAxis']\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListDisabled', transform: booleanAttribute }]\n            }], sortingDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListSortingDisabled', transform: booleanAttribute }]\n            }], enterPredicate: [{\n                type: Input,\n                args: ['cdkDropListEnterPredicate']\n            }], sortPredicate: [{\n                type: Input,\n                args: ['cdkDropListSortPredicate']\n            }], autoScrollDisabled: [{\n                type: Input,\n                args: [{ alias: 'cdkDropListAutoScrollDisabled', transform: booleanAttribute }]\n            }], autoScrollStep: [{\n                type: Input,\n                args: ['cdkDropListAutoScrollStep']\n            }], elementContainerSelector: [{\n                type: Input,\n                args: ['cdkDropListElementContainer']\n            }], dropped: [{\n                type: Output,\n                args: ['cdkDropListDropped']\n            }], entered: [{\n                type: Output,\n                args: ['cdkDropListEntered']\n            }], exited: [{\n                type: Output,\n                args: ['cdkDropListExited']\n            }], sorted: [{\n                type: Output,\n                args: ['cdkDropListSorted']\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        /** Whether the preview should preserve the same size as the item that is being dragged. */\n        this.matchSize = false;\n        this._drag?._setPreviewTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPreviewTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: CdkDragPreview, isStandalone: true, selector: \"ng-template[cdkDragPreview]\", inputs: { data: \"data\", matchSize: [\"matchSize\", \"matchSize\", booleanAttribute] }, providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPreview, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPreview]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }], matchSize: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }] } });\n\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._drag = inject(CDK_DRAG_PARENT, { optional: true });\n        this._drag?._setPlaceholderTemplate(this);\n    }\n    ngOnDestroy() {\n        this._drag?._resetPlaceholderTemplate(this);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkDragPlaceholder, isStandalone: true, selector: \"ng-template[cdkDragPlaceholder]\", inputs: { data: \"data\" }, providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkDragPlaceholder, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'ng-template[cdkDragPlaceholder]',\n                    standalone: true,\n                    providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }],\n                }]\n        }], ctorParameters: () => [{ type: i0.TemplateRef }], propDecorators: { data: [{\n                type: Input\n            }] } });\n\nconst DRAG_DROP_DIRECTIVES = [\n    CdkDropList,\n    CdkDropListGroup,\n    CdkDrag,\n    CdkDragHandle,\n    CdkDragPreview,\n    CdkDragPlaceholder,\n];\nclass DragDropModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, imports: [CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder], exports: [CdkScrollableModule, CdkDropList,\n            CdkDropListGroup,\n            CdkDrag,\n            CdkDragHandle,\n            CdkDragPreview,\n            CdkDragPlaceholder] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, providers: [DragDrop], imports: [CdkScrollableModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: DragDropModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: DRAG_DROP_DIRECTIVES,\n                    exports: [CdkScrollableModule, ...DRAG_DROP_DIRECTIVES],\n                    providers: [DragDrop],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PARENT, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem };\n"],"names":["MousedownStopPropagationDirective","onMousedown","event","stopPropagation","selectors","hostBindings","MousedownStopPropagationDirective_HostBindings","rf","ctx","i0","ɵɵlistener","MousedownStopPropagationDirective_mousedown_HostBindingHandler","$event","ActivatedRoute","NavigationEnd","Router","filter","map","pairwise","startWith","classLog","ServiceBase","logSpecs","doOnDialogClosed","DialogRoutingService","constructor","router","route","log","snapshot","url","getParam","key","paramMap","get","getParams","keys","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","subscribe","end","urlSubRoute","params","tree","createUrlTree","relativeTo","routeUrl","serializeUrl","navPath","navigate","navRelative","commands","events","pipe","firstChild","hadChildBefore","hasChildNow","ɵɵinject","i1","factory","ɵfac","asyncScheduler","timer","interval","period","scheduler","signal","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","ApplicationRef","EnvironmentInjector","createComponent","Injectable","Inject","InjectionToken","booleanAttribute","Directive","Optional","SkipSelf","Input","EventEmitter","Injector","afterNextRender","numberAttribute","Self","Output","NgModule","DOCUMENT","CdkScrollableModule","isFakeTouchstartFromScreenReader","isFakeMousedownFromScreenReader","coerceElement","coerceNumberProperty","coerceArray","_getEventTarget","normalizePassiveListenerOptions","_getShadowRoot","Subject","Subscription","animationFrameScheduler","Observable","merge","BehaviorSubject","takeUntil","take","tap","switchMap","i1$1","deepCloneNode","node","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","toLowerCase","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","descendantElements","cloneElements","cloneUniqueId","source","type","value","name","context","getContext","drawImage","getMutableClientRect","element","rect","getBoundingClientRect","top","right","bottom","left","width","height","x","y","isInsideClientRect","clientRect","adjustDomRect","domRect","isPointerNearDomRect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","positions","Map","clear","cache","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","handleScroll","target","cachedPosition","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","contains","window","scrollY","scrollX","getRootNode","viewRef","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","appendChild","extendStyles","dest","importantProperties","hasOwnProperty","setProperty","has","removeProperty","toggleNativeDragInteractions","enable","userSelect","style","toggleVisibility","opacity","combineTransforms","transform","initialTransform","matchElementSize","sourceRect","getTransform","Math","round","parseCssTimeUnitsToMs","multiplier","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","getPropertyValue","split","part","trim","Set","PreviewRef","_preview","_rootElement","_direction","_initialDomRect","_previewTemplate","_previewClass","_pickupPositionOnPage","_initialTransform","_zIndex","attach","parent","_createPreview","supportsPopover","destroy","remove","_previewEmbeddedView","setTransform","addClass","className","classList","getTransitionDuration","addEventListener","handler","removeEventListener","previewConfig","previewClass","previewTemplate","template","preview","rootRect","matchSize","viewContainer","createEmbeddedView","detectChanges","setAttribute","Array","isArray","passiveEventListenerOptions","passive","activeEventListenerOptions","activeCapturingEventOptions$1","capture","MOUSE_EVENT_IGNORE_TIME","dragImportantProperties","DragRef","disabled","_disabled","_dropContainer","_toggleNativeDragInteractions","_handles","handle","_config","_ngZone","_viewportRuler","_dragDropRegistry","_passiveTransform","_activeTransform","_hasStartedDragging","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_disabledHandles","dragStartDelay","scale","beforeStarted","started","released","ended","entered","exited","dropped","moved","_pointerDown","next","targetHandle","_getTargetHandle","_initializeDragSequence","_pointerMove","pointerPosition","_getPointerPositionOnPage","distanceX","abs","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","container","_endDragSequence","isDragging","isReceiving","cancelable","preventDefault","run","_startDragSequence","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","offset","constrainPosition","activeTransform","_applyRootElementTransform","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","_nativeDragStart","withRootElement","withParent","parentDragRef","_parentPositions","registerDragItem","getPlaceholderElement","_placeholder","getRootElement","getVisibleElement","withHandles","handles","disabledHandles","withPreviewTemplate","withPlaceholderTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","undefined","SVGElement","_ownerSVGElement","ownerSVGElement","withBoundaryElement","boundaryElement","unsubscribe","change","_containInsideBoundaryOnResize","_parentDragRef","dispose","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeListeners","complete","reset","disableHandle","enableHandle","delete","withDirection","direction","_withDropContainer","getFreeDragPosition","setFreeDragPosition","withPreviewContainer","_previewContainer","_sortFromLastPointerPosition","shadowDomSelectStart","_placeholderRef","stopDragging","webkitTapHighlightColor","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","dropPoint","isTouchEvent","_lastTouchEventTime","shadowRoot","dropContainer","parentNode","placeholder","_createPlaceholderElement","anchor","createComment","ngDevMode","insertBefore","zIndex","_getPreviewInsertionPoint","body","replaceChild","start","_initialContainer","_initialIndex","getItemIndex","getScrollableParents","referenceElement","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","isFakeEvent","draggable","rootStyles","pointerMove","pointerUp","scrolled","scrollEvent","_updateOnScroll","_boundaryRect","_pickupPositionInElement","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","_previewRect","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","_applyPreviewTransform","Promise","resolve","placeholderRect","duration","propertyName","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","pointerEvents","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","pickupX","pickupY","boundaryRect","previewWidth","previewHeight","_getPreviewRect","minY","maxY","minX","maxX","clamp$1","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","styles","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","touch","mouse","scrollDifference","_cachedShadowRoot","initialParent","previewContainer","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","min","max","moveItemInArray","array","fromIndex","toIndex","from","clamp","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","SingleAxisSortStrategy","_itemPositions","orientation","_previousSwap","drag","overlaps","items","withItems","sort","pointerDelta","siblings","newIndex","_getItemIndexFromPointerPosition","isHorizontal","findIndex","currentItem","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","slice","sibling","index","isDraggedItem","elementToOffset","transformAmount","activeDraggables","_activeDraggables","newPositionReference","_shouldEnterAsFirstChild","parentElement","_element","push","_cacheItemPositions","withSortPredicate","predicate","_sortPredicate","p","getActiveItemsSnapshot","reverse","updateOnScroll","withElementContainer","elementToMeasure","a","b","immediateSibling","itemPositions","reversed","lastItemRect","firstItemRect","floor","MixedSortStrategy","deltaX","deltaY","_relatedNodes","childNodes","nextSibling","previousSwap","_activeItems","toSwapWith","current","overlapElement","after","before","newOverlapElement","_getRootNode","elementFromPoint","enterIndex","_getClosestItemIndexToPointer","targetItem","root","_rootNode","elementAtPoint","minDistance","Infinity","minIndex","hypot","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AutoScrollVerticalDirection","AutoScrollHorizontalDirection","DropListRef","autoScrollDisabled","autoScrollStep","enterPredicate","sortPredicate","sorted","receivingStarted","receivingStopped","_isDragging","_draggables","_siblings","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","NONE","_horizontalScrollDirection","_stopScrollTimers","_scrollableElements","_startScrollInterval","_scrollNode","scrollStep","UP","scrollBy","DOWN","LEFT","RIGHT","coercedElement","withOrientation","registerDropContainer","removeDropContainer","_draggingStarted","_notifyReceivingSiblings","_sortStrategy","_cacheParentPositions","_reset","previousItems","draggedItems","every","connectedTo","strategy","_container","withScrollableParents","Error","oldContainerIndex","newContainerIndex","unshift","size","_domRect","result","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","_initialScrollSnap","msScrollSnapType","scrollSnapType","_listenToScrollEvents","_stopReceiving","_canReceive","_startReceiving","activeSiblings","initiator","receiver","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","activeApps","_ResetsLoader","_ResetsLoader_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","hostAttrs","standalone","features","ɵɵStandaloneFeature","decls","vars","_ResetsLoader_Template","encapsulation","changeDetection","ɵsetClassMetadata","args","None","OnPush","host","DragDropRegistry","_appRef","_environmentInjector","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_draggingPredicate","scroll","_preventDefaultWhileDragging","_persistentTouchmoveListener","some","_loadResets","update","instances","startsWith","e","options","config","_clearGlobalListeners","streams","observer","eventOptions","ngOnDestroy","instance","componentRef","environmentInjector","onDestroy","DragDropRegistry_Factory","NgZone","ɵprov","ɵɵdefineInjectable","token","providedIn","decorators","DEFAULT_CONFIG","DragDrop","createDrag","createDropList","DragDrop_Factory","ViewportRuler","CDK_DRAG_PARENT","assertElementNode","CDK_DRAG_HANDLE","CdkDragHandle","_stateChanges","_parentDrag","nativeElement","_addHandle","_removeHandle","CdkDragHandle_Factory","ɵɵdirectiveInject","ElementRef","ɵdir","ɵɵdefineDirective","inputs","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","providers","alias","CDK_DRAG_CONFIG","DRAG_HOST_CLASS","CDK_DROP_LIST","CdkDrag","_dragRef","_viewContainerRef","_dir","dragDrop","_changeDetectorRef","_selfHandle","_destroyed","subscription","movedEvent","_injector","data","_assignDefaults","_dropListRef","addItem","_syncInputs","_handleEvents","ngAfterViewInit","_updateRootElement","_setupHandlesListener","freeDragPosition","injector","ngOnChanges","changes","rootSelectorChange","positionChange","firstChange","removeItem","getValue","_setPreviewTemplate","_resetPreviewTemplate","_setPlaceholderTemplate","_resetPlaceholderTemplate","rootElementSelector","closest","_getBoundaryElement","boundary","ref","dir","templateRef","startEvent","emit","markForCheck","releaseEvent","endEvent","enterEvent","exitEvent","dropEvent","draggingDisabled","handleElements","handleInstance","dragRef","CdkDrag_Factory","ViewContainerRef","Directionality","ChangeDetectorRef","hostVars","CdkDrag_HostBindings","ɵɵclassProp","outputs","exportAs","ɵɵNgOnChangesFeature","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","_uniqueIdCounter","CdkDropList","_dropLists","_group","_scrollDispatcher","id","_unsortedItems","_setupInputSyncSubscription","_syncItemsWithRef","getSortedItems","documentPosition","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","elementContainerSelector","querySelector","listAutoScrollDisabled","listOrientation","CdkDropList_Factory","ScrollDispatcher","CdkDropList_HostBindings","ɵɵattribute","useValue","CDK_DRAG_PREVIEW","CdkDragPreview","_drag","optional","CdkDragPreview_Factory","TemplateRef","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","CdkDragPlaceholder_Factory","DRAG_DROP_DIRECTIVES","DragDropModule","DragDropModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[2,3]}