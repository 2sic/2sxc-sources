{"version":3,"sources":["./projects/ng-dialogs/src/app/app-administration/constants/content-type.patterns.ts","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.html","./projects/ng-dialogs/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type.component.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts"],"names":["contentTypeNamePattern","dialogRef","route","contentTypesService","snackBar","hostClass","contentTypeStaticName","this","snapshot","paramMap","get","contentTypeNameError","dropdownInsertValue","contentType$","BehaviorSubject","lockScope$","scopeOptions$","disableAnimation$","loading$","templateVars$","combineLatest","pipe","map","contentType","lockScope","scopeOptions","disableAnimation","loading","scope","parent","ngOnInit","retrieveContentType","ChangeStaticName","NewStaticName","StaticName","of","Name","Description","Scope","scopes$","getScopes","subscribe","next","newScopes","value","forEach","scopeOption","some","push","name","ngOnDestroy","complete","ngAfterViewInit","setTimeout","closeDialog","close","changeContentTypeName","newName","changeScope","newScope","prompt","option","unlockScope","save","open","result","duration","document","activeElement","HTMLElement","blur","EditContentTypeComponent","onClick","event","stopPropagation","ClickStopPropagationDirective"],"mappings":"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","file":"projects_ng-dialogs_src_app_app-administration_sub-dialogs_edit-content-type_edit-content-typ-5bccd7.53d2fa26ed8dd716d158.js","sourcesContent":["/**\r\n * The pattern determines what content-type names are allowed.\r\n * Basically it's A-Z and numbers after the first digit.\r\n * But there are two exceptions:\r\n *  - types describing an input-type begin with an `@` and can also contain `-` chars\r\n *  - types beginning with an `|` are very old type names for data-sources, they can contain anything!\r\n */\r\nexport const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)/;\r\nexport const contentTypeNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n\r\n// 2020-04-29 2dm - temporarily used this pattern while renaming unique named types containing '|' chars\r\n// export const contentTypeNamePattern = /(^[A-Za-z][A-Za-z0-9]+$)|(^@[A-Za-z][A-Za-z0-9-]*$)|(^\\|.*$)/;\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">{{ contentTypeStaticName ? 'Edit Content Type' : 'New Content Type' }}</div>\r\n</div>\r\n\r\n<ng-container *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <form class=\"dialog-form\" *ngIf=\"data.contentType\" #ngForm=\"ngForm\" (ngSubmit)=\"save()\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput type=\"text\" required [pattern]=\"contentTypeNamePattern\" [ngModel]=\"data.contentType.Name\"\r\n            (ngModelChange)=\"changeContentTypeName($event)\" name=\"Name\" #name=\"ngModel\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"name.touched && name.errors\">\r\n          <app-field-hint *ngIf=\"name.errors.required\" [isError]=\"true\">This field is required</app-field-hint>\r\n          <app-field-hint *ngIf=\"name.errors.pattern\" [isError]=\"true\">{{ contentTypeNameError }}</app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n      <mat-accordion [@.disabled]=\"data.disableAnimation\">\r\n        <mat-expansion-panel>\r\n          <mat-expansion-panel-header>\r\n            <mat-panel-title>Advanced</mat-panel-title>\r\n            <mat-panel-description></mat-panel-description>\r\n          </mat-expansion-panel-header>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Scope</mat-label>\r\n              <mat-select [ngModel]=\"data.contentType.Scope\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\"\r\n                [disabled]=\"data.lockScope\">\r\n                <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n                <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n              </mat-select>\r\n              <button mat-icon-button type=\"button\" matSuffix [tippy]=\"data.lockScope ? 'Unlock' : 'Lock'\">\r\n                <mat-icon appClickStopPropagation (click)=\"unlockScope()\">\r\n                  {{ data.lockScope ? 'lock' : 'lock_open' }}\r\n                </mat-icon>\r\n              </button>\r\n            </mat-form-field>\r\n            <app-field-hint>\r\n              The scope should almost never be changed -\r\n              <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n            </app-field-hint>\r\n          </div>\r\n\r\n          <div class=\"edit-input\">\r\n            <mat-form-field appearance=\"standard\" color=\"accent\">\r\n              <mat-label>Static Name</mat-label>\r\n              <input matInput type=\"text\" [ngModel]=\"data.contentType.StaticName\" name=\"StaticName\" disabled>\r\n            </mat-form-field>\r\n          </div>\r\n\r\n          <div *ngIf=\"data.contentType.SharedDefId\" class=\"edit-input\">\r\n            <h3>Shared Content Type (Ghost)</h3>\r\n            <p>Note: this can't be edited in the UI, for now if you really know what you're doing, do it in the DB</p>\r\n            <p>Uses Type Definition of: {{ data.contentType.SharedDefId }}</p>\r\n          </div>\r\n        </mat-expansion-panel>\r\n      </mat-accordion>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || data.loading\">\r\n        Save\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { AfterViewInit, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, of } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { dropdownInsertValue } from '../../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { contentTypeNameError, contentTypeNamePattern } from '../../constants/content-type.patterns';\r\nimport { ContentTypeEdit } from '../../models/content-type.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type',\r\n  templateUrl: './edit-content-type.component.html',\r\n  styleUrls: ['./edit-content-type.component.scss'],\r\n})\r\nexport class EditContentTypeComponent implements OnInit, OnDestroy, AfterViewInit {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  contentTypeNamePattern = contentTypeNamePattern;\r\n  contentTypeNameError = contentTypeNameError;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n\r\n  private contentType$ = new BehaviorSubject<ContentTypeEdit>(null);\r\n  private lockScope$ = new BehaviorSubject(true);\r\n  private scopeOptions$ = new BehaviorSubject<ScopeOption[]>(null);\r\n  private disableAnimation$ = new BehaviorSubject(true);\r\n  private loading$ = new BehaviorSubject(false);\r\n  templateVars$ = combineLatest([this.contentType$, this.lockScope$, this.scopeOptions$, this.disableAnimation$, this.loading$]).pipe(\r\n    map(([contentType, lockScope, scopeOptions, disableAnimation, loading]) =>\r\n      ({ contentType, lockScope, scopeOptions, disableAnimation, loading })),\r\n  );\r\n  private scope = this.route.snapshot.parent.paramMap.get('scope');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    const contentType$ = this.contentTypeStaticName\r\n      ? this.contentTypesService.retrieveContentType(this.contentTypeStaticName)\r\n        .pipe(\r\n          map(contentType => {\r\n            const contentTypeEdit: ContentTypeEdit = {\r\n              ...contentType,\r\n              ChangeStaticName: false,\r\n              NewStaticName: contentType.StaticName,\r\n            };\r\n            return contentTypeEdit;\r\n          }),\r\n        )\r\n      : of({\r\n        StaticName: '',\r\n        Name: '',\r\n        Description: '',\r\n        Scope: this.scope,\r\n        ChangeStaticName: false,\r\n        NewStaticName: '',\r\n      } as ContentTypeEdit);\r\n    const scopes$ = this.contentTypesService.getScopes();\r\n    combineLatest([contentType$, scopes$]).subscribe(([contentType, scopeOptions]) => {\r\n      this.contentType$.next(contentType);\r\n\r\n      const newScopes = [...(this.scopeOptions$.value ?? [])];\r\n      scopeOptions.forEach(scopeOption => {\r\n        if (!newScopes.some(scope => scope.value === scopeOption.value)) {\r\n          newScopes.push(scopeOption);\r\n        }\r\n      });\r\n      if (!newScopes.some(scope => scope.value === this.scope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: this.scope,\r\n          value: this.scope,\r\n        };\r\n        newScopes.push(newScopeOption);\r\n      }\r\n      this.scopeOptions$.next(newScopes);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.lockScope$.complete();\r\n    this.scopeOptions$.complete();\r\n    this.disableAnimation$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  // workaround for angular component issue #13870\r\n  ngAfterViewInit() {\r\n    // timeout required to avoid ExpressionChangedAfterItHasBeenCheckedError\r\n    setTimeout(() => this.disableAnimation$.next(false));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  changeContentTypeName(newName: string) {\r\n    this.contentType$.next({ ...this.contentType$.value, Name: newName });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n      if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n      }\r\n    }\r\n    this.contentType$.next({ ...this.contentType$.value, Scope: newScope });\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope$.next(!this.lockScope$.value);\r\n    if (this.lockScope$.value) {\r\n      this.contentType$.next({ ...this.contentType$.value, Scope: this.scope });\r\n    }\r\n  }\r\n\r\n  save() {\r\n    this.loading$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    this.contentTypesService.save(this.contentType$.value).subscribe(result => {\r\n      this.loading$.next(false);\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.closeDialog();\r\n    });\r\n    if (document.activeElement instanceof HTMLElement) {\r\n      document.activeElement.blur();\r\n    }\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}