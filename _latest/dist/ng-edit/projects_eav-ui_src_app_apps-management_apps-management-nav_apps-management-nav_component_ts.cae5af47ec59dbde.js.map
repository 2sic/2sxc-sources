{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.cae5af47ec59dbde.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","HttpServiceBase","retrieveContentType","staticName","this","http","get","apiUrl","params","appId","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","name","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","_angular_core__WEBPACK_IMPORTED_MODULE_6__","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","AppsManagementNavItems","path","icon","svgIcon","tippy","child","i0","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","#globalDialogConfigSvc","#dialogClose","constructor","dialogRef","context","media","inject","DialogConfigGlobalService","smallScreen","matchMedia","sideNavOpened","matches","navItems","transient","DialogRoutingService","ngOnInit","fetchDialogSettings","doOnDialogClosed","addEventListener","c","sidenav","opened","mode","closeDialog","close","getShared$","subscribe","i1","i2","i3","core","VBU","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i4","MatIconModule","i5","BreadcrumbModule","i6","MatButtonModule","i7","MatSidenavModule","i8","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","ServiceBase","router","route","super","log","classLog","snapshot","getParam","paramMap","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","end","navPath","navigate","navRelative","commands","relativeTo","navParentFirstChild","parent","firstChild","events","filter","event","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","queryService","QueryService","getEntities$","p","contentTypeName","shareReplay","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","_angular_core__WEBPACK_IMPORTED_MODULE_8__","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","Subscription","ngOnDestroy","destroy","unsubscribe"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { AppInfo } from '../models/app-info.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.apiUrl(webApiEntityList), {\r\n      params: { appId: this.appId, contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.apiUrl(webApiViews), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n}\r\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', svgIcon: false, tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', svgIcon: false, tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star', svgIcon: false, tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', svgIcon: false, tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', svgIcon: false, tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Context } from '../../shared/services/context';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport { DialogConfigGlobalService } from '../../app-administration/services';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../../core';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    BreadcrumbModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    RouterOutlet,\r\n    NavItemListComponent,\r\n    ToggleDebugDirective,\r\n  ],\r\n})\r\nexport class AppsManagementNavComponent implements OnInit {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  #globalDialogConfigSvc = inject(DialogConfigGlobalService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n  #dialogClose = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.#dialogClose.doOnDialogClosed(() => this.fetchDialogSettings());\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.#globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({DialogRoutingService}, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { EntityLightIdentifier } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { classLog } from '../logging';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/**\r\n * Base class for services - just to standardize use of subscriptions.\r\n * Has @Injectable() just to allow it ot use the standard OnDestroy interface.\r\n */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  // TODO: TRY TO GET RID OF THIS. AFAIK it's just used in the mask, which should switch over to signals.\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}