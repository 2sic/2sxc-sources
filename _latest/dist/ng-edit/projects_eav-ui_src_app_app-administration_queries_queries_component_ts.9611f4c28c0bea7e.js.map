{"version":3,"file":"projects_eav-ui_src_app_app-administration_queries_queries_component_ts.9611f4c28c0bea7e.js","mappings":"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","names":["QueryActions","Edit","Metadata","Rest","Clone","Permissions","Export","Delete","AgActionsComponent","agInit","params","this","item","data","refresh","i0","_r2","ctx_r2","do","actions","length","_r4","_Permissions","Count","_r5","_EditInfo","DisableDelete","QueriesActionsComponent","constructor","super","enablePermissions","getEnablePermissions","__ngFactoryType__","selectors","standalone","features","decls","vars","consts","template","rf","ctx","_r1","QueriesActionsComponent_Conditional_4_Template","QueriesActionsComponent_Conditional_5_Template","QueriesActionsComponent_Conditional_6_Template","QueriesActionsComponent_Conditional_7_Template","QueriesActionsComponent_ng_template_13_Template","DisableMetadata","DisableEdit","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","TippyDirective","encapsulation","QueriesComponent","#pipelineSvc","#contentExportSvc","#dialogSvc","#dialogRouter","#dialogConfigSvc","snackBar","transient","PipelinesService","ContentExportService","DialogService","DialogRoutingService","DialogConfigAppService","gridOptions","buildGridOptions","#refresh","signal","queries","computed","getAllSig","eavConstants","contentTypes","query","undefined","ngOnInit","doOnDialogClosed","#fetchQueries","getCurrent$","subscribe","settings","Context","Enable","AppPermissions","update","value","importQuery","files","navParentFirstChild","state","doMenuAction","action","editQuery","openMetadata","GoToDevRest","getUrlQueryInAdmin","Guid","cloneQuery","openPermissions","exportQuery","deleteQuery","form","items","EditPrep","newFromType","TestParameters","pipelineDesigner","testParameters","editId","Id","formUrl","convertFormToUrl","openVisualQueryDesigner","ReadOnly","openQueryDesigner","url","GoToMetadata","getUrlEntity","Name","open","clonePipeline","duration","GoToPermissions","exportEntity","confirm","delete","res","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","split","cellRendererParams","idFieldParamsTooltipGetter","TextWide","field","sort","onCellClicked","TextWideFlex3","ActionsPinnedRight4","cellRenderer","$event","MatDialogActions","MatButtonModule","RouterOutlet","SxcGridModule","DragAndDropDirective","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","styles","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","add","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","from","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.ts","./projects/eav-ui/src/app/app-administration/queries/ag-actions/ag-actions-component.ts","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.html","./projects/eav-ui/src/app/app-administration/queries/queries-actions/queries-actions.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.ts","./projects/eav-ui/src/app/app-administration/queries/queries.component.html","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Query } from '../../models/query.model';\r\nimport { IAgActions } from '../ag-actions';\r\n\r\n// Test 2dm 2020-11-20 - I believe the current model has way too much ceremony\r\n// I need to change ca. 10 places just to get one more action to work\r\n// that's not great\r\nexport enum QueryActions {\r\n  Edit,\r\n  Metadata,\r\n  Rest,\r\n  Clone,\r\n  Permissions,\r\n  Export,\r\n  Delete,\r\n}\r\n\r\nexport interface QueriesActionsParams extends IAgActions<QueryActions, Query> {\r\n  getEnablePermissions(): boolean;\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\n\r\nexport class AgActionsComponent<TParams extends ICellRendererParams, TData> implements ICellRendererAngularComp {\r\n  item: TData;\r\n  params: TParams;\r\n\r\n  agInit(params: TParams): void {\r\n    this.params = params;\r\n    this.item = this.params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Edit\" (click)=\"params.do(actions.Edit, item)\">\r\n    <mat-icon>edit</mat-icon>\r\n  </div>\r\n\r\n  @if (!item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Metadata\"\r\n      (click)=\"params.do(actions.Metadata, item)\">\r\n      <mat-icon [matBadge]=\"item.Metadata?.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (item._EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"item.Metadata?.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item.Metadata?.length\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!item._EditInfo.DisableEdit && enablePermissions) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Permissions\" (click)=\"params.do(actions.Permissions, item)\">\r\n      <mat-icon [matBadge]=\"item._Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (item._EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"item._Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!item._Permissions.Count\" matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item (click)=\"params.do(actions.Rest, item)\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"params.do(actions.Clone, item)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n      <span>Copy</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\" params.do(actions.Export, item)\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"params.do(actions.Delete, item)\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { Query } from '../../models/query.model';\r\nimport { AgActionsComponent } from '../ag-actions';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions';\r\n\r\n@Component({\r\n  selector: 'app-queries-actions',\r\n  templateUrl: './queries-actions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class QueriesActionsComponent extends AgActionsComponent<ICellRendererParams & QueriesActionsParams, Query> {\r\n  enablePermissions: boolean;\r\n  actions = QueryActions;\r\n\r\n  agInit(params: ICellRendererParams & QueriesActionsParams): void {\r\n    super.agInit(params);\r\n    this.enablePermissions = this.params.getEnablePermissions();\r\n  }\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { Component, computed, OnInit, signal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../../core';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm, EditPrep } from '../../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { Query } from '../models/query.model';\r\nimport { DialogConfigAppService } from '../services/dialog-config-app.service';\r\nimport { PipelinesService } from '../services/pipelines.service';\r\nimport { QueriesActionsParams, QueryActions } from './queries-actions/queries-actions';\r\nimport { QueriesActionsComponent } from './queries-actions/queries-actions.component';\r\n\r\n@Component({\r\n  selector: 'app-queries',\r\n  templateUrl: './queries.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class QueriesComponent implements OnInit {\r\n\r\n  #pipelineSvc = transient(PipelinesService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #dialogSvc = transient(DialogService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n  #dialogConfigSvc = transient(DialogConfigAppService);\r\n\r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  enablePermissions!: boolean;\r\n  public gridOptions = this.buildGridOptions();\r\n\r\n  #refresh = signal(0);\r\n\r\n  queries = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#pipelineSvc.getAllSig(eavConstants.contentTypes.query, undefined)\r\n  }\r\n  );\r\n\r\n  ngOnInit() {\r\n    this.#dialogRouter.doOnDialogClosed(() => this.#fetchQueries());\r\n    this.#dialogConfigSvc.getCurrent$().subscribe(settings => {\r\n      this.enablePermissions = settings.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  #fetchQueries() {\r\n    this.#refresh.update(value => value + 1);\r\n  }\r\n\r\n  importQuery(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navParentFirstChild(['import'], { state: dialogData });\r\n  }\r\n\r\n  /**\r\n   * Experiment by 2dm 2020-11-20 - trying to reduce the ceremony around menus\r\n   * Once this works, we would then remove all the 3-line functions below, as they\r\n   * would just be added here (if that's the only place they are used)\r\n   */\r\n  private doMenuAction(action: QueryActions, query: Query) {\r\n    switch (action) {\r\n      case QueryActions.Edit:\r\n        return this.editQuery(query);\r\n      case QueryActions.Metadata:\r\n        return this.openMetadata(query);\r\n      case QueryActions.Rest:\r\n        return this.#dialogRouter.navParentFirstChild([GoToDevRest.getUrlQueryInAdmin(query.Guid)]);\r\n      case QueryActions.Clone:\r\n        return this.cloneQuery(query);\r\n      case QueryActions.Permissions:\r\n        return this.openPermissions(query);\r\n      case QueryActions.Export:\r\n        return this.exportQuery(query);\r\n      case QueryActions.Delete:\r\n        return this.deleteQuery(query);\r\n    }\r\n  }\r\n\r\n  editQuery(query: Query) {\r\n    const form: EditForm = {\r\n      items: [\r\n        query == null\r\n          ? EditPrep.newFromType(eavConstants.contentTypes.query, { TestParameters: eavConstants.pipelineDesigner.testParameters })\r\n          : EditPrep.editId(query.Id),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navParentFirstChild([`edit/${formUrl}`]);\r\n  }\r\n\r\n  private openVisualQueryDesigner(query: Query) {\r\n    if (query._EditInfo.ReadOnly) return;\r\n    this.#dialogSvc.openQueryDesigner(query.Id);\r\n  }\r\n\r\n  private openMetadata(query: Query) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      query.Guid,\r\n      `Metadata for Query: ${query.Name} (${query.Id})`,\r\n    );\r\n    this.#dialogRouter.navParentFirstChild([url]);\r\n  }\r\n\r\n  private cloneQuery(query: Query) {\r\n    this.snackBar.open('Copying...');\r\n    this.#pipelineSvc.clonePipeline(query.Id).subscribe(() => {\r\n      this.snackBar.open('Copied', null, { duration: 2000 });\r\n      this.#fetchQueries();\r\n    });\r\n  }\r\n\r\n  private openPermissions(query: Query) {\r\n    this.#dialogRouter.navParentFirstChild([GoToPermissions.getUrlEntity(query.Guid)]);\r\n  }\r\n\r\n  private exportQuery(query: Query) {\r\n    this.#contentExportSvc.exportEntity(query.Id, 'Query', true);\r\n  }\r\n\r\n  private deleteQuery(query: Query) {\r\n    if (!confirm(`Delete Pipeline '${query.Name}' (${query.Id})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#pipelineSvc.delete(query.Id).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.#fetchQueries();\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          cellClass: (p) => {\r\n            return `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' ');\r\n          },\r\n          cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<Query>(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Name',\r\n          sort: 'asc',\r\n          cellClass: (p) => {\r\n            const query: Query = p.data;\r\n            return `${query._EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' ');\r\n          },\r\n          onCellClicked: (p) => {\r\n            const query: Query = p.data;\r\n            this.openVisualQueryDesigner(query);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: QueriesActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: QueriesActionsParams = {\r\n              getEnablePermissions: () => this.enablePermissions,\r\n              do: (action, query) => this.doMenuAction(action, query),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular\r\n    class=\"ag-theme-material\"\r\n    [rowData]=\"queries()()\"\r\n    [gridOptions]=\"gridOptions\"\r\n    appDragAndDrop\r\n    [allowedFileTypes]=\"'json'\"\r\n    (filesDropped)=\"importQuery($event)\"\r\n  >\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <button mat-button class=\"eav-button__with-icon\" tippy=\"Import query\" (click)=\"importQuery()\">\r\n      <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n      <span>Query</span>\r\n    </button>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new query\" (click)=\"editQuery(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n<router-outlet></router-outlet>\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[6]}