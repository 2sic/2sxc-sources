{"version":3,"sources":["./src/app/code-editor/ace-editor/ace-options.ts","./src/app/code-editor/ace-editor/ace-editor.component.ts","./src/app/shared/services/snack-bar-stack.service.ts","./src/app/code-editor/services/source.service.ts","./src/app/code-editor/services/snippets.service.ts","./src/app/code-editor/code-templates/order-items.pipe.ts","./src/app/code-editor/code-templates/depth-padding.pipe.ts","./src/app/code-editor/code-templates/code-templates.component.html","./src/app/code-editor/code-templates/code-templates.component.ts","./src/app/code-editor/code-templates/code-templates.helpers.ts","./src/app/code-editor/code-snippets/object-to-array.pipe.ts","./src/app/code-editor/code-snippets/code-snippets.component.html","./src/app/code-editor/code-snippets/code-snippets.component.ts","./src/app/code-editor/code-editor.component.html","./src/app/code-editor/code-editor.component.ts","./src/app/code-editor/code-editor-routing.module.ts","./src/app/code-editor/code-editor.module.ts"],"names":["aceOptions","mode","wrap","useSoftTabs","theme","fontSize","fontFamily","showGutter","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","zone","value","propagateChange","propagateTouched","ngOnInit","test","src","this","aceLoaded","bind","ngOnChanges","changes","filename","currentValue","snippets","updateValues","editor","toggleResize","previousValue","runOutsideAngular","setTimeout","resize","insertSnippet","snippet","window","ace","require","snippetManager","focus","writeValue","p","getCursorPosition","setValue","moveCursorToPosition","registerOnChange","fn","registerOnTouched","ngOnDestroy","destroy","container","remove","config","set","edit","editorRef","nativeElement","$blockScrolling","Infinity","session","on","onEditorValueChange","onEditorBlurred","run","getValue","getModeForPath","setMode","register","AceEditorComponent","provide","useExisting","multi","snackBar","defaultDuration","processingMessage","messageQueue","add","message","action","duration","triggered$","Subject","push","showSnackBar","asObservable","nextMsg","shift","snackBarRef","open","afterDismissed","subscribe","complete","onAction","next","SnackBarStackService","http","context","dnnContext","isShared","sessionStorage","getItem","toString","get","key","$2sxc","apiUrl","params","appId","global","templateIdOrPath","pipe","map","view","Type","toLowerCase","Extension","save","post","getTemplates","withSubfolders","createTemplate","name","path","templateId","SourceService","translate","keyPrefixes","keyPrefixIndex","indexOf","getSnippets","toPromise","res","relevant","filterAwayNotNeededSnippetsList","standAndInputSnips","extractInputTypeSnippets","sets","initSnippetsWithConfig","standardArray","inputTypeSnippets","list","newList","itm","setHasPrefix","substr","inputTypeArray","catalogInputTypeSnippets","inputTypeList","undefined","subset","templateConfiguration","makeTree","Content","Object","assign","Fields","PresentationFields","TypeContent","loadContentType","TypeContentPresentation","HasList","List","TypeList","TypeListPresentation","HasApp","App","Resources","Settings","tree","o","reformatted","label","snip","content","help","links","linksList","getHelpKey","result","instant","addition","linksString","llist","split","pair","length","trim","url","target","type","prefix","getFields","AppId","then","fields","fieldname","StaticName","valuePlaceholder","Metadata","merged","Notes","snipDefaults","cloneDeep","attachSnippets","InputType","std","i","obj","val","replace","staticName","appid","filter","field","Empty","fld","md","allMd","All","typeMd","inputMd","inputType","genericSnippet","fieldType","typeSnips","concat","more","fieldSnips","g","localizeGenericSnippet","collapse","objName","fieldName","SnippetsService","transform","items","sort","item1","item2","isFolder","SortItemsPipe","sanitizer","depth","bypassSecurityTrustStyle","DepthPaddingPipe","dialogService","toggledItems","templates","paths","last","pathFromRoot","existing","find","item","children","calculateTree","showFileInTree","FileName","openTemplate","openCodeFile","toggleItem","toggleInArray","addFile","folder","emit","file","includes","CodeTemplatesComponent","Array","isArray","values","ObjectToArrayPipe","toggledSections","toggledFolders","toggledInfos","toggledMores","addSnippet","toggleSection","toggleFolder","toggleInfo","info","toggleMore","CodeSnippetsComponent","routes","component","route","snackBarStack","sourceService","snippetsService","titleService","explorer","activeExplorer","view$","BehaviorSubject","templates$","explorerSnipps$","editorSnipps$","templateVars$","combineLatest","explorerSnipps","editorSnipps","subscription","Subscription","init","calculateViewKey","attachListeners","viewKey","forkJoin","savedCode","Code","setTitle","showCodeAndEditionWarnings","unsubscribe","toggleExplorer","question","suggestion","startsWith","prompt","sanitizePath","files","changeInsertSnipp","aceEditorRef","codeChanged","code","codeToSave","error","itemsRaw","JSON","parse","EntityId","Path","pathAndName","pathSeparator","lastIndexOf","pathWithSlash","substring","fullName","nameCode","codeFile","otherEditions","endsWith","fromEvent","event","preventDefault","returnValue","keyCode","navigator","platform","match","metaKey","ctrlKey","CodeEditorComponent","CodeEditorRoutingModule","forChild","translateLoaderFactoryCode","sxcVersion","CodeEditorModule"],"mappings":"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","file":"code-editor-code-editor-module.11150b09f2266573789b.js","sourcesContent":["import { EditorOptions } from './ace.model';\r\n\r\nexport const aceOptions: Partial<EditorOptions> & EditorPluginsOptions = {\r\n  mode: 'ace/mode/razor',\r\n  wrap: true,\r\n  useSoftTabs: true,\r\n  theme: 'ace/theme/sqlserver',\r\n  fontSize: 14,\r\n  fontFamily: 'Consolas, Courier New, monospace',\r\n  showGutter: true,\r\n  enableBasicAutocompletion: true,\r\n  enableLiveAutocompletion: true,\r\n  enableSnippets: true,\r\n};\r\n\r\ninterface EditorPluginsOptions {\r\n  enableBasicAutocompletion: boolean;\r\n  enableLiveAutocompletion: boolean;\r\n  enableSnippets: boolean;\r\n}\r\n","// tslint:disable-next-line:max-line-length\r\nimport { ChangeDetectionStrategy, Component, ElementRef, forwardRef, Input, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { loadScripts } from '../../shared/helpers/load-scripts.helper';\r\nimport { EavWindow } from '../../shared/models/eav-window.model';\r\nimport { aceOptions } from './ace-options';\r\nimport { Editor } from './ace.model';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-ace-editor',\r\n  template: `<div style=\"width: 100%; height: 100%;\" #editor></div>`,\r\n  styles: [':host {display: block; width: 100%; height: 100%}'],\r\n  providers: [{\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => AceEditorComponent),\r\n    multi: true\r\n  }],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AceEditorComponent implements OnInit, OnChanges, OnDestroy {\r\n  @ViewChild('editor') editorRef: ElementRef;\r\n  @Input() filename: string;\r\n  @Input() snippets: any[];\r\n  /** If value changes editor will be resized */\r\n  @Input() toggleResize: boolean;\r\n\r\n  private value = '';\r\n  private editor: Editor & { $blockScrolling?: number; };\r\n\r\n  propagateChange: (_: any) => void = () => { };\r\n  propagateTouched: (_: any) => void = () => { };\r\n\r\n  constructor(private zone: NgZone) { }\r\n\r\n  ngOnInit() {\r\n    loadScripts(\r\n      [\r\n        { test: 'ace', src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ace.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-modelist.min.js' },\r\n        { test: null, src: 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11/ext-language_tools.min.js' },\r\n      ],\r\n      this.aceLoaded.bind(this)\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    const filename = changes.filename?.currentValue;\r\n    const snippets = changes.snippets?.currentValue;\r\n    this.updateValues(filename, snippets);\r\n\r\n    if (!this.editor) { return; }\r\n    const resize = changes.toggleResize?.currentValue !== changes.toggleResize?.previousValue;\r\n    if (resize) {\r\n      this.zone.runOutsideAngular(() => {\r\n        // wait for Angular to update DOM to be able to get proper size of the container\r\n        setTimeout(() => { this.editor.resize(); }, 50);\r\n      });\r\n    }\r\n  }\r\n\r\n  insertSnippet(snippet: any) {\r\n    this.zone.runOutsideAngular(() => {\r\n      const snippetManager = window.ace.require('ace/snippets').snippetManager;\r\n      snippetManager.insertSnippet(this.editor, snippet);\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  writeValue(value: string) {\r\n    this.value = value || '';\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      const p = this.editor.getCursorPosition();\r\n      this.editor.setValue(this.value, -1);\r\n      this.editor.moveCursorToPosition(p);\r\n    });\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void) {\r\n    this.propagateChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: (_: any) => void) {\r\n    this.propagateTouched = fn;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.editor.destroy();\r\n      this.editor.container.remove();\r\n      this.editor = null;\r\n    });\r\n  }\r\n\r\n  private aceLoaded() {\r\n    this.zone.runOutsideAngular(() => {\r\n      window.ace.config.set('basePath', 'https://cdnjs.cloudflare.com/ajax/libs/ace/1.4.11');\r\n      this.editor = window.ace.edit(this.editorRef.nativeElement, aceOptions);\r\n      this.editor.$blockScrolling = Infinity;\r\n      this.editor.session.setValue(this.value); // set value and reset undo history\r\n      this.updateValues(this.filename, this.snippets);\r\n      this.editor.on('change', this.onEditorValueChange.bind(this));\r\n      this.editor.on('blur', this.onEditorBlurred.bind(this));\r\n      this.editor.focus();\r\n    });\r\n  }\r\n\r\n  private onEditorValueChange() {\r\n    this.zone.run(() => {\r\n      this.propagateChange(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private onEditorBlurred() {\r\n    this.zone.run(() => {\r\n      this.propagateTouched(this.editor.getValue());\r\n    });\r\n  }\r\n\r\n  private updateValues(filename: string, snippets: any[]) {\r\n    if (!this.editor) { return; }\r\n    this.zone.runOutsideAngular(() => {\r\n      if (filename) {\r\n        const modelist = window.ace.require('ace/ext/modelist');\r\n        const mode = modelist.getModeForPath(filename).mode;\r\n        this.editor.session.setMode(mode);\r\n      }\r\n      if (snippets) {\r\n        const snippetManager = window.ace.require('ace/snippets').snippetManager;\r\n        snippetManager.register(this.snippets);\r\n      }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { MatSnackBar, MatSnackBarConfig } from '@angular/material/snack-bar';\r\nimport { Subject } from 'rxjs';\r\n\r\n/** This service ensures that multiple SnackBars are shown one after another. */\r\n@Injectable({ providedIn: 'root' })\r\nexport class SnackBarStackService implements OnDestroy {\r\n  private defaultDuration = 3000;\r\n  private processingMessage = false;\r\n  private messageQueue: SnackBarData[] = [];\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  /**\r\n   * Add a message to the stack queue.\r\n   * @returns observable that fires if the action is triggered.\r\n   * Service will complete the observable\r\n   */\r\n  add(message: string, action?: string, config: MatSnackBarConfig = { duration: this.defaultDuration }) {\r\n    const triggered$ = new Subject<void>();\r\n    this.messageQueue.push({ message, action, config, triggered$ });\r\n    if (!this.processingMessage) {\r\n      this.showSnackBar();\r\n    }\r\n    return triggered$.asObservable();\r\n  }\r\n\r\n  private showSnackBar() {\r\n    const nextMsg = this.messageQueue.shift();\r\n\r\n    if (nextMsg == null) {\r\n      this.processingMessage = false;\r\n      return;\r\n    }\r\n\r\n    this.processingMessage = true;\r\n\r\n    const snackBarRef = this.snackBar.open(nextMsg.message, nextMsg.action, nextMsg.config);\r\n    snackBarRef.afterDismissed().subscribe(() => {\r\n      nextMsg.triggered$.complete();\r\n      this.showSnackBar();\r\n    });\r\n    snackBarRef.onAction().subscribe(() => {\r\n      nextMsg.triggered$.next();\r\n    });\r\n  }\r\n\r\n  // spm TODO: ngOnDestroy only fires in services provided in component\r\n  ngOnDestroy() {\r\n    for (const message of this.messageQueue) {\r\n      message.triggered$.complete();\r\n    }\r\n    this.messageQueue = null;\r\n  }\r\n}\r\n\r\nclass SnackBarData {\r\n  message: string;\r\n  action: string;\r\n  config: MatSnackBarConfig;\r\n  triggered$: Subject<void>;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { webApiAppFile, webApiAppFileCreate, webApiAppFilesAll } from '../../../../../edit/shared/services';\r\nimport { keyIsShared } from '../../shared/constants/session.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SourceService {\r\n  private isShared = sessionStorage.getItem(keyIsShared) ?? false.toString();\r\n\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /** Key is templateId or path */\r\n  get(key: number | string) {\r\n    return this.http.get<SourceView>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(key) }\r\n    }).pipe(\r\n      map(view => {\r\n        if (view.Type.toLowerCase() === 'auto') {\r\n          switch (view.Extension.toLowerCase()) {\r\n            case '.cs':\r\n            case '.cshtml':\r\n              view.Type = 'Razor';\r\n              break;\r\n            case '.html':\r\n            case '.css':\r\n            case '.js':\r\n              view.Type = 'Token';\r\n              break;\r\n          }\r\n        }\r\n        return view;\r\n      })\r\n    );\r\n  }\r\n\r\n  /** Key is templateId or path */\r\n  save(key: number | string, view: SourceView) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFile), view, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, ...this.templateIdOrPath(key) },\r\n    });\r\n  }\r\n\r\n  getTemplates() {\r\n    return this.http.get<string[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFilesAll), {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, withSubfolders: 'true' },\r\n    });\r\n  }\r\n\r\n  createTemplate(name: string) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppFileCreate), {}, {\r\n      params: { appId: this.context.appId.toString(), global: this.isShared, path: name },\r\n    });\r\n  }\r\n\r\n  private templateIdOrPath(key: number | string) {\r\n    if (typeof key === typeof 0) {\r\n      return { templateId: key.toString() };\r\n    } else {\r\n      return { path: key as string };\r\n    }\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport cloneDeep from 'lodash-es/cloneDeep';\r\nimport { DataTypeConstants } from '../../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { Snippet } from '../models/snippet.model';\r\nimport { SourceView } from '../models/source-view.model';\r\n\r\n@Injectable()\r\nexport class SnippetsService {\r\n  private keyPrefixes = ['@', '['];\r\n  private keyPrefixIndex = (view: SourceView) => (view.Type.indexOf('Razor') > -1) ? 0 : 1;\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  async getSnippets(view: SourceView) {\r\n    const res: any = await this.http.get('../ng-assets/snippets.json.js').toPromise();\r\n    const snippets: Snippet[] = res.snippets;\r\n    const relevant = this.filterAwayNotNeededSnippetsList(snippets, view);\r\n    const standAndInputSnips = this.extractInputTypeSnippets(relevant);\r\n    const sets = this.initSnippetsWithConfig(standAndInputSnips.standardArray, view, standAndInputSnips.inputTypeSnippets);\r\n    return { sets, list: standAndInputSnips.standardArray };\r\n  }\r\n\r\n  // scan the list for sets starting with @ or [ and filter if not needed right now\r\n  private filterAwayNotNeededSnippetsList(list: Snippet[], view: SourceView) {\r\n    const newList = [];\r\n    for (const itm of list) {\r\n      const setHasPrefix = this.keyPrefixes.indexOf(itm.set[0]);\r\n      if (setHasPrefix === -1 || (setHasPrefix === this.keyPrefixIndex(view))) {\r\n        // if necessary, remove first char\r\n        if (setHasPrefix === this.keyPrefixIndex(view)) {\r\n          itm.set = itm.set.substr(1);\r\n        }\r\n        newList.push(itm);\r\n      }\r\n    }\r\n    return newList;\r\n  }\r\n\r\n  private extractInputTypeSnippets(list: Snippet[]) {\r\n    const standardArray: Snippet[] = [];\r\n    const inputTypeArray: Snippet[] = [];\r\n\r\n    for (const itm of list) {\r\n      const systemSnippet = itm.set[0] === '\\\\';\r\n      if (!systemSnippet) {\r\n        standardArray.push(itm);\r\n      } else {\r\n        itm.set = itm.set.substr(1);\r\n        inputTypeArray.push(itm);\r\n      }\r\n    }\r\n    const inputTypeSnippets = this.catalogInputTypeSnippets(inputTypeArray);\r\n    return {\r\n      standardArray,\r\n      inputTypeSnippets,\r\n    };\r\n  }\r\n\r\n  private catalogInputTypeSnippets(list: Snippet[]) {\r\n    const inputTypeList: any = {};\r\n    for (const itm of list) {\r\n      if (inputTypeList[itm.subset] === undefined) {\r\n        inputTypeList[itm.subset] = [];\r\n      }\r\n      inputTypeList[itm.subset].push(itm);\r\n    }\r\n    return inputTypeList;\r\n  }\r\n\r\n  private initSnippetsWithConfig(sets: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    sets = this.makeTree(sets);\r\n\r\n    // retrieve all relevant content-types and infos\r\n    sets.Content = Object.assign({}, sets.Content, { Fields: {}, PresentationFields: {} });\r\n    if (templateConfiguration.TypeContent) {\r\n      this.loadContentType(sets.Content.Fields, templateConfiguration.TypeContent, 'Content', templateConfiguration, inputTypeSnippets);\r\n    }\r\n    if (templateConfiguration.TypeContentPresentation) {\r\n      this.loadContentType(\r\n        sets.Content.PresentationFields, templateConfiguration.TypeContentPresentation,\r\n        'Content.Presentation', templateConfiguration, inputTypeSnippets,\r\n      );\r\n    }\r\n\r\n    if (templateConfiguration.HasList) {\r\n      sets.List = Object.assign({}, sets.List, { Fields: {}, PresentationFields: {} });\r\n      if (templateConfiguration.TypeList) {\r\n        this.loadContentType(sets.List.Fields, templateConfiguration.TypeList, 'Header', templateConfiguration, inputTypeSnippets);\r\n      }\r\n      if (templateConfiguration.TypeListPresentation) {\r\n        this.loadContentType(\r\n          sets.List.PresentationFields, templateConfiguration.TypeListPresentation,\r\n          'Header.Presentation', templateConfiguration, inputTypeSnippets,\r\n        );\r\n      }\r\n    } else {\r\n      delete sets.List;\r\n    }\r\n\r\n    // maybe App-infos\r\n    if (templateConfiguration.HasApp) {\r\n      sets.App.Resources = {};\r\n      sets.App.Settings = {};\r\n      this.loadContentType(sets.App.Resources, 'App-Resources', 'App.Resources', templateConfiguration, inputTypeSnippets);\r\n      this.loadContentType(sets.App.Settings, 'App-Settings', 'App.Settings', templateConfiguration, inputTypeSnippets);\r\n    }\r\n\r\n    return sets;\r\n  }\r\n\r\n  // Convert the list into a tree with set/subset/item\r\n  private makeTree(list: Snippet[]) {\r\n    const tree: any = {};\r\n    for (const o of list) {\r\n      if (tree[o.set] === undefined) {\r\n        tree[o.set] = {};\r\n      }\r\n      if (tree[o.set][o.subset] === undefined) {\r\n        tree[o.set][o.subset] = [];\r\n      }\r\n      const reformatted = {\r\n        key: o.name,\r\n        label: this.label(o.set, o.subset, o.name),\r\n        snip: o.content,\r\n        help: o.help || this.help(o.set, o.subset, o.name),\r\n        links: this.linksList(o.links)\r\n      };\r\n\r\n      tree[o.set][o.subset].push(reformatted);\r\n    }\r\n    return tree;\r\n  }\r\n\r\n  private label(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Key');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = snip;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private getHelpKey(set: any, subset: any, snip: any, addition: any) {\r\n    return 'SourceEditorSnippets' + '.' + set + '.' + subset + '.' + snip + addition;\r\n  }\r\n\r\n  private help(set: any, subset: any, snip: any) {\r\n    const key = this.getHelpKey(set, subset, snip, '.Help');\r\n\r\n    let result = this.translate.instant(key);\r\n    if (result === key) {\r\n      result = '';\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private linksList(linksString: any) {\r\n    if (!linksString) {\r\n      return null;\r\n    }\r\n    const links = [];\r\n    const llist = linksString.split('\\n');\r\n    for (const l of llist) {\r\n      const pair = l.split(':');\r\n      if (pair.length === 3) {\r\n        links.push({ name: pair[0].trim(), url: pair[1].trim() + ':' + pair[2].trim() });\r\n      }\r\n    }\r\n    if (links.length === 0) { return null; }\r\n    return links;\r\n  }\r\n\r\n  // get fields in content types\r\n  private loadContentType(target: any, type: any, prefix: any, templateConfiguration: SourceView, inputTypeSnippets: any) {\r\n    this.getFields(templateConfiguration.AppId, type)\r\n      .then(fields => {\r\n        // first add common items if the content-type actually exists\r\n        for (const value of fields) {\r\n          const fieldname = value.StaticName;\r\n          target[fieldname] = {\r\n            key: fieldname,\r\n            label: fieldname,\r\n            snip: this.valuePlaceholder(prefix, fieldname, templateConfiguration),\r\n            help: value.Metadata.merged.Notes || '' + ' (' + value.Type.toLowerCase() + ') '\r\n          };\r\n          // try to add generic snippets specific to this input-type\r\n          const snipDefaults = cloneDeep(target[fieldname]); // must be a copy, because target[fieldname] will grow\r\n\r\n          this.attachSnippets(target, prefix, fieldname, value.InputType, snipDefaults, inputTypeSnippets);\r\n        }\r\n\r\n        const std = ['EntityId', 'EntityTitle', 'EntityGuid', 'EntityType', 'IsPublished', 'Modified'];\r\n        if (fields.length) {\r\n          // tslint:disable-next-line:prefer-for-of\r\n          for (let i = 0; i < std.length; i++) {\r\n            target[std[i]] = {\r\n              key: std[i],\r\n              label: std[i],\r\n              snip: this.valuePlaceholder(prefix, std[i], templateConfiguration),\r\n              help: this.translate.instant('SourceEditorSnippets.StandardFields.' + std[i] + '.Help'),\r\n            };\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  private valuePlaceholder(obj: any, val: any, templateConfiguration: any) {\r\n    return (templateConfiguration.Type.indexOf('Razor') > -1)\r\n      ? '@' + obj + '.' + val\r\n      : '[' + obj.replace('.', ':') + ':' + val + ']';\r\n  }\r\n\r\n  private getFields(appId: number, staticName: string) {\r\n    return this.http.get(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appid: appId.toString(), staticName },\r\n    })\r\n      .toPromise()\r\n      .then((fields: Field[]) => {\r\n        fields = fields.filter(field => field.Type !== DataTypeConstants.Empty);\r\n        if (fields) {\r\n          for (const fld of fields) {\r\n            if (!fld.Metadata) { continue; }\r\n            const md = fld.Metadata;\r\n            const allMd = md.All;\r\n            const typeMd = md[fld.Type];\r\n            const inputMd = md[fld.InputType];\r\n            md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n          }\r\n        }\r\n        return fields;\r\n      });\r\n  }\r\n\r\n  private attachSnippets(target: any, prefix: any, fieldname: any, inputType: any, snipDefaults: any, inputTypeSnippets: any) {\r\n    let genericSnippet = inputTypeSnippets[inputType];\r\n    if (inputType.indexOf('-')) {   // if it's a sub-type, let's also get the master-type\r\n      const fieldType = inputType.substr(0, inputType.indexOf('-'));\r\n      if (fieldType) {\r\n        const typeSnips = inputTypeSnippets[fieldType];\r\n        if (typeSnips) {\r\n          genericSnippet = genericSnippet ? genericSnippet.concat(typeSnips) : typeSnips;\r\n        }\r\n      }\r\n    }\r\n    if (!genericSnippet) {\r\n      return;\r\n    }\r\n\r\n    if (target[fieldname].more === undefined) {\r\n      target[fieldname].more = [];\r\n    }\r\n    const fieldSnips = target[fieldname].more;\r\n    // tslint:disable-next-line:prefer-for-of\r\n    for (let g = 0; g < genericSnippet.length; g++) {\r\n      try {\r\n        fieldSnips[fieldname + '-' + genericSnippet[g].name] = Object.assign({}, snipDefaults, {\r\n          key: fieldname + ' - ' + genericSnippet[g].name,\r\n          label: genericSnippet[g].name,\r\n          snip: this.localizeGenericSnippet(genericSnippet[g].content, prefix, fieldname),\r\n          collapse: true\r\n        });\r\n      } finally { }\r\n    }\r\n  }\r\n\r\n  private localizeGenericSnippet(snip: any, objName: any, fieldName: any) {\r\n    snip = snip.replace(/(\\$\\{[0-9]+\\:)var(\\})/gi, '$1' + objName + '$2')\r\n      .replace(/(\\$\\{[0-9]+\\:)prop(\\})/gi, '$1' + fieldName + '$2');\r\n    return snip;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { TreeItem } from '../models/tree-item.model';\r\n\r\n/** Sorts folders before files */\r\n@Pipe({ name: 'sortItems' })\r\nexport class SortItemsPipe implements PipeTransform {\r\n\r\n  transform(items: TreeItem[]) {\r\n    if (items == null) { return items; }\r\n\r\n    items.sort((item1, item2) => {\r\n      if (item1.isFolder < item2.isFolder) {\r\n        return 1;\r\n      } else if (item1.isFolder > item2.isFolder) {\r\n        return -1;\r\n      } else {\r\n        return 0;\r\n      }\r\n    });\r\n    return items;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'depthPadding' })\r\nexport class DepthPaddingPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(depth: number, isFolder: boolean) {\r\n    let padding: number;\r\n    if (isFolder) {\r\n      padding = depth * 8;\r\n    } else {\r\n      padding = (depth === 0) ? 8 : (depth * 8 + 16);\r\n    }\r\n    return this.sanitizer.bypassSecurityTrustStyle(`padding-left: ${padding}px;`);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark explorer-wrapper\">\r\n\r\n  <div>\r\n    <ng-container *ngFor=\"let item of (tree | sortItems)\">\r\n      <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item}\"></ng-container>\r\n    </ng-container>\r\n\r\n    <ng-template #fileOrFolder let-item=\"item\">\r\n\r\n      <div class=\"file\" *ngIf=\"!item.isFolder\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n        [ngClass]=\"{'active': toggledItems.includes(item.pathFromRoot) }\" matTooltipShowDelay=\"750\"\r\n        [matTooltip]=\"item.name\" (click)=\"openTemplate(item.pathFromRoot)\">\r\n        {{ item.name }}\r\n      </div>\r\n\r\n      <div *ngIf=\"item.isFolder\">\r\n        <div class=\"folder-name-wrapper\" [style]=\"item.depth | depthPadding: item.isFolder\"\r\n          (click)=\"toggleItem(item.pathFromRoot)\">\r\n          <div class=\"folder-name\" matTooltipShowDelay=\"750\" [matTooltip]=\"item.name\">\r\n            <mat-icon>\r\n              {{ toggledItems.includes(item.pathFromRoot) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}\r\n            </mat-icon>\r\n            <span>{{ item.name }}</span>\r\n          </div>\r\n          <div class=\"add-item\" matTooltipShowDelay=\"750\" matTooltip=\"Create file in this folder\"\r\n            appClickStopPropagation (click)=\"addFile(item.pathFromRoot)\">\r\n            <mat-icon>add</mat-icon>\r\n          </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledItems.includes(item.pathFromRoot)\">\r\n          <ng-container *ngFor=\"let item1 of (item.children | sortItems)\">\r\n            <ng-container *ngTemplateOutlet=\"fileOrFolder; context: {item: item1}\"></ng-container>\r\n          </ng-container>\r\n        </ng-container>\r\n      </div>\r\n\r\n    </ng-template>\r\n  </div>\r\n\r\n  <div class=\"create-button-wrapper\">\r\n    <button mat-icon-button matTooltip=\"Create file\" (click)=\"addFile()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { DialogService } from '../../shared/services/dialog.service';\r\nimport { SourceView } from '../models/source-view.model';\r\nimport { TreeItem } from '../models/tree-item.model';\r\nimport { calculateTree } from './code-templates.helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-templates',\r\n  templateUrl: './code-templates.component.html',\r\n  styleUrls: ['./code-templates.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeTemplatesComponent implements OnInit, OnChanges {\r\n  @Input() view: SourceView;\r\n  @Input() templates: string[];\r\n  @Output() createTemplate: EventEmitter<string> = new EventEmitter();\r\n  tree: TreeItem[];\r\n  toggledItems: string[] = [];\r\n\r\n  constructor(private dialogService: DialogService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.templates?.currentValue) {\r\n      this.tree = calculateTree(this.templates);\r\n    }\r\n    if (changes.view?.currentValue) {\r\n      this.showFileInTree(this.view.FileName);\r\n    }\r\n  }\r\n\r\n  openTemplate(path: string) {\r\n    this.dialogService.openCodeFile(path);\r\n  }\r\n\r\n  toggleItem(path: string) {\r\n    GeneralHelpers.toggleInArray(path, this.toggledItems);\r\n  }\r\n\r\n  addFile(folder?: string) {\r\n    this.createTemplate.emit(folder);\r\n  }\r\n\r\n  private showFileInTree(file: string) {\r\n    if (file == null) { return; }\r\n    if (this.toggledItems.includes(file)) { return; }\r\n\r\n    const paths = file.split('/');\r\n    let pathFromRoot = '';\r\n    for (const path of paths) {\r\n      pathFromRoot = !pathFromRoot ? path : `${pathFromRoot}/${path}`;\r\n      if (this.toggledItems.includes(pathFromRoot)) { continue; }\r\n      this.toggleItem(pathFromRoot);\r\n    }\r\n  }\r\n\r\n}\r\n","import { TreeItem } from '../models/tree-item.model';\r\n\r\nexport function calculateTree(templates: string[]): TreeItem[] {\r\n  if (!templates) { return []; }\r\n\r\n  const tree: TreeItem[] = [];\r\n  for (const template of templates) {\r\n    let parent: TreeItem[] = tree;\r\n    const paths = template.split('/');\r\n    const last = paths[paths.length - 1];\r\n    let pathFromRoot = '';\r\n    for (let i = 0; i < paths.length; i++) {\r\n      const path = paths[i];\r\n      pathFromRoot += i ? `/${path}` : path;\r\n      const existing = parent.find(item => item.name === path);\r\n      if (existing) {\r\n        parent = existing.children;\r\n      } else {\r\n        const item: TreeItem = {\r\n          depth: i,\r\n          name: path,\r\n          pathFromRoot,\r\n          isFolder: path !== last,\r\n          ...(path !== last && { children: [] }),\r\n        };\r\n        parent.push(item);\r\n        parent = item.children;\r\n      }\r\n    }\r\n  }\r\n\r\n  return tree;\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { Dictionary } from '../../shared/models/dictionary.model';\r\n\r\n@Pipe({ name: 'objectToArray' })\r\nexport class ObjectToArrayPipe implements PipeTransform {\r\n  transform(obj: Dictionary | Dictionary[]): Dictionary[] {\r\n\r\n    if (Array.isArray(obj)) { return obj; }\r\n\r\n    return Object.values(obj);\r\n  }\r\n}\r\n","<div class=\"editor-active-explorer fancy-scrollbar-dark\">\r\n  <div *ngFor=\"let section of snippets | keyvalue\">\r\n\r\n    <div class=\"collapsible-header section\" [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.Help' | translate\"\r\n      matTooltipShowDelay=\"750\" (click)=\"toggleSection(section)\">\r\n      <mat-icon>{{ toggledSections.includes(section) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n      <span>{{ 'SourceEditorSnippets.' + section.key + '.Title' | translate }}</span>\r\n    </div>\r\n\r\n    <ng-container *ngIf=\"toggledSections.includes(section)\">\r\n      <div *ngFor=\"let folder of section.value | keyvalue\">\r\n\r\n        <div class=\"collapsible-header folder\"\r\n          [matTooltip]=\"'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Help' | translate\"\r\n          matTooltipShowDelay=\"750\" (click)=\"toggleFolder(folder)\">\r\n          <mat-icon>{{ toggledFolders.includes(folder) ? 'keyboard_arrow_down' : 'keyboard_arrow_right' }}</mat-icon>\r\n          <span>{{ 'SourceEditorSnippets.' + section.key + '.' + folder.key + '.Title' | translate }}</span>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\"toggledFolders.includes(folder)\">\r\n          <div class=\"snippet\" *ngFor=\"let snippet of (folder.value | objectToArray)\">\r\n\r\n            <div class=\"snippet-label\">\r\n              <div matRipple class=\"text\" [matTooltip]=\"snippet.snip\" matTooltipShowDelay=\"750\"\r\n                (click)=\"addSnippet(snippet.snip)\">\r\n                {{ snippet.label }}\r\n              </div>\r\n              <mat-icon *ngIf=\"snippet.more\" matTooltip=\"Show More\" matTooltipShowDelay=\"750\"\r\n                (click)=\"toggleMore(snippet)\">\r\n                {{ toggledMores.includes(snippet) ? 'more_vert' : 'more_horiz' }}\r\n              </mat-icon>\r\n              <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                (click)=\"toggleInfo(snippet)\">\r\n                info\r\n              </mat-icon>\r\n            </div>\r\n\r\n            <div class=\"snippet-help\" *ngIf=\"toggledInfos.includes(snippet)\">\r\n              <div class=\"text\" [innerHTML]=\"snippet.help | safeHtml\"></div>\r\n              <div *ngFor=\"let link of snippet.links\">\r\n                <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n              </div>\r\n            </div>\r\n\r\n            <ng-container *ngIf=\"toggledMores.includes(snippet)\">\r\n              <div *ngFor=\"let more of (snippet.more | objectToArray)\">\r\n\r\n                <div class=\"snippet-label\">\r\n                  <div matRipple class=\"text text-more\" [matTooltip]=\"more.snip\" matTooltipShowDelay=\"750\"\r\n                    (click)=\"addSnippet(more.snip)\">\r\n                    {{ more.label }}\r\n                  </div>\r\n                  <mat-icon matTooltip=\"Show Help\" matTooltipShowDelay=\"750\" appClickStopPropagation\r\n                    (click)=\"toggleInfo(more)\">\r\n                    info\r\n                  </mat-icon>\r\n                </div>\r\n\r\n                <div class=\"snippet-help snippet-help-more\" *ngIf=\"toggledInfos.includes(more)\">\r\n                  <div class=\"text\" [innerHTML]=\"more.help | safeHtml\"></div>\r\n                  <div *ngFor=\"let link of more.links\">\r\n                    <a [href]=\"link.url\" target=\"_blank\">{{ link.name }}</a>\r\n                  </div>\r\n                </div>\r\n\r\n              </div>\r\n            </ng-container>\r\n\r\n          </div>\r\n        </ng-container>\r\n\r\n      </div>\r\n    </ng-container>\r\n\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\n\r\n@Component({\r\n  selector: 'app-code-snippets',\r\n  templateUrl: './code-snippets.component.html',\r\n  styleUrls: ['./code-snippets.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeSnippetsComponent implements OnInit {\r\n  @Input() snippets: any;\r\n  @Output() insertSnippet: EventEmitter<any> = new EventEmitter();\r\n  toggledSections: any[] = [];\r\n  toggledFolders: any[] = [];\r\n  toggledInfos: any[] = [];\r\n  toggledMores: any[] = [];\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  addSnippet(snippet: string) {\r\n    this.insertSnippet.emit(snippet);\r\n  }\r\n\r\n  toggleSection(set: any) {\r\n    GeneralHelpers.toggleInArray(set, this.toggledSections);\r\n  }\r\n\r\n  toggleFolder(item: any) {\r\n    GeneralHelpers.toggleInArray(item, this.toggledFolders);\r\n  }\r\n\r\n  toggleInfo(info: any) {\r\n    GeneralHelpers.toggleInArray(info, this.toggledInfos);\r\n  }\r\n\r\n  toggleMore(more: any) {\r\n    GeneralHelpers.toggleInArray(more, this.toggledMores);\r\n  }\r\n\r\n}\r\n","<div class=\"editor-root\" *ngIf=\"(templateVars$ | async) as data\">\r\n  <div class=\"editor-side-toolbar\">\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === explorer.templates }\" matTooltip=\"Templates\"\r\n      (click)=\"toggleExplorer(explorer.templates)\">\r\n      <mat-icon>file_copy</mat-icon>\r\n    </div>\r\n    <div class=\"button\" [ngClass]=\"{ 'active': activeExplorer === explorer.snippets }\" matTooltip=\"Snippets\"\r\n      (click)=\"toggleExplorer(explorer.snippets)\">\r\n      <mat-icon>code</mat-icon>\r\n    </div>\r\n  </div>\r\n\r\n  <app-code-templates [hidden]=\"activeExplorer !== explorer.templates\" [view]=\"data.view\" [templates]=\"data.templates\"\r\n    (createTemplate)=\"createTemplate($event)\">\r\n  </app-code-templates>\r\n  <app-code-snippets [hidden]=\"activeExplorer !== explorer.snippets\" [snippets]=\"data.explorerSnipps\"\r\n    (insertSnippet)=\"changeInsertSnipp($event)\">\r\n  </app-code-snippets>\r\n\r\n  <app-ace-editor *ngIf=\"data.view\" [filename]=\"data.view.FileName\" [ngModel]=\"data.view.Code\"\r\n    (ngModelChange)=\"codeChanged($event)\" [snippets]=\"data.editorSnipps\" [toggleResize]=\"!this.activeExplorer\">\r\n  </app-ace-editor>\r\n\r\n  <button mat-fab mat-elevation-z24 matTooltip=\"Click to save or CTRL + S\" (click)=\"save()\">\r\n    <mat-icon>done</mat-icon>\r\n  </button>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { Title } from '@angular/platform-browser';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, fromEvent, Subscription } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SanitizeHelper } from '../../../../edit/eav-material-controls/adam/sanitize.helper';\r\nimport { defaultControllerName, defaultTemplateName } from '../shared/constants/file-names.constants';\r\nimport { keyItems } from '../shared/constants/session.constants';\r\nimport { EditItem, SourceItem, } from '../shared/models/edit-form.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SnackBarStackService } from '../shared/services/snack-bar-stack.service';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { SourceView } from './models/source-view.model';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\n@Component({\r\n  selector: 'app-code-editor',\r\n  templateUrl: './code-editor.component.html',\r\n  styleUrls: ['./code-editor.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CodeEditorComponent implements OnInit, OnDestroy {\r\n  @ViewChild(AceEditorComponent) private aceEditorRef: AceEditorComponent;\r\n\r\n  explorer = {\r\n    templates: 'templates',\r\n    snippets: 'snippets'\r\n  };\r\n  activeExplorer = this.explorer.templates;\r\n  private view$ = new BehaviorSubject<SourceView>(null);\r\n  private templates$ = new BehaviorSubject<string[]>(null);\r\n  private explorerSnipps$ = new BehaviorSubject<any>(null);\r\n  private editorSnipps$ = new BehaviorSubject<any>(null);\r\n  templateVars$ = combineLatest([this.view$, this.templates$, this.explorerSnipps$, this.editorSnipps$]).pipe(\r\n    map(([view, templates, explorerSnipps, editorSnipps]) => ({ view, templates, explorerSnipps, editorSnipps })),\r\n  );\r\n\r\n  private viewKey: number | string; // templateId or path\r\n  private savedCode: string;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private context: Context,\r\n    private route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private snackBarStack: SnackBarStackService,\r\n    private sourceService: SourceService,\r\n    private snippetsService: SnippetsService,\r\n    private zone: NgZone,\r\n    private titleService: Title,\r\n    private dialogService: DialogService,\r\n  ) {\r\n    this.context.init(this.route);\r\n    this.calculateViewKey();\r\n    this.attachListeners();\r\n  }\r\n\r\n  ngOnInit() {\r\n    const view$ = this.sourceService.get(this.viewKey);\r\n    const templates$ = this.sourceService.getTemplates();\r\n    forkJoin([view$, templates$]).subscribe(([view, templates]) => {\r\n      this.view$.next(view);\r\n      this.savedCode = this.view$.value.Code;\r\n      this.titleService.setTitle(`${this.view$.value.FileName} - Code Editor`);\r\n      this.templates$.next(templates);\r\n      this.showCodeAndEditionWarnings(view, templates);\r\n\r\n      this.snippetsService.getSnippets(this.view$.value).then(res => {\r\n        this.explorerSnipps$.next(res.sets);\r\n        this.editorSnipps$.next(res.list);\r\n      });\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.view$.complete();\r\n    this.templates$.complete();\r\n    this.explorerSnipps$.complete();\r\n    this.editorSnipps$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  toggleExplorer(explorer: string) {\r\n    if (this.activeExplorer === explorer) {\r\n      this.activeExplorer = null;\r\n    } else {\r\n      this.activeExplorer = explorer;\r\n    }\r\n  }\r\n\r\n  createTemplate(folder?: string) {\r\n    let question = 'File name:';\r\n    let suggestion = defaultTemplateName;\r\n    if (folder === 'api' || folder?.startsWith('api/')) {\r\n      question = 'Controller name:';\r\n      suggestion = defaultControllerName;\r\n    }\r\n    let name = prompt(question, suggestion);\r\n    if (name === null || name.length === 0) { return; }\r\n\r\n    name = SanitizeHelper.sanitizePath(name);\r\n    if (folder != null) {\r\n      name = `${folder}/${name}`;\r\n    }\r\n    this.sourceService.createTemplate(name).subscribe(res => {\r\n      this.sourceService.getTemplates().subscribe(files => {\r\n        this.templates$.next(files);\r\n      });\r\n    });\r\n  }\r\n\r\n  changeInsertSnipp(snippet: any) {\r\n    this.aceEditorRef.insertSnippet(snippet);\r\n  }\r\n\r\n  codeChanged(code: string) {\r\n    this.view$.next({ ...this.view$.value, Code: code });\r\n  }\r\n\r\n  save() {\r\n    this.snackBar.open('Saving...');\r\n    let codeToSave = this.view$.value.Code;\r\n    this.sourceService.save(this.viewKey, this.view$.value).subscribe({\r\n      next: res => {\r\n        if (!res) {\r\n          this.snackBar.open('Failed', null, { duration: 2000 });\r\n          return;\r\n        }\r\n        this.savedCode = codeToSave;\r\n        codeToSave = null;\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Failed', null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private calculateViewKey() {\r\n    // spm TODO: Move items for code-editor to the url?\r\n    const itemsRaw = sessionStorage.getItem(keyItems);\r\n    const editItems: EditItem[] | SourceItem[] = JSON.parse(itemsRaw);\r\n    const item = editItems[0];\r\n    this.viewKey = (item as EditItem).EntityId || (item as SourceItem).Path;\r\n  }\r\n\r\n  /** Show info about editions if other files with the same name exist */\r\n  private showCodeAndEditionWarnings(view: SourceView, files: string[]) {\r\n    const pathAndName = view.FileName;\r\n    const pathSeparator = pathAndName.indexOf('/') > -1 ? pathAndName.lastIndexOf('/') + 1 : 0;\r\n    const pathWithSlash = pathSeparator === 0 ? '' : pathAndName.substring(0, pathSeparator);\r\n    const fullName = pathAndName.substring(pathSeparator);\r\n    const name = fullName.substring(0, fullName.length - view.Extension.length);\r\n    const nameCode = name + '.code' + view.Extension;\r\n    // find out if we also have a code file\r\n    const codeFile = files.find(file => file === pathWithSlash + nameCode);\r\n    const otherEditions = files.filter(file => file.endsWith(fullName)).length - 1;\r\n\r\n    if (codeFile) {\r\n      this.snackBarStack\r\n        .add(`This template also has a code-behind file '${codeFile}'.`, 'Open')\r\n        .subscribe(() => {\r\n          this.dialogService.openCodeFile(codeFile);\r\n        });\r\n    }\r\n    if (otherEditions) {\r\n      this.snackBarStack\r\n        .add(`There are ${otherEditions} other editions of this. You may be editing an edition which is not the one you see.`, 'Help')\r\n        .subscribe(() => {\r\n          window.open('https://r.2sxc.org/polymorphism', '_blank');\r\n        });\r\n    }\r\n  }\r\n\r\n  private attachListeners() {\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(window, 'beforeunload').subscribe((event: BeforeUnloadEvent) => {\r\n          if (this.savedCode === this.view$.value.Code) { return; }\r\n          event.preventDefault();\r\n          event.returnValue = ''; // fix for Chrome\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent(window, 'keydown').subscribe((event: KeyboardEvent) => {\r\n          const CTRL_S = event.keyCode === 83 && (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey);\r\n          if (!CTRL_S) { return; }\r\n          event.preventDefault();\r\n          this.zone.run(() => { this.save(); });\r\n        })\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: CodeEditorComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class CodeEditorRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { EavWindow } from '../shared/models/eav-window.model';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { buildTranslateConfiguration, TranslateLoaderWithErrorHandling } from '../shared/translation';\r\nimport { AceEditorComponent } from './ace-editor/ace-editor.component';\r\nimport { CodeEditorRoutingModule } from './code-editor-routing.module';\r\nimport { CodeEditorComponent } from './code-editor.component';\r\nimport { CodeSnippetsComponent } from './code-snippets/code-snippets.component';\r\nimport { ObjectToArrayPipe } from './code-snippets/object-to-array.pipe';\r\nimport { CodeTemplatesComponent } from './code-templates/code-templates.component';\r\nimport { DepthPaddingPipe } from './code-templates/depth-padding.pipe';\r\nimport { SortItemsPipe } from './code-templates/order-items.pipe';\r\nimport { SnippetsService } from './services/snippets.service';\r\nimport { SourceService } from './services/source.service';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactoryCode(http: HttpClient) {\r\n  return new TranslateLoaderWithErrorHandling(http, './i18n/code-editor.', `.js?${window.sxcVersion}`);\r\n}\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    ObjectToArrayPipe,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n    DepthPaddingPipe,\r\n    SortItemsPipe,\r\n  ],\r\n  entryComponents: [\r\n    CodeEditorComponent,\r\n    CodeSnippetsComponent,\r\n    CodeTemplatesComponent,\r\n    AceEditorComponent,\r\n  ],\r\n  imports: [\r\n    CodeEditorRoutingModule,\r\n    SharedComponentsModule,\r\n    CommonModule,\r\n    MatDialogModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTooltipModule,\r\n    MatSnackBarModule,\r\n    FormsModule,\r\n    MatSelectModule,\r\n    MatRippleModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactoryCode)),\r\n  ],\r\n  providers: [\r\n    Context,\r\n    SourceService,\r\n    DialogService,\r\n    SnippetsService,\r\n    TranslateService,\r\n  ]\r\n})\r\nexport class CodeEditorModule { }\r\n"],"sourceRoot":"webpack:///"}