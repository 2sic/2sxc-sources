{"version":3,"mappings":"+YAOEA,gDAgBEA,kBACEA,oFACFA,+BACAA,kBACEA,6EACFA,uIACAA,kBAKEA,SACFA,gCAN4EA,kFAK1EA,yDAZJA,kBACEA,wBAGAA,wBAGAA,wBAOFA,iCAbQA,8CAGAA,+CAGmBA,yFAUzBA,SACEA,qBAA0BA,kDAASC,gBAAeD,kBAAMA,QACxDA,qBACEA,kDAASE,cACTF,oBACFA,QACFA,mCAJ2CA,iHAK3CA,SACEA,qBAAyCA,kDAASG,gBAAeH,iBAAKA,QACxEA,+CAhDJA,iBAA+CA,yDAAgBI,kBAG7DJ,iBACEA,iBAA8BA,sBAAUA,QAC1CA,QAEAA,+BAEAA,eACEA,4GACAA,eAAgCA,iCAAqBA,QAAIA,qCAClCA,gBAAkEA,sBAASA,QAAIA,eACxGA,QAEAA,gBACEA,qBAAkFA,mDAASK,UACzFL,iBAAMA,UAAoEA,QAC5EA,QACAA,uBAA8BA,mDAAUM,gBAAxCN,QACFA,QAEAA,yBAgBAA,mBACEA,kCAOAA,kCAGFA,QACFA,6BAlDoBA,gCAOJA,qCASwCA,0CAC5CA,qEAKqEA,sCAiB9DA,uEAOAA,yEC/BZ,IAAMO,EAAb,eAAaA,EAAb,WAUE,WACmCC,EACzBC,EACAC,EACAC,MAAqBC,aAHIC,kBACzBA,iBACAA,wBACAA,gBAbgBA,eAAY,mBAE9BA,kBAAe,IAAIC,KAAgB,GACnCD,iBAAc,IAAIC,IAAsB,MACxCD,mBAAgB,IAAIC,IAAiC,MAC7DD,oBAAgBE,OAAc,CAACF,KAAKG,aAAcH,KAAKI,YAAaJ,KAAKK,gBAAgBC,MACvFC,OAAI,qCAA8C,CAAEC,YAAhDC,KAA6DC,WAA7DD,KAAyEE,aAAzEF,SAPR,uCAiBE,WAC+B,MAAzBT,KAAKL,WAAWiB,QAClBZ,KAAKI,YAAYS,KAAKb,KAAKL,WAAWiB,MAAM,IAC5CZ,KAAKc,eApBX,yBAwBE,WACEd,KAAKG,aAAaY,WAClBf,KAAKI,YAAYW,WACjBf,KAAKK,cAAcU,aA3BvB,yBA8BE,WACEf,KAAKJ,UAAUoB,UA/BnB,0BAkCE,SAAaJ,GAEXZ,KAAKI,YAAYS,KADED,EAAM,IAEzBZ,KAAKK,cAAcQ,KAAK,MACxBb,KAAKc,cAtCT,wBAyCE,SAAWG,GAETjB,KAAKI,YAAYS,KADGI,EAAMC,OAA4BN,MAAM,IAE5DZ,KAAKK,cAAcQ,KAAK,QA5C5B,uBA+CE,SAAUM,GAAoB,WAC5BnB,KAAKG,aAAaU,MAAK,GACvBb,KAAKH,iBAAiBiB,UAAUd,KAAKI,YAAYgB,MAAOD,GAAaE,UAAU,CAC7ER,KAAM,sBAIJ,GAHAS,EAAKnB,aAAaU,MAAK,GACvBS,EAAKjB,cAAcQ,KAAKU,GAEqC,KAAlB,QAAvCC,EAAkC,QAAlCC,EAAwB,QAAxBhB,IAAKJ,cAAce,aAAKM,eAAEC,gBAAQC,eAAG,UAAEC,eAAEC,aAAmB,CAC9D,IAAMC,EAAaC,OAAOV,EAAKjB,cAAce,MAAMO,SAAS,GAAGM,KAAO,4DACtE,IAAKF,EAAc,OACnBT,EAAKR,UAAUiB,KAGnBG,MAAO,SAACA,GACNZ,EAAKnB,aAAaU,MAAK,GACvBS,EAAKjB,cAAcQ,KAAK,MACxBS,EAAKxB,SAASqC,KAAK,2DAA4D,KAAM,CAAEC,SAAU,aA/DzGC,kDAAa3C,GAAkBP,MAWnBmD,MAAenD,6DAXdO,EAAkB6C,6yCDf/BpD,+CACGA,8KCcUO,EAAb","names":["i0","ctx_r12","ctx_r14","ctx_r16","ctx_r18","_r3","ctx_r21","ImportAppComponent","dialogData","dialogRef","importAppService","snackBar","x","this","BehaviorSubject","combineLatest","isImporting$","importFile$","importResult$","pipe","map","isImporting","a","importFile","importResult","files","next","importApp","complete","close","event","target","changedName","value","subscribe","n","result","m","_","_a","Messages","_b","_c","MessageType","folderName","prompt","Text","error","open","duration","p","MAT_DIALOG_DATA","selectors"],"sources":["./projects/ng-dialogs/src/app/import-app/import-app.component.html","./projects/ng-dialogs/src/app/import-app/import-app.component.ts"],"sourcesContent":["<div appDragAndDrop [allowedFileTypes]=\"'zip'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Import App</div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.isImporting\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\">\r\n    Select an app package (zip) from your computer to import an app. New apps can be downloaded on\r\n    <a href=\"https://2sxc.org/apps\">https://2sxc.org/apps</a>.\r\n    For further help visit <a href=\"https://2sxc.org/en/help?tag=import-app\" target=\"_blank\">2sxc Help</a>.\r\n  </p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.isImporting\" (click)=\"fileInput.click()\">\r\n      <span>{{ data.importFile ? data.importFile.name : 'Select or drop file' }}</span>\r\n    </button>\r\n    <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light import-result-box\" *ngIf=\"data.importResult\">\r\n    <div *ngIf=\"data.importResult.Success\" class=\"sxc-message sxc-message-info\">\r\n      The import has been done. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.importResult.Success\" class=\"sxc-message sxc-message-error\">\r\n      The import failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.importResult.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === 0,\r\n      'sxc-message-success': message.MessageType === 1,\r\n      'sxc-message-error': message.MessageType === 2\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.importResult?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.importFile || data.isImporting || !!data.importResult\"\r\n        (click)=\"importApp()\">\r\n        Import\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.importResult?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ImportAppDialogData } from './import-app-dialog.config';\r\nimport { ImportAppResult } from './models/import-app-result.model';\r\nimport { ImportAppService } from './services/import-app.service';\r\n\r\n@Component({\r\n  selector: 'app-import-app',\r\n  templateUrl: './import-app.component.html',\r\n  styleUrls: ['./import-app.component.scss'],\r\n})\r\nexport class ImportAppComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private isImporting$ = new BehaviorSubject(false);\r\n  private importFile$ = new BehaviorSubject<File>(null);\r\n  private importResult$ = new BehaviorSubject<ImportAppResult>(null);\r\n  templateVars$ = combineLatest([this.isImporting$, this.importFile$, this.importResult$]).pipe(\r\n    map(([isImporting, importFile, importResult]) => ({ isImporting, importFile, importResult })),\r\n  );\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ImportAppDialogData,\r\n    private dialogRef: MatDialogRef<ImportAppComponent>,\r\n    private importAppService: ImportAppService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    if (this.dialogData.files != null) {\r\n      this.importFile$.next(this.dialogData.files[0]);\r\n      this.importApp();\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.isImporting$.complete();\r\n    this.importFile$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n    this.importApp();\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    const importFile = (event.target as HTMLInputElement).files[0];\r\n    this.importFile$.next(importFile);\r\n    this.importResult$.next(null);\r\n  }\r\n\r\n  importApp(changedName?: string) {\r\n    this.isImporting$.next(true);\r\n    this.importAppService.importApp(this.importFile$.value, changedName).subscribe({\r\n      next: result => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(result);\r\n        // The app could not be installed because the app-folder already exists. Install app in a different folder?\r\n        if (this.importResult$.value?.Messages?.[0]?.MessageType === 0) {\r\n          const folderName = prompt(this.importResult$.value.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (!folderName) { return; }\r\n          this.importApp(folderName);\r\n        }\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        this.isImporting$.next(false);\r\n        this.importResult$.next(null);\r\n        this.snackBar.open('Import failed. Please check console for more information', null, { duration: 3000 });\r\n      },\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_import-app_import-app_component_ts.51e1cef4c46eed21.js"}