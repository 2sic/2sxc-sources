{"version":3,"file":"projects_eav-ui_src_app_apps-management_site-languages_site-languages_component_ts-projects_e-de56ad.da326eced0d34b41.js","mappings":"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","names":["SiteLanguagesStatusComponent","agInit","params","this","value","refresh","toggleLanguage","event","onToggleLanguage","data","checked","static","t","core","VBU","selectors","standalone","features","i0","decls","vars","consts","template","rf","ctx","$event","MatSlideToggleModule","i1","styles","languages","ctx_r0","gridOptions","SiteLanguagesComponent","#refreshLanguages$","#zoneSvc","constructor","#buildGridOptions","Subject","transient","ZoneService","ModuleRegistry","registerModules","ClientSideRowModelModule","ngOnInit","viewModel$","pipe","startWith","undefined","switchMap","getLanguages","catchError","of","share","map","ngOnDestroy","complete","#toggleLanguage","language","enable","Code","subscribe","error","next","defaultGridOptions","columnDefs","ColumnDefinitions","IdWithDefaultRenderer","field","filter","cellRendererParams","tooltipGetter","TextWide","headerName","sort","onCellClicked","IsEnabled","width","headerClass","cellClass","split","sortable","BooleanFilterComponent","valueGetter","p","cellRenderer","SiteLanguagesComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","AsyncPipe","SxcGridModule","webApiAppRoot","ImportAppService","HttpServiceBase","importApp","file","changedName","retryOnDuplicate","formData","FormData","append","http","post","apiUrl","zoneId","result","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","_angular_core__WEBPACK_IMPORTED_MODULE_4__","jDH","factory","Éµfac"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.ts","./projects/eav-ui/src/app/apps-management/site-languages/site-languages-status/site-languages-status.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.html","./projects/eav-ui/src/app/apps-management/site-languages/site-languages.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { SiteLanguage } from '../../models/site-language.model';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status.models';\r\n\r\n@Component({\r\n  selector: 'app-site-languages-status',\r\n  templateUrl: './site-languages-status.component.html',\r\n  styleUrls: ['./site-languages-status.component.scss'],\r\n  standalone: true,\r\n  imports: [MatSlideToggleModule],\r\n})\r\nexport class SiteLanguagesStatusComponent implements ICellRendererAngularComp {\r\n  value: boolean;\r\n\r\n  private params: ICellRendererParams & SiteLanguagesStatusParams;\r\n\r\n  agInit(params: ICellRendererParams & SiteLanguagesStatusParams): void {\r\n    this.params = params;\r\n    this.value = this.params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  toggleLanguage(event: MatSlideToggleChange): void {\r\n    const language: SiteLanguage = this.params.data;\r\n    this.params.onToggleLanguage(language, event.checked);\r\n  }\r\n}\r\n","<mat-slide-toggle [checked]=\"value\" (change)=\"toggleLanguage($event)\"></mat-slide-toggle>\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.languages\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n    <mat-dialog-actions align=\"end\"></mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { catchError, map, Observable, of, share, startWith, Subject, switchMap } from 'rxjs';\r\nimport { BooleanFilterComponent } from '../../shared/components/boolean-filter/boolean-filter.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { SiteLanguage } from '../models/site-language.model';\r\nimport { ZoneService } from '../services/zone.service';\r\nimport { SiteLanguagesStatusComponent } from './site-languages-status/site-languages-status.component';\r\nimport { SiteLanguagesStatusParams } from './site-languages-status/site-languages-status.models';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { ModuleRegistry } from '@ag-grid-community/core';\r\nimport { ClientSideRowModelModule } from '@ag-grid-community/client-side-row-model';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { transient } from '../../core';\r\n\r\n@Component({\r\n  selector: 'app-site-languages',\r\n  templateUrl: './site-languages.component.html',\r\n  styleUrls: ['./site-languages.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n  ],\r\n})\r\nexport class SiteLanguagesComponent implements OnInit, OnDestroy {\r\n  gridOptions = this.#buildGridOptions();\r\n\r\n  #refreshLanguages$ = new Subject<void>();\r\n\r\n  viewModel$: Observable<SiteLanguagesViewModel>;\r\n\r\n  #zoneSvc = transient(ZoneService);\r\n\r\n  constructor() {\r\n    ModuleRegistry.registerModules([ClientSideRowModelModule]);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n    this.viewModel$ = this.#refreshLanguages$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.#zoneSvc.getLanguages().pipe(catchError(() => of(undefined)))),\r\n      share(),\r\n      map(languages => {\r\n        return { languages };\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.#refreshLanguages$.complete();\r\n  }\r\n\r\n  #toggleLanguage(language: SiteLanguage, enable: boolean): void {\r\n    this.#zoneSvc.toggleLanguage(language.Code, enable).subscribe({\r\n      error: () => this.#refreshLanguages$.next(),\r\n      next: () => this.#refreshLanguages$.next(),\r\n    });\r\n  }\r\n\r\n  #buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.IdWithDefaultRenderer,\r\n          field: 'Code',\r\n          filter: 'agTextColumnFilter',\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<SiteLanguage> = {\r\n              tooltipGetter: (language: SiteLanguage) => `ID: ${language.Code}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Culture',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const language: SiteLanguage = params.data;\r\n            this.#toggleLanguage(language, !language.IsEnabled);\r\n          },\r\n        },\r\n        {\r\n          field: 'Status',\r\n          width: 72,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-padding no-outline'.split(' '),\r\n          sortable: true,\r\n          filter: BooleanFilterComponent,\r\n          valueGetter: (p: { data: SiteLanguage }) => p.data.IsEnabled,\r\n          cellRenderer: SiteLanguagesStatusComponent,\r\n          cellRendererParams: (() => {\r\n            const params: SiteLanguagesStatusParams = {\r\n              onToggleLanguage: (language, enable) => this.#toggleLanguage(language, enable),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n\r\ninterface SiteLanguagesViewModel {\r\n  languages: SiteLanguage[];\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}