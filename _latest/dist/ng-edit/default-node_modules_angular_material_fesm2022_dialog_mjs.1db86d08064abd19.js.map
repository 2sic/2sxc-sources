{"version":3,"file":"default-node_modules_angular_material_fesm2022_dialog_mjs.1db86d08064abd19.js","mappings":"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","names":["CdkDialogContainer_ng_template_0_Template","rf","ctx","DialogConfig","constructor","this","role","panelClass","hasBackdrop","backdropClass","disableClose","width","height","data","ariaDescribedBy","ariaLabelledBy","ariaLabel","ariaModal","autoFocus","restoreFocus","closeOnNavigation","closeOnDestroy","closeOnOverlayDetachments","CdkDialogContainer","BasePortalOutlet","_elementRef","_focusTrapFactory","_document","_config","_interactivityChecker","_ngZone","_overlayRef","_focusMonitor","super","_platform","inject","Platform","_focusTrap","_elementFocusedBeforeDialogWasOpened","_closeInteractionType","_ariaLabelledByQueue","_changeDetectorRef","ChangeDetectorRef","attachDomPortal","portal","_portalOutlet","hasAttached","result","_contentAttached","push","_addAriaLabelledBy","id","markForCheck","_removeAriaLabelledBy","index","indexOf","splice","_initializeFocusTrap","_handleBackdropClicks","_captureInitialFocus","_trapFocus","ngOnDestroy","_restoreFocus","attachComponentPortal","attachTemplatePortal","_recaptureFocus","_containsFocus","_forceFocus","element","options","isFocusable","tabIndex","runOutsideAngular","callback","removeEventListener","removeAttribute","addEventListener","focus","_focusByCssSelector","selector","elementToFocus","nativeElement","querySelector","focusInitialElementWhenReady","then","focusedSuccessfully","_focusDialogContainer","focusConfig","focusTargetElement","activeElement","_getFocusedElementPierceShadowDom","body","contains","focusVia","destroy","isBrowser","create","backdropClick","subscribe","static","ɵfac","t","i0","i1","DOCUMENT","i1$1","ɵcmp","type","selectors","viewQuery","CdkPortalOutlet","_t","first","hostAttrs","hostVars","hostBindings","standalone","features","decls","vars","consts","template","dependencies","styles","encapsulation","DialogRef","overlayRef","config","closed","Subject","keydownEvents","outsidePointerEvents","event","keyCode","ESCAPE","hasModifierKey","preventDefault","close","undefined","focusOrigin","_detachSubscription","detachments","containerInstance","closedSubject","unsubscribe","dispose","next","complete","componentInstance","updatePosition","updateSize","addPanelClass","classes","removePanelClass","DIALOG_SCROLL_STRATEGY","InjectionToken","providedIn","factory","overlay","Overlay","scrollStrategies","block","DIALOG_DATA","DEFAULT_DIALOG_CONFIG","uniqueId","Dialog","openDialogs","_parentDialog","_openDialogsAtThisLevel","afterOpened","_afterOpenedAtThisLevel","_overlay","_injector","_defaultOptions","_overlayContainer","scrollStrategy","_afterAllClosedAtThisLevel","_ariaHiddenElements","Map","afterAllClosed","defer","length","_getAfterAllClosed","pipe","startWith","_scrollStrategy","open","componentOrTemplateRef","getDialogById","overlayConfig","_getOverlayConfig","dialogRef","dialogContainer","_attachContainer","_attachDialogContent","_hideNonDialogContentFromAssistiveTechnology","_removeOpenDialog","closeAll","reverseForEach","dialog","find","state","OverlayConfig","positionStrategy","position","global","centerHorizontally","centerVertically","direction","minWidth","minHeight","maxWidth","maxHeight","disposeOnNavigation","userInjector","injector","viewContainerRef","providers","provide","useValue","OverlayRef","containerType","container","containerPortal","ComponentPortal","Injector","parent","componentFactoryResolver","attach","instance","TemplateRef","_createInjector","context","$implicit","templateContext","TemplatePortal","contentRef","componentRef","fallbackInjector","get","Directionality","optional","value","change","of","emitEvent","forEach","previousValue","setAttribute","clear","overlayContainer","getContainerElement","parentElement","siblings","children","i","sibling","nodeName","hasAttribute","set","getAttribute","ɵprov","token","items","DialogModule","ɵmod","ɵinj","imports","OverlayModule","PortalModule","A11yModule","MatDialogContainer_ng_template_2_Template","MatDialogConfig","delayFocusTrap","OPEN_CLASS","OPENING_CLASS","CLOSING_CLASS","MatDialogContainer","elementRef","focusTrapFactory","dialogConfig","interactivityChecker","ngZone","_animationMode","focusMonitor","_animationStateChanged","EventEmitter","_animationsEnabled","_actionSectionCount","_hostElement","_enterAnimationDuration","parseCssTime","enterAnimationDuration","_exitAnimationDuration","exitAnimationDuration","_animationTimer","_finishDialogOpen","_clearAnimationClasses","_openAnimationDone","_finishDialogClose","emit","totalTime","_startOpenAnimation","style","setProperty","TRANSITION_DURATION_PROPERTY","_requestAnimationFrame","classList","add","_waitForAnimationToComplete","Promise","resolve","_startExitAnimation","remove","_updateActionSectionCount","delta","duration","clearTimeout","setTimeout","requestAnimationFrame","ref","location","ANIMATION_MODULE_TYPE","time","endsWith","coerceNumberProperty","substring","MatDialogState","OPEN","CLOSING","CLOSED","MatDialogRef","_ref","_containerInstance","_afterOpened","_beforeClosed","_state","filter","take","_closeFallbackTimeout","_result","merge","_closeDialogVia","dialogResult","detachBackdrop","afterClosed","beforeClosed","strategy","left","right","top","bottom","getState","interactionType","MAT_DIALOG_DATA","MAT_DIALOG_DEFAULT_OPTIONS","MAT_DIALOG_SCROLL_STRATEGY","MatDialog","dialogConfigClass","_dialog","_dialogRefConstructor","_dialogContainerType","_dialogDataToken","cdkRef","cdkConfig","_closeDialogs","dialogs","i2","dialogElementUid","MatDialogClose","ngOnInit","getClosestDialog","ngOnChanges","changes","proxiedChange","_matDialogClose","_matDialogCloseResult","currentValue","_onButtonClick","screenX","screenY","ɵdir","$event","inputs","None","exportAs","MatDialogLayoutSection","_dialogRef","_onAdd","_onRemove","MatDialogTitle","arguments","ɵMatDialogTitle_BaseFactory","MatDialogContent","MatDialogActions","ɵMatDialogActions_BaseFactory","align","MatDialogModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/dialog.mjs","./node_modules/@angular/material/fesm2022/dialog.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayConfig, OverlayRef, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { BasePortalOutlet, CdkPortalOutlet, ComponentPortal, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { inject, ChangeDetectorRef, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, ViewChild, InjectionToken, Injector, TemplateRef, Injectable, SkipSelf, NgModule } from '@angular/core';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { Subject, defer, of } from 'rxjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { startWith } from 'rxjs/operators';\n\n/** Configuration for opening a modal dialog. */\nclass DialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Optional CSS class or classes applied to the overlay panel. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Optional CSS class or classes applied to the overlay backdrop. */\n        this.backdropClass = '';\n        /** Whether the dialog closes with the escape key or pointer events outside the panel element. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Dialog label applied via `aria-label` */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the previously-focused element upon closing.\n         * Has the following behavior based on the type that is passed in:\n         * - `boolean` - when true, will return focus to the element that was focused before the dialog\n         *    was opened, otherwise won't restore focus at all.\n         * - `string` - focus will be restored to the first element that matches the CSS selector.\n         * - `HTMLElement` - focus will be restored to the specific element.\n         */\n        this.restoreFocus = true;\n        /**\n         * Whether the dialog should close when the user navigates backwards or forwards through browser\n         * history. This does not apply to navigation via anchor element unless using URL-hash based\n         * routing (`HashLocationStrategy` in the Angular router).\n         */\n        this.closeOnNavigation = true;\n        /**\n         * Whether the dialog should close when the dialog service is destroyed. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead.\n         */\n        this.closeOnDestroy = true;\n        /**\n         * Whether the dialog should close when the underlying overlay is detached. This is useful if\n         * another service is wrapping the dialog and is managing the destruction instead. E.g. an\n         * external detachment can happen as a result of a scroll strategy triggering it or when the\n         * browser location changes.\n         */\n        this.closeOnOverlayDetachments = true;\n    }\n}\n\nfunction throwDialogContentAlreadyAttachedError() {\n    throw Error('Attempting to attach dialog content after content is already attached');\n}\n/**\n * Internal component that wraps user-provided dialog content.\n * @docs-private\n */\nclass CdkDialogContainer extends BasePortalOutlet {\n    constructor(_elementRef, _focusTrapFactory, _document, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {\n        super();\n        this._elementRef = _elementRef;\n        this._focusTrapFactory = _focusTrapFactory;\n        this._config = _config;\n        this._interactivityChecker = _interactivityChecker;\n        this._ngZone = _ngZone;\n        this._overlayRef = _overlayRef;\n        this._focusMonitor = _focusMonitor;\n        this._platform = inject(Platform);\n        /** The class that traps and manages focus within the dialog. */\n        this._focusTrap = null;\n        /** Element that was focused before the dialog was opened. Save this to restore upon close. */\n        this._elementFocusedBeforeDialogWasOpened = null;\n        /**\n         * Type of interaction that led to the dialog being closed. This is used to determine\n         * whether the focus style will be applied when returning focus to its original location\n         * after the dialog is closed.\n         */\n        this._closeInteractionType = null;\n        /**\n         * Queue of the IDs of the dialog's label element, based on their definition order. The first\n         * ID will be used as the `aria-labelledby` value. We use a queue here to handle the case\n         * where there are two or more titles in the DOM at a time and the first one is destroyed while\n         * the rest are present.\n         */\n        this._ariaLabelledByQueue = [];\n        this._changeDetectorRef = inject(ChangeDetectorRef);\n        /**\n         * Attaches a DOM portal to the dialog container.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        this.attachDomPortal = (portal) => {\n            if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n                throwDialogContentAlreadyAttachedError();\n            }\n            const result = this._portalOutlet.attachDomPortal(portal);\n            this._contentAttached();\n            return result;\n        };\n        this._document = _document;\n        if (this._config.ariaLabelledBy) {\n            this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);\n        }\n    }\n    _addAriaLabelledBy(id) {\n        this._ariaLabelledByQueue.push(id);\n        this._changeDetectorRef.markForCheck();\n    }\n    _removeAriaLabelledBy(id) {\n        const index = this._ariaLabelledByQueue.indexOf(id);\n        if (index > -1) {\n            this._ariaLabelledByQueue.splice(index, 1);\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    _contentAttached() {\n        this._initializeFocusTrap();\n        this._handleBackdropClicks();\n        this._captureInitialFocus();\n    }\n    /**\n     * Can be used by child classes to customize the initial focus\n     * capturing behavior (e.g. if it's tied to an animation).\n     */\n    _captureInitialFocus() {\n        this._trapFocus();\n    }\n    ngOnDestroy() {\n        this._restoreFocus();\n    }\n    /**\n     * Attach a ComponentPortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachComponentPortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachComponentPortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    /**\n     * Attach a TemplatePortal as content to this dialog container.\n     * @param portal Portal to be attached as the dialog content.\n     */\n    attachTemplatePortal(portal) {\n        if (this._portalOutlet.hasAttached() && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throwDialogContentAlreadyAttachedError();\n        }\n        const result = this._portalOutlet.attachTemplatePortal(portal);\n        this._contentAttached();\n        return result;\n    }\n    // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.\n    /** Captures focus if it isn't already inside the dialog. */\n    _recaptureFocus() {\n        if (!this._containsFocus()) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Focuses the provided element. If the element is not focusable, it will add a tabIndex\n     * attribute to forcefully focus it. The attribute is removed after focus is moved.\n     * @param element The element to focus.\n     */\n    _forceFocus(element, options) {\n        if (!this._interactivityChecker.isFocusable(element)) {\n            element.tabIndex = -1;\n            // The tabindex attribute should be removed to avoid navigating to that element again\n            this._ngZone.runOutsideAngular(() => {\n                const callback = () => {\n                    element.removeEventListener('blur', callback);\n                    element.removeEventListener('mousedown', callback);\n                    element.removeAttribute('tabindex');\n                };\n                element.addEventListener('blur', callback);\n                element.addEventListener('mousedown', callback);\n            });\n        }\n        element.focus(options);\n    }\n    /**\n     * Focuses the first element that matches the given selector within the focus trap.\n     * @param selector The CSS selector for the element to set focus to.\n     */\n    _focusByCssSelector(selector, options) {\n        let elementToFocus = this._elementRef.nativeElement.querySelector(selector);\n        if (elementToFocus) {\n            this._forceFocus(elementToFocus, options);\n        }\n    }\n    /**\n     * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus\n     * cannot be moved then focus will go to the dialog container.\n     */\n    _trapFocus() {\n        const element = this._elementRef.nativeElement;\n        // If were to attempt to focus immediately, then the content of the dialog would not yet be\n        // ready in instances where change detection has to run first. To deal with this, we simply\n        // wait for the microtask queue to be empty when setting focus when autoFocus isn't set to\n        // dialog. If the element inside the dialog can't be focused, then the container is focused\n        // so the user can't tab into other elements behind it.\n        switch (this._config.autoFocus) {\n            case false:\n            case 'dialog':\n                // Ensure that focus is on the dialog container. It's possible that a different\n                // component tried to move focus while the open animation was running. See:\n                // https://github.com/angular/components/issues/16215. Note that we only want to do this\n                // if the focus isn't inside the dialog already, because it's possible that the consumer\n                // turned off `autoFocus` in order to move focus themselves.\n                if (!this._containsFocus()) {\n                    element.focus();\n                }\n                break;\n            case true:\n            case 'first-tabbable':\n                this._focusTrap?.focusInitialElementWhenReady().then(focusedSuccessfully => {\n                    // If we weren't able to find a focusable element in the dialog, then focus the dialog\n                    // container instead.\n                    if (!focusedSuccessfully) {\n                        this._focusDialogContainer();\n                    }\n                });\n                break;\n            case 'first-heading':\n                this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n                break;\n            default:\n                this._focusByCssSelector(this._config.autoFocus);\n                break;\n        }\n    }\n    /** Restores focus to the element that was focused before the dialog opened. */\n    _restoreFocus() {\n        const focusConfig = this._config.restoreFocus;\n        let focusTargetElement = null;\n        if (typeof focusConfig === 'string') {\n            focusTargetElement = this._document.querySelector(focusConfig);\n        }\n        else if (typeof focusConfig === 'boolean') {\n            focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;\n        }\n        else if (focusConfig) {\n            focusTargetElement = focusConfig;\n        }\n        // We need the extra check, because IE can set the `activeElement` to null in some cases.\n        if (this._config.restoreFocus &&\n            focusTargetElement &&\n            typeof focusTargetElement.focus === 'function') {\n            const activeElement = _getFocusedElementPierceShadowDom();\n            const element = this._elementRef.nativeElement;\n            // Make sure that focus is still inside the dialog or is on the body (usually because a\n            // non-focusable element like the backdrop was clicked) before moving it. It's possible that\n            // the consumer moved it themselves before the animation was done, in which case we shouldn't\n            // do anything.\n            if (!activeElement ||\n                activeElement === this._document.body ||\n                activeElement === element ||\n                element.contains(activeElement)) {\n                if (this._focusMonitor) {\n                    this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);\n                    this._closeInteractionType = null;\n                }\n                else {\n                    focusTargetElement.focus();\n                }\n            }\n        }\n        if (this._focusTrap) {\n            this._focusTrap.destroy();\n        }\n    }\n    /** Focuses the dialog container. */\n    _focusDialogContainer() {\n        // Note that there is no focus method when rendering on the server.\n        if (this._elementRef.nativeElement.focus) {\n            this._elementRef.nativeElement.focus();\n        }\n    }\n    /** Returns whether focus is inside the dialog. */\n    _containsFocus() {\n        const element = this._elementRef.nativeElement;\n        const activeElement = _getFocusedElementPierceShadowDom();\n        return element === activeElement || element.contains(activeElement);\n    }\n    /** Sets up the focus trap. */\n    _initializeFocusTrap() {\n        if (this._platform.isBrowser) {\n            this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);\n            // Save the previously focused element. This element will be re-focused\n            // when the dialog closes.\n            if (this._document) {\n                this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();\n            }\n        }\n    }\n    /** Sets up the listener that handles clicks on the dialog backdrop. */\n    _handleBackdropClicks() {\n        // Clicking on the backdrop will move focus out of dialog.\n        // Recapture it if closing via the backdrop is disabled.\n        this._overlayRef.backdropClick().subscribe(() => {\n            if (this._config.disableClose) {\n                this._recaptureFocus();\n            }\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: DialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: CdkDialogContainer, isStandalone: true, selector: \"cdk-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.id\": \"_config.id || null\", \"attr.role\": \"_config.role\", \"attr.aria-modal\": \"_config.ariaModal\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\" }, classAttribute: \"cdk-dialog-container\" }, viewQueries: [{ propertyName: \"_portalOutlet\", first: true, predicate: CdkPortalOutlet, descendants: true, static: true }], usesInheritance: true, ngImport: i0, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: CdkDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'cdk-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'cdk-dialog-container',\n                        'tabindex': '-1',\n                        '[attr.id]': '_config.id || null',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                    }, template: \"<ng-template cdkPortalOutlet />\\n\", styles: [\".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DialogConfig]\n                }] }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: i1.FocusMonitor }], propDecorators: { _portalOutlet: [{\n                type: ViewChild,\n                args: [CdkPortalOutlet, { static: true }]\n            }] } });\n\n/**\n * Reference to a dialog opened via the Dialog service.\n */\nclass DialogRef {\n    constructor(overlayRef, config) {\n        this.overlayRef = overlayRef;\n        this.config = config;\n        /** Emits when the dialog has been closed. */\n        this.closed = new Subject();\n        this.disableClose = config.disableClose;\n        this.backdropClick = overlayRef.backdropClick();\n        this.keydownEvents = overlayRef.keydownEvents();\n        this.outsidePointerEvents = overlayRef.outsidePointerEvents();\n        this.id = config.id; // By the time the dialog is created we are guaranteed to have an ID.\n        this.keydownEvents.subscribe(event => {\n            if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {\n                event.preventDefault();\n                this.close(undefined, { focusOrigin: 'keyboard' });\n            }\n        });\n        this.backdropClick.subscribe(() => {\n            if (!this.disableClose) {\n                this.close(undefined, { focusOrigin: 'mouse' });\n            }\n        });\n        this._detachSubscription = overlayRef.detachments().subscribe(() => {\n            // Check specifically for `false`, because we want `undefined` to be treated like `true`.\n            if (config.closeOnOverlayDetachments !== false) {\n                this.close();\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param result Optional result to return to the dialog opener.\n     * @param options Additional options to customize the closing behavior.\n     */\n    close(result, options) {\n        if (this.containerInstance) {\n            const closedSubject = this.closed;\n            this.containerInstance._closeInteractionType = options?.focusOrigin || 'program';\n            // Drop the detach subscription first since it can be triggered by the\n            // `dispose` call and override the result of this closing sequence.\n            this._detachSubscription.unsubscribe();\n            this.overlayRef.dispose();\n            closedSubject.next(result);\n            closedSubject.complete();\n            this.componentInstance = this.containerInstance = null;\n        }\n    }\n    /** Updates the position of the dialog based on the current position strategy. */\n    updatePosition() {\n        this.overlayRef.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this.overlayRef.updateSize({ width, height });\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this.overlayRef.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this.overlayRef.removePanelClass(classes);\n        return this;\n    }\n}\n\n/** Injection token for the Dialog's ScrollStrategy. */\nconst DIALOG_SCROLL_STRATEGY = new InjectionToken('DialogScrollStrategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/** Injection token for the Dialog's Data. */\nconst DIALOG_DATA = new InjectionToken('DialogData');\n/** Injection token that can be used to provide default options for the dialog module. */\nconst DEFAULT_DIALOG_CONFIG = new InjectionToken('DefaultDialogConfig');\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n\n/** Unique id for the created dialog. */\nlet uniqueId = 0;\nclass Dialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {\n        this._overlay = _overlay;\n        this._injector = _injector;\n        this._defaultOptions = _defaultOptions;\n        this._parentDialog = _parentDialog;\n        this._overlayContainer = _overlayContainer;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this._ariaHiddenElements = new Map();\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._scrollStrategy = scrollStrategy;\n    }\n    open(componentOrTemplateRef, config) {\n        const defaults = (this._defaultOptions || new DialogConfig());\n        config = { ...defaults, ...config };\n        config.id = config.id || `cdk-dialog-${uniqueId++}`;\n        if (config.id &&\n            this.getDialogById(config.id) &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw Error(`Dialog with id \"${config.id}\" exists already. The dialog id must be unique.`);\n        }\n        const overlayConfig = this._getOverlayConfig(config);\n        const overlayRef = this._overlay.create(overlayConfig);\n        const dialogRef = new DialogRef(overlayRef, config);\n        const dialogContainer = this._attachContainer(overlayRef, dialogRef, config);\n        dialogRef.containerInstance = dialogContainer;\n        this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config);\n        // If this is the first dialog that we're opening, hide all the non-overlay content.\n        if (!this.openDialogs.length) {\n            this._hideNonDialogContentFromAssistiveTechnology();\n        }\n        this.openDialogs.push(dialogRef);\n        dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));\n        this.afterOpened.next(dialogRef);\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        reverseForEach(this.openDialogs, dialog => dialog.close());\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Make one pass over all the dialogs that need to be untracked, but should not be closed. We\n        // want to stop tracking the open dialog even if it hasn't been closed, because the tracking\n        // determines when `aria-hidden` is removed from elements outside the dialog.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => {\n            // Check for `false` specifically since we want `undefined` to be interpreted as `true`.\n            if (dialog.config.closeOnDestroy === false) {\n                this._removeOpenDialog(dialog, false);\n            }\n        });\n        // Make a second pass and close the remaining dialogs. We do this second pass in order to\n        // correctly dispatch the `afterAllClosed` event in case we have a mixed array of dialogs\n        // that should be closed and dialogs that should not.\n        reverseForEach(this._openDialogsAtThisLevel, dialog => dialog.close());\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n        this._openDialogsAtThisLevel = [];\n    }\n    /**\n     * Creates an overlay config from a dialog config.\n     * @param config The dialog configuration.\n     * @returns The overlay configuration.\n     */\n    _getOverlayConfig(config) {\n        const state = new OverlayConfig({\n            positionStrategy: config.positionStrategy ||\n                this._overlay.position().global().centerHorizontally().centerVertically(),\n            scrollStrategy: config.scrollStrategy || this._scrollStrategy(),\n            panelClass: config.panelClass,\n            hasBackdrop: config.hasBackdrop,\n            direction: config.direction,\n            minWidth: config.minWidth,\n            minHeight: config.minHeight,\n            maxWidth: config.maxWidth,\n            maxHeight: config.maxHeight,\n            width: config.width,\n            height: config.height,\n            disposeOnNavigation: config.closeOnNavigation,\n        });\n        if (config.backdropClass) {\n            state.backdropClass = config.backdropClass;\n        }\n        return state;\n    }\n    /**\n     * Attaches a dialog container to a dialog's already-created overlay.\n     * @param overlay Reference to the dialog's underlying overlay.\n     * @param config The dialog configuration.\n     * @returns A promise resolving to a ComponentRef for the attached container.\n     */\n    _attachContainer(overlay, dialogRef, config) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DialogConfig, useValue: config },\n            { provide: DialogRef, useValue: dialogRef },\n            { provide: OverlayRef, useValue: overlay },\n        ];\n        let containerType;\n        if (config.container) {\n            if (typeof config.container === 'function') {\n                containerType = config.container;\n            }\n            else {\n                containerType = config.container.type;\n                providers.push(...config.container.providers(config));\n            }\n        }\n        else {\n            containerType = CdkDialogContainer;\n        }\n        const containerPortal = new ComponentPortal(containerType, config.viewContainerRef, Injector.create({ parent: userInjector || this._injector, providers }), config.componentFactoryResolver);\n        const containerRef = overlay.attach(containerPortal);\n        return containerRef.instance;\n    }\n    /**\n     * Attaches the user-provided component to the already-created dialog container.\n     * @param componentOrTemplateRef The type of component being loaded into the dialog,\n     *     or a TemplateRef to instantiate as the content.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param config Configuration used to open the dialog.\n     */\n    _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config) {\n        if (componentOrTemplateRef instanceof TemplateRef) {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, undefined);\n            let context = { $implicit: config.data, dialogRef };\n            if (config.templateContext) {\n                context = {\n                    ...context,\n                    ...(typeof config.templateContext === 'function'\n                        ? config.templateContext()\n                        : config.templateContext),\n                };\n            }\n            dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context, injector));\n        }\n        else {\n            const injector = this._createInjector(config, dialogRef, dialogContainer, this._injector);\n            const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config.viewContainerRef, injector, config.componentFactoryResolver));\n            dialogRef.componentRef = contentRef;\n            dialogRef.componentInstance = contentRef.instance;\n        }\n    }\n    /**\n     * Creates a custom injector to be used inside the dialog. This allows a component loaded inside\n     * of a dialog to close itself and, optionally, to return a value.\n     * @param config Config object that is used to construct the dialog.\n     * @param dialogRef Reference to the dialog being opened.\n     * @param dialogContainer Component that is going to wrap the dialog content.\n     * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom\n     * dialog injector, if the user didn't provide a custom one.\n     * @returns The custom injector that can be used inside the dialog.\n     */\n    _createInjector(config, dialogRef, dialogContainer, fallbackInjector) {\n        const userInjector = config.injector || config.viewContainerRef?.injector;\n        const providers = [\n            { provide: DIALOG_DATA, useValue: config.data },\n            { provide: DialogRef, useValue: dialogRef },\n        ];\n        if (config.providers) {\n            if (typeof config.providers === 'function') {\n                providers.push(...config.providers(dialogRef, config, dialogContainer));\n            }\n            else {\n                providers.push(...config.providers);\n            }\n        }\n        if (config.direction &&\n            (!userInjector ||\n                !userInjector.get(Directionality, null, { optional: true }))) {\n            providers.push({\n                provide: Directionality,\n                useValue: { value: config.direction, change: of() },\n            });\n        }\n        return Injector.create({ parent: userInjector || fallbackInjector, providers });\n    }\n    /**\n     * Removes a dialog from the array of open dialogs.\n     * @param dialogRef Dialog to be removed.\n     * @param emitEvent Whether to emit an event if this is the last dialog.\n     */\n    _removeOpenDialog(dialogRef, emitEvent) {\n        const index = this.openDialogs.indexOf(dialogRef);\n        if (index > -1) {\n            this.openDialogs.splice(index, 1);\n            // If all the dialogs were closed, remove/restore the `aria-hidden`\n            // to a the siblings and emit to the `afterAllClosed` stream.\n            if (!this.openDialogs.length) {\n                this._ariaHiddenElements.forEach((previousValue, element) => {\n                    if (previousValue) {\n                        element.setAttribute('aria-hidden', previousValue);\n                    }\n                    else {\n                        element.removeAttribute('aria-hidden');\n                    }\n                });\n                this._ariaHiddenElements.clear();\n                if (emitEvent) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        }\n    }\n    /** Hides all of the content that isn't an overlay from assistive technology. */\n    _hideNonDialogContentFromAssistiveTechnology() {\n        const overlayContainer = this._overlayContainer.getContainerElement();\n        // Ensure that the overlay container is attached to the DOM.\n        if (overlayContainer.parentElement) {\n            const siblings = overlayContainer.parentElement.children;\n            for (let i = siblings.length - 1; i > -1; i--) {\n                const sibling = siblings[i];\n                if (sibling !== overlayContainer &&\n                    sibling.nodeName !== 'SCRIPT' &&\n                    sibling.nodeName !== 'STYLE' &&\n                    !sibling.hasAttribute('aria-live')) {\n                    this._ariaHiddenElements.set(sibling, sibling.getAttribute('aria-hidden'));\n                    sibling.setAttribute('aria-hidden', 'true');\n                }\n            }\n        }\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: DEFAULT_DIALOG_CONFIG, optional: true }, { token: Dialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: DIALOG_SCROLL_STRATEGY }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: Dialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: DialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DEFAULT_DIALOG_CONFIG]\n                }] }, { type: Dialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DIALOG_SCROLL_STRATEGY]\n                }] }] });\n/**\n * Executes a callback against all elements in an array while iterating in reverse.\n * Useful if the array is being modified as it is being iterated.\n */\nfunction reverseForEach(items, callback) {\n    let i = items.length;\n    while (i--) {\n        callback(items[i]);\n    }\n}\n\nclass DialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: DialogModule, imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer], exports: [\n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule,\n            CdkDialogContainer] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DialogModule, providers: [Dialog], imports: [OverlayModule, PortalModule, A11yModule, \n            // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n            // don't have to remember to import it or be faced with an unhelpful error.\n            PortalModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: DialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],\n                    exports: [\n                        // Re-export the PortalModule so that people extending the `CdkDialogContainer`\n                        // don't have to remember to import it or be faced with an unhelpful error.\n                        PortalModule,\n                        CdkDialogContainer,\n                    ],\n                    providers: [Dialog],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkDialogContainer, DEFAULT_DIALOG_CONFIG, DIALOG_DATA, DIALOG_SCROLL_STRATEGY, DIALOG_SCROLL_STRATEGY_PROVIDER, DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, Dialog, DialogConfig, DialogModule, DialogRef, throwDialogContentAlreadyAttachedError };\n","import * as i1$1 from '@angular/cdk/overlay';\nimport { Overlay, OverlayModule } from '@angular/cdk/overlay';\nimport * as i2 from '@angular/common';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ANIMATION_MODULE_TYPE, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, Inject, InjectionToken, inject, Injectable, SkipSelf, Directive, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { CdkDialogContainer, Dialog, DialogConfig, DialogModule } from '@angular/cdk/dialog';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { CdkPortalOutlet, PortalModule } from '@angular/cdk/portal';\nimport { Subject, merge, defer } from 'rxjs';\nimport { filter, take, startWith } from 'rxjs/operators';\nimport { ESCAPE, hasModifierKey } from '@angular/cdk/keycodes';\nimport { MatCommonModule } from '@angular/material/core';\nimport { trigger, state, style, transition, group, animate, query, animateChild } from '@angular/animations';\n\n/**\n * Configuration for opening a modal dialog with the MatDialog service.\n */\nclass MatDialogConfig {\n    constructor() {\n        /** The ARIA role of the dialog element. */\n        this.role = 'dialog';\n        /** Custom class for the overlay pane. */\n        this.panelClass = '';\n        /** Whether the dialog has a backdrop. */\n        this.hasBackdrop = true;\n        /** Custom class for the backdrop. */\n        this.backdropClass = '';\n        /** Whether the user can use escape or clicking on the backdrop to close the modal. */\n        this.disableClose = false;\n        /** Width of the dialog. */\n        this.width = '';\n        /** Height of the dialog. */\n        this.height = '';\n        /** Data being injected into the child component. */\n        this.data = null;\n        /** ID of the element that describes the dialog. */\n        this.ariaDescribedBy = null;\n        /** ID of the element that labels the dialog. */\n        this.ariaLabelledBy = null;\n        /** Aria label to assign to the dialog element. */\n        this.ariaLabel = null;\n        /** Whether this is a modal dialog. Used to set the `aria-modal` attribute. */\n        this.ariaModal = true;\n        /**\n         * Where the dialog should focus on open.\n         * @breaking-change 14.0.0 Remove boolean option from autoFocus. Use string or\n         * AutoFocusTarget instead.\n         */\n        this.autoFocus = 'first-tabbable';\n        /**\n         * Whether the dialog should restore focus to the\n         * previously-focused element, after it's closed.\n         */\n        this.restoreFocus = true;\n        /** Whether to wait for the opening animation to finish before trapping focus. */\n        this.delayFocusTrap = true;\n        /**\n         * Whether the dialog should close when the user goes backwards/forwards in history.\n         * Note that this usually doesn't include clicking on links (unless the user is using\n         * the `HashLocationStrategy`).\n         */\n        this.closeOnNavigation = true;\n        // TODO(jelbourn): add configuration for lifecycle hooks, ARIA labelling.\n    }\n}\n\n/** Class added when the dialog is open. */\nconst OPEN_CLASS = 'mdc-dialog--open';\n/** Class added while the dialog is opening. */\nconst OPENING_CLASS = 'mdc-dialog--opening';\n/** Class added while the dialog is closing. */\nconst CLOSING_CLASS = 'mdc-dialog--closing';\n/** Duration of the opening animation in milliseconds. */\nconst OPEN_ANIMATION_DURATION = 150;\n/** Duration of the closing animation in milliseconds. */\nconst CLOSE_ANIMATION_DURATION = 75;\nclass MatDialogContainer extends CdkDialogContainer {\n    constructor(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {\n        super(elementRef, focusTrapFactory, _document, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);\n        this._animationMode = _animationMode;\n        /** Emits when an animation state changes. */\n        this._animationStateChanged = new EventEmitter();\n        /** Whether animations are enabled. */\n        this._animationsEnabled = this._animationMode !== 'NoopAnimations';\n        /** Number of actions projected in the dialog. */\n        this._actionSectionCount = 0;\n        /** Host element of the dialog container component. */\n        this._hostElement = this._elementRef.nativeElement;\n        /** Duration of the dialog open animation. */\n        this._enterAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION\n            : 0;\n        /** Duration of the dialog close animation. */\n        this._exitAnimationDuration = this._animationsEnabled\n            ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION\n            : 0;\n        /** Current timer for dialog animations. */\n        this._animationTimer = null;\n        /**\n         * Completes the dialog open by clearing potential animation classes, trapping\n         * focus and emitting an opened event.\n         */\n        this._finishDialogOpen = () => {\n            this._clearAnimationClasses();\n            this._openAnimationDone(this._enterAnimationDuration);\n        };\n        /**\n         * Completes the dialog close by clearing potential animation classes, restoring\n         * focus and emitting a closed event.\n         */\n        this._finishDialogClose = () => {\n            this._clearAnimationClasses();\n            this._animationStateChanged.emit({ state: 'closed', totalTime: this._exitAnimationDuration });\n        };\n    }\n    _contentAttached() {\n        // Delegate to the original dialog-container initialization (i.e. saving the\n        // previous element, setting up the focus trap and moving focus to the container).\n        super._contentAttached();\n        // Note: Usually we would be able to use the MDC dialog foundation here to handle\n        // the dialog animation for us, but there are a few reasons why we just leverage\n        // their styles and not use the runtime foundation code:\n        //   1. Foundation does not allow us to disable animations.\n        //   2. Foundation contains unnecessary features we don't need and aren't\n        //      tree-shakeable. e.g. background scrim, keyboard event handlers for ESC button.\n        //   3. Foundation uses unnecessary timers for animations to work around limitations\n        //      in React's `setState` mechanism.\n        //      https://github.com/material-components/material-components-web/pull/3682.\n        this._startOpenAnimation();\n    }\n    /** Starts the dialog open animation if enabled. */\n    _startOpenAnimation() {\n        this._animationStateChanged.emit({ state: 'opening', totalTime: this._enterAnimationDuration });\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            // One would expect that the open class is added once the animation finished, but MDC\n            // uses the open class in combination with the opening class to start the animation.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));\n            this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);\n        }\n        else {\n            this._hostElement.classList.add(OPEN_CLASS);\n            // Note: We could immediately finish the dialog opening here with noop animations,\n            // but we defer until next tick so that consumers can subscribe to `afterOpened`.\n            // Executing this immediately would mean that `afterOpened` emits synchronously\n            // on `dialog.open` before the consumer had a change to subscribe to `afterOpened`.\n            Promise.resolve().then(() => this._finishDialogOpen());\n        }\n    }\n    /**\n     * Starts the exit animation of the dialog if enabled. This method is\n     * called by the dialog ref.\n     */\n    _startExitAnimation() {\n        this._animationStateChanged.emit({ state: 'closing', totalTime: this._exitAnimationDuration });\n        this._hostElement.classList.remove(OPEN_CLASS);\n        if (this._animationsEnabled) {\n            this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);\n            // We need to give the `setProperty` call from above some time to be applied.\n            this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));\n            this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);\n        }\n        else {\n            // This subscription to the `OverlayRef#backdropClick` observable in the `DialogRef` is\n            // set up before any user can subscribe to the backdrop click. The subscription triggers\n            // the dialog close and this method synchronously. If we'd synchronously emit the `CLOSED`\n            // animation state event if animations are disabled, the overlay would be disposed\n            // immediately and all other subscriptions to `DialogRef#backdropClick` would be silently\n            // skipped. We work around this by waiting with the dialog close until the next tick when\n            // all subscriptions have been fired as expected. This is not an ideal solution, but\n            // there doesn't seem to be any other good way. Alternatives that have been considered:\n            //   1. Deferring `DialogRef.close`. This could be a breaking change due to a new microtask.\n            //      Also this issue is specific to the MDC implementation where the dialog could\n            //      technically be closed synchronously. In the non-MDC one, Angular animations are used\n            //      and closing always takes at least a tick.\n            //   2. Ensuring that user subscriptions to `backdropClick`, `keydownEvents` in the dialog\n            //      ref are first. This would solve the issue, but has the risk of memory leaks and also\n            //      doesn't solve the case where consumers call `DialogRef.close` in their subscriptions.\n            // Based on the fact that this is specific to the MDC-based implementation of the dialog\n            // animations, the defer is applied here.\n            Promise.resolve().then(() => this._finishDialogClose());\n        }\n    }\n    /**\n     * Updates the number action sections.\n     * @param delta Increase/decrease in the number of sections.\n     */\n    _updateActionSectionCount(delta) {\n        this._actionSectionCount += delta;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Clears all dialog animation classes. */\n    _clearAnimationClasses() {\n        this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);\n    }\n    _waitForAnimationToComplete(duration, callback) {\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n        // Note that we want this timer to run inside the NgZone, because we want\n        // the related events like `afterClosed` to be inside the zone as well.\n        this._animationTimer = setTimeout(callback, duration);\n    }\n    /** Runs a callback in `requestAnimationFrame`, if available. */\n    _requestAnimationFrame(callback) {\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame === 'function') {\n                requestAnimationFrame(callback);\n            }\n            else {\n                callback();\n            }\n        });\n    }\n    _captureInitialFocus() {\n        if (!this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n    }\n    /**\n     * Callback for when the open dialog animation has finished. Intended to\n     * be called by sub-classes that use different animation implementations.\n     */\n    _openAnimationDone(totalTime) {\n        if (this._config.delayFocusTrap) {\n            this._trapFocus();\n        }\n        this._animationStateChanged.next({ state: 'opened', totalTime });\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n        if (this._animationTimer !== null) {\n            clearTimeout(this._animationTimer);\n        }\n    }\n    attachComponentPortal(portal) {\n        // When a component is passed into the dialog, the host element interrupts\n        // the `display:flex` from affecting the dialog title, content, and\n        // actions. To fix this, we make the component host `display: contents` by\n        // marking its host with the `mat-mdc-dialog-component-host` class.\n        //\n        // Note that this problem does not exist when a template ref is used since\n        // the title, contents, and actions are then nested directly under the\n        // dialog surface.\n        const ref = super.attachComponentPortal(portal);\n        ref.location.nativeElement.classList.add('mat-mdc-dialog-component-host');\n        return ref;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogContainer, deps: [{ token: i0.ElementRef }, { token: i1.FocusTrapFactory }, { token: DOCUMENT, optional: true }, { token: MatDialogConfig }, { token: i1.InteractivityChecker }, { token: i0.NgZone }, { token: i1$1.OverlayRef }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: i1.FocusMonitor }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogContainer, isStandalone: true, selector: \"mat-dialog-container\", host: { attributes: { \"tabindex\": \"-1\" }, properties: { \"attr.aria-modal\": \"_config.ariaModal\", \"id\": \"_config.id\", \"attr.role\": \"_config.role\", \"attr.aria-labelledby\": \"_config.ariaLabel ? null : _ariaLabelledByQueue[0]\", \"attr.aria-label\": \"_config.ariaLabel\", \"attr.aria-describedby\": \"_config.ariaDescribedBy || null\", \"class._mat-animation-noopable\": \"!_animationsEnabled\", \"class.mat-mdc-dialog-container-with-actions\": \"_actionSectionCount > 0\" }, classAttribute: \"mat-mdc-dialog-container mdc-dialog\" }, usesInheritance: true, ngImport: i0, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0;transform:scale(0.8)}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--closing .mdc-dialog__surface{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{opacity:1}.mdc-dialog--open .mdc-dialog__surface{transform:none}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{width:100%;height:100%}.mat-mdc-dialog-component-host{display:contents}.mat-mdc-dialog-container{--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition:opacity linear var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container .mdc-dialog__surface{transition:transform var(--mat-dialog-transition-duration, 0ms) 0ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container,.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__surface{transition:none}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-title{padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"], dependencies: [{ kind: \"directive\", type: CdkPortalOutlet, selector: \"[cdkPortalOutlet]\", inputs: [\"cdkPortalOutlet\"], outputs: [\"attached\"], exportAs: [\"cdkPortalOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogContainer, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-dialog-container', encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, standalone: true, imports: [CdkPortalOutlet], host: {\n                        'class': 'mat-mdc-dialog-container mdc-dialog',\n                        'tabindex': '-1',\n                        '[attr.aria-modal]': '_config.ariaModal',\n                        '[id]': '_config.id',\n                        '[attr.role]': '_config.role',\n                        '[attr.aria-labelledby]': '_config.ariaLabel ? null : _ariaLabelledByQueue[0]',\n                        '[attr.aria-label]': '_config.ariaLabel',\n                        '[attr.aria-describedby]': '_config.ariaDescribedBy || null',\n                        '[class._mat-animation-noopable]': '!_animationsEnabled',\n                        '[class.mat-mdc-dialog-container-with-actions]': '_actionSectionCount > 0',\n                    }, template: \"<div class=\\\"mdc-dialog__container\\\">\\n  <div class=\\\"mat-mdc-dialog-surface mdc-dialog__surface\\\">\\n    <ng-template cdkPortalOutlet />\\n  </div>\\n</div>\\n\", styles: [\".mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0;transform:scale(0.8)}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:\\\"\\\";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:\\\"\\\";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--closing .mdc-dialog__surface{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{opacity:1}.mdc-dialog--open .mdc-dialog__surface{transform:none}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{width:100%;height:100%}.mat-mdc-dialog-component-host{display:contents}.mat-mdc-dialog-container{--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition:opacity linear var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container .mdc-dialog__surface{transition:transform var(--mat-dialog-transition-duration, 0ms) 0ms cubic-bezier(0, 0, 0.2, 1)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container,.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__surface{transition:none}.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-max-width, 80vw);min-width:var(--mat-dialog-container-min-width, 0)}@media(max-width: 599px){.cdk-overlay-pane.mat-mdc-dialog-panel{max-width:var(--mat-dialog-container-small-max-width, 80vw)}}.mat-mdc-dialog-title{padding:var(--mat-dialog-headline-padding, 0 24px 9px)}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-container .mat-mdc-dialog-content{padding:var(--mat-dialog-content-padding, 20px 24px)}.mat-mdc-dialog-container-with-actions .mat-mdc-dialog-content{padding:var(--mat-dialog-with-actions-content-padding, 20px 24px)}.mat-mdc-dialog-container .mat-mdc-dialog-title+.mat-mdc-dialog-content{padding-top:0}.mat-mdc-dialog-actions{padding:var(--mat-dialog-actions-padding, 8px);justify-content:var(--mat-dialog-actions-alignment, start)}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-start,.mat-mdc-dialog-actions[align=start]{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\"] }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.FocusTrapFactory }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: MatDialogConfig }, { type: i1.InteractivityChecker }, { type: i0.NgZone }, { type: i1$1.OverlayRef }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }, { type: i1.FocusMonitor }] });\nconst TRANSITION_DURATION_PROPERTY = '--mat-dialog-transition-duration';\n// TODO(mmalerba): Remove this function after animation durations are required\n//  to be numbers.\n/**\n * Converts a CSS time string to a number in ms. If the given time is already a\n * number, it is assumed to be in ms.\n */\nfunction parseCssTime(time) {\n    if (time == null) {\n        return null;\n    }\n    if (typeof time === 'number') {\n        return time;\n    }\n    if (time.endsWith('ms')) {\n        return coerceNumberProperty(time.substring(0, time.length - 2));\n    }\n    if (time.endsWith('s')) {\n        return coerceNumberProperty(time.substring(0, time.length - 1)) * 1000;\n    }\n    if (time === '0') {\n        return 0;\n    }\n    return null; // anything else is invalid.\n}\n\nvar MatDialogState;\n(function (MatDialogState) {\n    MatDialogState[MatDialogState[\"OPEN\"] = 0] = \"OPEN\";\n    MatDialogState[MatDialogState[\"CLOSING\"] = 1] = \"CLOSING\";\n    MatDialogState[MatDialogState[\"CLOSED\"] = 2] = \"CLOSED\";\n})(MatDialogState || (MatDialogState = {}));\n/**\n * Reference to a dialog opened via the MatDialog service.\n */\nclass MatDialogRef {\n    constructor(_ref, config, _containerInstance) {\n        this._ref = _ref;\n        this._containerInstance = _containerInstance;\n        /** Subject for notifying the user that the dialog has finished opening. */\n        this._afterOpened = new Subject();\n        /** Subject for notifying the user that the dialog has started closing. */\n        this._beforeClosed = new Subject();\n        /** Current state of the dialog. */\n        this._state = MatDialogState.OPEN;\n        this.disableClose = config.disableClose;\n        this.id = _ref.id;\n        // Used to target panels specifically tied to dialogs.\n        _ref.addPanelClass('mat-mdc-dialog-panel');\n        // Emit when opening animation completes\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'opened'), take(1))\n            .subscribe(() => {\n            this._afterOpened.next();\n            this._afterOpened.complete();\n        });\n        // Dispose overlay when closing animation is complete\n        _containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closed'), take(1))\n            .subscribe(() => {\n            clearTimeout(this._closeFallbackTimeout);\n            this._finishDialogClose();\n        });\n        _ref.overlayRef.detachments().subscribe(() => {\n            this._beforeClosed.next(this._result);\n            this._beforeClosed.complete();\n            this._finishDialogClose();\n        });\n        merge(this.backdropClick(), this.keydownEvents().pipe(filter(event => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe(event => {\n            if (!this.disableClose) {\n                event.preventDefault();\n                _closeDialogVia(this, event.type === 'keydown' ? 'keyboard' : 'mouse');\n            }\n        });\n    }\n    /**\n     * Close the dialog.\n     * @param dialogResult Optional result to return to the dialog opener.\n     */\n    close(dialogResult) {\n        this._result = dialogResult;\n        // Transition the backdrop in parallel to the dialog.\n        this._containerInstance._animationStateChanged\n            .pipe(filter(event => event.state === 'closing'), take(1))\n            .subscribe(event => {\n            this._beforeClosed.next(dialogResult);\n            this._beforeClosed.complete();\n            this._ref.overlayRef.detachBackdrop();\n            // The logic that disposes of the overlay depends on the exit animation completing, however\n            // it isn't guaranteed if the parent view is destroyed while it's running. Add a fallback\n            // timeout which will clean everything up if the animation hasn't fired within the specified\n            // amount of time plus 100ms. We don't need to run this outside the NgZone, because for the\n            // vast majority of cases the timeout will have been cleared before it has the chance to fire.\n            this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);\n        });\n        this._state = MatDialogState.CLOSING;\n        this._containerInstance._startExitAnimation();\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished opening.\n     */\n    afterOpened() {\n        return this._afterOpened;\n    }\n    /**\n     * Gets an observable that is notified when the dialog is finished closing.\n     */\n    afterClosed() {\n        return this._ref.closed;\n    }\n    /**\n     * Gets an observable that is notified when the dialog has started closing.\n     */\n    beforeClosed() {\n        return this._beforeClosed;\n    }\n    /**\n     * Gets an observable that emits when the overlay's backdrop has been clicked.\n     */\n    backdropClick() {\n        return this._ref.backdropClick;\n    }\n    /**\n     * Gets an observable that emits when keydown events are targeted on the overlay.\n     */\n    keydownEvents() {\n        return this._ref.keydownEvents;\n    }\n    /**\n     * Updates the dialog's position.\n     * @param position New dialog position.\n     */\n    updatePosition(position) {\n        let strategy = this._ref.config.positionStrategy;\n        if (position && (position.left || position.right)) {\n            position.left ? strategy.left(position.left) : strategy.right(position.right);\n        }\n        else {\n            strategy.centerHorizontally();\n        }\n        if (position && (position.top || position.bottom)) {\n            position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);\n        }\n        else {\n            strategy.centerVertically();\n        }\n        this._ref.updatePosition();\n        return this;\n    }\n    /**\n     * Updates the dialog's width and height.\n     * @param width New width of the dialog.\n     * @param height New height of the dialog.\n     */\n    updateSize(width = '', height = '') {\n        this._ref.updateSize(width, height);\n        return this;\n    }\n    /** Add a CSS class or an array of classes to the overlay pane. */\n    addPanelClass(classes) {\n        this._ref.addPanelClass(classes);\n        return this;\n    }\n    /** Remove a CSS class or an array of classes from the overlay pane. */\n    removePanelClass(classes) {\n        this._ref.removePanelClass(classes);\n        return this;\n    }\n    /** Gets the current state of the dialog's lifecycle. */\n    getState() {\n        return this._state;\n    }\n    /**\n     * Finishes the dialog close by updating the state of the dialog\n     * and disposing the overlay.\n     */\n    _finishDialogClose() {\n        this._state = MatDialogState.CLOSED;\n        this._ref.close(this._result, { focusOrigin: this._closeInteractionType });\n        this.componentInstance = null;\n    }\n}\n/**\n * Closes the dialog with the specified interaction type. This is currently not part of\n * `MatDialogRef` as that would conflict with custom dialog ref mocks provided in tests.\n * More details. See: https://github.com/angular/components/pull/9257#issuecomment-651342226.\n */\n// TODO: Move this back into `MatDialogRef` when we provide an official mock dialog ref.\nfunction _closeDialogVia(ref, interactionType, result) {\n    ref._closeInteractionType = interactionType;\n    return ref.close(result);\n}\n\n/** Injection token that can be used to access the data that was passed in to a dialog. */\nconst MAT_DIALOG_DATA = new InjectionToken('MatMdcDialogData');\n/** Injection token that can be used to specify default dialog options. */\nconst MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken('mat-mdc-dialog-default-options');\n/** Injection token that determines the scroll handling while the dialog is open. */\nconst MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken('mat-mdc-dialog-scroll-strategy', {\n    providedIn: 'root',\n    factory: () => {\n        const overlay = inject(Overlay);\n        return () => overlay.scrollStrategies.block();\n    },\n});\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nfunction MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {\n    return () => overlay.scrollStrategies.block();\n}\n/**\n * @docs-private\n * @deprecated No longer used. To be removed.\n * @breaking-change 19.0.0\n */\nconst MAT_DIALOG_SCROLL_STRATEGY_PROVIDER = {\n    provide: MAT_DIALOG_SCROLL_STRATEGY,\n    deps: [Overlay],\n    useFactory: MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY,\n};\n// Counter for unique dialog ids.\nlet uniqueId = 0;\n/**\n * Service to open Material Design modal dialogs.\n */\nclass MatDialog {\n    /** Keeps track of the currently-open dialogs. */\n    get openDialogs() {\n        return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;\n    }\n    /** Stream that emits when a dialog has been opened. */\n    get afterOpened() {\n        return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;\n    }\n    _getAfterAllClosed() {\n        const parent = this._parentDialog;\n        return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;\n    }\n    constructor(_overlay, injector, \n    /**\n     * @deprecated `_location` parameter to be removed.\n     * @breaking-change 10.0.0\n     */\n    location, _defaultOptions, _scrollStrategy, _parentDialog, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 15.0.0\n     */\n    _overlayContainer, \n    /**\n     * @deprecated No longer used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    _animationMode) {\n        this._overlay = _overlay;\n        this._defaultOptions = _defaultOptions;\n        this._scrollStrategy = _scrollStrategy;\n        this._parentDialog = _parentDialog;\n        this._openDialogsAtThisLevel = [];\n        this._afterAllClosedAtThisLevel = new Subject();\n        this._afterOpenedAtThisLevel = new Subject();\n        this.dialogConfigClass = MatDialogConfig;\n        /**\n         * Stream that emits when all open dialog have finished closing.\n         * Will emit on subscribe if there are no open dialogs to begin with.\n         */\n        this.afterAllClosed = defer(() => this.openDialogs.length\n            ? this._getAfterAllClosed()\n            : this._getAfterAllClosed().pipe(startWith(undefined)));\n        this._dialog = injector.get(Dialog);\n        this._dialogRefConstructor = MatDialogRef;\n        this._dialogContainerType = MatDialogContainer;\n        this._dialogDataToken = MAT_DIALOG_DATA;\n    }\n    open(componentOrTemplateRef, config) {\n        let dialogRef;\n        config = { ...(this._defaultOptions || new MatDialogConfig()), ...config };\n        config.id = config.id || `mat-mdc-dialog-${uniqueId++}`;\n        config.scrollStrategy = config.scrollStrategy || this._scrollStrategy();\n        const cdkRef = this._dialog.open(componentOrTemplateRef, {\n            ...config,\n            positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),\n            // Disable closing since we need to sync it up to the animation ourselves.\n            disableClose: true,\n            // Disable closing on destroy, because this service cleans up its open dialogs as well.\n            // We want to do the cleanup here, rather than the CDK service, because the CDK destroys\n            // the dialogs immediately whereas we want it to wait for the animations to finish.\n            closeOnDestroy: false,\n            // Disable closing on detachments so that we can sync up the animation.\n            // The Material dialog ref handles this manually.\n            closeOnOverlayDetachments: false,\n            container: {\n                type: this._dialogContainerType,\n                providers: () => [\n                    // Provide our config as the CDK config as well since it has the same interface as the\n                    // CDK one, but it contains the actual values passed in by the user for things like\n                    // `disableClose` which we disable for the CDK dialog since we handle it ourselves.\n                    { provide: this.dialogConfigClass, useValue: config },\n                    { provide: DialogConfig, useValue: config },\n                ],\n            },\n            templateContext: () => ({ dialogRef }),\n            providers: (ref, cdkConfig, dialogContainer) => {\n                dialogRef = new this._dialogRefConstructor(ref, config, dialogContainer);\n                dialogRef.updatePosition(config?.position);\n                return [\n                    { provide: this._dialogContainerType, useValue: dialogContainer },\n                    { provide: this._dialogDataToken, useValue: cdkConfig.data },\n                    { provide: this._dialogRefConstructor, useValue: dialogRef },\n                ];\n            },\n        });\n        // This can't be assigned in the `providers` callback, because\n        // the instance hasn't been assigned to the CDK ref yet.\n        dialogRef.componentRef = cdkRef.componentRef;\n        dialogRef.componentInstance = cdkRef.componentInstance;\n        this.openDialogs.push(dialogRef);\n        this.afterOpened.next(dialogRef);\n        dialogRef.afterClosed().subscribe(() => {\n            const index = this.openDialogs.indexOf(dialogRef);\n            if (index > -1) {\n                this.openDialogs.splice(index, 1);\n                if (!this.openDialogs.length) {\n                    this._getAfterAllClosed().next();\n                }\n            }\n        });\n        return dialogRef;\n    }\n    /**\n     * Closes all of the currently-open dialogs.\n     */\n    closeAll() {\n        this._closeDialogs(this.openDialogs);\n    }\n    /**\n     * Finds an open dialog by its id.\n     * @param id ID to use when looking up the dialog.\n     */\n    getDialogById(id) {\n        return this.openDialogs.find(dialog => dialog.id === id);\n    }\n    ngOnDestroy() {\n        // Only close the dialogs at this level on destroy\n        // since the parent service may still be active.\n        this._closeDialogs(this._openDialogsAtThisLevel);\n        this._afterAllClosedAtThisLevel.complete();\n        this._afterOpenedAtThisLevel.complete();\n    }\n    _closeDialogs(dialogs) {\n        let i = dialogs.length;\n        while (i--) {\n            dialogs[i].close();\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialog, deps: [{ token: i1$1.Overlay }, { token: i0.Injector }, { token: i2.Location, optional: true }, { token: MAT_DIALOG_DEFAULT_OPTIONS, optional: true }, { token: MAT_DIALOG_SCROLL_STRATEGY }, { token: MatDialog, optional: true, skipSelf: true }, { token: i1$1.OverlayContainer }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialog, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialog, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: i1$1.Overlay }, { type: i0.Injector }, { type: i2.Location, decorators: [{\n                    type: Optional\n                }] }, { type: MatDialogConfig, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MAT_DIALOG_DEFAULT_OPTIONS]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [MAT_DIALOG_SCROLL_STRATEGY]\n                }] }, { type: MatDialog, decorators: [{\n                    type: Optional\n                }, {\n                    type: SkipSelf\n                }] }, { type: i1$1.OverlayContainer }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }] });\n\n/** Counter used to generate unique IDs for dialog elements. */\nlet dialogElementUid = 0;\n/**\n * Button that will close the current dialog.\n */\nclass MatDialogClose {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    dialogRef, _elementRef, _dialog) {\n        this.dialogRef = dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n        /** Default to \"button\" to prevents accidental form submits. */\n        this.type = 'button';\n    }\n    ngOnInit() {\n        if (!this.dialogRef) {\n            // When this directive is included in a dialog via TemplateRef (rather than being\n            // in a Component), the DialogRef isn't available via injection because embedded\n            // views cannot be given a custom injector. Instead, we look up the DialogRef by\n            // ID. This must occur in `onInit`, as the ID binding for the dialog container won't\n            // be resolved at constructor time.\n            this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n    }\n    ngOnChanges(changes) {\n        const proxiedChange = changes['_matDialogClose'] || changes['_matDialogCloseResult'];\n        if (proxiedChange) {\n            this.dialogResult = proxiedChange.currentValue;\n        }\n    }\n    _onButtonClick(event) {\n        // Determinate the focus origin using the click event, because using the FocusMonitor will\n        // result in incorrect origins. Most of the time, close buttons will be auto focused in the\n        // dialog, and therefore clicking the button won't result in a focus change. This means that\n        // the FocusMonitor won't detect any origin change, and will always output `program`.\n        _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? 'keyboard' : 'mouse', this.dialogResult);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogClose, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogClose, isStandalone: true, selector: \"[mat-dialog-close], [matDialogClose]\", inputs: { ariaLabel: [\"aria-label\", \"ariaLabel\"], type: \"type\", dialogResult: [\"mat-dialog-close\", \"dialogResult\"], _matDialogClose: [\"matDialogClose\", \"_matDialogClose\"] }, host: { listeners: { \"click\": \"_onButtonClick($event)\" }, properties: { \"attr.aria-label\": \"ariaLabel || null\", \"attr.type\": \"type\" } }, exportAs: [\"matDialogClose\"], usesOnChanges: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogClose, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-close], [matDialogClose]',\n                    exportAs: 'matDialogClose',\n                    standalone: true,\n                    host: {\n                        '(click)': '_onButtonClick($event)',\n                        '[attr.aria-label]': 'ariaLabel || null',\n                        '[attr.type]': 'type',\n                    },\n                }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }], propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], type: [{\n                type: Input\n            }], dialogResult: [{\n                type: Input,\n                args: ['mat-dialog-close']\n            }], _matDialogClose: [{\n                type: Input,\n                args: ['matDialogClose']\n            }] } });\nclass MatDialogLayoutSection {\n    constructor(\n    // The dialog title directive is always used in combination with a `MatDialogRef`.\n    // tslint:disable-next-line: lightweight-tokens\n    _dialogRef, _elementRef, _dialog) {\n        this._dialogRef = _dialogRef;\n        this._elementRef = _elementRef;\n        this._dialog = _dialog;\n    }\n    ngOnInit() {\n        if (!this._dialogRef) {\n            this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);\n        }\n        if (this._dialogRef) {\n            Promise.resolve().then(() => {\n                this._onAdd();\n            });\n        }\n    }\n    ngOnDestroy() {\n        // Note: we null check because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        const instance = this._dialogRef?._containerInstance;\n        if (instance) {\n            Promise.resolve().then(() => {\n                this._onRemove();\n            });\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogLayoutSection, deps: [{ token: MatDialogRef, optional: true }, { token: i0.ElementRef }, { token: MatDialog }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogLayoutSection, isStandalone: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogLayoutSection, decorators: [{\n            type: Directive,\n            args: [{ standalone: true }]\n        }], ctorParameters: () => [{ type: MatDialogRef, decorators: [{\n                    type: Optional\n                }] }, { type: i0.ElementRef }, { type: MatDialog }] });\n/**\n * Title of a dialog element. Stays fixed to the top of the dialog when scrolling.\n */\nclass MatDialogTitle extends MatDialogLayoutSection {\n    constructor() {\n        super(...arguments);\n        this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;\n    }\n    _onAdd() {\n        // Note: we null check the queue, because there are some internal\n        // tests that are mocking out `MatDialogRef` incorrectly.\n        this._dialogRef._containerInstance?._addAriaLabelledBy?.(this.id);\n    }\n    _onRemove() {\n        this._dialogRef?._containerInstance?._removeAriaLabelledBy?.(this.id);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogTitle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogTitle, isStandalone: true, selector: \"[mat-dialog-title], [matDialogTitle]\", inputs: { id: \"id\" }, host: { properties: { \"id\": \"id\" }, classAttribute: \"mat-mdc-dialog-title mdc-dialog__title\" }, exportAs: [\"matDialogTitle\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogTitle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[mat-dialog-title], [matDialogTitle]',\n                    exportAs: 'matDialogTitle',\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-title mdc-dialog__title',\n                        '[id]': 'id',\n                    },\n                }]\n        }], propDecorators: { id: [{\n                type: Input\n            }] } });\n/**\n * Scrollable content container of a dialog.\n */\nclass MatDialogContent {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogContent, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogContent, isStandalone: true, selector: \"[mat-dialog-content], mat-dialog-content, [matDialogContent]\", host: { classAttribute: \"mat-mdc-dialog-content mdc-dialog__content\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogContent, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,\n                    host: { 'class': 'mat-mdc-dialog-content mdc-dialog__content' },\n                    standalone: true,\n                }]\n        }] });\n/**\n * Container for the bottom action buttons in a dialog.\n * Stays fixed to the bottom when scrolling.\n */\nclass MatDialogActions extends MatDialogLayoutSection {\n    _onAdd() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(1);\n    }\n    _onRemove() {\n        this._dialogRef._containerInstance?._updateActionSectionCount?.(-1);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogActions, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatDialogActions, isStandalone: true, selector: \"[mat-dialog-actions], mat-dialog-actions, [matDialogActions]\", inputs: { align: \"align\" }, host: { properties: { \"class.mat-mdc-dialog-actions-align-start\": \"align === \\\"start\\\"\", \"class.mat-mdc-dialog-actions-align-center\": \"align === \\\"center\\\"\", \"class.mat-mdc-dialog-actions-align-end\": \"align === \\\"end\\\"\" }, classAttribute: \"mat-mdc-dialog-actions mdc-dialog__actions\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogActions, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,\n                    standalone: true,\n                    host: {\n                        'class': 'mat-mdc-dialog-actions mdc-dialog__actions',\n                        '[class.mat-mdc-dialog-actions-align-start]': 'align === \"start\"',\n                        '[class.mat-mdc-dialog-actions-align-center]': 'align === \"center\"',\n                        '[class.mat-mdc-dialog-actions-align-end]': 'align === \"end\"',\n                    },\n                }]\n        }], propDecorators: { align: [{\n                type: Input\n            }] } });\n/**\n * Finds the closest MatDialogRef to an element by looking at the DOM.\n * @param element Element relative to which to look for a dialog.\n * @param openDialogs References to the currently-open dialogs.\n */\nfunction getClosestDialog(element, openDialogs) {\n    let parent = element.nativeElement.parentElement;\n    while (parent && !parent.classList.contains('mat-mdc-dialog-container')) {\n        parent = parent.parentElement;\n    }\n    return parent ? openDialogs.find(dialog => dialog.id === parent.id) : null;\n}\n\nconst DIRECTIVES = [\n    MatDialogContainer,\n    MatDialogClose,\n    MatDialogTitle,\n    MatDialogActions,\n    MatDialogContent,\n];\nclass MatDialogModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogModule, imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent], exports: [MatCommonModule, MatDialogContainer,\n            MatDialogClose,\n            MatDialogTitle,\n            MatDialogActions,\n            MatDialogContent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogModule, providers: [MatDialog], imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatDialogModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],\n                    exports: [MatCommonModule, ...DIRECTIVES],\n                    providers: [MatDialog],\n                }]\n        }] });\n\n/**\n * Default parameters for the animation for backwards compatibility.\n * @docs-private\n */\nconst _defaultParams = {\n    params: { enterAnimationDuration: '150ms', exitAnimationDuration: '75ms' },\n};\n/**\n * Animations used by MatDialog.\n * @docs-private\n */\nconst matDialogAnimations = {\n    /** Animation that is applied on the dialog container by default. */\n    dialogContainer: trigger('dialogContainer', [\n        // Note: The `enter` animation transitions to `transform: none`, because for some reason\n        // specifying the transform explicitly, causes IE both to blur the dialog content and\n        // decimate the animation performance. Leaving it as `none` solves both issues.\n        state('void, exit', style({ opacity: 0, transform: 'scale(0.7)' })),\n        state('enter', style({ transform: 'none' })),\n        transition('* => enter', group([\n            animate('{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)', style({ transform: 'none', opacity: 1 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n        transition('* => void, * => exit', group([\n            animate('{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)', style({ opacity: 0 })),\n            query('@*', animateChild(), { optional: true }),\n        ]), _defaultParams),\n    ]),\n};\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_DIALOG_DATA, MAT_DIALOG_DEFAULT_OPTIONS, MAT_DIALOG_SCROLL_STRATEGY, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER, MAT_DIALOG_SCROLL_STRATEGY_PROVIDER_FACTORY, MatDialog, MatDialogActions, MatDialogClose, MatDialogConfig, MatDialogContainer, MatDialogContent, MatDialogModule, MatDialogRef, MatDialogState, MatDialogTitle, _closeDialogVia, _defaultParams, matDialogAnimations };\n"],"x_google_ignoreList":[0,1]}