{"version":3,"file":"default-node_modules_angular_material_fesm2022_badge_mjs.js","mappings":"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","sources":["./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"names":["i0","Component","ViewEncapsulation","ChangeDetectionStrategy","inject","ApplicationRef","createComponent","EnvironmentInjector","ANIMATION_MODULE_TYPE","booleanAttribute","Directive","Optional","Inject","Input","NgModule","MatCommonModule","i1","InteractivityChecker","A11yModule","DOCUMENT","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","_MatBadgeStyleLoader_Factory","__ngFactoryType__","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","template","_MatBadgeStyleLoader_Template","rf","ctx","styles","encapsulation","changeDetection","ngDevMode","ɵsetClassMetadata","args","standalone","None","OnPush","MatBadge","color","_color","value","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","constructor","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","_document","appRef","has","add","componentRef","environmentInjector","onDestroy","delete","destroy","nativeElement","nodeType","ELEMENT_NODE","Error","matIconTagName","tagName","toLowerCase","getAttribute","console","warn","outerHTML","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","MatBadge_Factory","ɵɵdirectiveInject","NgZone","ElementRef","AriaDescriber","Renderer2","ɵdir","ɵɵdefineDirective","hostAttrs","hostVars","hostBindings","MatBadge_HostBindings","ɵɵclassProp","hidden","disabled","inputs","features","ɵɵInputTransformsFeature","selector","host","decorators","alias","transform","MatBadgeModule","MatBadgeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","imports","exports"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}