{"version":3,"mappings":"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","names":["AppDialogConfigService","http","context","dnnContext","this","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","pipe","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","p","i0","factory","ExportAppPartsService","scope","webApiAppPartsRoot","appid","zoneId","contentTypeIds","entityIds","templateIds","url","join","window","open","d","ExportAppService","webApiAppRoot","includeContentGroups","resetAppGuid","ImportAppPartsService","file","formData","FormData","append","post","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","webApiEntityList","from","toBase64","mergeMap","R","AppId","ContentBase64","fileBase64","id","Id","delete","L","ViewsService","webApiViewRoot","guid","x","ContentItemsService","contentTypeStaticName","webApiFieldsAll","staticName","D","webApiEntityRoot","s","ImportAppService","changedName","MetadataActionsComponent","onDelete","data","u","selectors","ctx","ctx_r12","ctx_r14","ctx_r15","ctx_r16","ctx_r17","MetadataSaveDialogComponent","dialogRef","contentTypesService","y","dropdownInsertValue","contentTypes$","BehaviorSubject","scopeOptions$","buildForm","fetchScopes","templateVars$","combineLatest","contentTypes","i","scopeOptions","complete","close","guidedContentType","event","advancedMode","checked","formValues","form","getRawValue","closeDialog","FormGroup","addControl","FormControl","Validators","eavConstants","controls","valueChanges","startWith","value","distinctUntilChanged","subscribe","newScope","n","patchValue","prompt","some","option","next","name","concat","fetchContentTypes","retrieveContentTypes","getScopes","scopes","ctx_r19","ctx_r21","ctx_r23","ctx_r25","MetadataComponent","router","route","metadataService","snackBar","entitiesService","contentItemsService","dialog","viewContainerRef","changeDetectorRef","AllCommunityModules","Object","defaultGridOptions","frameworkComponents","idFieldComponent","IdFieldComponent","metadataActionsComponent","columnDefs","headerName","field","width","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","metadata","Guid","flex","minWidth","sort","onCellClicked","editMetadata","bind","valueGetter","_Type","Name","Description","pinned","deleteMetadata","undefined","Subscription","parseInt","snapshot","paramMap","decodeURIComponent","G","_a","fetchFor","fetchMetadata","refreshOnChildClosed","metadata$","recommendations$","itemFor$","fabOpen$","recommendations","itemFor","fabOpen","subscription","unsubscribe","recommendation","CreateEmpty","create","For","calculateItemFor","error","duration","createMetadataForm","autoFocus","afterClosed","items","ContentTypeName","formUrl","convertFormToUrl","navigate","relativeTo","markForCheck","Target","c","values","find","m","targetType","target","_b","TargetType","keyType","key","Number","String","getAll","item","getMetadata","Items","filtered","Recommendations","r","Count","EntityId","warning","DeleteWarning","Title","confirm","add","events","NavigationEnd","firstChild","pairwise","FieldHintComponent","isShort","ClickStopPropagationDirective","stopPropagation","l","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","readAsText"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.ts","./projects/ng-dialogs/src/app/metadata/ag-grid-components/metadata-actions/metadata-actions.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.html","./projects/ng-dialogs/src/app/metadata/metadata-save-dialog/metadata-save-dialog.component.ts","./projects/ng-dialogs/src/app/metadata/metadata.component.html","./projects/ng-dialogs/src/app/metadata/metadata.component.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MetadataItem } from '../../models/metadata.model';\r\nimport { MetadataActionsParams } from './metadata-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-actions',\r\n  templateUrl: './metadata-actions.component.html',\r\n  styleUrls: ['./metadata-actions.component.scss'],\r\n})\r\nexport class MetadataActionsComponent implements ICellRendererAngularComp {\r\n  private params: MetadataActionsParams;\r\n\r\n  agInit(params: MetadataActionsParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  deleteMetadata() {\r\n    const metadata: MetadataItem = this.params.data;\r\n    this.params.onDelete(metadata);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Delete\" (click)=\"deleteMetadata()\">\r\n    <mat-icon>delete</mat-icon>\r\n  </div>\r\n</div>\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Scope -->\r\n      <ng-container *ngIf=\"advancedMode && guidedContentType\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select formControlName=\"scope\" [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n            <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n              {{ scopeOption.name }}\r\n            </mat-option>\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n      </ng-container>\r\n\r\n      <!-- Content Type of metadata item -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Content Type</mat-label>\r\n        <mat-select *ngIf=\"guidedContentType\" formControlName=\"contentType\" required\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"text\" *ngIf=\"!guidedContentType\" formControlName=\"contentType\" required>\r\n\r\n        <div matSuffix class=\"selection-suffix\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': guidedContentType }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedContentType(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !guidedContentType }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedContentType(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n      <app-field-hint *ngIf=\"form.controls.contentType.touched && form.controls.contentType.errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\" [checked]=\"advancedMode\" (change)=\"toggleAdvancedMode($event)\">\r\n        {{ advancedMode ? 'Advanced' : 'Simple' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { MetadataSaveDialogTemplateVars, MetadataSaveFormValues } from './metadata-save-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-metadata-save-dialog',\r\n  templateUrl: './metadata-save-dialog.component.html',\r\n  styleUrls: ['./metadata-save-dialog.component.scss']\r\n})\r\nexport class MetadataSaveDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  form: FormGroup;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  templateVars$: Observable<MetadataSaveDialogTemplateVars>;\r\n  guidedContentType = true;\r\n  advancedMode = false;\r\n\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataSaveDialogComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n\r\n    this.buildForm();\r\n    this.fetchScopes();\r\n\r\n    this.templateVars$ = combineLatest([this.contentTypes$, this.scopeOptions$]).pipe(\r\n      map(([contentTypes, scopeOptions]) => {\r\n        const templateVars: MetadataSaveDialogTemplateVars = {\r\n          contentTypes,\r\n          scopeOptions,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.contentTypes$.complete();\r\n    this.scopeOptions$.complete();\r\n  }\r\n\r\n  closeDialog(contentType?: string): void {\r\n    this.dialogRef.close(contentType);\r\n  }\r\n\r\n  toggleGuidedContentType(guidedContentType: boolean): void {\r\n    this.guidedContentType = guidedContentType;\r\n  }\r\n\r\n  toggleAdvancedMode(event: MatSlideToggleChange): void {\r\n    this.advancedMode = event.checked;\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataSaveFormValues = this.form.getRawValue();\r\n    this.closeDialog(formValues.contentType);\r\n  }\r\n\r\n  private buildForm(): void {\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('contentType', new FormControl(null, [Validators.required]));\r\n    this.form.addControl('scope', new FormControl(eavConstants.scopes.default.value));\r\n\r\n    this.form.controls.scope.valueChanges.pipe(\r\n      startWith(this.form.controls.scope.value),\r\n      distinctUntilChanged(),\r\n    ).subscribe((newScope: string) => {\r\n      // reset content types when scope changes\r\n      if (this.form.controls.contentType.value != null) {\r\n        this.form.controls.contentType.patchValue(null);\r\n      }\r\n\r\n      // add new scope on manual entry\r\n      if (newScope === dropdownInsertValue) {\r\n        newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n        if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n          const newScopeOption: ScopeOption = {\r\n            name: newScope,\r\n            value: newScope,\r\n          };\r\n          this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n        }\r\n        this.form.controls.scope.patchValue(newScope);\r\n      } else {\r\n        this.fetchContentTypes(newScope);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div class=\"nav-component-wrapper\">\r\n    <div mat-dialog-title>\r\n      <div class=\"dialog-title-box\">\r\n        <div>{{ title || 'Metadata' }}</div>\r\n        <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n          <mat-icon>close</mat-icon>\r\n        </button>\r\n      </div>\r\n    </div>\r\n\r\n    <p class=\"dialog-description\">\r\n      <ng-container *ngIf=\"!data.itemFor\">This item is not metadata for anything else.</ng-container>\r\n      <ng-container *ngIf=\"data.itemFor\">\r\n        This item is metadata for:\r\n        <br>Target: {{ data.itemFor.Target }}\r\n        <br>TargetType: {{ data.itemFor.TargetType }}\r\n        <ng-container *ngIf=\"data.itemFor.Number\"><br>Number: {{ data.itemFor.Number }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Guid\"><br>Guid: {{ data.itemFor.Guid }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.String\"><br>String: {{ data.itemFor.String }}</ng-container>\r\n        <ng-container *ngIf=\"data.itemFor.Title\"><br>Title: {{ data.itemFor.String }}</ng-container>\r\n      </ng-container>\r\n    </p>\r\n\r\n    <router-outlet></router-outlet>\r\n\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data.metadata\" [modules]=\"modules\"\r\n        [gridOptions]=\"gridOptions\">\r\n      </ag-grid-angular>\r\n\r\n      <div class=\"grid-more-actions-box\"></div>\r\n\r\n      <button mat-fab mat-elevation-z24 class=\"grid-fab\" *ngIf=\"data.recommendations.length === 0\"\r\n        tippy=\"Create a new metadata for this item\" (click)=\"createMetadata()\">\r\n        <mat-icon>add</mat-icon>\r\n      </button>\r\n\r\n      <eco-fab-speed-dial class=\"grid-fab\" [ngClass]=\"{ 'fab-opened': data.fabOpen }\"\r\n        *ngIf=\"data.recommendations.length > 0\" (openChange)=\"openChange($event)\">\r\n        <eco-fab-speed-dial-trigger [spin]=\"true\">\r\n          <button mat-fab>\r\n            <mat-icon class=\"spin180\">{{ data.fabOpen ? 'close' : 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-trigger>\r\n\r\n        <eco-fab-speed-dial-actions>\r\n          <button mat-mini-fab label=\"Other Content Type\" (click)=\"createMetadata()\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-mini-fab *ngFor=\"let recommendation of data.recommendations\" [attr.label]=\"recommendation.Title\"\r\n            (click)=\"createMetadata(recommendation)\">\r\n            <mat-icon>{{ recommendation.Icon || 'add' }}</mat-icon>\r\n          </button>\r\n        </eco-fab-speed-dial-actions>\r\n      </eco-fab-speed-dial>\r\n    </div>\r\n  </div>\r\n</ng-container>\r\n","import { AllCommunityModules, CellClickedEvent, GridOptions } from '@ag-grid-community/all-modules';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, Observable, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith } from 'rxjs/operators';\r\nimport { EavFor } from '../../../../edit/shared/models/eav';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { EntitiesService } from '../content-items/services/entities.service';\r\nimport { MetadataService } from '../permissions';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { MetadataActionsComponent } from './ag-grid-components/metadata-actions/metadata-actions.component';\r\nimport { MetadataActionsParams } from './ag-grid-components/metadata-actions/metadata-actions.models';\r\nimport { MetadataSaveDialogComponent } from './metadata-save-dialog/metadata-save-dialog.component';\r\nimport { MetadataItem, MetadataRecommendation, MetadataTemplateVars } from './models/metadata.model';\r\n\r\n@Component({\r\n  selector: 'app-metadata',\r\n  templateUrl: './metadata.component.html',\r\n  styleUrls: ['./metadata.component.scss'],\r\n})\r\nexport class MetadataComponent implements OnInit, OnDestroy {\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      idFieldComponent: IdFieldComponent,\r\n      metadataActionsComponent: MetadataActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense', cellClass: 'id-action no-padding no-outline',\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agNumberColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (metadata: MetadataItem) => `ID: ${metadata.Id}\\nGUID: ${metadata.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Title', field: 'Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, sort: 'asc', filter: 'agTextColumnFilter', onCellClicked: this.editMetadata.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Content Type', flex: 2, minWidth: 250, cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', valueGetter: (params) => {\r\n          const metadata = params.data as MetadataItem;\r\n          return `${metadata._Type.Name}${metadata._Type.Description ? ` (${metadata._Type.Description})` : ''}`;\r\n        },\r\n      },\r\n      {\r\n        width: 42, cellClass: 'secondary-action no-padding', cellRenderer: 'metadataActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onDelete: this.deleteMetadata.bind(this),\r\n        } as MetadataActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  private metadata$ = new BehaviorSubject<MetadataItem[]>([]);\r\n  private recommendations$ = new BehaviorSubject<MetadataRecommendation[]>([]);\r\n  private itemFor$ = new BehaviorSubject<EavFor | undefined>(undefined);\r\n  private fabOpen$ = new BehaviorSubject(false);\r\n  private subscription = new Subscription();\r\n  private targetType = parseInt(this.route.snapshot.paramMap.get('targetType'), 10);\r\n  private keyType = this.route.snapshot.paramMap.get('keyType') as MetadataKeyType;\r\n  private key = this.route.snapshot.paramMap.get('key');\r\n  title = decodeURIComponent(this.route.snapshot.paramMap.get('title') ?? '');\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  templateVars$: Observable<MetadataTemplateVars>;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MetadataComponent>,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private metadataService: MetadataService,\r\n    private snackBar: MatSnackBar,\r\n    private entitiesService: EntitiesService,\r\n    private contentItemsService: ContentItemsService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFor();\r\n    this.fetchMetadata();\r\n    this.refreshOnChildClosed();\r\n\r\n    this.templateVars$ = combineLatest([this.metadata$, this.recommendations$, this.itemFor$, this.fabOpen$]).pipe(\r\n      map(([metadata, recommendations, itemFor, fabOpen]) => {\r\n        const templateVars: MetadataTemplateVars = {\r\n          metadata,\r\n          recommendations,\r\n          itemFor,\r\n          fabOpen,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.metadata$.complete();\r\n    this.recommendations$.complete();\r\n    this.itemFor$.complete();\r\n    this.fabOpen$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  openChange(open: boolean) {\r\n    this.fabOpen$.next(open);\r\n  }\r\n\r\n  createMetadata(recommendation?: MetadataRecommendation) {\r\n    if (recommendation) {\r\n      if (recommendation.CreateEmpty) {\r\n        this.snackBar.open(`Creating ${recommendation.Name}...`);\r\n        this.entitiesService.create(recommendation.Id, { For: this.calculateItemFor() }).subscribe({\r\n          error: () => {\r\n            this.snackBar.open(`Creating ${recommendation.Name} failed. Please check console for more info`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n          next: () => {\r\n            this.snackBar.open(`Created ${recommendation.Name}`, undefined, { duration: 3000 });\r\n            this.fetchMetadata();\r\n          },\r\n        });\r\n      } else {\r\n        this.createMetadataForm(recommendation.Id);\r\n      }\r\n      return;\r\n    }\r\n    const metadataDialogRef = this.dialog.open(MetadataSaveDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((contentType?: string) => {\r\n      if (contentType == null) { return; }\r\n      this.createMetadataForm(contentType);\r\n    });\r\n  }\r\n\r\n  private createMetadataForm(contentType: string) {\r\n    const form: EditForm = {\r\n      items: [{\r\n        ContentTypeName: contentType,\r\n        For: this.calculateItemFor(),\r\n      }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n    this.changeDetectorRef.markForCheck();\r\n  }\r\n\r\n  private calculateItemFor(): EavFor {\r\n    const itemFor: EavFor = {\r\n      Target: Object.values(eavConstants.metadata).find(m => m.targetType === this.targetType)?.target ?? this.targetType.toString(),\r\n      TargetType: this.targetType,\r\n      ...(this.keyType === eavConstants.keyTypes.guid && { Guid: this.key }),\r\n      ...(this.keyType === eavConstants.keyTypes.number && { Number: parseInt(this.key, 10) }),\r\n      ...(this.keyType === eavConstants.keyTypes.string && { String: this.key }),\r\n    };\r\n    return itemFor;\r\n  }\r\n\r\n  private fetchFor() {\r\n    if (!this.contentTypeStaticName) { return; }\r\n\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      const item = items.find(i => i.Guid === this.key);\r\n      if (item?.For) {\r\n        this.itemFor$.next(item.For);\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchMetadata() {\r\n    this.metadataService.getMetadata(this.targetType, this.keyType, this.key).subscribe(metadata => {\r\n      this.metadata$.next(metadata.Items);\r\n      const filtered = metadata.Recommendations.filter(r => r.Count === 1 && !metadata.Items.some(i => i._Type.Id === r.Id));\r\n      this.recommendations$.next(filtered);\r\n    });\r\n  }\r\n\r\n  private editMetadata(params: CellClickedEvent) {\r\n    const metadata: MetadataItem = params.data;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: metadata.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private deleteMetadata(metadata: MetadataItem) {\r\n    let warning = this.recommendations$.value.find(r => r.Id === metadata._Type.Id)?.DeleteWarning || '';\r\n    warning = warning\r\n      ? `${warning}\\n\\nAre you sure you want to delete '${metadata.Title}' (${metadata.Id})?`\r\n      : `Delete '${metadata.Title}' (${metadata.Id})?`;\r\n    if (!confirm(warning)) { return; }\r\n\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(metadata._Type.Id, metadata.Id, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchMetadata();\r\n      },\r\n      error: () => {\r\n        this.snackBar.open('Delete failed. Please check console for more information', null, { duration: 3000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchMetadata();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_metadata_metadata_component_ts.512880697cf04400.js"}