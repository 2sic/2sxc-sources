{"version":3,"sources":["./projects/ng-dialogs/src/app/content-export/services/content-export.service.ts","./projects/ng-dialogs/src/app/content-items/services/content-items.service.ts","./projects/ng-dialogs/src/app/content-items/services/entities.service.ts","./projects/ng-dialogs/src/app/shared/helpers/file-to-base64.helper.ts"],"names":["context","dnnContext","exportContent","values","selectedIds","selectedIdsString","join","url","this","$2sxc","http","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","ContentExportService","getAll","get","params","toString","contentType","getColumns","staticName","importItem","file","pipe","fileBase64","post","AppId","ContentBase64","ContentItemsService","create","entity","zoneId","delete","type","tryForce","force","EntitiesService","toBase64","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-export_services_content-export_service_ts-projects_ng-dia-50fc89.db8a1e539e0d9f8b721f.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Context } from '../../shared/services/context';\r\n\r\n@Injectable()\r\nexport class EntitiesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  create<T = any>(contentType: string, entity: Record<string, any>): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.context.appId, zoneId: this.context.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.context.appId.toString(), force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n"],"sourceRoot":"webpack:///"}