{"version":3,"file":"projects_eav-ui_src_app_app-administration_services_content-types_service_ts-projects_eav-ui_-8418b4.js","mappings":"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","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.ts","./projects/eav-ui/src/app/content-items/import-content-item/import-content-item.component.html","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts"],"sourcesContent":["import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypeSig(staticName: string, initial: undefined): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: staticName }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypesSig(scope: string, initial: undefined): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Component, Inject } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { transient } from '../../../../../core';\r\nimport { FileUploadDialogComponent, FileUploadDialogData, UploadTypes } from '../../shared/components/file-upload-dialog';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-import-content-item',\r\n  templateUrl: './import-content-item.component.html',\r\n  standalone: true,\r\n  imports: [FileUploadDialogComponent,],\r\n})\r\nexport class ImportContentItemComponent {\r\n\r\n  uploadType = UploadTypes.ContentItem;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) dialogData: FileUploadDialogData) {\r\n    dialogData.title ??= `Import Single Item`;\r\n    dialogData.description ??= `Select an item file (json) from your computer to import.`;\r\n    dialogData.allowedFileTypes ??= 'json';\r\n    dialogData.upload$ ??= (files) => this.contentItemsService.importItem(files[0]);\r\n  }\r\n\r\n}\r\n","<app-file-upload-dialog [uploadType]=\"uploadType\"></app-file-upload-dialog>\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { transient } from '../../../../../core';\r\nimport { EntityLightIdentifier } from '../../../../../edit-types/src/EntityLight';\r\nimport { classLog } from '../logging';\r\nimport { HttpServiceBase } from './http-service-base';\r\nimport { QueryService } from './query.service';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getEntities: false,\r\n  getAvailableEntities: false,\r\n  delete: false,\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n@Injectable()\r\nexport class EntityService extends HttpServiceBase {\r\n\r\n  log = classLog({ EntityService }, logSpecs);\r\n\r\n  private queryService = transient(QueryService);\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityLightIdentifier[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityLightIdentifier[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\nimport { Context } from './context';\r\n\r\nconst logSpecs = {\r\n  all: false,\r\n  getAvailableEntities: false,\r\n  getEntities: false,\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = classLog({QueryService}, logSpecs);\r\n\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getFromQuery(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n"],"names":["computed","Signal","map","HttpServiceBase","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","webApiTypeSave","webApiTypeDelete","webApiTypeImport","webApiTypeAddGhost","ContentTypesService","retrieveContentType","staticName","getHttpApiUrl","params","appId","contentTypeId","retrieveContentTypeSig","initial","getSignal","retrieveContentTypes","scope","retrieveContentTypesSig","getScopes","pipe","scopesData","scopes","old","scopeOptions","Object","keys","key","name","value","getScopesSig","scopesSignal","scopeOptionsSignal","getScopesV2","save","contentType","http","post","apiUrl","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","__ngFactoryType__","factory","ɵfac","webApiAppPartsRoot","webApiAppPartsGet","ExportAppPartsService","getContentInfo","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","webApiAppRoot","webApiAppRootStatistics","webApiAppRootSaveData","ExportAppService","getAppInfo","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","toString","withPortalFiles","ImportAppPartsService","importAppParts","resetApp","MAT_DIALOG_DATA","transient","FileUploadDialogComponent","UploadTypes","ContentItemsService","ImportContentItemComponent","constructor","dialogData","uploadType","ContentItem","contentItemsService","title","description","allowedFileTypes","upload$","importItem","i0","ɵɵdirectiveInject","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ImportContentItemComponent_Template","rf","ctx","ɵɵelement","ɵɵproperty","encapsulation","of","switchMap","FileUploadMessageTypes","ImportAppService","importApp","changedName","retryOnDuplicate","result","Messages","MessageType","Warning","folderName","prompt","Text","filter","shareReplay","classLog","QueryService","logSpecs","all","getEntities","getAvailableEntities","webApiEntityRoot","webApiEntityList","EntityService","log","queryService","getEntities$","fnIf","p","contentTypeName","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","parent","id","HttpClient","Context","context","getFromQuery","queryUrl","hasParams","paramsLower","toLocaleLowerCase","hasAppId","includes","allParams","urlParams","substring","Guids","ɵɵinject","i1","i2"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}