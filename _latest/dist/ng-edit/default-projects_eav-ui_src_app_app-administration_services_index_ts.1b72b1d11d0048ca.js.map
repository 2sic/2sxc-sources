{"version":3,"mappings":"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","names":["AppDialogConfigService","constructor","http","context","dnnContext","globalConfigService","this","getDialogSettings","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","pipe","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","i0","factory","ExportAppPartsService","getContentInfo","scope","webApiAppPartsRoot","appid","zoneId","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportApp","includeContentGroups","resetAppGuid","exportForVersionControl","ImportAppPartsService","importAppParts","file","formData","FormData","append","post","resetApp","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","contentType","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","delete","ViewsService","webApiViewRoot","import","export","getPolymorphism","getUsage","guid","ImportAppService","importApp","changedName","retryOnDuplicate","result","O","_a","MessageType","FileUploadMessageTypes","folderName","prompt","Text","of","ctx_r15","ctx_r17","ctx_r19","oxw","ctx_r21","_r5","ctx_r24","FileUploadDialogComponent","dialogData","dialogRef","snackBar","BehaviorSubject","undefined","Subscription","ngOnInit","subscription","add","files$","subscribe","result$","value","next","files","filesDropped","ngOnDestroy","uploading$","complete","unsubscribe","closeDialog","refresh","close","setFiles","upload","filesChanged","event","Array","target","upload$","take","error","duration","multiple","slice","MAT_DIALOG_DATA","selectors","Warning","Error","DragAndDropDirective","elementRef","zone","EventEmitter","element","nativeElement","markStyleClass","markStyle","classList","dropAreaClass","runOutsideAngular","fromEvent","preventDefault","stopPropagation","clearTimeouts","dragClass","timeouts","push","setTimeout","remove","onDrop","dataTransfer","filterTypes","allowedFileTypes","length","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","extIndex","name","lastIndexOf","ext","substring","includes","allowedTypesString","replace","ctx","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/eav-ui/src/app/app-administration/services/app-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.html","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.component.ts","./projects/eav-ui/src/app/shared/components/file-upload-dialog/file-upload-dialog.models.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, tap } from 'rxjs';\r\nimport { GlobalConfigService } from '../../edit/shared/store/ngrx-data';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private dnnContext: DnnContext,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n      tap(dialogSettings => {\r\n        this.globalConfigService.allowDebug(dialogSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { webApiEntityList } from '../../edit/shared/services';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","<div appDragAndDrop [allowedFileTypes]=\"dialogData.allowedFileTypes\" (filesDropped)=\"filesDropped($event)\" *ngIf=\"{\r\n  uploading: uploading$ | async,\r\n    files: files$ | async,\r\n    result: result$ | async\r\n  } as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\" [innerHtml]=\"dialogData.title | safeHtml\"></div>\r\n  </div>\r\n\r\n  <mat-spinner *ngIf=\"data.uploading\" mode=\"indeterminate\" diameter=\"20\" color=\"accent\"></mat-spinner>\r\n\r\n  <p class=\"dialog-description\" [innerHtml]=\"dialogData.description | safeHtml\"></p>\r\n\r\n  <div>\r\n    <button mat-raised-button tippy=\"Open file browser\" [disabled]=\"data.uploading\" (click)=\"fileInput.click()\">\r\n      <div *ngIf=\"!data.files.length\">Select or drop file</div>\r\n      <div *ngFor=\"let file of data.files\">{{ file.name }}</div>\r\n    </button>\r\n    <input #fileInput type=\"file\" multiple (change)=\"filesChanged($event)\" class=\"hide\" />\r\n  </div>\r\n\r\n  <div class=\"dialog-component-content fancy-scrollbar-light result-container\" *ngIf=\"data.result\">\r\n    <div *ngIf=\"data.result.Success\" class=\"sxc-message sxc-message-info\">\r\n      Upload succeeded. See the messages below for more information.\r\n    </div>\r\n    <div *ngIf=\"!data.result.Success\" class=\"sxc-message sxc-message-error\">\r\n      Upload failed. See the messages below for more information.\r\n    </div>\r\n    <div *ngFor=\"let message of data.result.Messages\" class=\"sxc-message\" [ngClass]=\"{\r\n      'sxc-message-warning': message.MessageType === FileUploadMessageTypes.Warning,\r\n      'sxc-message-success': message.MessageType === FileUploadMessageTypes.Success,\r\n      'sxc-message-error': message.MessageType === FileUploadMessageTypes.Error\r\n    }\">\r\n      {{ message.Text }}\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <ng-container *ngIf=\"!data.result?.Success\">\r\n      <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"!data.files.length || data.uploading || !!data.result\"\r\n        (click)=\"upload()\">\r\n        Upload\r\n      </button>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"data.result?.Success\">\r\n      <button mat-raised-button color=\"accent\" (click)=\"closeDialog(true)\">Close</button>\r\n    </ng-container>\r\n  </div>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { BehaviorSubject, Subscription, take } from 'rxjs';\r\nimport { FileUploadDialogData, FileUploadMessageTypes, FileUploadResult } from './file-upload-dialog.models';\r\n\r\n@Component({\r\n  selector: 'app-file-upload-dialog',\r\n  templateUrl: './file-upload-dialog.component.html',\r\n  styleUrls: ['./file-upload-dialog.component.scss'],\r\n})\r\nexport class FileUploadDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  uploading$ = new BehaviorSubject<boolean>(false);\r\n  files$ = new BehaviorSubject<File[]>([]);\r\n  result$ = new BehaviorSubject<FileUploadResult>(undefined);\r\n  FileUploadMessageTypes = FileUploadMessageTypes;\r\n\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) public dialogData: FileUploadDialogData,\r\n    private dialogRef: MatDialogRef<FileUploadDialogComponent>,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription.add(\r\n      this.files$.subscribe(() => {\r\n        if (this.result$.value !== undefined) {\r\n          this.result$.next(undefined);\r\n        }\r\n      }),\r\n    );\r\n\r\n    if (this.dialogData.files != null) {\r\n      this.filesDropped(this.dialogData.files);\r\n    }\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.uploading$.complete();\r\n    this.files$.complete();\r\n    this.result$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(refresh?: boolean): void {\r\n    this.dialogRef.close(refresh);\r\n  }\r\n\r\n  filesDropped(files: File[]): void {\r\n    this.setFiles(files);\r\n    this.upload();\r\n  }\r\n\r\n  filesChanged(event: Event): void {\r\n    const fileList = (event.target as HTMLInputElement).files;\r\n    const files = Array.from(fileList);\r\n    this.setFiles(files);\r\n  }\r\n\r\n  upload(): void {\r\n    this.uploading$.next(true);\r\n    this.subscription.add(\r\n      this.dialogData.upload$(this.files$.value).pipe(take(1)).subscribe({\r\n        next: (result) => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(result);\r\n        },\r\n        error: () => {\r\n          this.uploading$.next(false);\r\n          this.result$.next(undefined);\r\n          this.snackBar.open('Upload failed. Please check console for more information', undefined, { duration: 3000 });\r\n        },\r\n      }),\r\n    );\r\n  }\r\n\r\n  private setFiles(files: File[]): void {\r\n    if (!this.dialogData.multiple) {\r\n      files = files.slice(0, 1);\r\n    }\r\n    this.files$.next(files);\r\n  }\r\n}\r\n","import { Observable } from 'rxjs';\r\n\r\nexport interface FileUploadDialogData {\r\n  title?: string;\r\n  description?: string;\r\n  allowedFileTypes?: string;\r\n  files?: File[];\r\n  multiple?: boolean;\r\n  upload$?(files: File[]): Observable<FileUploadResult>;\r\n}\r\n\r\nexport interface FileUploadResult {\r\n  Messages: FileUploadResultMessage[];\r\n  Success: boolean;\r\n}\r\n\r\nexport interface FileUploadResultMessage {\r\n  MessageType: FileUploadMessageType;\r\n  Text: string;\r\n}\r\n\r\nexport const FileUploadMessageTypes = {\r\n  Warning: 0,\r\n  Success: 1,\r\n  Error: 2,\r\n} as const;\r\n\r\nexport type FileUploadMessageType = typeof FileUploadMessageTypes[keyof typeof FileUploadMessageTypes];\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_app-administration_services_index_ts.1b72b1d11d0048ca.js"}