{"version":3,"sources":["./src/app/content-type-fields/services/content-types-fields.service.ts","./src/app/apps-management/services/apps-list.service.ts","./src/app/shared/pipes/safe-resource-url.ts","./src/app/content-items/services/content-items.service.ts","./src/app/shared/directives/drag-and-drop.directive.ts","./src/app/content-export/services/content-export.service.ts","./src/app/shared/components/boolean-filter/boolean-filter.component.ts","./src/app/shared/components/boolean-filter/boolean-filter.component.html","./src/app/content-type-fields/constants/data-type.constants.ts","./src/app/content-type-fields/content-type-fields.helpers.ts","./src/app/shared/directives/toggle-debug.directive.ts","./src/app/shared/services/dialog.service.ts","./src/app/shared/pipes/safe-html.pipe.ts","./src/app/shared/translation/translate-configuration.ts","./src/app/shared/translation/translate-loader-with-error-handling.ts","./src/app/manage-content-list/services/content-group.service.ts","./src/app/shared/constants/file-names.constants.ts","./src/app/shared/components/field-hint/field-hint.component.html","./src/app/shared/components/field-hint/field-hint.component.ts","./src/app/app-administration/constants/field-name.patterns.ts","./src/app/shared/directives/click-stop-propagation.directive.ts","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/badge.js","C:/Projects/2sxc/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/slide-toggle.js","./src/app/shared/directives/mousedown-stop-propagation.directive.ts","../edit/eav-material-controls/adam/sanitize.helper.ts"],"names":["webApiFieldsAll","webApiFieldsRoot","http","context","dnnContext","apiUrl","name","this","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","inputConfigs","map","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","getFields","contentType","staticName","StaticName","fields","fld","Metadata","md","allMd","All","typeMd","inputMd","InputType","merged","reOrder","idArray","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","attributeId","rename","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","Index","SortOrder","updateInputType","id","field","ContentTypesFieldsService","getAll","zoneId","create","flushCache","AppsListService","sanitizer","transform","resourceUrl","bypassSecurityTrustResourceUrl","SafeResourceUrlPipe","contentTypeStaticName","getColumns","importItem","file","fileBase64","ContentBase64","ContentItemsService","elementRef","zone","snackBar","markStyle","allowedFileTypes","filesDropped","dropAreaClass","dragClass","timeouts","subscription","element","nativeElement","ngOnInit","markStyleClass","classList","runOutsideAngular","subscribe","event","preventDefault","stopPropagation","clearTimeouts","push","window","setTimeout","remove","ngOnDestroy","unsubscribe","onDrop","files","Array","from","dataTransfer","filterTypes","length","emit","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","extIndex","lastIndexOf","ext","includes","allowedTypesString","replace","open","duration","DragAndDropDirective","exportContent","values","selectedIds","selectedIdsString","join","url","language","defaultLanguage","recordExport","resourcesReferences","languageReferences","exportJson","typeName","exportEntity","prefix","metadata","ContentExportService","agInit","isFilterActive","doesFilterPass","value","valueGetter","node","getModel","filterType","setModel","model","afterGuiAttached","filterChanged","filterChangedCallback","BooleanFilterComponent","String","Entity","Boolean","Number","Custom","DateTime","Hyperlink","Empty","calculateTypeIcon","globalConfigService","onClick","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","ToggleDebugDirective","openCodeFile","path","isShared","dialog","Develop","form","items","Path","sharedUrlRoot","buildHashParam","sessionStorage","getItem","openQueryDesigner","queryId","PipelineDesigner","EntityId","oldHref","oldUrl","URL","origin","pathname","search","tabId","moduleId","contentBlockId","key","rawKey","valueTemp","encodeURIComponent","DialogService","html","bypassSecurityTrustHtml","SafeHtmlPipe","buildTranslateConfiguration","factory","loader","provide","useFactory","deps","isolate","suffix","getTranslation","lang","catchError","error","console","warn","of","getItems","webApiContentGroup","guid","part","index","saveItem","entityId","getList","contentGroup","saveList","resortedList","getHeader","ContentGroupService","defaultControllerName","defaultTemplateName","defaultTokenName","isError","isShort","toggleIsShort","FieldHintComponent","fieldNamePattern","fieldNameError","ClickStopPropagationDirective","nextId","MatBadgeBase","_MatBadgeMixinBase","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","_hasContent","_color","_overlap","position","size","_id","changes","contentChange","currentValue","trim","_updateTextContent","badgeElement","_badgeElement","removeDescription","destroyNode","textContent","_stringifyContent","_createBadgeElement","createElement","activeClass","contentClass","_clearExistingBadges","setAttribute","appendChild","requestAnimationFrame","newDescription","oldDescription","content","describe","colorPalette","cssClass","childCount","children","currentChild","contains","removeChild","_setColor","val","_description","_updateHostAriaDescription","removeAttribute","_hidden","ɵfac","t","ɵdir","selectors","hostAttrs","hostVars","hostBindings","rf","ctx","overlap","isAbove","isAfter","hidden","disabled","inputs","color","features","MatBadgeModule","ɵmod","ɵinj","imports","_c0","_c1","_c2","_c3","enterDuration","_c4","MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS","providedIn","disableToggleValue","nextUniqueId","MAT_SLIDE_TOGGLE_VALUE_ACCESSOR","useExisting","MatSlideToggle","multi","MatSlideToggleChange","source","checked","MatSlideToggleBase","_MatSlideToggleMixinBase","_focusMonitor","_changeDetectorRef","tabIndex","defaults","_onChange","_","_onTouched","_uniqueId","_required","_checked","labelPosition","ariaLabel","ariaLabelledby","change","toggleChange","parseInt","monitor","focusOrigin","_inputElement","focus","Promise","resolve","then","stopMonitoring","_emitChangeEvent","fn","isDisabled","markForCheck","options","focusVia","detectChanges","ɵcmp","viewQuery","_t","_thumbEl","first","_thumbBarEl","disableRipple","required","outputs","exportAs","ngContentSelectors","decls","vars","consts","template","$event","_onChangeEvent","_onInputClick","_onLabelTextChange","_r0","_r4","inputId","directives","styles","encapsulation","changeDetection","_MatSlideToggleRequiredValidatorModule","MatSlideToggleModule","onMousedown","MousedownStopPropagationDirective","removeFromStart","sanitized","charToRemove","removeFromEnd","cleanBadPath","goodChar","sanitizePath","sanitizeName"],"mappings":"yPAWaA,EAAkBC,kBAE/B,aAEE,WAAoBC,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAEhE,YAAAC,OAAR,SAAeC,GACb,OAAOC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOC,IAG3C,YAAAG,iBAAA,WACE,OAAOF,KAAKL,KAAKQ,IAAcH,KAAKF,OAAOJ,yBAAiC,CAC1EU,OAAQ,CAAEC,MAAOL,KAAKJ,QAAQU,MAAMC,eAIxC,YAAAC,kBAAA,WACE,OAAOR,KAAKL,KACTQ,IAAiBH,KAAKF,OAAOJ,0BAAkC,CAAEU,OAAQ,CAAEC,MAAOL,KAAKJ,QAAQU,MAAMC,cACrGE,KACC,aAAI,SAAAC,GAUF,OATyBA,EAAaC,KAAI,SAAAC,GAOxC,MANqC,CACnCC,SAAUD,EAAOE,KAAKC,UAAU,EAAGH,EAAOE,KAAKE,QAAQ,MACvDC,UAAWL,EAAOE,KAClBI,MAAON,EAAOO,MACdC,YAAaR,EAAOS,qBAShC,YAAAC,UAAA,SAAUC,GACR,OAAOvB,KAAKL,KACTQ,IAAaH,KAAKF,OAAOL,GAAkB,CAC1CW,OAAQ,CAAEC,MAAOL,KAAKJ,QAAQU,MAAMC,WAAYiB,WAAYD,EAAYE,cAEzEhB,KACC,aAAI,SAAAiB,G,QACF,GAAIA,E,IACF,IAAkB,kBAAAA,GAAM,8BAAE,CAArB,IAAMC,EAAG,QACZ,GAAKA,EAAIC,SAAT,CACA,IAAMC,EAAKF,EAAIC,SACTE,EAAQD,EAAGE,IACXC,EAASH,EAAGF,EAAIb,MAChBmB,EAAUJ,EAAGF,EAAIO,WACvBL,EAAGM,OAAS,YAAH,2BAAQL,GAAUE,GAAWC,K,iGAG1C,OAAOP,OAKf,YAAAU,QAAA,SAAQC,EAAmBd,GACzB,OAAOvB,KAAKL,KAAK2C,KAActC,KAAKF,OAAOJ,oBAA4B,KAAM,CAC3EU,OAAQ,CACNC,MAAOL,KAAKJ,QAAQU,MAAMC,WAC1BgC,cAAehB,EAAYiB,GAAGjC,WAC9BkC,MAAOC,KAAKC,UAAUN,OAK5B,YAAAO,SAAA,SAASC,EAAatB,GACpB,OAAOvB,KAAKL,KAAK2C,KAAWtC,KAAKF,OAAO,IAAiB,YAAa,KAAM,CAC1EM,OAAQ,CACNC,MAAOL,KAAKJ,QAAQU,MAAMC,WAC1BgC,cAAehB,EAAYiB,GAAGjC,WAC9BuC,YAAaD,EAAKL,GAAGjC,eAK3B,YAAAwC,OAAA,SAAOF,EAAatB,EAA0ByB,GAC5C,OAAOhD,KAAKL,KAAK2C,KAAWtC,KAAKF,OAAOJ,sBAA8B,KAAM,CAC1EU,OAAQ,CACNC,MAAOL,KAAKJ,QAAQU,MAAMC,WAC1BgC,cAAehB,EAAYiB,GAAGjC,WAC9BuC,YAAaD,EAAKL,GAAGjC,WACrByC,QAAO,MAKb,YAAAC,OAAA,SAAOJ,EAAatB,GAClB,GAAIsB,EAAKK,QACP,MAAM,IAAIC,MAAM,sBAGlB,OAAOnD,KAAKL,KAAKsD,OAAgBjD,KAAKF,OAAOJ,sBAA8B,CACzEU,OAAQ,CACNC,MAAOL,KAAKJ,QAAQU,MAAMC,WAC1BgC,cAAehB,EAAYiB,GAAGjC,WAC9BuC,YAAaD,EAAKL,GAAGjC,eAK3B,YAAA6C,IAAA,SAAIC,EAA0Bd,GAC5B,OAAOvC,KAAKL,KAAK2C,KAAatC,KAAKF,OAAOJ,mBAA2B,KAAM,CACzEU,OAAQ,CACNkD,MAAOtD,KAAKJ,QAAQU,MAAMC,WAC1BgD,cAAehB,EAAchC,WAC7BiC,GAAIa,EAASb,GAAGjC,WAChBO,KAAMuC,EAASvC,KACfoB,UAAWmB,EAASnB,UACpBT,WAAY4B,EAAS5B,WACrByB,QAASG,EAASH,QAAQ3C,WAC1BiD,MAAOH,EAASI,UAAUlD,eAKhC,YAAAmD,gBAAA,SAAgBC,EAAYnC,EAAoBP,GAC9C,OAAOjB,KAAKL,KAAK2C,KAActC,KAAKF,OAAOJ,yBAAiC,KAAM,CAChFU,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYuC,YAAaa,EAAGpD,WAAYqD,MAAOpC,EAAYP,UAAS,M,sCApHjG4C,GAAyB,gC,yBAAzBA,EAAyB,QAAzBA,EAAyB,Y,EADtC,I,oCCVA,kGAIA,aAEE,WAAoBlE,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAEhE,YAAAC,OAAR,SAAeC,GACb,OAAOC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOC,IAG3C,YAAA+D,OAAA,WACE,OAAO9D,KAAKL,KAAKQ,IAAWH,KAAKF,OAAO,IAAgB,QAAS,CAC/DM,OAAQ,CAAE2D,OAAQ/D,KAAKJ,QAAQmE,OAAOxD,eAI1C,YAAAyD,OAAA,SAAOjE,GACL,OAAOC,KAAKL,KAAK2C,KAAWtC,KAAKF,OAAO,IAAgB,OAAQ,GAAI,CAClEM,OAAQ,CAAE2D,OAAQ/D,KAAKJ,QAAQmE,OAAOxD,WAAYR,KAAI,MAI1D,YAAAkD,OAAA,SAAO3C,GACL,OAAON,KAAKL,KAAKsD,OAAajD,KAAKF,OAAO,IAAgB,OAAQ,CAChEM,OAAQ,CAAE2D,OAAQ/D,KAAKJ,QAAQmE,OAAOxD,WAAYD,MAAOA,EAAMC,eAInE,YAAA0D,WAAA,SAAW3D,GACT,OAAON,KAAKL,KAAKQ,IAAUH,KAAKF,OAAO,IAAgB,cAAe,CACpEM,OAAQ,CAAE2D,OAAQ/D,KAAKJ,QAAQmE,OAAOxD,WAAYD,MAAOA,EAAMC,e,sCA3BxD2D,GAAe,gC,yBAAfA,EAAe,QAAfA,EAAe,Y,EAD5B,I,kGCJA,aAGE,WAAoBC,GAAA,KAAAA,Y,OAEpB,YAAAC,UAAA,SAAUC,GACR,OAAOrE,KAAKmE,UAAUG,+BAA+BD,I,sCAL5CE,GAAmB,Y,+CAAnBA,EAAmB,U,EADhC,I,oCCAA,kJASA,aAEE,WAAoB5E,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAExE,YAAAiE,OAAA,SAAOU,GACL,OAAOxE,KAAKL,KAAKQ,IAAmBH,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,KAAmB,CACvFM,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYgB,YAAaiD,MAIjE,YAAAC,WAAA,SAAWD,GACT,OAAOxE,KAAKL,KAAKQ,IAAaH,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,KAAkB,CAChFM,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYiB,WAAYgD,MAIhE,YAAAE,WAAA,SAAWC,GAAX,WACE,OAAO,YAAK,YAASA,IAAOlE,KAC1B,aAAS,SAAAmE,GACP,OAAO,EAAKjF,KAAK2C,KAAc,EAAKzC,WAAWI,MAAMN,KAAKG,OAAO,IAAmB,UAAW,CAC7FwD,MAAO,EAAK1D,QAAQU,MAAMC,WAC1BsE,cAAeD,S,sCApBZE,GAAmB,gC,yBAAnBA,EAAmB,QAAnBA,EAAmB,Y,EADhC,I,sICRA,aAcE,WAAYC,EAAgCC,EAAsBC,GAAtB,KAAAD,OAAsB,KAAAC,WAZjD,KAAAC,UAA2C,UAE3C,KAAAC,iBAAmB,GAClB,KAAAC,aAAe,IAAI,IAG7B,KAAAC,cAAgB,eAEhB,KAAAC,UAAY,eACZ,KAAAC,SAAqB,GACrB,KAAAC,aAAe,IAAI,IAGzBxF,KAAKyF,QAAUV,EAAWW,c,OAG5B,YAAAC,SAAA,sBACE3F,KAAK4F,eAAiB,gBAAgB5F,KAAKkF,UAC3ClF,KAAKyF,QAAQI,UAAUzC,IAAIpD,KAAKqF,cAAerF,KAAK4F,gBACpD5F,KAAKgF,KAAKc,mBAAkB,WAC1B,EAAKN,aAAapC,IAChB,YAAU,EAAKqC,QAAS,YAAYM,WAAU,SAACC,GAC7CA,EAAMC,iBACND,EAAME,kBACN,EAAKC,gBACL,EAAKV,QAAQI,UAAUzC,IAAI,EAAKkC,eAGpC,EAAKE,aAAapC,IAChB,YAAU,EAAKqC,QAAS,aAAaM,WAAU,SAACC,GAC9CA,EAAMC,iBACND,EAAME,kBACN,EAAKX,SAASa,KACZC,OAAOC,YAAW,WAAQ,EAAKb,QAAQI,UAAUU,OAAO,EAAKjB,aAAe,aAOtF,YAAAkB,YAAA,WACExG,KAAKmG,gBACLnG,KAAKyF,QAAQI,UAAUU,OAAOvG,KAAKqF,cAAerF,KAAK4F,eAAgB5F,KAAKsF,WAC5EtF,KAAKwF,aAAaiB,eAIpB,YAAAC,OADA,SACOV,GACLA,EAAMC,iBACND,EAAME,kBACNlG,KAAKmG,gBACLnG,KAAKyF,QAAQI,UAAUU,OAAOvG,KAAKsF,WACnC,IACIqB,EAAQC,MAAMC,KADDb,EAAMc,aAAaH,QAEpCA,EAAQ3G,KAAK+G,YAAYJ,EAAO3G,KAAKmF,mBAC3B6B,OAAS,GACjBhH,KAAKoF,aAAa6B,KAAKN,IAInB,YAAAR,cAAR,W,YACE,IAAsB,kBAAAnG,KAAKuF,UAAQ,8BACjC2B,aADgB,S,iGAGlBlH,KAAKuF,SAAW,IAGV,YAAAwB,YAAR,SAAoBJ,EAAexB,GACjC,GAAyB,KAArBA,EAA2B,OAAOwB,EAEtC,IAAMQ,EAAehC,EAAiBiC,MAAM,KAAKzG,KAAI,SAAA0G,GAAQ,OAAAA,EAAKC,uBAC5DC,EAAWZ,EAAMa,QAAO,SAAA7C,GAC5B,IAAM8C,EAAW9C,EAAK5E,KAAK2H,YAAY,KACvC,GAAID,GAAY,EAAK,OAAO,EAC5B,IAAME,EAAMhD,EAAK5E,KAAKgB,UAAU0G,EAAW,GAAGH,oBAE9C,OADgBH,EAAaS,SAASD,MAIxC,GAAIhB,EAAMK,SAAWO,EAASP,OAAQ,CACpC,IAAMa,EAAqB7H,KAAKmF,iBAAiB2C,QAAQ,MAAO,MAIhE9H,KAAKiF,SAAS8C,KAHER,EAASP,OACrB,6EAA+Ea,EAC/E,+CAAiDA,EACzB,KAAM,CAAEG,SAAU,MAEhD,OAAOT,G,sCAvFEU,GAAoB,gC,uBAApBA,EAAoB,qE,gCAApB,gB,6GADb,I,kCCFA,kGAKA,aAEE,WAAoBrI,EAA0BC,GAA1B,KAAAD,UAA0B,KAAAC,a,OAE9C,YAAAqI,cAAA,SAAcC,EAAuBC,GACnC,IAAMC,EAAoBD,EAAc,gBAAkBA,EAAYE,OAAS,GACzEC,EAAMvI,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,IAAmB,YAC7D,UAAYE,KAAKJ,QAAQU,MACzB,aAAe6H,EAAOK,SACtB,oBAAsBL,EAAOM,gBAC7B,gBAAkBN,EAAO3D,sBACzB,iBAAmB2D,EAAOO,aAC1B,wBAA0BP,EAAOQ,oBACjC,uBAAyBR,EAAOS,mBAChCP,EAEJhC,OAAO0B,KAAKQ,EAAK,SAAU,KAG7B,YAAAM,WAAA,SAAWC,GACT,IAAMP,EAAMvI,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,IAAiB,QAC3D,UAAYE,KAAKJ,QAAQU,MACzB,SAAWwI,EAEfzC,OAAO0B,KAAKQ,EAAK,SAAU,KAG7B,YAAAQ,aAAA,SAAapF,EAAYqF,EAAgBC,GACvC,IAAMV,EAAMvI,KAAKH,WAAWI,MAAMN,KAAKG,OAAO,IAAmB,QAC7D,UAAYE,KAAKJ,QAAQU,MACzB,OAASqD,EACT,WAAaqF,EACb,iBAAmBC,EAEvB5C,OAAO0B,KAAKQ,EAAK,SAAU,K,sCAjClBW,GAAoB,sB,yBAApBA,EAAoB,QAApBA,EAAoB,Y,EADjC,I,4GCFA,0BAOE,KAAA1B,OAAS,G,OAIT,YAAA2B,OAAA,SAAO/I,GACLJ,KAAKI,OAASA,GAGhB,YAAAgJ,eAAA,WACE,MAAuB,KAAhBpJ,KAAKwH,QAGd,YAAA6B,eAAA,SAAejJ,GACb,IAAMkJ,EAAiBtJ,KAAKI,OAAOmJ,YAAYnJ,EAAOoJ,MACtD,OAAa,MAATF,GACGA,EAAM/I,aAAeP,KAAKwH,QAGnC,YAAAiC,SAAA,WACE,GAAKzJ,KAAKoJ,iBACV,MAAO,CACLM,WAAY,UACZlC,OAAQxH,KAAKwH,SAIjB,YAAAmC,SAAA,SAASC,GACP5J,KAAKwH,OAASoC,EAAQA,EAAMpC,OAAS,IAGvC,YAAAqC,iBAAA,SAAiBzJ,KAGjB,YAAA0J,cAAA,WACE9J,KAAKI,OAAO2J,yB,sCAnCHC,I,uBAAAA,EAAsB,sKCXnC,4BAAiB,uDAAoB,mCAAkB,EAAAF,mBACrD,6BAA2B,cAAG,OAC9B,6BAA+B,eAAI,OACnC,6BAAgC,gBAAK,OACvC,Q,KAJiB,0B,0NDKjB,I,kCELA,iEASA,OARyB,EAAAG,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,QAAU,UACV,EAAAC,OAAS,SACT,EAAAC,OAAS,SACT,EAAAC,SAAW,WACX,EAAAC,UAAY,YACZ,EAAAC,MAAQ,QACjC,EATA,I,kCCAA,kDAEO,SAASC,EAAkB3B,GAChC,OAAQA,GACN,KAAK,IAAkBmB,OACrB,MAAO,cACT,KAAK,IAAkBC,OACrB,MAAO,QACT,KAAK,IAAkBC,QACrB,MAAO,YACT,KAAK,IAAkBC,OACrB,MAAO,UACT,KAAK,IAAkBC,OACrB,MAAO,YACT,KAAK,IAAkBC,SACrB,MAAO,QACT,KAAK,IAAkBC,UACrB,MAAO,OACT,KAAK,IAAkBC,MACrB,MAAO,YACT,QACE,MAAO,oB,gGClBb,aAGE,WAAoBE,GAAA,KAAAA,sB,OAGpB,YAAAC,QADA,SACQ3E,IACwB4E,UAAUC,SAASC,MAAM,OAAS9E,EAAM+E,QAAU/E,EAAMgF,UAAYhF,EAAMiF,UAAYjF,EAAMkF,QAExHlL,KAAK0K,oBAAoBS,sB,sCARlBC,GAAoB,Y,uBAApBA,EAAoB,qE,iCAApB,mB,EADb,I,kCCFA,sFAMA,aAEE,WAAoBxL,GAAA,KAAAA,U,OAEpB,YAAAyL,aAAA,SAAaC,EAAcC,QAAA,IAAAA,OAAA,GACzB,IAAMC,EAAS,IAAoBC,QAC7BC,EAAiB,CACrBC,MAAO,CAAC,CAAEC,KAAMN,KAEZ/C,EAAMvI,KAAK6L,gBACf7L,KAAK8L,eAAe,IAAWN,GAC/BxL,KAAK8L,eAAe,WAAYP,EAAShL,YACzCP,KAAK8L,eAAe,IAAUpJ,KAAKC,UAAU+I,EAAKC,SACjDI,eAAeC,QAAQ,KAAYhM,KAAK8L,eAAe,KAAY,IACpE,GAEFzF,OAAO0B,KAAKQ,EAAK,WAGnB,YAAA0D,kBAAA,SAAkBC,GAChB,IAAMV,EAAS,IAAoBW,iBAC7BT,EAAiB,CACrBC,MAAO,CAAC,CAAES,SAAUF,KAEhB3D,EACJvI,KAAK6L,gBACL7L,KAAK8L,eAAe,IAAWN,GAC/BxL,KAAK8L,eAAe,IAAeI,EAAQ3L,YAC3CP,KAAK8L,eAAe,IAAUpJ,KAAKC,UAAU+I,EAAKC,SACjDI,eAAeC,QAAQ,KAAYhM,KAAK8L,eAAe,KAAY,IACpE,GAEFzF,OAAO0B,KAAKQ,EAAK,WAIX,YAAAsD,cAAR,WACE,IAAMQ,EAAUN,eAAeC,QAAQ,KACjCM,EAAS,IAAIC,IAAIF,GAGvB,OAFgBC,EAAOE,OAASF,EAAOG,SAAWH,EAAOI,OAGvD1M,KAAK8L,eAAe,IAAW9L,KAAKJ,QAAQmE,OAAOxD,YAAYuH,QAAQ,IAAK,KAC5E9H,KAAK8L,eAAe,IAAU9L,KAAKJ,QAAQU,MAAMC,YACjDP,KAAK8L,eAAe,IAAU9L,KAAKJ,QAAQ+M,MAAMpM,YACjDP,KAAK8L,eAAe,IAAa9L,KAAKJ,QAAQgN,SAASrM,YACvDP,KAAK8L,eAAe,IAAmB9L,KAAKJ,QAAQiN,eAAetM,YACnEP,KAAK8L,eAAe,KACpB9L,KAAK8L,eAAe,KACpB9L,KAAK8L,eAAe,MAIhB,YAAAA,eAAR,SAAuBgB,EAAaxD,GAClC,IAAMyD,EAASD,EAAIhF,QAAQ,IAAQ,IAC7BkF,EAAsB,MAAT1D,EAAiBA,EAAQyC,eAAeC,QAAQc,GAGnE,MADkB,IAAIC,EAAM,IADXE,mBAAmBD,I,sCAvD3BE,GAAa,Y,yBAAbA,EAAa,QAAbA,EAAa,Y,EAD1B,I,gGCJA,aAGE,WAAoB/I,GAAA,KAAAA,Y,OAEpB,YAAAC,UAAA,SAAU+I,GACR,OAAOnN,KAAKmE,UAAUiJ,wBAAwBD,I,sCALrCE,GAAY,Y,wCAAZA,EAAY,U,EADzB,I,kICAO,SAASC,EAA4BC,GAC1C,MAAO,CACLC,OAAQ,CACNC,QAAS,IACTC,WAAYH,EACZI,KAAM,CAAC,MAETlF,gBAAiB,KACjBmF,SAAS,G,4BCDb,aACE,WAAoBjO,EAA0BqJ,EAAwB6E,GAAlD,KAAAlO,OAA0B,KAAAqJ,SAAwB,KAAA6E,SAUxE,OARE,YAAAC,eAAA,SAAeC,GAAf,WACE,OAAO/N,KAAKL,KAAKQ,IAAgB,GAAGH,KAAKgJ,OAAS+E,EAAO/N,KAAK6N,QAAUpN,KACtE,OAAAuN,EAAA,IAAW,SAAAC,GAET,OADAC,QAAQC,KAAK,wCAAwCJ,EAAI,UAAU,EAAK/E,OAAUiF,GAC3E,OAAAG,EAAA,GAAG,SAIlB,EAXA,I,wHCAA,aAEE,WAAoBzO,EAA0BC,EAA0BC,GAApD,KAAAF,OAA0B,KAAAC,UAA0B,KAAAC,a,OAExE,YAAAwO,SAAA,SAASxL,GACP,OAAO7C,KAAKL,KAAKQ,IAAmBH,KAAKH,WAAWI,MAAMN,KAAKG,OAAOwO,4BAAiC,CACrGlO,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYgO,KAAM1L,EAAK0L,KAAMC,KAAM3L,EAAK2L,KAAMC,MAAO5L,EAAK4L,MAAMlO,eAIxG,YAAAmO,SAAA,SAAS7L,GACP,OAAO7C,KAAKL,KAAK2C,KAAWtC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOwO,4BAAiC,GAAI,CACjGlO,OAAQ,CAAEmO,KAAM1L,EAAK0L,KAAMC,KAAM3L,EAAK2L,KAAMC,MAAO5L,EAAK4L,MAAMlO,WAAYoO,SAAU9L,EAAKc,GAAGpD,WAAY6C,IAAK,GAAGP,EAAKO,QAIzH,YAAAwL,QAAA,SAAQC,GACN,OAAO7O,KAAKL,KAAKQ,IAAmBH,KAAKH,WAAWI,MAAMN,KAAKG,OAAOwO,6BAAkC,CACtGlO,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYgO,KAAMM,EAAaN,KAAMC,KAAMK,EAAaL,SAIhG,YAAAM,SAAA,SAASD,EAA4BE,GACnC,OAAO/O,KAAKL,KAAK2C,KAActC,KAAKH,WAAWI,MAAMN,KAAKG,OAAOwO,6BAAkCS,EAAc,CAC/G3O,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYgO,KAAMM,EAAaN,KAAMC,KAAMK,EAAaL,SAIhG,YAAAQ,UAAA,SAAUH,GACR,OAAO7O,KAAKL,KAAKQ,IAAiBH,KAAKH,WAAWI,MAAMN,KAAKG,OAAOwO,2BAAgC,CAClGlO,OAAQ,CAAEE,MAAON,KAAKJ,QAAQU,MAAMC,WAAYgO,KAAMM,EAAaN,S,sCA7B5DU,GAAmB,gC,yBAAnBA,EAAmB,QAAnBA,EAAmB,Y,EADhC,I,oCCVA,sGAAO,IAAMC,EAAwB,kBACxBC,EAAsB,iBACtBC,EAAmB,e,iICA5B,Q,yBADF,mBACE,+BACF,Q,0BADgB,oC,qBAId,Q,yBADF,oBACE,+BACF,Q,0BADgB,oC,qBAKhB,Q,uDCTF,aAUE,aAHS,KAAAC,SAAU,EACnB,KAAAC,SAAU,E,OAIV,YAAAC,cAAA,WACEvP,KAAKsP,SAAWtP,KAAKsP,S,sCAPZE,I,uBAAAA,EAAkB,2O,ODR/B,gBAAsB,gCAAS,EAAAD,mBAC7B,2BAIA,4BAGF,OAEA,yC,MAVgD,oCAA0C,sBAC9E,gCAIC,kC,4cCHb,I,kCCFA,oEAAO,IAAME,EAAmB,0BACnBC,EAAiB,gF,oFCC9B,2B,OAGE,YAAA/E,QADA,SACQ3E,GACNA,EAAME,mB,sCAHGyJ,I,uBAAAA,EAA6B,8E,iCAA7B,mB,EADb,I,sNCaIC,EAAS,EAGPC,E,kCAEAC,EAAqB,YAAcD,G,iBAEnCE,E,kDACF,WAAYC,EAASC,EAAaC,EAAgBC,EAAWC,GAAc,kCACvE,gBACKJ,QAAUA,EACf,EAAKC,YAAcA,EACnB,EAAKC,eAAiBA,EACtB,EAAKC,UAAYA,EACjB,EAAKC,eAAiBA,EAEtB,EAAKC,aAAc,EACnB,EAAKC,OAAS,UACd,EAAKC,UAAW,EAKhB,EAAKC,SAAW,cAEhB,EAAKC,KAAO,SAEZ,EAAKC,IAAMd,IAnB4D,E,sDA0DvE,OAA2C,IAApC5P,KAAKwQ,SAASxP,QAAQ,W,gCAI7B,OAA4C,IAArChB,KAAKwQ,SAASxP,QAAQ,Y,kCAErB2P,GACR,IAAMC,EAAgBD,EAAO,QAC7B,GAAIC,EAAe,CACf,IAAMtH,EAAQsH,EAAcC,aAC5B7Q,KAAKqQ,YAAuB,MAAT/G,GAAiB,UAAGA,GAAQwH,OAAO9J,OAAS,EAC/DhH,KAAK+Q,wB,oCAIT,IAAMC,EAAehR,KAAKiR,cACtBD,IACIhR,KAAKoB,aACLpB,KAAKkQ,eAAegB,kBAAkBF,EAAchR,KAAKoB,aAIzDpB,KAAKmQ,UAAUgB,aACfnR,KAAKmQ,UAAUgB,YAAYH,M,wCASnC,OAAOhR,KAAKiR,gB,2CAUZ,OANKjR,KAAKiR,cAINjR,KAAKiR,cAAcG,YAAcpR,KAAKqR,oBAHtCrR,KAAKiR,cAAgBjR,KAAKsR,sBAKvBtR,KAAKiR,gB,4CAIZ,IAAMD,EAAehR,KAAKmQ,UAAUoB,cAAc,QAC5CC,EAAc,mBACdC,EAAe,oBAwBrB,OAtBAzR,KAAK0R,qBAAqBD,GAC1BT,EAAaW,aAAa,KAA1B,4BAAqD3R,KAAK0Q,MAC1DM,EAAanL,UAAUzC,IAAIqO,GAC3BT,EAAaI,YAAcpR,KAAKqR,oBACJ,mBAAxBrR,KAAKoQ,gBACLY,EAAanL,UAAUzC,IAAI,2BAE3BpD,KAAKoB,aACL4P,EAAaW,aAAa,aAAc3R,KAAKoB,aAEjDpB,KAAKiQ,YAAYvK,cAAckM,YAAYZ,GAEN,mBAA1Ba,uBAAgE,mBAAxB7R,KAAKoQ,eACpDpQ,KAAKgQ,QAAQlK,mBAAkB,WAC3B+L,uBAAsB,WAClBb,EAAanL,UAAUzC,IAAIoO,SAKnCR,EAAanL,UAAUzC,IAAIoO,GAExBR,I,iDAGgBc,EAAgBC,GAEvC,IAAMC,EAAUhS,KAAK+Q,qBACjBgB,GACA/R,KAAKkQ,eAAegB,kBAAkBc,EAASD,GAE/CD,GACA9R,KAAKkQ,eAAe+B,SAASD,EAASF,K,gCAIpCI,GACN,GAAIA,IAAiBlS,KAAKsQ,OAAQ,CAC9B,IAAMzK,EAAY7F,KAAKiQ,YAAYvK,cAAcG,UAC7C7F,KAAKsQ,QACLzK,EAAUU,OAAV,oBAA8BvG,KAAKsQ,SAEnC4B,GACArM,EAAUzC,IAAV,oBAA2B8O,O,2CAKlBC,GAIjB,IAHA,IAAM1M,EAAUzF,KAAKiQ,YAAYvK,cAC7B0M,EAAa3M,EAAQ4M,SAASrL,OAE3BoL,KAAc,CACjB,IAAME,EAAe7M,EAAQ4M,SAASD,GAClCE,EAAazM,UAAU0M,SAASJ,IAChC1M,EAAQ+M,YAAYF,M,0CAQ5B,IAAMN,EAAUhS,KAAKgS,QACrB,OAAkB,MAAXA,EAAkB,GAAlB,UAA0BA,K,4BAhJvB,OAAOhS,KAAKsQ,Q,aAChBhH,GACNtJ,KAAKyS,UAAUnJ,GACftJ,KAAKsQ,OAAShH,I,8BAGF,OAAOtJ,KAAKuQ,U,aAChBmC,GACR1S,KAAKuQ,SAAW,YAAsBmC,K,kCAGtB,OAAO1S,KAAK2S,c,aAChBb,GACZ,GAAIA,IAAmB9R,KAAK2S,aAAc,CACtC,IAAM3B,EAAehR,KAAKiR,cAC1BjR,KAAK4S,2BAA2Bd,EAAgB9R,KAAK2S,cACrD3S,KAAK2S,aAAeb,EAChBd,IACAc,EAAiBd,EAAaW,aAAa,aAAcG,GACrDd,EAAa6B,gBAAgB,kB,6BAK9B,OAAO7S,KAAK8S,S,aAChBJ,GACP1S,KAAK8S,QAAU,YAAsBJ,O,GAvDtB5C,G,OAgLvBC,EAASgD,UAAO,SAA0BC,GAAK,OAAO,IAAKA,GAAKjD,GAAU,KAAyB,KAAgB,KAAyB,KAAoB,KAAyB,KAAuB,KAAyB,KAAmB,KAAyB,IAAuB,KAC5SA,EAASkD,UAAO,KAAyB,CAAE5L,KAAM0I,EAAUmD,UAAW,CAAC,CAAC,GAAI,WAAY,KAAMC,UAAW,CAAC,EAAG,aAAcC,SAAU,GAAIC,aAAc,SAA+BC,EAAIC,GAAgB,EAALD,GAC7L,KAAmB,oBAAqBC,EAAIC,QAA5C,CAAqD,kBAAmBD,EAAIE,UAA5E,CAAuF,mBAAoBF,EAAIE,UAA/G,CAA0H,oBAAqBF,EAAIG,UAAnJ,CAA8J,kBAAmBH,EAAIG,UAArL,CAAgM,kBAAgC,UAAbH,EAAI9C,KAAvN,CAAyO,mBAAiC,WAAb8C,EAAI9C,KAAjQ,CAAoR,kBAAgC,UAAb8C,EAAI9C,KAA3S,CAA6T,mBAAoB8C,EAAII,SAAWJ,EAAIlD,YAApW,CAAiX,qBAAsBkD,EAAIK,WAC1YC,OAAQ,CAAED,SAAU,CAAC,mBAAoB,YAAapD,SAAU,CAAC,mBAAoB,YAAaC,KAAM,CAAC,eAAgB,QAASqD,MAAO,CAAC,gBAAiB,SAAUN,QAAS,CAAC,kBAAmB,WAAYpS,YAAa,CAAC,sBAAuB,eAAgBuS,OAAQ,CAAC,iBAAkB,UAAW3B,QAAS,CAAC,WAAY,YAAc+B,SAAU,CAAC,KAAmC,Q,sBAuE9XC,E,yCAENA,EAAeC,UAAO,KAAwB,CAAE5M,KAAM2M,IACtDA,EAAeE,UAAO,KAAwB,CAAE3G,QAAS,SAAgCyF,GAAK,OAAO,IAAKA,GAAKgB,IAAsBG,QAAS,CAAC,CACnI,IACA,KACD,O,oPCjQLC,EAAM,CAAC,kBACPC,EAAM,CAAC,aACPC,EAAM,CAAC,SACPC,EAAM,WAAc,MAAO,CAAEC,cAAe,MAC5CC,EAAM,CAAC,KACPC,EAAmC,IAAI,IAAe,mCAAoC,CAC5FC,WAAY,OACZpH,QAAS,iBAAO,CAAEqH,oBAAoB,MAWtCC,EAAe,EAEbC,EAAkC,CACpCrH,QAAS,IACTsH,YAAa,aAAW,kBAAMC,KAC9BC,OAAO,GAGLC,EACF,WAEAC,EAEAC,GAAO,oBACHpV,KAAKmV,OAASA,EACdnV,KAAKoV,QAAUA,GAKjBC,EACF,WAAYpF,GAAW,oBACnBjQ,KAAKiQ,YAAcA,GAGrBqF,EAA2B,YAAc,YAAW,YAAmB,YAAcD,IAAsB,W,iBAE3GL,E,kDACF,WAAYjQ,EAAYwQ,EAAeC,EAAoBC,EAAUC,EAAUtF,GAAc,kCACzF,cAAMrL,IACDwQ,cAAgBA,EACrB,EAAKC,mBAAqBA,EAC1B,EAAKE,SAAWA,EAChB,EAAKtF,eAAiBA,EACtB,EAAKuF,UAAY,SAACC,KAClB,EAAKC,WAAa,aAClB,EAAKC,UAAL,6BAAuCjB,GACvC,EAAKkB,WAAY,EACjB,EAAKC,UAAW,EAEhB,EAAKjW,KAAO,KAEZ,EAAK4D,GAAK,EAAKmS,UAEf,EAAKG,cAAgB,QAErB,EAAKC,UAAY,KAEjB,EAAKC,eAAiB,KAEtB,EAAKC,OAAS,IAAI,IAMlB,EAAKC,aAAe,IAAI,IACxB,EAAKZ,SAAWa,SAASb,IAAa,EA7BmD,E,iEA0C3E,WACdzV,KAAKuV,cACAgB,QAAQvW,KAAKiQ,aAAa,GAC1BlK,WAAU,SAAAyQ,GAKS,aAAhBA,GAA8C,YAAhBA,EAC9B,EAAKC,cAAc/Q,cAAcgR,QAE3BF,GAMNG,QAAQC,UAAUC,MAAK,kBAAM,EAAKhB,qB,oCAK1C7V,KAAKuV,cAAcuB,eAAe9W,KAAKiQ,e,qCAG5BjK,GAIXA,EAAME,kBACNlG,KAAKqW,aAAapP,OAIdjH,KAAK0V,SAASd,mBACd5U,KAAKyW,cAAc/Q,cAAc0P,QAAUpV,KAAKoV,SAIpDpV,KAAKoV,QAAUpV,KAAKyW,cAAc/Q,cAAc0P,QAGhDpV,KAAK+W,sB,oCAGK/Q,GAQVA,EAAME,oB,iCAGCoD,GACPtJ,KAAKoV,UAAY9L,I,uCAGJ0N,GACbhX,KAAK2V,UAAYqB,I,wCAGHA,GACdhX,KAAK6V,WAAamB,I,uCAGLC,GACbjX,KAAK4T,SAAWqD,EAChBjX,KAAKwV,mBAAmB0B,iB,4BAGtBC,GACFnX,KAAKuV,cAAc6B,SAASpX,KAAKyW,cAAe,WAAYU,K,+BAI5DnX,KAAKoV,SAAWpV,KAAKoV,QACrBpV,KAAK2V,UAAU3V,KAAKoV,W,yCAMpBpV,KAAK2V,UAAU3V,KAAKoV,SACpBpV,KAAKoW,OAAOnP,KAAK,IAAIiO,EAAqBlV,KAAMA,KAAKoV,Y,2CASrDpV,KAAKwV,mBAAmB6B,kB,+BAzGX,OAAOrX,KAAK+V,W,aAChBzM,GAAStJ,KAAK+V,UAAY,YAAsBzM,K,8BAE7C,OAAOtJ,KAAKgW,U,aAChB1M,GACRtJ,KAAKgW,SAAW,YAAsB1M,GACtCtJ,KAAKwV,mBAAmB0B,iB,8BAGZ,gBAAUlX,KAAK2D,IAAM3D,KAAK8V,UAA1B,c,GA1CSR,G,OA6I7BN,EAAejC,UAAO,SAAgCC,GAAK,OAAO,IAAKA,GAAKgC,GAAgB,KAAyB,KAAoB,KAAyB,KAAsB,KAAyB,KAA2B,KAAyB,YAAa,KAAyBN,GAAmC,KAAyB,IAAuB,KAC9XM,EAAesC,UAAO,KAAyB,CAAEjQ,KAAM2N,EAAgB9B,UAAW,CAAC,CAAC,qBAAsBqE,UAAW,SAA8BjE,EAAIC,GAK/I,IAAIiE,EAL2J,EAALlE,IAC1J,KAAmBc,GAAK,GACxB,KAAmBC,GAAK,GACxB,KAAmBC,GAAK,IACjB,EAALhB,IAEF,KAAsBkE,EAAK,UAA0BjE,EAAIkE,SAAWD,EAAGE,OACvE,KAAsBF,EAAK,UAA0BjE,EAAIoE,YAAcH,EAAGE,OAC1E,KAAsBF,EAAK,UAA0BjE,EAAIkD,cAAgBe,EAAGE,SAC3EvE,UAAW,CAAC,EAAG,oBAAqBC,SAAU,GAAIC,aAAc,SAAqCC,EAAIC,GAAgB,EAALD,IACrH,KAAsB,KAAMC,EAAI5P,IAChC,KAAmB,WAAY4P,EAAIK,SAAW,MAAQ,EAAtD,CAAyD,aAAc,KAAvE,CAA6E,kBAAmB,MAChG,KAAmB,cAAeL,EAAI6B,QAAtC,CAA+C,eAAgB7B,EAAIK,SAAnE,CAA6E,gCAAsD,UAArBL,EAAI0C,cAAlH,CAA6I,0BAAkD,mBAAvB1C,EAAInD,kBAC3KyD,OAAQ,CAAED,SAAU,WAAYgE,cAAe,gBAAiB9D,MAAO,QAAS2B,SAAU,WAAY1V,KAAM,OAAQ4D,GAAI,KAAMsS,cAAe,gBAAiBC,UAAW,CAAC,aAAc,aAAcC,eAAgB,CAAC,kBAAmB,kBAAmB0B,SAAU,WAAYzC,QAAS,WAAa0C,QAAS,CAAE1B,OAAQ,SAAUC,aAAc,gBAAkB0B,SAAU,CAAC,kBAAmBhE,SAAU,CAAC,KAA0B,CAACe,IAAmC,MAAoCkD,mBAAoBvD,EAAKwD,MAAO,GAAIC,KAAM,GAAIC,OAAQ,CAAC,CAAC,EAAG,0BAA2B,CAAC,QAAS,IAAK,CAAC,EAAG,wBAAyB,CAAC,YAAa,IAAK,CAAC,OAAQ,WAAY,OAAQ,SAAU,EAAG,yBAA0B,sBAAuB,EAAG,KAAM,WAAY,WAAY,UAAW,WAAY,SAAU,SAAU,CAAC,QAAS,IAAK,CAAC,EAAG,oCAAqC,CAAC,iBAAkB,IAAK,CAAC,EAAG,0BAA2B,CAAC,aAAc,GAAI,EAAG,0BAA2B,sBAAuB,EAAG,mBAAoB,oBAAqB,oBAAqB,kBAAmB,sBAAuB,CAAC,EAAG,qBAAsB,sCAAuC,CAAC,EAAG,2BAA4B,EAAG,qBAAsB,CAAC,eAAgB,IAAK,CAAC,EAAG,UAAW,SAAUC,SAAU,SAAiC9E,EAAIC,GAsB1yC,GAtB0zC,EAALD,IACnzC,OACA,KAAsB,EAAG,QAAS,EAAG,GACrC,KAAsB,EAAG,MAAO,EAAG,GACnC,KAAsB,EAAG,QAAS,EAAG,GACrC,KAAkB,UAAU,SAAyD+E,GAAU,OAAO9E,EAAI+E,eAAeD,KAAzH,CAAqI,SAAS,SAAwDA,GAAU,OAAO9E,EAAIgF,cAAcF,MACzO,OACA,KAAsB,EAAG,MAAO,EAAG,GACnC,KAAiB,EAAG,MAAO,GAC3B,KAAsB,EAAG,MAAO,GAChC,KAAiB,GAAI,MAAO,IAC5B,OACA,OACA,OACA,KAAsB,GAAI,OAAQ,GAAI,IACtC,KAAkB,qBAAqB,WAAwE,OAAO9E,EAAIiF,wBAC1H,KAAsB,GAAI,OAAQ,IAClC,KAAc,GAAI,QAClB,OACA,KAAoB,IACpB,OACA,QACO,EAALlF,EAAQ,CACV,IAAMmF,EAAM,KAAmB,GACzBC,EAAM,KAAmB,IAC/B,KAAmB,MAAOnF,EAAIoF,SAC9B,KAAiB,GACjB,KAAmB,uCAAwCD,EAAItH,cAAgBsH,EAAItH,YAAYN,QAC/F,KAAiB,GACjB,KAAkB,KAAMyC,EAAIoF,QAA5B,CAAqC,WAAYpF,EAAIsE,SAArD,CAA+D,WAAYtE,EAAIkC,SAA/E,CAAyF,UAAWlC,EAAI6B,QAAxG,CAAiH,WAAY7B,EAAIK,UACjI,KAAmB,OAAQL,EAAIxT,KAA/B,CAAqC,eAAgBwT,EAAI6B,QAAQ7U,WAAjE,CAA6E,aAAcgT,EAAI2C,UAA/F,CAA0G,kBAAmB3C,EAAI4C,gBACjI,KAAiB,GACjB,KAAkB,mBAAoBsC,EAAtC,CAA2C,oBAAqBlF,EAAIqE,eAAiBrE,EAAIK,SAAzF,CAAmG,qBAAqB,EAAxH,CAA8H,kBAAmB,GAAjJ,CAAqJ,qBAAsB,KAAuB,GAAIW,MACrMqE,WAAY,CAAC,IAAkB,KAA2BC,OAAQ,CAAC,w7FAAy7FC,cAAe,EAAGC,gBAAiB,I,sBAmIliGC,E,yCAENA,EAAuC/E,UAAO,KAAwB,CAAE5M,KAAM2R,IAC9EA,EAAuC9E,UAAO,KAAwB,CAAE3G,QAAS,SAAwDyF,GAAK,OAAO,IAAKA,GAAKgG,M,sBASzJC,E,yCAENA,EAAqBhF,UAAO,KAAwB,CAAE5M,KAAM4R,IAC5DA,EAAqB/E,UAAO,KAAwB,CAAE3G,QAAS,SAAsCyF,GAAK,OAAO,IAAKA,GAAKiG,IAA4B9E,QAAS,CAAC,CACrJ6E,EACA,IACA,IACA,KACDA,EAAwC,O,0FCnZnD,2B,OAGE,YAAAE,YADA,SACYlT,GACVA,EAAME,mB,sCAHGiT,I,uBAAAA,EAAiC,kF,qCAAjC,uB,EADb,I,kCCFA,iEA0EA,OAxEiB,EAAAC,gBAAf,SAA+BC,EAAmBC,GAEhD,IAAKD,EAAa,OAAOA,EAEzB,KAAOA,EAAUtY,UAAU,EAAG,KAAOuY,GACnCD,EAAYA,EAAUtY,UAAU,GAElC,OAAOsY,GAGM,EAAAE,cAAf,SAA6BF,EAAmBC,GAE9C,IAAKD,EAAa,OAAOA,EAEzB,KAAOA,EAAUtY,UAAUsY,EAAUrS,OAAS,EAAGqS,EAAUrS,UAAYsS,GACrED,EAAYA,EAAUtY,UAAU,EAAGsY,EAAUrS,OAAS,GAExD,OAAOqS,GAGM,EAAAG,aAAf,SAA4BH,GAE1B,IAAKA,EAAa,OAAOA,EAEzB,IAAMI,EAAW,IAMjB,OAAOJ,EACJvR,QANe,mBAMI2R,GACnB3R,QANe,wBAMI2R,GACnB3R,QANgB,QAMI2R,GACpB3R,QANuB,gDAMI2R,GAC3B3R,QANuB,UAMI2R,IAIzB,EAAAC,aAAP,SAAoBL,GAElB,OAAKA,GAGLA,EAAYrZ,KAAKoZ,gBAAgBC,EAAW,KAG5CA,EAAYrZ,KAAKuZ,cAAcF,EAAW,KAG1CA,EAAYrZ,KAAKoZ,gBAAgBC,EAAW,MAG5CA,EAAYrZ,KAAKuZ,cAAcF,EAAW,MAG1CA,EAAYrZ,KAAKwZ,aAAaH,IAfLA,GAqBpB,EAAAM,aAAP,SAAoBN,GAElB,OAAKA,EAMErZ,KAAK0Z,aAAaL,GAAWvR,QADlB,MADE,KAJKuR,GAQ7B,EA1EA","file":"common.f7137a0170116e634ba9.js","sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs/operators';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getFields(contentType: ContentType) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(item: Field, contentType: ContentType, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { App } from '../models/app.model';\r\n\r\n@Injectable()\r\nexport class AppsListService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  getAll() {\r\n    return this.http.get<App[]>(this.apiUrl(webApiAppRoot + 'list'), {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  create(name: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiAppRoot + 'app'), {}, {\r\n      params: { zoneId: this.context.zoneId.toString(), name }\r\n    });\r\n  }\r\n\r\n  delete(appId: number) {\r\n    return this.http.delete<null>(this.apiUrl(webApiAppRoot + 'app'), {\r\n      params: { zoneId: this.context.zoneId.toString(), appId: appId.toString() },\r\n    });\r\n  }\r\n\r\n  flushCache(appId: number) {\r\n    return this.http.get<null>(this.apiUrl(webApiAppRoot + 'flushcache'), {\r\n      params: { zoneId: this.context.zoneId.toString(), appId: appId.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeResourceUrl' })\r\nexport class SafeResourceUrlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(resourceUrl: string) {\r\n    return this.sanitizer.bypassSecurityTrustResourceUrl(resourceUrl);\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { Field } from '../../content-type-fields/models/field.model';\r\nimport { webApiFieldsAll } from '../../content-type-fields/services/content-types-fields.service';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.http.get<ContentItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.http.get<Field[]>(this.dnnContext.$2sxc.http.apiUrl(webApiFieldsAll), {\r\n      params: { appId: this.context.appId.toString(), staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() private markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() private allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent(this.element, 'dragover').subscribe((event: DragEvent) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent(this.element, 'dragleave').subscribe((event: DragEvent) => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiEntityRoot } from '../../../../../edit/shared/services';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\n@Injectable()\r\nexport class ContentExportService {\r\n  constructor(private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Download')\r\n      + '?appId=' + this.context.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiTypeRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'Json')\r\n      + '?appId=' + this.context.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { BooleanFilterModel } from './boolean-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-boolean-filter',\r\n  templateUrl: './boolean-filter.component.html',\r\n  styleUrls: ['./boolean-filter.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BooleanFilterComponent implements IFilterAngularComp {\r\n  filter = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    const value: boolean = this.params.valueGetter(params.node);\r\n    if (value == null) { return false; }\r\n    return value.toString() === this.filter;\r\n  }\r\n\r\n  getModel(): BooleanFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    return {\r\n      filterType: 'boolean',\r\n      filter: this.filter,\r\n    };\r\n  }\r\n\r\n  setModel(model: BooleanFilterModel) {\r\n    this.filter = model ? model.filter : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-radio-group [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">True</mat-radio-button>\r\n  <mat-radio-button value=\"false\">False</mat-radio-button>\r\n</mat-radio-group>\r\n","export class DataTypeConstants {\r\n  public static readonly String = 'String';\r\n  public static readonly Entity = 'Entity';\r\n  public static readonly Boolean = 'Boolean';\r\n  public static readonly Number = 'Number';\r\n  public static readonly Custom = 'Custom';\r\n  public static readonly DateTime = 'DateTime';\r\n  public static readonly Hyperlink = 'Hyperlink';\r\n  public static readonly Empty = 'Empty';\r\n}\r\n","import { DataTypeConstants } from './constants/data-type.constants';\r\n\r\nexport function calculateTypeIcon(typeName: string): string {\r\n  switch (typeName) {\r\n    case DataTypeConstants.String:\r\n      return 'text_fields';\r\n    case DataTypeConstants.Entity:\r\n      return 'share';\r\n    case DataTypeConstants.Boolean:\r\n      return 'toggle_on';\r\n    case DataTypeConstants.Number:\r\n      return 'dialpad';\r\n    case DataTypeConstants.Custom:\r\n      return 'extension';\r\n    case DataTypeConstants.DateTime:\r\n      return 'today';\r\n    case DataTypeConstants.Hyperlink:\r\n      return 'link';\r\n    case DataTypeConstants.Empty:\r\n      return 'crop_free';\r\n    default:\r\n      return 'device_unknown';\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { DialogTypeConstants } from '../constants/dialog-types.constants';\r\n// tslint:disable-next-line:max-line-length\r\nimport { keyApi, keyAppId, keyContentBlockId, keyDebug, keyDialog, keyItems, keyModuleId, keyPartOfPage, keyPipelineId, keyRequestToken, keyTabId, keyUrl, keyZoneId, prefix } from '../constants/session.constants';\r\nimport { EditForm } from '../models/edit-form.model';\r\nimport { Context } from './context';\r\n\r\n@Injectable()\r\nexport class DialogService {\r\n  constructor(private context: Context) { }\r\n\r\n  openCodeFile(path: string, isShared: boolean = false) {\r\n    const dialog = DialogTypeConstants.Develop;\r\n    const form: EditForm = {\r\n      items: [{ Path: path }]\r\n    };\r\n    const url = this.sharedUrlRoot() +\r\n      this.buildHashParam(keyDialog, dialog) +\r\n      this.buildHashParam('isshared', isShared.toString()) +\r\n      this.buildHashParam(keyItems, JSON.stringify(form.items)) +\r\n      (sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : '') +\r\n      '';\r\n\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  openQueryDesigner(queryId: number) {\r\n    const dialog = DialogTypeConstants.PipelineDesigner;\r\n    const form: EditForm = {\r\n      items: [{ EntityId: queryId }],\r\n    };\r\n    const url =\r\n      this.sharedUrlRoot() +\r\n      this.buildHashParam(keyDialog, dialog) +\r\n      this.buildHashParam(keyPipelineId, queryId.toString()) +\r\n      this.buildHashParam(keyItems, JSON.stringify(form.items)) +\r\n      (sessionStorage.getItem(keyDebug) ? this.buildHashParam(keyDebug) : '') +\r\n      '';\r\n\r\n    window.open(url, '_blank');\r\n  }\r\n\r\n  /** A lot of the link is identical when opening the admin-dialogs in a new window */\r\n  private sharedUrlRoot() {\r\n    const oldHref = sessionStorage.getItem(keyUrl);\r\n    const oldUrl = new URL(oldHref);\r\n    const newHref = oldUrl.origin + oldUrl.pathname + oldUrl.search;\r\n\r\n    return newHref +\r\n      this.buildHashParam(keyZoneId, this.context.zoneId.toString()).replace('&', '#') +\r\n      this.buildHashParam(keyAppId, this.context.appId.toString()) +\r\n      this.buildHashParam(keyTabId, this.context.tabId.toString()) +\r\n      this.buildHashParam(keyModuleId, this.context.moduleId.toString()) +\r\n      this.buildHashParam(keyContentBlockId, this.context.contentBlockId.toString()) +\r\n      this.buildHashParam(keyPartOfPage) +\r\n      this.buildHashParam(keyRequestToken) +\r\n      this.buildHashParam(keyApi);\r\n  }\r\n\r\n  /** Encodes param if necessary */\r\n  private buildHashParam(key: string, value?: string) {\r\n    const rawKey = key.replace(prefix, '');\r\n    const valueTemp = (value != null) ? value : sessionStorage.getItem(key);\r\n    const rawValue = encodeURIComponent(valueTemp);\r\n    const hashParam = `&${rawKey}=${rawValue}`;\r\n    return hashParam;\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader) {\r\n  return {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { Dictionary } from '../models/dictionary.model';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Dictionary> {\r\n    return this.http.get<Dictionary>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ReplaceConfig } from '../../replace-content/models/replace-config.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentGroup, ContentGroupAdd } from '../models/content-group.model';\r\nimport { GroupHeader } from '../models/group-header.model';\r\n\r\nconst webApiContentGroup = 'cms/contentgroup/';\r\n\r\n@Injectable()\r\nexport class ContentGroupService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getItems(item: ContentGroup) {\r\n    return this.http.get<ReplaceConfig>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {\r\n      params: { appId: this.context.appId.toString(), guid: item.guid, part: item.part, index: item.index.toString() }\r\n    });\r\n  }\r\n\r\n  saveItem(item: ContentGroupAdd) {\r\n    return this.http.post<null>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'replace'), {}, {\r\n      params: { guid: item.guid, part: item.part, index: item.index.toString(), entityId: item.id.toString(), add: `${item.add}` }\r\n    });\r\n  }\r\n\r\n  getList(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader[]>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  saveList(contentGroup: ContentGroup, resortedList: GroupHeader[]) {\r\n    return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'itemlist'), resortedList, {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid, part: contentGroup.part }\r\n    });\r\n  }\r\n\r\n  getHeader(contentGroup: ContentGroup) {\r\n    return this.http.get<GroupHeader>(this.dnnContext.$2sxc.http.apiUrl(webApiContentGroup + 'header'), {\r\n      params: { appId: this.context.appId.toString(), guid: contentGroup.guid }\r\n    });\r\n  }\r\n}\r\n","export const defaultControllerName = 'MyController.cs';\r\nexport const defaultTemplateName = '_MyFile.cshtml';\r\nexport const defaultTokenName = 'MyFile.html';\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9-]+$/;\r\nexport const fieldNameError = 'Standard letters, numbers and hyphens are allowed. Must start with a letter.';\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, NgZone, ElementRef, Renderer2, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { AriaDescriber, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nclass MatBadgeBase {\n}\nconst _MatBadgeMixinBase = mixinDisabled(MatBadgeBase);\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeMixinBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        /** Whether the badge has any content. */\n        this._hasContent = false;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() { return this._color; }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() { return this._overlap; }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() { return this._description; }\n    set description(newDescription) {\n        if (newDescription !== this._description) {\n            const badgeElement = this._badgeElement;\n            this._updateHostAriaDescription(newDescription, this._description);\n            this._description = newDescription;\n            if (badgeElement) {\n                newDescription ? badgeElement.setAttribute('aria-label', newDescription) :\n                    badgeElement.removeAttribute('aria-label');\n            }\n        }\n    }\n    /** Whether the badge is hidden. */\n    get hidden() { return this._hidden; }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    ngOnChanges(changes) {\n        const contentChange = changes['content'];\n        if (contentChange) {\n            const value = contentChange.currentValue;\n            this._hasContent = value != null && `${value}`.trim().length > 0;\n            this._updateTextContent();\n        }\n    }\n    ngOnDestroy() {\n        const badgeElement = this._badgeElement;\n        if (badgeElement) {\n            if (this.description) {\n                this._ariaDescriber.removeDescription(badgeElement, this.description);\n            }\n            // When creating a badge through the Renderer, Angular will keep it in an index.\n            // We have to destroy it ourselves, otherwise it'll be retained in memory.\n            if (this._renderer.destroyNode) {\n                this._renderer.destroyNode(badgeElement);\n            }\n        }\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered.\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    /** Injects a span element into the DOM with the content. */\n    _updateTextContent() {\n        if (!this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        else {\n            this._badgeElement.textContent = this._stringifyContent();\n        }\n        return this._badgeElement;\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        const contentClass = 'mat-badge-content';\n        // Clear any existing badges which may have persisted from a server-side render.\n        this._clearExistingBadges(contentClass);\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        badgeElement.classList.add(contentClass);\n        badgeElement.textContent = this._stringifyContent();\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        if (this.description) {\n            badgeElement.setAttribute('aria-label', this.description);\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Sets the aria-label property on the element */\n    _updateHostAriaDescription(newDescription, oldDescription) {\n        // ensure content available before setting label\n        const content = this._updateTextContent();\n        if (oldDescription) {\n            this._ariaDescriber.removeDescription(content, oldDescription);\n        }\n        if (newDescription) {\n            this._ariaDescriber.describe(content, newDescription);\n        }\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        if (colorPalette !== this._color) {\n            const classList = this._elementRef.nativeElement.classList;\n            if (this._color) {\n                classList.remove(`mat-badge-${this._color}`);\n            }\n            if (colorPalette) {\n                classList.add(`mat-badge-${colorPalette}`);\n            }\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges(cssClass) {\n        const element = this._elementRef.nativeElement;\n        let childCount = element.children.length;\n        // Use a reverse while, because we'll be removing elements from the list as we're iterating.\n        while (childCount--) {\n            const currentChild = element.children[childCount];\n            if (currentChild.classList.contains(cssClass)) {\n                element.removeChild(currentChild);\n            }\n        }\n    }\n    /** Gets the string representation of the badge content. */\n    _stringifyContent() {\n        // Convert null and undefined to an empty string which is consistent\n        // with how Angular handles them in inside template interpolations.\n        const content = this.content;\n        return content == null ? '' : `${content}`;\n    }\n}\nMatBadge.ɵfac = function MatBadge_Factory(t) { return new (t || MatBadge)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.AriaDescriber), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatBadge.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatBadge, selectors: [[\"\", \"matBadge\", \"\"]], hostAttrs: [1, \"mat-badge\"], hostVars: 20, hostBindings: function MatBadge_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-badge-overlap\", ctx.overlap)(\"mat-badge-above\", ctx.isAbove())(\"mat-badge-below\", !ctx.isAbove())(\"mat-badge-before\", !ctx.isAfter())(\"mat-badge-after\", ctx.isAfter())(\"mat-badge-small\", ctx.size === \"small\")(\"mat-badge-medium\", ctx.size === \"medium\")(\"mat-badge-large\", ctx.size === \"large\")(\"mat-badge-hidden\", ctx.hidden || !ctx._hasContent)(\"mat-badge-disabled\", ctx.disabled);\n    } }, inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], position: [\"matBadgePosition\", \"position\"], size: [\"matBadgeSize\", \"size\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], description: [\"matBadgeDescription\", \"description\"], hidden: [\"matBadgeHidden\", \"hidden\"], content: [\"matBadge\", \"content\"] }, features: [ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatBadge.ctorParameters = () => [\n    { type: NgZone },\n    { type: ElementRef },\n    { type: AriaDescriber },\n    { type: Renderer2 },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatBadge.propDecorators = {\n    color: [{ type: Input, args: ['matBadgeColor',] }],\n    overlap: [{ type: Input, args: ['matBadgeOverlap',] }],\n    position: [{ type: Input, args: ['matBadgePosition',] }],\n    content: [{ type: Input, args: ['matBadge',] }],\n    description: [{ type: Input, args: ['matBadgeDescription',] }],\n    size: [{ type: Input, args: ['matBadgeSize',] }],\n    hidden: [{ type: Input, args: ['matBadgeHidden',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadge, [{\n        type: Directive,\n        args: [{\n                selector: '[matBadge]',\n                inputs: ['disabled: matBadgeDisabled'],\n                host: {\n                    'class': 'mat-badge',\n                    '[class.mat-badge-overlap]': 'overlap',\n                    '[class.mat-badge-above]': 'isAbove()',\n                    '[class.mat-badge-below]': '!isAbove()',\n                    '[class.mat-badge-before]': '!isAfter()',\n                    '[class.mat-badge-after]': 'isAfter()',\n                    '[class.mat-badge-small]': 'size === \"small\"',\n                    '[class.mat-badge-medium]': 'size === \"medium\"',\n                    '[class.mat-badge-large]': 'size === \"large\"',\n                    '[class.mat-badge-hidden]': 'hidden || !_hasContent',\n                    '[class.mat-badge-disabled]': 'disabled'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.NgZone }, { type: ɵngcc0.ElementRef }, { type: ɵngcc1.AriaDescriber }, { type: ɵngcc0.Renderer2 }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { position: [{\n            type: Input,\n            args: ['matBadgePosition']\n        }], size: [{\n            type: Input,\n            args: ['matBadgeSize']\n        }], color: [{\n            type: Input,\n            args: ['matBadgeColor']\n        }], overlap: [{\n            type: Input,\n            args: ['matBadgeOverlap']\n        }], description: [{\n            type: Input,\n            args: ['matBadgeDescription']\n        }], hidden: [{\n            type: Input,\n            args: ['matBadgeHidden']\n        }], content: [{\n            type: Input,\n            args: ['matBadge']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatBadgeModule });\nMatBadgeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatBadgeModule_Factory(t) { return new (t || MatBadgeModule)(); }, imports: [[\n            A11yModule,\n            MatCommonModule\n        ], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatBadgeModule, { declarations: function () { return [MatBadge]; }, imports: function () { return [A11yModule,\n        MatCommonModule]; }, exports: function () { return [MatBadge, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatBadgeModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    A11yModule,\n                    MatCommonModule\n                ],\n                exports: [MatBadge, MatCommonModule],\n                declarations: [MatBadge]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n\n//# sourceMappingURL=badge.js.map","import { ObserversModule } from '@angular/cdk/observers';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Attribute, Inject, Optional, ViewChild, Input, Output, Directive, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-slide-toggle`. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/material/core';\nimport * as ɵngcc3 from '@angular/cdk/observers';\n\nconst _c0 = [\"thumbContainer\"];\nconst _c1 = [\"toggleBar\"];\nconst _c2 = [\"input\"];\nconst _c3 = function () { return { enterDuration: 150 }; };\nconst _c4 = [\"*\"];\nconst MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS = new InjectionToken('mat-slide-toggle-default-options', {\n    providedIn: 'root',\n    factory: () => ({ disableToggleValue: false })\n});\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Increasing integer for generating unique ids for slide-toggle components.\nlet nextUniqueId = 0;\n/** @docs-private */\nconst MAT_SLIDE_TOGGLE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlideToggle),\n    multi: true\n};\n/** Change event object emitted by a MatSlideToggle. */\nclass MatSlideToggleChange {\n    constructor(\n    /** The source MatSlideToggle of the event. */\n    source, \n    /** The new `checked` value of the MatSlideToggle. */\n    checked) {\n        this.source = source;\n        this.checked = checked;\n    }\n}\n// Boilerplate for applying mixins to MatSlideToggle.\n/** @docs-private */\nclass MatSlideToggleBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSlideToggleMixinBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatSlideToggleBase)), 'accent'));\n/** Represents a slidable \"switch\" toggle that can be moved between on and off. */\nclass MatSlideToggle extends _MatSlideToggleMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, tabIndex, defaults, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this.defaults = defaults;\n        this._animationMode = _animationMode;\n        this._onChange = (_) => { };\n        this._onTouched = () => { };\n        this._uniqueId = `mat-slide-toggle-${++nextUniqueId}`;\n        this._required = false;\n        this._checked = false;\n        /** Name value will be applied to the input element if present. */\n        this.name = null;\n        /** A unique id for the slide-toggle input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the slide-toggle. Defaults to 'after'. */\n        this.labelPosition = 'after';\n        /** Used to set the aria-label attribute on the underlying input element. */\n        this.ariaLabel = null;\n        /** Used to set the aria-labelledby attribute on the underlying input element. */\n        this.ariaLabelledby = null;\n        /** An event will be dispatched each time the slide-toggle changes its value. */\n        this.change = new EventEmitter();\n        /**\n         * An event will be dispatched each time the slide-toggle input is toggled.\n         * This event is always emitted when the user toggles the slide toggle, but this does not mean\n         * the slide toggle's value has changed.\n         */\n        this.toggleChange = new EventEmitter();\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Whether the slide-toggle is required. */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Whether the slide-toggle element is checked or not. */\n    get checked() { return this._checked; }\n    set checked(value) {\n        this._checked = coerceBooleanProperty(value);\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() { return `${this.id || this._uniqueId}-input`; }\n    ngAfterContentInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe(focusOrigin => {\n            // Only forward focus manually when it was received programmatically or through the\n            // keyboard. We should not do this for mouse/touch focus for two reasons:\n            // 1. It can prevent clicks from landing in Chrome (see #18269).\n            // 2. They're already handled by the wrapping `label` element.\n            if (focusOrigin === 'keyboard' || focusOrigin === 'program') {\n                this._inputElement.nativeElement.focus();\n            }\n            else if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state\n                // change (such as a form control's 'ng-touched') will cause a changed-after-checked\n                // error. See https://github.com/angular/angular/issues/17793. To work around this,\n                // we defer telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => this._onTouched());\n            }\n        });\n    }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /** Method being called whenever the underlying input emits a change event. */\n    _onChangeEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the component's `change` output.\n        event.stopPropagation();\n        this.toggleChange.emit();\n        // When the slide toggle's config disables toggle change event by setting\n        // `disableToggleValue: true`, the slide toggle's value does not change, and the\n        // checked state of the underlying input needs to be changed back.\n        if (this.defaults.disableToggleValue) {\n            this._inputElement.nativeElement.checked = this.checked;\n            return;\n        }\n        // Sync the value from the underlying input element with the component instance.\n        this.checked = this._inputElement.nativeElement.checked;\n        // Emit our custom change event only if the underlying input emitted one. This ensures that\n        // there is no change event, when the checked state changes programmatically.\n        this._emitChangeEvent();\n    }\n    /** Method being called whenever the slide-toggle has been clicked. */\n    _onInputClick(event) {\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `slide-toggle` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this._onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    /** Implemented as a part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the slide-toggle. */\n    focus(options) {\n        this._focusMonitor.focusVia(this._inputElement, 'keyboard', options);\n    }\n    /** Toggles the checked state of the slide-toggle. */\n    toggle() {\n        this.checked = !this.checked;\n        this._onChange(this.checked);\n    }\n    /**\n     * Emits a change event on the `change` output. Also notifies the FormControl about the change.\n     */\n    _emitChangeEvent() {\n        this._onChange(this.checked);\n        this.change.emit(new MatSlideToggleChange(this, this.checked));\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the\n        // slide-toggle component will be only marked for check, but no actual change detection runs\n        // automatically. Instead of going back into the zone in order to trigger a change detection\n        // which causes *all* components to be checked (if explicitly marked or not using OnPush),\n        // we only trigger an explicit change detection for the slide-toggle view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n}\nMatSlideToggle.ɵfac = function MatSlideToggle_Factory(t) { return new (t || MatSlideToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlideToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlideToggle, selectors: [[\"mat-slide-toggle\"]], viewQuery: function MatSlideToggle_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n        ɵngcc0.ɵɵviewQuery(_c1, true);\n        ɵngcc0.ɵɵviewQuery(_c2, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._thumbBarEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._inputElement = _t.first);\n    } }, hostAttrs: [1, \"mat-slide-toggle\"], hostVars: 12, hostBindings: function MatSlideToggle_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.disabled ? null : -1)(\"aria-label\", null)(\"aria-labelledby\", null);\n        ɵngcc0.ɵɵclassProp(\"mat-checked\", ctx.checked)(\"mat-disabled\", ctx.disabled)(\"mat-slide-toggle-label-before\", ctx.labelPosition == \"before\")(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", name: \"name\", id: \"id\", labelPosition: \"labelPosition\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], required: \"required\", checked: \"checked\" }, outputs: { change: \"change\", toggleChange: \"toggleChange\" }, exportAs: [\"matSlideToggle\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c4, decls: 16, vars: 18, consts: [[1, \"mat-slide-toggle-label\"], [\"label\", \"\"], [1, \"mat-slide-toggle-bar\"], [\"toggleBar\", \"\"], [\"type\", \"checkbox\", \"role\", \"switch\", 1, \"mat-slide-toggle-input\", \"cdk-visually-hidden\", 3, \"id\", \"required\", \"tabIndex\", \"checked\", \"disabled\", \"change\", \"click\"], [\"input\", \"\"], [1, \"mat-slide-toggle-thumb-container\"], [\"thumbContainer\", \"\"], [1, \"mat-slide-toggle-thumb\"], [\"mat-ripple\", \"\", 1, \"mat-slide-toggle-ripple\", \"mat-focus-indicator\", 3, \"matRippleTrigger\", \"matRippleDisabled\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\"], [1, \"mat-ripple-element\", \"mat-slide-toggle-persistent-ripple\"], [1, \"mat-slide-toggle-content\", 3, \"cdkObserveContent\"], [\"labelContent\", \"\"], [2, \"display\", \"none\"]], template: function MatSlideToggle_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"label\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"change\", function MatSlideToggle_Template_input_change_4_listener($event) { return ctx._onChangeEvent($event); })(\"click\", function MatSlideToggle_Template_input_click_4_listener($event) { return ctx._onInputClick($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 6, 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 9);\n        ɵngcc0.ɵɵelement(10, \"div\", 10);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11, 12);\n        ɵngcc0.ɵɵlistener(\"cdkObserveContent\", function MatSlideToggle_Template_span_cdkObserveContent_11_listener() { return ctx._onLabelTextChange(); });\n        ɵngcc0.ɵɵelementStart(13, \"span\", 13);\n        ɵngcc0.ɵɵtext(14, \"\\u00A0\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(15);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        const _r0 = ɵngcc0.ɵɵreference(1);\n        const _r4 = ɵngcc0.ɵɵreference(12);\n        ɵngcc0.ɵɵattribute(\"for\", ctx.inputId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"mat-slide-toggle-bar-no-side-margin\", !_r4.textContent || !_r4.textContent.trim());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId)(\"required\", ctx.required)(\"tabIndex\", ctx.tabIndex)(\"checked\", ctx.checked)(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"name\", ctx.name)(\"aria-checked\", ctx.checked.toString())(\"aria-label\", ctx.ariaLabel)(\"aria-labelledby\", ctx.ariaLabelledby);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"matRippleTrigger\", _r0)(\"matRippleDisabled\", ctx.disableRipple || ctx.disabled)(\"matRippleCentered\", true)(\"matRippleRadius\", 20)(\"matRippleAnimation\", ɵngcc0.ɵɵpureFunction0(17, _c3));\n    } }, directives: [ɵngcc2.MatRipple, ɵngcc3.CdkObserveContent], styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlideToggle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlideToggle.propDecorators = {\n    _thumbEl: [{ type: ViewChild, args: ['thumbContainer',] }],\n    _thumbBarEl: [{ type: ViewChild, args: ['toggleBar',] }],\n    name: [{ type: Input }],\n    id: [{ type: Input }],\n    labelPosition: [{ type: Input }],\n    ariaLabel: [{ type: Input, args: ['aria-label',] }],\n    ariaLabelledby: [{ type: Input, args: ['aria-labelledby',] }],\n    required: [{ type: Input }],\n    checked: [{ type: Input }],\n    change: [{ type: Output }],\n    toggleChange: [{ type: Output }],\n    _inputElement: [{ type: ViewChild, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggle, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slide-toggle',\n                exportAs: 'matSlideToggle',\n                host: {\n                    'class': 'mat-slide-toggle',\n                    '[id]': 'id',\n                    // Needs to be `-1` so it can still receive programmatic focus.\n                    '[attr.tabindex]': 'disabled ? null : -1',\n                    '[attr.aria-label]': 'null',\n                    '[attr.aria-labelledby]': 'null',\n                    '[class.mat-checked]': 'checked',\n                    '[class.mat-disabled]': 'disabled',\n                    '[class.mat-slide-toggle-label-before]': 'labelPosition == \"before\"',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-slide-toggle-label\\\" #label>\\n  <div #toggleBar class=\\\"mat-slide-toggle-bar\\\"\\n       [class.mat-slide-toggle-bar-no-side-margin]=\\\"!labelContent.textContent || !labelContent.textContent.trim()\\\">\\n\\n    <input #input class=\\\"mat-slide-toggle-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           role=\\\"switch\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [checked]=\\\"checked\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [attr.aria-checked]=\\\"checked.toString()\\\"\\n           [attr.aria-label]=\\\"ariaLabel\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           (change)=\\\"_onChangeEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n\\n    <div class=\\\"mat-slide-toggle-thumb-container\\\" #thumbContainer>\\n      <div class=\\\"mat-slide-toggle-thumb\\\"></div>\\n      <div class=\\\"mat-slide-toggle-ripple mat-focus-indicator\\\" mat-ripple\\n           [matRippleTrigger]=\\\"label\\\"\\n           [matRippleDisabled]=\\\"disableRipple || disabled\\\"\\n           [matRippleCentered]=\\\"true\\\"\\n           [matRippleRadius]=\\\"20\\\"\\n           [matRippleAnimation]=\\\"{enterDuration: 150}\\\">\\n\\n        <div class=\\\"mat-ripple-element mat-slide-toggle-persistent-ripple\\\"></div>\\n      </div>\\n    </div>\\n\\n  </div>\\n\\n  <span class=\\\"mat-slide-toggle-content\\\" #labelContent (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\",\n                providers: [MAT_SLIDE_TOGGLE_VALUE_ACCESSOR],\n                inputs: ['disabled', 'disableRipple', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slide-toggle{display:inline-block;height:24px;max-width:100%;line-height:24px;white-space:nowrap;outline:none;-webkit-tap-highlight-color:transparent}.mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(16px, 0, 0)}[dir=rtl] .mat-slide-toggle.mat-checked .mat-slide-toggle-thumb-container{transform:translate3d(-16px, 0, 0)}.mat-slide-toggle.mat-disabled{opacity:.38}.mat-slide-toggle.mat-disabled .mat-slide-toggle-label,.mat-slide-toggle.mat-disabled .mat-slide-toggle-thumb-container{cursor:default}.mat-slide-toggle-label{display:flex;flex:1;flex-direction:row;align-items:center;height:inherit;cursor:pointer}.mat-slide-toggle-content{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.mat-slide-toggle-label-before .mat-slide-toggle-label{order:1}.mat-slide-toggle-label-before .mat-slide-toggle-bar{order:2}[dir=rtl] .mat-slide-toggle-label-before .mat-slide-toggle-bar,.mat-slide-toggle-bar{margin-right:8px;margin-left:0}[dir=rtl] .mat-slide-toggle-bar,.mat-slide-toggle-label-before .mat-slide-toggle-bar{margin-left:8px;margin-right:0}.mat-slide-toggle-bar-no-side-margin{margin-left:0;margin-right:0}.mat-slide-toggle-thumb-container{position:absolute;z-index:1;width:20px;height:20px;top:-3px;left:0;transform:translate3d(0, 0, 0);transition:all 80ms linear;transition-property:transform}._mat-animation-noopable .mat-slide-toggle-thumb-container{transition:none}[dir=rtl] .mat-slide-toggle-thumb-container{left:auto;right:0}.mat-slide-toggle-thumb{height:20px;width:20px;border-radius:50%}.mat-slide-toggle-bar{position:relative;width:36px;height:14px;flex-shrink:0;border-radius:8px}.mat-slide-toggle-input{bottom:0;left:10px}[dir=rtl] .mat-slide-toggle-input{left:auto;right:10px}.mat-slide-toggle-bar,.mat-slide-toggle-thumb{transition:all 80ms linear;transition-property:background-color;transition-delay:50ms}._mat-animation-noopable .mat-slide-toggle-bar,._mat-animation-noopable .mat-slide-toggle-thumb{transition:none}.mat-slide-toggle .mat-slide-toggle-ripple{position:absolute;top:calc(50% - 20px);left:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.mat-slide-toggle .mat-slide-toggle-ripple .mat-ripple-element:not(.mat-slide-toggle-persistent-ripple){opacity:.12}.mat-slide-toggle-persistent-ripple{width:100%;height:100%;transform:none}.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:.04}.mat-slide-toggle:not(.mat-disabled).cdk-keyboard-focused .mat-slide-toggle-persistent-ripple{opacity:.12}.mat-slide-toggle-persistent-ripple,.mat-slide-toggle.mat-disabled .mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{opacity:0}@media(hover: none){.mat-slide-toggle-bar:hover .mat-slide-toggle-persistent-ripple{display:none}}.cdk-high-contrast-active .mat-slide-toggle-thumb,.cdk-high-contrast-active .mat-slide-toggle-bar{border:1px solid}.cdk-high-contrast-active .mat-slide-toggle.cdk-keyboard-focused .mat-slide-toggle-bar{outline:2px dotted;outline-offset:5px}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { name: [{\n            type: Input\n        }], id: [{\n            type: Input\n        }], labelPosition: [{\n            type: Input\n        }], ariaLabel: [{\n            type: Input,\n            args: ['aria-label']\n        }], ariaLabelledby: [{\n            type: Input,\n            args: ['aria-labelledby']\n        }], change: [{\n            type: Output\n        }], toggleChange: [{\n            type: Output\n        }], required: [{\n            type: Input\n        }], checked: [{\n            type: Input\n        }], _thumbEl: [{\n            type: ViewChild,\n            args: ['thumbContainer']\n        }], _thumbBarEl: [{\n            type: ViewChild,\n            args: ['toggleBar']\n        }], _inputElement: [{\n            type: ViewChild,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatSlideToggleRequiredValidator),\n    multi: true\n};\n/**\n * Validator for Material slide-toggle components with the required attribute in a\n * template-driven form. The default validator for required form controls asserts\n * that the control value is not undefined but that is not appropriate for a slide-toggle\n * where the value is always defined.\n *\n * Required slide-toggle form controls are valid when checked.\n */\nclass MatSlideToggleRequiredValidator extends CheckboxRequiredValidator {\n}\nMatSlideToggleRequiredValidator.ɵfac = function MatSlideToggleRequiredValidator_Factory(t) { return ɵMatSlideToggleRequiredValidator_BaseFactory(t || MatSlideToggleRequiredValidator); };\nMatSlideToggleRequiredValidator.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatSlideToggleRequiredValidator, selectors: [[\"mat-slide-toggle\", \"required\", \"\", \"formControlName\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"formControl\", \"\"], [\"mat-slide-toggle\", \"required\", \"\", \"ngModel\", \"\"]], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nconst ɵMatSlideToggleRequiredValidator_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatSlideToggleRequiredValidator);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleRequiredValidator, [{\n        type: Directive,\n        args: [{\n                selector: `mat-slide-toggle[required][formControlName],\n             mat-slide-toggle[required][formControl], mat-slide-toggle[required][ngModel]`,\n                providers: [MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based slide-toggle implementations. */\nclass _MatSlideToggleRequiredValidatorModule {\n}\n_MatSlideToggleRequiredValidatorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: _MatSlideToggleRequiredValidatorModule });\n_MatSlideToggleRequiredValidatorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function _MatSlideToggleRequiredValidatorModule_Factory(t) { return new (t || _MatSlideToggleRequiredValidatorModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(_MatSlideToggleRequiredValidatorModule, { declarations: [MatSlideToggleRequiredValidator], exports: [MatSlideToggleRequiredValidator] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(_MatSlideToggleRequiredValidatorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [MatSlideToggleRequiredValidator],\n                declarations: [MatSlideToggleRequiredValidator]\n            }]\n    }], null, null); })();\nclass MatSlideToggleModule {\n}\nMatSlideToggleModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSlideToggleModule });\nMatSlideToggleModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatSlideToggleModule_Factory(t) { return new (t || MatSlideToggleModule)(); }, imports: [[\n            _MatSlideToggleRequiredValidatorModule,\n            MatRippleModule,\n            MatCommonModule,\n            ObserversModule,\n        ], _MatSlideToggleRequiredValidatorModule, MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSlideToggleModule, { declarations: function () { return [MatSlideToggle]; }, imports: function () { return [_MatSlideToggleRequiredValidatorModule, MatRippleModule,\n        MatCommonModule,\n        ObserversModule]; }, exports: function () { return [_MatSlideToggleRequiredValidatorModule, MatSlideToggle, MatCommonModule]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatSlideToggleModule, [{\n        type: NgModule,\n        args: [{\n                imports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatRippleModule,\n                    MatCommonModule,\n                    ObserversModule,\n                ],\n                exports: [\n                    _MatSlideToggleRequiredValidatorModule,\n                    MatSlideToggle,\n                    MatCommonModule\n                ],\n                declarations: [MatSlideToggle]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDE_TOGGLE_DEFAULT_OPTIONS, MAT_SLIDE_TOGGLE_REQUIRED_VALIDATOR, MAT_SLIDE_TOGGLE_VALUE_ACCESSOR, MatSlideToggle, MatSlideToggleChange, MatSlideToggleModule, MatSlideToggleRequiredValidator, _MatSlideToggleRequiredValidatorModule };\n\n//# sourceMappingURL=slide-toggle.js.map","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appMousedownStopPropagation]' })\r\nexport class MousedownStopPropagationDirective {\r\n  @HostListener('mousedown', ['$event'])\r\n  onMousedown(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","export class SanitizeHelper {\r\n\r\n  private static removeFromStart(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(0, 1) === charToRemove) {\r\n      sanitized = sanitized.substring(1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static removeFromEnd(sanitized: string, charToRemove: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    while (sanitized.substring(sanitized.length - 1, sanitized.length) === charToRemove) {\r\n      sanitized = sanitized.substring(0, sanitized.length - 1);\r\n    }\r\n    return sanitized;\r\n  }\r\n\r\n  private static cleanBadPath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    const goodChar = '_';\r\n    const illegalRe = /[\\?<>\\\\:\\*\\|\":]/g;\r\n    const controlRe = /[\\x00-\\x1f\\x80-\\x9f]/g;\r\n    const reservedRe = /^\\.+$/;\r\n    const windowsReservedRe = /^(con|prn|aux|nul|com[0-9]|lpt[0-9])(\\..*)?$/i;\r\n    const windowsTrailingRe = /[\\. ]+$/;\r\n    return sanitized\r\n      .replace(illegalRe, goodChar)\r\n      .replace(controlRe, goodChar)\r\n      .replace(reservedRe, goodChar)\r\n      .replace(windowsReservedRe, goodChar)\r\n      .replace(windowsTrailingRe, goodChar);\r\n  }\r\n\r\n  // sanitize path\r\n  static sanitizePath(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // remove slashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\/');\r\n\r\n    // remove slashed form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\/');\r\n\r\n    // remove backslashes form start of path\r\n    sanitized = this.removeFromStart(sanitized, '\\\\');\r\n\r\n    // remove backslashes form end of path\r\n    sanitized = this.removeFromEnd(sanitized, '\\\\');\r\n\r\n    // replace bad\r\n    sanitized = this.cleanBadPath(sanitized);\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  // sanitize file or folder name\r\n  static sanitizeName(sanitized: string): string {\r\n    // check for undefined\r\n    if (!sanitized) { return sanitized; }\r\n\r\n    // in addition to all path validation rules\r\n    // slashes are not valid in file or folder name\r\n    const replacement = '_';\r\n    const illegalRe = /\\//g;\r\n    return this.sanitizePath(sanitized).replace(illegalRe, replacement);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}