{"version":3,"mappings":"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","names":["i0","_r8","ctx_r11","oxw","ctx_r14","ctx_r15","ctx_r29","ctx_r31","ctx_r38","ctx_r42","ContentImportComponent","constructor","dialogData","dialogRef","route","contentImportService","appDialogConfigService","contentTypesService","this","BehaviorSubject","waiting","default","evaluated","imported","viewStates","combineLatest","contentType$","loading$","viewStateSelected$","evaluationResult$","importResult$","pipe","map","contentType","loading","viewStateSelected","evaluationResult","importResult","snapshot","paramMap","get","ngOnInit","next","retrieveContentType","contentTypeStaticName","dialogSettings$","getShared$","forkJoin","subscribe","dialogSettings","formValues","defaultLanguage","Context","Language","Primary","file","files","resourcesReferences","clearEntities","ngOnDestroy","complete","closeDialog","close","evaluateContent","result","importContent","back","fileChange","event","target","filesDropped","MAT_DIALOG_DATA","selectors","DragAndDropDirective","elementRef","zone","snackBar","EventEmitter","Subscription","element","nativeElement","markStyleClass","markStyle","classList","add","dropAreaClass","runOutsideAngular","subscription","fromEvent","preventDefault","stopPropagation","clearTimeouts","dragClass","timeouts","push","window","setTimeout","remove","unsubscribe","onDrop","Array","from","dataTransfer","filterTypes","allowedFileTypes","length","emit","timeout","clearTimeout","allowedTypes","split","type","toLocaleLowerCase","filtered","filter","extIndex","name","lastIndexOf","ext","substring","includes","allowedTypesString","replace","open","duration","ctx"],"sources":["./projects/eav-ui/src/app/content-import/content-import.component.html","./projects/eav-ui/src/app/content-import/content-import.component.ts","./projects/eav-ui/src/app/shared/directives/drag-and-drop.directive.ts"],"sourcesContent":["<div class=\"dialog-form-wrapper\" appDragAndDrop [allowedFileTypes]=\"'xml'\" (filesDropped)=\"filesDropped($event)\"\r\n  *ngIf=\"(templateVars$ | async) as data\">\r\n\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">{{ data.contentType?.Name }} Import Data</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This will import content-items into 2sxc. It requires that you already defined the content-type before you try\r\n    importing, and that you created the import-file using the template provided by the Export. Please visit\r\n    <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n  </p>\r\n\r\n  <ng-container *ngIf=\"formValues != null\">\r\n    <ng-container [ngSwitch]=\"data.viewStateSelected\">\r\n\r\n      <!-- FORM -->\r\n      <form #ngForm=\"ngForm\" class=\"dialog-form\" *ngSwitchCase=\"1\">\r\n        <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n          <div>\r\n            <button mat-raised-button tippy=\"Open file browser\" (click)=\"fileInput.click()\">\r\n              <span>{{ formValues.file ? formValues.file.name : 'Select or drop file' }}</span>\r\n            </button>\r\n            <input #fileInput type=\"file\" (change)=\"fileChange($event)\" class=\"hide\" />\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">References to pages / files</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\">\r\n              <mat-radio-button value=\"Keep\">\r\n                Import links as written in the file (for example /Portals/...)\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"Resolve\">\r\n                Try to resolve paths to references\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <div>\r\n            <p class=\"field-label\">Clear all other entities</p>\r\n            <mat-radio-group [(ngModel)]=\"formValues.clearEntities\" name=\"ClearEntities\">\r\n              <mat-radio-button value=\"None\">\r\n                Keep all entities not found in import\r\n              </mat-radio-button>\r\n              <mat-radio-button value=\"All\">\r\n                Remove all entities not found in import\r\n              </mat-radio-button>\r\n            </mat-radio-group>\r\n          </div>\r\n\r\n          <p class=\"hint\">Remember to backup your DNN first!</p>\r\n        </div>\r\n\r\n        <div class=\"dialog-form-actions\">\r\n          <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n          <button mat-raised-button color=\"accent\" [disabled]=\"!formValues.file || !formValues.file.name\"\r\n            (click)=\"evaluateContent()\">\r\n            Preview Import\r\n          </button>\r\n        </div>\r\n      </form>\r\n      <!-- END FORM -->\r\n\r\n      <!-- WAITING -->\r\n      <p *ngSwitchCase=\"0\" class=\"progress-message\">Please wait while processing...</p>\r\n      <!-- END WAITING -->\r\n\r\n      <!-- EVALUATION RESULT -->\r\n      <ng-container *ngSwitchCase=\"2\">\r\n        <ng-container *ngIf=\"data.evaluationResult\">\r\n          <!-- DETAILS / STATISTICS -->\r\n          <div *ngIf=\"data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <p class=\"evaluation__title\">File contains:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>{{ data.evaluationResult.Detail.DocumentElementsCount }} content-items (records/entities)</li>\r\n              <li>{{ data.evaluationResult.Detail.LanguagesInDocumentCount }} languages</li>\r\n              <li>{{ data.evaluationResult.Detail.AttributeNamesInDocument.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesInDocument.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"evaluation__title\">If you press Import, it will:</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li>Create {{ data.evaluationResult.Detail.AmountOfEntitiesCreated }} content-items</li>\r\n              <li>Update {{ data.evaluationResult.Detail.AmountOfEntitiesUpdated }} content-items</li>\r\n              <li>Delete {{ data.evaluationResult.Detail.AmountOfEntitiesDeleted }} content-items</li>\r\n              <li>Ignore {{ data.evaluationResult.Detail.AttributeNamesNotImported.length }} columns:\r\n                {{ data.evaluationResult.Detail.AttributeNamesNotImported.join(', ') }}</li>\r\n            </ul>\r\n            <p class=\"hint\">Note: The import validates much data and may take several minutes.</p>\r\n          </div>\r\n          <!-- END DETAILS / STATISTICS -->\r\n          <!-- ERRORS -->\r\n          <div *ngIf=\"!data.evaluationResult.Success\" class=\"dialog-component-content fancy-scrollbar-light\">\r\n            <p class=\"evaluation__title\">Try to import file '{{ formValues.file.name }}'</p>\r\n            <ul class=\"evaluation__content\">\r\n              <li *ngFor=\"let error of data.evaluationResult.Errors\">\r\n                <div>{{ errors[error.ErrorCode] }}</div>\r\n                <div *ngIf=\"error.ErrorDetail\"><i>Details: {{ error.ErrorDetail }}</i></div>\r\n                <div *ngIf=\"error.LineNumber\"><i>Line-no: {{ error.LineNumber }}</i></div>\r\n                <div *ngIf=\"error.LineDetail\"><i>Line-details: {{ error.LineDetail }}</i></div>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <!-- END ERRORS -->\r\n          <div class=\"dialog-component-actions\">\r\n            <button mat-raised-button (click)=\"back()\">Back</button>\r\n            <button mat-raised-button color=\"accent\" [disabled]=\"!data.evaluationResult.Success\"\r\n              (click)=\"importContent()\">\r\n              Import\r\n            </button>\r\n          </div>\r\n        </ng-container>\r\n      </ng-container>\r\n      <!-- END EVALUATION RESULT -->\r\n\r\n      <!-- IMPORT RESULT -->\r\n      <div *ngSwitchCase=\"3\">\r\n        <div *ngIf=\"data.importResult\" class=\"progress-message\">\r\n          <p *ngIf=\"data.importResult.Success\">Import done.</p>\r\n          <p *ngIf=\"!data.importResult.Success\">Import failed.</p>\r\n        </div>\r\n        <div class=\"dialog-component-actions\">\r\n          <button mat-raised-button color=\"accent\" (click)=\"closeDialog()\">Close</button>\r\n        </div>\r\n      </div>\r\n      <!-- END IMPORT RESULT -->\r\n    </ng-container>\r\n  </ng-container>\r\n</div>\r\n","import { Component, HostBinding, Inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, forkJoin, map } from 'rxjs';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentImportDialogData } from './content-import-dialog.config';\r\nimport { ContentImport, EvaluateContentResult, ImportContentResult } from './models/content-import.model';\r\nimport { ContentImportService } from './services/content-import.service';\r\n\r\n@Component({\r\n  selector: 'app-content-import',\r\n  templateUrl: './content-import.component.html',\r\n  styleUrls: ['./content-import.component.scss'],\r\n})\r\nexport class ContentImportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentImport;\r\n  private contentType$ = new BehaviorSubject<ContentType>(null);\r\n  private loading$ = new BehaviorSubject(false);\r\n  private viewStates = {\r\n    waiting: 0,\r\n    default: 1,\r\n    evaluated: 2,\r\n    imported: 3,\r\n  };\r\n  private viewStateSelected$ = new BehaviorSubject<number>(this.viewStates.default);\r\n  private evaluationResult$ = new BehaviorSubject<EvaluateContentResult>(null);\r\n  private importResult$ = new BehaviorSubject<ImportContentResult>(null);\r\n  templateVars$ = combineLatest([\r\n    this.contentType$, this.loading$, this.viewStateSelected$, this.evaluationResult$, this.importResult$,\r\n  ]).pipe(\r\n    map(([contentType, loading, viewStateSelected, evaluationResult, importResult]) =>\r\n      ({ contentType, loading, viewStateSelected, evaluationResult, importResult })),\r\n  );\r\n  errors: Record<number, string> = {\r\n    0: 'Unknown error occured.',\r\n    1: 'Selected content-type does not exist.',\r\n    2: 'Document is not a valid XML file.',\r\n    3: 'Selected content-type does not match the content-type in the XML file.',\r\n    4: 'The language is not supported.',\r\n    5: 'The document does not specify all languages for all entities.',\r\n    6: 'Language reference cannot be parsed, the language is not supported.',\r\n    7: 'Language reference cannot be parsed, the read-write protection is not supported.',\r\n    8: 'Value cannot be read, because of it has an invalid format.'\r\n  };\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    @Inject(MAT_DIALOG_DATA) private dialogData: ContentImportDialogData,\r\n    private dialogRef: MatDialogRef<ContentImportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentImportService: ContentImportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getShared$(); // .getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentType: this.contentTypeStaticName,\r\n        file: this.dialogData.files != null ? this.dialogData.files[0] : null,\r\n        resourcesReferences: 'Keep',\r\n        clearEntities: 'None',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n    this.viewStateSelected$.complete();\r\n    this.evaluationResult$.complete();\r\n    this.importResult$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  evaluateContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.evaluateContent(this.formValues).subscribe(result => {\r\n      this.evaluationResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.evaluated);\r\n    });\r\n  }\r\n\r\n  importContent() {\r\n    this.viewStateSelected$.next(this.viewStates.waiting);\r\n    this.contentImportService.importContent(this.formValues).subscribe(result => {\r\n      this.importResult$.next(result);\r\n      this.viewStateSelected$.next(this.viewStates.imported);\r\n    });\r\n  }\r\n\r\n  back() {\r\n    this.viewStateSelected$.next(this.viewStates.default);\r\n    this.evaluationResult$.next(null);\r\n  }\r\n\r\n  fileChange(event: Event) {\r\n    this.formValues.file = (event.target as HTMLInputElement).files[0];\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    this.formValues.file = importFile;\r\n  }\r\n}\r\n","import { Directive, ElementRef, EventEmitter, HostListener, Input, NgZone, OnDestroy, OnInit, Output } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { fromEvent, Subscription } from 'rxjs';\r\n\r\n@Directive({ selector: '[appDragAndDrop]' })\r\nexport class DragAndDropDirective implements OnInit, OnDestroy {\r\n  @Input() markStyle: 'outline' | 'fill' | 'shadow' = 'outline';\r\n  /** Comma separated file types, e.g. 'txt,doc,docx' */\r\n  @Input() allowedFileTypes = '';\r\n  @Output() private filesDropped = new EventEmitter<File[]>();\r\n\r\n  private element: HTMLElement;\r\n  private dropAreaClass = 'eav-droparea';\r\n  private markStyleClass: string;\r\n  private dragClass = 'eav-dragover';\r\n  private timeouts: number[] = [];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(elementRef: ElementRef, private zone: NgZone, private snackBar: MatSnackBar) {\r\n    this.element = elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.markStyleClass = `eav-droparea-${this.markStyle}`;\r\n    this.element.classList.add(this.dropAreaClass, this.markStyleClass);\r\n    this.zone.runOutsideAngular(() => {\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragover').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.clearTimeouts();\r\n          this.element.classList.add(this.dragClass);\r\n        })\r\n      );\r\n      this.subscription.add(\r\n        fromEvent<DragEvent>(this.element, 'dragleave').subscribe(event => {\r\n          event.preventDefault();\r\n          event.stopPropagation();\r\n          this.timeouts.push(\r\n            window.setTimeout(() => { this.element.classList.remove(this.dragClass); }, 50)\r\n          );\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dropAreaClass, this.markStyleClass, this.dragClass);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n    this.clearTimeouts();\r\n    this.element.classList.remove(this.dragClass);\r\n    const fileList = event.dataTransfer.files;\r\n    let files = Array.from(fileList);\r\n    files = this.filterTypes(files, this.allowedFileTypes);\r\n    if (files.length > 0) {\r\n      this.filesDropped.emit(files);\r\n    }\r\n  }\r\n\r\n  private clearTimeouts() {\r\n    for (const timeout of this.timeouts) {\r\n      clearTimeout(timeout);\r\n    }\r\n    this.timeouts = [];\r\n  }\r\n\r\n  private filterTypes(files: File[], allowedFileTypes: string) {\r\n    if (allowedFileTypes === '') { return files; }\r\n\r\n    const allowedTypes = allowedFileTypes.split(',').map(type => type.toLocaleLowerCase());\r\n    const filtered = files.filter(file => {\r\n      const extIndex = file.name.lastIndexOf('.');\r\n      if (extIndex <= 0) { return false; }\r\n      const ext = file.name.substring(extIndex + 1).toLocaleLowerCase();\r\n      const allowed = allowedTypes.includes(ext);\r\n      return allowed;\r\n    });\r\n\r\n    if (files.length !== filtered.length) {\r\n      const allowedTypesString = this.allowedFileTypes.replace(/\\,/g, ', ');\r\n      const message = filtered.length\r\n        ? 'Some files were filtered out. This drop location only accepts file types: ' + allowedTypesString\r\n        : 'This drop location only accepts file types: ' + allowedTypesString;\r\n      this.snackBar.open(message, null, { duration: 5000 });\r\n    }\r\n    return filtered;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-import_content-import_component_ts.c72c3bad69c91155.js"}