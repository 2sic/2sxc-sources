{"version":3,"sources":["C:/Projects/2sxc/eav-item-dialog-angular/node_modules/rxjs/_esm2015/internal/observable/zip.js","../edit/eav-material-controls/dialogs/snack-bar-save-errors/snack-bar-save-errors.component.html","../edit/eav-material-controls/dialogs/snack-bar-save-errors/snack-bar-save-errors.component.ts","../edit/eav-material-controls/dialogs/snack-bar-unsaved-changes/snack-bar-unsaved-changes.component.ts","../edit/eav-material-controls/dialogs/snack-bar-unsaved-changes/snack-bar-unsaved-changes.component.html","../edit/shared/models/json-format-v1/value1.ts","../edit/shared/models/json-format-v1/attributes1.ts","../edit/shared/models/json-format-v1/for1.ts","../edit/shared/models/json-format-v1/type1.ts","../edit/shared/models/json-format-v1/entity1.ts","../edit/shared/models/json-format-v1/json-item1.ts","../edit/eav-item-dialog/item-edit-form/item-edit-form.component.html","../edit/eav-item-dialog/item-edit-form/item-edit-form.component.ts","../edit/eav-item-dialog/multi-item-edit-form/multi-item-edit-form.constants.ts","../edit/eav-item-dialog/multi-item-edit-form/multi-item-edit-form.helpers.ts","../edit/shared/store/ngrx-data/content-type-item.service.ts","../edit/eav-material-controls/dialogs/save-status-dialog/save-status-dialog.component.ts","../edit/eav-material-controls/dialogs/save-status-dialog/save-status-dialog.component.html","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher-services/center-selected-helper.ts","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher-services/eav-language-switcher.helpers.ts","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher-services/mouse-scroll-helper.ts","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher-services/show-shadows-helper.ts","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher.component.html","../edit/eav-material-controls/localization/eav-language-switcher/eav-language-switcher.component.ts","../edit/eav-item-dialog/multi-item-edit-form-header/multi-item-edit-form-header.component.html","../edit/eav-item-dialog/multi-item-edit-form-header/multi-item-edit-form-header.component.ts","../edit/eav-item-dialog/multi-item-edit-form-debug/multi-item-edit-form-debug.component.html","../edit/eav-item-dialog/multi-item-edit-form-debug/multi-item-edit-form-debug.component.ts","../edit/eav-item-dialog/multi-item-edit-form/multi-item-edit-form.component.html","../edit/eav-item-dialog/multi-item-edit-form/multi-item-edit-form.component.ts"],"names":["zip","observables","resultSelector","length","pop","fromArray","undefined","lift","this","subscriber","source","subscribe","destination","Object","create","iterators","active","value","isArray","push","len","unsubscribe","i","iterator","stillUnsubscribed","add","complete","hasValue","shouldComplete","args","result","next","hasCompleted","done","_tryresultSelector","apply","err","error","Subscriber","nextResult","Boolean","array","index","parent","observable","buffer","isComplete","shift","notifyInactive","innerValue","checkIterators","innerSubscribe","snackBarData","fieldErrors","ngOnInit","SnackBarSaveErrorsComponent","snackRef","saveChanges","save","dismissWithAction","SnackBarUnsavedChangesComponent","eavValues","newValue1","values","forEach","eavValue","allDimensions","dimensions","map","d","join","eavAttributes","newAttribute1","Attributes1","keys","eavAttributeKey","type","entityFor","Target","Number","String","Guid","Id","Name","Version","Type","Attributes","Owner","Metadata","For","entity","attributes1","attributes","metaData1","createArray","metadata","for1","For1","Entity1","id","version","guid","Type1","name","owner","eavEntityArray","metaData1Array","Array","eavEntity","Header","Entity","item","JsonItem1","header","languageInstanceService","itemService","contentTypeService","eavService","actions$","buildFieldsService","itemFormValueChange","subscription","Subscription","getDefaultLanguage","formId","defaultLang","defaultLanguage","getCurrentLanguage","currentLang","currentLanguage","setFormValues","contentTypeId","getContentTypeId","contentType$","getContentTypeById","itemFields$","buildFields","enableHistory","ngOnDestroy","ngOnChanges","changes","formSaveObservable","pipe","filter","action","formValueChange","updateItemAttributesValues","emit","submit","form","valid","checkAreAllControlsDisabled","Group","SlotCanBeEmpty","saveItem","allDisabled","controlKeys","controls","disabled","formValues","attributeKey","translate","valueIsChanged","patchValue","formValueChange$","entityGuid","entityValues","ItemEditFormComponent","Show","Hide","Branch","alphabetCompare","a","b","key","serviceElementsFactory","addContentTypeItems","rawContentTypeItems","rawContentTypeItem","contentTypeItem","upsertOneInCache","getContentTypeItemByGuid","entities$","contentTypeItems","find","ContentTypeItemService","dialogRef","data","Modes","PublishModeConstants","publishMode","setMode","mode","close","SaveStatusDialogComponent","ngZone","moveThreshold","stopClick","eventListeners","runOutsideAngular","checkIfMouseMoved","bind","document","addEventListener","passive","element","listener","lngButtonDown","event","saveInitialPosition","lngButtonClick","doMove","stopClickIfMouseMoved","destroy","evList","removeEventListener","positionX","pageX","positionY","pageY","Math","abs","button","target","buttonOffset","getBoundingClientRect","left","buttonWidth","width","headerOffset","headerWidth","scrollLeft","removeRegionName","languageName","substring","indexOf","toLocaleUpperCase","areButtonsDisabled","registerScroll","headerDownListener","window","getSelection","removeAllRanges","oldScrollBehavior","getComputedStyle","getPropertyValue","style","scrollBehavior","doScroll","removeScroll","splice","newPositionX","leftShadow","rightShadow","hidden","calculateShadows","maxScrollLeft","scrollWidth","clientWidth","hideBoth","hideLeft","hideRight","showBoth","classList","remove","languageService","languageButtons$","langs","languageButtons","regionlessNamesCount","languages","language","regionlessName","buttonText","currentLanguage$","ngAfterViewInit","showShadowsService","ShowShadowsHelper","headerRef","nativeElement","leftShadowRef","rightShadowRef","mouseScrollHelper","MouseScrollHelper","centerSelectedService","CenterSelectedHelper","lngButtonMouseDown","updateCurrentLanguage","EavLanguageSwitcherComponent","dialog","closeDialog","setPublishMode","hasLanguages$","openSaveStatusDialog","open","panelClass","autoFocus","keydownEvents","e","keyCode","navigator","platform","match","metaKey","ctrlKey","preventDefault","afterClosed","res","MultiItemEditFormHeaderComponent","debugInfoOpened","sxcVer","sxcVersion","lastIndexOf","showDebugInfo","items$","selectAllItems","templateVars$","combineLatest","items","toggleDebugInfo","MultiItemEditFormDebugComponent","changeDetectorRef","contentTypeItemService","globalConfigService","featureService","inputTypeService","snackBar","validationMessagesService","loadIconsService","route","editRoutingService","isParentDialog","editDialogCount","snapshot","pathFromRoot","path","url","calculateIsParentDialog","floor","random","isCopy$","BehaviorSubject","enableHistory$","formsAreValid$","allControlsAreDisabled$","publishMode$","reduceSaveButton$","hideHeader$","getHideHeader","debugEnabled$","getDebugEnabled","tap","debugEnabled","debugInfoIsOpen$","eavConfigLoaded$","formErrors","formsAreDirty","formSaveAllObservables$","createMode","formIsSaved","subscriptions","init","load","fetchFormData","ngAfterViewChecked","attachAllSaveFormObservables","detectChanges","initSlider","removeLanguageInstance","clearCache","saveResult","disableClose","snackBarYouHaveUnsavedChanges","eavConfig","versioningOptions","trackByFn","checkFormsState","saveAll","forceConnectorSave$","setTimeout","itemEditFormRefs","itemEditFormComponent","submitOutside","instant","duration","calculateAllValidationMessages","formError","field","message","openFromComponent","opened","params","editItems","JSON","stringify","formData","loadItems","Items","addInputTypes","InputTypes","ContentTypeItems","addContentTypes","ContentTypes","loadFeatures","Features","setEavConfig","Context","isoLangCode","lang","split","use","eavLangs","sortedLanguages","primaryLangKey","primaryLang","sameLangs","otherLangs","startsWith","sort","sortLanguages","langPri","loadLanguages","addLanguageInstance","DraftShouldBranch","IsPublished","valuesExistInDefaultLanguage","selectItemsByIdList","delay","take","DuplicateEntity","history","languageChangeSubscribe","dialogBackdropClickSubscribe","saveFormMessagesSubscribe","formSetValueChangeSubscribe","slideableRef","slide$","merge","pairwise","previousLang","findIndex","fromEvent","animationName","returnValue","backdropClick","updateItemId","formSet","first","invalid","dirty","areFormsDirtyAnyLanguage","isDirty","langKeys","validateForm","saveFormSubscribe","switchMap","actions","allItems","saveFormData","saveItemSuccess","catchError","of","saveItemError","snackBarRef","onAction","containerInstance","snackBarConfig","MultiItemEditFormComponent"],"mappings":"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","file":"multi-item-edit-form-component.ff8f9f25566aa9ad3c2d.js","sourcesContent":["import { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function zip(...observables) {\n    const resultSelector = observables[observables.length - 1];\n    if (typeof resultSelector === 'function') {\n        observables.pop();\n    }\n    return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\nexport class ZipOperator {\n    constructor(resultSelector) {\n        this.resultSelector = resultSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n    }\n}\nexport class ZipSubscriber extends Subscriber {\n    constructor(destination, resultSelector, values = Object.create(null)) {\n        super(destination);\n        this.resultSelector = resultSelector;\n        this.iterators = [];\n        this.active = 0;\n        this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : undefined;\n    }\n    _next(value) {\n        const iterators = this.iterators;\n        if (isArray(value)) {\n            iterators.push(new StaticArrayIterator(value));\n        }\n        else if (typeof value[Symbol_iterator] === 'function') {\n            iterators.push(new StaticIterator(value[Symbol_iterator]()));\n        }\n        else {\n            iterators.push(new ZipBufferIterator(this.destination, this, value));\n        }\n    }\n    _complete() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        this.unsubscribe();\n        if (len === 0) {\n            this.destination.complete();\n            return;\n        }\n        this.active = len;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (iterator.stillUnsubscribed) {\n                const destination = this.destination;\n                destination.add(iterator.subscribe());\n            }\n            else {\n                this.active--;\n            }\n        }\n    }\n    notifyInactive() {\n        this.active--;\n        if (this.active === 0) {\n            this.destination.complete();\n        }\n    }\n    checkIterators() {\n        const iterators = this.iterators;\n        const len = iterators.length;\n        const destination = this.destination;\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n                return;\n            }\n        }\n        let shouldComplete = false;\n        const args = [];\n        for (let i = 0; i < len; i++) {\n            let iterator = iterators[i];\n            let result = iterator.next();\n            if (iterator.hasCompleted()) {\n                shouldComplete = true;\n            }\n            if (result.done) {\n                destination.complete();\n                return;\n            }\n            args.push(result.value);\n        }\n        if (this.resultSelector) {\n            this._tryresultSelector(args);\n        }\n        else {\n            destination.next(args);\n        }\n        if (shouldComplete) {\n            destination.complete();\n        }\n    }\n    _tryresultSelector(args) {\n        let result;\n        try {\n            result = this.resultSelector.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    }\n}\nclass StaticIterator {\n    constructor(iterator) {\n        this.iterator = iterator;\n        this.nextResult = iterator.next();\n    }\n    hasValue() {\n        return true;\n    }\n    next() {\n        const result = this.nextResult;\n        this.nextResult = this.iterator.next();\n        return result;\n    }\n    hasCompleted() {\n        const nextResult = this.nextResult;\n        return Boolean(nextResult && nextResult.done);\n    }\n}\nclass StaticArrayIterator {\n    constructor(array) {\n        this.array = array;\n        this.index = 0;\n        this.length = 0;\n        this.length = array.length;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next(value) {\n        const i = this.index++;\n        const array = this.array;\n        return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n    }\n    hasValue() {\n        return this.array.length > this.index;\n    }\n    hasCompleted() {\n        return this.array.length === this.index;\n    }\n}\nclass ZipBufferIterator extends SimpleOuterSubscriber {\n    constructor(destination, parent, observable) {\n        super(destination);\n        this.parent = parent;\n        this.observable = observable;\n        this.stillUnsubscribed = true;\n        this.buffer = [];\n        this.isComplete = false;\n    }\n    [Symbol_iterator]() {\n        return this;\n    }\n    next() {\n        const buffer = this.buffer;\n        if (buffer.length === 0 && this.isComplete) {\n            return { value: null, done: true };\n        }\n        else {\n            return { value: buffer.shift(), done: false };\n        }\n    }\n    hasValue() {\n        return this.buffer.length > 0;\n    }\n    hasCompleted() {\n        return this.buffer.length === 0 && this.isComplete;\n    }\n    notifyComplete() {\n        if (this.buffer.length > 0) {\n            this.isComplete = true;\n            this.parent.notifyInactive();\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n    notifyNext(innerValue) {\n        this.buffer.push(innerValue);\n        this.parent.checkIterators();\n    }\n    subscribe() {\n        return innerSubscribe(this.observable, new SimpleInnerSubscriber(this));\n    }\n}\n//# sourceMappingURL=zip.js.map","<div class=\"save-errors-container\">\r\n  <div>{{ 'Errors.SaveErrors' | translate }}</div>\r\n  <br />\r\n  <div *ngFor=\"let error of fieldErrors;\">\r\n    <span>{{ error.field }}<span>: {{ error.message | translate }}</span></span>\r\n  </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { FieldErrorMessage } from '../../../shared/models/eav/field-error-message';\r\nimport { SaveErrorsSnackData } from './snack-bar-save-errors.models';\r\n\r\n@Component({\r\n  selector: 'app-snack-bar-save-errors',\r\n  templateUrl: './snack-bar-save-errors.component.html',\r\n  styleUrls: ['./snack-bar-save-errors.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SnackBarSaveErrorsComponent implements OnInit {\r\n  fieldErrors: FieldErrorMessage[] = [];\r\n\r\n  constructor(@Inject(MAT_SNACK_BAR_DATA) private snackBarData: SaveErrorsSnackData) { }\r\n\r\n  ngOnInit() {\r\n    this.fieldErrors = this.snackBarData.fieldErrors;\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatSnackBarRef, MAT_SNACK_BAR_DATA } from '@angular/material/snack-bar';\r\nimport { UnsavedChangesSnackData } from './snack-bar-unsaved-changes.models';\r\n\r\n@Component({\r\n  selector: 'app-snack-bar-unsaved-changes',\r\n  templateUrl: './snack-bar-unsaved-changes.component.html',\r\n  styleUrls: ['./snack-bar-unsaved-changes.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SnackBarUnsavedChangesComponent implements OnInit {\r\n\r\n  constructor(\r\n    private snackRef: MatSnackBarRef<SnackBarUnsavedChangesComponent>,\r\n    @Inject(MAT_SNACK_BAR_DATA) private snackBarData: UnsavedChangesSnackData,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  saveChanges(save: boolean) {\r\n    this.snackBarData.save = save;\r\n    this.snackRef.dismissWithAction();\r\n  }\r\n}\r\n","<span class=\"error-message\">{{ 'Errors.UnsavedChanges' | translate }}</span>\r\n\r\n<div fxLayoutAlign=\"end end\">\r\n  <button mat-button color=\"accent\" (click)=\"saveChanges(false)\">\r\n    {{ ('General.Buttons.NotSave' | translate).toUpperCase() }}\r\n  </button>\r\n  <button mat-button color=\"accent\" (click)=\"saveChanges(true)\">\r\n    {{ ('General.Buttons.Save' | translate).toUpperCase()}}\r\n  </button>\r\n</div>\r\n","import { angularConsoleLog } from '../../../../ng-dialogs/src/app/shared/helpers/angular-console-log.helper';\r\nimport { EavValues } from '../eav';\r\n\r\nexport class Value1<T> {\r\n  [key: string]: T;\r\n\r\n  public static create<T>(eavValues: EavValues<T>): Value1<T> {\r\n    const newValue1: Value1<T> = {};\r\n    angularConsoleLog('eavValues.values.forEach: ', eavValues.values);\r\n    eavValues.values.forEach(eavValue => {\r\n      const allDimensions = eavValue.dimensions.map(d => d.value).join();\r\n      newValue1[allDimensions] = eavValue.value;\r\n    });\r\n    return newValue1;\r\n  }\r\n}\r\n","import { EavAttributes } from '../eav';\r\nimport { Attribute1 } from './attribute1';\r\nimport { Value1 } from './value1';\r\n\r\nexport class Attributes1<T> {\r\n  [key: string]: Attribute1<T>;\r\n\r\n  public static create<T>(eavAttributes: EavAttributes): Attributes1<T> {\r\n    const newAttribute1: Attributes1<T> = new Attributes1<T>();\r\n\r\n    Object.keys(eavAttributes).forEach(eavAttributeKey => {\r\n      const type = eavAttributes[eavAttributeKey].type;\r\n      if (!newAttribute1[type]) { newAttribute1[type] = {}; }\r\n      newAttribute1[type][eavAttributeKey] = Value1.create<T>(eavAttributes[eavAttributeKey]);\r\n    });\r\n    return newAttribute1;\r\n  }\r\n}\r\n","import { EavFor } from '../eav';\r\n\r\nexport class For1 {\r\n  Target: string;\r\n  Number?: number;\r\n  String?: string;\r\n  Guid?: string;\r\n\r\n  constructor(entityFor: EavFor) {\r\n    this.Target = entityFor.Target;\r\n    if (entityFor.Number) {\r\n      this.Number = entityFor.Number;\r\n    }\r\n    if (entityFor.String) {\r\n      this.String = entityFor.String;\r\n    }\r\n    if (entityFor.Guid) {\r\n      this.Guid = entityFor.Guid;\r\n    }\r\n  }\r\n}\r\n","export class Type1 {\r\n    Id: string;\r\n    Name: string;\r\n\r\n    constructor(Id: string, Name: string) {\r\n        this.Id = Id;\r\n        this.Name = Name;\r\n    }\r\n}\r\n","import { EavEntity } from '../eav';\r\nimport { Attributes1 } from './attributes1';\r\nimport { For1 } from './for1';\r\nimport { Type1 } from './type1';\r\n\r\nexport class Entity1 {\r\n  Id: number;\r\n  Version: number;\r\n  Guid: string;\r\n  Type: Type1;\r\n  Attributes: Attributes1<any>;\r\n  Owner: string;\r\n  Metadata: Entity1[];\r\n  For?: For1;\r\n\r\n  constructor(\r\n    Id: number,\r\n    Version: number,\r\n    Guid: string,\r\n    Type: Type1,\r\n    Attributes: Attributes1<any>,\r\n    Owner: string,\r\n    Metadata: Entity1[],\r\n    For?: For1,\r\n  ) {\r\n    this.Id = Id;\r\n    this.Version = Version;\r\n    this.Guid = Guid;\r\n    this.Type = Type;\r\n    this.Attributes = Attributes;\r\n    this.Owner = Owner;\r\n    this.Metadata = Metadata;\r\n    if (For) { this.For = For; }\r\n  }\r\n\r\n  public static create(entity: EavEntity): Entity1 {\r\n    const attributes1 = Attributes1.create(entity.attributes);\r\n    const metaData1 = this.createArray(entity.metadata);\r\n    const for1 = entity.For ? new For1(entity.For) : null;\r\n\r\n    return new Entity1(\r\n      entity.id,\r\n      entity.version,\r\n      entity.guid,\r\n      new Type1(entity.type.id, entity.type.name),\r\n      attributes1,\r\n      entity.owner,\r\n      metaData1,\r\n      for1,\r\n    );\r\n  }\r\n\r\n  public static createArray(eavEntityArray: EavEntity[]): Entity1[] {\r\n    if (!eavEntityArray) { return null; }\r\n    const metaData1Array: Entity1[] = new Array<Entity1>();\r\n    eavEntityArray.forEach(eavEntity => {\r\n      metaData1Array.push(Entity1.create(eavEntity));\r\n    });\r\n    return metaData1Array;\r\n  }\r\n}\r\n","import { EavHeader } from '../eav';\r\n// import { JsonHeader1 } from './json-header1';\r\nimport { Item } from '../eav/item';\r\nimport { Entity1 } from './entity1';\r\n\r\nexport class JsonItem1 {\r\n  // Header: JsonHeader1;\r\n  Header: EavHeader;\r\n  Entity: Entity1;\r\n\r\n  constructor(Header: EavHeader, Entity: Entity1) {\r\n    this.Header = Header;\r\n    this.Entity = Entity;\r\n  }\r\n\r\n  public static create(item: Item): JsonItem1 {\r\n    return new JsonItem1(\r\n      // JsonHeader1.create(item.header),\r\n      item.header,\r\n      Entity1.create(item.entity)\r\n    );\r\n  }\r\n}\r\n","<div *ngIf=\"contentType$ | async\">\r\n  <app-eav-form [config]=\"itemFields$ | async\" (formSubmit)=\"submit()\" (formValueChange)=\"formValueChange($event)\">\r\n  </app-eav-form>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnChanges, OnDestroy, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { filter } from 'rxjs/operators';\r\nimport { EavFormComponent } from '../../eav-dynamic-form/components/eav-form/eav-form.component';\r\nimport { FieldConfigSet } from '../../eav-dynamic-form/model/field-config';\r\nimport { InputFieldHelper } from '../../shared/helpers/input-field-helper';\r\nimport { LocalizationHelper } from '../../shared/helpers/localization-helper';\r\nimport { ContentType, Item } from '../../shared/models/eav';\r\nimport { EavService } from '../../shared/services/eav.service';\r\nimport * as fromItems from '../../shared/store/actions/item.actions';\r\nimport { ContentTypeService } from '../../shared/store/ngrx-data/content-type.service';\r\nimport { ItemService } from '../../shared/store/ngrx-data/item.service';\r\nimport { LanguageInstanceService } from '../../shared/store/ngrx-data/language-instance.service';\r\nimport { BuildFieldsService } from './build-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-item-edit-form',\r\n  templateUrl: './item-edit-form.component.html',\r\n  styleUrls: ['./item-edit-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ItemEditFormComponent implements OnInit, OnDestroy, OnChanges {\r\n  @ViewChild(EavFormComponent) form: EavFormComponent;\r\n  @Input() item: Item;\r\n  @Input() private formId: number;\r\n  @Input() private enableHistory: boolean;\r\n  @Output() private itemFormValueChange = new EventEmitter<void>();\r\n\r\n  contentType$: Observable<ContentType>;\r\n  itemFields$: Observable<FieldConfigSet[]>;\r\n  currentLanguage: string;\r\n\r\n  private defaultLanguage: string;\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private languageInstanceService: LanguageInstanceService,\r\n    private itemService: ItemService,\r\n    private contentTypeService: ContentTypeService,\r\n    private eavService: EavService,\r\n    private actions$: Actions,\r\n    private buildFieldsService: BuildFieldsService,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.subscription.add(\r\n      this.languageInstanceService.getDefaultLanguage(this.formId).subscribe(defaultLang => {\r\n        this.defaultLanguage = defaultLang;\r\n      })\r\n    );\r\n\r\n    this.subscription.add(\r\n      this.languageInstanceService.getCurrentLanguage(this.formId).subscribe(currentLang => {\r\n        this.currentLanguage = currentLang;\r\n        this.setFormValues();\r\n      })\r\n    );\r\n\r\n    // create input fields from content type\r\n    const contentTypeId = InputFieldHelper.getContentTypeId(this.item);\r\n    this.contentType$ = this.contentTypeService.getContentTypeById(contentTypeId);\r\n    this.itemFields$ = this.buildFieldsService.buildFields(\r\n      this.contentType$,\r\n      this.item,\r\n      this.formId,\r\n      this.currentLanguage,\r\n      this.defaultLanguage,\r\n      this.enableHistory,\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.item != null) {\r\n      this.setFormValues();\r\n    }\r\n  }\r\n\r\n  /** Observe is item form is saved */\r\n  formSaveObservable() {\r\n    return this.actions$.pipe(\r\n      ofType(fromItems.SAVE_ITEM_ATTRIBUTES_VALUES),\r\n      filter((action: fromItems.SaveItemAttributesValuesAction) =>\r\n        this.item.entity.id === 0 ? this.item.entity.guid === action.item.entity.guid : this.item.entity.id === action.item.entity.id\r\n      ),\r\n    ) as Observable<Action>;\r\n  }\r\n\r\n  /**\r\n   * Update NGRX/store on form value change\r\n   * @param values key:value list of fields from form\r\n   */\r\n  formValueChange(values: { [key: string]: any }) {\r\n    this.itemService.updateItemAttributesValues(\r\n      this.item.entity.id,\r\n      values,\r\n      this.currentLanguage,\r\n      this.defaultLanguage,\r\n      this.item.entity.guid,\r\n    );\r\n\r\n    this.itemFormValueChange.emit();\r\n  }\r\n\r\n  submit() {\r\n    if (this.form.form.valid || this.checkAreAllControlsDisabled() || (this.item.header.Group && this.item.header.Group.SlotCanBeEmpty)) {\r\n      this.eavService.saveItem(this.item);\r\n    }\r\n  }\r\n\r\n  checkAreAllControlsDisabled() {\r\n    let allDisabled = true;\r\n    const controlKeys = Object.keys(this.form.form.controls);\r\n    for (const key of controlKeys) {\r\n      if (!this.form.form.controls[key].disabled) {\r\n        allDisabled = false;\r\n        break;\r\n      }\r\n    }\r\n    return allDisabled;\r\n  }\r\n\r\n  private setFormValues() {\r\n    if (!this.form) { return; }\r\n\r\n    const formValues: { [name: string]: any } = {};\r\n    Object.keys(this.item.entity.attributes).forEach(attributeKey => {\r\n      formValues[attributeKey] = LocalizationHelper.translate(\r\n        this.currentLanguage,\r\n        this.defaultLanguage,\r\n        this.item.entity.attributes[attributeKey],\r\n        null,\r\n      );\r\n    });\r\n\r\n    // spm true only on language change?\r\n    if (this.form.valueIsChanged(formValues)) {\r\n      // set new values to form\r\n      this.form.patchValue(formValues, false);\r\n    }\r\n    // important to be after patchValue\r\n    this.eavService.formValueChange$.next({\r\n      formId: this.formId,\r\n      entityGuid: this.item.entity.guid,\r\n      entityValues: formValues,\r\n    });\r\n  }\r\n\r\n}\r\n","export type PublishMode = 'branch' | 'show' | 'hide';\r\n\r\nexport class PublishModeConstants {\r\n  public static readonly Show = 'show';\r\n  public static readonly Hide = 'hide';\r\n  public static readonly Branch = 'branch';\r\n}\r\n","import { ActivatedRoute } from '@angular/router';\r\nimport { Language } from '../../shared/models/eav';\r\n\r\nexport function calculateIsParentDialog(route: ActivatedRoute) {\r\n  let editDialogCount = 0;\r\n  for (const path of route.snapshot.pathFromRoot) {\r\n    if (path.url.length <= 0) { continue; }\r\n    for (const urlSegment of path.url) {\r\n      if (urlSegment.path !== 'edit') { continue; }\r\n      editDialogCount++;\r\n    }\r\n  }\r\n  return editDialogCount === 1;\r\n}\r\n\r\nexport function sortLanguages(primaryLangKey: string, languages: Language[]) {\r\n  if (languages.length === 0) { return languages; }\r\n\r\n  let primaryLang: Language;\r\n  const sameLangs: Language[] = [];\r\n  const otherLangs: Language[] = [];\r\n  for (const language of languages) {\r\n    if (language.key === primaryLangKey) {\r\n      primaryLang = language;\r\n    } else if (language.key.startsWith(primaryLangKey.split('-')[0])) {\r\n      sameLangs.push(language);\r\n    } else {\r\n      otherLangs.push(language);\r\n    }\r\n  }\r\n  sameLangs.sort(alphabetCompare);\r\n  otherLangs.sort(alphabetCompare);\r\n\r\n  if (!primaryLang) {\r\n    return [...sameLangs, ...otherLangs];\r\n  } else {\r\n    return [primaryLang, ...sameLangs, ...otherLangs];\r\n  }\r\n}\r\n\r\nfunction alphabetCompare(a: Language, b: Language) {\r\n  if (a.key < b.key) { return -1; }\r\n  if (a.key > b.key) { return 1; }\r\n  return 0;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { EntityCollectionServiceBase, EntityCollectionServiceElementsFactory } from '@ngrx/data';\r\nimport { map } from 'rxjs/operators';\r\nimport { EavEntity } from '../../models/eav';\r\nimport { Entity1 } from '../../models/json-format-v1';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ContentTypeItemService extends EntityCollectionServiceBase<EavEntity> {\r\n  constructor(serviceElementsFactory: EntityCollectionServiceElementsFactory) {\r\n    super('ContentTypeItem', serviceElementsFactory);\r\n  }\r\n\r\n  /** Add new content type items to the store */\r\n  addContentTypeItems(rawContentTypeItems: Entity1[]) {\r\n    rawContentTypeItems.forEach(rawContentTypeItem => {\r\n      const contentTypeItem = EavEntity.create(rawContentTypeItem);\r\n      this.upsertOneInCache(contentTypeItem);\r\n    });\r\n  }\r\n\r\n  /** Get content type item observable from the store */\r\n  getContentTypeItemByGuid(guid: string) {\r\n    return this.entities$.pipe(\r\n      map(contentTypeItems => contentTypeItems.find(contentTypeItem => contentTypeItem.guid === guid))\r\n      // maybe add distinctUntilChanged()\r\n    );\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\nimport { PublishMode, PublishModeConstants } from '../../../eav-item-dialog/multi-item-edit-form/multi-item-edit-form.constants';\r\n\r\n@Component({\r\n  selector: 'app-save-status-dialog',\r\n  templateUrl: './save-status-dialog.component.html',\r\n  styleUrls: ['./save-status-dialog.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SaveStatusDialogComponent implements OnInit {\r\n  publishMode: PublishMode;\r\n  Modes = PublishModeConstants;\r\n\r\n  constructor(private dialogRef: MatDialogRef<SaveStatusDialogComponent>, @Inject(MAT_DIALOG_DATA) private data: PublishMode) { }\r\n\r\n  ngOnInit() {\r\n    this.publishMode = this.data;\r\n  }\r\n\r\n  setMode(mode: PublishMode) {\r\n    this.dialogRef.close(mode);\r\n  }\r\n}\r\n","<mat-card>\r\n  <div class=\"mat-card__header\">\r\n    <div class=\"mat-card__title\">{{ 'SaveMode.Dialog.Title' | translate }}</div>\r\n    <div class=\"mat-card__description\">{{ 'SaveMode.Dialog.Intro' | translate }}</div>\r\n  </div>\r\n\r\n  <mat-nav-list toggle>\r\n\r\n    <mat-list-item (click)=\"setMode(Modes.Show)\" [ngClass]=\"{ 'mat-list-item-focus': publishMode === Modes.Show }\">\r\n      <mat-icon matListIcon color=\"accent\">visibility</mat-icon>\r\n      <div matLine class=\"mat-list-item__title\">{{ 'SaveMode.Dialog.Show.Title' | translate }}</div>\r\n      <div matLine class=\"mat-list-item__body\">{{ 'SaveMode.Dialog.Show.Body' | translate }}</div>\r\n    </mat-list-item>\r\n\r\n    <mat-list-item (click)=\"setMode(Modes.Hide)\" [ngClass]=\"{ 'mat-list-item-focus': publishMode === Modes.Hide }\">\r\n      <mat-icon matListIcon color=\"accent\">visibility_off</mat-icon>\r\n      <div matLine class=\"mat-list-item__title\">{{ 'SaveMode.Dialog.Hide.Title' | translate }}</div>\r\n      <div matLine class=\"mat-list-item__body\">{{ 'SaveMode.Dialog.Hide.Body' | translate }}</div>\r\n    </mat-list-item>\r\n\r\n    <mat-list-item (click)=\"setMode(Modes.Branch)\" [ngClass]=\"{ 'mat-list-item-focus': publishMode === Modes.Branch }\">\r\n      <mat-icon matListIcon color=\"accent\" svgIcon=\"draft-branch\"></mat-icon>\r\n      <div matLine class=\"mat-list-item__title\">{{ 'SaveMode.Dialog.Branch.Title' | translate }}</div>\r\n      <div matLine class=\"mat-list-item__body\">{{ 'SaveMode.Dialog.Branch.Body' | translate }}</div>\r\n    </mat-list-item>\r\n\r\n  </mat-nav-list>\r\n</mat-card>\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../../../shared/element-event-listener.model';\r\n\r\nexport class CenterSelectedHelper {\r\n  private positionX: number;\r\n  private positionY: number;\r\n  private moveThreshold = 2; // Pixels for which header can be scrolled while clicking to still register as click\r\n  private stopClick = false;\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const checkIfMouseMoved = this.checkIfMouseMoved.bind(this);\r\n      document.addEventListener('mouseup', checkIfMouseMoved, { passive: true });\r\n      this.eventListeners.push({ element: document, type: 'mouseup', listener: checkIfMouseMoved });\r\n    });\r\n  }\r\n\r\n  lngButtonDown(event: MouseEvent) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.saveInitialPosition(event);\r\n    });\r\n  }\r\n\r\n  lngButtonClick(event: MouseEvent) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.doMove(event);\r\n    });\r\n  }\r\n\r\n  stopClickIfMouseMoved() {\r\n    return this.stopClick;\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(evList => {\r\n        evList.element.removeEventListener(evList.type, evList.listener);\r\n        evList = null;\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n  }\r\n\r\n  private saveInitialPosition(event: MouseEvent) {\r\n    this.stopClick = false;\r\n    this.positionX = event.pageX;\r\n    this.positionY = event.pageY;\r\n  }\r\n\r\n  private checkIfMouseMoved(event: MouseEvent) {\r\n    if (!this.positionX || !this.positionY) {\r\n      this.stopClick = false;\r\n      return;\r\n    }\r\n    const newPositionX = event.pageX;\r\n    const newPositionY = event.pageY;\r\n\r\n    const newTotal = newPositionX + newPositionY;\r\n    const oldTotal = this.positionX + this.positionY;\r\n\r\n    this.stopClick = Math.abs(oldTotal - newTotal) > this.moveThreshold;\r\n    this.positionX = null;\r\n    this.positionY = null;\r\n  }\r\n\r\n  private doMove(event: MouseEvent) {\r\n    if (this.stopClick) { return; }\r\n\r\n    const button = event.target as HTMLButtonElement;\r\n    const buttonOffset = button.getBoundingClientRect().left;\r\n    const buttonWidth = button.getBoundingClientRect().width;\r\n    const headerOffset = this.header.getBoundingClientRect().left;\r\n    const headerWidth = this.header.getBoundingClientRect().width;\r\n\r\n    const currentPosition = buttonOffset + buttonWidth / 2;\r\n    const moveTo = headerOffset + headerWidth / 2;\r\n\r\n    this.header.scrollLeft += currentPosition - moveTo;\r\n  }\r\n}\r\n","import { Language } from '../../../../shared/models/eav';\r\n\r\nexport interface LanguageButton extends Language {\r\n  buttonText: string;\r\n}\r\n\r\n/** Calculates properties of language buttons, e.g. name to be desplayed */\r\nexport function calculateLanguageButtons(languages: Language[]): LanguageButton[] {\r\n  const languageButtons: LanguageButton[] = [];\r\n  const regionlessNamesCount: { [key: string]: number } = {};\r\n\r\n  // count the number of repetitions of the same language without region key\r\n  // e.g. English (United States) and English (Australia) are both English\r\n  languages.forEach(language => {\r\n    const regionlessName = removeRegionName(language.name);\r\n    if (regionlessNamesCount[regionlessName]) {\r\n      regionlessNamesCount[regionlessName]++;\r\n    } else {\r\n      regionlessNamesCount[regionlessName] = 1;\r\n    }\r\n  });\r\n\r\n  // if language repeats, append language key to name which will be displayed\r\n  languages.forEach(language => {\r\n    const regionlessName = removeRegionName(language.name);\r\n\r\n    languageButtons.push({\r\n      name: language.name,\r\n      key: language.key,\r\n      buttonText: (regionlessNamesCount[regionlessName] > 1) ? `${regionlessName} (${language.key})` : regionlessName,\r\n    });\r\n  });\r\n\r\n  return languageButtons;\r\n}\r\n\r\n/** Returns name without region, e.g. ENGLISH from English (United Stated) */\r\nfunction removeRegionName(languageName: string): string {\r\n  return languageName.substring(0, languageName.indexOf('(') > 0 ? languageName.indexOf('(') - 1 : 100).toLocaleUpperCase();\r\n}\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../../../shared/element-event-listener.model';\r\n\r\nexport class MouseScrollHelper {\r\n  private oldScrollBehavior: string;\r\n  private positionX: number;\r\n  private headerDownListener: ElementEventListener;\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n    private areButtonsDisabled: () => boolean\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      const registerScroll = this.registerScroll.bind(this);\r\n      this.header.addEventListener('pointerdown', registerScroll, { passive: true });\r\n      this.headerDownListener = { element: this.header, type: 'pointerdown', listener: registerScroll };\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.headerDownListener.element.removeEventListener(this.headerDownListener.type, this.headerDownListener.listener);\r\n      this.headerDownListener = null;\r\n      this.eventListeners.forEach(evList => {\r\n        evList.element.removeEventListener(evList.type, evList.listener);\r\n        evList = null;\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n    this.ngZone = null;\r\n    this.header = null;\r\n    this.areButtonsDisabled = null;\r\n  }\r\n\r\n  private registerScroll(event: MouseEvent) {\r\n    const disabled = this.areButtonsDisabled();\r\n    if (disabled || event.button !== 0) { return; }\r\n\r\n    window.getSelection().removeAllRanges();\r\n    this.oldScrollBehavior = getComputedStyle(this.header).getPropertyValue('scroll-behavior');\r\n\r\n    this.header.style.scrollBehavior = 'auto';\r\n    this.positionX = event.pageX;\r\n\r\n    const doScroll = this.doScroll.bind(this);\r\n    const removeScroll = this.removeScroll.bind(this);\r\n    document.addEventListener('pointermove', doScroll, { passive: true });\r\n    document.addEventListener('pointerup', removeScroll, { passive: true });\r\n    document.addEventListener('pointerleave', removeScroll, { passive: true });\r\n    this.eventListeners.push(\r\n      { element: document, type: 'pointermove', listener: doScroll },\r\n      { element: document, type: 'pointerup', listener: removeScroll },\r\n      { element: document, type: 'pointerleave', listener: removeScroll },\r\n    );\r\n  }\r\n\r\n  private removeScroll() {\r\n    this.header.style.scrollBehavior = this.oldScrollBehavior;\r\n\r\n    this.eventListeners.forEach(evList => {\r\n      evList.element.removeEventListener(evList.type, evList.listener);\r\n      evList = null;\r\n    });\r\n    this.eventListeners.splice(0, this.eventListeners.length);\r\n  }\r\n\r\n  private doScroll(event: MouseEvent) {\r\n    const newPositionX = event.pageX;\r\n    if (newPositionX < this.positionX) {\r\n      this.header.scrollLeft += this.positionX - newPositionX;\r\n    } else if (newPositionX > this.positionX) {\r\n      this.header.scrollLeft += -(newPositionX - this.positionX);\r\n    }\r\n    this.positionX = newPositionX;\r\n  }\r\n}\r\n","import { NgZone } from '@angular/core';\r\nimport { ElementEventListener } from '../../../../../shared/element-event-listener.model';\r\n\r\nexport class ShowShadowsHelper {\r\n  private maxScrollLeft: number;\r\n  private hidden = 'hidden'; // CSS class which hides shadows\r\n  private eventListeners: ElementEventListener[] = [];\r\n\r\n  constructor(\r\n    private ngZone: NgZone,\r\n    private header: HTMLElement,\r\n    private leftShadow: HTMLElement,\r\n    private rightShadow: HTMLElement,\r\n  ) {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.calculateShadows();\r\n\r\n      const calculateShadows = this.calculateShadows.bind(this);\r\n      this.header.addEventListener('scroll', calculateShadows, { passive: true });\r\n      window.addEventListener('resize', calculateShadows, { passive: true });\r\n      this.eventListeners.push(\r\n        { element: this.header, type: 'scroll', listener: calculateShadows },\r\n        { element: window, type: 'resize', listener: calculateShadows },\r\n      );\r\n    });\r\n  }\r\n\r\n  destroy() {\r\n    this.ngZone.runOutsideAngular(() => {\r\n      this.eventListeners.forEach(evList => {\r\n        evList.element.removeEventListener(evList.type, evList.listener);\r\n        evList = null;\r\n      });\r\n      this.eventListeners = null;\r\n    });\r\n    this.ngZone = null;\r\n    this.header = null;\r\n    this.leftShadow = null;\r\n    this.rightShadow = null;\r\n  }\r\n\r\n  private calculateShadows() {\r\n    this.maxScrollLeft = this.header.scrollWidth - this.header.clientWidth;\r\n\r\n    if (this.maxScrollLeft === 0) {\r\n      this.hideBoth();\r\n    } else if (this.header.scrollLeft === 0) {\r\n      this.hideLeft();\r\n    } else if (this.header.scrollLeft === this.maxScrollLeft) {\r\n      this.hideRight();\r\n    } else {\r\n      this.showBoth();\r\n    }\r\n  }\r\n\r\n  private hideBoth() {\r\n    this.leftShadow.classList.add(this.hidden);\r\n    this.rightShadow.classList.add(this.hidden);\r\n  }\r\n\r\n  private hideLeft() {\r\n    this.leftShadow.classList.add(this.hidden);\r\n    this.rightShadow.classList.remove(this.hidden);\r\n  }\r\n\r\n  private hideRight() {\r\n    this.leftShadow.classList.remove(this.hidden);\r\n    this.rightShadow.classList.add(this.hidden);\r\n  }\r\n\r\n  private showBoth() {\r\n    this.leftShadow.classList.remove(this.hidden);\r\n    this.rightShadow.classList.remove(this.hidden);\r\n  }\r\n}\r\n","<div class=\"scrollable__overlay\" *ngIf=\"{\r\n  currentLanguage: currentLanguage$ | async\r\n} as data\">\r\n  <div #leftShadow class=\"scrollable__overlay--left-shadow\"></div>\r\n  <div #rightShadow class=\"scrollable__overlay--right-shadow\"></div>\r\n  <div #scrollable class=\"scrollable lang-switch\" [matTooltip]=\"'Message.CantSwitchLanguage' | translate\"\r\n    [matTooltipDisabled]=\"!disabled\">\r\n    <button mat-flat-button class=\"lang-switch__button\" *ngFor=\"let langButton of (languageButtons$ | async)\"\r\n      [disabled]=\"disabled && data.currentLanguage !== langButton.key\"\r\n      [color]=\"data.currentLanguage === langButton.key ? 'accent' : 'white'\" (mousedown)=\"lngButtonMouseDown($event)\"\r\n      (click)=\"lngButtonClick($event, langButton)\" [matTooltip]=\"langButton.name\" [matTooltipDisabled]=\"disabled\">\r\n      {{ langButton.buttonText }}\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, Input, NgZone, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Language } from '../../../shared/models/eav';\r\nimport { LanguageInstanceService } from '../../../shared/store/ngrx-data/language-instance.service';\r\nimport { LanguageService } from '../../../shared/store/ngrx-data/language.service';\r\nimport { CenterSelectedHelper } from './eav-language-switcher-services/center-selected-helper';\r\nimport { calculateLanguageButtons, LanguageButton } from './eav-language-switcher-services/eav-language-switcher.helpers';\r\nimport { MouseScrollHelper } from './eav-language-switcher-services/mouse-scroll-helper';\r\nimport { ShowShadowsHelper } from './eav-language-switcher-services/show-shadows-helper';\r\n\r\n@Component({\r\n  selector: 'app-eav-language-switcher',\r\n  templateUrl: './eav-language-switcher.component.html',\r\n  styleUrls: ['./eav-language-switcher.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class EavLanguageSwitcherComponent implements OnInit, AfterViewInit, OnDestroy {\r\n  @ViewChild('scrollable') private headerRef: ElementRef;\r\n  @ViewChild('leftShadow') private leftShadowRef: ElementRef;\r\n  @ViewChild('rightShadow') private rightShadowRef: ElementRef;\r\n  @Input() private formId: number;\r\n  @Input() disabled: boolean;\r\n\r\n  languageButtons$: Observable<LanguageButton[]>;\r\n  currentLanguage$: Observable<string>;\r\n\r\n  private centerSelectedService: CenterSelectedHelper;\r\n  private mouseScrollHelper: MouseScrollHelper;\r\n  private showShadowsService: ShowShadowsHelper;\r\n\r\n  constructor(\r\n    private languageService: LanguageService,\r\n    private languageInstanceService: LanguageInstanceService,\r\n    private ngZone: NgZone,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.languageButtons$ = this.languageService.entities$.pipe(map(langs => calculateLanguageButtons(langs)));\r\n    this.currentLanguage$ = this.languageInstanceService.getCurrentLanguage(this.formId);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.showShadowsService = new ShowShadowsHelper(this.ngZone, this.headerRef.nativeElement,\r\n      this.leftShadowRef.nativeElement, this.rightShadowRef.nativeElement);\r\n    this.mouseScrollHelper = new MouseScrollHelper(this.ngZone, this.headerRef.nativeElement, this.areButtonsDisabled.bind(this));\r\n    this.centerSelectedService = new CenterSelectedHelper(this.ngZone, this.headerRef.nativeElement);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.centerSelectedService.destroy();\r\n    this.mouseScrollHelper.destroy();\r\n    this.showShadowsService.destroy();\r\n  }\r\n\r\n  lngButtonMouseDown(event: MouseEvent) {\r\n    this.centerSelectedService.lngButtonDown(event);\r\n  }\r\n\r\n  lngButtonClick(event: MouseEvent, language: Language) {\r\n    if (this.disabled) { return; }\r\n    this.centerSelectedService.lngButtonClick(event);\r\n\r\n    if (!this.centerSelectedService.stopClickIfMouseMoved()) {\r\n      this.languageInstanceService.updateCurrentLanguage(this.formId, language.key);\r\n    }\r\n  }\r\n\r\n  private areButtonsDisabled() {\r\n    return this.disabled;\r\n  }\r\n}\r\n","<mat-card class=\"header\">\r\n  <button mat-icon-button class=\"header__exit-button\" (click)=\"close()\"\r\n    [matTooltip]=\"(isParentDialog ? 'Form.Buttons.Exit.Tip' : 'Form.Buttons.Return.Tip') | translate\">\r\n    <mat-icon>{{ isParentDialog ? 'clear' : 'arrow_back' }}</mat-icon>\r\n  </button>\r\n\r\n  <div *ngIf=\"isCopy\" class=\"header__copy\">{{ 'ItemCard.CopyHint' | translate }}</div>\r\n\r\n  <div class=\"header__langs\">\r\n    <app-eav-language-switcher *ngIf=\"hasLanguages$ | async\" [formId]=\"formId\"\r\n      [disabled]=\"!formsAreValid && !allControlsAreDisabled\">\r\n    </app-eav-language-switcher>\r\n  </div>\r\n\r\n  <button mat-button class=\"header__publish-button\" (click)=\"openSaveStatusDialog()\"\r\n    [matTooltip]=\"'SaveMode.' + publishMode + '.Tip' | translate\">\r\n    <span class=\"header__publish-mode\">\r\n      {{ 'SaveMode.Label' | translate }}\r\n      <b>{{ ('SaveMode.' + publishMode | translate: '').toUpperCase() }}</b>\r\n    </span>\r\n  </button>\r\n</mat-card>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { map } from 'rxjs/operators';\r\nimport { SaveStatusDialogComponent } from '../../eav-material-controls/dialogs/save-status-dialog/save-status-dialog.component';\r\nimport { LanguageService } from '../../shared/store/ngrx-data/language.service';\r\nimport { PublishMode } from '../multi-item-edit-form/multi-item-edit-form.constants';\r\n\r\n@Component({\r\n  selector: 'app-multi-item-edit-form-header',\r\n  templateUrl: './multi-item-edit-form-header.component.html',\r\n  styleUrls: ['./multi-item-edit-form-header.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MultiItemEditFormHeaderComponent implements OnInit {\r\n  @Input() formId: number;\r\n  @Input() isCopy: boolean;\r\n  @Input() formsAreValid: boolean;\r\n  @Input() allControlsAreDisabled: boolean;\r\n  @Input() isParentDialog: boolean;\r\n  @Input() publishMode: PublishMode;\r\n  @Output() private closeDialog = new EventEmitter<null>();\r\n  @Output() private setPublishMode = new EventEmitter<PublishMode>();\r\n\r\n  hasLanguages$ = this.languageService.entities$.pipe(map(languages => languages.length > 0));\r\n\r\n  constructor(private dialog: MatDialog, private languageService: LanguageService) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  close() {\r\n    this.closeDialog.emit();\r\n  }\r\n\r\n  openSaveStatusDialog() {\r\n    const dialogRef = this.dialog.open(SaveStatusDialogComponent, {\r\n      panelClass: 'c-save-status-dialog',\r\n      autoFocus: false,\r\n      width: '350px',\r\n      data: this.publishMode\r\n    });\r\n    dialogRef.keydownEvents().subscribe(e => {\r\n      const CTRL_S = e.keyCode === 83 && (navigator.platform.match('Mac') ? e.metaKey : e.ctrlKey);\r\n      if (!CTRL_S) { return; }\r\n      e.preventDefault();\r\n    });\r\n    dialogRef.afterClosed().subscribe((res: PublishMode) => {\r\n      if (res == null) { return; }\r\n      this.setPublishMode.emit(res);\r\n    });\r\n  }\r\n}\r\n","<mat-card fxLayout=\"column\" fxLayoutAlign=\"center start\" *ngIf=\"templateVars$ | async as data\"\r\n  [ngClass]=\"{ 'debug-enabled': showDebugInfo }\">\r\n  <div class=\"debug-buttons-container\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\r\n    <button mat-icon-button [matTooltip]=\"'General.Buttons.Debug' | translate\" (click)=\"toggleDebugInfo()\">\r\n      <mat-icon>offline_bolt</mat-icon>\r\n    </button>\r\n    <div>2sxc {{ sxcVer }}</div>\r\n    <!-- copy of the button to keep 2sxc version text correctly aligned in the middle -->\r\n    <button mat-icon-button class=\"hidden\">\r\n      <mat-icon>offline_bolt</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div *ngIf=\"showDebugInfo\" class=\"debug-info-container\">\r\n    <textarea readonly class=\"debug-dump\">{{ data.items | json }}</textarea>\r\n  </div>\r\n</mat-card>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { combineLatest } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ItemService } from '../../shared/store/ngrx-data/item.service';\r\n\r\ndeclare const sxcVersion: string;\r\n\r\n@Component({\r\n  selector: 'app-multi-item-edit-form-debug',\r\n  templateUrl: './multi-item-edit-form-debug.component.html',\r\n  styleUrls: ['./multi-item-edit-form-debug.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MultiItemEditFormDebugComponent implements OnInit {\r\n  @Output() private debugInfoOpened = new EventEmitter<boolean>();\r\n\r\n  sxcVer = sxcVersion.substring(0, sxcVersion.lastIndexOf('.'));\r\n  showDebugInfo = false;\r\n\r\n  private items$ = this.itemService.selectAllItems();\r\n  templateVars$ = combineLatest([this.items$]).pipe(map(([items]) => ({ items })));\r\n\r\n  constructor(private itemService: ItemService) { }\r\n\r\n  ngOnInit() { }\r\n\r\n  toggleDebugInfo() {\r\n    this.showDebugInfo = !this.showDebugInfo;\r\n    this.debugInfoOpened.emit(this.showDebugInfo);\r\n  }\r\n}\r\n","<router-outlet></router-outlet>\r\n\r\n<ng-container *ngIf=\"{\r\n  items: items$ | async,\r\n  isCopy: isCopy$ | async,\r\n  enableHistory: enableHistory$ | async,\r\n  formsAreValid: formsAreValid$ | async,\r\n  allControlsAreDisabled: allControlsAreDisabled$ | async,\r\n  publishMode: publishMode$ | async,\r\n  reduceSaveButton: reduceSaveButton$ | async,\r\n  debugEnabled: debugEnabled$ | async,\r\n  debugInfoIsOpen: debugInfoIsOpen$ | async,\r\n  hideHeader: hideHeader$ | async,\r\n  slide: slide$ | async,\r\n  eavConfigLoaded: eavConfigLoaded$ | async\r\n} as data\">\r\n\r\n  <div mat-dialog-container style=\"position: relative\" appToggleDebug *ngIf=\"data.eavConfigLoaded\">\r\n    <div mat-dialog-actions class=\"form-header-container\" [ngClass]=\"{ 'u-display-none': data.hideHeader }\">\r\n      <app-multi-item-edit-form-header class=\"multi-item-edit-form-header\" [formId]=\"formId\" [isCopy]=\"data.isCopy\"\r\n        [formsAreValid]=\"data.formsAreValid\" [allControlsAreDisabled]=\"data.allControlsAreDisabled\"\r\n        [isParentDialog]=\"isParentDialog\" [publishMode]=\"data.publishMode\" (closeDialog)=\"closeDialog()\"\r\n        (setPublishMode)=\"setPublishMode($event)\">\r\n      </app-multi-item-edit-form-header>\r\n    </div>\r\n    <div style=\"position: relative\">\r\n      <div mat-dialog-content class=\"u-hide-scrollbar\" [ngClass]=\"{\r\n        'debug-enabled': data.debugEnabled,\r\n        'debug-info-is-open': data.debugInfoIsOpen,\r\n        'hide-header-height-fix': data.hideHeader\r\n      }\">\r\n        <div class=\"mdc-layout-grid\">\r\n          <div class=\"mdc-layout-grid__inner\">\r\n            <div #slideable class=\"mdc-layout-grid__cell--span-12\" [ngClass]=\"data.slide\">\r\n              <div *ngFor=\"let item of data.items; trackBy: trackByFn\">\r\n                <app-item-edit-form [item]=\"item\" [formId]=\"formId\" [enableHistory]=\"data.enableHistory\"\r\n                  (itemFormValueChange)=\"formValueChange()\">\r\n                </app-item-edit-form>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <div class=\"c-multi-item-dialog__save-container\">\r\n          <div class=\"c-multi-item-dialog__save-button\">\r\n            <button mat-fab class=\"mat-elevation-z24\" [matTooltip]=\"'Form.Buttons.Save.Tip' | translate\" [ngClass]=\"{\r\n              'mat-fab--compact' : data.reduceSaveButton,\r\n              'mat-fab--extended' : !data.reduceSaveButton,\r\n              'mat-fab--disabled' : !data.formsAreValid && !data.allControlsAreDisabled\r\n            }\" (click)=\"saveAll(true)\">\r\n              <mat-icon>done</mat-icon>\r\n              {{ data.reduceSaveButton ? '' : ('Form.Buttons.Save' | translate).toUpperCase() }}\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <app-multi-item-edit-form-debug mat-dialog-actions *ngIf=\"data.debugEnabled\"\r\n      (debugInfoOpened)=\"debugInfoOpened($event)\">\r\n    </app-multi-item-edit-form-debug>\r\n  </div>\r\n</ng-container>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AfterViewChecked, ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Actions, ofType } from '@ngrx/effects';\r\nimport { Action } from '@ngrx/store';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport 'reflect-metadata';\r\nimport { BehaviorSubject, fromEvent, merge, Observable, of, Subscription, zip } from 'rxjs';\r\nimport { catchError, delay, filter, map, pairwise, switchMap, take, tap } from 'rxjs/operators';\r\nimport { angularConsoleLog } from '../../../ng-dialogs/src/app/shared/helpers/angular-console-log.helper';\r\nimport { convertUrlToForm } from '../../../ng-dialogs/src/app/shared/helpers/url-prep.helper';\r\nimport { SnackBarSaveErrorsComponent } from '../../eav-material-controls/dialogs/snack-bar-save-errors/snack-bar-save-errors.component';\r\nimport { SaveErrorsSnackData } from '../../eav-material-controls/dialogs/snack-bar-save-errors/snack-bar-save-errors.models';\r\nimport { SnackBarUnsavedChangesComponent } from '../../eav-material-controls/dialogs/snack-bar-unsaved-changes/snack-bar-unsaved-changes.component';\r\nimport { UnsavedChangesSnackData } from '../../eav-material-controls/dialogs/snack-bar-unsaved-changes/snack-bar-unsaved-changes.models';\r\nimport { ValidationMessagesService } from '../../eav-material-controls/validators/validation-messages-service';\r\nimport { EditParams } from '../../edit-matcher.models';\r\nimport { Item, Language } from '../../shared/models/eav';\r\nimport { FieldErrorMessage } from '../../shared/models/eav/field-error-message';\r\nimport { JsonItem1 } from '../../shared/models/json-format-v1';\r\nimport { EavService } from '../../shared/services/eav.service';\r\nimport { EditRoutingService } from '../../shared/services/edit-routing.service';\r\nimport { GlobalConfigService } from '../../shared/services/global-configuration.service';\r\nimport { LoadIconsService } from '../../shared/services/load-icons.service';\r\nimport * as fromItems from '../../shared/store/actions/item.actions';\r\nimport { ContentTypeItemService } from '../../shared/store/ngrx-data/content-type-item.service';\r\nimport { ContentTypeService } from '../../shared/store/ngrx-data/content-type.service';\r\nimport { FeatureService } from '../../shared/store/ngrx-data/feature.service';\r\nimport { InputTypeService } from '../../shared/store/ngrx-data/input-type.service';\r\nimport { ItemService } from '../../shared/store/ngrx-data/item.service';\r\nimport { LanguageInstanceService } from '../../shared/store/ngrx-data/language-instance.service';\r\nimport { LanguageService } from '../../shared/store/ngrx-data/language.service';\r\nimport { ItemEditFormComponent } from '../item-edit-form/item-edit-form.component';\r\nimport { PublishMode, PublishModeConstants } from './multi-item-edit-form.constants';\r\nimport { calculateIsParentDialog, sortLanguages } from './multi-item-edit-form.helpers';\r\n\r\n@Component({\r\n  selector: 'app-multi-item-edit-form',\r\n  templateUrl: './multi-item-edit-form.component.html',\r\n  styleUrls: ['./multi-item-edit-form.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MultiItemEditFormComponent implements OnInit, OnDestroy, AfterViewChecked {\r\n  @ViewChildren(ItemEditFormComponent) private itemEditFormRefs: QueryList<ItemEditFormComponent>;\r\n  @ViewChild('slideable') private slideableRef: ElementRef<HTMLDivElement>;\r\n\r\n  isParentDialog = calculateIsParentDialog(this.route);\r\n  formId = Math.floor(Math.random() * 99999);\r\n  isCopy$ = new BehaviorSubject(false);\r\n  enableHistory$ = new BehaviorSubject(false);\r\n  formsAreValid$ = new BehaviorSubject(false);\r\n  allControlsAreDisabled$ = new BehaviorSubject(true);\r\n  items$: Observable<Item[]>;\r\n\r\n  publishMode$ = new BehaviorSubject<PublishMode>('hide');\r\n  reduceSaveButton$ = new BehaviorSubject(false);\r\n  hideHeader$ = this.languageInstanceService.getHideHeader(this.formId);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled().pipe(\r\n    tap(debugEnabled => {\r\n      if (this.debugInfoIsOpen$.value && !debugEnabled) {\r\n        this.debugInfoIsOpen$.next(false);\r\n      }\r\n    })\r\n  );\r\n  debugInfoIsOpen$ = new BehaviorSubject(false);\r\n  slide$: Observable<string>;\r\n  eavConfigLoaded$ = new BehaviorSubject(false);\r\n\r\n  private formErrors: { [key: string]: string }[] = [];\r\n  private formsAreDirty: { [key: string]: boolean } = {};\r\n  private formSaveAllObservables$: Observable<Action>[] = [];\r\n  private createMode = false;\r\n  private formIsSaved = false;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<MultiItemEditFormComponent>,\r\n    private actions$: Actions,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n    private contentTypeItemService: ContentTypeItemService,\r\n    private contentTypeService: ContentTypeService,\r\n    private globalConfigService: GlobalConfigService,\r\n    private eavService: EavService,\r\n    private featureService: FeatureService,\r\n    private inputTypeService: InputTypeService,\r\n    private itemService: ItemService,\r\n    private languageService: LanguageService,\r\n    private languageInstanceService: LanguageInstanceService,\r\n    private snackBar: MatSnackBar,\r\n    private translate: TranslateService,\r\n    private validationMessagesService: ValidationMessagesService,\r\n    private loadIconsService: LoadIconsService,\r\n    private route: ActivatedRoute,\r\n    private editRoutingService: EditRoutingService,\r\n  ) {\r\n    this.editRoutingService.init(this.route, this.formId, this.dialogRef);\r\n    this.loadIconsService.load();\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchFormData();\r\n  }\r\n\r\n  ngAfterViewChecked() {\r\n    this.attachAllSaveFormObservables();\r\n    this.changeDetectorRef.detectChanges(); // 2020-06-19 SPM TODO: remove when form is stable. ATM a whole lot of stuff breaks without it\r\n    this.initSlider();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.isCopy$.complete();\r\n    this.enableHistory$.complete();\r\n    this.reduceSaveButton$.complete();\r\n    this.debugInfoIsOpen$.complete();\r\n    this.formsAreValid$.complete();\r\n    this.allControlsAreDisabled$.complete();\r\n    this.publishMode$.complete();\r\n    this.eavConfigLoaded$.complete();\r\n    this.subscriptions.forEach(subscription => { subscription.unsubscribe(); });\r\n    this.languageInstanceService.removeLanguageInstance(this.formId);\r\n    this.editRoutingService.ngOnDestroy();\r\n\r\n    if (this.isParentDialog) {\r\n      // clear the rest of the store\r\n      this.languageInstanceService.clearCache();\r\n      this.languageService.clearCache();\r\n      this.itemService.clearCache();\r\n      this.inputTypeService.clearCache();\r\n      this.featureService.clearCache();\r\n      this.contentTypeItemService.clearCache();\r\n      this.contentTypeService.clearCache();\r\n    }\r\n  }\r\n\r\n  /** Close form dialog or if close is disabled show a message */\r\n  closeDialog(saveResult?: any) {\r\n    if (this.dialogRef.disableClose) {\r\n      this.snackBarYouHaveUnsavedChanges();\r\n    } else {\r\n      this.dialogRef.close(this.createMode ? saveResult : undefined);\r\n    }\r\n  }\r\n\r\n  setPublishMode(publishMode: PublishMode) {\r\n    // if publish mode is prohibited, revert to default\r\n    if (this.eavService.eavConfig.versioningOptions[publishMode] == null) {\r\n      publishMode = Object.keys(this.eavService.eavConfig.versioningOptions)[0] as PublishMode;\r\n    }\r\n    this.publishMode$.next(publishMode);\r\n  }\r\n\r\n  trackByFn(index: number, item: Item) {\r\n    return item.entity.id === 0 ? item.entity.guid : item.entity.id;\r\n  }\r\n\r\n  formValueChange() {\r\n    this.checkFormsState();\r\n    this.formErrors = [];\r\n  }\r\n\r\n  /** Save all forms */\r\n  saveAll(close: boolean) {\r\n    this.eavService.forceConnectorSave$.next();\r\n    // start gathering submit data with a timeout to let custom components which run outside Angular zone to save their values\r\n    setTimeout(() => {\r\n      if (this.formsAreValid$.value || this.allControlsAreDisabled$.value) {\r\n        this.itemEditFormRefs.forEach(itemEditFormComponent => {\r\n          itemEditFormComponent.form.submitOutside();\r\n        });\r\n        angularConsoleLog('saveAll', close);\r\n        this.snackBar.open(this.translate.instant('Message.Saving'), null, { duration: 2000 });\r\n        if (close) { this.formIsSaved = true; }\r\n      } else {\r\n        this.calculateAllValidationMessages();\r\n        const fieldErrors: FieldErrorMessage[] = [];\r\n        this.formErrors.forEach(formError => {\r\n          Object.keys(formError).forEach(key => {\r\n            fieldErrors.push({ field: key, message: formError[key] });\r\n          });\r\n        });\r\n        const data: SaveErrorsSnackData = {\r\n          fieldErrors,\r\n        };\r\n        this.snackBar.openFromComponent(SnackBarSaveErrorsComponent, {\r\n          data,\r\n          duration: 5000,\r\n        });\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  debugInfoOpened(opened: boolean) {\r\n    this.debugInfoIsOpen$.next(opened);\r\n  }\r\n\r\n  private fetchFormData() {\r\n    const form = convertUrlToForm((this.route.snapshot.params as EditParams).items);\r\n    const editItems = JSON.stringify(form.items);\r\n    this.eavService.fetchFormData(editItems).subscribe(formData => {\r\n      setTimeout(() => { this.reduceSaveButton$.next(true); }, 5000);\r\n      this.itemService.loadItems(formData.Items);\r\n      // we assume that input type and content type data won't change between loading parent and child forms\r\n      this.inputTypeService.addInputTypes(formData.InputTypes);\r\n      this.contentTypeItemService.addContentTypeItems(formData.ContentTypeItems);\r\n      this.contentTypeService.addContentTypes(formData.ContentTypes);\r\n      this.featureService.loadFeatures(formData.Features);\r\n\r\n      this.eavService.setEavConfig(formData.Context);\r\n      this.eavConfigLoaded$.next(true);\r\n      const isoLangCode = this.eavService.eavConfig.lang.split('-')[0];\r\n      this.translate.use(isoLangCode);\r\n      // Load language data only for parent dialog to not overwrite languages when opening child dialogs\r\n      if (this.isParentDialog) {\r\n        const langs = this.eavService.eavConfig.langs;\r\n        const eavLangs: Language[] = Object.keys(langs).map(key => ({ key, name: langs[key] }));\r\n        const sortedLanguages = sortLanguages(this.eavService.eavConfig.langPri, eavLangs);\r\n        this.languageService.loadLanguages(sortedLanguages);\r\n      }\r\n      this.languageInstanceService.addLanguageInstance(this.formId, this.eavService.eavConfig.lang,\r\n        this.eavService.eavConfig.langPri, this.eavService.eavConfig.lang, false);\r\n\r\n      const publishMode: PublishMode = formData.DraftShouldBranch\r\n        ? PublishModeConstants.Branch\r\n        : formData.IsPublished ? PublishModeConstants.Show : PublishModeConstants.Hide;\r\n      this.setPublishMode(publishMode);\r\n\r\n      // if current language !== default language check whether default language has value in all items\r\n      if (this.eavService.eavConfig.lang !== this.eavService.eavConfig.langPri) {\r\n        const valuesExistInDefaultLanguage = this.itemService.valuesExistInDefaultLanguage(\r\n          formData.Items.map(item => (item.Entity.Id === 0 ? item.Entity.Guid : item.Entity.Id)),\r\n          this.eavService.eavConfig.langPri,\r\n          this.inputTypeService,\r\n          this.contentTypeService,\r\n        );\r\n        if (!valuesExistInDefaultLanguage) {\r\n          this.languageInstanceService.updateCurrentLanguage(this.formId, this.eavService.eavConfig.langPri);\r\n          const message = this.translate.instant('Message.SwitchedLanguageToDefault', { language: this.eavService.eavConfig.langPri });\r\n          this.snackBar.open(message, null, { duration: 5000 });\r\n        }\r\n      }\r\n\r\n      this.items$ = this.itemService\r\n        .selectItemsByIdList(formData.Items.map(item => (item.Entity.Id === 0 ? item.Entity.Guid : item.Entity.Id)))\r\n        // spm TODO: added a small delay to calculate fields a bit later than languages to make form opening feel smoother.\r\n        // Remove if calculating fields gets faster\r\n        .pipe(delay(0));\r\n      this.items$.pipe(take(1)).subscribe(items => {\r\n        if (items?.[0].entity.id === 0) {\r\n          this.createMode = true;\r\n          if (items[0].header.DuplicateEntity != null) {\r\n            this.isCopy$.next(true);\r\n          }\r\n        }\r\n        const enableHistory = !this.createMode && this.route.snapshot.data.history !== false;\r\n        this.enableHistory$.next(enableHistory);\r\n      });\r\n\r\n      this.languageChangeSubscribe();\r\n      this.dialogBackdropClickSubscribe();\r\n      this.saveFormMessagesSubscribe();\r\n      this.formSetValueChangeSubscribe();\r\n    });\r\n  }\r\n\r\n  private initSlider() {\r\n    if (this.slideableRef == null || this.slide$ != null) { return; }\r\n    this.slide$ = merge(\r\n      this.languageInstanceService.getCurrentLanguage(this.formId).pipe(\r\n        pairwise(),\r\n        map(([previousLang, currentLang]) => {\r\n          let languages: Language[];\r\n          this.languageService.entities$.pipe(take(1)).subscribe(langs => {\r\n            languages = langs;\r\n          });\r\n          const previousLangIndex = languages.findIndex(lang => lang.key === previousLang);\r\n          const currentLangIndex = languages.findIndex(lang => lang.key === currentLang);\r\n          const slide = (previousLangIndex > currentLangIndex) ? 'previous' : 'next';\r\n          return slide;\r\n        }),\r\n      ),\r\n      fromEvent(this.slideableRef.nativeElement, 'animationend').pipe(\r\n        filter((event: AnimationEvent) => event.animationName === 'move-next' || event.animationName === 'move-previous'),\r\n        map(() => ''),\r\n        delay(0), // small delay because animationend fires a bit too early\r\n      ),\r\n    );\r\n  }\r\n\r\n  private languageChangeSubscribe() {\r\n    this.subscriptions.push(\r\n      this.languageInstanceService.getCurrentLanguage(this.formId).subscribe(language => {\r\n        this.formErrors = []; // on current language change reset form errors\r\n      }),\r\n    );\r\n  }\r\n\r\n  private dialogBackdropClickSubscribe() {\r\n    this.subscriptions.push(\r\n      fromEvent(window, 'beforeunload').subscribe((event: BeforeUnloadEvent) => {\r\n        if (!this.dialogRef.disableClose) { return; }\r\n        event.preventDefault();\r\n        event.returnValue = ''; // fix for Chrome\r\n        this.snackBarYouHaveUnsavedChanges();\r\n      })\r\n    );\r\n\r\n    this.dialogRef.backdropClick().subscribe(event => {\r\n      this.closeDialog();\r\n    });\r\n\r\n    this.dialogRef.keydownEvents().subscribe(event => {\r\n      const ESCAPE = event.keyCode === 27;\r\n      if (ESCAPE) {\r\n        this.closeDialog();\r\n        return;\r\n      }\r\n      const CTRL_S = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.keyCode === 83;\r\n      if (CTRL_S) {\r\n        event.preventDefault();\r\n        this.saveAll(false);\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Display form messages on form success or form error.\r\n   * Imortant: this is subscribed to an all open dialogs, a forms are distinguished by this.formIsSaved variable.\r\n   * TODO: need to distinguished form by forms data\r\n   */\r\n  private saveFormMessagesSubscribe() {\r\n    this.subscriptions.push(\r\n      this.actions$\r\n        .pipe(ofType(fromItems.SAVE_ITEM_ATTRIBUTES_VALUES_SUCCESS))\r\n        .subscribe((action: fromItems.SaveItemAttributesValuesSuccessAction) => {\r\n          this.itemService.updateItemId(action.data);\r\n          angularConsoleLog('success END: ', action.data);\r\n          this.snackBar.open(this.translate.instant('Message.Saved'), null, { duration: 2000 });\r\n          this.dialogRef.disableClose = false;\r\n          if (this.formIsSaved) {\r\n            this.closeDialog(action.data);\r\n          }\r\n        })\r\n    );\r\n    this.subscriptions.push(\r\n      this.actions$\r\n        .pipe(ofType(fromItems.SAVE_ITEM_ATTRIBUTES_VALUES_ERROR))\r\n        .subscribe((action: fromItems.SaveItemAttributesValuesErrorAction) => {\r\n          angularConsoleLog('error END', action.error);\r\n          this.snackBar.open('Error', null, { duration: 2000 });\r\n        })\r\n    );\r\n  }\r\n\r\n  private formSetValueChangeSubscribe() {\r\n    this.subscriptions.push(\r\n      this.eavService.formValueChange$.pipe(\r\n        filter(formSet => formSet.formId === this.formId)\r\n      ).subscribe(formSet => {\r\n        this.checkFormsState();\r\n      })\r\n    );\r\n  }\r\n\r\n  private checkFormsState() {\r\n    if (this.itemEditFormRefs?.length > 0 && this.itemEditFormRefs?.first.currentLanguage) {\r\n      let formsAreValid = true;\r\n      let allControlsAreDisabled = true;\r\n      this.formsAreDirty[this.itemEditFormRefs.first.currentLanguage] = false;\r\n\r\n      this.itemEditFormRefs.forEach(itemEditFormComponent => {\r\n        if (\r\n          itemEditFormComponent.form.form.invalid === true\r\n          && (!itemEditFormComponent.item.header.Group || itemEditFormComponent.item.header.Group.SlotCanBeEmpty === false)\r\n        ) {\r\n          formsAreValid = false;\r\n        }\r\n        if (itemEditFormComponent.form.form.dirty) {\r\n          this.formsAreDirty[itemEditFormComponent.currentLanguage] = true;\r\n        }\r\n        if (!itemEditFormComponent.checkAreAllControlsDisabled()) {\r\n          allControlsAreDisabled = false;\r\n        }\r\n      });\r\n\r\n      if (this.formsAreValid$.value !== formsAreValid) {\r\n        this.formsAreValid$.next(formsAreValid);\r\n      }\r\n\r\n      if (this.allControlsAreDisabled$.value !== allControlsAreDisabled) {\r\n        this.allControlsAreDisabled$.next(allControlsAreDisabled);\r\n      }\r\n    }\r\n    this.dialogRef.disableClose = this.areFormsDirtyAnyLanguage();\r\n  }\r\n\r\n  /** Determine is from is dirty on any language. If any form is dirty we need to ask to save */\r\n  private areFormsDirtyAnyLanguage() {\r\n    let isDirty = false;\r\n    const langKeys = Object.keys(this.formsAreDirty);\r\n    for (const langKey of langKeys) {\r\n      if (this.formsAreDirty[langKey] === true) {\r\n        isDirty = true;\r\n        break;\r\n      }\r\n    }\r\n    return isDirty;\r\n  }\r\n\r\n  /** Fill in all error validation messages from all forms */\r\n  private calculateAllValidationMessages() {\r\n    this.formErrors = [];\r\n    this.itemEditFormRefs?.forEach(itemEditFormComponent => {\r\n      if (!itemEditFormComponent.form.form.invalid) { return; }\r\n      this.formErrors.push(this.validationMessagesService.validateForm(itemEditFormComponent.form.form, false));\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Attach all save form observables from child itemEditFormComponent and\r\n   * subscribe to all observables with one subscribe (observable zip function).\r\n   * It also initially checks the status of the form (invalid, dirty ...)\r\n   */\r\n  private attachAllSaveFormObservables() {\r\n    if (this.formSaveAllObservables$.length === 0) {\r\n      this.itemEditFormRefs?.forEach(itemEditFormComponent => {\r\n        this.formSaveAllObservables$.push(itemEditFormComponent.formSaveObservable());\r\n      });\r\n\r\n      // only called once when a formSaveAllObservables array is filled\r\n      if (this.formSaveAllObservables$.length > 0) {\r\n        this.saveFormSubscribe();\r\n        this.checkFormsState();\r\n      }\r\n    }\r\n  }\r\n\r\n  /** With zip function look all forms submit observables and when all finish save all data */\r\n  private saveFormSubscribe() {\r\n    this.subscriptions.push(\r\n      zip(...this.formSaveAllObservables$)\r\n        .pipe(\r\n          switchMap((actions: fromItems.SaveItemAttributesValuesAction[]) => {\r\n            angularConsoleLog('ZIP ACTIONS ITEM: ', JsonItem1.create(actions[0].item));\r\n            const allItems: JsonItem1[] = [];\r\n            actions.forEach(action => {\r\n              const item = JsonItem1.create(action.item);\r\n              // do not try to save item which doesn't have any fields, nothing could have changed about it\r\n              if (Object.keys(item.Entity.Attributes).length > 0) {\r\n                allItems.push(item);\r\n              }\r\n            });\r\n            const body = {\r\n              Items: allItems,\r\n              IsPublished: this.publishMode$.value === PublishModeConstants.Show,\r\n              DraftShouldBranch: this.publishMode$.value === PublishModeConstants.Branch,\r\n            };\r\n            return this.eavService.saveFormData(JSON.stringify(body)).pipe(\r\n              map(data => {\r\n                this.eavService.saveItemSuccess(data);\r\n              }),\r\n              tap(data => angularConsoleLog('working'))\r\n            );\r\n          }),\r\n          catchError(err => of(this.eavService.saveItemError(err)))\r\n        )\r\n        .subscribe()\r\n    );\r\n  }\r\n\r\n  /** Open snackbar when snack bar not saved */\r\n  private snackBarYouHaveUnsavedChanges() {\r\n    const data: UnsavedChangesSnackData = {\r\n      save: false,\r\n    };\r\n    const snackBarRef = this.snackBar.openFromComponent(SnackBarUnsavedChangesComponent, {\r\n      data,\r\n      duration: 5000,\r\n    });\r\n\r\n    snackBarRef.onAction().subscribe(() => {\r\n      if (snackBarRef.containerInstance.snackBarConfig.data.save) {\r\n        this.saveAll(true);\r\n      } else {\r\n        this.dialogRef.disableClose = false;\r\n        this.closeDialog();\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}