{"version":3,"mappings":"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","names":["webApiFieldsRoot","webApiFieldsAll","ContentTypesFieldsService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","map","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","staticName","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","Object","All","reOrder","idArray","contentType","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","webApiTypeRoot","attributeId","rename","fieldId","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","StaticName","Index","SortOrder","updateInputType","id","field","i0","factory","static","defaultRoute","path","loadChildren","Promise","then","m","MetadataModule","data","title","targetType","keyType","key","dialogTitle","url","encodeURIComponent","getUrl","eavConstants","guid","GoToPermissions","getUrlEntity","s","PermissionsModule"],"sources":["./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/metadata/go-to-metadata.ts","./projects/eav-ui/src/app/permissions/go-to-permissions.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { InputTypeStrict } from '../constants/input-type.constants';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: InputTypeStrict) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:targetType/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.targetType,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.targetType,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.targetType,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.targetType,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToPermissions {\r\n\r\n  static route: Route = {\r\n    path: 'permissions/:targetType/:keyType/:key',\r\n    loadChildren: () => import('./permissions.module').then(m => m.PermissionsModule),\r\n    data: { title: 'Permissions' },\r\n  };\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string): string {\r\n    return `permissions/${targetType}/${keyType}/${key}`;\r\n  }\r\n\r\n  static getUrlApp(appId: number): string {\r\n    return this.getUrl(eavConstants.metadata.app.targetType, eavConstants.metadata.app.keyType, appId.toString());\r\n  }\r\n\r\n  static getUrlAttribute(id: number): string {\r\n    return this.getUrl(eavConstants.metadata.attribute.targetType, eavConstants.metadata.attribute.keyType, id.toString());\r\n  }\r\n\r\n  /** For historic reasons, it's the same as Entity */\r\n  static getUrlContentType(guid: string): string {\r\n    return this.getUrlEntity(guid);\r\n  }\r\n\r\n  static getUrlEntity(guid: string): string {\r\n    return this.getUrl(eavConstants.metadata.entity.targetType, eavConstants.metadata.entity.keyType, guid);\r\n  }\r\n\r\n  static getUrlLanguage(id: string): string {\r\n    return this.getUrl(eavConstants.metadata.language.targetType, eavConstants.metadata.language.keyType, id);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-type-fields_services_content-types-fields_service_ts-projects-be8373.222abf4dfb07f2f7.js"}