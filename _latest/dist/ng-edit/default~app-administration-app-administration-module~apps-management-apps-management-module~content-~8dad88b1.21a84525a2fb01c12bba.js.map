{"version":3,"sources":["C:/Projects/2sxc/LTS-11.22/eav-item-dialog-angular/node_modules/@angular/material/__ivy_ngcc__/fesm2015/input.js","C:/Projects/2sxc/LTS-11.22/eav-item-dialog-angular/node_modules/@angular/cdk/__ivy_ngcc__/fesm2015/text-field.js"],"names":["MatTextareaAutosize","this","minRows","value","maxRows","enabled","ɵfac","t","ɵMatTextareaAutosize_BaseFactory","ɵdir","type","selectors","hostAttrs","inputs","cdkAutosizeMinRows","cdkAutosizeMaxRows","matAutosizeMinRows","matAutosizeMaxRows","matAutosize","matTextareaAutosize","exportAs","features","MAT_INPUT_VALUE_ACCESSOR","MAT_INPUT_INVALID_TYPES","nextUniqueId","MatInputBase","_defaultErrorStateMatcher","_parentForm","_parentFormGroup","ngControl","_MatInputMixinBase","MatInput","_elementRef","_platform","inputValueAccessor","_autofillMonitor","ngZone","_formField","_uid","focused","stateChanges","controlType","autofilled","_disabled","_required","_type","_readonly","_neverEmptyInputTypes","filter","has","element","nativeElement","nodeName","toLowerCase","_inputValueAccessor","_previousNativeValue","id","IOS","runOutsideAngular","addEventListener","event","el","target","selectionStart","selectionEnd","setSelectionRange","_isServer","isBrowser","_isNativeSelect","_isTextarea","multiple","monitor","subscribe","isAutofilled","next","complete","stopMonitoring","updateErrorState","_dirtyCheckNativeValue","_dirtyCheckPlaceholder","options","focus","isFocused","readonly","_a","_b","placeholder","_hideControlPlaceholder","call","_previousPlaceholder","setAttribute","removeAttribute","newValue","indexOf","validity","badInput","ids","length","join","disabled","_id","_validateType","_isNeverEmpty","_isBadInput","selectElement","firstOption","empty","selectedIndex","label","hostVars","hostBindings","rf","ctx","_focusChanged","_onInput","required","errorState","toString","errorStateMatcher","userAriaDescribedBy","provide","useExisting","MatInputModule","ɵmod","ɵinj","factory","providers","imports","listenerOptions","passive","AutofillMonitor","_ngZone","_monitoredElements","Map","elementOrRef","info","get","subject","result","cssClass","listener","animationName","classList","contains","remove","run","add","set","unlisten","removeEventListener","delete","forEach","_info","ɵprov","token","providedIn","CdkAutofill","cdkAutofill","emit","outputs","CdkTextareaAutosize","document","_destroyed","_enabled","_previousMinRows","_document","_textareaElement","_measuringClass","FIREFOX","minHeight","_cachedLineHeight","style","maxHeight","_initialHeight","height","resizeToFitContent","window","_getWindow","pipe","textareaClone","cloneNode","rows","position","visibility","border","padding","overflow","parentNode","appendChild","clientHeight","removeChild","_setMinHeight","_setMaxHeight","force","_cacheTextareaLineHeight","textarea","_minRows","_previousValue","placeholderText","scrollHeight","requestAnimationFrame","_scrollToCaretPosition","setTimeout","undefined","_getDocument","defaultView","isStopped","activeElement","_maxRows","reset","_noopInputHandler","TextFieldModule"],"mappings":"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","file":"default~app-administration-app-administration-module~apps-management-apps-management-module~content-~8dad88b1.21a84525a2fb01c12bba.js","sourcesContent":["import { CdkTextareaAutosize, AutofillMonitor, TextFieldModule } from '@angular/cdk/text-field';\nimport { Directive, Input, InjectionToken, ElementRef, Optional, Self, Inject, NgZone, HostListener, NgModule } from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { getSupportedInputTypes, Platform } from '@angular/cdk/platform';\nimport { NgControl, NgForm, FormGroupDirective } from '@angular/forms';\nimport { mixinErrorState, ErrorStateMatcher } from '@angular/material/core';\nimport { MatFormFieldControl, MatFormField, MAT_FORM_FIELD, MatFormFieldModule } from '@angular/material/form-field';\nimport { Subject } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive to automatically resize a textarea to fit its content.\n * @deprecated Use `cdkTextareaAutosize` from `@angular/cdk/text-field` instead.\n * @breaking-change 8.0.0\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from '@angular/material/core';\nimport * as ɵngcc4 from '@angular/cdk/text-field';\nimport * as ɵngcc5 from '@angular/material/form-field';\nclass MatTextareaAutosize extends CdkTextareaAutosize {\n    get matAutosizeMinRows() { return this.minRows; }\n    set matAutosizeMinRows(value) { this.minRows = value; }\n    get matAutosizeMaxRows() { return this.maxRows; }\n    set matAutosizeMaxRows(value) { this.maxRows = value; }\n    get matAutosize() { return this.enabled; }\n    set matAutosize(value) { this.enabled = value; }\n    get matTextareaAutosize() { return this.enabled; }\n    set matTextareaAutosize(value) { this.enabled = value; }\n}\nMatTextareaAutosize.ɵfac = function MatTextareaAutosize_Factory(t) { return ɵMatTextareaAutosize_BaseFactory(t || MatTextareaAutosize); };\nMatTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatTextareaAutosize, selectors: [[\"textarea\", \"mat-autosize\", \"\"], [\"textarea\", \"matTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\", \"mat-autosize\"], inputs: { cdkAutosizeMinRows: \"cdkAutosizeMinRows\", cdkAutosizeMaxRows: \"cdkAutosizeMaxRows\", matAutosizeMinRows: \"matAutosizeMinRows\", matAutosizeMaxRows: \"matAutosizeMaxRows\", matAutosize: [\"mat-autosize\", \"matAutosize\"], matTextareaAutosize: \"matTextareaAutosize\" }, exportAs: [\"matTextareaAutosize\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\nMatTextareaAutosize.propDecorators = {\n    matAutosizeMinRows: [{ type: Input }],\n    matAutosizeMaxRows: [{ type: Input }],\n    matAutosize: [{ type: Input, args: ['mat-autosize',] }],\n    matTextareaAutosize: [{ type: Input }]\n};\nconst ɵMatTextareaAutosize_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(MatTextareaAutosize);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[mat-autosize], textarea[matTextareaAutosize]',\n                exportAs: 'matTextareaAutosize',\n                inputs: ['cdkAutosizeMinRows', 'cdkAutosizeMaxRows'],\n                host: {\n                    'class': 'cdk-textarea-autosize mat-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], null, { matAutosizeMinRows: [{\n            type: Input\n        }], matAutosizeMaxRows: [{\n            type: Input\n        }], matAutosize: [{\n            type: Input,\n            args: ['mat-autosize']\n        }], matTextareaAutosize: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** @docs-private */\nfunction getMatInputUnsupportedTypeError(type) {\n    return Error(`Input type \"${type}\" isn't supported by matInput.`);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * This token is used to inject the object whose value should be set into `MatInput`. If none is\n * provided, the native `HTMLInputElement` is used. Directives like `MatDatepickerInput` can provide\n * themselves for this token, in order to make `MatInput` delegate the getting and setting of the\n * value to them.\n */\nconst MAT_INPUT_VALUE_ACCESSOR = new InjectionToken('MAT_INPUT_VALUE_ACCESSOR');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Invalid input type. Using one of these will throw an MatInputUnsupportedTypeError.\nconst MAT_INPUT_INVALID_TYPES = [\n    'button',\n    'checkbox',\n    'file',\n    'hidden',\n    'image',\n    'radio',\n    'range',\n    'reset',\n    'submit'\n];\nlet nextUniqueId = 0;\n// Boilerplate for applying mixins to MatInput.\n/** @docs-private */\nclass MatInputBase {\n    constructor(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, \n    /** @docs-private */\n    ngControl) {\n        this._defaultErrorStateMatcher = _defaultErrorStateMatcher;\n        this._parentForm = _parentForm;\n        this._parentFormGroup = _parentFormGroup;\n        this.ngControl = ngControl;\n    }\n}\nconst _MatInputMixinBase = mixinErrorState(MatInputBase);\n/** Directive that allows a native input to work inside a `MatFormField`. */\nclass MatInput extends _MatInputMixinBase {\n    constructor(_elementRef, _platform, \n    /** @docs-private */\n    ngControl, _parentForm, _parentFormGroup, _defaultErrorStateMatcher, inputValueAccessor, _autofillMonitor, ngZone, \n    // TODO: Remove this once the legacy appearance has been removed. We only need\n    // to inject the form-field for determining whether the placeholder has been promoted.\n    _formField) {\n        super(_defaultErrorStateMatcher, _parentForm, _parentFormGroup, ngControl);\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this.ngControl = ngControl;\n        this._autofillMonitor = _autofillMonitor;\n        this._formField = _formField;\n        this._uid = `mat-input-${nextUniqueId++}`;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.focused = false;\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.stateChanges = new Subject();\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.controlType = 'mat-input';\n        /**\n         * Implemented as part of MatFormFieldControl.\n         * @docs-private\n         */\n        this.autofilled = false;\n        this._disabled = false;\n        this._required = false;\n        this._type = 'text';\n        this._readonly = false;\n        this._neverEmptyInputTypes = [\n            'date',\n            'datetime',\n            'datetime-local',\n            'month',\n            'time',\n            'week'\n        ].filter(t => getSupportedInputTypes().has(t));\n        const element = this._elementRef.nativeElement;\n        const nodeName = element.nodeName.toLowerCase();\n        // If no input value accessor was explicitly specified, use the element as the input value\n        // accessor.\n        this._inputValueAccessor = inputValueAccessor || element;\n        this._previousNativeValue = this.value;\n        // Force setter to be called in case id was not specified.\n        this.id = this.id;\n        // On some versions of iOS the caret gets stuck in the wrong place when holding down the delete\n        // key. In order to get around this we need to \"jiggle\" the caret loose. Since this bug only\n        // exists on iOS, we only bother to install the listener on iOS.\n        if (_platform.IOS) {\n            ngZone.runOutsideAngular(() => {\n                _elementRef.nativeElement.addEventListener('keyup', (event) => {\n                    let el = event.target;\n                    if (!el.value && !el.selectionStart && !el.selectionEnd) {\n                        // Note: Just setting `0, 0` doesn't fix the issue. Setting\n                        // `1, 1` fixes it for the first time that you type text and\n                        // then hold delete. Toggling to `1, 1` and then back to\n                        // `0, 0` seems to completely fix it.\n                        el.setSelectionRange(1, 1);\n                        el.setSelectionRange(0, 0);\n                    }\n                });\n            });\n        }\n        this._isServer = !this._platform.isBrowser;\n        this._isNativeSelect = nodeName === 'select';\n        this._isTextarea = nodeName === 'textarea';\n        if (this._isNativeSelect) {\n            this.controlType = element.multiple ? 'mat-native-select-multiple' :\n                'mat-native-select';\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get disabled() {\n        if (this.ngControl && this.ngControl.disabled !== null) {\n            return this.ngControl.disabled;\n        }\n        return this._disabled;\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        // Browsers may not fire the blur event if the input is disabled too quickly.\n        // Reset from here to ensure that the element doesn't become stuck.\n        if (this.focused) {\n            this.focused = false;\n            this.stateChanges.next();\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get id() { return this._id; }\n    set id(value) { this._id = value || this._uid; }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get required() { return this._required; }\n    set required(value) { this._required = coerceBooleanProperty(value); }\n    /** Input type of the element. */\n    get type() { return this._type; }\n    set type(value) {\n        this._type = value || 'text';\n        this._validateType();\n        // When using Angular inputs, developers are no longer able to set the properties on the native\n        // input element. To ensure that bindings for `type` work, we need to sync the setter\n        // with the native property. Textarea elements don't support the type property or attribute.\n        if (!this._isTextarea && getSupportedInputTypes().has(this._type)) {\n            this._elementRef.nativeElement.type = this._type;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get value() { return this._inputValueAccessor.value; }\n    set value(value) {\n        if (value !== this.value) {\n            this._inputValueAccessor.value = value;\n            this.stateChanges.next();\n        }\n    }\n    /** Whether the element is readonly. */\n    get readonly() { return this._readonly; }\n    set readonly(value) { this._readonly = coerceBooleanProperty(value); }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.monitor(this._elementRef.nativeElement).subscribe(event => {\n                this.autofilled = event.isAutofilled;\n                this.stateChanges.next();\n            });\n        }\n    }\n    ngOnChanges() {\n        this.stateChanges.next();\n    }\n    ngOnDestroy() {\n        this.stateChanges.complete();\n        if (this._platform.isBrowser) {\n            this._autofillMonitor.stopMonitoring(this._elementRef.nativeElement);\n        }\n    }\n    ngDoCheck() {\n        if (this.ngControl) {\n            // We need to re-evaluate this on every change detection cycle, because there are some\n            // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n            // that whatever logic is in here has to be super lean or we risk destroying the performance.\n            this.updateErrorState();\n        }\n        // We need to dirty-check the native element's value, because there are some cases where\n        // we won't be notified when it changes (e.g. the consumer isn't using forms or they're\n        // updating the value using `emitEvent: false`).\n        this._dirtyCheckNativeValue();\n        // We need to dirty-check and set the placeholder attribute ourselves, because whether it's\n        // present or not depends on a query which is prone to \"changed after checked\" errors.\n        this._dirtyCheckPlaceholder();\n    }\n    /** Focuses the input. */\n    focus(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged(isFocused) {\n        if (isFocused !== this.focused && (!this.readonly || !isFocused)) {\n            this.focused = isFocused;\n            this.stateChanges.next();\n        }\n    }\n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput() {\n        // This is a noop function and is used to let Angular know whenever the value changes.\n        // Angular will run a new change detection each time the `input` event has been dispatched.\n        // It's necessary that Angular recognizes the value change, because when floatingLabel\n        // is set to false and Angular forms aren't used, the placeholder won't recognize the\n        // value changes and will not disappear.\n        // Listening to the input event wouldn't be necessary when the input is using the\n        // FormsModule or ReactiveFormsModule, because Angular forms also listens to input events.\n    }\n    /** Does some manual dirty checking on the native input `placeholder` attribute. */\n    _dirtyCheckPlaceholder() {\n        var _a, _b;\n        // If we're hiding the native placeholder, it should also be cleared from the DOM, otherwise\n        // screen readers will read it out twice: once from the label and once from the attribute.\n        // TODO: can be removed once we get rid of the `legacy` style for the form field, because it's\n        // the only one that supports promoting the placeholder to a label.\n        const placeholder = ((_b = (_a = this._formField) === null || _a === void 0 ? void 0 : _a._hideControlPlaceholder) === null || _b === void 0 ? void 0 : _b.call(_a)) ? null : this.placeholder;\n        if (placeholder !== this._previousPlaceholder) {\n            const element = this._elementRef.nativeElement;\n            this._previousPlaceholder = placeholder;\n            placeholder ?\n                element.setAttribute('placeholder', placeholder) : element.removeAttribute('placeholder');\n        }\n    }\n    /** Does some manual dirty checking on the native input `value` property. */\n    _dirtyCheckNativeValue() {\n        const newValue = this._elementRef.nativeElement.value;\n        if (this._previousNativeValue !== newValue) {\n            this._previousNativeValue = newValue;\n            this.stateChanges.next();\n        }\n    }\n    /** Make sure the input is a supported type. */\n    _validateType() {\n        if (MAT_INPUT_INVALID_TYPES.indexOf(this._type) > -1 &&\n            (typeof ngDevMode === 'undefined' || ngDevMode)) {\n            throw getMatInputUnsupportedTypeError(this._type);\n        }\n    }\n    /** Checks whether the input type is one of the types that are never empty. */\n    _isNeverEmpty() {\n        return this._neverEmptyInputTypes.indexOf(this._type) > -1;\n    }\n    /** Checks whether the input is invalid based on the native validation. */\n    _isBadInput() {\n        // The `validity` property won't be present on platform-server.\n        let validity = this._elementRef.nativeElement.validity;\n        return validity && validity.badInput;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get empty() {\n        return !this._isNeverEmpty() && !this._elementRef.nativeElement.value && !this._isBadInput() &&\n            !this.autofilled;\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get shouldLabelFloat() {\n        if (this._isNativeSelect) {\n            // For a single-selection `<select>`, the label should float when the selected option has\n            // a non-empty display value. For a `<select multiple>`, the label *always* floats to avoid\n            // overlapping the label with the options.\n            const selectElement = this._elementRef.nativeElement;\n            const firstOption = selectElement.options[0];\n            // On most browsers the `selectedIndex` will always be 0, however on IE and Edge it'll be\n            // -1 if the `value` is set to something, that isn't in the list of options, at a later point.\n            return this.focused || selectElement.multiple || !this.empty ||\n                !!(selectElement.selectedIndex > -1 && firstOption && firstOption.label);\n        }\n        else {\n            return this.focused || !this.empty;\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n        if (ids.length) {\n            this._elementRef.nativeElement.setAttribute('aria-describedby', ids.join(' '));\n        }\n        else {\n            this._elementRef.nativeElement.removeAttribute('aria-describedby');\n        }\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    onContainerClick() {\n        // Do not re-focus the input element if the element is already focused. Otherwise it can happen\n        // that someone clicks on a time input and the cursor resets to the \"hours\" field while the\n        // \"minutes\" field was actually clicked. See: https://github.com/angular/components/issues/12849\n        if (!this.focused) {\n            this.focus();\n        }\n    }\n}\nMatInput.ɵfac = function MatInput_Factory(t) { return new (t || MatInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ErrorStateMatcher), ɵngcc0.ɵɵdirectiveInject(MAT_INPUT_VALUE_ACCESSOR, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.AutofillMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(MAT_FORM_FIELD, 8)); };\nMatInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatInput, selectors: [[\"input\", \"matInput\", \"\"], [\"textarea\", \"matInput\", \"\"], [\"select\", \"matNativeControl\", \"\"], [\"input\", \"matNativeControl\", \"\"], [\"textarea\", \"matNativeControl\", \"\"]], hostAttrs: [1, \"mat-input-element\", \"mat-form-field-autofill-control\"], hostVars: 9, hostBindings: function MatInput_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatInput_focus_HostBindingHandler() { return ctx._focusChanged(true); })(\"blur\", function MatInput_blur_HostBindingHandler() { return ctx._focusChanged(false); })(\"input\", function MatInput_input_HostBindingHandler() { return ctx._onInput(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled)(\"required\", ctx.required);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id)(\"data-placeholder\", ctx.placeholder)(\"readonly\", ctx.readonly && !ctx._isNativeSelect || null)(\"aria-invalid\", ctx.errorState)(\"aria-required\", ctx.required.toString());\n        ɵngcc0.ɵɵclassProp(\"mat-input-server\", ctx._isServer);\n    } }, inputs: { id: \"id\", disabled: \"disabled\", required: \"required\", type: \"type\", value: \"value\", readonly: \"readonly\", placeholder: \"placeholder\", errorStateMatcher: \"errorStateMatcher\", userAriaDescribedBy: [\"aria-describedby\", \"userAriaDescribedBy\"] }, exportAs: [\"matInput\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: MatFormFieldControl, useExisting: MatInput }]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature] });\nMatInput.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgControl, decorators: [{ type: Optional }, { type: Self }] },\n    { type: NgForm, decorators: [{ type: Optional }] },\n    { type: FormGroupDirective, decorators: [{ type: Optional }] },\n    { type: ErrorStateMatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [MAT_INPUT_VALUE_ACCESSOR,] }] },\n    { type: AutofillMonitor },\n    { type: NgZone },\n    { type: MatFormField, decorators: [{ type: Optional }, { type: Inject, args: [MAT_FORM_FIELD,] }] }\n];\nMatInput.propDecorators = {\n    disabled: [{ type: Input }],\n    id: [{ type: Input }],\n    placeholder: [{ type: Input }],\n    required: [{ type: Input }],\n    type: [{ type: Input }],\n    errorStateMatcher: [{ type: Input }],\n    userAriaDescribedBy: [{ type: Input, args: ['aria-describedby',] }],\n    value: [{ type: Input }],\n    readonly: [{ type: Input }],\n    _focusChanged: [{ type: HostListener, args: ['focus', ['true'],] }, { type: HostListener, args: ['blur', ['false'],] }],\n    _onInput: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInput, [{\n        type: Directive,\n        args: [{\n                selector: `input[matInput], textarea[matInput], select[matNativeControl],\n      input[matNativeControl], textarea[matNativeControl]`,\n                exportAs: 'matInput',\n                host: {\n                    /**\n                     * @breaking-change 8.0.0 remove .mat-form-field-autofill-control in favor of AutofillMonitor.\n                     */\n                    'class': 'mat-input-element mat-form-field-autofill-control',\n                    '[class.mat-input-server]': '_isServer',\n                    // Native input properties that are overwritten by Angular inputs need to be synced with\n                    // the native input element. Otherwise property bindings for those don't work.\n                    '[attr.id]': 'id',\n                    // At the time of writing, we have a lot of customer tests that look up the input based on its\n                    // placeholder. Since we sometimes omit the placeholder attribute from the DOM to prevent screen\n                    // readers from reading it twice, we have to keep it somewhere in the DOM for the lookup.\n                    '[attr.data-placeholder]': 'placeholder',\n                    '[disabled]': 'disabled',\n                    '[required]': 'required',\n                    '[attr.readonly]': 'readonly && !_isNativeSelect || null',\n                    '[attr.aria-invalid]': 'errorState',\n                    '[attr.aria-required]': 'required.toString()'\n                },\n                providers: [{ provide: MatFormFieldControl, useExisting: MatInput }]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc2.NgControl, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }] }, { type: ɵngcc2.NgForm, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc2.FormGroupDirective, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc3.ErrorStateMatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [MAT_INPUT_VALUE_ACCESSOR]\n            }] }, { type: ɵngcc4.AutofillMonitor }, { type: ɵngcc0.NgZone }, { type: ɵngcc5.MatFormField, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [MAT_FORM_FIELD]\n            }] }]; }, { id: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }], required: [{\n            type: Input\n        }], type: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], readonly: [{\n            type: Input\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    /** Callback for the cases where the focused state of the input changes. */\n    // tslint:disable:no-host-decorator-in-concrete\n    // tslint:enable:no-host-decorator-in-concrete\n    _focusChanged: [{\n            type: HostListener,\n            args: ['focus', ['true']]\n        }, {\n            type: HostListener,\n            args: ['blur', ['false']]\n        }], \n    // We have to use a `HostListener` here in order to support both Ivy and ViewEngine.\n    // In Ivy the `host` bindings will be merged when this class is extended, whereas in\n    // ViewEngine they're overwritten.\n    // TODO(crisbeto): we move this back into `host` once Ivy is turned on by default.\n    // tslint:disable-next-line:no-host-decorator-in-concrete\n    _onInput: [{\n            type: HostListener,\n            args: ['input']\n        }], placeholder: [{\n            type: Input\n        }], errorStateMatcher: [{\n            type: Input\n        }], userAriaDescribedBy: [{\n            type: Input,\n            args: ['aria-describedby']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatInputModule {\n}\nMatInputModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatInputModule });\nMatInputModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatInputModule_Factory(t) { return new (t || MatInputModule)(); }, providers: [ErrorStateMatcher], imports: [[\n            TextFieldModule,\n            MatFormFieldModule,\n        ], TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatInputModule, { declarations: function () { return [MatInput, MatTextareaAutosize]; }, imports: function () { return [TextFieldModule,\n        MatFormFieldModule]; }, exports: function () { return [TextFieldModule,\n        // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n        // be used together with `MatFormField`.\n        MatFormFieldModule, MatInput, MatTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatInputModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [MatInput, MatTextareaAutosize],\n                imports: [\n                    TextFieldModule,\n                    MatFormFieldModule,\n                ],\n                exports: [\n                    TextFieldModule,\n                    // We re-export the `MatFormFieldModule` since `MatInput` will almost always\n                    // be used together with `MatFormField`.\n                    MatFormFieldModule,\n                    MatInput,\n                    MatTextareaAutosize,\n                ],\n                providers: [ErrorStateMatcher]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_INPUT_VALUE_ACCESSOR, MatInput, MatInputModule, MatTextareaAutosize, getMatInputUnsupportedTypeError };\n\n//# sourceMappingURL=input.js.map","import { normalizePassiveListenerOptions, Platform, PlatformModule } from '@angular/cdk/platform';\nimport { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, EventEmitter, Directive, ElementRef, Output, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { coerceElement, coerceNumberProperty, coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY, Subject, fromEvent } from 'rxjs';\nimport { auditTime, takeUntil } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options to pass to the animationstart listener. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nconst listenerOptions = normalizePassiveListenerOptions({ passive: true });\n/**\n * An injectable service that can be used to monitor the autofill state of an input.\n * Based on the following blog post:\n * https://medium.com/@brunn/detecting-autofilled-fields-in-javascript-aed598d25da7\n */\nclass AutofillMonitor {\n    constructor(_platform, _ngZone) {\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._monitoredElements = new Map();\n    }\n    monitor(elementOrRef) {\n        if (!this._platform.isBrowser) {\n            return EMPTY;\n        }\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            return info.subject;\n        }\n        const result = new Subject();\n        const cssClass = 'cdk-text-field-autofilled';\n        const listener = ((event) => {\n            // Animation events fire on initial element render, we check for the presence of the autofill\n            // CSS class to make sure this is a real change in state, not just the initial render before\n            // we fire off events.\n            if (event.animationName === 'cdk-text-field-autofill-start' &&\n                !element.classList.contains(cssClass)) {\n                element.classList.add(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: true }));\n            }\n            else if (event.animationName === 'cdk-text-field-autofill-end' &&\n                element.classList.contains(cssClass)) {\n                element.classList.remove(cssClass);\n                this._ngZone.run(() => result.next({ target: event.target, isAutofilled: false }));\n            }\n        });\n        this._ngZone.runOutsideAngular(() => {\n            element.addEventListener('animationstart', listener, listenerOptions);\n            element.classList.add('cdk-text-field-autofill-monitored');\n        });\n        this._monitoredElements.set(element, {\n            subject: result,\n            unlisten: () => {\n                element.removeEventListener('animationstart', listener, listenerOptions);\n            }\n        });\n        return result;\n    }\n    stopMonitoring(elementOrRef) {\n        const element = coerceElement(elementOrRef);\n        const info = this._monitoredElements.get(element);\n        if (info) {\n            info.unlisten();\n            info.subject.complete();\n            element.classList.remove('cdk-text-field-autofill-monitored');\n            element.classList.remove('cdk-text-field-autofilled');\n            this._monitoredElements.delete(element);\n        }\n    }\n    ngOnDestroy() {\n        this._monitoredElements.forEach((_info, element) => this.stopMonitoring(element));\n    }\n}\nAutofillMonitor.ɵfac = function AutofillMonitor_Factory(t) { return new (t || AutofillMonitor)(ɵngcc0.ɵɵinject(ɵngcc1.Platform), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nAutofillMonitor.ɵprov = ɵɵdefineInjectable({ factory: function AutofillMonitor_Factory() { return new AutofillMonitor(ɵɵinject(Platform), ɵɵinject(NgZone)); }, token: AutofillMonitor, providedIn: \"root\" });\nAutofillMonitor.ctorParameters = () => [\n    { type: Platform },\n    { type: NgZone }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutofillMonitor, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }]; }, null); })();\n/** A directive that can be used to monitor the autofill state of an input. */\nclass CdkAutofill {\n    constructor(_elementRef, _autofillMonitor) {\n        this._elementRef = _elementRef;\n        this._autofillMonitor = _autofillMonitor;\n        /** Emits when the autofill state of the element changes. */\n        this.cdkAutofill = new EventEmitter();\n    }\n    ngOnInit() {\n        this._autofillMonitor\n            .monitor(this._elementRef)\n            .subscribe(event => this.cdkAutofill.emit(event));\n    }\n    ngOnDestroy() {\n        this._autofillMonitor.stopMonitoring(this._elementRef);\n    }\n}\nCdkAutofill.ɵfac = function CdkAutofill_Factory(t) { return new (t || CdkAutofill)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(AutofillMonitor)); };\nCdkAutofill.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAutofill, selectors: [[\"\", \"cdkAutofill\", \"\"]], outputs: { cdkAutofill: \"cdkAutofill\" } });\nCdkAutofill.ctorParameters = () => [\n    { type: ElementRef },\n    { type: AutofillMonitor }\n];\nCdkAutofill.propDecorators = {\n    cdkAutofill: [{ type: Output }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAutofill, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkAutofill]'\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: AutofillMonitor }]; }, { cdkAutofill: [{\n            type: Output\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Directive to automatically resize a textarea to fit its content. */\nclass CdkTextareaAutosize {\n    constructor(_elementRef, _platform, _ngZone, \n    /** @breaking-change 11.0.0 make document required */\n    document) {\n        this._elementRef = _elementRef;\n        this._platform = _platform;\n        this._ngZone = _ngZone;\n        this._destroyed = new Subject();\n        this._enabled = true;\n        /**\n         * Value of minRows as of last resize. If the minRows has decreased, the\n         * height of the textarea needs to be recomputed to reflect the new minimum. The maxHeight\n         * does not have the same problem because it does not affect the textarea's scrollHeight.\n         */\n        this._previousMinRows = -1;\n        this._document = document;\n        this._textareaElement = this._elementRef.nativeElement;\n        this._measuringClass = _platform.FIREFOX ?\n            'cdk-textarea-autosize-measuring-firefox' :\n            'cdk-textarea-autosize-measuring';\n    }\n    /** Minimum amount of rows in the textarea. */\n    get minRows() { return this._minRows; }\n    set minRows(value) {\n        this._minRows = coerceNumberProperty(value);\n        this._setMinHeight();\n    }\n    /** Maximum amount of rows in the textarea. */\n    get maxRows() { return this._maxRows; }\n    set maxRows(value) {\n        this._maxRows = coerceNumberProperty(value);\n        this._setMaxHeight();\n    }\n    /** Whether autosizing is enabled or not */\n    get enabled() { return this._enabled; }\n    set enabled(value) {\n        value = coerceBooleanProperty(value);\n        // Only act if the actual value changed. This specifically helps to not run\n        // resizeToFitContent too early (i.e. before ngAfterViewInit)\n        if (this._enabled !== value) {\n            (this._enabled = value) ? this.resizeToFitContent(true) : this.reset();\n        }\n    }\n    /** Sets the minimum height of the textarea as determined by minRows. */\n    _setMinHeight() {\n        const minHeight = this.minRows && this._cachedLineHeight ?\n            `${this.minRows * this._cachedLineHeight}px` : null;\n        if (minHeight) {\n            this._textareaElement.style.minHeight = minHeight;\n        }\n    }\n    /** Sets the maximum height of the textarea as determined by maxRows. */\n    _setMaxHeight() {\n        const maxHeight = this.maxRows && this._cachedLineHeight ?\n            `${this.maxRows * this._cachedLineHeight}px` : null;\n        if (maxHeight) {\n            this._textareaElement.style.maxHeight = maxHeight;\n        }\n    }\n    ngAfterViewInit() {\n        if (this._platform.isBrowser) {\n            // Remember the height which we started with in case autosizing is disabled\n            this._initialHeight = this._textareaElement.style.height;\n            this.resizeToFitContent();\n            this._ngZone.runOutsideAngular(() => {\n                const window = this._getWindow();\n                fromEvent(window, 'resize')\n                    .pipe(auditTime(16), takeUntil(this._destroyed))\n                    .subscribe(() => this.resizeToFitContent(true));\n            });\n        }\n    }\n    ngOnDestroy() {\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /**\n     * Cache the height of a single-row textarea if it has not already been cached.\n     *\n     * We need to know how large a single \"row\" of a textarea is in order to apply minRows and\n     * maxRows. For the initial version, we will assume that the height of a single line in the\n     * textarea does not ever change.\n     */\n    _cacheTextareaLineHeight() {\n        if (this._cachedLineHeight) {\n            return;\n        }\n        // Use a clone element because we have to override some styles.\n        let textareaClone = this._textareaElement.cloneNode(false);\n        textareaClone.rows = 1;\n        // Use `position: absolute` so that this doesn't cause a browser layout and use\n        // `visibility: hidden` so that nothing is rendered. Clear any other styles that\n        // would affect the height.\n        textareaClone.style.position = 'absolute';\n        textareaClone.style.visibility = 'hidden';\n        textareaClone.style.border = 'none';\n        textareaClone.style.padding = '0';\n        textareaClone.style.height = '';\n        textareaClone.style.minHeight = '';\n        textareaClone.style.maxHeight = '';\n        // In Firefox it happens that textarea elements are always bigger than the specified amount\n        // of rows. This is because Firefox tries to add extra space for the horizontal scrollbar.\n        // As a workaround that removes the extra space for the scrollbar, we can just set overflow\n        // to hidden. This ensures that there is no invalid calculation of the line height.\n        // See Firefox bug report: https://bugzilla.mozilla.org/show_bug.cgi?id=33654\n        textareaClone.style.overflow = 'hidden';\n        this._textareaElement.parentNode.appendChild(textareaClone);\n        this._cachedLineHeight = textareaClone.clientHeight;\n        this._textareaElement.parentNode.removeChild(textareaClone);\n        // Min and max heights have to be re-calculated if the cached line height changes\n        this._setMinHeight();\n        this._setMaxHeight();\n    }\n    ngDoCheck() {\n        if (this._platform.isBrowser) {\n            this.resizeToFitContent();\n        }\n    }\n    /**\n     * Resize the textarea to fit its content.\n     * @param force Whether to force a height recalculation. By default the height will be\n     *    recalculated only if the value changed since the last call.\n     */\n    resizeToFitContent(force = false) {\n        // If autosizing is disabled, just skip everything else\n        if (!this._enabled) {\n            return;\n        }\n        this._cacheTextareaLineHeight();\n        // If we haven't determined the line-height yet, we know we're still hidden and there's no point\n        // in checking the height of the textarea.\n        if (!this._cachedLineHeight) {\n            return;\n        }\n        const textarea = this._elementRef.nativeElement;\n        const value = textarea.value;\n        // Only resize if the value or minRows have changed since these calculations can be expensive.\n        if (!force && this._minRows === this._previousMinRows && value === this._previousValue) {\n            return;\n        }\n        const placeholderText = textarea.placeholder;\n        // Reset the textarea height to auto in order to shrink back to its default size.\n        // Also temporarily force overflow:hidden, so scroll bars do not interfere with calculations.\n        // Long placeholders that are wider than the textarea width may lead to a bigger scrollHeight\n        // value. To ensure that the scrollHeight is not bigger than the content, the placeholders\n        // need to be removed temporarily.\n        textarea.classList.add(this._measuringClass);\n        textarea.placeholder = '';\n        // The measuring class includes a 2px padding to workaround an issue with Chrome,\n        // so we account for that extra space here by subtracting 4 (2px top + 2px bottom).\n        const height = textarea.scrollHeight - 4;\n        // Use the scrollHeight to know how large the textarea *would* be if fit its entire value.\n        textarea.style.height = `${height}px`;\n        textarea.classList.remove(this._measuringClass);\n        textarea.placeholder = placeholderText;\n        this._ngZone.runOutsideAngular(() => {\n            if (typeof requestAnimationFrame !== 'undefined') {\n                requestAnimationFrame(() => this._scrollToCaretPosition(textarea));\n            }\n            else {\n                setTimeout(() => this._scrollToCaretPosition(textarea));\n            }\n        });\n        this._previousValue = value;\n        this._previousMinRows = this._minRows;\n    }\n    /**\n     * Resets the textarea to its original size\n     */\n    reset() {\n        // Do not try to change the textarea, if the initialHeight has not been determined yet\n        // This might potentially remove styles when reset() is called before ngAfterViewInit\n        if (this._initialHeight !== undefined) {\n            this._textareaElement.style.height = this._initialHeight;\n        }\n    }\n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler() {\n        // no-op handler that ensures we're running change detection on input events.\n    }\n    /** Access injected document if available or fallback to global document reference */\n    _getDocument() {\n        return this._document || document;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        const doc = this._getDocument();\n        return doc.defaultView || window;\n    }\n    /**\n     * Scrolls a textarea to the caret position. On Firefox resizing the textarea will\n     * prevent it from scrolling to the caret position. We need to re-set the selection\n     * in order for it to scroll to the proper position.\n     */\n    _scrollToCaretPosition(textarea) {\n        const { selectionStart, selectionEnd } = textarea;\n        const document = this._getDocument();\n        // IE will throw an \"Unspecified error\" if we try to set the selection range after the\n        // element has been removed from the DOM. Assert that the directive hasn't been destroyed\n        // between the time we requested the animation frame and when it was executed.\n        // Also note that we have to assert that the textarea is focused before we set the\n        // selection range. Setting the selection range on a non-focused textarea will cause\n        // it to receive focus on IE and Edge.\n        if (!this._destroyed.isStopped && document.activeElement === textarea) {\n            textarea.setSelectionRange(selectionStart, selectionEnd);\n        }\n    }\n}\nCdkTextareaAutosize.ɵfac = function CdkTextareaAutosize_Factory(t) { return new (t || CdkTextareaAutosize)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8)); };\nCdkTextareaAutosize.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkTextareaAutosize, selectors: [[\"textarea\", \"cdkTextareaAutosize\", \"\"]], hostAttrs: [\"rows\", \"1\", 1, \"cdk-textarea-autosize\"], hostBindings: function CdkTextareaAutosize_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"input\", function CdkTextareaAutosize_input_HostBindingHandler() { return ctx._noopInputHandler(); });\n    } }, inputs: { minRows: [\"cdkAutosizeMinRows\", \"minRows\"], maxRows: [\"cdkAutosizeMaxRows\", \"maxRows\"], enabled: [\"cdkTextareaAutosize\", \"enabled\"] }, exportAs: [\"cdkTextareaAutosize\"] });\nCdkTextareaAutosize.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] }\n];\nCdkTextareaAutosize.propDecorators = {\n    minRows: [{ type: Input, args: ['cdkAutosizeMinRows',] }],\n    maxRows: [{ type: Input, args: ['cdkAutosizeMaxRows',] }],\n    enabled: [{ type: Input, args: ['cdkTextareaAutosize',] }],\n    _noopInputHandler: [{ type: HostListener, args: ['input',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkTextareaAutosize, [{\n        type: Directive,\n        args: [{\n                selector: 'textarea[cdkTextareaAutosize]',\n                exportAs: 'cdkTextareaAutosize',\n                host: {\n                    'class': 'cdk-textarea-autosize',\n                    // Textarea elements that have the directive applied should have a single row by default.\n                    // Browsers normally show two rows by default and therefore this limits the minRows binding.\n                    'rows': '1'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { minRows: [{\n            type: Input,\n            args: ['cdkAutosizeMinRows']\n        }], maxRows: [{\n            type: Input,\n            args: ['cdkAutosizeMaxRows']\n        }], enabled: [{\n            type: Input,\n            args: ['cdkTextareaAutosize']\n        }], \n    // In Ivy the `host` metadata will be merged, whereas in ViewEngine it is overridden. In order\n    // to avoid double event listeners, we need to use `HostListener`. Once Ivy is the default, we\n    // can move this back into `host`.\n    // tslint:disable:no-host-decorator-in-concrete\n    _noopInputHandler: [{\n            type: HostListener,\n            args: ['input']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass TextFieldModule {\n}\nTextFieldModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextFieldModule });\nTextFieldModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextFieldModule_Factory(t) { return new (t || TextFieldModule)(); }, imports: [[PlatformModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextFieldModule, { declarations: function () { return [CdkAutofill, CdkTextareaAutosize]; }, imports: function () { return [PlatformModule]; }, exports: function () { return [CdkAutofill, CdkTextareaAutosize]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextFieldModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [CdkAutofill, CdkTextareaAutosize],\n                imports: [PlatformModule],\n                exports: [CdkAutofill, CdkTextareaAutosize]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AutofillMonitor, CdkAutofill, CdkTextareaAutosize, TextFieldModule };\n\n//# sourceMappingURL=text-field.js.map"],"sourceRoot":"webpack:///"}