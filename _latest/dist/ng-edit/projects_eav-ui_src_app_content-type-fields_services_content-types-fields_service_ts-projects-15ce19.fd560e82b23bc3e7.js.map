{"version":3,"mappings":"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","names":["webApiFieldsRoot","webApiFieldsAll","ContentTypesFieldsService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","typeListRetrieve","get","params","appid","appId","toString","getInputTypesList","pipe","map","inputConfigs","config","dataType","Type","substring","indexOf","inputType","label","Label","description","Description","isDefault","IsDefault","isObsolete","IsObsolete","isRecommended","IsRecommended","obsoleteMessage","ObsoleteMessage","icon","getReservedNames","getFields","contentTypeStaticName","staticName","fields","fld","Metadata","md","typeMd","inputMd","InputType","merged","Object","All","reOrder","idArray","contentType","post","contentTypeId","Id","order","JSON","stringify","setTitle","item","webApiTypeRoot","attributeId","rename","fieldId","newName","delete","IsTitle","Error","add","newField","AppId","ContentTypeId","StaticName","Index","SortOrder","updateInputType","id","field","i0","factory","static","defaultRoute","path","loadChildren","Promise","then","m","MetadataModule","data","title","targetType","keyType","key","dialogTitle","url","encodeURIComponent","getUrl","eavConstants","guid","GoToPermissions","getUrlEntity","s","PermissionsModule","nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","super","_color","_overlap","position","size","_id","_isInitialized","color","value","_setColor","overlap","val","coerceBooleanProperty","content","_content","newContent","_updateRenderedContent","_description","newDescription","_updateHostAriaDescription","hidden","_hidden","isAbove","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","removeDescription","nativeElement","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","describe","colorPalette","remove","badges","querySelectorAll","Array","from","ɵfac","i1","ANIMATION_MODULE_TYPE","ɵdir","selectors","MatBadgeModule","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sources":["./projects/eav-ui/src/app/content-type-fields/services/content-types-fields.service.ts","./projects/eav-ui/src/app/metadata/go-to-metadata.ts","./projects/eav-ui/src/app/permissions/go-to-permissions.ts","./node_modules/@angular/material/fesm2015/badge.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { webApiTypeRoot } from '../../app-administration/services/content-types.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { InputType } from '../models/input-type.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\nexport const webApiFieldsRoot = 'admin/field/';\r\nexport const webApiFieldsAll = webApiFieldsRoot + 'all';\r\n\r\n@Injectable()\r\nexport class ContentTypesFieldsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  typeListRetrieve() {\r\n    return this.http.get<string[]>(this.apiUrl(webApiFieldsRoot + 'DataTypes'), {\r\n      params: { appid: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getInputTypesList() {\r\n    return this.http\r\n      .get<InputType[]>(this.apiUrl(webApiFieldsRoot + 'InputTypes'), { params: { appid: this.context.appId.toString() } })\r\n      .pipe(\r\n        map(inputConfigs => {\r\n          const inputTypeOptions = inputConfigs.map(config => {\r\n            const option: FieldInputTypeOption = {\r\n              dataType: config.Type.substring(0, config.Type.indexOf('-')),\r\n              inputType: config.Type,\r\n              label: config.Label,\r\n              description: config.Description,\r\n              isDefault: config.IsDefault,\r\n              isObsolete: config.IsObsolete,\r\n              isRecommended: config.IsRecommended,\r\n              obsoleteMessage: config.ObsoleteMessage,\r\n              icon: config.IsDefault ? 'star' : config.IsRecommended ? 'star_outline' : null,\r\n            };\r\n            return option;\r\n          });\r\n          return inputTypeOptions;\r\n        }),\r\n      );\r\n  }\r\n\r\n  getReservedNames() {\r\n    return this.http.get<ReservedNames>(this.apiUrl(webApiFieldsRoot + 'ReservedNames'));\r\n  }\r\n\r\n  getFields(contentTypeStaticName: string) {\r\n    return this.http\r\n      .get<Field[]>(this.apiUrl(webApiFieldsAll), {\r\n        params: { appid: this.context.appId.toString(), staticName: contentTypeStaticName },\r\n      })\r\n      .pipe(\r\n        map(fields => {\r\n          if (fields) {\r\n            for (const fld of fields) {\r\n              if (!fld.Metadata) { continue; }\r\n              const md = fld.Metadata;\r\n              const allMd = md.All;\r\n              const typeMd = md[fld.Type];\r\n              const inputMd = md[fld.InputType];\r\n              md.merged = { ...allMd, ...typeMd, ...inputMd };\r\n            }\r\n          }\r\n          return fields;\r\n        }),\r\n      );\r\n  }\r\n\r\n  reOrder(idArray: number[], contentType: ContentType) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'Sort'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        order: JSON.stringify(idArray),\r\n      },\r\n    });\r\n  }\r\n\r\n  setTitle(item: Field, contentType: ContentType) {\r\n    return this.http.post<null>(this.apiUrl(webApiTypeRoot + 'SetTitle'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  rename(fieldId: number, contentTypeId: number, newName: string) {\r\n    return this.http.post<null>(this.apiUrl(webApiFieldsRoot + 'Rename'), null, {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentTypeId.toString(),\r\n        attributeId: fieldId.toString(),\r\n        newName,\r\n      },\r\n    });\r\n  }\r\n\r\n  delete(item: Field, contentType: ContentType) {\r\n    if (item.IsTitle) {\r\n      throw new Error('Can\\'t delete Title');\r\n    }\r\n\r\n    return this.http.delete<boolean>(this.apiUrl(webApiFieldsRoot + 'Delete'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        contentTypeId: contentType.Id.toString(),\r\n        attributeId: item.Id.toString(),\r\n      },\r\n    });\r\n  }\r\n\r\n  add(newField: Partial<Field>, contentTypeId: number) {\r\n    return this.http.post<number>(this.apiUrl(webApiFieldsRoot + 'Add'), null, {\r\n      params: {\r\n        AppId: this.context.appId.toString(),\r\n        ContentTypeId: contentTypeId.toString(),\r\n        Id: newField.Id.toString(),\r\n        Type: newField.Type,\r\n        InputType: newField.InputType,\r\n        StaticName: newField.StaticName,\r\n        IsTitle: newField.IsTitle.toString(),\r\n        Index: newField.SortOrder.toString(),\r\n      }\r\n    });\r\n  }\r\n\r\n  updateInputType(id: number, staticName: string, inputType: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiFieldsRoot + 'InputType'), null, {\r\n      params: { appId: this.context.appId.toString(), attributeId: id.toString(), field: staticName, inputType }\r\n    });\r\n  }\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToMetadata {\r\n\r\n  static getRoutes(): Route[] {\r\n    const defaultRoute: Route = {\r\n      path: 'metadata/:targetType/:keyType/:key',\r\n      loadChildren: () => import('./metadata.module').then(m => m.MetadataModule),\r\n      data: { title: 'Metadata' },\r\n    };\r\n    const routes: Route[] = [\r\n      defaultRoute,\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/contentType/:contentTypeStaticName`,\r\n      },\r\n      {\r\n        ...defaultRoute,\r\n        path: `${defaultRoute.path}/title/:title/contentType/:contentTypeStaticName`,\r\n      }\r\n    ];\r\n    return routes;\r\n  }\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    let url = `metadata/${targetType}/${keyType}/${key}`;\r\n    if (dialogTitle) {\r\n      url += `/title/${encodeURIComponent(dialogTitle)}`;\r\n    }\r\n    if (contentTypeStaticName) {\r\n      url += `/contentType/${contentTypeStaticName}`;\r\n    }\r\n    return url;\r\n  }\r\n\r\n  static getUrlApp(appId: number, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.app.targetType,\r\n      eavConstants.metadata.app.keyType,\r\n      appId.toString(),\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlAttribute(attributeId: number, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.attribute.targetType,\r\n      eavConstants.metadata.attribute.keyType,\r\n      attributeId.toString(),\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n  static getUrlContentType(staticName: string, dialogTitle?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.contentType.targetType,\r\n      eavConstants.metadata.contentType.keyType,\r\n      staticName,\r\n      dialogTitle,\r\n    );\r\n  }\r\n\r\n  static getUrlEntity(guid: string, dialogTitle?: string, contentTypeStaticName?: string): string {\r\n    return this.getUrl(\r\n      eavConstants.metadata.entity.targetType,\r\n      eavConstants.metadata.entity.keyType,\r\n      guid,\r\n      dialogTitle,\r\n      contentTypeStaticName,\r\n    );\r\n  }\r\n\r\n}\r\n","import { Route } from '@angular/router';\r\nimport { eavConstants, MetadataKeyType } from '../shared/constants/eav.constants';\r\n\r\nexport class GoToPermissions {\r\n\r\n  static route: Route = {\r\n    path: 'permissions/:targetType/:keyType/:key',\r\n    loadChildren: () => import('./permissions.module').then(m => m.PermissionsModule),\r\n    data: { title: 'Permissions' },\r\n  };\r\n\r\n  static getUrl(targetType: number, keyType: MetadataKeyType, key: string): string {\r\n    return `permissions/${targetType}/${keyType}/${key}`;\r\n  }\r\n\r\n  static getUrlApp(appId: number): string {\r\n    return this.getUrl(eavConstants.metadata.app.targetType, eavConstants.metadata.app.keyType, appId.toString());\r\n  }\r\n\r\n  static getUrlAttribute(id: number): string {\r\n    return this.getUrl(eavConstants.metadata.attribute.targetType, eavConstants.metadata.attribute.keyType, id.toString());\r\n  }\r\n\r\n  /** For historic reasons, it's the same as Entity */\r\n  static getUrlContentType(guid: string): string {\r\n    return this.getUrlEntity(guid);\r\n  }\r\n\r\n  static getUrlEntity(guid: string): string {\r\n    return this.getUrl(eavConstants.metadata.entity.targetType, eavConstants.metadata.entity.keyType, guid);\r\n  }\r\n\r\n  static getUrlLanguage(id: string): string {\r\n    return this.getUrl(eavConstants.metadata.language.targetType, eavConstants.metadata.language.keyType, id);\r\n  }\r\n\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n        }\n    }\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateHostAriaDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent !== null && newContent !== void 0 ? newContent : ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateHostAriaDescription(newDescription) {\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        if (newDescription) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        this._description = newDescription;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n}\nMatBadge.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive });\nMatBadge.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () {\n        return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }];\n    }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatBadgeModule {\n}\nMatBadgeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatBadgeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] });\nMatBadgeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, imports: [[A11yModule, MatCommonModule], MatCommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_content-type-fields_services_content-types-fields_service_ts-projects-15ce19.fd560e82b23bc3e7.js"}