{"version":3,"file":"default-projects_eav-ui_src_app_dev-rest_tab-permissions_tab-permissions_component_ts.5207e977f8b67df2.js","mappings":"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","names":["i0","ctx_r0","data","permissions","length","DevRestTabPermissionsComponent","constructor","this","input","#dialogRouter","transient","DialogRoutingService","gridOptions","buildGridOptions","openPermissions","navRelative","GoToPermissions","getUrlContentType","permissionTarget","defaultGridOptions","columnDefs","ColumnDefinitions","Id","TextWide","headerName","field","width","headerClass","cellClass","selectors","inputs","decls","vars","consts","template","rf","ctx","DevRestTabPermissionsComponent_Conditional_8_Template","DevRestTabPermissionsComponent_Conditional_9_Template","DevRestTabPermissionsComponent_Conditional_10_Template","name","MatButtonModule","i1","TippyDirective","MatIconModule","i2","MatBadgeModule","i3","SxcGridModule","i4","encapsulation","BADGE_CONTENT_CLASS","_MatBadgeStyleLoader","static","__ngFactoryType__","type","styles","changeDetection","MatBadge","_ngZone","inject","NgZone","_elementRef","ElementRef","_ariaDescriber","AriaDescriber","_renderer","Renderer2","_animationMode","ANIMATION_MODULE_TYPE","optional","_idGenerator","_IdGenerator","color","_color","value","_setColor","overlap","disabled","position","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","size","hidden","_badgeElement","_inlineBadgeDescription","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","styleLoader","_CdkPrivateStyleLoader","load","_VisuallyHiddenLoader","isAbove","indexOf","isAfter","getBadgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","getId","classList","add","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","hostAttrs","hostVars","hostBindings","booleanAttribute","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/dev-rest/tab-permissions/tab-permissions.component.html","./projects/eav-ui/src/app/dev-rest/tab-permissions/tab-permissions.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<h3>Permissions ({{ data().permissions.length }})</h3>\r\n<p>\r\n  This target <code>{{ data().name }}</code> has {{ data().permissions.length }} permissions\r\n  configured.\r\n  <button mat-icon-button tippy=\"Open permissions\" (click)=\"openPermissions()\">\r\n    @if (data().permissions.length) {\r\n      <mat-icon [matBadge]=\"data().permissions.length\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n        matBadgePosition=\"below after\" aria-hidden=\"false\">\r\n        person\r\n      </mat-icon>\r\n    }\r\n    @if (!data().permissions.length) {\r\n      <mat-icon>person</mat-icon>\r\n    }\r\n  </button>\r\n</p>\r\n@if (!data().permissions.length) {\r\n  <p class=\"warning info-box\">\r\n    <mat-icon>warning</mat-icon>\r\n    Warning: you don't have any permissions configured. So only Super-Users (Host) will be able to use the API\r\n    endpoints.\r\n  </p>\r\n}\r\n\r\n<ag-grid-angular class=\"ag-theme-material\" [rowData]=\"data().permissions\" [gridOptions]=\"gridOptions\"\r\n  [style.height]=\"(33 + data().permissions.length * 48) + 'px'\">\r\n</ag-grid-angular>\r\n\r\n<h4>Super-Users (Host) can use all Endpoints</h4>\r\n<p>\r\n  As a super-user you can always access these REST endpoints, so this will make development easy.\r\n  Just remember to change the content-type permissions when you publish your work to public pages.\r\n</p>\r\n\r\n<h4>Set permissions for visitors to use this</h4>\r\n<p>\r\n  To let JavaScript access the REST endpoints for normal users, you must set the permissions of the\r\n  content-type.\r\n  Usually you will just want to set it like <em>if user has view-permissions, let him read this\r\n    content-type</em>.\r\n  In rare cases (eg. JS based forms) you may also want to give it some write permissions. Just be careful.\r\n  If you give write permissions, you will usually <em>only</em> want to give create, but not edit.\r\n</p>\r\n\r\n<h4>Setting permissions for use outside of DNN</h4>\r\n<p>\r\n  When calling API endpoints from a DNN page you will usually use the <code>$2sxc</code> or the DNN\r\n  Services-Framework.\r\n  These automatically add some HTTP-Headers (see tab about HTTP Headers) which let DNN determine that the\r\n  API-Call\r\n  was made on a specific page/module - and DNN uses this to check the permissions.\r\n</p>\r\n<p>\r\n  IF you are calling the endpoint from outside of DNN then these headers will be missing.\r\n  Because of this, permissions saying \"If has VIEW permissions, allow read\" will fail - because DNN cannot\r\n  determine\r\n  if the user has view permissions.\r\n</p>\r\n<p>\r\n  So to enable use from external, the condition must be \"If has ANONYMOUS permissions, allow ...\".\r\n  Because the ANONYMOUS check passes even if DNN doesn't know what page the module is on.\r\n</p>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { DevRestBaseModel } from '..';\r\nimport { transient } from '../../../../../core';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n    selector: 'app-dev-rest-tab-permissions',\r\n    templateUrl: './tab-permissions.component.html',\r\n    imports: [\r\n        MatButtonModule,\r\n        TippyDirective,\r\n        MatIconModule,\r\n        MatBadgeModule,\r\n        SxcGridModule,\r\n    ]\r\n})\r\nexport class DevRestTabPermissionsComponent {\r\n  data = input<DevRestBaseModel>();\r\n\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  openPermissions() {\r\n    this.#dialogRouter.navRelative([GoToPermissions.getUrlContentType(this.data().permissionTarget)]);\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          headerName: 'Name',\r\n          field: 'Title',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Identity',\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWide,\r\n          field: 'Condition',\r\n        },\r\n        {\r\n          field: 'Grant',\r\n          width: 70,\r\n          headerClass: 'dense',\r\n          cellClass: 'no-outline',\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","import { AriaDescriber, _IdGenerator, InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, NgZone, ElementRef, Renderer2, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Input, NgModule } from '@angular/core';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { MatCommonModule } from '@angular/material/core';\n\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component });\n    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"19.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-sys-error));color:var(--mat-badge-text-color, var(--mat-sys-on-error));font-family:var(--mat-badge-text-font, var(--mat-sys-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-sys-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-sys-corner-full))}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}@media(forced-colors: active){.mat-badge-content{outline:solid 1px;border-radius:0}}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-error) 38%, transparent));color:var(--mat-badge-disabled-state-text-color, var(--mat-sys-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, 6px);min-height:var(--mat-badge-small-size-container-size, 6px);line-height:var(--mat-badge-small-size-line-height, 6px);padding:var(--mat-badge-small-size-container-padding, 0);font-size:var(--mat-badge-small-size-text-size, 0);margin:var(--mat-badge-small-size-container-offset, -6px 0)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset, -6px)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, 16px);min-height:var(--mat-badge-container-size, 16px);line-height:var(--mat-badge-line-height, 16px);padding:var(--mat-badge-container-padding, 0 4px);font-size:var(--mat-badge-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-container-offset, -12px 0)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset, -12px)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, 16px);min-height:var(--mat-badge-large-size-container-size, 16px);line-height:var(--mat-badge-large-size-line-height, 16px);padding:var(--mat-badge-large-size-container-padding, 0 4px);font-size:var(--mat-badge-large-size-text-size, var(--mat-sys-label-small-size));margin:var(--mat-badge-large-size-container-offset, -12px 0)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset, -12px)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    _ngZone = inject(NgZone);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber);\n    _renderer = inject(Renderer2);\n    _animationMode = inject(ANIMATION_MODULE_TYPE, { optional: true });\n    _idGenerator = inject(_IdGenerator);\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.io/components/badge/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    _color = 'primary';\n    /** Whether the badge should overlap its contents or not */\n    overlap = true;\n    /** Whether the badge is disabled. */\n    disabled;\n    /**\n     * Position the badge should reside.\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\n     */\n    position = 'above after';\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    _content;\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    _description;\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n    size = 'medium';\n    /** Whether the badge is hidden. */\n    hidden;\n    /** Visible badge element. */\n    _badgeElement;\n    /** Inline badge description. Used when the badge is applied to non-interactive host elements. */\n    _inlineBadgeDescription;\n    /** Whether the OnInit lifecycle hook has run yet */\n    _isInitialized = false;\n    /** InteractivityChecker to determine if the badge host is focusable. */\n    _interactivityChecker = inject(InteractivityChecker);\n    _document = inject(DOCUMENT);\n    constructor() {\n        const styleLoader = inject(_CdkPrivateStyleLoader);\n        styleLoader.load(_MatBadgeStyleLoader);\n        styleLoader.load(_VisuallyHiddenLoader);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = this._elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === 'mat-icon' &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', this._idGenerator.getId('mat-badge-content-'));\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, deps: [], target: i0.ɵɵFactoryTarget.Directive });\n    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"19.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: () => [], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n    static ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] });\n    static ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] });\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"19.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[2]}