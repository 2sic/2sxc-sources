{"version":3,"file":"projects_eav-ui_src_app_apps-management_apps-management-nav_apps-management-nav_component_ts.687ebf84ca480e5d.js","mappings":"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","names":["webApiTypeRoot","webApiTypeScopes","ContentTypesService","constructor","http","context","dnnContext","this","apiUrl","name","$2sxc","retrieveContentType","staticName","get","params","appId","toString","contentTypeId","retrieveContentTypes","scope","getScopes","pipe","map","scopesData","scopes","old","Object","keys","key","value","getScopesV2","save","contentType","post","appid","delete","StaticName","import","files","formData","FormData","file","append","zoneId","createGhost","sourceStaticName","static","t","i0","i1","i2","i3","_angular_core__WEBPACK_IMPORTED_MODULE_2__","jDH","factory","ɵfac","ExportAppPartsService","getContentInfo","webApiAppPartsRoot","exportParts","contentTypeIds","entityIds","templateIds","url","join","window","open","ExportAppService","getAppInfo","webApiAppRoot","exportAppUrl","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","withPortalFiles","GlobalDialogConfigService","globalConfigService","log","EavLogger","dialogSettings$","a","svcId","getShared$","getDialogSettings","shareReplay","refCount","reqBy","dlgSettings","Context","Language","List","filter","language","IsEnabled","tap","allowDebug","Enable","DebugMode","_angular_core__WEBPACK_IMPORTED_MODULE_6__","providedIn","ImportAppPartsService","importAppParts","resetApp","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","getAll","webApiEntityList","importQuery","from","toBase64","switchMap","fileBase64","AppId","ContentBase64","success","Success","Messages","clonePipeline","id","Id","webApiViewRoot","webApiViews","webApiViewDelete","webApiViewImport","webApiViewPolymorph","webApiViewUsage","ViewsService","export","getPolymorphism","getUsage","guid","_angular_core__WEBPACK_IMPORTED_MODULE_1__","AppsManagementNavItems","path","icon","svgIcon","tippy","child","breadcrumb_r3","AppsManagementNavComponent_ng_container_8_Conditional_1_Template","last_r4","AppsManagementNavComponent","#globalDialogConfigSvc","#dialogClose","dialogRef","media","inject","smallScreen","matchMedia","sideNavOpened","matches","navItems","transient","DialogRoutingService","ngOnInit","fetchDialogSettings","doOnDialogClosed","addEventListener","c","sidenav","opened","mode","closeDialog","close","subscribe","core","VBU","selectors","viewQuery","rf","ctx","_r1","sidenav_r2","AppsManagementNavComponent_ng_container_8_Template","AppsManagementNavComponent_ng_template_9_Template","AppsManagementNavComponent_For_19_Template","_forTrack0","emptyTemplate_r6","MatToolbarModule","i4","MatIconModule","i5","BreadcrumbModule","i6","MatButtonModule","i7","MatSidenavModule","i8","RouterOutlet","NavItemListComponent","ToggleDebugDirective","styles","ImportAppService","importApp","changedName","retryOnDuplicate","result","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","_angular_core__WEBPACK_IMPORTED_MODULE_4__","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","split","onerror","error","readAsText","logSpecs","enabled","specs","ServiceBase","router","route","super","ngOnDestroy","destroy","snapshot","state","getCurrentNavigation","extras","callback","l","fnIf","subscriptions","add","childDialogClosed$","end","navPath","navigate","navRelative","commands","relativeTo","navParentFirstChild","parent","firstChild","events","event","NavigationEnd","startWith","pairwise","hadChildBefore","hasChildNow","_angular_core__WEBPACK_IMPORTED_MODULE_7__","all","getEntities","getAvailableEntities","webApiEntityRoot","EntityService","queryService","QueryService","getEntities$","p","contentTypeName","entitiesFilter","contentTypes","itemIds","fields","data","Default","entityId","force","parentId","parentField","GlobalConfigService","snackBar","debugState","signal","isDebug","computed","allowDebugMode","debugEnabled","debugEnabled$","toObservable","initial","sessionStorage","getItem","keyDebug","set","allow","oldConfig","newConfig","toggleDebugEnabled","duration","queryUrl","hasParams","urlParams","toLocaleLowerCase","includes","substring","Guids","Subscription","unsubscribe","source","options","injector","assertInInjectionContext","Injector","subject","ReplaySubject","watcher","effect","err","untracked","next","manualCleanup","DestroyRef","onDestroy","complete","asObservable","toSignal","requiresCleanup","cleanupRef","requireSync","kind","initialValue","sub","rejectErrors","bind","current","ɵRuntimeError"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/app-administration/services/global-dialog-config.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/managment-nav-items.ts","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.html","./projects/eav-ui/src/app/apps-management/apps-management-nav/apps-management-nav.component.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/services/entity.service.ts","./projects/eav-ui/src/app/shared/services/global-config.service.ts","./projects/eav-ui/src/app/shared/services/query.service.ts","./projects/eav-ui/src/app/shared/services/service-base.ts","./node_modules/@angular/core/fesm2022/rxjs-interop.mjs"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  private apiUrl(name: string) {\r\n    return this.dnnContext.$2sxc.http.apiUrl(name);\r\n  }\r\n\r\n  retrieveContentType(staticName: string) {\r\n    return this.http.get<ContentType>(this.apiUrl(webApiTypeGet), {\r\n      params: { appId: this.context.appId.toString(), contentTypeId: staticName }\r\n    });\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.http.get<ContentType[]>(this.apiUrl(webApiTypes), {\r\n      params: { appId: this.context.appId.toString(), scope }\r\n    });\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.http.get<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(this.apiUrl(webApiTypeScopes), {\r\n      params: { appId: this.context.appId.toString() }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.context.appId.toString() },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.context.appId.toString(), staticName: contentType.StaticName },\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  createGhost(sourceStaticName: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.context.appId.toString(), sourceStaticName },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.dnnContext.$2sxc.http.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.context.appId}&zoneId=${this.context.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable, shareReplay, tap } from 'rxjs';\r\nimport { DialogSettings } from '../../shared/models/dialog-settings.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { EavLogger } from '../../shared/logging/eav-logger';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\nconst logThis = false;\r\nconst nameOfThis = 'GlobalDialogConfigService';\r\n\r\nconst webApiSettings = 'admin/dialog/settings';\r\n\r\n/**\r\n * Service for getting dialog settings for the current app.\r\n * \r\n * Note that it should normally be shared, to save resources / network calls.\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalDialogConfigService {\r\n\r\n  log = new EavLogger(nameOfThis, logThis);\r\n\r\n  constructor(\r\n    private http: HttpClient,\r\n    private context: Context,\r\n    private globalConfigService: GlobalConfigService,\r\n  ) {\r\n    this.log.a(`using context #${this.context.log.svcId}`);\r\n  }\r\n\r\n  private dialogSettings$: Record<number, Observable<DialogSettings>> = {};\r\n\r\n  getShared$(appId: number): Observable<DialogSettings> {\r\n    this.log.a('getShared$ appId: ' + appId);\r\n    this.dialogSettings$[appId] ??= this.getDialogSettings(appId, 'getShared$')\r\n      .pipe(shareReplay({ refCount: false }));\r\n    return this.dialogSettings$[appId];\r\n  }\r\n\r\n  private getDialogSettings(appId?: number, reqBy?: string): Observable<DialogSettings> {\r\n    this.log.a('getDialogSettings', {appId, reqBy});\r\n    return this.http.get<DialogSettings>(webApiSettings, {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dlgSettings => {\r\n        dlgSettings.Context.Language.List = dlgSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dlgSettings;\r\n      }),\r\n      tap(dlgSettings => {\r\n        this.globalConfigService.allowDebug(dlgSettings.Context.Enable.DebugMode);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { NavItem } from \"../../shared/models/nav-item.model\";\r\n\r\nexport const AppsManagementNavItems: NavItem[] = [\r\n  {\r\n    name: 'System', path: 'system', icon: 'settings', svgIcon: false, tippy: 'System Info', child: [\r\n      { name: 'Register', path: 'registration', icon: 'how_to_reg', svgIcon: false, tippy: 'Register this System on 2sxc Patrons' },\r\n    ]\r\n  },\r\n  { name: 'Apps', path: 'list', icon: 'star_border', svgIcon: false, tippy: 'Apps' },\r\n  { name: 'Languages', path: 'languages', icon: 'translate', svgIcon: false, tippy: 'Languages' },\r\n  { name: 'Extensions / Features', path: 'license', icon: 'tune', svgIcon: false, tippy: 'Extensions and Features' },\r\n];\r\n","\r\n<mat-toolbar appToggleDebug>\r\n  <div class=\"toolbar-container\">\r\n    <!-- Mat Icon Menu -->\r\n    <mat-icon class=\"menu-container\" (click)=\"sidenav.opened = !sidenav.opened\">menu</mat-icon>\r\n    <!-- App Name -->\r\n    <div>\r\n      <span> Manage Zone {{ zoneId }} </span>\r\n    </div>\r\n    <!-- Breadcrum in the Toolbar after show Img and Aoo Name -->\r\n    <xng-breadcrumb [separator]=\"emptyTemplate\">\r\n      <ng-container *xngBreadcrumbItem=\"let breadcrumb; let info = info; let last = last\">\r\n        @if (last)\r\n        {\r\n          <mat-icon class=\"breadcrumb-icon\">chevron_right</mat-icon>\r\n          {{ breadcrumb }}\r\n        }\r\n      </ng-container>\r\n    </xng-breadcrumb>\r\n    <ng-template #emptyTemplate></ng-template>\r\n  </div>\r\n  <span class=\"toolbar-spacer\"></span>\r\n  <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n    <mat-icon>close</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n<mat-sidenav-container appToggleDebug>\r\n  <mat-sidenav #sidenav [mode]=\"smallScreen.matches ? 'over' : 'side'\" [opened]=\"sideNavOpened\">\r\n    @for (navItem of navItems; track navItem.path)\r\n    {\r\n      <app-nav-item-list [navItem]=\"navItem\"></app-nav-item-list>\r\n    }\r\n\r\n    <div class=\"sideNav-bottom-info\">\r\n      <p>use Burger icon to show/hide menu</p>\r\n    </div>\r\n  </mat-sidenav>\r\n\r\n  <mat-sidenav-content>\r\n    <div class=\"container-content\">\r\n      <router-outlet></router-outlet>\r\n    </div>\r\n  </mat-sidenav-content>\r\n</mat-sidenav-container>\r\n","import { Component, inject, OnInit, ViewChild } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { Context } from '../../shared/services/context';\r\nimport { MatSidenav, MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport { GlobalDialogConfigService } from '../../app-administration/services';\r\nimport { AppsManagementNavItems } from './managment-nav-items';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { BreadcrumbModule } from 'xng-breadcrumb';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { NavItemListComponent } from '../../shared/components/nav-item-list/nav-item-list.component';\r\nimport { ToggleDebugDirective } from '../../shared/directives/toggle-debug.directive';\r\nimport { transient } from '../../core';\r\nimport { DialogRoutingService } from '../../shared/routing/dialog-routing.service';\r\n\r\n@Component({\r\n  selector: 'app-apps-management-nav',\r\n  templateUrl: './apps-management-nav.component.html',\r\n  styleUrls: ['./apps-management-nav.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatToolbarModule,\r\n    MatIconModule,\r\n    BreadcrumbModule,\r\n    MatButtonModule,\r\n    MatSidenavModule,\r\n    RouterOutlet,\r\n    NavItemListComponent,\r\n    ToggleDebugDirective,\r\n  ],\r\n})\r\nexport class AppsManagementNavComponent implements OnInit {\r\n  @ViewChild('sidenav') sidenav!: MatSidenav;\r\n\r\n  #globalDialogConfigSvc = inject(GlobalDialogConfigService);\r\n\r\n  zoneId = this.context.zoneId;\r\n\r\n  smallScreen: MediaQueryList = this.media.matchMedia('(max-width: 1000px)');\r\n  sideNavOpened = !this.smallScreen.matches;\r\n\r\n  navItems = AppsManagementNavItems;\r\n  #dialogClose = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AppsManagementNavComponent>,\r\n    private context: Context,\r\n    private media: MediaMatcher,\r\n  ) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchDialogSettings();\r\n\r\n    // Trigger settings load? not sure why, because it's cached in the service... on dialog close?\r\n    this.#dialogClose.doOnDialogClosed(() => this.fetchDialogSettings());\r\n\r\n    this.smallScreen.addEventListener('change', c => (\r\n      this.sidenav.opened = !c.matches,\r\n      this.sidenav.mode = c.matches ? 'over' : 'side'\r\n    ));\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  private fetchDialogSettings() {\r\n    this.#globalDialogConfigSvc.getShared$(0).subscribe();\r\n  }\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Injectable, OnDestroy } from '@angular/core';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'DialogRoutingService',\r\n  specs: {\r\n    doOnDialogClosed: true,\r\n  }\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase implements OnDestroy {\r\n\r\n  log = new EavLogger(logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    super.destroy();\r\n  }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => { callback(); })\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  public navParentFirstChild(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route.parent.firstChild });\r\n  }\r\n  \r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n\r\n\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { filter, map, Observable, shareReplay, switchMap } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { EntityBasic } from '../../shared/models/entity-basic';\r\nimport { QueryService } from './query.service';\r\nimport { transient } from '../../core';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'EntityService',\r\n  specs: {\r\n    all: false,\r\n    getEntities: false,\r\n    getAvailableEntities: false,\r\n    delete: false,\r\n  }\r\n};\r\n\r\nexport const webApiEntityRoot = 'admin/entity/';\r\nexport const webApiEntityList = 'admin/entity/list';\r\n\r\n @Injectable()\r\n export class EntityService {\r\n  private queryService = transient(QueryService);\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Get entities based on the content type name.\r\n   * As of 2024-04-29 only used in REST API.\r\n   * @param params\r\n   * @returns\r\n   */\r\n  getEntities$(params: Observable<{ contentTypeName: string }>): Observable<EntityBasic[]> {\r\n    this.log.fnIf('getEntities');\r\n    return params.pipe(\r\n      filter(p => p != null),\r\n      switchMap(p => this.getAvailableEntities(p.contentTypeName).pipe(shareReplay(1))),\r\n    );\r\n  }\r\n\r\n  private getAvailableEntities(contentTypeName: string, entitiesFilter?: string[]): Observable<EntityBasic[]> {\r\n    var log = this.log.fnIf('getAvailableEntities');\r\n    return this.queryService.getEntities({\r\n      contentTypes: [contentTypeName],\r\n      itemIds: entitiesFilter,\r\n      fields: 'Id,Guid,Title',\r\n      log: 'getAvailableEntities'\r\n    }).pipe(\r\n      map(data => data.Default)\r\n    );\r\n  }\r\n\r\n  delete(appId: number, contentType: string, entityId: number, force: boolean, parentId?: number, parentField?: string): Observable<null> {\r\n    this.log.fnIf('delete', { appId, contentType, entityId, force, parentId, parent });\r\n    return this.http.delete<null>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: {\r\n        contentType,\r\n        id: entityId.toString(),\r\n        appId,\r\n        force: force.toString(),\r\n        ...(parentId && { parentId: parentId.toString() }),\r\n        ...(parentId && parentField && { parentField }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Injectable, computed, signal } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { toObservable } from '@angular/core/rxjs-interop';\r\nimport { keyDebug } from '../constants/session.constants';\r\n\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class GlobalConfigService {\r\n\r\n  private debugState = signal<GlobalConfig>(null);\r\n\r\n  isDebug = computed(() => !!this.debugState()?.allowDebugMode && !!this.debugState()?.debugEnabled);\r\n\r\n  /** This observable is a left-over, try to remove once more is refactored */\r\n  debugEnabled$ = toObservable(this.isDebug);\r\n\r\n  constructor(private snackBar: MatSnackBar) {\r\n    const initial: GlobalConfig = {\r\n      id: 0,\r\n      debugEnabled: sessionStorage.getItem(keyDebug) === 'true',\r\n      allowDebugMode: false,\r\n    };\r\n    this.debugState.set(initial);\r\n  }\r\n\r\n  allowDebug(allow: boolean): void {\r\n    const oldConfig = this.debugState();\r\n    if (oldConfig.allowDebugMode === allow)\r\n      return;\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      allowDebugMode: allow,\r\n    };\r\n    this.debugState.set(newConfig);\r\n  }\r\n\r\n  toggleDebugEnabled(): void {\r\n    const oldConfig = this.debugState();\r\n    if (!oldConfig.allowDebugMode) {\r\n      this.snackBar.open('You do not have permissions to enter developer mode', null, { duration: 3000 });\r\n      return;\r\n    }\r\n\r\n    const newConfig: GlobalConfig = {\r\n      ...oldConfig,\r\n      debugEnabled: !oldConfig.debugEnabled,\r\n    };\r\n    this.debugState.set(newConfig);\r\n    this.snackBar.open(newConfig.debugEnabled ? 'developer mode on' : 'developer mode off', null, { duration: 3000 });\r\n  }\r\n}\r\n\r\ninterface GlobalConfig {\r\n  id: 0;\r\n  debugEnabled: boolean;\r\n  allowDebugMode: boolean;\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavLogger } from '../logging/eav-logger';\r\nimport { Context } from './context';\r\nimport { QueryStreams } from '../models/query-stream.model';\r\n\r\nconst logSpecs = {\r\n  enabled: false,\r\n  name: 'QueryService',\r\n  specs: {\r\n    all: false,\r\n    getAvailableEntities: false,\r\n    getEntities: false,\r\n  }\r\n};\r\n\r\n@Injectable()\r\nexport class QueryService {\r\n\r\n  log = new EavLogger(logSpecs);\r\n  constructor(private http: HttpClient, private context: Context) { }\r\n\r\n  getAvailableEntities(queryUrl: string, params: string, fields: string, entitiesFilter?: string[]): Observable<QueryStreams> {\r\n    this.log.fnIf('getAvailableEntities', { queryUrl, params, fields, entitiesFilter });\r\n    // Check if any params we should auto-add are already set (like in a query which has these params set in the configuration)\r\n    const hasParams = !!params;\r\n    const paramsLower = params?.toLocaleLowerCase() ?? '';\r\n    const hasAppId = paramsLower.includes('appid=') ?? false;\r\n    const allParams = ''\r\n      + (hasAppId ? '' : `&appId=${this.context.appId}`)\r\n      + (hasParams ? `&${params}` : '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(`app/auto/query/${queryUrl}?${urlParams}`,\r\n      {\r\n        Guids: entitiesFilter,\r\n      },\r\n    );\r\n  }\r\n\r\n  getEntities({ contentTypes, itemIds, fields, log }: { contentTypes: string[]; itemIds: string[]; fields: string; log: string }): Observable<QueryStreams> {\r\n    this.log.fnIf(`getEntities`, { log, contentTypes, itemIds, fields });\r\n    const allParams =\r\n      '&typeNames=' + (contentTypes?.join(',') ?? '')\r\n      + `&appId=${this.context.appId}`\r\n      + '&itemIds=' + (itemIds?.join(',') ?? '')\r\n      + '&$select=' + (fields ?? '' /* special catch to avoid the word \"null\" */);\r\n    // trim initial & because it will always start with an & and it should't\r\n    const urlParams = allParams.substring(1);\r\n    return this.http.post<QueryStreams>(\r\n      `app/auto/query/System.EntityPicker/Default?${urlParams}`,\r\n      {}\r\n    );\r\n  }\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\n/** Base class for services, withOUT logging */\r\n@Injectable()\r\nexport abstract class ServiceBase implements OnDestroy {\r\n\r\n  protected subscriptions = new Subscription();\r\n\r\n  // todo use this instead\r\n  ngOnDestroy(): void {\r\n    this.destroy();\r\n  }\r\n\r\n  destroy() {\r\n    this.subscriptions.unsubscribe();\r\n  }\r\n\r\n  // Note: we can't do this, because angular compiler complains about wanting to implement OnDestroy\r\n  // and if we do that, it will want a decorator, which we can't have here.\r\n  // ngOnDestroy() {\r\n  //   this.destroy();\r\n  // }\r\n\r\n}\r\n","/**\n * @license Angular v17.3.11\n * (c) 2010-2024 Google LLC. https://angular.io/\n * License: MIT\n */\n\nimport { assertInInjectionContext, inject, DestroyRef, ɵRuntimeError, ɵgetOutputDestroyRef, Injector, effect, untracked, assertNotInReactiveContext, signal, computed } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\n/**\n * Operator which completes the Observable when the calling context (component, directive, service,\n * etc) is destroyed.\n *\n * @param destroyRef optionally, the `DestroyRef` representing the current context. This can be\n *     passed explicitly to use `takeUntilDestroyed` outside of an [injection\n * context](guide/dependency-injection-context). Otherwise, the current `DestroyRef` is injected.\n *\n * @developerPreview\n */\nfunction takeUntilDestroyed(destroyRef) {\n    if (!destroyRef) {\n        assertInInjectionContext(takeUntilDestroyed);\n        destroyRef = inject(DestroyRef);\n    }\n    const destroyed$ = new Observable(observer => {\n        const unregisterFn = destroyRef.onDestroy(observer.next.bind(observer));\n        return unregisterFn;\n    });\n    return (source) => {\n        return source.pipe(takeUntil(destroyed$));\n    };\n}\n\n/**\n * Implementation of `OutputRef` that emits values from\n * an RxJS observable source.\n *\n * @internal\n */\nclass OutputFromObservableRef {\n    constructor(source) {\n        this.source = source;\n        this.destroyed = false;\n        this.destroyRef = inject(DestroyRef);\n        this.destroyRef.onDestroy(() => {\n            this.destroyed = true;\n        });\n    }\n    subscribe(callbackFn) {\n        if (this.destroyed) {\n            throw new ɵRuntimeError(953 /* ɵRuntimeErrorCode.OUTPUT_REF_DESTROYED */, ngDevMode &&\n                'Unexpected subscription to destroyed `OutputRef`. ' +\n                    'The owning directive/component is destroyed.');\n        }\n        // Stop yielding more values when the directive/component is already destroyed.\n        const subscription = this.source.pipe(takeUntilDestroyed(this.destroyRef)).subscribe({\n            next: value => callbackFn(value),\n        });\n        return {\n            unsubscribe: () => subscription.unsubscribe(),\n        };\n    }\n}\n/**\n * Declares an Angular output that is using an RxJS observable as a source\n * for events dispatched to parent subscribers.\n *\n * The behavior for an observable as source is defined as followed:\n *    1. New values are forwarded to the Angular output (next notifications).\n *    2. Errors notifications are not handled by Angular. You need to handle these manually.\n *       For example by using `catchError`.\n *    3. Completion notifications stop the output from emitting new values.\n *\n * @usageNotes\n * Initialize an output in your directive by declaring a\n * class field and initializing it with the `outputFromObservable()` function.\n *\n * ```ts\n * @Directive({..})\n * export class MyDir {\n *   nameChange$ = <some-observable>;\n *   nameChange = outputFromObservable(this.nameChange$);\n * }\n * ```\n *\n * @developerPreview\n */\nfunction outputFromObservable(observable, opts) {\n    ngDevMode && assertInInjectionContext(outputFromObservable);\n    return new OutputFromObservableRef(observable);\n}\n\n/**\n * Converts an Angular output declared via `output()` or `outputFromObservable()`\n * to an observable.\n *\n * You can subscribe to the output via `Observable.subscribe` then.\n *\n * @developerPreview\n */\nfunction outputToObservable(ref) {\n    const destroyRef = ɵgetOutputDestroyRef(ref);\n    return new Observable(observer => {\n        // Complete the observable upon directive/component destroy.\n        // Note: May be `undefined` if an `EventEmitter` is declared outside\n        // of an injection context.\n        destroyRef?.onDestroy(() => observer.complete());\n        const subscription = ref.subscribe(v => observer.next(v));\n        return () => subscription.unsubscribe();\n    });\n}\n\n/**\n * Exposes the value of an Angular `Signal` as an RxJS `Observable`.\n *\n * The signal's value will be propagated into the `Observable`'s subscribers using an `effect`.\n *\n * `toObservable` must be called in an injection context unless an injector is provided via options.\n *\n * @developerPreview\n */\nfunction toObservable(source, options) {\n    !options?.injector && assertInInjectionContext(toObservable);\n    const injector = options?.injector ?? inject(Injector);\n    const subject = new ReplaySubject(1);\n    const watcher = effect(() => {\n        let value;\n        try {\n            value = source();\n        }\n        catch (err) {\n            untracked(() => subject.error(err));\n            return;\n        }\n        untracked(() => subject.next(value));\n    }, { injector, manualCleanup: true });\n    injector.get(DestroyRef).onDestroy(() => {\n        watcher.destroy();\n        subject.complete();\n    });\n    return subject.asObservable();\n}\n\n/**\n * Get the current value of an `Observable` as a reactive `Signal`.\n *\n * `toSignal` returns a `Signal` which provides synchronous reactive access to values produced\n * by the given `Observable`, by subscribing to that `Observable`. The returned `Signal` will always\n * have the most recent value emitted by the subscription, and will throw an error if the\n * `Observable` errors.\n *\n * With `requireSync` set to `true`, `toSignal` will assert that the `Observable` produces a value\n * immediately upon subscription. No `initialValue` is needed in this case, and the returned signal\n * does not include an `undefined` type.\n *\n * By default, the subscription will be automatically cleaned up when the current [injection\n * context](/guide/dependency-injection-context) is destroyed. For example, when `toSignal` is\n * called during the construction of a component, the subscription will be cleaned up when the\n * component is destroyed. If an injection context is not available, an explicit `Injector` can be\n * passed instead.\n *\n * If the subscription should persist until the `Observable` itself completes, the `manualCleanup`\n * option can be specified instead, which disables the automatic subscription teardown. No injection\n * context is needed in this configuration as well.\n *\n * @developerPreview\n */\nfunction toSignal(source, options) {\n    ngDevMode &&\n        assertNotInReactiveContext(toSignal, 'Invoking `toSignal` causes new subscriptions every time. ' +\n            'Consider moving `toSignal` outside of the reactive context and read the signal value where needed.');\n    const requiresCleanup = !options?.manualCleanup;\n    requiresCleanup && !options?.injector && assertInInjectionContext(toSignal);\n    const cleanupRef = requiresCleanup ? options?.injector?.get(DestroyRef) ?? inject(DestroyRef) : null;\n    // Note: T is the Observable value type, and U is the initial value type. They don't have to be\n    // the same - the returned signal gives values of type `T`.\n    let state;\n    if (options?.requireSync) {\n        // Initially the signal is in a `NoValue` state.\n        state = signal({ kind: 0 /* StateKind.NoValue */ });\n    }\n    else {\n        // If an initial value was passed, use it. Otherwise, use `undefined` as the initial value.\n        state = signal({ kind: 1 /* StateKind.Value */, value: options?.initialValue });\n    }\n    // Note: This code cannot run inside a reactive context (see assertion above). If we'd support\n    // this, we would subscribe to the observable outside of the current reactive context, avoiding\n    // that side-effect signal reads/writes are attribute to the current consumer. The current\n    // consumer only needs to be notified when the `state` signal changes through the observable\n    // subscription. Additional context (related to async pipe):\n    // https://github.com/angular/angular/pull/50522.\n    const sub = source.subscribe({\n        next: value => state.set({ kind: 1 /* StateKind.Value */, value }),\n        error: error => {\n            if (options?.rejectErrors) {\n                // Kick the error back to RxJS. It will be caught and rethrown in a macrotask, which causes\n                // the error to end up as an uncaught exception.\n                throw error;\n            }\n            state.set({ kind: 2 /* StateKind.Error */, error });\n        },\n        // Completion of the Observable is meaningless to the signal. Signals don't have a concept of\n        // \"complete\".\n    });\n    if (ngDevMode && options?.requireSync && state().kind === 0 /* StateKind.NoValue */) {\n        throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n    }\n    // Unsubscribe when the current context is destroyed, if requested.\n    cleanupRef?.onDestroy(sub.unsubscribe.bind(sub));\n    // The actual returned signal is a `computed` of the `State` signal, which maps the various states\n    // to either values or errors.\n    return computed(() => {\n        const current = state();\n        switch (current.kind) {\n            case 1 /* StateKind.Value */:\n                return current.value;\n            case 2 /* StateKind.Error */:\n                throw current.error;\n            case 0 /* StateKind.NoValue */:\n                // This shouldn't really happen because the error is thrown on creation.\n                // TODO(alxhub): use a RuntimeError when we finalize the error semantics\n                throw new ɵRuntimeError(601 /* ɵRuntimeErrorCode.REQUIRE_SYNC_WITHOUT_SYNC_EMIT */, '`toSignal()` called with `requireSync` but `Observable` did not emit synchronously.');\n        }\n    });\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { outputFromObservable, outputToObservable, takeUntilDestroyed, toObservable, toSignal };\n"],"x_google_ignoreList":[17]}