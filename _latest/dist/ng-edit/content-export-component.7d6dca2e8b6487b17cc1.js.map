{"version":3,"sources":["./projects/ng-dialogs/src/app/content-export/content-export.component.html","./projects/ng-dialogs/src/app/content-export/content-export.component.ts"],"names":["dialogRef","route","contentExportService","appDialogConfigService","contentTypesService","hostClass","hasIdList","loading$","contentType$","contentTypeStaticName","this","snapshot","paramMap","get","selectedIds","itemIds","split","map","id","parseInt","ngOnInit","next","retrieveContentType","dialogSettings$","getDialogSettings","subscribe","dialogSettings","languages","Context","Language","All","Object","keys","key","name","formValues","defaultLanguage","Primary","language","recordExport","languageReferences","resourcesReferences","ngOnDestroy","complete","closeDialog","close","exportContent","ContentExportComponent"],"mappings":"qXAiBU,wBAA8D,QAAc,Q,uBAAjC,oBAAmB,qB,yBAWhE,8BACE,QACF,Q,mBADE,8D,qCAnBV,mBACE,gBACE,cACE,2BACE,oBAAW,oBAAS,OACpB,uBAAY,+EACV,wBAAqB,cAAG,OACxB,+BACF,OACF,OACF,OAEA,eACE,gBAAuB,uBAAW,OAClC,8BAAiB,mFACf,+BAAgC,oEAChC,OACA,+BAA8B,yCAA6B,OAC3D,qCAGF,OACF,OAEA,eACE,gBAAuB,+CAAmC,OAC1D,8BAAiB,yFAEf,+BAA+B,+DAC/B,OACA,+BAAkC,0CAA8B,OAClE,OACF,OAEA,eACE,gBAAuB,kCAAsB,OAC7C,8BAAiB,0FAEf,+BAA+B,mEAC/B,OACA,+BAAkC,0EAElC,OACF,OACF,OACF,OAEA,kBACE,qBAA0B,8DAAwB,kBAAM,OACxD,qBAAyE,gEACvE,yBACF,OACF,OACF,O,+BAhDoB,8CAEmB,oCAOhB,kDAII,iCAQJ,wDAA2C,gDAU3C,yDAA4C,gDAatB,wCChD7C,iBAkBE,WACUA,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,YACA,KAAAC,QACA,KAAAC,uBACA,KAAAC,yBACA,KAAAC,sBAhBgB,KAAAC,UAAY,mBAKtC,KAAAC,WAAY,EACZ,KAAAC,SAAW,IAAI,KAAgB,GAC/B,KAAAC,aAAe,IAAI,IAA6B,MAExC,KAAAC,sBAAwBC,KAAKT,MAAMU,SAASC,SAASC,IAAI,yBAS/D,IAAMC,EAAcJ,KAAKT,MAAMU,SAASC,SAASC,IAAI,eACrDH,KAAKJ,YAAcQ,EACfJ,KAAKJ,YACPI,KAAKK,QAAUD,EAAYE,MAAM,KAAKC,IAAI,SAAAC,GAAM,OAAAC,SAASD,EAAI,O,OAIjE,YAAAE,SAAA,sBACEV,KAAKH,SAASc,MAAK,GACnB,IAAMb,EAAeE,KAAKN,oBAAoBkB,oBAAoBZ,KAAKD,uBACjEc,EAAkBb,KAAKP,uBAAuBqB,oBACpD,YAAS,CAAChB,EAAce,IAAkBE,UAAU,SAAC,G,IAAA,mBAAcC,EAAc,KAC/E,EAAKlB,aAAaa,KAD6C,MAE/D,IAAMM,EAAYD,EAAeE,QAAQC,SAASC,IAClD,EAAKH,UAAYI,OAAOC,KAAKL,GAAWV,IAAI,SAAAgB,GAAO,OAAGA,IAAG,EAAEC,KAAMP,EAAUM,MAE3E,EAAKE,WAAa,CAChBC,gBAAiBV,EAAeE,QAAQC,SAASQ,QACjD5B,sBAAuB,EAAKA,sBAC5B6B,SAAU,GACVC,aAAc,EAAKjC,UAAY,YAAc,MAC7CkC,mBAAoB,OACpBC,oBAAqB,QAEvB,EAAKlC,SAASc,MAAK,MAIvB,YAAAqB,YAAA,WACEhC,KAAKF,aAAamC,WAClBjC,KAAKH,SAASoC,YAGhB,YAAAC,YAAA,WACElC,KAAKV,UAAU6C,SAGjB,YAAAC,cAAA,WACEpC,KAAKR,qBAAqB4C,cAAcpC,KAAKyB,WAC3CzB,KAAKJ,WAA8C,cAAjCI,KAAKyB,WAAWI,aAA+B7B,KAAKK,QAAU,O,sCA1DzEgC,GAAsB,oD,uBAAtBA,EAAsB,8E,46BDjBnC,gBACE,gBAA8B,Q,gBAAyC,OACzE,OAEA,cACE,+LAEA,cAAgD,gCAAqB,OAAK,oCAC5E,OAEA,wB,wBATgC,0EASY,kD,yUCC5C","file":"content-export-component.7d6dca2e8b6487b17cc1.js","sourcesContent":["<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">Export {{ (contentType$ | async)?.Name }}</div>\r\n</div>\r\n\r\n<p class=\"dialog-description\">\r\n  This will generate an XML file which you can edit in Excel. If you just want to import new data, use this to\r\n  export the schema that you can then fill in using Excel. Please visit\r\n  <a href=\"https://2sxc.org/help\" target=\"_blank\">https://2sxc.org/help</a> for more instructions.\r\n</p>\r\n\r\n<form #ngForm=\"ngForm\" class=\"dialog-form\" *ngIf=\"(loading$ | async) === false\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n    <div>\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Languages</mat-label>\r\n        <mat-select [(ngModel)]=\"formValues.language\" name=\"Language\">\r\n          <mat-option value=\"\">All</mat-option>\r\n          <mat-option *ngFor=\"let lang of languages\" [value]=\"lang.key\">{{ lang.key }}</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n    </div>\r\n\r\n    <div>\r\n      <p class=\"field-label\">Export data</p>\r\n      <mat-radio-group [(ngModel)]=\"formValues.recordExport\" name=\"RecordExport\">\r\n        <mat-radio-button value=\"Blank\">No, just export blank data schema (for new data import)\r\n        </mat-radio-button>\r\n        <mat-radio-button value=\"All\">Yes, export all content-items</mat-radio-button>\r\n        <mat-radio-button *ngIf=\"hasIdList\" value=\"Selection\">\r\n          Export selected {{ itemIds.length }} items\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <div>\r\n      <p class=\"field-label\">Value references to other languages</p>\r\n      <mat-radio-group [(ngModel)]=\"formValues.languageReferences\" name=\"LanguageReferences\"\r\n        [disabled]=\"formValues.recordExport === 'Blank'\">\r\n        <mat-radio-button value=\"Link\">Keep references to other languages (for re-import)\r\n        </mat-radio-button>\r\n        <mat-radio-button value=\"Resolve\">Replace references with values</mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n\r\n    <div>\r\n      <p class=\"field-label\">File / page references</p>\r\n      <mat-radio-group [(ngModel)]=\"formValues.resourcesReferences\" name=\"ResourcesReferences\"\r\n        [disabled]=\"formValues.recordExport === 'Blank'\">\r\n        <mat-radio-button value=\"Link\">Keep references (for re-import, for example Page:4711)\r\n        </mat-radio-button>\r\n        <mat-radio-button value=\"Resolve\">Replace references with real URLs (for example\r\n          /Portals/0...)\r\n        </mat-radio-button>\r\n      </mat-radio-group>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button color=\"accent\" [disabled]=\"!ngForm.form.valid\" (click)=\"exportContent()\">\r\n      Export Data\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin } from 'rxjs';\r\nimport { Language } from '../../../../edit/shared/models';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { AppDialogConfigService } from '../app-administration/services/app-dialog-config.service';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExport } from './models/content-export.model';\r\nimport { ContentExportService } from './services/content-export.service';\r\n\r\n@Component({\r\n  selector: 'app-content-export',\r\n  templateUrl: './content-export.component.html',\r\n  styleUrls: ['./content-export.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ContentExportComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  formValues: ContentExport;\r\n  languages: Language[];\r\n  itemIds: number[];\r\n  hasIdList = false;\r\n  loading$ = new BehaviorSubject(false);\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentExportComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentExportService: ContentExportService,\r\n    private appDialogConfigService: AppDialogConfigService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) {\r\n    const selectedIds = this.route.snapshot.paramMap.get('selectedIds');\r\n    this.hasIdList = !!selectedIds;\r\n    if (this.hasIdList) {\r\n      this.itemIds = selectedIds.split(',').map(id => parseInt(id, 10));\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loading$.next(true);\r\n    const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName);\r\n    const dialogSettings$ = this.appDialogConfigService.getDialogSettings();\r\n    forkJoin([contentType$, dialogSettings$]).subscribe(([contentType, dialogSettings]) => {\r\n      this.contentType$.next(contentType);\r\n      const languages = dialogSettings.Context.Language.All;\r\n      this.languages = Object.keys(languages).map(key => ({ key, name: languages[key] }));\r\n\r\n      this.formValues = {\r\n        defaultLanguage: dialogSettings.Context.Language.Primary,\r\n        contentTypeStaticName: this.contentTypeStaticName,\r\n        language: '',\r\n        recordExport: this.hasIdList ? 'Selection' : 'All',\r\n        languageReferences: 'Link',\r\n        resourcesReferences: 'Link',\r\n      };\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.loading$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportContent() {\r\n    this.contentExportService.exportContent(this.formValues,\r\n      this.hasIdList && this.formValues.recordExport === 'Selection' ? this.itemIds : null);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}