{"version":3,"file":"projects_eav-ui_src_app_features_features_module_ts-projects_eav-ui_src_app_shared_components-41d340.7cf70edd12f764a4.js","mappings":"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","names":["FeaturesModule","_class","FeatureDetailService","imports","CommonModule","MatButtonModule","MatIconModule","MatCardModule","SharedComponentsModule","TranslateModule","forChild","buildTranslateConfiguration","translateLoaderFactory","constructor","http","dnnContext","this","getFeatureDetails","featureNameId","get","$2sxc","apiUrl","webApiRoot","params","nameId","i0","i1","i2","factory","ɵfac","FieldHintComponent_mat_hint_1_ng_container_1_Template","_r2","FieldHintComponent_mat_error_2_ng_container_1_Template","FieldHintComponent","isError","isShort","toggleIsShort","selectors","inputs","ngContentSelectors","_c1","decls","vars","consts","template","rf","ctx","FieldHintComponent_mat_hint_1_Template","FieldHintComponent_mat_error_2_Template","FieldHintComponent_ng_template_3_Template","_c0","ClickStopPropagationDirective","onClick","event","stopPropagation","hostBindings","$event","copyToClipboard","str","el","document","createElement","value","setAttribute","style","position","left","body","appendChild","selected","getSelection","rangeCount","getRangeAt","select","execCommand","removeChild","removeAllRanges","addRange","SafeHtmlPipe","sanitizer","transform","html","bypassSecurityTrustHtml","pure","loader","provide","TranslateLoader","useFactory","deps","HttpClient","defaultLanguage","isolate","TranslateLoaderWithErrorHandling","window","sxcVersion","prefix","suffix","getTranslation","lang","pipe","catchError","error","console","warn","of","nextId","_MatBadgeBase","mixinDisabled","BADGE_CONTENT_CLASS","MatBadge","color","_color","_setColor","overlap","_overlap","val","coerceBooleanProperty","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","hidden","_hidden","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","super","size","_id","_isInitialized","_interactivityChecker","inject","InteractivityChecker","_document","DOCUMENT","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","ngOnInit","_clearExistingBadges","_createBadgeElement","ngOnDestroy","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","activeClass","classList","add","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","undefined","colorPalette","badges","querySelectorAll","Array","from","t","ANIMATION_MODULE_TYPE","ɵdir","type","hostAttrs","hostVars","disabled","features","MatBadgeModule","_class2","ɵmod","ɵinj","A11yModule","MatCommonModule"],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/features/features.module.ts","./projects/eav-ui/src/app/features/services/feature-detail.service.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/eav-ui/src/app/shared/pipes/safe-html.pipe.ts","./projects/eav-ui/src/app/shared/translation/translate-configuration.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-factory.ts","./projects/eav-ui/src/app/shared/translation/translate-loader-with-error-handling.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FeatureIconTextComponent } from './feature-icon-text/feature-icon-text.component';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { buildTranslateConfiguration } from '../shared/translation';\r\nimport { translateLoaderFactory } from '../shared/translation/translate-loader-factory';\r\nimport { FeatureInfoDialogComponent } from './feature-info-dialog/feature-info-dialog.component';\r\nimport { FeatureIconComponent } from './feature-icon/feature-icon.component';\r\nimport { FeatureTextInfoComponent } from './feature-text-info/feature-text-info.component';\r\nimport { FeatureIconIndicatorComponent } from './feature-icon-indicator/feature-icon-indicator.component';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { FeatureDetailService } from './services/feature-detail.service';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    SharedComponentsModule,\r\n    TranslateModule.forChild(buildTranslateConfiguration(translateLoaderFactory)),\r\n  ],\r\n  exports: [\r\n    FeatureIconComponent,\r\n    FeatureIconTextComponent,\r\n    FeatureInfoDialogComponent,\r\n    FeatureTextInfoComponent,\r\n    FeatureIconIndicatorComponent,\r\n  ],\r\n  providers: [\r\n    FeatureDetailService\r\n  ]\r\n})\r\nexport class FeaturesModule { }\r\n","import { Context as DnnContext } from '@2sic.com/sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { Feature } from '../models';\r\n\r\nexport const webApiRoot = \"admin/feature/\";\r\n\r\n@Injectable()\r\nexport class FeatureDetailService {\r\n  constructor(\r\n    private http: HttpClient,\r\n    private dnnContext: DnnContext\r\n  ) { }\r\n\r\n  getFeatureDetails(featureNameId: string): Observable<Feature> {\r\n    return this.http.get<Feature>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot + 'details'), {\r\n      params: { nameId: featureNameId }\r\n    });\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader, TranslateModuleConfig } from '@ngx-translate/core';\r\n\r\nexport function buildTranslateConfiguration(factory: (http: HttpClient) => TranslateLoader): TranslateModuleConfig {\r\n  const config: TranslateModuleConfig = {\r\n    loader: {\r\n      provide: TranslateLoader,\r\n      useFactory: factory,\r\n      deps: [HttpClient],\r\n    },\r\n    defaultLanguage: 'en',\r\n    isolate: true,\r\n  };\r\n  return config;\r\n}\r\n","import { HttpClient } from \"@angular/common/http\";\r\nimport { TranslateLoader } from \"@ngx-translate/core\";\r\nimport { EavWindow } from \"../models/eav-window.model\";\r\nimport { TranslateLoaderWithErrorHandling } from \"./translate-loader-with-error-handling\";\r\n\r\ndeclare const window: EavWindow;\r\n\r\n// AoT requires an exported function for factories\r\n// at least according to https://github.com/ngx-translate/http-loader\r\nexport function translateLoaderFactory(http: HttpClient): TranslateLoader {\r\n    return new TranslateLoaderWithErrorHandling(http, './i18n/', `.js?${window.sxcVersion}`);\r\n}","import { HttpClient } from '@angular/common/http';\r\nimport { TranslateLoader } from '@ngx-translate/core';\r\nimport { catchError, Observable, of } from 'rxjs';\r\n\r\n/**\r\n * This loader should catch a 404 if the file doesn't exist and not result in errors.\r\n * https://stackoverflow.com/questions/47391613/how-to-set-a-fallback-assets-i18n-en-json-when-url-is-not-available-ngx-trans\r\n */\r\nexport class TranslateLoaderWithErrorHandling implements TranslateLoader {\r\n  constructor(private http: HttpClient, private prefix: string, private suffix: string) { }\r\n\r\n  getTranslation(lang: string): Observable<Record<string, any>> {\r\n    return this.http.get<Record<string, any>>(`${this.prefix}${lang}${this.suffix}`).pipe(\r\n      catchError(error => {\r\n        console.warn(`Translation: Failed to get language '${lang}' from ${this.prefix}`, error);\r\n        return of({});\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { inject, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { DOCUMENT } from '@angular/common';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\nlet nextId = 0;\n// Boilerplate for applying mixins to MatBadge.\n/** @docs-private */\nconst _MatBadgeBase = mixinDisabled(class {\n});\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Directive to display a text badge. */\nclass MatBadge extends _MatBadgeBase {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** Whether the badge should overlap its contents or not */\n    get overlap() {\n        return this._overlap;\n    }\n    set overlap(val) {\n        this._overlap = coerceBooleanProperty(val);\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    /** Whether the badge is hidden. */\n    get hidden() {\n        return this._hidden;\n    }\n    set hidden(val) {\n        this._hidden = coerceBooleanProperty(val);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        super();\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        this._overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: MatBadge, selector: \"[matBadge]\", inputs: { disabled: [\"matBadgeDisabled\", \"disabled\"], color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\"], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\"] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    inputs: ['disabled: matBadgeDisabled'],\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }]; }, propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: ['matBadgeOverlap']\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: ['matBadgeHidden']\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, declarations: [MatBadge], imports: [A11yModule, MatCommonModule], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [A11yModule, MatCommonModule],\n                    exports: [MatBadge, MatCommonModule],\n                    declarations: [MatBadge],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[10]}