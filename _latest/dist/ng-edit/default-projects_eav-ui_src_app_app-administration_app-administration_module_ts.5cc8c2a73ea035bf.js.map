{"version":3,"mappings":"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","names":["appAdministrationDialog","name","initContext","panelSize","panelClass","getComponent","AppAdministrationNavComponent","Promise","analyzeSettingsDialog","AnalyzeSettingsComponent","settingsItemDetailsDialog","SettingsItemDetailsComponent","editContentTypeDialog","EditContentTypeComponent","exportAppPartsDialog","ExportAppPartsComponent","exportAppDialog","ExportAppComponent","t","importAppPartsDialog","ImportAppPartsComponent","importContentTypeDialog","ImportContentTypeComponent","importQueryDialog","ImportQueryComponent","importViewDialog","ImportViewComponent","languagePermissionsDialog","LanguagePermissionsComponent","viewsUsageDialog","ViewsUsageComponent","appAdministrationRoutes","path","component","DialogEntryComponent","data","dialog","children","redirectTo","pathMatch","EmptyRouteComponent","title","loadChildren","then","m","ContentItemsModule","matcher","edit","EditModule","refreshEdit","RefreshEditModule","GoToMetadata","GoToDevRest","ContentTypeFieldsModule","ContentExportModule","ContentImportModule","GoToPermissions","history","Object","AppAdministrationRoutingModule","RouterModule","AppAdministrationModule","Context","AppDialogConfigService","AppInternalsService","ContentTypesService","PipelinesService","ViewsService","ContentExportService","SourceService","ContentItemsService","ExportAppService","ExportAppPartsService","ImportAppPartsService","DialogService","AnalyzeSettingsService","ContentTypesFieldsService","MetadataService","ZoneService","imports","SharedComponentsModule","MatDialogModule","CommonModule","MatButtonModule","MatIconModule","SxcGridModule","MatTabsModule","FormsModule","MatInputModule","MatSelectModule","MatRadioModule","MatProgressSpinnerModule","MatCheckboxModule","MatExpansionModule","MatCardModule","MatRippleModule","MatSlideToggleModule","MatSnackBarModule","MatMenuModule","MatBadgeModule","CreateFileDialogModule","constructor","http","context","dnnContext","this","getStack","part","key","view","stringifyValue","get","$2sxc","apiUrl","webApiAppRoot","params","appId","toString","pipe","map","stack","stackItem","_value","JSON","stringify","Value","i0","factory","getAppInternals","targetType","keyType","contentTypeName","contentType","MAT_CHECKBOX_DEFAULT_OPTIONS","InjectionToken","providedIn","MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY","color","clickAction","nextUniqueId","defaults","MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","MatCheckbox","multi","_MatCheckboxBase","mixinTabIndex","mixinColor","mixinDisableRipple","mixinDisabled","_elementRef","elementRef","_changeDetectorRef","_focusMonitor","_ngZone","tabIndex","_animationMode","_options","super","ariaLabel","ariaLabelledby","_uniqueId","id","labelPosition","change","EventEmitter","indeterminateChange","_onTouched","_currentAnimationClass","_currentCheckState","_controlValueAccessorChangeFn","_checked","_disabled","_indeterminate","defaultColor","parseInt","inputId","required","_required","value","coerceBooleanProperty","ngAfterViewInit","monitor","subscribe","focusOrigin","resolve","markForCheck","_syncIndeterminate","ngAfterViewChecked","ngOnDestroy","stopMonitoring","checked","disabled","newValue","indeterminate","changed","_transitionCheckState","emit","_isRippleDisabled","disableRipple","_onLabelTextChange","detectChanges","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","_getAriaChecked","newState","oldState","element","nativeElement","length","classList","remove","_getAnimationClassForCheckStateTransition","add","animationClass","runOutsideAngular","setTimeout","_emitChangeEvent","event","MatCheckboxChange","source","_inputElement","toggle","_onInputClick","_a","stopPropagation","focus","origin","options","focusVia","_onInteractionEvent","animSuffix","nativeCheckbox","ɵfac","i1","ANIMATION_MODULE_TYPE","ɵcmp","selectors","h","MatRipple","s","a","ngContentSelectors","directives","i2","i3","styles","_MatCheckboxRequiredValidatorModule","ɵmod","ɵinj","MatCommonModule","ObserversModule"],"sources":["./projects/eav-ui/src/app/app-administration/app-administration-nav/app-administration-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/analyze-settings-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/analyze-settings/settings-item-details/settings-item-details.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/edit-content-type/edit-content-type-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app/export-app-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-app-parts/import-app-parts-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-content-type/import-content-type-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-query/import-query-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/import-view/import-view-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/language-permissions/language-permissions-dialog.config.ts","./projects/eav-ui/src/app/app-administration/sub-dialogs/views-usage/views-usage-dialog.config.ts","./projects/eav-ui/src/app/app-administration/app-administration-routing.module.ts","./projects/eav-ui/src/app/app-administration/app-administration.module.ts","./projects/eav-ui/src/app/app-administration/services/analyze-settings.service.ts","./projects/eav-ui/src/app/app-administration/services/app-internals.service.ts","./node_modules/@angular/material/fesm2015/checkbox.mjs"],"sourcesContent":["import { DialogConfig } from '../../shared/models/dialog-config.model';\r\n\r\nexport const appAdministrationDialog: DialogConfig = {\r\n  name: 'APP_ADMINISTRATION_DIALOG',\r\n  initContext: true,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { AppAdministrationNavComponent } = await import('./app-administration-nav.component');\r\n    return AppAdministrationNavComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const analyzeSettingsDialog: DialogConfig = {\r\n  name: 'ANALYZE_SETTINGS',\r\n  initContext: false,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { AnalyzeSettingsComponent } = await import('./analyze-settings.component');\r\n    return AnalyzeSettingsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../../shared/models/dialog-config.model';\r\n\r\nexport const settingsItemDetailsDialog: DialogConfig = {\r\n  name: 'SETTINGS_ITEM_DETAILS',\r\n  initContext: false,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { SettingsItemDetailsComponent } = await import('./settings-item-details.component');\r\n    return SettingsItemDetailsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const editContentTypeDialog: DialogConfig = {\r\n  name: 'EDIT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'small',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { EditContentTypeComponent } = await import('./edit-content-type.component');\r\n    return EditContentTypeComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const exportAppPartsDialog: DialogConfig = {\r\n  name: 'EXPORT_APP_PARTS',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ExportAppPartsComponent } = await import('./export-app-parts.component');\r\n    return ExportAppPartsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const exportAppDialog: DialogConfig = {\r\n  name: 'EXPORT_APP',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ExportAppComponent } = await import('./export-app.component');\r\n    return ExportAppComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importAppPartsDialog: DialogConfig = {\r\n  name: 'IMPORT_APP_PARTS',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportAppPartsComponent } = await import('./import-app-parts.component');\r\n    return ImportAppPartsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importContentTypeDialog: DialogConfig = {\r\n  name: 'IMPORT_CONTENT_TYPE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportContentTypeComponent } = await import('./import-content-type.component');\r\n    return ImportContentTypeComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importQueryDialog: DialogConfig = {\r\n  name: 'IMPORT_QUERY_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportQueryComponent } = await import('./import-query.component');\r\n    return ImportQueryComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const importViewDialog: DialogConfig = {\r\n  name: 'IMPORT_VIEW_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'medium',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ImportViewComponent } = await import('./import-view.component');\r\n    return ImportViewComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const languagePermissionsDialog: DialogConfig = {\r\n  name: 'LANGUAGE_PERMISSIONS',\r\n  initContext: false,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { LanguagePermissionsComponent } = await import('./language-permissions.component');\r\n    return LanguagePermissionsComponent;\r\n  }\r\n};\r\n","import { DialogConfig } from '../../../shared/models/dialog-config.model';\r\n\r\nexport const viewsUsageDialog: DialogConfig = {\r\n  name: 'VIEWS_USAGE_DIALOG',\r\n  initContext: false,\r\n  panelSize: 'large',\r\n  panelClass: null,\r\n\r\n  async getComponent() {\r\n    const { ViewsUsageComponent } = await import('./views-usage.component');\r\n    return ViewsUsageComponent;\r\n  }\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { GoToDevRest } from '../dev-rest';\r\nimport { edit, refreshEdit } from '../edit/edit.matcher';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { DialogEntryComponent } from '../shared/components/dialog-entry/dialog-entry.component';\r\nimport { EmptyRouteComponent } from '../shared/components/empty-route/empty-route.component';\r\nimport { appAdministrationDialog } from './app-administration-nav/app-administration-dialog.config';\r\nimport { analyzeSettingsDialog } from './sub-dialogs/analyze-settings/analyze-settings-dialog.config';\r\nimport { settingsItemDetailsDialog } from './sub-dialogs/analyze-settings/settings-item-details/settings-item-details.config';\r\nimport { editContentTypeDialog } from './sub-dialogs/edit-content-type/edit-content-type-dialog.config';\r\nimport { exportAppPartsDialog } from './sub-dialogs/export-app-parts/export-app-parts-dialog.config';\r\nimport { exportAppDialog } from './sub-dialogs/export-app/export-app-dialog.config';\r\nimport { importAppPartsDialog } from './sub-dialogs/import-app-parts/import-app-parts-dialog.config';\r\nimport { importContentTypeDialog } from './sub-dialogs/import-content-type/import-content-type-dialog.config';\r\nimport { importQueryDialog } from './sub-dialogs/import-query/import-query-dialog.config';\r\nimport { importViewDialog } from './sub-dialogs/import-view/import-view-dialog.config';\r\nimport { languagePermissionsDialog } from './sub-dialogs/language-permissions/language-permissions-dialog.config';\r\nimport { viewsUsageDialog } from './sub-dialogs/views-usage/views-usage-dialog.config';\r\n\r\nconst appAdministrationRoutes: Routes = [\r\n  {\r\n    path: '', component: DialogEntryComponent, data: { dialog: appAdministrationDialog }, children: [\r\n      { path: '', redirectTo: 'home', pathMatch: 'full' },\r\n      { path: 'home', component: EmptyRouteComponent, data: { title: 'App Home' } },\r\n      {\r\n        path: 'data/:scope', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importContentTypeDialog, title: 'Import Content Type' },\r\n          },\r\n          {\r\n            path: 'items/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-items/content-items.module').then(m => m.ContentItemsModule)\r\n          },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../edit/edit.module').then(m => m.EditModule)\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          {\r\n            path: 'add',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: editContentTypeDialog, title: 'Add Content Type' },\r\n          },\r\n          {\r\n            path: ':contentTypeStaticName/edit',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: editContentTypeDialog, title: 'Edit Content Type' },\r\n          },\r\n          ...GoToMetadata.getRoutes(),\r\n          GoToDevRest.route,\r\n          {\r\n            path: 'fields/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-type-fields/content-type-fields.module').then(m => m.ContentTypeFieldsModule),\r\n            data: { title: 'Content Type Fields' },\r\n          },\r\n          {\r\n            path: 'export/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-export/content-export.module').then(m => m.ContentExportModule),\r\n            data: { title: 'Export Items' },\r\n          },\r\n          {\r\n            path: ':contentTypeStaticName/import',\r\n            loadChildren: () => import('../content-import/content-import.module').then(m => m.ContentImportModule),\r\n            data: { title: 'Import Items' },\r\n          },\r\n          GoToPermissions.route,\r\n        ],\r\n        data: { title: 'App Data' },\r\n      },\r\n      {\r\n        path: 'queries', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importQueryDialog, title: 'Import Query' }\r\n          },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit Query Name and Description', history: false },\r\n          },\r\n          ...GoToMetadata.getRoutes(),\r\n          { ...GoToPermissions.route, data: { title: 'Query Permissions' } },\r\n          GoToDevRest.route,\r\n        ],\r\n        data: { title: 'App Queries' },\r\n      },\r\n      {\r\n        path: 'views', component: EmptyRouteComponent, children: [\r\n          {\r\n            path: 'import',\r\n            component: DialogEntryComponent,\r\n            data: { dialog: importViewDialog, title: 'Import View' },\r\n          },\r\n          { path: 'usage/:guid', component: DialogEntryComponent, data: { dialog: viewsUsageDialog } },\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit View' },\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          { ...GoToPermissions.route, data: { title: 'View Permissions' } },\r\n          ...GoToMetadata.getRoutes(),\r\n        ],\r\n        data: { title: 'App Views' },\r\n      },\r\n      {\r\n        path: 'web-api', component: EmptyRouteComponent, data: { title: 'App WebApi' }, children: [\r\n          GoToDevRest.route,\r\n        ],\r\n      },\r\n      {\r\n        path: 'app', component: EmptyRouteComponent, children: [\r\n          ...GoToMetadata.getRoutes(),\r\n          {\r\n            matcher: edit,\r\n            loadChildren: () => import('../edit/edit.module').then(m => m.EditModule),\r\n            data: { title: 'Edit App Properties' },\r\n          },\r\n          {\r\n            matcher: refreshEdit,\r\n            loadChildren: () => import('../edit/refresh-edit.module').then(m => m.RefreshEditModule)\r\n          },\r\n          {\r\n            path: 'fields/:contentTypeStaticName',\r\n            loadChildren: () => import('../content-type-fields/content-type-fields.module').then(m => m.ContentTypeFieldsModule),\r\n            data: { title: 'Edit Fields of App Settings & Resources' },\r\n          },\r\n          {\r\n            path: 'language-permissions', component: DialogEntryComponent, data: { dialog: languagePermissionsDialog, title: 'Language Permissions' }, children: [\r\n              { ...GoToPermissions.route, data: { title: 'Language Permissions' } },\r\n            ],\r\n          },\r\n          { ...GoToPermissions.route, data: { title: 'App Permissions' } },\r\n          { path: 'export', component: DialogEntryComponent, data: { dialog: exportAppDialog, title: 'Export App' } },\r\n          { path: 'export/parts', component: DialogEntryComponent, data: { dialog: exportAppPartsDialog, title: 'Export App Parts' } },\r\n          { path: 'import/parts', component: DialogEntryComponent, data: { dialog: importAppPartsDialog, title: 'Import App Parts' } },\r\n          {\r\n            path: 'analyze/:part', component: DialogEntryComponent, data: { dialog: analyzeSettingsDialog, title: 'Analyze Settings / Resources' }, children: [\r\n              {\r\n                path: 'details/:view/:settingsItemKey',\r\n                component: DialogEntryComponent,\r\n                data: { dialog: settingsItemDetailsDialog, title: 'Settings / Resources Item Details' },\r\n              },\r\n            ],\r\n          },\r\n        ],\r\n        data: { title: 'Manage App' },\r\n      },\r\n    ]\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(appAdministrationRoutes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppAdministrationRoutingModule { }\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\nimport { ZoneService } from '../apps-management/services/zone.service';\r\nimport { SourceService } from '../code-editor/services/source.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentItemsService } from '../content-items/services/content-items.service';\r\nimport { ContentTypesFieldsService } from '../content-type-fields/services/content-types-fields.service';\r\nimport { CreateFileDialogModule } from '../create-file-dialog';\r\nimport { MetadataService } from '../permissions';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { Context } from '../shared/services/context';\r\nimport { DialogService } from '../shared/services/dialog.service';\r\nimport { SharedComponentsModule } from '../shared/shared-components.module';\r\nimport { AppAdministrationNavComponent } from './app-administration-nav/app-administration-nav.component';\r\nimport { AppAdministrationRoutingModule } from './app-administration-routing.module';\r\nimport { AppConfigurationComponent } from './app-configuration/app-configuration.component';\r\nimport { DataActionsComponent } from './data/data-actions/data-actions.component';\r\nimport { DataFieldsComponent } from './data/data-fields/data-fields.component';\r\nimport { DataItemsComponent } from './data/data-items/data-items.component';\r\nimport { DataComponent } from './data/data.component';\r\nimport { GettingStartedComponent } from './getting-started/getting-started.component';\r\nimport { QueriesActionsComponent } from './queries/queries-actions/queries-actions.component';\r\nimport { QueriesComponent } from './queries/queries.component';\r\nimport { AnalyzeSettingsService } from './services/analyze-settings.service';\r\nimport { AppDialogConfigService } from './services/app-dialog-config.service';\r\nimport { AppInternalsService } from './services/app-internals.service';\r\nimport { ContentTypesService } from './services/content-types.service';\r\nimport { ExportAppPartsService } from './services/export-app-parts.service';\r\nimport { ExportAppService } from './services/export-app.service';\r\nimport { ImportAppPartsService } from './services/import-app-parts.service';\r\nimport { PipelinesService } from './services/pipelines.service';\r\nimport { ViewsService } from './services/views.service';\r\nimport { AnalyzeSettingsKeyComponent } from './sub-dialogs/analyze-settings/analyze-settings-key/analyze-settings-key.component';\r\nimport { AnalyzeSettingsTotalResultsComponent } from './sub-dialogs/analyze-settings/analyze-settings-total-results/analyze-settings-total-results.component';\r\nimport { AnalyzeSettingsValueComponent } from './sub-dialogs/analyze-settings/analyze-settings-value/analyze-settings-value.component';\r\nimport { AnalyzeSettingsComponent } from './sub-dialogs/analyze-settings/analyze-settings.component';\r\nimport { SettingsItemDetailsComponent } from './sub-dialogs/analyze-settings/settings-item-details/settings-item-details.component';\r\nimport { EditContentTypeComponent } from './sub-dialogs/edit-content-type/edit-content-type.component';\r\nimport { ExportAppPartsComponent } from './sub-dialogs/export-app-parts/export-app-parts.component';\r\nimport { ExportAppComponent } from './sub-dialogs/export-app/export-app.component';\r\nimport { ImportAppPartsComponent } from './sub-dialogs/import-app-parts/import-app-parts.component';\r\nimport { ImportContentTypeComponent } from './sub-dialogs/import-content-type/import-content-type.component';\r\nimport { ImportQueryComponent } from './sub-dialogs/import-query/import-query.component';\r\nimport { ImportViewComponent } from './sub-dialogs/import-view/import-view.component';\r\nimport { LanguagePermissionsComponent } from './sub-dialogs/language-permissions/language-permissions.component';\r\nimport { LanguagesPermissionsActionsComponent } from './sub-dialogs/language-permissions/languages-permissions-actions/languages-permissions-actions.component';\r\nimport { ViewsUsageIdComponent } from './sub-dialogs/views-usage/views-usage-id/views-usage-id.component';\r\nimport { ViewsUsageStatusFilterComponent } from './sub-dialogs/views-usage/views-usage-status-filter/views-usage-status-filter.component';\r\nimport { ViewsUsageComponent } from './sub-dialogs/views-usage/views-usage.component';\r\nimport { ViewsActionsComponent } from './views/views-actions/views-actions.component';\r\nimport { ViewsShowComponent } from './views/views-show/views-show.component';\r\nimport { ViewsTypeComponent } from './views/views-type/views-type.component';\r\nimport { ViewsComponent } from './views/views.component';\r\nimport { WebApiActionsComponent } from './web-api/web-api-actions/web-api-actions.component';\r\nimport { WebApiTypeComponent } from './web-api/web-api-type/web-api-type.component';\r\nimport { WebApiComponent } from './web-api/web-api.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    GettingStartedComponent,\r\n    AppAdministrationNavComponent,\r\n    DataComponent,\r\n    QueriesComponent,\r\n    ViewsComponent,\r\n    WebApiComponent,\r\n    AppConfigurationComponent,\r\n    DataItemsComponent,\r\n    DataFieldsComponent,\r\n    DataActionsComponent,\r\n    QueriesActionsComponent,\r\n    ViewsTypeComponent,\r\n    ViewsShowComponent,\r\n    ViewsActionsComponent,\r\n    EditContentTypeComponent,\r\n    ImportQueryComponent,\r\n    ExportAppComponent,\r\n    ExportAppPartsComponent,\r\n    ImportAppPartsComponent,\r\n    WebApiActionsComponent,\r\n    ViewsUsageComponent,\r\n    ViewsUsageIdComponent,\r\n    ViewsUsageStatusFilterComponent,\r\n    ImportContentTypeComponent,\r\n    ImportViewComponent,\r\n    AnalyzeSettingsComponent,\r\n    AnalyzeSettingsKeyComponent,\r\n    AnalyzeSettingsValueComponent,\r\n    AnalyzeSettingsTotalResultsComponent,\r\n    SettingsItemDetailsComponent,\r\n    LanguagePermissionsComponent,\r\n    LanguagesPermissionsActionsComponent,\r\n    WebApiTypeComponent,\r\n  ],\r\n  imports: [\r\n    AppAdministrationRoutingModule,\r\n    SharedComponentsModule,\r\n    MatDialogModule,\r\n    CommonModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    SxcGridModule,\r\n    MatTabsModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatProgressSpinnerModule,\r\n    MatCheckboxModule,\r\n    MatExpansionModule,\r\n    MatCardModule,\r\n    MatRippleModule,\r\n    MatSlideToggleModule,\r\n    MatSnackBarModule,\r\n    MatMenuModule,\r\n    MatBadgeModule,\r\n    CreateFileDialogModule,\r\n  ],\r\n  providers: [\r\n    Context,\r\n    AppDialogConfigService,\r\n    AppInternalsService,\r\n    ContentTypesService,\r\n    PipelinesService,\r\n    ViewsService,\r\n    ContentExportService,\r\n    SourceService,\r\n    ContentItemsService,\r\n    ExportAppService,\r\n    ExportAppPartsService,\r\n    ImportAppPartsService,\r\n    DialogService,\r\n    AnalyzeSettingsService,\r\n    ContentTypesFieldsService,\r\n    MetadataService,\r\n    ZoneService,\r\n  ],\r\n})\r\nexport class AppAdministrationModule { }\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AnalyzePart, SettingsStackItem } from '../sub-dialogs/analyze-settings/analyze-settings.models';\r\n\r\n@Injectable()\r\nexport class AnalyzeSettingsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getStack(part: AnalyzePart, key?: string, view?: string, stringifyValue = false): Observable<SettingsStackItem[]> {\r\n    return this.http.get<SettingsStackItem[]>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'GetStack'), {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        part,\r\n        ...(key && { key }),\r\n        ...(view && { view }),\r\n      },\r\n    }).pipe(\r\n      map(stack => {\r\n        if (!stringifyValue) { return stack; }\r\n\r\n        for (const stackItem of stack) {\r\n          stackItem._value = JSON.stringify(stackItem.Value);\r\n        }\r\n        return stack;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { AppInternals } from '../../app-administration/models/app-internals.model';\r\nimport { MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nconst webApiRoot = 'admin/appinternals/get';\r\n\r\n@Injectable()\r\nexport class AppInternalsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  /**\r\n   * Fetches AppInternals for given key\r\n   * @param targetType type of target metadata item is for, e.g. for Entity, or ContentType\r\n   * @param keyType e.g. for keyType === guid, key === contentTypeStaticName\r\n   * @param key key of target metadata item is for\r\n   * @param contentTypeName name of content type where permissions are stored. If blank, backend returns all metadata except permissions\r\n   */\r\n  getAppInternals(targetType: number, keyType: MetadataKeyType, key: string | number, contentTypeName?: string): Observable<AppInternals> {\r\n    return this.http.get<AppInternals>(this.dnnContext.$2sxc.http.apiUrl(webApiRoot), {\r\n      params: {\r\n        appId: this.context.appId.toString(),\r\n        targetType: targetType.toString(),\r\n        keyType,\r\n        key: key.toString(),\r\n        ...(contentTypeName && { contentType: contentTypeName }),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Attribute, Optional, Inject, Input, Output, ViewChild, Directive, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, CheckboxRequiredValidator } from '@angular/forms';\nimport * as i2 from '@angular/material/core';\nimport { mixinTabIndex, mixinColor, mixinDisableRipple, mixinDisabled, MatRipple, MatRippleModule, MatCommonModule } from '@angular/material/core';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport * as i1 from '@angular/cdk/a11y';\nimport * as i3 from '@angular/cdk/observers';\nimport { ObserversModule } from '@angular/cdk/observers';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nconst MAT_CHECKBOX_DEFAULT_OPTIONS = new InjectionToken('mat-checkbox-default-options', {\n    providedIn: 'root',\n    factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY() {\n    return {\n        color: 'accent',\n        clickAction: 'check-indeterminate',\n    };\n}\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nconst MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatCheckbox),\n    multi: true,\n};\n/** Change event object emitted by MatCheckbox. */\nclass MatCheckboxChange {\n}\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nconst _MatCheckboxBase = mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}))));\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\nclass MatCheckbox extends _MatCheckboxBase {\n    constructor(elementRef, _changeDetectorRef, _focusMonitor, _ngZone, tabIndex, _animationMode, _options) {\n        super(elementRef);\n        this._changeDetectorRef = _changeDetectorRef;\n        this._focusMonitor = _focusMonitor;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._options = _options;\n        /**\n         * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n         * take precedence so this may be omitted.\n         */\n        this.ariaLabel = '';\n        /**\n         * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n         */\n        this.ariaLabelledby = null;\n        this._uniqueId = `mat-checkbox-${++nextUniqueId}`;\n        /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n        this.id = this._uniqueId;\n        /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n        this.labelPosition = 'after';\n        /** Name value will be applied to the input element if present */\n        this.name = null;\n        /** Event emitted when the checkbox's `checked` value changes. */\n        this.change = new EventEmitter();\n        /** Event emitted when the checkbox's `indeterminate` value changes. */\n        this.indeterminateChange = new EventEmitter();\n        /**\n         * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n         * @docs-private\n         */\n        this._onTouched = () => { };\n        this._currentAnimationClass = '';\n        this._currentCheckState = 0 /* Init */;\n        this._controlValueAccessorChangeFn = () => { };\n        this._checked = false;\n        this._disabled = false;\n        this._indeterminate = false;\n        this._options = this._options || defaults;\n        this.color = this.defaultColor = this._options.color || defaults.color;\n        this.tabIndex = parseInt(tabIndex) || 0;\n    }\n    /** Returns the unique id for the visual hidden input. */\n    get inputId() {\n        return `${this.id || this._uniqueId}-input`;\n    }\n    /** Whether the checkbox is required. */\n    get required() {\n        return this._required;\n    }\n    set required(value) {\n        this._required = coerceBooleanProperty(value);\n    }\n    ngAfterViewInit() {\n        this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n                // Angular does not expect events to be raised during change detection, so any state change\n                // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n                // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n                // telling the form control it has been touched until the next tick.\n                Promise.resolve().then(() => {\n                    this._onTouched();\n                    this._changeDetectorRef.markForCheck();\n                });\n            }\n        });\n        this._syncIndeterminate(this._indeterminate);\n    }\n    // TODO: Delete next major revision.\n    ngAfterViewChecked() { }\n    ngOnDestroy() {\n        this._focusMonitor.stopMonitoring(this._elementRef);\n    }\n    /**\n     * Whether the checkbox is checked.\n     */\n    get checked() {\n        return this._checked;\n    }\n    set checked(value) {\n        const checked = coerceBooleanProperty(value);\n        if (checked != this.checked) {\n            this._checked = checked;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is disabled. This fully overrides the implementation provided by\n     * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n     */\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this.disabled) {\n            this._disabled = newValue;\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /**\n     * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n     * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n     * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n     * set to false.\n     */\n    get indeterminate() {\n        return this._indeterminate;\n    }\n    set indeterminate(value) {\n        const changed = value != this._indeterminate;\n        this._indeterminate = coerceBooleanProperty(value);\n        if (changed) {\n            if (this._indeterminate) {\n                this._transitionCheckState(3 /* Indeterminate */);\n            }\n            else {\n                this._transitionCheckState(this.checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            }\n            this.indeterminateChange.emit(this._indeterminate);\n        }\n        this._syncIndeterminate(this._indeterminate);\n    }\n    _isRippleDisabled() {\n        return this.disableRipple || this.disabled;\n    }\n    /** Method being called whenever the label text changes. */\n    _onLabelTextChange() {\n        // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n        // component will be only marked for check, but no actual change detection runs automatically.\n        // Instead of going back into the zone in order to trigger a change detection which causes\n        // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n        // an explicit change detection for the checkbox view and its children.\n        this._changeDetectorRef.detectChanges();\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n        this.checked = !!value;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n        this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n    _getAriaChecked() {\n        if (this.checked) {\n            return 'true';\n        }\n        return this.indeterminate ? 'mixed' : 'false';\n    }\n    _transitionCheckState(newState) {\n        let oldState = this._currentCheckState;\n        let element = this._elementRef.nativeElement;\n        if (oldState === newState) {\n            return;\n        }\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.remove(this._currentAnimationClass);\n        }\n        this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(oldState, newState);\n        this._currentCheckState = newState;\n        if (this._currentAnimationClass.length > 0) {\n            element.classList.add(this._currentAnimationClass);\n            // Remove the animation class to avoid animation when the checkbox is moved between containers\n            const animationClass = this._currentAnimationClass;\n            this._ngZone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    element.classList.remove(animationClass);\n                }, 1000);\n            });\n        }\n    }\n    _emitChangeEvent() {\n        const event = new MatCheckboxChange();\n        event.source = this;\n        event.checked = this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n        this.change.emit(event);\n        // Assigning the value again here is redundant, but we have to do it in case it was\n        // changed inside the `change` listener which will cause the input to be out of sync.\n        if (this._inputElement) {\n            this._inputElement.nativeElement.checked = this.checked;\n        }\n    }\n    /** Toggles the `checked` state of the checkbox. */\n    toggle() {\n        this.checked = !this.checked;\n        this._controlValueAccessorChangeFn(this.checked);\n    }\n    /**\n     * Event handler for checkbox input element.\n     * Toggles checked state if element is not disabled.\n     * Do not toggle on (change) event since IE doesn't fire change event when\n     *   indeterminate checkbox is clicked.\n     * @param event\n     */\n    _onInputClick(event) {\n        var _a;\n        const clickAction = (_a = this._options) === null || _a === void 0 ? void 0 : _a.clickAction;\n        // We have to stop propagation for click events on the visual hidden input element.\n        // By default, when a user clicks on a label element, a generated click event will be\n        // dispatched on the associated input element. Since we are using a label element as our\n        // root container, the click event on the `checkbox` will be executed twice.\n        // The real click event will bubble up, and the generated click event also tries to bubble up.\n        // This will lead to multiple click events.\n        // Preventing bubbling for the second event will solve that issue.\n        event.stopPropagation();\n        // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n        if (!this.disabled && clickAction !== 'noop') {\n            // When user manually click on the checkbox, `indeterminate` is set to false.\n            if (this.indeterminate && clickAction !== 'check') {\n                Promise.resolve().then(() => {\n                    this._indeterminate = false;\n                    this.indeterminateChange.emit(this._indeterminate);\n                });\n            }\n            this._checked = !this._checked;\n            this._transitionCheckState(this._checked ? 1 /* Checked */ : 2 /* Unchecked */);\n            // Emit our custom change event if the native input emitted one.\n            // It is important to only emit it, if the native input triggered one, because\n            // we don't want to trigger a change event, when the `checked` variable changes for example.\n            this._emitChangeEvent();\n        }\n        else if (!this.disabled && clickAction === 'noop') {\n            // Reset native input when clicked with noop. The native checkbox becomes checked after\n            // click, reset it to be align with `checked` value of `mat-checkbox`.\n            this._inputElement.nativeElement.checked = this.checked;\n            this._inputElement.nativeElement.indeterminate = this.indeterminate;\n        }\n    }\n    /** Focuses the checkbox. */\n    focus(origin, options) {\n        if (origin) {\n            this._focusMonitor.focusVia(this._inputElement, origin, options);\n        }\n        else {\n            this._inputElement.nativeElement.focus(options);\n        }\n    }\n    _onInteractionEvent(event) {\n        // We always have to stop propagation on the change event.\n        // Otherwise the change event, from the input element, will bubble up and\n        // emit its event object to the `change` output.\n        event.stopPropagation();\n    }\n    _getAnimationClassForCheckStateTransition(oldState, newState) {\n        // Don't transition if animations are disabled.\n        if (this._animationMode === 'NoopAnimations') {\n            return '';\n        }\n        let animSuffix = '';\n        switch (oldState) {\n            case 0 /* Init */:\n                // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n                // [checked] bound to it.\n                if (newState === 1 /* Checked */) {\n                    animSuffix = 'unchecked-checked';\n                }\n                else if (newState == 3 /* Indeterminate */) {\n                    animSuffix = 'unchecked-indeterminate';\n                }\n                else {\n                    return '';\n                }\n                break;\n            case 2 /* Unchecked */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'unchecked-checked'\n                        : 'unchecked-indeterminate';\n                break;\n            case 1 /* Checked */:\n                animSuffix =\n                    newState === 2 /* Unchecked */\n                        ? 'checked-unchecked'\n                        : 'checked-indeterminate';\n                break;\n            case 3 /* Indeterminate */:\n                animSuffix =\n                    newState === 1 /* Checked */\n                        ? 'indeterminate-checked'\n                        : 'indeterminate-unchecked';\n                break;\n        }\n        return `mat-checkbox-anim-${animSuffix}`;\n    }\n    /**\n     * Syncs the indeterminate value with the checkbox DOM node.\n     *\n     * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n     * property is supported on an element boils down to `if (propName in element)`. Domino's\n     * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n     * server-side rendering.\n     */\n    _syncIndeterminate(value) {\n        const nativeCheckbox = this._inputElement;\n        if (nativeCheckbox) {\n            nativeCheckbox.nativeElement.indeterminate = value;\n        }\n    }\n}\nMatCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckbox, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.FocusMonitor }, { token: i0.NgZone }, { token: 'tabindex', attribute: true }, { token: ANIMATION_MODULE_TYPE, optional: true }, { token: MAT_CHECKBOX_DEFAULT_OPTIONS, optional: true }], target: i0.ɵɵFactoryTarget.Component });\nMatCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCheckbox, selector: \"mat-checkbox\", inputs: { disableRipple: \"disableRipple\", color: \"color\", tabIndex: \"tabIndex\", ariaLabel: [\"aria-label\", \"ariaLabel\"], ariaLabelledby: [\"aria-labelledby\", \"ariaLabelledby\"], ariaDescribedby: [\"aria-describedby\", \"ariaDescribedby\"], id: \"id\", required: \"required\", labelPosition: \"labelPosition\", name: \"name\", value: \"value\", checked: \"checked\", disabled: \"disabled\", indeterminate: \"indeterminate\" }, outputs: { change: \"change\", indeterminateChange: \"indeterminateChange\" }, host: { properties: { \"id\": \"id\", \"attr.tabindex\": \"null\", \"attr.aria-label\": \"null\", \"attr.aria-labelledby\": \"null\", \"class.mat-checkbox-indeterminate\": \"indeterminate\", \"class.mat-checkbox-checked\": \"checked\", \"class.mat-checkbox-disabled\": \"disabled\", \"class.mat-checkbox-label-before\": \"labelPosition == \\\"before\\\"\", \"class._mat-animation-noopable\": \"_animationMode === 'NoopAnimations'\" }, classAttribute: \"mat-checkbox\" }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"_inputElement\", first: true, predicate: [\"input\"], descendants: true }, { propertyName: \"ripple\", first: true, predicate: MatRipple, descendants: true }], exportAs: [\"matCheckbox\"], usesInheritance: true, ngImport: i0, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"], directives: [{ type: i2.MatRipple, selector: \"[mat-ripple], [matRipple]\", inputs: [\"matRippleColor\", \"matRippleUnbounded\", \"matRippleCentered\", \"matRippleRadius\", \"matRippleAnimation\", \"matRippleDisabled\", \"matRippleTrigger\"], exportAs: [\"matRipple\"] }, { type: i3.CdkObserveContent, selector: \"[cdkObserveContent]\", inputs: [\"cdkObserveContentDisabled\", \"debounce\"], outputs: [\"cdkObserveContent\"], exportAs: [\"cdkObserveContent\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckbox, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-checkbox', exportAs: 'matCheckbox', host: {\n                        'class': 'mat-checkbox',\n                        '[id]': 'id',\n                        '[attr.tabindex]': 'null',\n                        '[attr.aria-label]': 'null',\n                        '[attr.aria-labelledby]': 'null',\n                        '[class.mat-checkbox-indeterminate]': 'indeterminate',\n                        '[class.mat-checkbox-checked]': 'checked',\n                        '[class.mat-checkbox-disabled]': 'disabled',\n                        '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n                        '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n                    }, providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR], inputs: ['disableRipple', 'color', 'tabIndex'], encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.OnPush, template: \"<label [attr.for]=\\\"inputId\\\" class=\\\"mat-checkbox-layout\\\" #label>\\n  <span class=\\\"mat-checkbox-inner-container\\\"\\n       [class.mat-checkbox-inner-container-no-side-margin]=\\\"!checkboxLabel.textContent || !checkboxLabel.textContent.trim()\\\">\\n    <input #input\\n           class=\\\"mat-checkbox-input cdk-visually-hidden\\\" type=\\\"checkbox\\\"\\n           [id]=\\\"inputId\\\"\\n           [required]=\\\"required\\\"\\n           [checked]=\\\"checked\\\"\\n           [attr.value]=\\\"value\\\"\\n           [disabled]=\\\"disabled\\\"\\n           [attr.name]=\\\"name\\\"\\n           [tabIndex]=\\\"tabIndex\\\"\\n           [attr.aria-label]=\\\"ariaLabel || null\\\"\\n           [attr.aria-labelledby]=\\\"ariaLabelledby\\\"\\n           [attr.aria-checked]=\\\"_getAriaChecked()\\\"\\n           [attr.aria-describedby]=\\\"ariaDescribedby\\\"\\n           (change)=\\\"_onInteractionEvent($event)\\\"\\n           (click)=\\\"_onInputClick($event)\\\">\\n    <span matRipple class=\\\"mat-checkbox-ripple mat-focus-indicator\\\"\\n         [matRippleTrigger]=\\\"label\\\"\\n         [matRippleDisabled]=\\\"_isRippleDisabled()\\\"\\n         [matRippleRadius]=\\\"20\\\"\\n         [matRippleCentered]=\\\"true\\\"\\n         [matRippleAnimation]=\\\"{enterDuration: _animationMode === 'NoopAnimations' ? 0 : 150}\\\">\\n      <span class=\\\"mat-ripple-element mat-checkbox-persistent-ripple\\\"></span>\\n    </span>\\n    <span class=\\\"mat-checkbox-frame\\\"></span>\\n    <span class=\\\"mat-checkbox-background\\\">\\n      <svg version=\\\"1.1\\\"\\n           focusable=\\\"false\\\"\\n           class=\\\"mat-checkbox-checkmark\\\"\\n           viewBox=\\\"0 0 24 24\\\"\\n           aria-hidden=\\\"true\\\">\\n        <path class=\\\"mat-checkbox-checkmark-path\\\"\\n              fill=\\\"none\\\"\\n              stroke=\\\"white\\\"\\n              d=\\\"M4.1,12.7 9,17.6 20.3,6.3\\\"/>\\n      </svg>\\n      <!-- Element for rendering the indeterminate state checkbox. -->\\n      <span class=\\\"mat-checkbox-mixedmark\\\"></span>\\n    </span>\\n  </span>\\n  <span class=\\\"mat-checkbox-label\\\" #checkboxLabel (cdkObserveContent)=\\\"_onLabelTextChange()\\\">\\n    <!-- Add an invisible span so JAWS can read the label -->\\n    <span style=\\\"display:none\\\">&nbsp;</span>\\n    <ng-content></ng-content>\\n  </span>\\n</label>\\n\", styles: [\"@keyframes mat-checkbox-fade-in-background{0%{opacity:0}50%{opacity:1}}@keyframes mat-checkbox-fade-out-background{0%,50%{opacity:1}100%{opacity:0}}@keyframes mat-checkbox-unchecked-checked-checkmark-path{0%,50%{stroke-dashoffset:22.910259}50%{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1)}100%{stroke-dashoffset:0}}@keyframes mat-checkbox-unchecked-indeterminate-mixedmark{0%,68.2%{transform:scaleX(0)}68.2%{animation-timing-function:cubic-bezier(0, 0, 0, 1)}100%{transform:scaleX(1)}}@keyframes mat-checkbox-checked-unchecked-checkmark-path{from{animation-timing-function:cubic-bezier(0.4, 0, 1, 1);stroke-dashoffset:0}to{stroke-dashoffset:-22.910259}}@keyframes mat-checkbox-checked-indeterminate-checkmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(45deg)}}@keyframes mat-checkbox-indeterminate-checked-checkmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:0;transform:rotate(45deg)}to{opacity:1;transform:rotate(360deg)}}@keyframes mat-checkbox-checked-indeterminate-mixedmark{from{animation-timing-function:cubic-bezier(0, 0, 0.2, 0.1);opacity:0;transform:rotate(-45deg)}to{opacity:1;transform:rotate(0deg)}}@keyframes mat-checkbox-indeterminate-checked-mixedmark{from{animation-timing-function:cubic-bezier(0.14, 0, 0, 1);opacity:1;transform:rotate(0deg)}to{opacity:0;transform:rotate(315deg)}}@keyframes mat-checkbox-indeterminate-unchecked-mixedmark{0%{animation-timing-function:linear;opacity:1;transform:scaleX(1)}32.8%,100%{opacity:0;transform:scaleX(0)}}.mat-checkbox-background,.mat-checkbox-frame{top:0;left:0;right:0;bottom:0;position:absolute;border-radius:2px;box-sizing:border-box;pointer-events:none}.mat-checkbox{display:inline-block;transition:background 400ms cubic-bezier(0.25, 0.8, 0.25, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1);cursor:pointer;-webkit-tap-highlight-color:transparent}._mat-animation-noopable.mat-checkbox{transition:none;animation:none}.mat-checkbox .mat-ripple-element:not(.mat-checkbox-persistent-ripple){opacity:.16}.mat-checkbox .mat-checkbox-ripple{position:absolute;left:calc(50% - 20px);top:calc(50% - 20px);height:40px;width:40px;z-index:1;pointer-events:none}.cdk-high-contrast-active .mat-checkbox.cdk-keyboard-focused .mat-checkbox-ripple{outline:solid 3px}.mat-checkbox-layout{-webkit-user-select:none;user-select:none;cursor:inherit;align-items:baseline;vertical-align:middle;display:inline-flex;white-space:nowrap}.mat-checkbox-label{-webkit-user-select:auto;user-select:auto}.mat-checkbox-inner-container{display:inline-block;height:16px;line-height:0;margin:auto;margin-right:8px;order:0;position:relative;vertical-align:middle;white-space:nowrap;width:16px;flex-shrink:0}[dir=rtl] .mat-checkbox-inner-container{margin-left:8px;margin-right:auto}.mat-checkbox-inner-container-no-side-margin{margin-left:0;margin-right:0}.mat-checkbox-frame{background-color:transparent;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1);border-width:2px;border-style:solid}._mat-animation-noopable .mat-checkbox-frame{transition:none}.mat-checkbox-background{align-items:center;display:inline-flex;justify-content:center;transition:background-color 90ms cubic-bezier(0, 0, 0.2, 0.1),opacity 90ms cubic-bezier(0, 0, 0.2, 0.1);-webkit-print-color-adjust:exact;color-adjust:exact}._mat-animation-noopable .mat-checkbox-background{transition:none}.cdk-high-contrast-active .mat-checkbox .mat-checkbox-background{background:none}.mat-checkbox-persistent-ripple{display:block;width:100%;height:100%;transform:none}.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:.04}.mat-checkbox.cdk-keyboard-focused .mat-checkbox-persistent-ripple{opacity:.12}.mat-checkbox-persistent-ripple,.mat-checkbox.mat-checkbox-disabled .mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{opacity:0}@media(hover: none){.mat-checkbox-inner-container:hover .mat-checkbox-persistent-ripple{display:none}}.mat-checkbox-checkmark{top:0;left:0;right:0;bottom:0;position:absolute;width:100%}.mat-checkbox-checkmark-path{stroke-dashoffset:22.910259;stroke-dasharray:22.910259;stroke-width:2.1333333333px}.cdk-high-contrast-black-on-white .mat-checkbox-checkmark-path{stroke:#000 !important}.mat-checkbox-mixedmark{width:calc(100% - 6px);height:2px;opacity:0;transform:scaleX(0) rotate(0deg);border-radius:2px}.cdk-high-contrast-active .mat-checkbox-mixedmark{height:0;border-top:solid 2px;margin-top:2px}.mat-checkbox-label-before .mat-checkbox-inner-container{order:1;margin-left:8px;margin-right:auto}[dir=rtl] .mat-checkbox-label-before .mat-checkbox-inner-container{margin-left:auto;margin-right:8px}.mat-checkbox-checked .mat-checkbox-checkmark{opacity:1}.mat-checkbox-checked .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-checked .mat-checkbox-mixedmark{transform:scaleX(1) rotate(-45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark{opacity:0;transform:rotate(45deg)}.mat-checkbox-indeterminate .mat-checkbox-checkmark-path{stroke-dashoffset:0}.mat-checkbox-indeterminate .mat-checkbox-mixedmark{opacity:1;transform:scaleX(1) rotate(0deg)}.mat-checkbox-unchecked .mat-checkbox-background{background-color:transparent}.mat-checkbox-disabled{cursor:default}.cdk-high-contrast-active .mat-checkbox-disabled{opacity:.5}.mat-checkbox-anim-unchecked-checked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-checked .mat-checkbox-checkmark-path{animation:180ms linear 0ms mat-checkbox-unchecked-checked-checkmark-path}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-in-background}.mat-checkbox-anim-unchecked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-unchecked-indeterminate-mixedmark}.mat-checkbox-anim-checked-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-checked-unchecked .mat-checkbox-checkmark-path{animation:90ms linear 0ms mat-checkbox-checked-unchecked-checkmark-path}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-checkmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-checkmark}.mat-checkbox-anim-checked-indeterminate .mat-checkbox-mixedmark{animation:90ms linear 0ms mat-checkbox-checked-indeterminate-mixedmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-checkmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-checkmark}.mat-checkbox-anim-indeterminate-checked .mat-checkbox-mixedmark{animation:500ms linear 0ms mat-checkbox-indeterminate-checked-mixedmark}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-background{animation:180ms linear 0ms mat-checkbox-fade-out-background}.mat-checkbox-anim-indeterminate-unchecked .mat-checkbox-mixedmark{animation:300ms linear 0ms mat-checkbox-indeterminate-unchecked-mixedmark}.mat-checkbox-input{bottom:0;left:50%}\\n\"] }]\n        }], ctorParameters: function () {\n        return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.FocusMonitor }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                        type: Attribute,\n                        args: ['tabindex']\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [ANIMATION_MODULE_TYPE]\n                    }] }, { type: undefined, decorators: [{\n                        type: Optional\n                    }, {\n                        type: Inject,\n                        args: [MAT_CHECKBOX_DEFAULT_OPTIONS]\n                    }] }];\n    }, propDecorators: { ariaLabel: [{\n                type: Input,\n                args: ['aria-label']\n            }], ariaLabelledby: [{\n                type: Input,\n                args: ['aria-labelledby']\n            }], ariaDescribedby: [{\n                type: Input,\n                args: ['aria-describedby']\n            }], id: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], labelPosition: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }], indeterminateChange: [{\n                type: Output\n            }], value: [{\n                type: Input\n            }], _inputElement: [{\n                type: ViewChild,\n                args: ['input']\n            }], ripple: [{\n                type: ViewChild,\n                args: [MatRipple]\n            }], checked: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }], indeterminate: [{\n                type: Input\n            }] } });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nconst MAT_CHECKBOX_REQUIRED_VALIDATOR = {\n    provide: NG_VALIDATORS,\n    useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n    multi: true,\n};\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\nclass MatCheckboxRequiredValidator extends CheckboxRequiredValidator {\n}\nMatCheckboxRequiredValidator.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxRequiredValidator, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nMatCheckboxRequiredValidator.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.3.0\", type: MatCheckboxRequiredValidator, selector: \"mat-checkbox[required][formControlName],\\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]\", providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxRequiredValidator, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n                    providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** This module is used by both original and MDC-based checkbox implementations. */\nclass _MatCheckboxRequiredValidatorModule {\n}\n_MatCheckboxRequiredValidatorModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\n_MatCheckboxRequiredValidatorModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, declarations: [MatCheckboxRequiredValidator], exports: [MatCheckboxRequiredValidator] });\n_MatCheckboxRequiredValidatorModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: _MatCheckboxRequiredValidatorModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    exports: [MatCheckboxRequiredValidator],\n                    declarations: [MatCheckboxRequiredValidator],\n                }]\n        }] });\nclass MatCheckboxModule {\n}\nMatCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nMatCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxModule, declarations: [MatCheckbox], imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule] });\nMatCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxModule, imports: [[MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule], MatCommonModule, _MatCheckboxRequiredValidatorModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.3.0\", ngImport: i0, type: MatCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [MatRippleModule, MatCommonModule, ObserversModule, _MatCheckboxRequiredValidatorModule],\n                    exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n                    declarations: [MatCheckbox],\n                }]\n        }] });\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR, MAT_CHECKBOX_DEFAULT_OPTIONS, MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY, MAT_CHECKBOX_REQUIRED_VALIDATOR, MatCheckbox, MatCheckboxChange, MatCheckboxModule, MatCheckboxRequiredValidator, _MatCheckboxRequiredValidatorModule };\n"],"sourceRoot":"webpack:///","file":"default-projects_eav-ui_src_app_app-administration_app-administration_module_ts.5cc8c2a73ea035bf.js"}