{"version":3,"mappings":"0VAUO,IAAMA,EAAb,MAAM,QAIJC,OAAOC,GACLC,KAAKC,KAAOF,EAAOG,MACnBF,KAAKG,QAAUJ,EAAOK,cAAcL,EAAOM,MAG7CC,QAAQP,GACN,OAAO,gDAVEF,8BAAoBU,gICVjCC,iBAAsB,UACdA,SAAUA,QAChBA,sBAA8CA,gBAAIA,iBAD5CA,uBACsBA,sMDQjBX,GAAb,GEAaY,EAAb,MAAM,QAGJX,OAAOC,GACLC,KAAKD,OAASA,EAGhBO,QAAQP,GACN,OAAO,EAGFW,SAASC,GACdX,KAAKD,OAAOW,SAASV,KAAKD,OAAOM,KAAMM,EAAMC,cAAcC,uDAZlDJ,8BAAqBF,sKCVlCC,iBAA0B,aAC+CA,kCAAUM,gBAAjFN,iBAA8CA,gMDSnCC,GAAb,+EEDED,eACEA,4DACFA,kCAEAA,iBACEA,8BAGFA,6CAFIA,wCAA4B,sEAflCA,SACEA,iBAAsB,WACUA,oCAAwBA,UAGxDA,eACEA,mHACFA,QAEAA,qBAIAA,uBAMAA,iBAAsC,cACIA,iDAASO,gBAC/CP,qBACFA,QACAA,qBAA6FA,iDAASQ,YACpGR,sBACFA,UAEJA,yCAlBiCA,0EAIJA,yEAU8BA,gGCLpD,IAAMS,EAAb,MAAM,QASJC,YACUC,EACAC,EACAC,GAFArB,iBACAA,uBACAA,gBAXgBA,eAAY,mBAGtCA,iBAAcA,KAAKsB,mBAEXtB,kBAAe,IAAIuB,IAC3BvB,iBAA4B,GAQ5BwB,WACExB,KAAKyB,aAAezB,KAAK0B,aAAaC,QACpCC,UAAUC,MACVC,KAAU,IAAM9B,KAAKoB,gBAAgBW,iBAAiBJ,MAAKK,OAAW,KAAMC,aAAGJ,SAC/EK,QAIJC,cACEnC,KAAK0B,aAAaU,WAGpBC,cACErC,KAAKmB,UAAUmB,QAGjB5B,SAAS6B,EAAiBC,GACpBA,EACFxC,KAAKyC,YAAYC,KAAKH,GAEtBvC,KAAKyC,YAAYE,OAAO3C,KAAKyC,YAAYG,QAAQL,GAAM,GAG3DM,UACE7C,KAAKoB,gBAAgB0B,mBAAmB9C,KAAKyC,aAAaM,UAAU,CAClEC,MAAO,KACLhD,KAAKqB,SAAS4B,KAAK,wEAAoEpB,EAAW,CAAEqB,SAAU,OAEhHC,KAAM,KACJnD,KAAKqB,SAAS4B,KAAK,qBAAiBpB,EAAW,CAAEqB,SAAU,MAC3DlD,KAAKqC,iBAKHf,mBAkCN,OAjCiB8B,+BACZC,KAAkB,CACrBC,WAAY,CACV,CACEC,MAAO,GACPC,MAAO,GACPC,UAAW,aACXC,UAAU,EACVC,aAAclD,EACdmD,mBAAqB,KACgB,CACjClD,SAAU,CAAC6B,EAAKC,IAAYxC,KAAKU,SAAS6B,EAAKC,MAKrD,CACEe,MAAO,OACPM,KAAM,EACNJ,UAAW,aACXC,UAAU,EACVI,KAAM,MACNC,OAAQ,qBACRJ,aAAc9D,EACd+D,mBAC4C,CACxCxD,cAAgB4D,GAAe,kBAAkBA,EAAWC,yBAAyBD,EAAWE,oBAAoBF,EAAWG,yBAAyBH,EAAWI,iEA7EpKnD,GAAyBT,6DAAzBS,EAAyBV,6kBDlBtCC,wDAAeA,gHCkBFS,GAAb,oCChBO,MAAMoC,EAAkC,CAC7CgB,cAAc,EACdC,aAAa,EACbC,yBAAyB,EACzBC,aAAc,GACdC,yBAAyB,EACzBC,YAAY,EACZC,cAAe,CAAEC,aAAc,CAAEC,cAAe,SAChDC,iBAAkB,EAClBC,iBAAkB,IAClBC,wBAAwB","names":["AppNameShowComponent","agInit","params","this","name","value","tooltip","tooltipGetter","data","refresh","selectors","i0","CheckboxCellComponent","onChange","event","currentTarget","checked","ctx","ctx_r5","ctx_r7","AddAppFromFolderComponent","constructor","dialogRef","appsListService","snackBar","buildGridOptions","Subject","ngOnInit","pendingApps$","refreshApps$","pipe","startWith","undefined","switchMap","getPendingApps","catchError","of","share","ngOnDestroy","complete","closeDialog","close","app","enabled","pendingApps","push","splice","indexOf","install","installPendingApps","subscribe","error","open","duration","next","Object","defaultGridOptions","columnDefs","field","width","cellClass","sortable","cellRenderer","cellRendererParams","flex","sort","filter","pendingApp","ServerFolder","Folder","Version","Description","accentedSort","animateRows","enableCellTextSelection","headerHeight","suppressScrollOnNewData","valueCache","defaultColDef","filterParams","newRowsAction","tooltipShowDelay","tooltipHideDelay","suppressMovableColumns"],"sources":["./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/app-name-show/app-name-show.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.ts","./projects/eav-ui/src/app/apps-management/add-app-from-folder/checkbox-cell/checkbox-cell.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.html","./projects/eav-ui/src/app/apps-management/add-app-from-folder/add-app-from-folder.component.ts","./projects/eav-ui/src/app/shared/constants/default-grid-options.constants.ts"],"sourcesContent":["import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { IdFieldParams } from '../../../shared/components/id-field/id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-app-name-show',\r\n  templateUrl: './app-name-show.component.html',\r\n  styleUrls: ['./app-name-show.component.scss'],\r\n})\r\nexport class AppNameShowComponent implements ICellRendererAngularComp {\r\n  name: string;\r\n  tooltip: string;\r\n\r\n  agInit(params: ICellRendererParams & IdFieldParams): void {\r\n    this.name = params.value;\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"name-box\">\r\n  <span>{{ name }}</span>\r\n  <mat-icon class=\"info-icon\" [tippy]=\"tooltip\">info</mat-icon>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { CheckboxCellParams } from './checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-checkbox-cell',\r\n  templateUrl: './checkbox-cell.component.html',\r\n  styleUrls: ['./checkbox-cell.component.scss'],\r\n})\r\nexport class CheckboxCellComponent implements ICellRendererAngularComp {\r\n  params: ICellRendererParams & CheckboxCellParams;\r\n\r\n  agInit(params: ICellRendererParams & CheckboxCellParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  public onChange(event: any) {\r\n    this.params.onChange(this.params.data, event.currentTarget.checked);\r\n  }\r\n}\r\n","<div class=\"checkbox-box\">\r\n  <input class=\"checkbox-input\" type=\"checkbox\" [checked]=\"params.value\" (change)=\"onChange($event)\">\r\n</div>\r\n","<ng-container *ngIf=\"{pendingApps: pendingApps$ | async} as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Add App from Folder BETA</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    Select an app from the apps-folder which has been copied there (or git-cloned) but not installed yet.\r\n  </p>\r\n\r\n  <p class=\"dialog-description\" *ngIf=\"data.pendingApps?.length == 0\">\r\n    No apps found which are not already installed.\r\n  </p>\r\n\r\n  <div class=\"grid-wrapper\" *ngIf=\"data.pendingApps?.length > 0\">\r\n    <ag-grid-angular style=\"height: 200px; width: auto;\" class=\"ag-theme-material\"\r\n      [rowData]=\"data.pendingApps\" [gridOptions]=\"gridOptions\">\r\n    </ag-grid-angular>\r\n  </div>\r\n\r\n  <div class=\"dialog-component-actions\">\r\n    <button type=\"button\" mat-raised-button (click)=\"closeDialog()\">\r\n      Cancel\r\n    </button>\r\n    <button type=\"button\" mat-raised-button color=\"accent\" [disabled]=\"pendingApps.length === 0\" (click)=\"install()\">\r\n      Install\r\n    </button>\r\n  </div> \r\n</ng-container>","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from \"@angular/core\";\r\nimport { MatDialogRef } from \"@angular/material/dialog\";\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { catchError, Observable, of, share, startWith, Subject, switchMap } from \"rxjs\";\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from \"../../shared/constants/default-grid-options.constants\";\r\nimport { PendingApp } from \"../models/app.model\";\r\nimport { AppsListService } from \"../services/apps-list.service\";\r\nimport { AppNameShowComponent } from './app-name-show/app-name-show.component';\r\nimport { CheckboxCellComponent } from './checkbox-cell/checkbox-cell.component';\r\nimport { CheckboxCellParams } from './checkbox-cell/checkbox-cell.model';\r\n\r\n@Component({\r\n  selector: 'app-add-app-from-folder',\r\n  templateUrl: './add-app-from-folder.component.html',\r\n  styleUrls: ['./add-app-from-folder.component.scss'],\r\n})\r\nexport class AddAppFromFolderComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  pendingApps$: Observable<PendingApp[]>;\r\n  gridOptions = this.buildGridOptions();\r\n\r\n  private refreshApps$ = new Subject<void>();\r\n  pendingApps: PendingApp[] = [];\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<AddAppFromFolderComponent>,\r\n    private appsListService: AppsListService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n  \r\n  ngOnInit(): void {\r\n    this.pendingApps$ = this.refreshApps$.pipe(\r\n      startWith(undefined),\r\n      switchMap(() => this.appsListService.getPendingApps().pipe(catchError(() => of(undefined)))),\r\n      share()\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.refreshApps$.complete();\r\n  } \r\n\r\n  closeDialog(): void {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onChange(app: PendingApp, enabled: boolean) {\r\n    if (enabled)\r\n      this.pendingApps.push(app);\r\n    else\r\n      this.pendingApps.splice(this.pendingApps.indexOf(app), 1);\r\n  }\r\n\r\n  install(): void {\r\n    this.appsListService.installPendingApps(this.pendingApps).subscribe({\r\n      error: () => {\r\n        this.snackBar.open('Failed to install app. Please check console for more information', undefined, { duration: 3000 });\r\n      },\r\n      next: () => {\r\n        this.snackBar.open('Installed app', undefined, { duration: 2000 });\r\n        this.closeDialog();\r\n      },\r\n    });\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          field: '',\r\n          width: 40,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          cellRenderer: CheckboxCellComponent,\r\n          cellRendererParams: (() => {\r\n            const params: CheckboxCellParams = {\r\n              onChange: (app, enabled) => this.onChange(app, enabled),\r\n            };\r\n            return params;\r\n          }),\r\n        },\r\n        {\r\n          field: 'Name',\r\n          flex: 1,\r\n          cellClass: 'no-outline',\r\n          sortable: true,\r\n          sort: 'asc',\r\n          filter: 'agTextColumnFilter',\r\n          cellRenderer: AppNameShowComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<PendingApp> = {\r\n              tooltipGetter: (pendingApp) => `Server folder: ${pendingApp.ServerFolder}\\nFolder: ${pendingApp.Folder}\\nVersion: ${pendingApp.Version}\\nDescription: ${pendingApp.Description}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n      ]\r\n    }\r\n    return gridOptions;\r\n  }\r\n}","import { GridOptions } from '@ag-grid-community/core';\r\n\r\nexport const defaultGridOptions: GridOptions = {\r\n  accentedSort: true,\r\n  animateRows: true,\r\n  enableCellTextSelection: true,\r\n  headerHeight: 32,\r\n  suppressScrollOnNewData: true,\r\n  valueCache: true,\r\n  defaultColDef: { filterParams: { newRowsAction: 'keep' } },\r\n  tooltipShowDelay: 0,\r\n  tooltipHideDelay: 100000,\r\n  suppressMovableColumns: true,\r\n} as const;\r\n"],"sourceRoot":"webpack:///","file":"projects_eav-ui_src_app_apps-management_add-app-from-folder_add-app-from-folder_component_ts.72ae51dd6a453dff.js"}