{"version":3,"file":"projects_eav-ui_src_app_app-administration_sub-dialogs_export-app-parts_export-app-parts_comp-b04a2d.9f293179fb1d5793.js","mappings":"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","names":["i0","scopeOption_r3","value","name","$event","template_r7","_r6","$implicit","_export","Name","Id","ExportAppPartsComponent_Conditional_0_Conditional_26_For_5_Conditional_5_For_4_Template","contentType_r5","Templates","entity_r9","_r8","Title","ExportAppPartsComponent_Conditional_0_Conditional_26_For_5_Conditional_6_For_4_Template","Entities","_r4","ExportAppPartsComponent_Conditional_0_Conditional_26_For_5_Conditional_5_Template","ExportAppPartsComponent_Conditional_0_Conditional_26_For_5_Conditional_6_Template","length","template_r11","_r10","ExportAppPartsComponent_Conditional_0_Conditional_26_For_5_Template","ExportAppPartsComponent_Conditional_0_Conditional_26_For_10_Template","ctx_r1","contentInfo","ContentTypes","TemplatesWithoutContentTypes","_r1","changeScope","ExportAppPartsComponent_Conditional_0_For_16_Template","unlockScope","ExportAppPartsComponent_Conditional_0_Conditional_26_Template","closeDialog","exportAppParts","exportScope","lockScope","scopeOptions","dropdownInsertValue","vm_r12","loading","isExporting","ExportAppPartsComponent","constructor","dialogRef","this","hostClass","exportAppPartsService","transient","ExportAppPartsService","contentTypesService","ContentTypesService","eavConstants","scopes","default","loading$","BehaviorSubject","isExporting$","viewModel$","combineLatest","pipe","map","ngOnInit","fetchScopes","fetchContentInfo","ngOnDestroy","complete","close","next","contentTypeIds","selectedContentTypes","contentType","templateIds","selectedTemplates","template","entityIds","selectedEntities","entity","concat","exportParts","newScope","prompt","find","option","unshift","getScopes","subscribe","getContentInfo","filter","entities","templates","static","t","i1","_angular_core__WEBPACK_IMPORTED_MODULE_3__","VBU","selectors","hostVars","hostBindings","rf","ctx","ExportAppPartsComponent_Conditional_0_Template","tmp_0_0","MatFormFieldModule","i2","MatSelectModule","i3","i4","FormsModule","i5","MatOptionModule","MatButtonModule","i6","MatIconModule","i7","MatCheckboxModule","i8","MatDialogActions","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","TippyDirective","styles","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","isShort","toggleIsShort","_angular_core__WEBPACK_IMPORTED_MODULE_0__","inputs","standalone","features","ngContentSelectors","_c0","decls","vars","consts","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","NgClass","NgTemplateOutlet","onClick","event","stopPropagation","FsC"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.html","./projects/eav-ui/src/app/app-administration/sub-dialogs/export-app-parts/export-app-parts.component.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts"],"sourcesContent":["@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog eav-no-scrollbar\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Export Content and Templates from this App</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is an advanced feature to export parts of the app.\r\n        The export will create an xml file which can be imported into another site or app.\r\n        To export the entire content of the app (for example when duplicating the entire site), go to the app export.\r\n        For further help visit <a href=\"https://2sxc.org/en/help?tag=export\" target=\"_blank\">2sxc Help</a>.\r\n      </p>\r\n      <div class=\"eav-edit-input\">\r\n        <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n          <mat-label>Scope</mat-label>\r\n          <mat-select [ngModel]=\"exportScope\" name=\"Scope\" [disabled]=\"lockScope\" (ngModelChange)=\"changeScope($event)\">\r\n            @for (scopeOption of scopeOptions; track scopeOption) {\r\n              <mat-option [value]=\"scopeOption.value\">\r\n                {{ scopeOption.name }}\r\n              </mat-option>\r\n            }\r\n            <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n          </mat-select>\r\n          <button mat-icon-button matTextSuffix [tippy]=\"lockScope ? 'Unlock' : 'Lock'\">\r\n            <mat-icon appClickStopPropagation (click)=\"unlockScope()\">\r\n              {{ lockScope ? 'lock' : 'lock_open' }}\r\n            </mat-icon>\r\n          </button>\r\n        </mat-form-field>\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a appClickStopPropagation href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\">see help</a>\r\n        </app-field-hint>\r\n      </div>\r\n      @if (contentInfo) {\r\n        <div>\r\n          <ul class=\"eav-content-info__list eav-content-info__base\">\r\n            <p class=\"eav-content-info__title\">Content Types</p>\r\n            @for (contentType of contentInfo.ContentTypes; track contentType) {\r\n              <li class=\"eav-content-info__item\">\r\n                <div class=\"eav-option-box\">\r\n                  <mat-checkbox [(ngModel)]=\"contentType._export\">\r\n                    <span class=\"eav-option-box__text\">{{ contentType.Name }} ({{ contentType.Id }})</span>\r\n                  </mat-checkbox>\r\n                </div>\r\n                @if (contentType.Templates.length > 0) {\r\n                  <ul class=\"eav-content-info__list\">\r\n                    <p class=\"eav-content-info__subtitle\">Templates</p>\r\n                    @for (template of contentType.Templates; track template) {\r\n                      <li class=\"eav-content-info__item\">\r\n                        <div class=\"eav-option-box\">\r\n                          <mat-checkbox [(ngModel)]=\"template._export\">\r\n                            <span class=\"eav-option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n                          </mat-checkbox>\r\n                        </div>\r\n                      </li>\r\n                    }\r\n                  </ul>\r\n                }\r\n                @if (contentType.Entities.length > 0) {\r\n                  <ul class=\"eav-content-info__list\">\r\n                    <p class=\"eav-content-info__subtitle\">Entities</p>\r\n                    @for (entity of contentType.Entities; track entity) {\r\n                      <li class=\"eav-content-info__item\">\r\n                        <div class=\"eav-option-box\">\r\n                          <mat-checkbox [(ngModel)]=\"entity._export\">\r\n                            <span class=\"eav-option-box__text\">{{ entity.Title }} ({{ entity.Id }})</span>\r\n                          </mat-checkbox>\r\n                        </div>\r\n                      </li>\r\n                    }\r\n                  </ul>\r\n                }\r\n              </li>\r\n            }\r\n          </ul>\r\n          <ul class=\"eav-content-info__list eav-content-info__base\">\r\n            <p class=\"eav-content-info__title\">Templates Without Content Types</p>\r\n            @for (template of contentInfo.TemplatesWithoutContentTypes; track template) {\r\n              <li class=\"eav-content-info__item\">\r\n                <div class=\"eav-option-box\">\r\n                  <mat-checkbox [(ngModel)]=\"template._export\">\r\n                    <span class=\"eav-option-box__text\">{{ template.Name }} ({{ template.Id }})</span>\r\n                  </mat-checkbox>\r\n                </div>\r\n              </li>\r\n            }\r\n          </ul>\r\n        </div>\r\n      }\r\n    </div>\r\n    <mat-dialog-actions align=\"end\">\r\n      <button mat-raised-button [disabled]=\"vm.loading || vm.isExporting\" (click)=\"closeDialog()\">\r\n        Cancel\r\n      </button>\r\n      <button mat-raised-button color=\"accent\" [disabled]=\"vm.loading || vm.isExporting\" (click)=\"exportAppParts()\">\r\n        Export\r\n      </button>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef, MatDialogActions } from '@angular/material/dialog';\r\nimport { BehaviorSubject, combineLatest, map } from 'rxjs';\r\nimport { dropdownInsertValue } from '../../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, ScopeOption } from '../../../shared/constants/eav.constants';\r\nimport { ContentInfo, ContentInfoEntity, ContentInfoTemplate } from '../../models/content-info.model';\r\nimport { ContentTypesService } from '../../services/content-types.service';\r\nimport { ExportAppPartsService } from '../../services/export-app-parts.service';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FieldHintComponent } from '../../../shared/components/field-hint/field-hint.component';\r\nimport { ClickStopPropagationDirective } from '../../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { transient } from '../../../core';\r\n\r\n@Component({\r\n  selector: 'app-export-app-parts',\r\n  templateUrl: './export-app-parts.component.html',\r\n  styleUrls: ['./export-app-parts.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCheckboxModule,\r\n    MatDialogActions,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ExportAppPartsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  private exportAppPartsService = transient(ExportAppPartsService);\r\n  private contentTypesService = transient(ContentTypesService);\r\n\r\n  contentInfo: ContentInfo;\r\n  exportScope = eavConstants.scopes.default.value;\r\n  scopeOptions: ScopeOption[];\r\n  lockScope = true;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n\r\n  private loading$ = new BehaviorSubject(false);\r\n  private isExporting$ = new BehaviorSubject(false);\r\n  viewModel$ = combineLatest([this.loading$, this.isExporting$]).pipe(\r\n    map(([loading, isExporting]) => ({ loading, isExporting })),\r\n  );\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ExportAppPartsComponent>,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchScopes();\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.isExporting$.complete();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  exportAppParts() {\r\n    this.isExporting$.next(true);\r\n    // spm TODO: maybe optimize these functions to not loop content types and entities multiple times for no reason\r\n    // spm TODO: figure out how to capture window loading to disable export button\r\n    const contentTypeIds = this.selectedContentTypes().map(contentType => contentType.Id);\r\n    const templateIds = this.selectedTemplates().map(template => template.Id);\r\n    let entityIds = this.selectedEntities().map(entity => entity.Id);\r\n    entityIds = entityIds.concat(templateIds);\r\n\r\n    this.exportAppPartsService.exportParts(contentTypeIds, entityIds, templateIds);\r\n    this.isExporting$.next(false);\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n      if (!this.scopeOptions.find(option => option.value === newScope)) {\r\n        const newScopeOption: ScopeOption = {\r\n          name: newScope,\r\n          value: newScope,\r\n        };\r\n        this.scopeOptions.unshift(newScopeOption);\r\n      }\r\n    }\r\n    this.exportScope = newScope;\r\n    this.fetchContentInfo();\r\n  }\r\n\r\n  unlockScope() {\r\n    this.lockScope = !this.lockScope;\r\n    if (this.lockScope) {\r\n      this.exportScope = eavConstants.scopes.default.value;\r\n      this.fetchContentInfo();\r\n    }\r\n  }\r\n\r\n  private fetchScopes() {\r\n    this.loading$.next(true);\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions = scopes;\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  private fetchContentInfo() {\r\n    this.loading$.next(true);\r\n    this.exportAppPartsService.getContentInfo(this.exportScope).subscribe(contentInfo => {\r\n      this.contentInfo = contentInfo;\r\n      this.loading$.next(false);\r\n    });\r\n  }\r\n\r\n  private selectedContentTypes() {\r\n    return this.contentInfo.ContentTypes.filter(contentType => contentType._export);\r\n  }\r\n\r\n  private selectedEntities() {\r\n    let entities: ContentInfoEntity[] = [];\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      entities = entities.concat(contentType.Entities.filter(entity => entity._export));\r\n    }\r\n    return entities;\r\n  }\r\n\r\n  private selectedTemplates() {\r\n    let templates: ContentInfoTemplate[] = [];\r\n    // The ones with...\r\n    for (const contentType of this.contentInfo.ContentTypes) {\r\n      templates = templates.concat(contentType.Templates.filter(template => template._export));\r\n    }\r\n    // ...and without content types\r\n    templates = templates.concat(this.contentInfo.TemplatesWithoutContentTypes.filter(template => template._export));\r\n    return templates;\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule, NgClass, NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\nconst logThis = false;\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n  constructor() {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    if (logThis)\r\n      console.log('ClickStopPropagationDirective.onClick', event);\r\n    event.stopPropagation();\r\n  }\r\n\r\n}\r\n"],"x_google_ignoreList":[]}