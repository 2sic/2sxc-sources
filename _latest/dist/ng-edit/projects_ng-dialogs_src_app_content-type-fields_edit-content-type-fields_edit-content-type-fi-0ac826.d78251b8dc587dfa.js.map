{"version":3,"mappings":"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","names":["arrReducer","arr","value","push","fieldNamePattern","dataTypeLabels","Boolean","label","description","Custom","DateTime","Empty","Entity","Hyperlink","Number","String","ReservedNamesValidatorDirective","this","control","controlValue","toLocaleLowerCase","reservedName","Object","keys","reservedNames","find","name","s","selectors","provide","NG_VALIDATORS","useExisting","multi","i0","ctx_r20","ctx_r22","ctx_r24","ctx_r26","EditContentTypeFieldsComponent","dialogRef","route","contentTypesService","contentTypesFieldsService","snackBar","calculateTypeIcon","BehaviorSubject","Subscription","disableClose","subscription","add","backdropClick","subscribe","y","form","dirty","confirm","closeDialog","editMode","snapshot","paramMap","get","contentTypeStaticName","contentType$","retrieveContentType","pipe","share","fields$","mergeMap","t","getFields","contentType","StaticName","dataTypes$","typeListRetrieve","map","rawDataTypes","dataTypes","n","rawDataType","icon","p","calculateDataTypes","inputTypes$","getInputTypesList","reservedNames$","getReservedNames","forkJoin","fields","c","inputTypes","inputTypeOptions","existingFields","forEach","field","editFieldId","parseInt","editField","Id","i","Type","DataTypeConstants","InputType","InputTypeConstants","IsTitle","length","SortOrder","filterInputTypeOptions","calculateHints","loading$","next","complete","saving$","unsubscribe","close","index","filteredInputTypeOptions","filter","option","dataType","a","defaultInputType","some","inputType","selectedDataType","selectedInputType","inputTypeOption","dataTypeHints","_a","inputTypeHints","m","isObsolete","obsoleteMessage","l","_b","inputName","open","rename","duration","updateInputType","of","concatMap","catchError","operate","source","subscriber","accumulator","seed","scanInternals","arguments","reduce","toArray","NgForm","FieldHintComponent","isShort","f","ctx"],"sources":["./node_modules/rxjs/dist/esm/internal/operators/toArray.js","./projects/ng-dialogs/src/app/app-administration/constants/field-name.patterns.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.helpers.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/reserved-names.directive.ts","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.html","./projects/ng-dialogs/src/app/content-type-fields/edit-content-type-fields/edit-content-type-fields.component.ts","./node_modules/rxjs/dist/esm/internal/operators/reduce.js","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts"],"sourcesContent":["import { reduce } from './reduce';\nimport { operate } from '../util/lift';\nconst arrReducer = (arr, value) => (arr.push(value), arr);\nexport function toArray() {\n    return operate((source, subscriber) => {\n        reduce(arrReducer, [])(source).subscribe(subscriber);\n    });\n}\n","export const fieldNamePattern = /^[A-Za-z][A-Za-z0-9]+$/;\r\nexport const fieldNameError = 'Standard letters and numbers are allowed. Must start with a letter.';\r\n","import { calculateTypeIcon } from '../content-type-fields.helpers';\r\n\r\nconst dataTypeLabels: Record<string, { label: string, description: string }> = {\r\n  Boolean: { label: 'Boolean (yes/no)', description: 'Yes/no or true/false values' },\r\n  Custom: { label: 'Custom - ui-tools or custom types', description: 'Use for things like gps-pickers (which writes into multiple fields) or for custom-data which serializes something exotic into the db like an array, a custom json or anything' },\r\n  DateTime: { label: 'Date and/or time', description: 'For date, time or combined values' },\r\n  Empty: { label: 'Empty - for form-titles etc.', description: 'Use to structure your form' },\r\n  Entity: { label: 'Entity (other content-items)', description: 'One or more other content-items' },\r\n  Hyperlink: { label: 'Link / file reference', description: 'Hyperlink or reference to a picture / file' },\r\n  Number: { label: 'Number', description: 'Any kind of number' },\r\n  String: { label: 'Text / string', description: 'Any kind of text' },\r\n};\r\n\r\nexport interface DataType {\r\n  name: string;\r\n  label: string;\r\n  icon: string;\r\n  description: string;\r\n}\r\n\r\nexport function calculateDataTypes(rawDataTypes: string[]): DataType[] {\r\n  const dataTypes: DataType[] = [];\r\n  for (const rawDataType of rawDataTypes) {\r\n    dataTypes.push({\r\n      name: rawDataType,\r\n      label: dataTypeLabels[rawDataType].label,\r\n      icon: calculateTypeIcon(rawDataType),\r\n      description: dataTypeLabels[rawDataType].description,\r\n    });\r\n  }\r\n  return dataTypes;\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { AbstractControl, NG_VALIDATORS, ValidationErrors, Validator } from '@angular/forms';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\n\r\n@Directive({\r\n  selector: '[appReservedNames]',\r\n  providers: [{ provide: NG_VALIDATORS, useExisting: ReservedNamesValidatorDirective, multi: true }],\r\n})\r\nexport class ReservedNamesValidatorDirective implements Validator {\r\n  @Input('appReservedNames') reservedNames: ReservedNames = {};\r\n\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!control.value) { return null; }\r\n\r\n    const controlValue = (control.value as string).toLocaleLowerCase();\r\n    const reservedName = Object.keys(this.reservedNames).find(name => name.toLocaleLowerCase() === controlValue);\r\n    return reservedName ? { reservedNames: this.reservedNames[reservedName] } : null;\r\n  }\r\n}\r\n","<div mat-dialog-title>\r\n  <div class=\"dialog-title-box\">\r\n    <ng-container *ngIf=\"editMode === undefined\">Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode === null\">Add Fields</ng-container>\r\n    <ng-container *ngIf=\"editMode != null\">Edit Field</ng-container>\r\n  </div>\r\n</div>\r\n\r\n<form #ngForm=\"ngForm\" class=\"dialog-form\" *ngIf=\"(loading$ | async) === false\" (ngSubmit)=\"save()\">\r\n  <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n    <div class=\"row-container\" *ngFor=\"let field of fields; index as i\">\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Name</mat-label>\r\n          <input matInput [pattern]=\"fieldNamePattern\" [appReservedNames]=\"reservedNames\" [(ngModel)]=\"field.StaticName\"\r\n            [name]=\"'StaticName' + i\" #staticName=\"ngModel\" [disabled]=\"editMode === 'inputType'\">\r\n        </mat-form-field>\r\n        <ng-container *ngIf=\"staticName.touched && staticName.errors\">\r\n          <app-field-hint *ngIf=\"staticName.errors.pattern\" [isError]=\"true\">{{ fieldNameError }}</app-field-hint>\r\n          <app-field-hint *ngIf=\"staticName.errors.reservedNames\" [isError]=\"true\">\r\n            {{ staticName.errors.reservedNames }}\r\n          </app-field-hint>\r\n        </ng-container>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Data Type</mat-label>\r\n          <mat-select (selectionChange)=\"filterInputTypeOptions(i); resetInputType(i); calculateHints(i)\"\r\n            [(ngModel)]=\"field.Type\" [name]=\"'Type' + i\" [disabled]=\"editMode != null\">\r\n            <mat-select-trigger>\r\n              <mat-icon class=\"type-icon\">{{ findIcon(field.Type) }}</mat-icon>\r\n              <span>{{ field.Type }}</span>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let dataType of dataTypes\" [value]=\"dataType.name\">\r\n              <mat-icon>{{ dataType.icon }}</mat-icon>\r\n              <span>{{ dataType.label }}</span>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ dataTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n\r\n      <div class=\"edit-input\">\r\n        <mat-form-field appearance=\"standard\" color=\"accent\">\r\n          <mat-label>Input Type</mat-label>\r\n          <mat-select (selectionChange)=\"calculateHints(i)\" [(ngModel)]=\"field.InputType\" [name]=\"'InputType' + i\"\r\n            [disabled]=\"editMode === 'name'\">\r\n            <mat-select-trigger>\r\n              <span>{{ getInputTypeOption(field.InputType)?.label }}</span>\r\n              <mat-icon class=\"input-icon\">{{ getInputTypeOption(field.InputType)?.icon }}</mat-icon>\r\n            </mat-select-trigger>\r\n            <mat-option *ngFor=\"let option of filteredInputTypeOptions[i]\" [value]=\"option.inputType\"\r\n              [ngClass]=\"{ 'input-obsolete': option.isObsolete }\">\r\n              <span>{{ option.label }}</span>\r\n              <mat-icon class=\"input-icon\" *ngIf=\"option.icon\">{{ option.icon }}</mat-icon>\r\n            </mat-option>\r\n          </mat-select>\r\n        </mat-form-field>\r\n        <app-field-hint>{{ inputTypeHints[i] }}</app-field-hint>\r\n      </div>\r\n    </div>\r\n  </div>\r\n\r\n  <div class=\"dialog-form-actions\">\r\n    <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n    <button mat-raised-button type=\"submit\" color=\"accent\" [disabled]=\"!ngForm.form.valid || (saving$ | async)\">\r\n      Save\r\n    </button>\r\n  </div>\r\n</form>\r\n","import { Component, HostBinding, OnDestroy, OnInit, ViewChild } from '@angular/core';\r\nimport { NgForm } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, of, Subscription } from 'rxjs';\r\nimport { catchError, concatMap, filter, map, mergeMap, share, toArray } from 'rxjs/operators';\r\nimport { fieldNameError, fieldNamePattern } from '../../app-administration/constants/field-name.patterns';\r\nimport { ContentType } from '../../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../../app-administration/services/content-types.service';\r\nimport { DataTypeConstants } from '../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../constants/input-type.constants';\r\nimport { calculateTypeIcon } from '../content-type-fields.helpers';\r\nimport { Field, FieldInputTypeOption } from '../models/field.model';\r\nimport { ReservedNames } from '../models/reserved-names.model';\r\nimport { ContentTypesFieldsService } from '../services/content-types-fields.service';\r\nimport { calculateDataTypes, DataType } from './edit-content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-edit-content-type-fields',\r\n  templateUrl: './edit-content-type-fields.component.html',\r\n  styleUrls: ['./edit-content-type-fields.component.scss'],\r\n})\r\nexport class EditContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  @ViewChild('ngForm', { read: NgForm }) private form: NgForm;\r\n\r\n  fields: Partial<Field>[] = [];\r\n  reservedNames: ReservedNames;\r\n  editMode: 'name' | 'inputType';\r\n  dataTypes: DataType[];\r\n  filteredInputTypeOptions: FieldInputTypeOption[][] = [];\r\n  dataTypeHints: string[] = [];\r\n  inputTypeHints: string[] = [];\r\n  fieldNamePattern = fieldNamePattern;\r\n  fieldNameError = fieldNameError;\r\n  findIcon = calculateTypeIcon;\r\n  loading$ = new BehaviorSubject(true);\r\n  saving$ = new BehaviorSubject(false);\r\n\r\n  private contentType: ContentType;\r\n  private inputTypeOptions: FieldInputTypeOption[];\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<EditContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) {\r\n    this.dialogRef.disableClose = true;\r\n    this.subscription.add(\r\n      this.dialogRef.backdropClick().subscribe(event => {\r\n        if (this.form.dirty) {\r\n          const confirmed = confirm('You have unsaved changes. Are you sure you want to close this dialog?');\r\n          if (!confirmed) { return; }\r\n        }\r\n        this.closeDialog();\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.editMode = this.route.snapshot.paramMap.get('editMode') as 'name' | 'inputType';\r\n\r\n    const contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n    const contentType$ = this.contentTypesService.retrieveContentType(contentTypeStaticName).pipe(share());\r\n    const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n    const dataTypes$ = this.contentTypesFieldsService.typeListRetrieve().pipe(map(rawDataTypes => calculateDataTypes(rawDataTypes)));\r\n    const inputTypes$ = this.contentTypesFieldsService.getInputTypesList();\r\n    const reservedNames$ = this.contentTypesFieldsService.getReservedNames();\r\n\r\n    forkJoin([contentType$, fields$, dataTypes$, inputTypes$, reservedNames$]).subscribe(\r\n      ([contentType, fields, dataTypes, inputTypes, reservedNames]) => {\r\n        this.contentType = contentType;\r\n        this.dataTypes = dataTypes;\r\n        this.inputTypeOptions = inputTypes;\r\n\r\n        const existingFields: ReservedNames = {};\r\n        fields.forEach(field => {\r\n          existingFields[field.StaticName] = 'Field with this name already exists';\r\n        });\r\n        this.reservedNames = {\r\n          ...reservedNames,\r\n          ...existingFields,\r\n        };\r\n\r\n        if (this.editMode != null) {\r\n          const editFieldId = this.route.snapshot.paramMap.get('id') ? parseInt(this.route.snapshot.paramMap.get('id'), 10) : null;\r\n          const editField = fields.find(field => field.Id === editFieldId);\r\n          if (this.editMode === 'name') {\r\n            delete this.reservedNames[editField.StaticName];\r\n          }\r\n          this.fields.push(editField);\r\n        } else {\r\n          for (let i = 1; i <= 8; i++) {\r\n            this.fields.push({\r\n              Id: 0,\r\n              Type: DataTypeConstants.String,\r\n              InputType: InputTypeConstants.StringDefault,\r\n              StaticName: '',\r\n              IsTitle: fields.length === 0,\r\n              SortOrder: fields.length + i,\r\n            });\r\n          }\r\n        }\r\n\r\n        for (let i = 0; i < this.fields.length; i++) {\r\n          this.filterInputTypeOptions(i);\r\n          this.calculateHints(i);\r\n        }\r\n        this.loading$.next(false);\r\n      }\r\n    );\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.loading$.complete();\r\n    this.saving$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  filterInputTypeOptions(index: number) {\r\n    this.filteredInputTypeOptions[index] = this.inputTypeOptions.filter(\r\n      option => option.dataType === this.fields[index].Type.toLocaleLowerCase()\r\n    );\r\n  }\r\n\r\n  resetInputType(index: number) {\r\n    let defaultInputType = this.fields[index].Type.toLocaleLowerCase() + InputTypeConstants.DefaultSuffix;\r\n    const defaultExists = this.filteredInputTypeOptions[index].some(option => option.inputType === defaultInputType);\r\n    if (!defaultExists) {\r\n      defaultInputType = this.filteredInputTypeOptions[index][0].inputType;\r\n    }\r\n    this.fields[index].InputType = defaultInputType;\r\n  }\r\n\r\n  calculateHints(index: number) {\r\n    const selectedDataType = this.dataTypes.find(dataType => dataType.name === this.fields[index].Type);\r\n    const selectedInputType = this.inputTypeOptions.find(inputTypeOption => inputTypeOption.inputType === this.fields[index].InputType);\r\n    this.dataTypeHints[index] = selectedDataType?.description ?? '';\r\n    this.inputTypeHints[index] = selectedInputType?.isObsolete\r\n      ? `OBSOLETE - ${selectedInputType.obsoleteMessage}`\r\n      : selectedInputType?.description ?? '';\r\n  }\r\n\r\n  getInputTypeOption(inputName: string) {\r\n    return this.inputTypeOptions.find(option => option.inputType === inputName);\r\n  }\r\n\r\n  save() {\r\n    this.saving$.next(true);\r\n    this.snackBar.open('Saving...');\r\n    if (this.editMode != null) {\r\n      const field = this.fields[0];\r\n      if (this.editMode === 'name') {\r\n        this.contentTypesFieldsService.rename(field.Id, this.contentType.Id, field.StaticName).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      } else if (this.editMode === 'inputType') {\r\n        this.contentTypesFieldsService.updateInputType(field.Id, field.StaticName, field.InputType).subscribe(() => {\r\n          this.saving$.next(false);\r\n          this.snackBar.open('Saved', null, { duration: 2000 });\r\n          this.closeDialog();\r\n        });\r\n      }\r\n    } else {\r\n      of(...this.fields).pipe(\r\n        filter(field => !!field.StaticName),\r\n        concatMap(field =>\r\n          this.contentTypesFieldsService.add(field, this.contentType.Id).pipe(catchError(error => of(null)))\r\n        ),\r\n        toArray(),\r\n      ).subscribe(responses => {\r\n        this.saving$.next(false);\r\n        this.snackBar.open('Saved', null, { duration: 2000 });\r\n        this.closeDialog();\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { scanInternals } from './scanInternals';\nimport { operate } from '../util/lift';\nexport function reduce(accumulator, seed) {\n    return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-type-fields_edit-content-type-fields_edit-content-type-fi-0ac826.d78251b8dc587dfa.js"}