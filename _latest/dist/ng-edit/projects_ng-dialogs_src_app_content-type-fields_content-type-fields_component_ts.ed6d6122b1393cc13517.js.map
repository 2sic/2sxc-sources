{"version":3,"sources":["./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-actions/content-type-fields-actions.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-special/content-type-fields-special.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.html","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-title/content-type-fields-title.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.ts","./projects/ng-dialogs/src/app/content-type-fields/ag-grid-components/content-type-fields-type/content-type-fields-type.component.html","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.ts","./projects/ng-dialogs/src/app/content-type-fields/content-type-fields.component.html"],"names":["agInit","params","this","field","data","metadataCount","Metadata","Object","keys","filter","key","length","enablePermissions","InputType","Type","refresh","openMetadata","onOpenMetadata","rename","onRename","openPermissions","onOpenPermissions","deleteField","onDelete","ContentTypeFieldsActionsComponent","value","ContentTypeFieldsInputTypeComponent","hasFormulas","HasFormulas","isEphemeral","IsEphemeral","ContentTypeFieldsSpecialComponent","isTitle","ContentTypeFieldsTitleComponent","icon","ContentTypeFieldsTypeComponent","dialogRef","route","router","contentTypesService","contentTypesFieldsService","snackBar","contentType$","BehaviorSubject","fields$","modules","gridOptions","getRowClass","frameworkComponents","contentTypeFieldsTitleComponent","contentTypeFieldsTypeComponent","contentTypeFieldsInputTypeComponent","contentTypeFieldsSpecialComponent","contentTypeFieldsActionsComponent","columnDefs","rowDrag","width","cellClass","headerName","cellRenderer","onCellClicked","setTitle","bind","flex","minWidth","sortable","editFieldMetadata","nameCellRenderer","headerClass","changeInputType","valueGetter","inputTypeValueGetter","pinned","cellRendererParams","delete","sortApplied","filterApplied","rowDragSuppressed","contentTypeStaticName","snapshot","paramMap","get","subscription","Subscription","ngOnInit","fetchFields","refreshOnChildClosed","ngOnDestroy","complete","unsubscribe","closeDialog","close","onGridReady","gridApi","api","onRowDragEnter","event","setEnableCellTextSelection","onRowDragEnd","setSuppressRowDrag","idArray","map","Id","reOrder","subscribe","res","onRowDragMove","movingNode","node","overNode","movingData","overData","newFields","fromIndex","indexOf","toIndex","moveInArray","next","clearFocusedCell","arr","element","splice","onSortChanged","sortModel","getSortModel","suppressRowDrag","onFilterChanged","filterModel","getFilterModel","fieldsFiltered","shouldSuppress","add","navigate","relativeTo","currentField","includes","isGroupOpen","StaticName","substring","callback","retrieveContentType","pipe","share","mergeMap","contentType","getFields","forkJoin","fields","form","items","createItemDefinition","formUrl","metadataType","EntityId","ContentTypeName","For","Target","Number","Prefill","Name","open","duration","confirm","url","events","startWith","firstChild","pairwise","ContentTypeFieldsComponent"],"mappings":"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","file":"projects_ng-dialogs_src_app_content-type-fields_content-type-fields_component_ts.ed6d6122b1393cc13517.js","sourcesContent":["<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Metadata\" (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" *ngIf=\"metadataCount\">\r\n      local_offer\r\n    </mat-icon>\r\n    <mat-icon *ngIf=\"!metadataCount\">local_offer</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Permissions\" *ngIf=\"enablePermissions\"\r\n    (click)=\"openPermissions()\">\r\n    <mat-icon [matBadge]=\"field.Permissions.Count\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      *ngIf=\"field.Permissions.Count\">\r\n      person\r\n    </mat-icon>\r\n    <mat-icon *ngIf=\"!field.Permissions.Count\">person</mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"!enablePermissions\">\r\n    <mat-icon>person</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item (click)=\"rename()\">\r\n    <mat-icon>text_fields</mat-icon>\r\n    <span>Rename</span>\r\n  </button>\r\n\r\n  <button mat-menu-item [disabled]=\"field.IsTitle\" (click)=\"deleteField()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { DataTypeConstants } from '../../constants/data-type.constants';\r\nimport { InputTypeConstants } from '../../constants/input-type.constants';\r\nimport { Field } from '../../models/field.model';\r\nimport { ContentTypeFieldsActionsParams } from './content-type-fields-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-actions',\r\n  templateUrl: './content-type-fields-actions.component.html',\r\n  styleUrls: ['./content-type-fields-actions.component.scss'],\r\n})\r\nexport class ContentTypeFieldsActionsComponent implements ICellRendererAngularComp {\r\n  field: Field;\r\n  metadataCount: number;\r\n  enablePermissions: boolean;\r\n  private params: ContentTypeFieldsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentTypeFieldsActionsParams) {\r\n    this.params = params;\r\n    this.field = this.params.data;\r\n    this.metadataCount = this.field.Metadata ? Object.keys(this.field.Metadata).filter(key => key !== 'merged').length : 0;\r\n    this.enablePermissions = this.field.InputType === InputTypeConstants.StringWysiwyg || this.field.Type === DataTypeConstants.Hyperlink;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.field);\r\n  }\r\n\r\n  rename() {\r\n    this.params.onRename(this.field);\r\n  }\r\n\r\n  openPermissions() {\r\n    this.params.onOpenPermissions(this.field);\r\n  }\r\n\r\n  deleteField() {\r\n    this.params.onDelete(this.field);\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-input-type',\r\n  templateUrl: './content-type-fields-input-type.component.html',\r\n  styleUrls: ['./content-type-fields-input-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsInputTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div matRipple class=\"input-component highlight\">\r\n  <div class=\"text\">{{ value }}</div>\r\n  <div class=\"like-button\">\r\n    <mat-icon>arrow_drop_down</mat-icon>\r\n  </div>\r\n</div>\r\n","<div class=\"icon-container\">\r\n  <mat-icon *ngIf=\"hasFormulas\" tippy=\"Has Formulas\">functions</mat-icon>\r\n  <mat-icon *ngIf=\"isEphemeral\" tippy=\"Ephemeral / Temporary, won't save\">mobiledata_off</mat-icon>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { Field } from '../../models/field.model';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-special',\r\n  templateUrl: './content-type-fields-special.component.html',\r\n  styleUrls: ['./content-type-fields-special.component.scss'],\r\n})\r\nexport class ContentTypeFieldsSpecialComponent implements ICellRendererAngularComp {\r\n  hasFormulas: boolean;\r\n  isEphemeral: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    const field: Field = params.data;\r\n    this.hasFormulas = field.HasFormulas;\r\n    this.isEphemeral = field.IsEphemeral;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Use as title field\">\r\n    <mat-icon *ngIf=\"isTitle\" svgIcon=\"star\"></mat-icon>\r\n    <mat-icon *ngIf=\"!isTitle\">star_outline</mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-title',\r\n  templateUrl: './content-type-fields-title.component.html',\r\n  styleUrls: ['./content-type-fields-title.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTitleComponent implements ICellRendererAngularComp {\r\n  isTitle: boolean;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.isTitle = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { calculateTypeIcon } from '../../content-type-fields.helpers';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields-type',\r\n  templateUrl: './content-type-fields-type.component.html',\r\n  styleUrls: ['./content-type-fields-type.component.scss'],\r\n})\r\nexport class ContentTypeFieldsTypeComponent implements ICellRendererAngularComp {\r\n  value: string;\r\n  icon: string;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    this.value = params.value;\r\n    this.icon = calculateTypeIcon(this.value);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","<div class=\"icon-container\" [tippy]=\"value\">\r\n  <mat-icon>{{ icon }}</mat-icon>\r\n</div>\r\n","// tslint:disable-next-line:max-line-length\r\nimport { AllCommunityModules, CellClickedEvent, FilterChangedEvent, GridApi, GridOptions, GridReadyEvent, ICellRendererParams, RowDragEvent, SortChangedEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { Component, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, forkJoin, Subscription } from 'rxjs';\r\nimport { filter, map, mergeMap, pairwise, share, startWith } from 'rxjs/operators';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { GoToPermissions } from '../permissions/go-to-permissions';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { AddItem, EditForm, EditItem } from '../shared/models/edit-form.model';\r\nimport { ContentTypeFieldsActionsComponent } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.component';\r\nimport { ContentTypeFieldsActionsParams } from './ag-grid-components/content-type-fields-actions/content-type-fields-actions.models';\r\nimport { ContentTypeFieldsInputTypeComponent } from './ag-grid-components/content-type-fields-input-type/content-type-fields-input-type.component';\r\nimport { ContentTypeFieldsSpecialComponent } from './ag-grid-components/content-type-fields-special/content-type-fields-special.component';\r\nimport { ContentTypeFieldsTitleComponent } from './ag-grid-components/content-type-fields-title/content-type-fields-title.component';\r\nimport { ContentTypeFieldsTypeComponent } from './ag-grid-components/content-type-fields-type/content-type-fields-type.component';\r\nimport { InputTypeConstants } from './constants/input-type.constants';\r\nimport { Field } from './models/field.model';\r\nimport { ContentTypesFieldsService } from './services/content-types-fields.service';\r\n\r\n@Component({\r\n  selector: 'app-content-type-fields',\r\n  templateUrl: './content-type-fields.component.html',\r\n  styleUrls: ['./content-type-fields.component.scss'],\r\n})\r\nexport class ContentTypeFieldsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  fields$ = new BehaviorSubject<Field[]>(null);\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    getRowClass(params/*: RowClassParams*/) {\r\n      const field: Field = params.data;\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) { return 'group-start-row'; }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) { return 'group-end-row'; }\r\n      return '';\r\n    },\r\n    frameworkComponents: {\r\n      contentTypeFieldsTitleComponent: ContentTypeFieldsTitleComponent,\r\n      contentTypeFieldsTypeComponent: ContentTypeFieldsTypeComponent,\r\n      contentTypeFieldsInputTypeComponent: ContentTypeFieldsInputTypeComponent,\r\n      contentTypeFieldsSpecialComponent: ContentTypeFieldsSpecialComponent,\r\n      contentTypeFieldsActionsComponent: ContentTypeFieldsActionsComponent,\r\n    },\r\n    columnDefs: [\r\n      { rowDrag: true, width: 18, cellClass: 'no-select no-padding no-outline' },\r\n      {\r\n        headerName: 'Title', field: 'IsTitle', width: 42, cellClass: 'secondary-action no-padding no-outline',\r\n        cellRenderer: 'contentTypeFieldsTitleComponent', onCellClicked: this.setTitle.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Name', field: 'StaticName', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: (params) => this.editFieldMetadata(params.data),\r\n        cellRenderer: this.nameCellRenderer.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Type', field: 'Type', width: 70, headerClass: 'dense', cellClass: 'no-outline', sortable: true,\r\n        filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsTypeComponent',\r\n      },\r\n      {\r\n        headerName: 'Input', field: 'InputType', width: 160, cellClass: 'secondary-action no-padding',\r\n        sortable: true, filter: 'agTextColumnFilter', cellRenderer: 'contentTypeFieldsInputTypeComponent',\r\n        onCellClicked: this.changeInputType.bind(this), valueGetter: this.inputTypeValueGetter,\r\n      },\r\n      {\r\n        headerName: 'Label', field: 'Metadata.All.Name', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        headerName: 'Special', width: 66, headerClass: 'dense', cellClass: 'no-outline',\r\n        cellRenderer: 'contentTypeFieldsSpecialComponent',\r\n      },\r\n      {\r\n        headerName: 'Notes', field: 'Metadata.All.Notes', flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter',\r\n      },\r\n      {\r\n        width: 122, cellClass: 'secondary-action no-padding', cellRenderer: 'contentTypeFieldsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onRename: (field) => this.rename(field),\r\n          onDelete: (field) => this.delete(field),\r\n          onOpenPermissions: (field) => this.openPermissions(field),\r\n          onOpenMetadata: (field) => this.openMetadata(field),\r\n        } as ContentTypeFieldsActionsParams,\r\n      },\r\n    ],\r\n  };\r\n\r\n  sortApplied = false;\r\n  filterApplied = false;\r\n  private gridApi: GridApi;\r\n  private rowDragSuppressed = false;\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentTypeFieldsComponent>,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private contentTypesService: ContentTypesService,\r\n    private contentTypesFieldsService: ContentTypesFieldsService,\r\n    private snackBar: MatSnackBar,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchFields();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.fields$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi = params.api;\r\n  }\r\n\r\n  onRowDragEnter(event: RowDragEvent) {\r\n    this.gridApi.setEnableCellTextSelection(false);\r\n  }\r\n\r\n  onRowDragEnd(event: RowDragEvent) {\r\n    this.gridApi.setSuppressRowDrag(true);\r\n    const idArray = this.fields$.value.map(field => field.Id);\r\n    this.contentTypesFieldsService.reOrder(idArray, this.contentType$.value).subscribe(res => {\r\n      this.fetchFields(() => {\r\n        this.gridApi.setEnableCellTextSelection(true);\r\n        this.gridApi.setSuppressRowDrag(false);\r\n      });\r\n    });\r\n  }\r\n\r\n  onRowDragMove(event: RowDragEvent) {\r\n    const movingNode = event.node;\r\n    const overNode = event.overNode;\r\n    if (!overNode) { return; }\r\n    const rowNeedsToMove = movingNode !== overNode;\r\n    if (rowNeedsToMove) {\r\n      const movingData: Field = movingNode.data;\r\n      const overData: Field = overNode.data;\r\n      const newFields = [...this.fields$.value];\r\n      const fromIndex = newFields.indexOf(movingData);\r\n      const toIndex = newFields.indexOf(overData);\r\n      this.moveInArray(newFields, fromIndex, toIndex);\r\n      this.fields$.next(newFields);\r\n      this.gridApi.clearFocusedCell();\r\n    }\r\n  }\r\n\r\n  private moveInArray(arr: Field[], fromIndex: number, toIndex: number) {\r\n    const element = arr[fromIndex];\r\n    arr.splice(fromIndex, 1);\r\n    arr.splice(toIndex, 0, element);\r\n  }\r\n\r\n  onSortChanged(params: SortChangedEvent) {\r\n    const sortModel = this.gridApi.getSortModel();\r\n    this.sortApplied = sortModel.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  onFilterChanged(params: FilterChangedEvent) {\r\n    const filterModel = this.gridApi.getFilterModel();\r\n    const fieldsFiltered = Object.keys(filterModel);\r\n    this.filterApplied = fieldsFiltered.length > 0;\r\n    this.suppressRowDrag();\r\n  }\r\n\r\n  private suppressRowDrag() {\r\n    const shouldSuppress = this.sortApplied || this.filterApplied;\r\n    if (shouldSuppress && !this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = true;\r\n      this.gridApi.setSuppressRowDrag(true);\r\n    } else if (!shouldSuppress && this.rowDragSuppressed) {\r\n      this.rowDragSuppressed = false;\r\n      this.gridApi.setSuppressRowDrag(false);\r\n    }\r\n  }\r\n\r\n  add() {\r\n    this.router.navigate([`add/${this.contentTypeStaticName}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private nameCellRenderer(params: ICellRendererParams) {\r\n    const currentField: Field = params.data;\r\n    const empties: string[] = [InputTypeConstants.EmptyDefault, InputTypeConstants.EmptyEnd];\r\n    if (empties.includes(currentField.InputType)) {\r\n      return params.value;\r\n    }\r\n\r\n    let isGroupOpen = false;\r\n    for (const field of this.fields$.value) {\r\n      if (field.InputType === InputTypeConstants.EmptyDefault) {\r\n        isGroupOpen = true;\r\n        continue;\r\n      }\r\n      if (field.InputType === InputTypeConstants.EmptyEnd) {\r\n        isGroupOpen = false;\r\n        continue;\r\n      }\r\n      if (field.StaticName === currentField.StaticName) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    return isGroupOpen ? `<span class=\"is-in-group\">${params.value}</span>` : params.value;\r\n  }\r\n\r\n  private inputTypeValueGetter(params: ValueGetterParams) {\r\n    const field: Field = params.data;\r\n    const inputType = field.InputType.substring(field.InputType.indexOf('-') + 1);\r\n    return inputType;\r\n  }\r\n\r\n  private fetchFields(callback?: () => void) {\r\n    if (this.contentType$.value == null) {\r\n      const contentType$ = this.contentTypesService.retrieveContentType(this.contentTypeStaticName).pipe(share());\r\n      const fields$ = contentType$.pipe(mergeMap(contentType => this.contentTypesFieldsService.getFields(contentType.StaticName)));\r\n      forkJoin([contentType$, fields$]).subscribe(([contentType, fields]) => {\r\n        this.contentType$.next(contentType);\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    } else {\r\n      this.contentTypesFieldsService.getFields(this.contentType$.value.StaticName).subscribe(fields => {\r\n        this.fields$.next(fields);\r\n        if (callback != null) { callback(); }\r\n      });\r\n    }\r\n  }\r\n\r\n  private editFieldMetadata(field: Field) {\r\n    const form: EditForm = {\r\n      items: [\r\n        this.createItemDefinition(field, 'All'),\r\n        this.createItemDefinition(field, field.Type),\r\n        this.createItemDefinition(field, field.InputType),\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private createItemDefinition(field: Field, metadataType: string): AddItem | EditItem {\r\n    return field.Metadata[metadataType] != null\r\n      ? { EntityId: field.Metadata[metadataType].Id } // if defined, return the entity-number to edit\r\n      : {\r\n        ContentTypeName: '@' + metadataType, // otherwise the content type for new-assignment\r\n        For: {\r\n          Target: eavConstants.metadata.attribute.target,\r\n          Number: field.Id,\r\n        },\r\n        Prefill: { Name: field.StaticName },\r\n      };\r\n  }\r\n\r\n  private setTitle(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.snackBar.open('Setting title...');\r\n    this.contentTypesFieldsService.setTitle(field, this.contentType$.value).subscribe(() => {\r\n      this.snackBar.open('Title set', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private changeInputType(params: CellClickedEvent) {\r\n    const field: Field = params.data;\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/inputType`], { relativeTo: this.route });\r\n  }\r\n\r\n  private rename(field: Field) {\r\n    this.router.navigate([`update/${this.contentTypeStaticName}/${field.Id}/name`], { relativeTo: this.route });\r\n  }\r\n\r\n  private delete(field: Field) {\r\n    if (!confirm(`Are you sure you want to delete '${field.StaticName}' (${field.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesFieldsService.delete(field, this.contentType$.value).subscribe(res => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchFields();\r\n    });\r\n  }\r\n\r\n  private openPermissions(field: Field) {\r\n    this.router.navigate([GoToPermissions.getUrlAttribute(field.Id)], { relativeTo: this.route });\r\n  }\r\n\r\n  private openMetadata(field: Field) {\r\n    const url = GoToMetadata.getUrlAttribute(\r\n      field.Id,\r\n      `Metadata for Field: ${field.StaticName} (${field.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchFields();\r\n      })\r\n    );\r\n  }\r\n\r\n}\r\n","<div class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Fields</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"fields$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (rowDragEnter)=\"onRowDragEnter($event)\" (rowDragEnd)=\"onRowDragEnd($event)\"\r\n      (rowDragMove)=\"onRowDragMove($event)\" (gridReady)=\"onGridReady($event)\" (sortChanged)=\"onSortChanged($event)\"\r\n      (filterChanged)=\"onFilterChanged($event)\" [ngClass]=\"{\r\n        'grid-sorted': sortApplied,\r\n        'grid-filtered': filterApplied\r\n      }\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\"></div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add fields\" (click)=\"add()\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":"webpack:///"}