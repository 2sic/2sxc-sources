{"version":3,"file":"projects_eav-ui_src_app_app-administration_services_index_ts-projects_eav-ui_src_app_shared_s-def069.2a47b10aad85d77a.js","mappings":"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","names":["ExportAppService","HttpServiceBase","getAppInfo","initial","this","getSignal","params","appid","appId","zoneId","exportAppUrl","apiUrl","webApiAppRoot","exportForVersionControl","includeContentGroups","resetAppGuid","withFiles","getHttpApiUrl","toString","withPortalFiles","__ngFactoryType__","factory","Éµfac","toBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","split","onerror","error","readAsText","ExportAppPartsService","getContentInfo","scope","exportParts","contentTypeIds","entityIds","templateIds","url","webApiAppPartsRoot","join","window","open","ImportAppService","importApp","changedName","retryOnDuplicate","formData","FormData","append","http","post","pipe","switchMap","Messages","MessageType","FileUploadMessageTypes","Warning","folderName","prompt","Text","of","ViewsService","getAll","delete","id","Id","import","export","getPolymorphism","getUsage","guid","ClipboardService","constructor","snackBar","copyToClipboard","text","duration","i0","i1","providedIn","logSpecs","all","getAllSig","getAllRes","importQuery","clonePipeline","update","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","log","classLog","contentType","fnIf","r","webApiEntityList","l","sig","res","httpResource","defaultValue","obs","from","fileBase64","AppId","ContentBase64","map","success","Success","webApiTypeRoot","webApiTypeGet","webApiTypes","webApiTypeScopes","ContentTypesService","retrieveContentType","nameId","contentTypeId","getTypeSig","retrieveContentTypes","getTypesSig","getScopes","scopesData","scopes","old","Object","keys","key","name","value","getScopesSig","scopesSignal","computed","getScopesV2","save","staticName","NameId","files","createGhost","sourceNameId","ImportAppPartsService","importAppParts","resetApp"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/services/export-app.service.ts","./projects/eav-ui/src/app/shared/helpers/file-to-base64.helper.ts","./projects/eav-ui/src/app/app-administration/services/export-app-parts.service.ts","./projects/eav-ui/src/app/import-app/services/import-app.service.ts","./projects/eav-ui/src/app/app-administration/services/views.service.ts","./projects/eav-ui/src/app/shared/services/clipboard.service.ts","./projects/eav-ui/src/app/app-administration/services/pipelines.service.ts","./projects/eav-ui/src/app/app-administration/services/content-types.service.ts","./projects/eav-ui/src/app/app-administration/services/import-app-parts.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n const webApiAppRootStatistics = 'admin/app/Statistics';\r\n const webApiAppRootSaveData = 'admin/app/SaveData';\r\n\r\n\r\n@Injectable()\r\nexport class ExportAppService extends HttpServiceBase {\r\n\r\n  getAppInfo(initial: AppInfo) {\r\n    return this.getSignal<AppInfo>(webApiAppRootStatistics, {\r\n      params: { appid: this.appId, zoneId: this.zoneId },\r\n    }, initial);\r\n  }\r\n\r\n  /** Generate the export app path. It can be extended with additional parameters */\r\n  exportAppUrl() {\r\n    return `${this.apiUrl(`${webApiAppRoot}Export`)}?appId=${this.appId}&zoneId=${this.zoneId}`;\r\n  }\r\n\r\n  exportForVersionControl({ includeContentGroups, resetAppGuid, withFiles }:\r\n    { includeContentGroups: boolean; resetAppGuid: boolean; withFiles: boolean; }) {\r\n    // return this.get<boolean>(webApiAppRoot + 'SaveData', {\r\n    return this.getHttpApiUrl<boolean>(webApiAppRootSaveData, {\r\n      params: {\r\n        appid: this.appId,\r\n        zoneId: this.zoneId,\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n        withPortalFiles: withFiles.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","export function toBase64(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => {\r\n      resolve((reader.result as string).split(',')[1]);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n\r\nexport function toString(file: File): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsText(file);\r\n    reader.onload = () => {\r\n      resolve(reader.result as string);\r\n    };\r\n    reader.onerror = error => {\r\n      reject(error);\r\n    };\r\n  });\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\nconst webApiAppPartsGet = 'admin/appParts/get';\r\n@Injectable()\r\nexport class ExportAppPartsService extends HttpServiceBase {\r\n\r\n  getContentInfo(scope: string, initial: ContentInfo) {\r\n    return this.getSignal<ContentInfo>(webApiAppPartsGet, {\r\n      params: { appid: this.appId, zoneId: this.zoneId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.appId\r\n      + '&zoneId=' + this.zoneId\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, of, switchMap } from 'rxjs';\r\nimport { FileUploadMessageTypes, FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService extends HttpServiceBase {\r\n\r\n  importApp(file: File, changedName: string, retryOnDuplicate = false): Observable<FileUploadResult> {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ?? '');\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.zoneId }\r\n    }).pipe(\r\n      switchMap(result => {\r\n        if (retryOnDuplicate && result.Messages[0]?.MessageType === FileUploadMessageTypes.Warning) {\r\n          const folderName = prompt(result.Messages[0].Text + ' Would you like to install it using another folder name?');\r\n          if (folderName) {\r\n            return this.importApp(file, folderName, true);\r\n          }\r\n        }\r\n        return of(result);\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViews = 'admin/view/all';\r\nconst webApiViewDelete = 'admin/view/delete';\r\nconst webApiViewImport = 'admin/view/import';\r\nconst webApiViewPolymorph = 'admin/view/polymorphism';\r\nconst webApiViewUsage = 'admin/view/usage';\r\nconst webApiJson = 'admin/view/json';\r\n\r\n\r\n@Injectable()\r\nexport class ViewsService extends HttpServiceBase {\r\n\r\n  getAll() {\r\n    return this.getSignal<View[]>(webApiViews, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.getHttpApiUrl<boolean>(webApiViewDelete, {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.apiUrl(webApiJson)\r\n      + '?appId=' + this.appId\r\n      + '&viewId=' + id;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.getSignal<Polymorphism>(webApiViewPolymorph, {\r\n      params: { appId: this.appId }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.getSignal<ViewUsage[]>(webApiViewUsage, {\r\n      params: { appId: this.appId, guid }\r\n    });\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../helpers/copy-to-clipboard.helper';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  copyToClipboard(text: string): void {\r\n    copyToClipboard(text);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}","import { httpResource } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { classLog } from '../../shared/logging';\r\nimport { webApiEntityList } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst logSpecs = {\r\n  all: true,\r\n  getAll: false,\r\n  getAllSig: true,\r\n  getAllRes: true,\r\n  importQuery: false,\r\n  clonePipeline: false,\r\n  delete: false,  \r\n  update: false,\r\n};\r\n\r\nconst webApiQueryImport = 'admin/query/import';\r\nconst webApiQueryClone = 'admin/query/Clone';\r\nconst webApiQueryDelete = 'admin/query/Delete';\r\nexport const webApiQueryRun = 'admin/query/Run';\r\nexport const webApiQueryDebugStream = 'admin/query/DebugStream';\r\nexport const webApiQuerySave = 'admin/query/Save';\r\nexport const webApiQueryGet = 'admin/query/Get';\r\nexport const webApiQueryDataSources = 'admin/query/DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService extends HttpServiceBase {\r\n\r\n  log = classLog({ PipelinesService }, logSpecs);\r\n\r\n  getAll(contentType: string) {\r\n    const l = this.log.fnIf('getAll');\r\n    return l.r(this.getHttpApiUrl<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }));\r\n  }\r\n\r\n  getAllSig(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllSig');\r\n    const sig =  this.getSignal<Query[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType }\r\n    }, initial);\r\n    return l.r(sig);\r\n  }\r\n\r\n  /** Experimental httpResource use! */\r\n  getAllRes(contentType: string, initial?: Query[]) {\r\n    const l = this.log.fnIf('getAllRes');\r\n    const res = httpResource<Query[]>(() => ({\r\n      url: webApiEntityList,\r\n      params: { appId: this.appId, contentType },\r\n    }), { defaultValue: initial });\r\n    return l.r(res);\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    const l = this.log.fnIf('importQuery');\r\n    const obs = from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiQueryImport), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n    return l.r(obs);\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    const l = this.log.fnIf('clonePipeline');\r\n    const obs = this.getHttpApiUrl<null>(webApiQueryClone, {\r\n      params: { Id: id.toString(), appId: this.appId }\r\n    });\r\n    return l.r(obs);\r\n  }\r\n\r\n  delete(id: number) {\r\n    const l = this.log.fnIf('delete');\r\n    const obs = this.http.delete<boolean>(this.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.appId, Id: id.toString() },\r\n    });\r\n    return l.r(obs);\r\n  }\r\n}\r\n","import { computed, Injectable, Signal } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentType, ContentTypeEdit } from '../models/content-type.model';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\n\r\n// We should list all the \"full\" paths here, so it's easier to find when searching for API calls\r\nexport const webApiTypeRoot = 'admin/type/';\r\nconst webApiTypeGet = 'admin/type/get';\r\nconst webApiTypes = 'admin/type/list';\r\nconst webApiTypeScopes = 'admin/type/scopes';\r\nconst webApiTypeSave = 'admin/type/save';\r\nconst webApiTypeDelete = 'admin/type/delete';\r\nconst webApiTypeImport = 'admin/type/import';\r\nconst webApiTypeAddGhost = 'admin/type/addghost';\r\n\r\n@Injectable()\r\nexport class ContentTypesService extends HttpServiceBase {\r\n\r\n  retrieveContentType(nameId: string) {\r\n    return this.getHttpApiUrl<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    });\r\n  }\r\n\r\n  getTypeSig(nameId: string, initial: ContentType): Signal<ContentType> {\r\n    return this.getSignal<ContentType>(webApiTypeGet, {\r\n      params: { appId: this.appId, contentTypeId: nameId }\r\n    }, initial);\r\n  }\r\n\r\n  retrieveContentTypes(scope: string) {\r\n    return this.getHttpApiUrl<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    });\r\n  }\r\n\r\n  getTypesSig(scope: string, initial: ContentType[]): Signal<ContentType[]> {\r\n    return this.getSignal<ContentType[]>(webApiTypes, {\r\n      params: { appId: this.appId, scope }\r\n    }, initial);\r\n  }\r\n\r\n  // TODO: remove this method after upgrade to V2\r\n  getScopes() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => {\r\n        // wip during upgrade:\r\n        const scopes = scopesData.old;\r\n        const scopeOptions: ScopeOption[] = Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n        return scopeOptions;\r\n      }),\r\n    );\r\n  }\r\n\r\n  // todo: switch to using the GetSignal with `map` parameter similar to the initial version above\r\n  getScopesSig(initial: undefined): Signal<ScopeOption[]> {\r\n    const scopesSignal = this.getSignal<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(\r\n      webApiTypeScopes,\r\n      { params: { appId: this.appId } }, initial,\r\n    );\r\n\r\n    const scopeOptionsSignal = computed(() => {\r\n      const scopesData = scopesSignal();\r\n\r\n      // Add null/undefined check here\r\n      if (!scopesData || !scopesData.old) {\r\n        return []; // Return an empty array or handle this case as appropriate\r\n      }\r\n\r\n      const scopes = scopesData.old;\r\n      return Object.keys(scopes).map(key => ({ name: scopes[key], value: key }));\r\n    });\r\n\r\n    return scopeOptionsSignal;\r\n  }\r\n\r\n  getScopesV2() {\r\n    return this.getHttpApiUrl<{ old: Record<string, string>, scopes: ScopeDetailsDto[] }>(webApiTypeScopes, {\r\n      params: { appId: this.appId }\r\n    }).pipe(\r\n      map(scopesData => scopesData.scopes),\r\n    );\r\n  }\r\n\r\n  save(contentType: ContentTypeEdit) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeSave), contentType, {\r\n      params: { appid: this.appId },\r\n    });\r\n  }\r\n\r\n  delete(contentType: ContentType) {\r\n    return this.http.delete<boolean>(this.apiUrl(webApiTypeDelete), {\r\n      params: { appid: this.appId, staticName: contentType.NameId }, // TODO: @2pp - replace staticName with NameId\r\n    });\r\n  }\r\n\r\n  import(files: File[]) {\r\n    const formData = new FormData();\r\n    for (const file of files) {\r\n      formData.append('File', file);\r\n    }\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiTypeImport), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  createGhost(sourceNameId: string) {\r\n    return this.http.post<boolean>(this.apiUrl(webApiTypeAddGhost), null, {\r\n      params: { appid: this.appId, sourceNameId },\r\n    });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService extends HttpServiceBase {\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.appId, zoneId: this.zoneId }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp(withFiles: boolean) {\r\n    return this.http.post<FileUploadResult>(this.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: {\r\n        appId: this.appId,\r\n        zoneId: this.zoneId,\r\n        withPortalFiles: withFiles.toString(),\r\n      }\r\n    });\r\n  }\r\n}\r\n"],"x_google_ignoreList":[]}