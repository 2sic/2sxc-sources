{"version":3,"mappings":"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","names":["AppDialogConfigService","http","context","dnnContext","this","appId","get","$2sxc","apiUrl","webApiDialogRoot","params","toString","pipe","map","dialogSettings","Context","Language","List","filter","language","IsEnabled","m","i0","factory","ExportAppPartsService","scope","webApiAppPartsRoot","appid","zoneId","contentTypeIds","entityIds","templateIds","url","join","window","open","C","ExportAppService","webApiAppRoot","includeContentGroups","resetAppGuid","ImportAppPartsService","file","formData","FormData","append","post","webApiQueryRoot","webApiQueryRun","webApiQueryDebugStream","webApiQuerySave","webApiQueryGet","webApiQueryDataSources","PipelinesService","contentType","webApiEntityList","from","toBase64","mergeMap","G","AppId","ContentBase64","fileBase64","id","Id","delete","Q","ViewsService","webApiViewRoot","guid","M","EntityFilterComponent","idFilter","length","values","valueGetter","node","some","value","includes","i","item","r","data","colDef","headerName","_a","isFilterActive","filterType","model","e","_b","idFilterString","d","l","_c","_d","valueInputRef","nativeElement","focus","split","parseInt","el","isNaN","filterChangedCallback","s","selectors","ctx","ContentItemsActionsComponent","onClone","onExport","onDelete","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","entities","text","replace","ctx_r2","ContentItemsStatusComponent","readOnly","_EditInfo","ReadOnly","metadataCount","Metadata","metadataTooltip","For","Target","TargetType","Number","String","Guid","Title","onOpenMetadata","PubMetaFilterComponent","published","metadata","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","form","control","keyType","controls","testValue","eavConstants","test","patternWholeNumber","hasCurly","bracket","substring","guidRegex","patternGuid","ctx_r54","ctx_r56","ctx_r58","ctx_r60","ctx_r61","CreateMetadataDialogComponent","dialogRef","contentItemsService","contentTypesService","c","dropdownInsertValue","subscription","Subscription","targetTypeOptions","Object","option","keyTypeOptions","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","FormGroup","addControl","FormControl","Validators","metadataKeyValidator","add","scopeForContentTypes","valueChanges","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","name","concat","fetchContentTypes","merge","targetType","getRawValue","key","formValues","getAll","contentTypeStaticName","items","formValues$","GeneralHelpers","combineLatest","guidedMode","foundTargetType","find","updatedForm","isAppMetadata","keys","templateVars$","scopeOptions","contentItems","contentTypes","K","guidedKey","unknownTargetType","targetTypeHint","Y","hint","guidedKeyExists","complete","unsubscribe","result","close","event","checked","target","closeDialog","retrieveContentTypes","getScopes","scopes","ctx_r3","ContentItemsComponent","router","route","entitiesService","contentExportService","snackBar","globalConfigService","dialog","viewContainerRef","changeDetectorRef","getDebugEnabled$","AllCommunityModules","defaultGridOptions","frameworkComponents","pubMetaFilterComponent","booleanFilterComponent","BooleanFilterComponent","entityFilterComponent","idFieldComponent","IdFieldComponent","contentItemsStatusComponent","contentItemsActionsComponent","contentItemsEntityComponent","snapshot","paramMap","fetchContentType","fetchItems","fetchColumns","refreshOnChildClosed","contentType$","items$","gridApi$","api","retrieveContentType","getColumns","columnDefs","buildColumnDefs","columns","filterModel","urlFilters","filters","charAt","atob","JSON","parse","error","console","IsPublished","IsMetadata","n","Status","entries","forEach","h","columnDef","L","type","filterTo","N","undefined","v","buildFilterModel","sessionStorage","getItem","keyFilters","setColumnDefs","gridApi","take","consoleLogAngular","setFilterModel","GoToMetadata","_Title","navigate","relativeTo","formUrl","convertFormToUrl","ContentTypeName","EntityId","getFilterModel","hasFilters","ids","forEachNodeAfterFilterAndSort","push","rowNode","files","importFile","lastIndexOf","toLocaleLowerCase","ext","importContent","importItem","dialogData","state","autoFocus","width","afterClosed","itemFor","markForCheck","warn","duration","events","NavigationEnd","firstChild","pairwise","field","headerClass","cellClass","cellRenderer","sortable","cellRendererParams","tooltipGetter","_RepositoryId","valueGetterStatus","openMetadata","bind","flex","minWidth","onCellClicked","editItem","headerTooltip","valueGetterUsage","pinned","clone","export","column","StaticName","Type","DataTypeConstants","Entity","AllowMultiValue","valueGetterEntityField","useTimePicker","DateTime","UseTimePicker","valueGetterDateTime","valueGetterBoolean","O","DuplicateEntity","exportEntity","confirm","err","dismiss","ExceptionMessage","_Used","_Uses","rawValue","ImportAppService","changedName","FieldHintComponent","isShort","align","tooltip","copyToClipboard","I","ClickStopPropagationDirective","stopPropagation","g","ToggleDebugDirective","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","_","str","document","createElement","setAttribute","style","position","left","body","appendChild","selected","rangeCount","getRangeAt","select","execCommand","removeChild","addRange","SafeHtmlPipe","sanitizer","html","bypassSecurityTrustHtml","pure"],"sources":["./projects/ng-dialogs/src/app/app-administration/services/app-dialog-config.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/export-app.service.ts","./projects/ng-dialogs/src/app/app-administration/services/import-app-parts.service.ts","./projects/ng-dialogs/src/app/app-administration/services/pipelines.service.ts","./projects/ng-dialogs/src/app/app-administration/services/views.service.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/ng-dialogs/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-actions/content-items-actions.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-entity/content-items-entity.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.html","./projects/ng-dialogs/src/app/content-items/ag-grid-components/content-items-status/content-items-status.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.ts","./projects/ng-dialogs/src/app/content-items/ag-grid-components/pub-meta-filter/pub-meta-filter.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/ng-dialogs/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.component.html","./projects/ng-dialogs/src/app/content-items/content-items.component.ts","./projects/ng-dialogs/src/app/content-items/content-items.helpers.ts","./projects/ng-dialogs/src/app/import-app/services/import-app.service.ts","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.html","./projects/ng-dialogs/src/app/shared/components/field-hint/field-hint.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.ts","./projects/ng-dialogs/src/app/shared/components/id-field/id-field.component.html","./projects/ng-dialogs/src/app/shared/constants/guid.constants.ts","./projects/ng-dialogs/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/ng-dialogs/src/app/shared/directives/toggle-debug.directive.ts","./projects/ng-dialogs/src/app/shared/helpers/copy-to-clipboard.helper.ts","./projects/ng-dialogs/src/app/shared/pipes/safe-html.pipe.ts"],"sourcesContent":["import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { map } from 'rxjs';\r\nimport { Context } from '../../shared/services/context';\r\nimport { DialogSettings } from '../models/dialog-settings.model';\r\n\r\nconst webApiDialogRoot = 'admin/dialog/';\r\n\r\n@Injectable()\r\nexport class AppDialogConfigService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getDialogSettings(appId?: number) {\r\n    return this.http.get<DialogSettings>(this.dnnContext.$2sxc.http.apiUrl(webApiDialogRoot + 'settings'), {\r\n      params: { appId: appId ?? this.context.appId.toString() },\r\n    }).pipe(\r\n      map(dialogSettings => {\r\n        dialogSettings.Context.Language.List = dialogSettings.Context.Language.List.filter(language => language.IsEnabled);\r\n        return dialogSettings;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentInfo } from '../models/content-info.model';\r\nimport { webApiAppPartsRoot } from './import-app-parts.service';\r\n\r\n@Injectable()\r\nexport class ExportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getContentInfo(scope: string) {\r\n    return this.http.get<ContentInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Get'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString(), scope },\r\n    });\r\n  }\r\n\r\n  exportParts(contentTypeIds: number[], entityIds: number[], templateIds: number[]) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Export')\r\n      + '?appId=' + this.context.appId.toString()\r\n      + '&zoneId=' + this.context.zoneId.toString()\r\n      + '&contentTypeIdsString=' + contentTypeIds.join(';')\r\n      + '&entityIdsString=' + entityIds.join(';')\r\n      + '&templateIdsString=' + templateIds.join(';');\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\nimport { AppInfo } from '../models/app-info.model';\r\n\r\n@Injectable()\r\nexport class ExportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAppInfo() {\r\n    return this.http.get<AppInfo>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Statistics'), {\r\n      params: { appid: this.context.appId.toString(), zoneId: this.context.zoneId.toString() },\r\n    });\r\n  }\r\n\r\n  exportApp(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Export')\r\n      + '?appId=' + this.context.appId\r\n      + '&zoneId=' + this.context.zoneId\r\n      + '&includeContentGroups=' + includeContentGroups\r\n      + '&resetAppGuid=' + resetAppGuid;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportForVersionControl(includeContentGroups: boolean, resetAppGuid: boolean) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'SaveData'), {\r\n      params: {\r\n        appid: this.context.appId.toString(),\r\n        zoneId: this.context.zoneId.toString(),\r\n        includeContentGroups: includeContentGroups.toString(),\r\n        resetAppGuid: resetAppGuid.toString(),\r\n      },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { webApiAppRoot } from '../../import-app/services/import-app.service';\r\nimport { Context } from '../../shared/services/context';\r\n\r\nexport const webApiAppPartsRoot = 'admin/appParts/';\r\n\r\n@Injectable()\r\nexport class ImportAppPartsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importAppParts(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppPartsRoot + 'Import'), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  /** Reset the App back to the state it was in the last xml export */\r\n  resetApp() {\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Reset'), {}, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { from } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { webApiEntityList } from '../../../../../edit/shared/services';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Query } from '../models/query.model';\r\n\r\nconst webApiQueryRoot = 'admin/query/';\r\nconst webApiQueryImport = webApiQueryRoot + 'import';\r\nconst webApiQueryClone = webApiQueryRoot + 'Clone';\r\nconst webApiQueryDelete = webApiQueryRoot + 'Delete';\r\nexport const webApiQueryRun = webApiQueryRoot + 'Run';\r\nexport const webApiQueryDebugStream = webApiQueryRoot + 'DebugStream';\r\nexport const webApiQuerySave = webApiQueryRoot + 'Save';\r\nexport const webApiQueryGet = webApiQueryRoot + 'Get';\r\nexport const webApiQueryDataSources = webApiQueryRoot + 'DataSources';\r\n\r\n@Injectable()\r\nexport class PipelinesService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll(contentType: string) {\r\n    return this.http.get<Query[]>(this.dnnContext.$2sxc.http.apiUrl(webApiEntityList), {\r\n      params: { appId: this.context.appId.toString(), contentType }\r\n    });\r\n  }\r\n\r\n  importQuery(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      mergeMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryImport), {\r\n          AppId: this.context.appId.toString(),\r\n          ContentBase64: fileBase64,\r\n        });\r\n      })\r\n    );\r\n  }\r\n\r\n  clonePipeline(id: number) {\r\n    return this.http.get<null>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryClone), {\r\n      params: { Id: id.toString(), appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.delete<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiQueryDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ImportAppResult } from '../../import-app/models/import-app-result.model';\r\nimport { Context } from '../../shared/services/context';\r\nimport { Polymorphism } from '../models/polymorphism.model';\r\nimport { ViewUsage } from '../models/view-usage.model';\r\nimport { View } from '../models/view.model';\r\n\r\nconst webApiViewRoot = 'admin/view/';\r\nconst webApiViews = webApiViewRoot + 'all';\r\nconst webApiViewDelete = webApiViewRoot + 'delete';\r\nconst webApiViewImport = webApiViewRoot + 'import';\r\nconst webApiViewPolymorph = webApiViewRoot + 'polymorphism';\r\nconst webApiViewUsage = webApiViewRoot + 'usage';\r\n\r\n@Injectable()\r\nexport class ViewsService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  getAll() {\r\n    return this.http.get<View[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViews), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  delete(id: number) {\r\n    return this.http.get<boolean>(this.dnnContext.$2sxc.http.apiUrl(webApiViewDelete), {\r\n      params: { appId: this.context.appId.toString(), Id: id.toString() },\r\n    });\r\n  }\r\n\r\n  import(file: File) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiViewImport), formData, {\r\n      params: { appId: this.context.appId.toString(), zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n\r\n  export(id: number) {\r\n    const url = this.dnnContext.$2sxc.http.apiUrl(webApiViewRoot + 'json')\r\n      + '?appId=' + this.context.appId\r\n      + '&viewId=' + id;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  getPolymorphism() {\r\n    return this.http.get<Polymorphism>(this.dnnContext.$2sxc.http.apiUrl(webApiViewPolymorph), {\r\n      params: { appId: this.context.appId.toString() }\r\n    });\r\n  }\r\n\r\n  getUsage(guid: string) {\r\n    return this.http.get<ViewUsage[]>(this.dnnContext.$2sxc.http.apiUrl(webApiViewUsage), {\r\n      params: { appId: this.context.appId.toString(), guid }\r\n    });\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private params: IFilterParams;\r\n  private idFilter: number[];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const values: string[] | undefined = this.params.valueGetter(params.node);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const item: { Id: number; Title: string; } | undefined = params.data[this.params.colDef.headerName]?.[0];\r\n      if (item == null) { return false; }\r\n      if (!this.idFilter.includes(item.Id)) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field appearance=\"standard\" color=\"accent\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { ContentItemsActionsParams } from './content-items-actions.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  styleUrls: ['./content-items-actions.component.scss'],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  item: ContentItem;\r\n\r\n  private params: ContentItemsActionsParams;\r\n\r\n  constructor() { }\r\n\r\n  agInit(params: ContentItemsActionsParams) {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  clone() {\r\n    this.params.onClone(this.item);\r\n  }\r\n\r\n  export() {\r\n    this.params.onExport(this.item);\r\n  }\r\n\r\n  deleteItem() {\r\n    this.params.onDelete(this.item);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Copy\" (click)=\"clone()\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"Export\" (click)=\"export()\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"like-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <button mat-menu-item [disabled]=\"item._EditInfo.ReadOnly\" (click)=\"deleteItem()\">\r\n    <mat-icon>delete</mat-icon>\r\n    <span>Delete</span>\r\n  </button>\r\n</mat-menu>\r\n","<div [tippy]=\"encodedValue\">\r\n  <span *ngIf=\"entities\" class=\"more-entities\">{{ entities }}</span>\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererParams } from '@ag-grid-community/all-modules';\r\nimport { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../../models/extended-col-def.model';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) { return; }\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"like-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  <div class=\"like-button highlight\" matRipple *ngIf=\"!readOnly\"\r\n    [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\" [tippy]=\"metadataTooltip\"\r\n    (click)=\"openMetadata()\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n  <div class=\"like-button disabled\" *ngIf=\"readOnly && !(!metadataCount && !value.metadata)\">\r\n    <mat-icon [matBadge]=\"metadataCount\" matBadgeColor=\"accent\" matBadgeSize=\"small\" matBadgeDisabled=\"true\"\r\n      [matBadgeHidden]=\"!metadataCount\">\r\n      {{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n    </mat-icon>\r\n  </div>\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { ContentItem } from '../../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsStatusParams } from './content-items-status.models';\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  readOnly: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  private item: ContentItem;\r\n  private params: ContentItemsStatusParams;\r\n\r\n  agInit(params: ContentItemsStatusParams) {\r\n    this.value = params.value;\r\n    this.params = params;\r\n    this.item = params.data;\r\n    this.readOnly = this.item._EditInfo.ReadOnly;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    this.metadataTooltip = this.item.For\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${this.item.For.Target}`\r\n      + `\\nTargetType: ${this.item.For.TargetType}`\r\n      + (this.item.For.Number ? `\\nNumber: ${this.item.For.Number}` : '')\r\n      + (this.item.For.String ? `\\nString: ${this.item.For.String}` : '')\r\n      + (this.item.For.Guid ? `\\nGuid: ${this.item.For.Guid}` : '')\r\n      + (this.item.For.Title ? `\\nTitle: ${this.item.For.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  openMetadata() {\r\n    this.params.onOpenMetadata(this.item);\r\n  }\r\n}\r\n","import { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams } from '@ag-grid-community/all-modules';\r\nimport { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private params: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.params = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n    const value: PubMeta = this.params.valueGetter(params.node);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) { return; }\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.params.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","import { AbstractControl, FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { eavConstants, MetadataKeyType } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: FormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: MetadataKeyType = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","<ng-container *ngIf=\"templateVars$ | async as data\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">Create Metadata</div>\r\n  </div>\r\n\r\n  <p class=\"dialog-description\">\r\n    This is a special operation to add an item which is metadata for another item,\r\n    see <a href=\"http://r.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n  </p>\r\n\r\n  <form [formGroup]=\"form\" class=\"dialog-form\">\r\n    <div class=\"dialog-form-content fancy-scrollbar-light\">\r\n\r\n      <!-- Target Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Target</mat-label>\r\n\r\n        <mat-select *ngIf=\"data.guidedMode\" formControlName=\"targetType\" required>\r\n          <mat-option *ngFor=\"let option of targetTypeOptions\" [value]=\"option.targetType\">\r\n            {{ option.label }}\r\n          </mat-option>\r\n          <mat-option *ngIf=\"data.unknownTargetType\" [value]=\"data.formValues.targetType\">\r\n            {{ data.formValues.targetType }}\r\n          </mat-option>\r\n        </mat-select>\r\n\r\n        <input matInput type=\"number\" min=\"0\" *ngIf=\"!data.guidedMode\" formControlName=\"targetType\" required>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint\r\n        *ngIf=\"form.controls['targetType'].touched && !form.controls['targetType'].invalid && data.unknownTargetType\"\r\n        [isError]=\"false\">\r\n        Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"data.targetTypeHint\" [isError]=\"false\">{{ data.targetTypeHint }}</app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n\r\n      <!-- Key Type -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key type</mat-label>\r\n\r\n        <mat-select formControlName=\"keyType\" required>\r\n          <mat-option *ngFor=\"let option of data.keyTypeOptions\" [value]=\"option\">\r\n            {{ option }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['keyType'].touched && form.controls['keyType'].errors?.required\"\r\n        [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n\r\n      <!-- Content Type for Content Items -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && data.formValues.targetType === eavConstants.metadata.entity.targetType\">\r\n        <mat-label>Content Type</mat-label>\r\n\r\n        <mat-select formControlName=\"contentTypeForContentItems\"\r\n          [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n            {{ contentType.Label }}\r\n          </mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <!-- Scope for Content Types -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\"\r\n        *ngIf=\"data.guidedMode && (data.formValues.targetType === eavConstants.metadata.entity.targetType || data.formValues.targetType === eavConstants.metadata.contentType.targetType)\">\r\n        <mat-label>Scope</mat-label>\r\n\r\n        <mat-select formControlName=\"scopeForContentTypes\"\r\n          [placeholder]=\"!data.scopeOptions.length ? 'No items found' : ''\">\r\n          <mat-option *ngFor=\"let scopeOption of data.scopeOptions\" [value]=\"scopeOption.value\">\r\n            {{ scopeOption.name }}\r\n          </mat-option>\r\n          <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint>\r\n        The scope should almost never be changed -\r\n        <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n      </app-field-hint>\r\n\r\n      <!-- Key -->\r\n      <mat-form-field appearance=\"standard\" color=\"accent\">\r\n        <mat-label>Key</mat-label>\r\n\r\n        <ng-container *ngIf=\"data.guidedMode; then specialKeyInputs else defaultKeyInput\">\r\n        </ng-container>\r\n\r\n        <ng-template #specialKeyInputs>\r\n          <ng-container [ngSwitch]=\"data.formValues.targetType\">\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.entity.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentItems.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let item of data.contentItems\" [value]=\"item.Guid\">\r\n                  {{ item.Title }} ({{ item.Id }})\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchCase=\"eavConstants.metadata.contentType.targetType\">\r\n              <mat-select *ngIf=\"data.guidedKey\" formControlName=\"key\" required\r\n                [placeholder]=\"!data.contentTypes.length ? 'No items found' : ''\">\r\n                <mat-option *ngFor=\"let contentType of data.contentTypes\" [value]=\"contentType.StaticName\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              </mat-select>\r\n\r\n              <input matInput type=\"text\" *ngIf=\"!data.guidedKey\" formControlName=\"key\" required>\r\n            </ng-container>\r\n\r\n            <ng-container *ngSwitchDefault>\r\n              <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n            </ng-container>\r\n          </ng-container>\r\n        </ng-template>\r\n\r\n        <ng-template #defaultKeyInput>\r\n          <input matInput type=\"text\" *ngIf=\"data.formValues.keyType !== eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n          <input matInput type=\"number\" *ngIf=\"data.formValues.keyType === eavConstants.keyTypes.number\"\r\n            formControlName=\"key\" required>\r\n        </ng-template>\r\n\r\n        <div matSuffix class=\"selection-suffix\" *ngIf=\"data.guidedMode && data.guidedKeyExists\">\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': data.guidedKey }\" tippy=\"Pick existing value\"\r\n            (click)=\"toggleGuidedKey(true)\">\r\n            <mat-icon>search</mat-icon>\r\n          </button>\r\n          <button mat-icon-button type=\"button\" [ngClass]=\"{ 'active': !data.guidedKey }\" tippy=\"Manual entry\"\r\n            (click)=\"toggleGuidedKey(false)\">\r\n            <mat-icon>text_fields</mat-icon>\r\n          </button>\r\n        </div>\r\n      </mat-form-field>\r\n\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.required\" [isError]=\"true\">\r\n        This field is required\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber\"\r\n        [isError]=\"true\">\r\n        Must be a whole number\r\n      </app-field-hint>\r\n      <app-field-hint *ngIf=\"form.controls['key'].touched && form.controls['key'].errors?.patternGuid\" [isError]=\"true\">\r\n        Must be a valid GUID\r\n      </app-field-hint>\r\n    </div>\r\n\r\n    <div class=\"dialog-form-actions\">\r\n      <mat-slide-toggle color=\"accent\"\r\n        [tippy]=\"data.guidedMode ? 'Guided mode helps you select options that work' : 'Manual mode is for advanced uses and allows you to insert any values'\"\r\n        [checked]=\"data.guidedMode\" (change)=\"toggleGuidedMode($event)\">\r\n        {{ data.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div class=\"spacer\"></div>\r\n      <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n      <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">\r\n        Confirm\r\n      </button>\r\n    </div>\r\n  </form>\r\n</ng-container>\r\n","import { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSlideToggleChange } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, merge, Observable, Subscription } from 'rxjs';\r\nimport { distinctUntilChanged, map, startWith } from 'rxjs/operators';\r\nimport { GeneralHelpers } from '../../../../../edit/shared/helpers';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyType, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogTemplateVars, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  styleUrls: ['./create-metadata-dialog.component.scss']\r\n})\r\nexport class CreateMetadataDialogComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: FormGroup;\r\n  templateVars$: Observable<MetadataDialogTemplateVars>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: MetadataKeyType[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<MetadataKeyType[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n  private subscription: Subscription;\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n    private contentItemsService: ContentItemsService,\r\n    private contentTypesService: ContentTypesService,\r\n  ) { }\r\n\r\n  ngOnInit(): void {\r\n    this.subscription = new Subscription();\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<MetadataKeyType[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new FormGroup({});\r\n    this.form.addControl('targetType', new FormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new FormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new FormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new FormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new FormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscription.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscription.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscription.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      distinctUntilChanged(GeneralHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscription.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!GeneralHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value)) {\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n        }\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType)) {\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n        }\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId) {\r\n          updatedForm.key = this.context.appId;\r\n        }\r\n\r\n        if (Object.keys(updatedForm).length) {\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        GeneralHelpers.disableControl(this.form.controls['keyType'], keyTypeDisabled);\r\n        GeneralHelpers.disableControl(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.templateVars$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const templateVars: MetadataDialogTemplateVars = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return templateVars;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialogRef.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","<div appToggleDebug class=\"nav-component-wrapper\">\r\n  <div mat-dialog-title>\r\n    <div class=\"dialog-title-box\">\r\n      <div>{{ (contentType$ | async)?.Name }} Data</div>\r\n      <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n\r\n  <router-outlet></router-outlet>\r\n\r\n  <div *ngIf=\"(contentType$ | async)?.Properties?.ListInstructions as listInstructions\"\r\n    [innerHTML]=\"listInstructions | safeHtml\">\r\n  </div>\r\n\r\n  <div class=\"grid-wrapper\">\r\n    <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"items$ | async\" [modules]=\"modules\"\r\n      [gridOptions]=\"gridOptions\" (gridReady)=\"onGridReady($event)\" appDragAndDrop [allowedFileTypes]=\"'xml,json'\"\r\n      (filesDropped)=\"filesDropped($event)\">\r\n    </ag-grid-angular>\r\n\r\n    <div class=\"grid-more-actions-box\">\r\n      <button mat-button tippy=\"Export xml list\" (click)=\"exportContent()\">\r\n        <mat-icon>cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import xml list\" (click)=\"importContent()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </button>\r\n      <button mat-button tippy=\"Import single json item\" (click)=\"importItem()\">\r\n        <mat-icon>cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </button>\r\n      <button mat-button tippy=\"Create metadata\" (click)=\"createMetadata()\">\r\n        <mat-icon>local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      <button mat-button color=\"accent\" tippy=\"Print filter to console\" *ngIf=\"debugEnabled$ | async\"\r\n        (click)=\"debugFilter()\">\r\n        <mat-icon>filter_list</mat-icon>\r\n        <span>Filter</span>\r\n      </button>\r\n    </div>\r\n\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\" (click)=\"editItem(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AllCommunityModules, CellClickedEvent, ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/all-modules';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, OnDestroy, OnInit, ViewContainerRef } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router } from '@angular/router';\r\nimport { BehaviorSubject, Subscription } from 'rxjs';\r\nimport { filter, map, pairwise, startWith, take } from 'rxjs/operators';\r\nimport { GlobalConfigService } from '../../../../edit/shared/store/ngrx-data';\r\nimport { ContentType } from '../app-administration/models/content-type.model';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../content-import/content-import-dialog.config';\r\nimport { DataTypeConstants } from '../content-type-fields/constants/data-type.constants';\r\nimport { Field } from '../content-type-fields/models/field.model';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { IdFieldComponent } from '../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { eavConstants } from '../shared/constants/eav.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { consoleLogAngular } from '../shared/helpers/console-log-angular.helper';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../shared/models/edit-form.model';\r\nimport { ContentItemsActionsComponent } from './ag-grid-components/content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './ag-grid-components/content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './ag-grid-components/content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './ag-grid-components/content-items-status/content-items-status.component';\r\nimport { ContentItemsStatusParams } from './ag-grid-components/content-items-status/content-items-status.models';\r\nimport { PubMetaFilterComponent } from './ag-grid-components/pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemImportDialogData } from './content-item-import/content-item-import-dialog.config';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\nimport { EntitiesService } from './services/entities.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  styleUrls: ['./content-items.component.scss'],\r\n})\r\nexport class ContentItemsComponent implements OnInit, OnDestroy {\r\n  contentType$ = new BehaviorSubject<ContentType>(null);\r\n  items$ = new BehaviorSubject<ContentItem[]>(null);\r\n  debugEnabled$ = this.globalConfigService.getDebugEnabled$();\r\n\r\n  modules = AllCommunityModules;\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    frameworkComponents: {\r\n      pubMetaFilterComponent: PubMetaFilterComponent,\r\n      booleanFilterComponent: BooleanFilterComponent,\r\n      entityFilterComponent: EntityFilterComponent,\r\n      idFieldComponent: IdFieldComponent,\r\n      contentItemsStatusComponent: ContentItemsStatusComponent,\r\n      contentItemsActionsComponent: ContentItemsActionsComponent,\r\n      contentItemsEntityComponent: ContentItemsEntityComponent,\r\n    },\r\n  };\r\n\r\n  private gridApi$ = new BehaviorSubject<GridApi>(null);\r\n  private contentTypeStaticName = this.route.snapshot.paramMap.get('contentTypeStaticName');\r\n  private subscription = new Subscription();\r\n\r\n  constructor(\r\n    private dialogRef: MatDialogRef<ContentItemsComponent>,\r\n    private contentTypesService: ContentTypesService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private contentItemsService: ContentItemsService,\r\n    private entitiesService: EntitiesService,\r\n    private contentExportService: ContentExportService,\r\n    private snackBar: MatSnackBar,\r\n    private globalConfigService: GlobalConfigService,\r\n    private dialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n    this.fetchContentType();\r\n    this.fetchItems();\r\n    this.fetchColumns();\r\n    this.refreshOnChildClosed();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentType$.complete();\r\n    this.items$.complete();\r\n    this.gridApi$.complete();\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialogRef.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.gridApi$.next(params.api);\r\n  }\r\n\r\n  private fetchContentType() {\r\n    this.contentTypesService.retrieveContentType(this.contentTypeStaticName).subscribe(contentType => {\r\n      this.contentType$.next(contentType);\r\n    });\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.contentItemsService.getAll(this.contentTypeStaticName).subscribe(items => {\r\n      this.items$.next(items);\r\n    });\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.contentItemsService.getColumns(this.contentTypeStaticName).subscribe(columns => {\r\n      const columnDefs = this.buildColumnDefs(columns);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.gridApi$.value) {\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n      } else {\r\n        this.gridApi$.pipe(\r\n          filter(gridApi => gridApi != null), // firefox does web requests faster than drawing grid and getting gridApi\r\n          take(1),\r\n        ).subscribe(gridApi => {\r\n          this.setColumnDefs(columnDefs, filterModel);\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.gridApi$.value.setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      consoleLogAngular('Will try to apply filter:', filterModel);\r\n      this.gridApi$.value.setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  openMetadata(item: ContentItem) {\r\n    const url = GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.contentTypeStaticName,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route });\r\n  }\r\n\r\n  editItem(params: CellClickedEvent) {\r\n    const item: ContentItem = params?.data;\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? { ContentTypeName: this.contentTypeStaticName }\r\n          : { EntityId: item.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  exportContent() {\r\n    const filterModel = this.gridApi$.value.getFilterModel();\r\n    const hasFilters = Object.keys(filterModel).length > 0;\r\n    const ids: number[] = [];\r\n    if (hasFilters) {\r\n      this.gridApi$.value.forEachNodeAfterFilterAndSort(rowNode => {\r\n        ids.push((rowNode.data as ContentItem).Id);\r\n      });\r\n    }\r\n    this.router.navigate([`export/${this.contentTypeStaticName}${ids.length > 0 ? `/${ids}` : ''}`], { relativeTo: this.route });\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.importContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importContent(files?: File[]) {\r\n    const dialogData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${this.contentTypeStaticName}/import`], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: ContentItemImportDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route, state: dialogData });\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.dialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) { return; }\r\n\r\n      const form: EditForm = {\r\n        items: [{\r\n          ContentTypeName: this.contentTypeStaticName,\r\n          For: {\r\n            Target: itemFor.target ?? itemFor.targetType.toString(),\r\n            TargetType: itemFor.targetType,\r\n            ...(itemFor.keyType === eavConstants.keyTypes.guid && { Guid: itemFor.key }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.number && { Number: parseInt(itemFor.key, 10) }),\r\n            ...(itemFor.keyType === eavConstants.keyTypes.string && { String: itemFor.key }),\r\n          },\r\n        }],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.gridApi$.value.getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  private refreshOnChildClosed() {\r\n    this.subscription.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        startWith(!!this.route.snapshot.firstChild),\r\n        map(() => !!this.route.snapshot.firstChild),\r\n        pairwise(),\r\n        filter(([hadChild, hasChild]) => hadChild && !hasChild),\r\n      ).subscribe(() => {\r\n        this.fetchItems();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        headerName: 'ID', field: 'Id', width: 70, headerClass: 'dense',\r\n        cellClass: (params) => `${(params.data as ContentItem)._EditInfo.ReadOnly ? 'disabled' : ''} id-action no-padding no-outline`,\r\n        cellRenderer: 'idFieldComponent', sortable: true, filter: 'agNumberColumnFilter',\r\n        cellRendererParams: {\r\n          tooltipGetter: (item: ContentItem) => `ID: ${item.Id}\\nRepoID: ${item._RepositoryId}\\nGUID: ${item.Guid}`,\r\n        } as IdFieldParams,\r\n      },\r\n      {\r\n        headerName: 'Status', field: 'Status', width: 82, headerClass: 'dense', cellClass: 'secondary-action no-padding',\r\n        filter: 'pubMetaFilterComponent', cellRenderer: 'contentItemsStatusComponent', valueGetter: this.valueGetterStatus,\r\n        cellRendererParams: {\r\n          onOpenMetadata: this.openMetadata.bind(this),\r\n        } as ContentItemsStatusParams,\r\n      },\r\n      {\r\n        headerName: 'Item (Entity)', field: '_Title', flex: 2, minWidth: 250, cellClass: 'primary-action highlight',\r\n        sortable: true, filter: 'agTextColumnFilter', onCellClicked: this.editItem.bind(this),\r\n      },\r\n      {\r\n        headerName: 'Stats', headerTooltip: 'Used by others / uses others',\r\n        field: '_Used', width: 70, headerClass: 'dense', cellClass: 'no-outline',\r\n        sortable: true, filter: 'agTextColumnFilter', valueGetter: this.valueGetterUsage,\r\n      },\r\n      {\r\n        cellClass: 'secondary-action no-padding', width: 122, cellRenderer: 'contentItemsActionsComponent', pinned: 'right',\r\n        cellRendererParams: {\r\n          onClone: this.clone.bind(this),\r\n          onExport: this.export.bind(this),\r\n          onDelete: this.delete.bind(this),\r\n        } as ContentItemsActionsParams,\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName, field: column.StaticName, flex: 2, minWidth: 250, cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeConstants.Entity:\r\n          try {\r\n            colDef.allowMultiValue = column.Metadata.Entity.AllowMultiValue;\r\n          } catch (e) {\r\n            colDef.allowMultiValue = true;\r\n          }\r\n          colDef.cellRenderer = 'contentItemsEntityComponent';\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = 'entityFilterComponent';\r\n          break;\r\n        case DataTypeConstants.DateTime:\r\n          try {\r\n            colDef.useTimePicker = column.Metadata.DateTime.UseTimePicker;\r\n          } catch (e) {\r\n            colDef.useTimePicker = false;\r\n          }\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeConstants.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = 'booleanFilterComponent';\r\n          break;\r\n        case DataTypeConstants.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  private clone(item: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: this.contentTypeStaticName, DuplicateEntity: item.Id }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route });\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.contentExportService.exportEntity(item.Id, this.contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.entitiesService.delete(this.contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterStatus(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    const published: PubMeta = {\r\n      published: item.IsPublished,\r\n      metadata: !!item.For,\r\n      hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n    };\r\n    return published;\r\n  }\r\n\r\n  private valueGetterUsage(params: ValueGetterParams) {\r\n    const item: ContentItem = params.data;\r\n    return `${item._Used} / ${item._Uses}`;\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/all-modules';\r\nimport { GeneralHelpers } from '../../../../edit/shared/helpers';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { PubMetaFilterModel } from './ag-grid-components/pub-meta-filter/pub-meta-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) { return; }\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) { return; }\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === 'entityFilterComponent') {\r\n        value = GeneralHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Context as DnnContext } from '@2sic.com/dnn-sxc-angular';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ImportAppResult } from '../models/import-app-result.model';\r\n\r\nexport const webApiAppRoot = 'admin/app/';\r\n\r\n@Injectable()\r\nexport class ImportAppService {\r\n  constructor(private http: HttpClient, private context: Context, private dnnContext: DnnContext) { }\r\n\r\n  importApp(file: File, changedName: string) {\r\n    const formData = new FormData();\r\n    formData.append('File', file);\r\n    formData.append('Name', changedName ? changedName : '');\r\n    return this.http.post<ImportAppResult>(this.dnnContext.$2sxc.http.apiUrl(webApiAppRoot + 'Import'), formData, {\r\n      params: { zoneId: this.context.zoneId.toString() }\r\n    });\r\n  }\r\n}\r\n","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\" [ngSwitch]=\"isError\">\r\n  <mat-hint *ngSwitchCase=\"false\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-hint>\r\n\r\n  <mat-error *ngSwitchCase=\"true\">\r\n    <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n  </mat-error>\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n})\r\nexport class FieldHintComponent {\r\n  @Input() isError = false;\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { Component } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { copyToClipboard } from '../../helpers/copy-to-clipboard.helper';\r\nimport { IdFieldParams } from './id-field.models';\r\n\r\n@Component({\r\n  selector: 'app-id-field',\r\n  templateUrl: './id-field.component.html',\r\n  styleUrls: ['./id-field.component.scss'],\r\n})\r\nexport class IdFieldComponent implements ICellRendererAngularComp {\r\n  id: number | string;\r\n  align: 'start' | 'end';\r\n  tooltip: string;\r\n\r\n  constructor(private snackBar: MatSnackBar) { }\r\n\r\n  agInit(params: IdFieldParams) {\r\n    this.id = params.value;\r\n    this.align = typeof this.id === 'number' ? 'end' : 'start';\r\n    this.tooltip = params.tooltipGetter(params.data);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  copy() {\r\n    copyToClipboard(this.tooltip);\r\n    this.snackBar.open('Copied to clipboard', null, { duration: 2000 });\r\n  }\r\n}\r\n","<div matRipple class=\"id-box highlight\" [tippy]=\"tooltip\" (click)=\"copy()\" [ngClass]=\"{\r\n  'align-start': align === 'start',\r\n  'align-end': align === 'end'\r\n}\">\r\n  <span class=\"id\">{{ id }}</span>\r\n  <mat-icon class=\"icon\">file_copy</mat-icon>\r\n</div>\r\n","/**\r\n * Do not reuse regex:\r\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test#using_test_on_a_regex_with_the_global_flag\r\n */\r\nexport function guidRegex(): RegExp {\r\n  return /^[a-f0-9]{8}(?:-[a-f0-9]{4}){3}-[a-f0-9]{12}$/i;\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\n\r\n@Directive({ selector: '[appClickStopPropagation]' })\r\nexport class ClickStopPropagationDirective {\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    event.stopPropagation();\r\n  }\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../../../../../edit/shared/store/ngrx-data';\r\n\r\n@Directive({ selector: '[appToggleDebug]' })\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","/** https://hackernoon.com/copying-text-to-clipboard-with-javascript-df4d4988697f */\r\nexport function copyToClipboard(str: string) {\r\n  const el = document.createElement('textarea');  // Create a <textarea> element\r\n  el.value = str;                                 // Set its value to the string that you want copied\r\n  el.setAttribute('readonly', '');                // Make it readonly to be tamper-proof\r\n  el.style.position = 'absolute';\r\n  el.style.left = '-9999px';                      // Move outside the screen to make it invisible\r\n  document.body.appendChild(el);                  // Append the <textarea> element to the HTML document\r\n  const selected =\r\n    document.getSelection().rangeCount > 0        // Check if there is any content selected previously\r\n      ? document.getSelection().getRangeAt(0)     // Store selection if found\r\n      : false;                                    // Mark as false to know no selection existed before\r\n  el.select();                                    // Select the <textarea> content\r\n  document.execCommand('copy');                   // Copy - only works as a result of a user action (e.g. click events)\r\n  document.body.removeChild(el);                  // Remove the <textarea> element\r\n  if (selected) {                                 // If a selection existed before copying\r\n    document.getSelection().removeAllRanges();    // Unselect everything on the HTML document\r\n    document.getSelection().addRange(selected);   // Restore the original selection\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\n\r\n@Pipe({ name: 'safeHtml' })\r\nexport class SafeHtmlPipe implements PipeTransform {\r\n\r\n  constructor(private sanitizer: DomSanitizer) { }\r\n\r\n  transform(html: string) {\r\n    return this.sanitizer.bypassSecurityTrustHtml(html);\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"projects_ng-dialogs_src_app_content-items_content-items_component_ts.38a4831d2d586e69.js"}