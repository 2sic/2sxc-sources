{"version":3,"file":"projects_eav-ui_src_app_app-administration_data_data_component_ts.f703d669b1300121.js","mappings":"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","names":["i0","_r1","ctx_r1","do","_r3","contentType","Metadata","length","_r4","Permissions","Count","_r5","EditInfo","DisableRename","DisableDelete","DataActionsComponent","agInit","params","this","data","enablePermissions","enablePermissionsGetter","guidRegex","test","StaticName","refresh","verb","static","t","core","VBU","selectors","standalone","features","decls","vars","consts","template","rf","ctx","DataActionsComponent_Conditional_1_Template","DataActionsComponent_Conditional_2_Template","DataActionsComponent_Conditional_3_Template","DataActionsComponent_Conditional_4_Template","DataActionsComponent_Conditional_5_Template","DataActionsComponent_Conditional_6_Template","DataActionsComponent_ng_template_12_Template","DisableEdit","Properties","DisableMetadata","menu_r6","MatRippleModule","i1","MatIconModule","i2","MatBadgeModule","i3","MatMenuModule","i4","DataFieldsComponent","value","tooltip","ReadOnly","ReadOnlyMessage","SharedDefId","icon","editFields","onEditFields","TippyDirective","DataItemsComponent","showItems","onShowItems","addItem","onAddItem","styles","scopeOption_r3","name","label","createGhost","$event","filesDropped","changeScope","DataComponent_Conditional_0_For_7_Template","importType","DataComponent_Conditional_0_Conditional_15_Template","editContentType","vm_r5","contentTypes","gridOptions","scope","scopeOptions","dropdownInsertValue","isDebug","DataComponent","BaseWithChildDialogComponent","constructor","router","route","snackBar","dialogConfigSvc","super","contentTypesService","transient","ContentTypesService","contentExportService","ContentExportService","contentTypes$","BehaviorSubject","undefined","scope$","scopeOptions$","buildGridOptions","viewModel$","combineLatest","pipe","map","inject","GlobalConfigService","ngOnInit","fetchScopes","refreshScopeOnRouteChange","subscriptions","add","childDialogClosed$","subscribe","fetchContentTypes","getCurrent$","Context","Enable","AppPermissions","ngOnDestroy","complete","files","importFile","substring","lastIndexOf","toLocaleLowerCase","from","toString","take","fileString","contentTypeName","split","find","ct","Name","openDataImport","open","duration","navigate","relativeTo","parent","firstChild","state","showContentItems","retrieveContentTypes","_compareLabel","Label","replace","RegExp","next","eavConstants","scopes","default","getScopesV2","scopeList","manual","filter","sOld","sNew","withNiceLabel","s","countInfo","typesInherited","typesTotal","sourceName","window","prompt","res","newScope","console","log","formUrl","convertFormToUrl","items","ContentTypeName","createOrEditMetadata","EntityId","Id","For","Target","metadata","target","TargetType","targetType","String","Prefill","Description","openMetadata","url","GoToMetadata","getUrlContentType","openRestApi","GoToDevRest","getUrlData","exportType","exportJson","openDataExport","openPermissions","GoToPermissions","deleteContentType","confirm","delete","result","events","event","NavigationEnd","snapshot","paramMap","get","startWith","mapUntilChanged","m","option","includes","typesOfApp","defaultGridOptions","columnDefs","ColumnDefinitions","cellRenderer","IdFieldComponent","cellRendererParams","tooltipGetter","TextWideType","headerName","field","sort","onCellClicked","comparator","valueA","valueB","nodeA","nodeB","isInverted","localeCompare","Items","Fields","TextWideMin100","cellClass","valueGetter","TextWideFlex3","ActionsPinnedRight4","DataComponent_Conditional_0_Template","tmp_0_0","MatDialogActions","MatFormFieldModule","MatSelectModule","i5","i6","FormsModule","i7","MatOptionModule","MatButtonModule","i8","i9","RouterOutlet","AsyncPipe","SxcGridModule","i10","DragAndDropDirective","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵfac","ɵcmp","type","encapsulation","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","indexOf","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","nativeElement","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","Array","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hostVars","hostBindings","hidden","disabled","inputs","None","HasDecoratorInputTransform","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.html","./projects/eav-ui/src/app/app-administration/data/data-actions/data-actions.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.ts","./projects/eav-ui/src/app/app-administration/data/data-fields/data-fields.component.html","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.ts","./projects/eav-ui/src/app/app-administration/data/data-items/data-items.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.html","./projects/eav-ui/src/app/app-administration/data/data.component.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["<div class=\"actions-component\">\r\n  @if (!contentType.EditInfo.DisableEdit || contentType.Properties) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Description and more\"\r\n      (click)=\"do('createUpdateMetaData')\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableEdit && !contentType.Properties) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon>edit</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Metadata\"\r\n      (click)=\"do('openMetadata')\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableMetadata) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Metadata.length\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Metadata.length\" aria-hidden=\"false\">\r\n        local_offer\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n\r\n  @if (!contentType.EditInfo.DisableEdit && enablePermissions) {\r\n    <div class=\"eav-grid-action-button highlight\" matRipple\r\n      tippy=\"Permissions\" (click)=\"do('openPermissions')\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" [matBadgeHidden]=\"!contentType.Permissions.Count\" aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </div>\r\n  }\r\n  @if (contentType.EditInfo.DisableEdit || !enablePermissions) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon [matBadge]=\"contentType.Permissions.Count\" matBadgePosition=\"below after\" matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\" matBadgeDisabled=\"true\" [matBadgeHidden]=\"!contentType.Permissions.Count\"\r\n        aria-hidden=\"false\">\r\n      person</mat-icon>\r\n    </div>\r\n  }\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableRename\" (click)=\"do('editContentType')\">\r\n      <mat-icon>settings</mat-icon>\r\n      <span>Rename</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('openRestApi')\">\r\n      <mat-icon svgIcon=\"code-curly\"></mat-icon>\r\n      <span>REST API</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('typeExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export content type</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('dataExport')\">\r\n      <mat-icon>cloud_download</mat-icon>\r\n      <span>Export data</span>\r\n    </button>\r\n    <button mat-menu-item (click)=\"do('dataImport')\">\r\n      <mat-icon>cloud_upload</mat-icon>\r\n      <span>Import data</span>\r\n    </button>\r\n    <button mat-menu-item [disabled]=\"contentType.EditInfo.DisableDelete\" (click)=\"do('deleteContentType')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { guidRegex } from '../../../shared/constants/guid.constants';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { DataActionsParams, DataActionType } from './data-actions.models';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-data-actions',\r\n  templateUrl: './data-actions.component.html',\r\n  styleUrls: ['./data-actions.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    MatMenuModule,\r\n  ],\r\n})\r\nexport class DataActionsComponent implements ICellRendererAngularComp {\r\n  contentType: ContentType;\r\n  enablePermissions: boolean;\r\n  private params: ICellRendererParams & DataActionsParams;\r\n\r\n  agInit(params: ICellRendererParams & DataActionsParams): void {\r\n    this.params = params;\r\n    this.contentType = this.params.data;\r\n    const enablePermissions = this.params.enablePermissionsGetter();\r\n    this.enablePermissions = enablePermissions && guidRegex().test(this.contentType.StaticName);\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: DataActionType): void {\r\n    this.params.do(verb, this.contentType);\r\n  }\r\n\r\n}\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentType } from '../../models/content-type.model';\r\nimport { DataFieldsParams } from './data-fields.models';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-data-fields',\r\n  templateUrl: './data-fields.component.html',\r\n  styleUrls: ['./data-fields.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataFieldsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  tooltip: string;\r\n  icon: string;\r\n\r\n  private params: ICellRendererParams & DataFieldsParams;\r\n  private contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataFieldsParams): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n    this.tooltip = !this.contentType.EditInfo.ReadOnly\r\n      ? 'Edit fields'\r\n      : `${this.contentType.EditInfo.ReadOnlyMessage ? `${this.contentType.EditInfo.ReadOnlyMessage}\\n\\n` : ''}This ContentType shares the definition of #${this.contentType.SharedDefId} so you can't edit it here. Read 2sxc.org/help?tag=shared-types`;\r\n    this.icon = !this.contentType.EditInfo.ReadOnly ? 'dns' : 'share';\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  editFields(): void {\r\n    this.params.onEditFields(this.contentType);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple [tippy]=\"tooltip\" (click)=\"editFields()\">\r\n    <mat-icon [matBadge]=\"value\" matBadgePosition=\"below after\" matBadgeColor=\"accent\" matBadgeSize=\"small\"\r\n      [matBadgeHidden]=\"!value\" aria-hidden=\"false\">\r\n      {{icon}}\r\n    </mat-icon>\r\n  </div>\r\n</div>","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ContentType } from '../../models';\r\nimport { DataItemsParams } from './data-items.models';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-data-items',\r\n  templateUrl: './data-items.component.html',\r\n  styleUrls: ['./data-items.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class DataItemsComponent implements ICellRendererAngularComp {\r\n  value: number;\r\n  private params: DataItemsParams;\r\n  private contentType: ContentType;\r\n\r\n  agInit(params: ICellRendererParams & DataItemsParams): void {\r\n    this.params = params;\r\n    this.contentType = params.data;\r\n    this.value = params.value;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  showItems(): void {\r\n    this.params.onShowItems(this.contentType);\r\n  }\r\n\r\n  addItem(): void {\r\n    this.params.onAddItem(this.contentType);\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"{{ value }} items\" (click)=\"showItems()\">\r\n    <div class=\"text-icon\">{{ value }}</div>\r\n  </div>\r\n\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Add item\" (click)=\"addItem()\">\r\n    <mat-icon>add</mat-icon>\r\n  </div>\r\n</div>","@if (viewModel$ | async; as vm) {\r\n<div class=\"grid-wrapper mat-tab-grid-wrapper\">\r\n  <ag-grid-angular class=\"ag-theme-material\" [rowData]=\"vm.contentTypes\" [gridOptions]=\"gridOptions\" appDragAndDrop\r\n    [allowedFileTypes]=\"'xml,json'\" (filesDropped)=\"filesDropped($event)\">\r\n  </ag-grid-angular>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <mat-form-field color=\"accent\" class=\"eav-mat-form-field eav-scope-dropdown\">\r\n        <mat-select [ngModel]=\"vm.scope\" name=\"Scope\" (ngModelChange)=\"changeScope($event)\">\r\n          @for (scopeOption of (vm.scopeOptions); track scopeOption) {\r\n          <mat-option [value]=\"scopeOption.name\">\r\n            {{ 'Scope: ' + scopeOption.label }}\r\n          </mat-option>\r\n          }\r\n          <mat-option [value]=\"dropdownInsertValue\">Scope: Other...</mat-option>\r\n        </mat-select>\r\n      </mat-form-field>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Import content type\" (click)=\"importType()\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Content Type</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n      <button mat-button class=\"eav-button__with-icon\" color=\"accent\" tippy=\"Create a ghost content type\"\r\n        (click)=\"createGhost()\">\r\n        <mat-icon class=\"eav-icon\">share</mat-icon>\r\n        <span>Ghost</span>\r\n      </button>\r\n      }\r\n    </div>\r\n    <button mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Create a new content type\"\r\n      (click)=\"editContentType(null)\">\r\n      <mat-icon>add</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n}\r\n<router-outlet></router-outlet>\r\n","import { GridOptions } from '@ag-grid-community/core';\r\nimport { Component, inject, OnDestroy, OnInit } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { ActivatedRoute, NavigationEnd, Router, RouterOutlet } from '@angular/router';\r\nimport { BehaviorSubject, combineLatest, filter, from, map, startWith, take } from 'rxjs';\r\nimport { ContentExportService } from '../../content-export/services/content-export.service';\r\nimport { ContentImportDialogData } from '../../content-import/content-import-dialog.config';\r\nimport { GoToDevRest } from '../../dev-rest/go-to-dev-rest';\r\nimport { GoToMetadata } from '../../metadata';\r\nimport { GoToPermissions } from '../../permissions/go-to-permissions';\r\nimport { BaseWithChildDialogComponent } from '../../shared/components/base-with-child-dialog.component';\r\nimport { FileUploadDialogData } from '../../shared/components/file-upload-dialog';\r\nimport { IdFieldComponent } from '../../shared/components/id-field/id-field.component';\r\nimport { IdFieldParams } from '../../shared/components/id-field/id-field.models';\r\nimport { defaultGridOptions } from '../../shared/constants/default-grid-options.constants';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants } from '../../shared/constants/eav.constants';\r\nimport { toString } from '../../shared/helpers/file-to-base64.helper';\r\nimport { convertFormToUrl } from '../../shared/helpers/url-prep.helper';\r\nimport { EditForm } from '../../shared/models/edit-form.model';\r\nimport { ContentType } from '../models/content-type.model';\r\nimport { ContentTypesService } from '../services/content-types.service';\r\nimport { DataActionsComponent } from './data-actions/data-actions.component';\r\nimport { DataActionsParams } from './data-actions/data-actions.models';\r\nimport { DataFieldsComponent } from './data-fields/data-fields.component';\r\nimport { DataFieldsParams } from './data-fields/data-fields.models';\r\nimport { DataItemsComponent } from './data-items/data-items.component';\r\nimport { DataItemsParams } from './data-items/data-items.models';\r\nimport { ScopeDetailsDto } from '../models/scopedetails.dto';\r\nimport { AppDialogConfigService } from '../services';\r\nimport { AsyncPipe } from '@angular/common';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatDialogActions } from '@angular/material/dialog';\r\nimport { SxcGridModule } from '../../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { ColumnDefinitions } from '../../shared/ag-grid/column-definitions';\r\nimport { DragAndDropDirective } from '../../shared/directives/drag-and-drop.directive';\r\nimport { transient } from '../../core';\r\nimport { mapUntilChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { GlobalConfigService } from '../../shared/services/global-config.service';\r\n\r\n@Component({\r\n  selector: 'app-data',\r\n  templateUrl: './data.component.html',\r\n  styleUrls: ['./data.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogActions,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    AsyncPipe,\r\n    SxcGridModule,\r\n    DragAndDropDirective,\r\n  ],\r\n})\r\nexport class DataComponent extends BaseWithChildDialogComponent implements OnInit, OnDestroy {\r\n\r\n  private contentTypesService = transient(ContentTypesService);\r\n  private contentExportService = transient(ContentExportService);\r\n\r\n  contentTypes$ = new BehaviorSubject<ContentType[]>(undefined);\r\n  scope$ = new BehaviorSubject<string>(undefined);\r\n\r\n  /** Possible scopes - the ones from the backend + manually entered scopes by the current user */\r\n  scopeOptions$ = new BehaviorSubject<ScopeDetailsDto[]>([]);\r\n  gridOptions = this.buildGridOptions();\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  enablePermissions!: boolean;\r\n\r\n  viewModel$ = combineLatest([this.contentTypes$, this.scope$, this.scopeOptions$]).pipe(\r\n    map(([contentTypes, scope, scopeOptions]) =>\r\n      ({ contentTypes, scope, scopeOptions })),\r\n  );\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  constructor(\r\n    protected router: Router,\r\n    protected route: ActivatedRoute,\r\n    private snackBar: MatSnackBar,\r\n    private dialogConfigSvc: AppDialogConfigService,\r\n  ) {\r\n    super(router, route);\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.fetchScopes();\r\n    this.refreshScopeOnRouteChange();\r\n    this.subscriptions.add(this.childDialogClosed$().subscribe(() => { this.fetchContentTypes(); }));\r\n\r\n    this.dialogConfigSvc.getCurrent$().subscribe(data => {\r\n      this.enablePermissions = data.Context.Enable.AppPermissions;\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.contentTypes$.complete();\r\n    this.scope$.complete();\r\n    this.scopeOptions$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        from(toString(files[0])).pipe(take(1)).subscribe(fileString => {\r\n          const contentTypeName = fileString.split('<Entity Type=\"')[1]?.split('\"')[0];\r\n          const contentType = this.contentTypes$.value.find(ct => ct.Name === contentTypeName);\r\n          if (contentType == null) {\r\n            const message = `Cannot find Content Type named '${contentTypeName}'. Please open Content Type Import dialog manually.`;\r\n            this.snackBar.open(message, null, { duration: 5000 });\r\n            return;\r\n          }\r\n          this.openDataImport(contentType, files);\r\n        });\r\n        break;\r\n      case 'json':\r\n        this.importType(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  importType(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.router.navigate(['import'], { relativeTo: this.route.parent.firstChild, state: dialogData });\r\n  }\r\n\r\n  private showContentItems(contentType: ContentType) {\r\n    this.router.navigate([`items/${contentType.StaticName}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  editContentType(contentType: ContentType) {\r\n    if (!contentType) {\r\n      this.router.navigate(['add'], { relativeTo: this.route.parent.firstChild });\r\n    } else {\r\n      if (contentType.EditInfo.ReadOnly) { return; }\r\n      this.router.navigate([`${contentType.StaticName}/edit`], { relativeTo: this.route.parent.firstChild });\r\n    }\r\n  }\r\n\r\n  private fetchContentTypes() {\r\n    this.contentTypesService.retrieveContentTypes(this.scope$.value).subscribe(contentTypes => {\r\n      for (const contentType of contentTypes) {\r\n        contentType._compareLabel = contentType.Label.replace(/\\p{Emoji}/gu, 'ž');\r\n      }\r\n      this.contentTypes$.next(contentTypes);\r\n      if (this.scope$.value !== eavConstants.scopes.default.value) {\r\n        const message = 'Warning! You are in a special scope. Changing things here could easily break functionality';\r\n        this.snackBar.open(message, null, { duration: 2000 });\r\n      }\r\n    });\r\n  }\r\n\r\n  private fetchScopes() {\r\n    this.contentTypesService.getScopesV2().subscribe(scopeList => {\r\n      // Merge the new scopes with the existing ones - in case there were manual scopes added\r\n      // If old scope list had a manual scope which the server didn't send, re-add it here\r\n      const manual = this.scopeOptions$.value\r\n        .filter(sOld => scopeList.find(sNew => sNew.name === sOld.name) == null);\r\n\r\n      // Add a nice label to each scope containing count-information of types\r\n      const withNiceLabel = scopeList.map(s => {\r\n        let countInfo = !s.typesInherited\r\n          ? `${s.typesTotal} types`               // only not-inherited\r\n          : (s.typesInherited == s.typesTotal)\r\n            ? s.typesInherited + ' sys types'     // only inherited\r\n            : `${s.typesTotal} types / ${s.typesInherited} system`;\r\n        return ({ ...s, label: s.name + ` - ${countInfo}` });\r\n      });\r\n\r\n      this.scopeOptions$.next([...withNiceLabel, ...manual]);\r\n    });\r\n  }\r\n\r\n  createGhost() {\r\n    const sourceName = window.prompt('To create a ghost content-type enter source static name / id - this is a very advanced operation - read more about it on 2sxc.org/help?tag=ghost');\r\n    if (!sourceName) { return; }\r\n    this.snackBar.open('Saving...');\r\n    this.contentTypesService.createGhost(sourceName).subscribe(res => {\r\n      this.snackBar.open('Saved', null, { duration: 2000 });\r\n      this.fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  changeScope(newScope: string) {\r\n    console.log(\"trigger\")\r\n    if (newScope === dropdownInsertValue) {\r\n      newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n    }\r\n    this.router.navigate(['..', newScope], { relativeTo: this.route });\r\n  }\r\n\r\n  private enablePermissionsGetter() {\r\n    return this.enablePermissions;\r\n  }\r\n\r\n  private addItem(contentType: ContentType) {\r\n    const form: EditForm = {\r\n      items: [{ ContentTypeName: contentType.StaticName }],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private editFields(contentType: ContentType) {\r\n    this.router.navigate([`fields/${contentType.StaticName}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private createOrEditMetadata(contentType: ContentType) {\r\n    const form: EditForm = {\r\n      items: [\r\n        !contentType.Properties\r\n          ? {\r\n            ContentTypeName: eavConstants.contentTypes.contentType,\r\n            For: {\r\n              Target: eavConstants.metadata.contentType.target,\r\n              TargetType: eavConstants.metadata.contentType.targetType,\r\n              String: contentType.StaticName,\r\n            },\r\n            Prefill: {\r\n              Label: contentType.Name,\r\n              Description: contentType.Description\r\n            },\r\n          }\r\n          : { EntityId: contentType.Properties.Id }\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.router.navigate([`edit/${formUrl}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private openMetadata(contentType: ContentType) {\r\n    const url = GoToMetadata.getUrlContentType(\r\n      contentType.StaticName,\r\n      `Metadata for Content Type: ${contentType.Name} (${contentType.Id})`,\r\n    );\r\n    this.router.navigate([url], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private openRestApi(contentType: ContentType) {\r\n    this.router.navigate([GoToDevRest.getUrlData(contentType)], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private exportType(contentType: ContentType) {\r\n    this.contentExportService.exportJson(contentType.StaticName);\r\n  }\r\n\r\n  private openDataExport(contentType: ContentType) {\r\n    this.router.navigate([`export/${contentType.StaticName}`], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private openDataImport(contentType: ContentType, files?: File[]) {\r\n    const contentImportData: ContentImportDialogData = { files };\r\n    this.router.navigate([`${contentType.StaticName}/import`], { relativeTo: this.route.parent.firstChild, state: contentImportData });\r\n  }\r\n\r\n  private openPermissions(contentType: ContentType) {\r\n    this.router.navigate([GoToPermissions.getUrlContentType(contentType.StaticName)], { relativeTo: this.route.parent.firstChild });\r\n  }\r\n\r\n  private deleteContentType(contentType: ContentType) {\r\n    if (!confirm(`Are you sure you want to delete '${contentType.Name}' (${contentType.Id})?`)) { return; }\r\n    this.snackBar.open('Deleting...');\r\n    this.contentTypesService.delete(contentType).subscribe(result => {\r\n      this.snackBar.open('Deleted', null, { duration: 2000 });\r\n      this.fetchContentTypes();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Refreshes the scope when the route changes.\r\n   * ...also adds a scope name if the route scope is not found in the list of possible scopes.\r\n   * This is to allow an admin to enter a custom scope.\r\n   * Note 2024-03-04 2dm - not sure if this auto-add feature is still needed though...\r\n   */\r\n  private refreshScopeOnRouteChange() {\r\n    this.subscriptions.add(\r\n      this.router.events.pipe(\r\n        filter(event => event instanceof NavigationEnd),\r\n        map(() => this.route.snapshot.paramMap.get('scope')),\r\n        startWith(this.route.snapshot.paramMap.get('scope')),\r\n        filter(scope => !!scope),\r\n        mapUntilChanged(m => m),\r\n        // distinctUntilChanged(),\r\n      ).subscribe(scope => {\r\n        this.scope$.next(scope);\r\n\r\n        // If we can't find the scope in the list of options, add it as it was entered manually\r\n        if (!this.scopeOptions$.value.map(option => option.name).includes(scope)) {\r\n          const newScopeOption: ScopeDetailsDto = {\r\n            name: scope,\r\n            label: scope,\r\n            typesTotal: 0,\r\n            typesInherited: 0,\r\n            typesOfApp: 0,\r\n          };\r\n          this.scopeOptions$.next([...this.scopeOptions$.value, newScopeOption]);\r\n        }\r\n        this.fetchContentTypes();\r\n      })\r\n    );\r\n  }\r\n\r\n  private buildGridOptions(): GridOptions {\r\n    const gridOptions: GridOptions = {\r\n      ...defaultGridOptions,\r\n      columnDefs: [\r\n        {\r\n          ...ColumnDefinitions.Id,\r\n          cellRenderer: IdFieldComponent,\r\n          cellRendererParams: (() => {\r\n            const params: IdFieldParams<ContentType> = {\r\n              tooltipGetter: (contentType) => `ID: ${contentType.Id}\\nGUID: ${contentType.StaticName}`,\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideType,\r\n          headerName: 'ContentType',\r\n          field: 'Label',\r\n          sort: 'asc',\r\n          onCellClicked: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            this.showContentItems(contentType);\r\n          },\r\n          comparator: (valueA, valueB, nodeA, nodeB, isInverted) => {\r\n            const contentTypeA: ContentType = nodeA.data;\r\n            const contentTypeB: ContentType = nodeB.data;\r\n            return contentTypeA._compareLabel.localeCompare(contentTypeB._compareLabel);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Items,\r\n          field: 'Items',\r\n          cellRenderer: DataItemsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataItemsParams = {\r\n              onShowItems: (contentType) => this.showContentItems(contentType),\r\n              onAddItem: (contentType) => this.addItem(contentType),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.Fields,\r\n          field: 'Fields',\r\n          cellRenderer: DataFieldsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataFieldsParams = {\r\n              onEditFields: (contentType) => this.editFields(contentType),\r\n            };\r\n            return params;\r\n          })(),\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideMin100,\r\n          field: 'Name',\r\n          cellClass: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return `${contentType.EditInfo.DisableEdit ? 'no-outline' : 'primary-action highlight'}`.split(' ');\r\n          },\r\n          valueGetter: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return contentType.Name;\r\n          },\r\n          onCellClicked: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            this.editContentType(contentType);\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.TextWideFlex3,\r\n          field: 'Description',\r\n          valueGetter: (params) => {\r\n            const contentType: ContentType = params.data;\r\n            return contentType.Properties?.Description;\r\n          },\r\n        },\r\n        {\r\n          ...ColumnDefinitions.ActionsPinnedRight4,\r\n          cellRenderer: DataActionsComponent,\r\n          cellRendererParams: (() => {\r\n            const params: DataActionsParams = {\r\n              enablePermissionsGetter: () => this.enablePermissionsGetter(),\r\n              do: (verb, contentType) => {\r\n                switch (verb) {\r\n                  case 'createUpdateMetaData': this.createOrEditMetadata(contentType); break;\r\n                  case 'openPermissions': this.openPermissions(contentType); break;\r\n                  case 'editContentType': this.editContentType(contentType); break;\r\n                  case 'openMetadata': this.openMetadata(contentType); break;\r\n                  case 'openRestApi': this.openRestApi(contentType); break;\r\n                  case 'typeExport': this.exportType(contentType); break;\r\n                  case 'dataExport': this.openDataExport(contentType); break;\r\n                  case 'dataImport': this.openDataImport(contentType); break;\r\n                  case 'deleteContentType': this.deleteContentType(contentType); break;\r\n                }\r\n              }\r\n            } satisfies DataActionsParams;\r\n            return params;\r\n          })(),\r\n        },\r\n      ],\r\n    };\r\n    return gridOptions;\r\n  }\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color);color:var(--mat-badge-text-color);font-family:var(--mat-badge-text-font);font-weight:var(--mat-badge-text-weight);border-radius:var(--mat-badge-container-shape)}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color)}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size, var(--mat-badge-small-size-container-size));padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size, var(--mat-badge-container-size));padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size);margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size, var(--mat-badge-large-size-container-size));padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size);margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                if (badgeApps.size === 0) {\n                    componentRef.destroy();\n                }\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[8]}