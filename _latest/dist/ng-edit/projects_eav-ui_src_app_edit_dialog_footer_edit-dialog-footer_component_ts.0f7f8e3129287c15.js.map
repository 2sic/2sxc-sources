{"version":3,"file":"projects_eav-ui_src_app_edit_dialog_footer_edit-dialog-footer_component_ts.0f7f8e3129287c15.js","mappings":"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","names":["DataDumpComponent","constructor","itemService","formConfig","this","items","getManySignal","config","itemGuids","i0","i1","i2","selectors","standalone","features","decls","vars","consts","template","rf","ctx","JsonPipe","styles","DebugTypes","Data","Formulas","Logs","SelectTargets","Entity","Field","Target","SnippetLabelSizePipe","maxLength","transform","label","length","substring","pure","entityOption_r3","entityGuid","_c2","hasFormula","fieldOption_r4","fieldName","targetOption_r6","target","$event","_r5","ctx_r1","selectedChanged","FormulaDesignerComponent_Conditional_0_Conditional_16_For_2_Template","state","targetOptions","_r7","snippet_r9","_r8","$implicit","clipboard","copyToClipboard","code","snippet_r11","_r10","result","value","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_1_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Conditional_2_Template","undefined","isOnlyPromise","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_0_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Conditional_1_Template","isError","_r12","save","editMode","tmp_3_0","currentFormula","sourceCode","tmp_4_0","saving","_r1","FormulaDesignerComponent_Conditional_0_For_6_Template","_forTrack0","FormulaDesignerComponent_Conditional_0_For_12_Template","_forTrack1","FormulaDesignerComponent_Conditional_0_Conditional_16_Template","FormulaDesignerComponent_Conditional_0_Conditional_17_Template","toggleFreeText","formulaChanged","onFocused","FormulaDesignerComponent_Conditional_0_For_32_Template","_forTrack2","FormulaDesignerComponent_Conditional_0_Conditional_33_Template","FormulaDesignerComponent_Conditional_0_For_35_Template","FormulaDesignerComponent_Conditional_0_Conditional_40_Template","toggleEdit","deleteFormula","reset","FormulaDesignerComponent_Conditional_0_Conditional_60_Template","run","entityOptions","fieldsOptions","freeTextTarget","_c0","focused","filename","tmp_11_0","v2JsTypings","monacoOptions","_c1","v1DataSnippets","tmp_16_0","v1ContextSnippets","isDeleted","menu_r13","tmp_20_0","sourceCodeId","allowSaveFormula","tmp_22_0","FormulaDesignerComponent","#designerSvc","#entitiesService","snackBar","contentTypeService","translate","log","classLog","inject","FormulaDesignerService","transient","EntityEditService","ClipboardService","loadError","enableFormulaSave","signal","minimap","enabled","lineHeight","lineNumbers","lineDecorationsWidth","folding","scrollBeyondLastLine","tabSize","fixedOverflowWidgets","formId","designerState","formulaResult","currentTargetOptions","computed","Object","values","FormulaNewPickerTargets","includes","defaultListItemFormula","defaultFormula","ngOnInit","keys","itemSettingsServices","setDesignerOpen","initAfterItemSettingsAreReady","ngOnDestroy","newState","selectedSettingsSvc","allProps","set","formula","cache","updateFormulaFromEditor","#designerIdentifier","oldState","designer","identifier","resetFormula","retriggerFormulas","item","get","atAllFieldSettings","getAttributeOfItem","Metadata","find","m","Type","Id","create","eavConstants","contentTypes","formulas","Title","Formula","Enabled","ParentRelationship","EditPrep","relationship","Guid","subscribe","savedFormula","updateSaved","open","duration","update","sourceCodeGuid","confirm","instant","title","id","delete","next","error","_","i3","i4","i5","FormulaDesignerComponent_Conditional_0_Template","MatFormFieldModule","i6","MatSelectModule","i7","i8","FormsModule","i9","MatOptionModule","NgClass","MatInputModule","i10","MatButtonModule","i11","MatIconModule","i12","MonacoEditorComponent","MatMenuModule","i13","TippyDirective","ClipboardModule","ɵfac","__ngFactoryType__","ɵmod","type","ɵinj","ConfigEditorDialogComponent","dialog","data","hostClass","editorOptions","theme","language","readOnly","automaticLayout","selectedConfig","JSON","stringify","configData","MAT_DIALOG_DATA","hostVars","hostBindings","MatDialogModule","encapsulation","SpecsEditorDialogComponent","logSpecs","onClose","close","onSave","onValueChanged","newValue","config_r1","log_r3","ctx_r3","openLogSpecs","key","_r2","toggleConfig","LogsConfigComponent_div_16_Conditional_4_Template","isChecked","hasLogSpecs","LogsConfigComponent","loggingService","matDialog","LogSeverities","logManager","LogManager","singleton","allLogs","mergeAllSpecs","configs","sessionPrefix","logs","getLogsSignal","loadConfigsFromStateManager","checkAll","every","specs","spec","name","toggle","savedConfigs","filter","startsWith","map","replace","onConfigSelected","configName","forEach","logKey","saveConfig","prompt","enabledConfigs","fromEntries","entries","add","exportConfig","width","afterClosed","updatedSpecs","parse","updateSpecs","LogsConfigComponent_mat_option_15_Template","LogsConfigComponent_div_16_Template","CommonModule","log_r2","ctx_r2","logToConsole","severity","Error","Warn","time","LogsDumpComponent_Conditional_2_Conditional_0_Template","LogsDumpComponent_Conditional_2_For_2_Template","LogsDumpComponent","showSettings","Log","console","warn","toggleDialog","LogsDumpComponent_Conditional_2_Template","LogsDumpComponent_Conditional_3_Template","DatePipe","toggleSize","preferences","expanded","_r3","prefManager","pinResource","EditDialogFooterComponent_Conditional_22_Case_1_Template","EditDialogFooterComponent_Conditional_22_Case_2_Template","EditDialogFooterComponent_Conditional_22_Case_3_Template","tmp_2_0","tab","EditDialogFooterComponent","sxcVer","window","sxcVersion","lastIndexOf","UserPreferences","part","footerPreferences","s","hideTab","setMany","size","pinResources","pinned","EditDialogFooterComponent_Conditional_18_Template","EditDialogFooterComponent_Conditional_19_Template","EditDialogFooterComponent_Conditional_22_Template","MatCardModule","HttpServiceBase","contentType","entity","http","post","params","appId","zoneId","entityId","tryForce","apiUrl","webApiEntityRoot","toString","force","factory"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/data-dump/data-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.models.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/snippet-label-size.pipe.ts","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/formula-designer/formula-designer.component.ts","./node_modules/@angular/cdk/fesm2022/clipboard.mjs","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/config-editor-dialog/config-editor-dialog.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/config-editor-dialog/config-editor-dialog.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/specs-editor-dialog/specs-editor-dialog.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/specs-editor-dialog/specs-editor-dialog.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/logs-config.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-config/logs-config.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.html","./projects/eav-ui/src/app/edit/dialog/footer/logs-dump/logs-dump.component.ts","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.html","./projects/eav-ui/src/app/edit/dialog/footer/edit-dialog-footer.component.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { JsonPipe } from '@angular/common';\r\nimport { FormConfigService } from '../../../form/form-config.service';\r\nimport { ItemService } from '../../../state/item.service';\r\n\r\n@Component({\r\n  selector: 'app-data-dump',\r\n  templateUrl: './data-dump.component.html',\r\n  styleUrls: ['./data-dump.component.scss'],\r\n  standalone: true,\r\n  imports: [JsonPipe],\r\n})\r\nexport class DataDumpComponent {\r\n  protected items = this.itemService.getManySignal(this.formConfig.config.itemGuids);\r\n  constructor(private itemService: ItemService, private formConfig: FormConfigService) { }\r\n}\r\n","  <textarea readonly class=\"fancy-scrollbar-light\">{{ items() | json }}</textarea>\r\n\r\n","export const DebugTypes = {\r\n  Data: 'data',\r\n  Formulas: 'formulas',\r\n  Logs: 'logs',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Of } from '../../../../../../../core';\r\nimport { FormulaCacheItem } from '../../../formulas/cache/formula-cache.model';\r\nimport { FormulaTargets } from '../../../formulas/targets/formula-targets';\r\n\r\nexport interface EntityOption {\r\n  entityGuid: string;\r\n  formulas: FormulaCacheItem[];\r\n  hasFormula: boolean;\r\n  label: string;\r\n}\r\n\r\nexport interface FieldOption {\r\n  fieldName: string;\r\n  formulas: FormulaCacheItem[];\r\n  hasFormula: boolean;\r\n  inputType: string;\r\n  label: string;\r\n}\r\n\r\nexport interface TargetOption {\r\n  hasFormula: boolean;\r\n  label: string;\r\n  target: Of<typeof FormulaTargets>;\r\n}\r\n\r\nexport interface DesignerSnippet {\r\n  code: string;\r\n  label: string;\r\n}\r\n\r\nexport const SelectTargets = {\r\n  Entity: 'entityGuid',\r\n  Field: 'fieldValue',\r\n  Target: 'formulaTarget',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n    name: 'snippetLabelSize',\r\n    standalone: true\r\n})\r\nexport class SnippetLabelSizePipe implements PipeTransform {\r\n\r\n  private maxLength = 24;\r\n\r\n  transform(label: string): string {\r\n    if (label.length <= this.maxLength) { return label; }\r\n    return `…${label.substring(label.length - this.maxLength)}`;\r\n  }\r\n}\r\n","@if (!loadError) {\r\n  <div class=\"formula-context-box\">\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Entity</mat-label>\r\n      <mat-select [ngModel]=\"state().entityGuid\" (ngModelChange)=\"selectedChanged(SelectTargets.Entity, $event)\">\r\n        @for (entityOption of entityOptions(); track entityOption.entityGuid)\r\n        {\r\n          <mat-option\r\n            [value]=\"entityOption.entityGuid\">\r\n            <span [ngClass]=\"{ 'has-formula': entityOption.hasFormula }\">\r\n              {{ entityOption.label }}\r\n            </span>\r\n          </mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Attribute</mat-label>\r\n      <mat-select [ngModel]=\"state().fieldName\" (ngModelChange)=\"selectedChanged(SelectTargets.Field, $event)\"\r\n        [disabled]=\"state().entityGuid == null\">\r\n        @for (fieldOption of fieldsOptions(); track fieldOption.fieldName)\r\n        {\r\n          <mat-option\r\n            [value]=\"fieldOption.fieldName\">\r\n            <span [ngClass]=\"{ 'has-formula': fieldOption.hasFormula }\">\r\n              {{ fieldOption.fieldName }}\r\n            </span>\r\n          </mat-option>\r\n        }\r\n      </mat-select>\r\n    </mat-form-field>\r\n    <mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n      <mat-label>Target</mat-label>\r\n      @if (!freeTextTarget)\r\n      {\r\n        <mat-select [ngModel]=\"state().target\"\r\n          (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n          [disabled]=\"state().entityGuid == null || state().fieldName == null\">\r\n          @for (targetOption of targetOptions(); track targetOption) {\r\n            <mat-option [value]=\"targetOption.target\">\r\n              <span [ngClass]=\"{ 'has-formula': targetOption.hasFormula }\">\r\n                {{ targetOption.label }}\r\n              </span>\r\n            </mat-option>\r\n          }\r\n        </mat-select>\r\n      }\r\n      @else\r\n      {\r\n        <input matInput [ngModel]=\"state().target\"\r\n          (ngModelChange)=\"selectedChanged(SelectTargets.Target, $event)\"\r\n          [disabled]=\"state().entityGuid == null || state().fieldName == null\">\r\n      }\r\n    </mat-form-field>\r\n    <button mat-icon-button tippy=\"FreeText Target\" class=\"eav-formula-button\"\r\n      [disabled]=\"state().entityGuid == null || state().fieldName == null\" (click)=\"toggleFreeText()\">\r\n      <mat-icon>text_fields</mat-icon>\r\n    </button>\r\n    <div class=\"spacer\"></div>\r\n    <a mat-icon-button tippy=\"Help\" class=\"eav-formula-button\" href=\"https://go.2sxc.org/formulas\" target=\"_blank\">\r\n      <mat-icon>help</mat-icon>\r\n    </a>\r\n  </div>\r\n  <div class=\"formula-box\">\r\n    <div class=\"formula-field\" [ngClass]=\"{\r\n      'disabled': !state().editMode || state().entityGuid == null || state().fieldName == null || state().target == null,\r\n      'focused': focused\r\n      }\">\r\n      <mat-label class=\"label\">Function</mat-label>\r\n      <app-monaco-editor class=\"editor\" [filename]=\"filename\" [value]=\"currentFormula()?.sourceCode ?? template()\"\r\n        [jsTypings]=\"v2JsTypings()\" (valueChanged)=\"formulaChanged($event)\" [options]=\"monacoOptions\"\r\n        (focused)=\"onFocused(true)\" (blurred)=\"onFocused(false)\">\r\n      </app-monaco-editor>\r\n    </div>\r\n    <div class=\"formula-snippets fancy-scrollbar-light\" [ngClass]=\"{ 'disabled': !state().editMode }\">\r\n      @for (snippet of v1DataSnippets(); track snippet.code)\r\n      {\r\n        <div class=\"snippet\" [title]=\"snippet.code\"\r\n          (click)=\"clipboard.copyToClipboard(snippet.code)\">\r\n          {{ snippet.label | snippetLabelSize }}\r\n        </div>\r\n      }\r\n      @if (v1DataSnippets()?.length && v1ContextSnippets().length)\r\n      {\r\n        <div class=\"separator\"></div>\r\n      }\r\n      @for (snippet of v1ContextSnippets(); track snippet.code)\r\n      {\r\n        <div class=\"snippet\" [title]=\"snippet.code\"\r\n          (click)=\"clipboard.copyToClipboard(snippet.code)\">\r\n          {{ snippet.label | snippetLabelSize }}\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n  <div class=\"formula-footer-box\">\r\n    <div class=\"formula-result-box hide-scrollbar\">\r\n      <span class=\"label\">Result:&nbsp;</span>\r\n      @if (result() != null && !isDeleted())\r\n      {\r\n        @if (!result().isError)\r\n        {\r\n          @if (result().value !== undefined) {\r\n            <span>{{ result().value | json }}</span>\r\n          }\r\n          @else if (!result().isOnlyPromise) {\r\n            <span class=\"result-undefined\">undefined</span>\r\n          }\r\n          @else {\r\n            <span>promise(🤞🏽)</span>\r\n          }\r\n        }\r\n        @else\r\n        {\r\n          <span class=\"result-error\">\r\n            Calculation failed. Please check console for more info\r\n          </span>\r\n        }\r\n      }\r\n    </div>\r\n    <div class=\"formula-actions-box\">\r\n      <button mat-icon-button tippy=\"Edit\" (click)=\"toggleEdit()\">\r\n        <mat-icon>edit</mat-icon>\r\n      </button>\r\n      <button mat-icon-button tippy=\"Menu\" [matMenuTriggerFor]=\"menu\">\r\n        <mat-icon>more_vert</mat-icon>\r\n      </button>\r\n      <mat-menu #menu=\"matMenu\">\r\n        <button mat-menu-item (click)=\"deleteFormula()\"\r\n          [disabled]=\"!currentFormula()?.sourceCodeId\">\r\n          <mat-icon>delete</mat-icon>\r\n          <span>Delete</span>\r\n        </button>\r\n        <button mat-menu-item (click)=\"reset()\">\r\n          <mat-icon>history</mat-icon>\r\n          <span>Reset</span>\r\n        </button>\r\n      </mat-menu>\r\n      @if (allowSaveFormula)\r\n      {\r\n        <button mat-icon-button tippy=\"Save\"\r\n          [tippyDisabled]=\"!state().editMode || !currentFormula()?.sourceCode\"\r\n          [disabled]=\"!state().editMode || !currentFormula()?.sourceCode || saving()\" (click)=\"save()\">\r\n          <mat-icon>save</mat-icon>\r\n        </button>\r\n      }\r\n      <button mat-icon-button tippy=\"Run\"\r\n        [disabled]=\"!state().editMode || !currentFormula()?.sourceCode\" (click)=\"run()\">\r\n        <mat-icon>play_arrow</mat-icon>\r\n      </button>\r\n    </div>\r\n  </div>\r\n}\r\n","import { JsonPipe, NgClass } from '@angular/common';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, computed, inject, OnDestroy, OnInit, signal } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport type * as Monaco from 'monaco-editor';\r\nimport { Of } from '../../../../../../../core';\r\nimport { transient } from '../../../../../../../core/transient';\r\nimport { MonacoEditorComponent } from '../../../../monaco-editor/monaco-editor.component';\r\nimport { eavConstants } from '../../../../shared/constants/eav.constants';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { classLog } from '../../../../shared/logging';\r\nimport { EditPrep } from '../../../../shared/models/edit-form.model';\r\nimport { ClipboardService } from '../../../../shared/services/clipboard.service';\r\nimport { EntityEditService } from '../../../../shared/services/entity-edit.service';\r\nimport { FormConfigService } from '../../../form/form-config.service';\r\nimport { DesignerState } from '../../../formulas/designer/designer-state.model';\r\nimport { FormulaDesignerService } from '../../../formulas/designer/formula-designer.service';\r\nimport { defaultFormula, defaultListItemFormula } from '../../../formulas/formula-definitions';\r\nimport { FormulaIdentifier } from '../../../formulas/results/formula-results.models';\r\nimport { FormulaNewPickerTargets, FormulaTargets } from '../../../formulas/targets/formula-targets';\r\nimport { ContentTypeService } from '../../../shared/content-types/content-type.service';\r\nimport { ItemService } from '../../../state/item.service';\r\nimport { SelectTargets } from './formula-designer.models';\r\nimport { SnippetLabelSizePipe } from './snippet-label-size.pipe';\r\n\r\n@Component({\r\n  selector: 'app-formula-designer',\r\n  templateUrl: './formula-designer.component.html',\r\n  styleUrls: ['./formula-designer.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    FormsModule,\r\n    MatOptionModule,\r\n    NgClass,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MonacoEditorComponent,\r\n    MatMenuModule,\r\n    JsonPipe,\r\n    SnippetLabelSizePipe,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class FormulaDesignerComponent implements OnInit, OnDestroy {\r\n\r\n  log = classLog({FormulaDesignerComponent});\r\n\r\n  #designerSvc = inject(FormulaDesignerService);\r\n\r\n  #entitiesService = transient(EntityEditService);\r\n  \r\n  constructor(\r\n    private snackBar: MatSnackBar,\r\n    private formConfig: FormConfigService,\r\n    private itemService: ItemService,\r\n    private contentTypeService: ContentTypeService,\r\n    private translate: TranslateService,\r\n  ) { }\r\n\r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  SelectTargets = SelectTargets;\r\n  loadError = false;\r\n  freeTextTarget = false;\r\n  allowSaveFormula = this.formConfig.config.enableFormulaSave;\r\n  isDeleted = signal(false);\r\n  saving = signal(false);\r\n  monacoOptions: Monaco.editor.IStandaloneEditorConstructionOptions = {\r\n    minimap: {\r\n      enabled: false,\r\n    },\r\n    lineHeight: 19,\r\n    lineNumbers: 'off',\r\n    lineDecorationsWidth: 0,\r\n    folding: false,\r\n    scrollBeyondLastLine: false,\r\n    tabSize: 2,\r\n    fixedOverflowWidgets: true,\r\n  };\r\n  filename = `formula${this.formConfig.config.formId}.js`;\r\n  focused = false;\r\n\r\n\r\n  protected state = this.#designerSvc.designerState;\r\n  protected result = this.#designerSvc.formulaResult;\r\n  protected targetOptions = this.#designerSvc.currentTargetOptions;\r\n  \r\n  protected entityOptions = this.#designerSvc.entityOptions;\r\n  protected fieldsOptions = this.#designerSvc.fieldsOptions;\r\n  protected currentFormula = this.#designerSvc.currentFormula;\r\n\r\n  protected v2JsTypings = this.#designerSvc.v2JsTypings;\r\n\r\n  protected v1ContextSnippets = this.#designerSvc.v1ContextSnippets;\r\n  protected v1DataSnippets = this.#designerSvc.v1DataSnippets;\r\n\r\n  protected template = computed(() => Object.values(FormulaNewPickerTargets).includes(this.state().target)\r\n    ? defaultListItemFormula\r\n    : defaultFormula\r\n  );\r\n\r\n\r\n  ngOnInit(): void {\r\n    // Make sure all necessary services have what they need, otherwise flag & exit\r\n    // 1. Make sure the designer has access to all itemSettingsServices\r\n    this.loadError = false;\r\n    if (Object.keys(this.#designerSvc.itemSettingsServices).length < 1) {\r\n      this.loadError = true;\r\n      return;\r\n    }\r\n    \r\n    this.#designerSvc.setDesignerOpen(true);\r\n    this.#designerSvc.initAfterItemSettingsAreReady();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.#designerSvc.setDesignerOpen(false);\r\n  }\r\n\r\n  selectedChanged(target: Of<typeof SelectTargets>, value: string | Of<typeof FormulaTargets>): void {\r\n    const newState: DesignerState = {\r\n      ...this.#designerSvc.designerState(),\r\n      editMode: false,\r\n    };\r\n    switch (target) {\r\n      case SelectTargets.Entity:\r\n        newState.entityGuid = value;\r\n        const selectedSettingsSvc = this.#designerSvc.itemSettingsServices[newState.entityGuid];\r\n        newState.fieldName = Object.keys(selectedSettingsSvc.allProps())[0];\r\n        break;\r\n      case SelectTargets.Field:\r\n        newState.fieldName = value;\r\n        break;\r\n      case SelectTargets.Target:\r\n        newState.target = value as Of<typeof FormulaTargets>;\r\n        break;\r\n    }\r\n\r\n    this.#designerSvc.designerState.set(newState);\r\n  }\r\n\r\n  toggleFreeText(): void {\r\n    this.freeTextTarget = !this.freeTextTarget;\r\n  }\r\n\r\n  formulaChanged(formula: string): void {\r\n    this.#designerSvc.cache.updateFormulaFromEditor(this.#designerIdentifier, formula, false);\r\n  }\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n\r\n  toggleEdit(): void {\r\n    const oldState = this.#designerSvc.designerState();\r\n    const designer: DesignerState = {\r\n      ...oldState,\r\n      editMode: !oldState.editMode,\r\n    };\r\n    this.#designerSvc.designerState.set(designer);\r\n    if (designer.editMode && this.#designerSvc.currentFormula() == null)\r\n      this.#designerSvc.cache.updateFormulaFromEditor(this.#designerIdentifier, this.template(), false);\r\n  }\r\n\r\n  reset(): void {\r\n    const designer: DesignerState = {\r\n      ...this.#designerSvc.designerState(),\r\n      editMode: false,\r\n    };\r\n    const identifier = this.#designerIdentifier;\r\n    this.#designerSvc.designerState.set(designer);\r\n    this.#designerSvc.cache.resetFormula(identifier);\r\n    this.#designerSvc.itemSettingsServices[identifier.entityGuid].retriggerFormulas('designer-reset');\r\n  }\r\n\r\n  run(): void {\r\n    const identifier = this.#designerIdentifier;\r\n    const formula = this.#designerSvc.currentFormula();\r\n    this.#designerSvc.cache.updateFormulaFromEditor(identifier, formula.sourceCode, true);\r\n    this.#designerSvc.itemSettingsServices[identifier.entityGuid].retriggerFormulas('designer-run');\r\n    this.isDeleted.set(false);\r\n  }\r\n\r\n  get #designerIdentifier(): FormulaIdentifier {\r\n    const designer = this.#designerSvc.designerState();\r\n    const id: FormulaIdentifier = { entityGuid: designer.entityGuid, fieldName: designer.fieldName, target: designer.target };\r\n    return id;\r\n  }\r\n\r\n  //#region Save/Delete\r\n\r\n  save(): void {\r\n    this.saving.set(true);\r\n    const formula = this.#designerSvc.currentFormula();\r\n\r\n    if (formula.sourceCodeId == null) {\r\n      const item = this.itemService.get(formula.entityGuid);\r\n      const attributeDef = this.contentTypeService.getAttributeOfItem(item, formula.fieldName);\r\n      const atAllFieldSettings = attributeDef.Metadata.find(m => m.Type.Id === '@All');\r\n      if (!atAllFieldSettings) {\r\n        this.snackBar.open('Field configuration is missing. Please create formula in Administration', undefined, { duration: 3000 });\r\n        this.saving.set(false);\r\n        return;\r\n      }\r\n      this.#entitiesService.create(\r\n        eavConstants.contentTypes.formulas,\r\n        {\r\n          Title: formula.target,\r\n          Target: formula.target,\r\n          Formula: formula.sourceCode,\r\n          Enabled: true,\r\n          ParentRelationship: EditPrep.relationship(atAllFieldSettings.Guid, 'Formulas'),\r\n        },\r\n      ).subscribe(savedFormula => {\r\n        this.#designerSvc.cache.updateSaved(formula, savedFormula.Guid, savedFormula.Id);\r\n        this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n        this.saving.set(false);\r\n      });\r\n      return;\r\n    }\r\n\r\n    this.#entitiesService.update(eavConstants.contentTypes.formulas, formula.sourceCodeId, { Formula: formula.sourceCode }).subscribe(() => {\r\n      this.#designerSvc.cache.updateSaved(formula, formula.sourceCodeGuid, formula.sourceCodeId);\r\n      this.snackBar.open('Formula saved', null, { duration: 2000 });\r\n      this.saving.set(false);\r\n    });\r\n  }\r\n\r\n  deleteFormula(): void {\r\n    const designer = this.#designerSvc.designerState();\r\n    const formula = this.#designerSvc.currentFormula();\r\n\r\n    const id = formula.sourceCodeId;\r\n    const title = formula.fieldName + ' - ' + formula.target;\r\n\r\n    const confirmed = confirm(this.translate.instant('Data.Delete.Question', { title, id }));\r\n    if (!confirmed)\r\n      return;\r\n\r\n    this.#entitiesService.delete(eavConstants.contentTypes.formulas, formula.sourceCodeId, true)\r\n      .subscribe({\r\n        next: () => {\r\n          this.#designerSvc.cache.delete(formula);\r\n          this.snackBar.open(this.translate.instant('Message.Deleted'), null, { duration: 2000 });\r\n          this.isDeleted.set(true);\r\n          if (designer.editMode)\r\n            this.toggleEdit();\r\n        },\r\n        error: (_: HttpErrorResponse) => {\r\n          this.snackBar.open(this.translate.instant('Message.DeleteError'), null, { duration: 2000 });\r\n        }\r\n      });\r\n  }\r\n\r\n  //#endregion\r\n\r\n}\r\n","import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        // The element needs to be inserted into the fullscreen container, if the page\n        // is in fullscreen mode, otherwise the browser won't execute the copy command.\n        (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Clipboard, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: () => [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }] });\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: CdkCopyToClipboard, isStandalone: true, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }], propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\nclass ClipboardModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ClipboardModule, imports: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ClipboardModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { ClipboardModule } from '@angular/cdk/clipboard';\r\nimport { Component, HostBinding, Inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogContent, MatDialogModule, MatDialogRef,\r\n  MatDialogTitle\r\n} from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { transient } from '../../../../../../../../core/transient';\r\nimport { ClipboardService } from '../../../../..//shared/services/clipboard.service';\r\nimport { MonacoEditorComponent } from '../../../../../monaco-editor/monaco-editor.component';\r\nimport { TippyDirective } from '../../../../../shared/directives/tippy.directive';\r\n@Component({\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogModule,\r\n    FormsModule,\r\n    MonacoEditorComponent,\r\n    MatButtonModule,\r\n    MatDialogActions,\r\n    MatDialogClose,\r\n    MatDialogContent,\r\n    MatDialogTitle,\r\n    ClipboardModule,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n  selector: 'app-monaco-editor-dialog',\r\n  templateUrl: './config-editor-dialog.component.html',\r\n})\r\nexport class ConfigEditorDialogComponent {\r\n\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n  \r\n  selectedConfig: string;\r\n  focused = false;\r\n  editorOptions = {\r\n    theme: 'vs-light',\r\n    language: 'json',\r\n    readOnly: true,\r\n    automaticLayout: true,\r\n    minimap: { enabled: false },\r\n    scrollBeyondLastLine: false,\r\n  };\r\n  filename = 'exported-config.json';\r\n\r\n  constructor(\r\n    public dialog: MatDialogRef<ConfigEditorDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.selectedConfig = JSON.stringify(data.configData, null, 2);\r\n  }\r\n  \r\n  protected clipboard = transient(ClipboardService);\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Configs Exporter</div>\r\n    <button mat-icon-button mat-dialog-close tippy=\"Close dialog\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\" style=\"padding-bottom: 0;\">\r\n    <app-monaco-editor\r\n      [filename]=\"filename\"\r\n      [value]=\"selectedConfig\"\r\n      [options]=\"editorOptions\"\r\n      (focused)=\"onFocused(true)\"\r\n      (blurred)=\"onFocused(false)\"\r\n      style=\"height: 350px; width: 100%\"\r\n    />\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-icon-button (click)=\"clipboard.copyToClipboard(selectedConfig)\" tippy=\"Copy Config To Clipboard\">\r\n      <mat-icon>content_copy</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { Component, HostBinding, Inject } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport {\r\n  MAT_DIALOG_DATA,\r\n  MatDialogActions,\r\n  MatDialogClose,\r\n  MatDialogContent,\r\n  MatDialogModule,\r\n  MatDialogRef,\r\n  MatDialogTitle,\r\n} from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MonacoEditorComponent } from '../../../../../monaco-editor/monaco-editor.component';\r\nimport { TippyDirective } from '../../../../../shared/directives/tippy.directive';\r\n@Component({\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogModule,\r\n    FormsModule,\r\n    MonacoEditorComponent,\r\n    MatButtonModule,\r\n    MatDialogActions,                                                                                                                                                                                                                                \r\n    MatDialogClose,\r\n    MatDialogContent,\r\n    MatDialogTitle,\r\n    MatIconModule,\r\n    TippyDirective,\r\n  ],\r\n  selector: 'app-monaco-editor-dialog',\r\n  templateUrl: './specs-editor-dialog.component.html',\r\n})\r\nexport class SpecsEditorDialogComponent {\r\n\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  logSpecs: string;\r\n  focused = false;\r\n  editorOptions = {\r\n    theme: 'vs-light',\r\n    language: 'json',\r\n    readOnly: false,\r\n    automaticLayout: true,\r\n    minimap: { enabled: false },\r\n    scrollBeyondLastLine: false,\r\n  };\r\n  filename = 'log-specs.json';\r\n\r\n  constructor(\r\n    public dialog: MatDialogRef<SpecsEditorDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: any\r\n  ) {\r\n    this.logSpecs = JSON.stringify(data.logSpecs, null, 2);\r\n  }\r\n\r\n  onClose(): void {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onSave(): void {\r\n    this.dialog.close(this.logSpecs);\r\n  }\r\n\r\n  onValueChanged(newValue: string): void {\r\n    this.logSpecs = newValue;\r\n  }\r\n\r\n  onFocused(focused: boolean): void {\r\n    this.focused = focused;\r\n  }\r\n}\r\n","<div class=\"eav-dialog\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">Log Specs Editor</div>\r\n    <button mat-icon-button mat-dialog-close tippy=\"Close dialog\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content\" style=\"padding-bottom: 0;\">\r\n    <app-monaco-editor\r\n      [filename]=\"filename\"\r\n      [value]=\"logSpecs\"\r\n      [options]=\"editorOptions\"\r\n      (valueChanged)=\"onValueChanged($event)\"\r\n      (focused)=\"onFocused(true)\"\r\n      (blurred)=\"onFocused(false)\"\r\n      style=\"height: 350px; width: 100%\"\r\n    />\r\n  </div>\r\n  <mat-dialog-actions>\r\n    <button mat-icon-button (click)=\"onSave()\" tippy=\"Save Specs\">\r\n      <mat-icon>save</mat-icon>\r\n    </button>\r\n  </mat-dialog-actions>\r\n</div>\r\n","<div class=\"log-content fancy-scrollbar-light\">\r\n  <div class=\"menu\">\r\n    <button mat-button tippy=\"Toggles All Logs\" (click)=\"checkAll()\">\r\n      Toggle All\r\n    </button>\r\n\r\n    <div>\r\n      <button mat-icon-button (click)=\"saveConfig()\" tippy=\"Save Configuration\">\r\n        <mat-icon>save</mat-icon>\r\n      </button>\r\n      <button\r\n      mat-icon-button\r\n      [disabled]=\"selectedConfig === null\"\r\n      (click)=\"exportConfig()\"\r\n      tippy=\"Export configuration\"\r\n      >\r\n      <mat-icon>ios_share</mat-icon>\r\n    </button>\r\n    <mat-form-field color=\"accent\">\r\n      <mat-label>Configurations</mat-label>\r\n      <mat-select\r\n        [(value)]=\"selectedConfig\"\r\n        (selectionChange)=\"onConfigSelected($event.value)\"\r\n      >\r\n        <mat-option *ngFor=\"let config of configs\" [value]=\"config\">\r\n          {{ config }}\r\n        </mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n    </div>\r\n  </div>\r\n  <div *ngFor=\"let log of allLogs | keyvalue\">\r\n    <label>\r\n      <input\r\n        type=\"checkbox\"\r\n        [id]=\"log.key\"\r\n        [name]=\"log.key\"\r\n        [checked]=\"isChecked(log.key)\"\r\n        (change)=\"toggleConfig(log.key)\"\r\n      />\r\n      {{ log.key }}\r\n      @if (hasLogSpecs(log.key)) {\r\n        <button (click)=\"openLogSpecs(log.key)\" tippy=\"Edit Log Specs\">\r\n          <mat-icon class=\"specs-icon\">data_object</mat-icon>\r\n        </button>\r\n      }\r\n    </label>\r\n  </div>\r\n</div>\r\n","import { AsyncPipe, CommonModule, DatePipe, NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialog } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { LogManager } from '../../../../shared/logging/log-manager';\r\nimport { LoggingService, LogSeverities } from '../../../shared/services/logging.service';\r\nimport { ConfigEditorDialogComponent } from '../logs-config/config-editor-dialog/config-editor-dialog.component';\r\nimport { SpecsEditorDialogComponent } from '../logs-config/specs-editor-dialog/specs-editor-dialog.component';\r\n\r\n@Component({\r\n  selector: 'app-logs-config',\r\n  templateUrl: './logs-config.component.html',\r\n  styleUrls: ['./logs-config.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    AsyncPipe,\r\n    DatePipe,\r\n    CommonModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    TippyDirective,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    FormsModule,\r\n    MatInputModule,\r\n  ],\r\n})\r\nexport class LogsConfigComponent {\r\n  LogSeverities = LogSeverities;\r\n  logManager = LogManager.singleton();\r\n  allLogs = this.logManager.mergeAllSpecs;\r\n  configs: string[] = [];\r\n  selectedConfig: string | null = null;\r\n  sessionPrefix = 'logSpecs';\r\n\r\n  protected logs = this.loggingService.getLogsSignal();\r\n\r\n  constructor(\r\n    private loggingService: LoggingService,\r\n    private matDialog: MatDialog,\r\n    private snackBar: MatSnackBar\r\n  ) { this.loadConfigsFromStateManager(); }\r\n\r\n  /* Toggle Functions */\r\n  checkAll(): void {\r\n    const allChecked = Object.values(this.allLogs).every(\r\n      (specs) => specs.enabled\r\n    );\r\n\r\n    if (allChecked) {\r\n      // Reset all to unchecked\r\n      for (const spec of Object.keys(this.allLogs)) {\r\n        if (this.isChecked(spec)) {\r\n          this.toggleConfig(spec);\r\n        }\r\n      }\r\n    } else {\r\n      for (const spec of Object.keys(this.allLogs)) {\r\n        if (!this.isChecked(spec)) {\r\n          this.toggleConfig(spec);\r\n        }\r\n      }\r\n    }\r\n\r\n    this.allLogs = this.logManager.mergeAllSpecs;\r\n  }\r\n\r\n  isChecked(name: string): boolean {\r\n    return this.allLogs[name]?.enabled ?? false;\r\n  }\r\n\r\n  toggleConfig(name: string): void {\r\n    this.logManager.toggle(name);\r\n    this.allLogs = this.logManager.mergeAllSpecs;\r\n  }\r\n\r\n  /* Config Functions */\r\n  loadConfigsFromStateManager(): void {\r\n    const savedConfigs = Object.keys(this.logManager.state.cache).filter(\r\n      (key) => key.startsWith(this.sessionPrefix)\r\n    );\r\n    this.configs = savedConfigs.map((key) =>\r\n      key.replace(`${this.sessionPrefix}.`, '')\r\n    );\r\n  }\r\n\r\n  onConfigSelected(configName: string | null): void {\r\n    if (configName) {\r\n      Object.keys(this.allLogs).forEach((logKey) => {\r\n        if (this.isChecked(logKey)) {\r\n          this.toggleConfig(logKey);\r\n        }\r\n      });\r\n\r\n      const fullConfigKey = `${this.sessionPrefix}.${configName}`;\r\n      const configData = this.logManager.state.cache[fullConfigKey];\r\n\r\n      if (configData) {\r\n        Object.keys(configData).forEach((logKey) => {\r\n          const shouldEnable = (configData as any)[logKey]?.enabled ?? false;\r\n          if (shouldEnable) {\r\n            if (!this.isChecked(logKey)) {\r\n              this.toggleConfig(logKey);\r\n            }\r\n          }\r\n        });\r\n        this.allLogs = this.logManager.mergeAllSpecs;\r\n      }\r\n    }\r\n  }\r\n\r\n  saveConfig(): void {\r\n    const configName = prompt('Enter the config name:');\r\n\r\n    if (configName) {\r\n      const enabledConfigs = Object.fromEntries(\r\n        Object.entries(this.allLogs).filter(\r\n          ([, config]) => config.enabled\r\n        )\r\n      );\r\n\r\n      const fullConfigKey = `${this.sessionPrefix}.${configName}`;\r\n      this.logManager.state.add(fullConfigKey, enabledConfigs);\r\n\r\n      this.snackBar.open(`Config \"${configName}\" has been saved.`, null, {\r\n        duration: 2000,\r\n      });\r\n      this.loadConfigsFromStateManager();\r\n    }\r\n  }\r\n\r\n  exportConfig(): void {\r\n    const fullConfigKey = `${this.sessionPrefix}.${this.selectedConfig}`;\r\n    const configData = this.logManager.state.cache[fullConfigKey];\r\n\r\n    if (configData) {\r\n      this.matDialog.open(ConfigEditorDialogComponent, {\r\n        width: '800px',\r\n        data: { configData },\r\n      });\r\n    } else {\r\n      this.snackBar.open(`Config \"${this.selectedConfig}\" not found.`, null, {\r\n        duration: 2000,\r\n      });\r\n    }\r\n  }\r\n\r\n  /* Specs Editor Dialog Functions */\r\n  hasLogSpecs(logKey: string): boolean {\r\n    const specs = this.allLogs[logKey]?.specs;\r\n    return !!specs && Object.keys(specs).length > 0;\r\n  }\r\n\r\n  openLogSpecs(logKey: string): void {\r\n    let logSpecs = this.allLogs[logKey].specs;\r\n    const dialogRef = this.matDialog.open(SpecsEditorDialogComponent, {\r\n      width: '800px',\r\n      data: { logSpecs: logSpecs },\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe((result) => {\r\n      if (result) {\r\n        const updatedSpecs = JSON.parse(result);\r\n\r\n        this.allLogs[logKey].specs = updatedSpecs;\r\n\r\n        this.logManager.updateSpecs(this.allLogs);\r\n      }\r\n    });\r\n  }\r\n}\r\n","<div class=\"logs-box fancy-scrollbar-light\">\r\n  <div class=\"logs-content\">\r\n    @if (!showSettings) {\r\n      @if (logs().length === 0) {\r\n        <div>Logs are empty</div>\r\n      } \r\n      @for (log of logs(); track log) {\r\n        <div\r\n          class=\"log-entry\"\r\n          [ngClass]=\"{\r\n            'log-error': log.severity === LogSeverities.Error,\r\n            'log-warn': log.severity === LogSeverities.Warn\r\n          }\"\r\n        >\r\n          <span class=\"log-entry-part log-entry-time\"\r\n            >{{ log.time | date : \"HH:mm:ss\" }}:</span\r\n          >\r\n          <span class=\"log-entry-part log-entry-label\">{{ log.label }}</span>\r\n          <span\r\n            class=\"log-entry-part log-entry-show\"\r\n            tippy=\"Log to console\"\r\n            (click)=\"logToConsole(log)\"\r\n          >\r\n            console\r\n          </span>\r\n        </div>\r\n      }\r\n    } @else {\r\n      <app-logs-config />\r\n    }\r\n  </div>\r\n\r\n  <div class=\"log-button\">\r\n    <button mat-icon-button tippy=\"Enable Logs UI\" (click)=\"toggleDialog()\">\r\n      <mat-icon>settings</mat-icon>\r\n    </button>\r\n  </div>\r\n</div>\r\n","import { AsyncPipe, DatePipe, NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { TippyDirective } from '../../../../shared/directives/tippy.directive';\r\nimport { LogEntry, LoggingService, LogSeverities } from '../../../shared/services/logging.service';\r\nimport { LogsConfigComponent } from \"../logs-config/logs-config.component\";\r\n\r\n@Component({\r\n  selector: 'app-logs-dump',\r\n  templateUrl: './logs-dump.component.html',\r\n  styleUrls: ['./logs-dump.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    NgClass,\r\n    AsyncPipe,\r\n    DatePipe,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    LogsConfigComponent,\r\n    TippyDirective,\r\n],\r\n})\r\nexport class LogsDumpComponent {\r\n  LogSeverities = LogSeverities;\r\n  showSettings = false;\r\n\r\n  protected logs = this.loggingService.getLogsSignal();\r\n\r\n  constructor(private loggingService: LoggingService) { }\r\n\r\n  logToConsole(log: LogEntry): void {\r\n    switch (log.severity) {\r\n      case LogSeverities.Log:\r\n        console.log(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Warn:\r\n        console.warn(log.label, log.error);\r\n        break;\r\n      case LogSeverities.Error:\r\n        console.error(log.label, log.error);\r\n        break;\r\n    }\r\n  }\r\n\r\n  toggleDialog(): void {\r\n    this.showSettings = !this.showSettings;\r\n  }\r\n}\r\n\r\n","<mat-card appearance=\"raised\" class=\"mat-elevation-z4\" [ngClass]=\"{ 'debug-enabled': preferences().tab != null }\">\r\n  \r\n  <div class=\"debug-buttons-container\">\r\n    <button mat-button tippy=\"Show Data JSON\" (click)=\"toggleDialog(DebugTypes.Data)\">\r\n      <mat-icon>offline_bolt</mat-icon>\r\n      <span>Data</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Formula Designer\" (click)=\"toggleDialog(DebugTypes.Formulas)\">\r\n      <mat-icon>functions</mat-icon>\r\n      <span>Formulas</span>\r\n    </button>\r\n    <button mat-button tippy=\"Show Logs\" (click)=\"toggleDialog(DebugTypes.Logs)\">\r\n      <mat-icon>speed</mat-icon>\r\n      <span>Logs</span>\r\n    </button>\r\n    <div class=\"spacer\"></div>\r\n\r\n    <!-- Special expand button when working with formulas, to get more space -->\r\n    @if (preferences().tab != null)\r\n    {\r\n      <button mat-icon-button tippy=\"expand/shrink\" (click)=\"toggleSize()\">\r\n        <mat-icon>{{ preferences().expanded ? 'unfold_less' : 'expand' }}</mat-icon>\r\n      </button>\r\n    }\r\n    @else\r\n    {\r\n      <button mat-icon-button [tippy]=\"'Developer tools are only visible to developers. ' + pinResource('status')\" (click)=\"prefManager.toggle('pinned')\">\r\n        <mat-icon>{{ pinResource('icon') }}</mat-icon>\r\n      </button>\r\n    }\r\n\r\n    <div class=\"sxc-version\">\r\n      2sxc {{ sxcVer }}\r\n    </div>\r\n  </div>\r\n\r\n  @if (preferences().tab != null)\r\n  {\r\n    <div class=\"debug-info-container\" [ngClass]=\"'size' + (preferences().expanded ? '-xl' : '')\">\r\n      @switch (preferences().tab) {\r\n        @case (DebugTypes.Data) {\r\n          <app-data-dump></app-data-dump>\r\n        }\r\n        @case (DebugTypes.Formulas) {\r\n          <app-formula-designer></app-formula-designer>\r\n        }\r\n        @case (DebugTypes.Logs) {\r\n          <app-logs-dump></app-logs-dump>\r\n        }\r\n      }\r\n    </div>\r\n  }\r\n</mat-card>","import { NgClass } from '@angular/common';\r\nimport { Component, inject } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { Of } from '../../../../../../core';\r\nimport { TippyDirective } from '../../../shared/directives/tippy.directive';\r\nimport { classLog } from '../../../shared/logging';\r\nimport { EavWindow } from '../../../shared/models/eav-window.model';\r\nimport { UserPreferences } from '../../../shared/user/user-preferences.service';\r\nimport { DataDumpComponent } from './data-dump/data-dump.component';\r\nimport { DebugTypes } from './edit-dialog-footer.models';\r\nimport { footerPreferences } from './footer-preferences';\r\nimport { FormulaDesignerComponent } from './formula-designer/formula-designer.component';\r\nimport { LogsDumpComponent } from './logs-dump/logs-dump.component';\r\n\r\ndeclare const window: EavWindow;\r\n\r\n@Component({\r\n  selector: 'app-edit-dialog-footer',\r\n  templateUrl: './edit-dialog-footer.component.html',\r\n  styleUrls: ['./edit-dialog-footer.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    NgClass,\r\n    DataDumpComponent,\r\n    FormulaDesignerComponent,\r\n    LogsDumpComponent,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class EditDialogFooterComponent {\r\n\r\n  log = classLog({EditDialogFooterComponent});\r\n\r\n  DebugTypes = DebugTypes;\r\n\r\n  sxcVer = window.sxcVersion.substring(0, window.sxcVersion.lastIndexOf('.'));\r\n  \r\n  prefManager = inject(UserPreferences).part(footerPreferences);\r\n  preferences = this.prefManager.data;\r\n\r\n  toggleDialog(type: Of<typeof DebugTypes>): void {\r\n    const s = this.preferences();\r\n    const hideTab = s.tab === type;\r\n    const tab = hideTab ? null :  type;\r\n    const expanded = hideTab ? false : s.expanded;\r\n    const size = hideTab ? 0 : expanded ? 2 : 1;\r\n    this.prefManager.setMany({ tab, expanded, size });\r\n  }\r\n\r\n  toggleSize(): void {\r\n    const expanded = !this.preferences().expanded;\r\n    const size = expanded ? 2 : 1;\r\n    this.prefManager.setMany({ expanded, size });\r\n  }\r\n\r\n  pinResource(part: string): string {\r\n    return pinResources[(`${part}-${this.preferences().pinned}`)];\r\n  }\r\n}\r\n\r\nconst pinResources: Record<string, string> = {\r\n  ['status-true']: 'pinned - will remain visible on reload',\r\n  ['status-false']: 'not pinned - will hide on reload',\r\n  ['icon-true']: 'keep_public',\r\n  ['icon-false']: 'keep_off',\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n"],"x_google_ignoreList":[7]}