{"version":3,"file":"projects_eav-ui_src_app_content-items_content-items_component_ts.86fa9a23e4d02bac.js","mappings":"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","names":["ContentExportService","HttpServiceBase","exportContent","values","selectedIds","selectedIdsString","join","url","this","apiUrl","appId","language","defaultLanguage","contentTypeStaticName","recordExport","resourcesReferences","languageReferences","window","open","exportJson","typeName","exportEntity","id","prefix","metadata","exportDataBundle","Guid","__ngFactoryType__","factory","ɵfac","EntityFilterComponent","constructor","filter","idFilterString","idFilter","agInit","params","filterParams","isFilterActive","length","doesFilterPass","valueGetter","api","colDef","column","columnApi","context","data","node","getValue","field","some","value","includes","items","headerName","idFltr","itm","Id","getModel","filterType","setModel","model","afterGuiAttached","valueInputRef","nativeElement","focus","updateIdFilter","split","map","el","parseInt","isNaN","filterChanged","filterChangedCallback","selectors","viewQuery","rf","ctx","i0","$event","_r1","FormsModule","i1","MatRadioModule","MatFormFieldModule","i2","MatInputModule","i3","styles","_r2","ctx_r2","do","item","_EditInfo","DisableDelete","ContentItemsActionsComponent","refresh","verb","standalone","features","decls","vars","consts","template","ContentItemsActionsComponent_ng_template_12_Template","urlTo","menu_r4","MatRippleModule","MatIconModule","MatMenuModule","TippyDirective","encapsulation","ctx_r0","entities","ContentItemsEntityComponent","Array","isArray","encodedValue","htmlEncode","allowMultiValue","text","replace","ContentItemsEntityComponent_Conditional_1_Template","metadataTooltip","_c0","metadataCount","ContentItemsStatusComponent","disableMetadata","DisableMetadata","Metadata","mdf","For","Target","TargetType","KeyNumber","KeyString","KeyGuid","Title","ContentItemsStatusComponent_Conditional_4_Template","ContentItemsStatusComponent_Conditional_5_Template","published","NgClass","MatBadgeModule","metadataKeyValidator","form","control","keyType","controls","testValue","toString","eavConstants","keyTypes","number","test","patternWholeNumber","guid","hasCurly","bracket","substring","guidRegex","patternGuid","option_r2","targetType","label","vm_r3","formValues","CreateMetadataDialogComponent_Conditional_0_Conditional_14_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Conditional_3_Template","ctx_r3","targetTypeOptions","unknownTargetType","targetTypeHint","option_r5","contentType_r6","NameId","Label","CreateMetadataDialogComponent_Conditional_0_Conditional_27_For_5_Template","contentTypes","scopeOption_r7","name","CreateMetadataDialogComponent_Conditional_0_Conditional_28_For_5_Template","scopeOptions","dropdownInsertValue","item_r8","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_For_2_Template","contentItems","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Conditional_1_Template","guidedKey","contentType_r9","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_For_2_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_ng_container_0_Template","defaultKeyInput_r10","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_1_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Case_2_Template","tmp_4_0","entity","contentType","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Conditional_1_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_0_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Conditional_1_Template","_r11","toggleGuidedKey","CreateMetadataDialogComponent_Conditional_0_Conditional_14_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_15_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_16_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_17_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_18_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_19_Template","CreateMetadataDialogComponent_Conditional_0_For_25_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_26_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_27_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_28_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_36_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_37_Template","CreateMetadataDialogComponent_Conditional_0_ng_template_38_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_40_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_41_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_42_Template","CreateMetadataDialogComponent_Conditional_0_Conditional_43_Template","toggleGuidedMode","closeDialog","confirm","guidedMode","touched","invalid","errors","required","pattern","keyTypeOptions","guidedKeyExists","key","valid","CreateMetadataDialogComponent","BaseComponent","dialog","super","hostClass","contentItemsService","transient","ContentItemsService","contentTypesService","ContentTypesService","ngOnInit","Object","option","keyTypeOptions$","BehaviorSubject","scopeOptions$","guidedMode$","contentItems$","contentTypes$","guidedKey$","fetchScopes","UntypedFormGroup","addControl","UntypedFormControl","Validators","scopes","default","subscriptions","add","scopeForContentTypes","valueChanges","pipe","startWith","distinctUntilChanged","subscribe","newScope","contentTypeForContentItems","patchValue","prompt","next","fetchContentTypes","merge","getRawValue","getAll","formValues$","mapUntilObjChanged","m","combineLatest","foundTargetType","find","RxHelpers","arraysEqual","updatedForm","isAppMetadata","app","keys","UiControl","disable","viewModel$","hint","ngOnDestroy","complete","result","close","event","checked","target","scope","retrieveContentTypes","getScopes","hostVars","hostBindings","CreateMetadataDialogComponent_Conditional_0_Template","tmp_0_0","ReactiveFormsModule","i4","MatSelectModule","i5","i6","MatOptionModule","i7","NgTemplateOutlet","MatButtonModule","i8","i9","MatDialogActions","MatSlideToggleModule","i10","AsyncPipe","FieldHintComponent","ClickStopPropagationDirective","PubMetaFilterComponent","hasMetadata","publishedPassed","metadataPassed","hasMetadataPassed","ctx_r1","debugFilter","ContentItemsComponent","#entitiesSvc","#contentExportSvc","#contentItemsSvc","#contentTypesSvc","#dialogRouter","snackBar","matDialog","viewContainerRef","changeDetectorRef","log","classLog","isDebug","inject","GlobalConfigService","EntityEditService","DialogRoutingService","gridOptions","defaultGridOptions","onFilterChanged","_","#filterChanged","update","v","signal","#gridApiSigTemp","#contentTypeStaticName","getParam","retrieveContentTypeSig","undefined","#refresh","computed","getAllSig","urlToExportContent","computedObj","hasFilters","getFilterModel","ids","forEachNodeAfterFilterAndSort","n","push","#urlTo","effect","fetchColumns","doOnDialogClosed","fetchItems","onGridReady","set","getColumns","columns","columnsWithoutEphemeral","IsEphemeral","columnDefs","#buildColumnDefs","filterModel","buildFilterModel","urlFilters","filters","charAt","atob","JSON","parse","console","error","IsPublished","IsMetadata","Status","entries","forEach","c","type","filterTo","JsonHelpers","tryParse","sessionStorage","getItem","keyFilters","setColumnDefs","a","setFilterModel","urlSubRoute","#urlToMetadata","GoToMetadata","getUrlEntity","_Title","editItem","EditPrep","newFromType","editId","formUrl","convertFormToUrl","navRelative","#urlToOpenEditView","urlToNewItem","filesDropped","files","importFile","lastIndexOf","toLocaleLowerCase","urlToImportContent","importItem","f","state","urlToImportItem","createMetadata","autoFocus","width","afterClosed","itemFor","newMetadataFromInfo","markForCheck","warn","duration","ColumnDefinitions","IdWithDefaultRenderer","cellClass","p","ReadOnly","cellRendererParams","idFieldParamsTooltipGetter","headerClass","cellRenderer","TextWidePrimary","flex","AgGridHelper","cellLink","headerTooltip","sortable","_Used","_Uses","ActionsPinnedRight3","#urlToClone","export","delete","StaticName","minWidth","Type","DataTypeCatalog","Entity","AllowMultiValue","valueGetterEntityField","DateTime","useTimePicker","UseTimePicker","valueGetterDateTime","Boolean","valueGetterBoolean","BooleanFilterComponent","Number","copy","_RepositoryId","err","dismiss","ExceptionMessage","rawValue","ContentItemsComponent_Conditional_9_Template","ContentItemsComponent_Conditional_34_Template","Name","tmp_1_0","Properties","ListInstructions","RouterOutlet","SafeHtmlPipe","DragAndDropDirective","ToggleDebugDirective","SxcGridModule","getHttpApiUrl","webApiEntityList","initial","getSignal","webApiFieldsAll","staticName","file","from","toBase64","switchMap","fileBase64","http","post","webApiEntityRoot","AppId","ContentBase64","success","Success","Messages","link","body","classes","FieldHintComponent_Case_1_ng_container_1_Template","content_r2","FieldHintComponent_Case_2_ng_container_1_Template","isError","input","isShort","toggleIsShort","inputs","ngContentSelectors","FieldHintComponent_Case_1_Template","FieldHintComponent_Case_2_Template","FieldHintComponent_ng_template_3_Template","_c1","tmp_2_0","onClick","stopPropagation","globalConfigService","navigator","platform","match","metaKey","ctrlKey","shiftKey","altKey","toggleDebugEnabled","getSelection","removeAllRanges","Custom","Empty","Hyperlink","String","logSpecs","ServiceBase","router","route","snapshot","paramMap","get","getParams","reduce","acc","getQueryParam","queryParamMap","getQueryParams","getCurrentNavigation","extras","callback","l","fnIf","childDialogClosed$","end","tree","createUrlTree","relativeTo","serializeUrl","navPath","navigate","commands","events","NavigationEnd","firstChild","pairwise","hadChildBefore","hasChildNow","mapUntilChanged","fn","isEqual","boolEquals","x","y","stringEquals","valueEquals","objectsEqual","obj1","obj2","keys1","keys2","every","key1","hasOwnProperty","index","distinct","array","indexOf","create","zoneId","entityId","tryForce","force","nextId","BADGE_CONTENT_CLASS","badgeApps","Set","_MatBadgeStyleLoader","ɵcmp","changeDetection","MatBadge","color","_color","_setColor","content","_content","newContent","_updateRenderedContent","description","_description","newDescription","_updateDescription","_ngZone","_elementRef","_ariaDescriber","_renderer","_animationMode","overlap","position","size","_id","_isInitialized","_interactivityChecker","InteractivityChecker","_document","DOCUMENT","appRef","ApplicationRef","has","componentRef","createComponent","environmentInjector","EnvironmentInjector","onDestroy","destroy","isAbove","isAfter","getBadgeElement","_badgeElement","_clearExistingBadges","_createBadgeElement","destroyNode","_inlineBadgeDescription","remove","removeDescription","_isHostInteractive","isFocusable","ignoreVisibility","badgeElement","createElement","activeClass","setAttribute","classList","appendChild","requestAnimationFrame","runOutsideAngular","newContentNormalized","trim","textContent","_removeInlineDescription","describe","_updateInlineDescription","colorPalette","badges","querySelectorAll","ANIMATION_MODULE_TYPE","ɵdir","hostAttrs","hidden","disabled","booleanAttribute","ɵmod","ɵinj","imports","A11yModule","MatCommonModule"],"ignoreList":[],"sourceRoot":"webpack:///","sources":["./projects/eav-ui/src/app/content-export/services/content-export.service.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.ts","./projects/eav-ui/src/app/shared/components/entity-filter/entity-filter.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.html","./projects/eav-ui/src/app/content-items/content-items-actions/content-items-actions.component.ts","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.html","./projects/eav-ui/src/app/content-items/content-items-entity/content-items-entity.component.ts","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.html","./projects/eav-ui/src/app/content-items/content-items-status/content-items-status.component.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/metadata-key.validator.ts","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.html","./projects/eav-ui/src/app/content-items/create-metadata-dialog/create-metadata-dialog.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.ts","./projects/eav-ui/src/app/content-items/pub-meta-filter/pub-meta-filter.component.html","./projects/eav-ui/src/app/content-items/content-items.component.html","./projects/eav-ui/src/app/content-items/content-items.component.ts","./projects/eav-ui/src/app/content-items/content-items.helpers.ts","./projects/eav-ui/src/app/content-items/services/content-items.service.ts","./projects/eav-ui/src/app/shared/ag-grid/ag-grid-helper.ts","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.html","./projects/eav-ui/src/app/shared/components/field-hint/field-hint.component.ts","./projects/eav-ui/src/app/shared/constants/dropdown-insert-value.constant.ts","./projects/eav-ui/src/app/shared/directives/click-stop-propagation.directive.ts","./projects/eav-ui/src/app/shared/directives/toggle-debug.directive.ts","./projects/eav-ui/src/app/shared/fields/data-type-catalog.ts","./projects/eav-ui/src/app/shared/routing/dialog-routing.service.ts","./projects/eav-ui/src/app/shared/rxJs/mapUntilChanged.ts","./projects/eav-ui/src/app/shared/rxJs/rx.helpers.ts","./projects/eav-ui/src/app/shared/services/entity-edit.service.ts","./node_modules/@angular/material/fesm2022/badge.mjs"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentExport } from '../models/content-export.model';\r\n\r\nconst webApiEntityRootDownload = 'admin/entity/Download';\r\nconst webApiEntityRootJson = 'admin/entity/Json';\r\nconst webApiTypeRootJson = 'admin/type/Json';\r\nconst webApiTypeRootJsonBundleExport = 'admin/type/JsonBundleExport';\r\n\r\n\r\n@Injectable()\r\nexport class ContentExportService extends HttpServiceBase {\r\n\r\n  exportContent(values: ContentExport, selectedIds: number[]) {\r\n    const selectedIdsString = selectedIds ? '&selectedids=' + selectedIds.join() : '';\r\n    const url = this.apiUrl(webApiEntityRootDownload)\r\n      + '?appId=' + this.appId\r\n      + '&language=' + values.language\r\n      + '&defaultLanguage=' + values.defaultLanguage\r\n      + '&contentType=' + values.contentTypeStaticName\r\n      + '&recordExport=' + values.recordExport\r\n      + '&resourcesReferences=' + values.resourcesReferences\r\n      + '&languageReferences=' + values.languageReferences\r\n      + selectedIdsString;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportJson(typeName: string) {\r\n    const url = this.apiUrl(webApiTypeRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&name=' + typeName;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  exportEntity(id: number, prefix: string, metadata: boolean) {\r\n    const url = this.apiUrl(webApiEntityRootJson)\r\n      + '?appId=' + this.appId\r\n      + '&id=' + id\r\n      + '&prefix=' + prefix\r\n      + '&withMetadata=' + metadata;\r\n\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n  // TODO: @2dg\r\n  // - one one hand, this should be in a separate service BundleService\r\n  // - ...but: it would be better to make the service just generate the URL, and then use a link in the template directly (in a _blank window)\r\n  exportDataBundle(Guid: string) {\r\n    const url = this.apiUrl(webApiTypeRootJsonBundleExport)\r\n      + '?appId=' + this.appId\r\n      + '&exportConfiguration=' + Guid\r\n      + '&indentation=' + 1;\r\n    window.open(url, '_blank', '');\r\n  }\r\n\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { EntityFilterModel } from './entity-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\n\r\n@Component({\r\n  selector: 'app-entity-filter',\r\n  templateUrl: './entity-filter.component.html',\r\n  styleUrls: ['./entity-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    MatRadioModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n  ]\r\n})\r\nexport class EntityFilterComponent implements IFilterAngularComp {\r\n  @ViewChild('valueInput') private valueInputRef: ElementRef<HTMLInputElement>;\r\n\r\n  filter = '';\r\n  idFilterString = '';\r\n\r\n  private filterParams: IFilterParams;\r\n  private idFilter: number[] = [];\r\n\r\n  agInit(params: IFilterParams): void {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.filter !== '' || this.idFilter.length > 0;\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    if (this.filter !== '') {\r\n      const valueGetterParams: ValueGetterParams = {\r\n        api: this.filterParams.api,\r\n        colDef: this.filterParams.colDef,\r\n        column: this.filterParams.column,\r\n        columnApi: this.filterParams.columnApi,\r\n        context: this.filterParams.context,\r\n        data: params.node.data,\r\n        getValue: (field) => params.node.data[field],\r\n        node: params.node,\r\n      };\r\n      const values: string[] | undefined = this.filterParams.valueGetter(valueGetterParams);\r\n      if (values == null) { return false; }\r\n      if (!values.some(value => !!value && value.includes(this.filter))) { return false; }\r\n    }\r\n\r\n    if (this.idFilter.length > 0) {\r\n      const items: { Id: number; Title: string; }[] | undefined = params.data[this.filterParams.colDef.headerName];\r\n      if (items == null) { return false; }\r\n      if (!this.idFilter.some(idFltr => items.some(itm => itm.Id === idFltr))) { return false; }\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  getModel(): EntityFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n    const model: EntityFilterModel = {\r\n      filterType: 'entity',\r\n      filter: this.filter,\r\n      idFilter: this.idFilter,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: EntityFilterModel): void {\r\n    this.filter = model?.filter ?? '';\r\n    this.idFilter = model?.idFilter ?? [];\r\n    this.idFilterString = model?.idFilter?.join(',') ?? '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams): void {\r\n    this.valueInputRef.nativeElement.focus();\r\n  }\r\n\r\n  updateIdFilter(): void {\r\n    this.idFilter = this.idFilterString.split(',').map(el => parseInt(el, 10)).filter(el => !isNaN(el));\r\n  }\r\n\r\n  filterChanged(): void {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>Value</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"filter\" (ngModelChange)=\"filterChanged()\" #valueInput>\r\n</mat-form-field>\r\n\r\n<mat-form-field color=\"accent\" class=\"eav-mat-form-field\">\r\n  <mat-label>IDs (comma separated)</mat-label>\r\n  <input matInput type=\"text\" [(ngModel)]=\"idFilterString\" (ngModelChange)=\"updateIdFilter(); filterChanged()\">\r\n</mat-form-field>\r\n","<div class=\"actions-component\">\r\n  <a class=\"eav-grid-action-button default-link highlight\" matRipple tippy=\"Clone\" [href]=\"params.urlTo('clone', item)\">\r\n    <mat-icon>file_copy</mat-icon>\r\n  </a>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"Export\" (click)=\"do('export')\">\r\n    <mat-icon>cloud_download</mat-icon>\r\n  </div>\r\n  <div class=\"eav-grid-action-button highlight\" matRipple tippy=\"More\" [matMenuTriggerFor]=\"menu\">\r\n    <mat-icon>more_horiz</mat-icon>\r\n  </div>\r\n</div>\r\n\r\n<mat-menu #menu=\"matMenu\" class=\"grid-more-menu\">\r\n  <ng-template matMenuContent>\r\n    <button mat-menu-item [disabled]=\"item._EditInfo.DisableDelete\" (click)=\"do('delete')\">\r\n      <mat-icon>delete</mat-icon>\r\n      <span>Delete</span>\r\n    </button>\r\n  </ng-template>\r\n</mat-menu>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsActionsParams, ContentItemType } from './content-items-actions.models';\r\n\r\ntype GoToUrls = 'clone'\r\n\r\n@Component({\r\n  selector: 'app-data-bundle-actions',\r\n  templateUrl: './content-items-actions.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatRippleModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsActionsComponent implements ICellRendererAngularComp {\r\n  protected item: ContentItem;\r\n\r\n  public params: ContentItemsActionsParams & {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsActionsComponent['params']): void {\r\n    this.params = params;\r\n    this.item = params.data;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  do(verb: ContentItemType): void {\r\n    this.params.do(verb, this.item);\r\n  }\r\n}\r\n","<div [tippy]=\"encodedValue\">\r\n  @if (entities) {\r\n  <span class=\"more-entities\">{{ entities }}</span>\r\n  }\r\n  {{ encodedValue }}\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { ExtendedColDef } from '../models/extended-col-def.model';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\n\r\n@Component({\r\n  selector: 'app-content-items-entity',\r\n  templateUrl: './content-items-entity.component.html',\r\n  styleUrls: ['./content-items-entity.component.scss'],\r\n  standalone: true,\r\n  imports: [TippyDirective,],\r\n})\r\nexport class ContentItemsEntityComponent implements ICellRendererAngularComp {\r\n  encodedValue: string;\r\n  entities: number;\r\n\r\n  agInit(params: ICellRendererParams) {\r\n    if (!Array.isArray(params.value)) return;\r\n\r\n    this.encodedValue = this.htmlEncode(params.value.join(', '));\r\n    if ((params.colDef as ExtendedColDef).allowMultiValue) {\r\n      this.entities = params.value.length;\r\n    }\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n\r\n  // htmlencode strings (source: https://stackoverflow.com/a/7124052)\r\n  private htmlEncode(text: string) {\r\n    return text.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n  }\r\n}\r\n","<div class=\"actions-component\">\r\n  <div class=\"eav-grid-action-button icon\" [tippy]=\"value.published ? 'Published' : 'Not published'\">\r\n    <mat-icon>{{ value.published ? 'visibility' : 'visibility_off' }}</mat-icon>\r\n  </div>\r\n\r\n  @if (!disableMetadata) {\r\n    <a\r\n      class=\"eav-grid-action-button default-link highlight\"\r\n      matRipple\r\n      [tippy]=\"metadataTooltip\"\r\n      [href]=\"params.urlTo('openMetadata', item)\"\r\n      [ngClass]=\"{ 'hide-until-row-hover': !metadataCount && !value.metadata }\"\r\n    >\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </a>\r\n  }\r\n  @else if (disableMetadata && !(!metadataCount && !value.metadata)) {\r\n    <div class=\"eav-grid-action-button disabled\">\r\n      <mat-icon\r\n        [matBadge]=\"metadataCount\"\r\n        matBadgeColor=\"accent\"\r\n        matBadgeSize=\"small\"\r\n        matBadgeDisabled=\"true\"\r\n        [matBadgeHidden]=\"!metadataCount\"\r\n        matBadgePosition=\"below after\"\r\n        aria-hidden=\"false\"\r\n        >{{ value.metadata ? 'loyalty' : 'local_offer' }}\r\n      </mat-icon>\r\n    </div>\r\n  }\r\n</div>\r\n","import { ICellRendererAngularComp } from '@ag-grid-community/angular';\r\nimport { ICellRendererParams } from '@ag-grid-community/core';\r\nimport { NgClass } from '@angular/common';\r\nimport { Component } from '@angular/core';\r\nimport { MatBadgeModule } from '@angular/material/badge';\r\nimport { MatRippleModule } from '@angular/material/core';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { EavForInAdminUi } from '../../edit/shared/models/eav';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { PubMeta } from '../pub-meta-filter/pub-meta-filter.model';\r\n\r\ntype GoToUrls = 'openMetadata'\r\n\r\n@Component({\r\n  selector: 'app-content-items-status',\r\n  templateUrl: './content-items-status.component.html',\r\n  styleUrls: ['./content-items-status.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatIconModule,\r\n    MatRippleModule,\r\n    NgClass,\r\n    MatBadgeModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsStatusComponent implements ICellRendererAngularComp {\r\n  value: PubMeta;\r\n  disableMetadata: boolean;\r\n  metadataCount: number;\r\n  metadataTooltip: string;\r\n\r\n  protected item: ContentItem;\r\n\r\n  public params: {\r\n    urlTo(verb: GoToUrls, item: ContentItem): string;\r\n  };\r\n\r\n  agInit(params: ICellRendererParams & ContentItemsStatusComponent['params']): void {\r\n    this.params = params;\r\n    this.value = params.value;\r\n    this.item = params.data;\r\n    this.disableMetadata = this.item._EditInfo.DisableMetadata;\r\n\r\n    this.metadataCount = this.item.Metadata?.length ?? 0;\r\n\r\n    const mdf = this.item.For as EavForInAdminUi;\r\n    this.metadataTooltip = mdf\r\n      ? 'This item is metadata for:'\r\n      + `\\nTarget: ${mdf.Target}`\r\n      + `\\nTargetType: ${mdf.TargetType}`\r\n      + (mdf.KeyNumber ? `\\nNumber: ${mdf.KeyNumber}` : '')\r\n      + (mdf.KeyString ? `\\nString: ${mdf.KeyString}` : '')\r\n      + (mdf.KeyGuid ? `\\nGuid: ${mdf.KeyGuid}` : '')\r\n      + (mdf.Title ? `\\nTitle: ${mdf.Title}` : '')\r\n      : 'This item is not metadata.';\r\n    this.metadataTooltip += `\\n\\nThis item has ${this.metadataCount > 0 ? this.metadataCount : 'no'} other metadata ${this.metadataCount === 1 ? 'item' : 'items'} attached to it.`;\r\n  }\r\n\r\n  refresh(params?: any): boolean {\r\n    return true;\r\n  }\r\n}\r\n","import { AbstractControl, UntypedFormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Of } from '../../../../../core';\r\nimport { eavConstants, MetadataKeyTypes } from '../../shared/constants/eav.constants';\r\nimport { guidRegex } from '../../shared/constants/guid.constants';\r\n\r\nexport function metadataKeyValidator(form: UntypedFormGroup): ValidatorFn {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    if (!control.value) { return null; }\r\n\r\n    const keyType: Of<typeof MetadataKeyTypes> = form.controls['keyType'].value;\r\n    const testValue = (control.value as string | number).toString();\r\n\r\n    switch (keyType) {\r\n      case eavConstants.keyTypes.number:\r\n        const isWholeNumber = /^[0-9]+$/.test(testValue);\r\n        return !isWholeNumber ? { patternWholeNumber: true } : null;\r\n      case eavConstants.keyTypes.guid:\r\n        // allow curly brackets around guid\r\n        const hasCurly = ['{', '}'].some(bracket => testValue.includes(bracket));\r\n        const guid = testValue.substring(\r\n          hasCurly ? 1 : 0,\r\n          hasCurly ? testValue.length - 1 : testValue.length,\r\n        );\r\n        const isGuid = guidRegex().test(guid);\r\n        return !isGuid ? { patternGuid: true } : null;\r\n      case eavConstants.keyTypes.string:\r\n        return null;\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n}\r\n","@if (viewModel$ | async; as vm) {\r\n  <div class=\"eav-dialog\">\r\n    <div class=\"eav-dialog-header\">\r\n      <div class=\"eav-dialog-header__title\">Create Metadata</div>\r\n    </div>\r\n    <div class=\"eav-dialog-content\">\r\n      <p>\r\n        This is a special operation to add an item which is metadata for another item, see\r\n        <a href=\"https://go.2sxc.org/metadata\" target=\"_blank\">docs</a>.\r\n      </p>\r\n      <form [formGroup]=\"form\">\r\n        <!-- Target Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Target</mat-label>\r\n          @if (vm.guidedMode) {\r\n            <mat-select formControlName=\"targetType\" required>\r\n              @for (option of targetTypeOptions; track option) {\r\n                <mat-option [value]=\"option.targetType\">\r\n                  {{ option.label }}\r\n                </mat-option>\r\n              }\r\n              @if (vm.unknownTargetType) {\r\n                <mat-option [value]=\"vm.formValues.targetType\">\r\n                  {{ vm.formValues.targetType }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          }\r\n          @if (!vm.guidedMode) {\r\n            <input matInput type=\"number\" min=\"0\" formControlName=\"targetType\" required />\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['targetType'].touched && !form.controls['targetType'].invalid && vm.unknownTargetType) {\r\n          <app-field-hint [isError]=\"false\">\r\n            Warning: you entered an unknown target type. This may work or may not. Please be sure you know what you're doing\r\n          </app-field-hint>\r\n        }\r\n        @if (vm.targetTypeHint) {\r\n          <app-field-hint [isError]=\"false\">{{ vm.targetTypeHint }}</app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['targetType'].touched && form.controls['targetType'].errors?.pattern) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        <!-- Key Type -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key type</mat-label>\r\n          <mat-select formControlName=\"keyType\" required>\r\n            @for (option of vm.keyTypeOptions; track option) {\r\n              <mat-option [value]=\"option\">\r\n                {{ option }}\r\n              </mat-option>\r\n            }\r\n          </mat-select>\r\n        </mat-form-field>\r\n        @if (form.controls['keyType'].touched && form.controls['keyType'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        <!-- Content Type for Content Items -->\r\n        @if (vm.guidedMode && vm.formValues.targetType === eavConstants.metadata.entity.targetType) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Content Type</mat-label>\r\n            <mat-select formControlName=\"contentTypeForContentItems\" [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n              @for (contentType of vm.contentTypes; track contentType) {\r\n                <mat-option [value]=\"contentType.NameId\">\r\n                  {{ contentType.Label }}\r\n                </mat-option>\r\n              }\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <!-- Scope for Content Types -->\r\n        @if (\r\n          vm.guidedMode &&\r\n          (vm.formValues.targetType === eavConstants.metadata.entity.targetType ||\r\n            vm.formValues.targetType === eavConstants.metadata.contentType.targetType)\r\n        ) {\r\n          <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n            <mat-label>Scope</mat-label>\r\n            <mat-select formControlName=\"scopeForContentTypes\" [placeholder]=\"!vm.scopeOptions.length ? 'No items found' : ''\">\r\n              @for (scopeOption of vm.scopeOptions; track scopeOption) {\r\n                <mat-option [value]=\"scopeOption.value\">\r\n                  {{ scopeOption.name }}\r\n                </mat-option>\r\n              }\r\n              <mat-option [value]=\"dropdownInsertValue\">Other...</mat-option>\r\n            </mat-select>\r\n          </mat-form-field>\r\n        }\r\n        <app-field-hint>\r\n          The scope should almost never be changed -\r\n          <a href=\"https://2sxc.org/help?tag=scope\" target=\"_blank\" appClickStopPropagation>see help</a>\r\n        </app-field-hint>\r\n        <!-- Key -->\r\n        <mat-form-field color=\"accent\" style=\"width: 100%; margin-bottom: 8px\">\r\n          <mat-label>Key</mat-label>\r\n          @if (vm.guidedMode) {\r\n            @switch (vm.formValues.targetType) {\r\n              @case (eavConstants.metadata.entity.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentItems.length ? 'No items found' : ''\">\r\n                    @for (item of vm.contentItems; track item) {\r\n                      <mat-option [value]=\"item.Guid\"> {{ item.Title }} ({{ item.Id }}) </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @case (eavConstants.metadata.contentType.targetType) {\r\n                @if (vm.guidedKey) {\r\n                  <mat-select formControlName=\"key\" required [placeholder]=\"!vm.contentTypes.length ? 'No items found' : ''\">\r\n                    @for (contentType of vm.contentTypes; track contentType) {\r\n                      <mat-option [value]=\"contentType.NameId\">\r\n                        {{ contentType.Label }}\r\n                      </mat-option>\r\n                    }\r\n                  </mat-select>\r\n                } @else {\r\n                  <input matInput type=\"text\" formControlName=\"key\" required />\r\n                }\r\n              }\r\n              @default {\r\n                <ng-container *ngTemplateOutlet=\"defaultKeyInput\"></ng-container>\r\n              }\r\n            }\r\n          } @else {\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          }\r\n          <ng-template #defaultKeyInput>\r\n            @if (vm.formValues.keyType !== eavConstants.keyTypes.number) {\r\n              <input matInput type=\"text\" formControlName=\"key\" required />\r\n            }\r\n            @if (vm.formValues.keyType === eavConstants.keyTypes.number) {\r\n              <input matInput type=\"number\" formControlName=\"key\" required />\r\n            }\r\n          </ng-template>\r\n          @if (vm.guidedMode && vm.guidedKeyExists) {\r\n            <div matTextSuffix class=\"eav-selection-suffix\">\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: vm.guidedKey }\"\r\n                tippy=\"Pick existing value\"\r\n                (click)=\"toggleGuidedKey(true)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">search</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                class=\"eav-selection-suffix-button\"\r\n                type=\"button\"\r\n                [ngClass]=\"{ active: !vm.guidedKey }\"\r\n                tippy=\"Manual entry\"\r\n                (click)=\"toggleGuidedKey(false)\"\r\n              >\r\n                <mat-icon class=\"eav-icon\">text_fields</mat-icon>\r\n              </button>\r\n            </div>\r\n          }\r\n        </mat-form-field>\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.required) {\r\n          <app-field-hint [isError]=\"true\"> This field is required </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternWholeNumber) {\r\n          <app-field-hint [isError]=\"true\"> Must be a whole number </app-field-hint>\r\n        }\r\n        @if (form.controls['key'].touched && form.controls['key'].errors?.patternGuid) {\r\n          <app-field-hint [isError]=\"true\"> Must be a valid GUID </app-field-hint>\r\n        }\r\n      </form>\r\n    </div>\r\n    <mat-dialog-actions class=\"eav-dialog-actions\">\r\n      <mat-slide-toggle\r\n        color=\"accent\"\r\n        [tippy]=\"\r\n          vm.guidedMode\r\n            ? 'Guided mode helps you select options that work'\r\n            : 'Manual mode is for advanced uses and allows you to insert any values'\r\n        \"\r\n        [checked]=\"vm.guidedMode\"\r\n        (change)=\"toggleGuidedMode($event)\"\r\n      >\r\n        {{ vm.guidedMode ? 'Guided' : 'Manual' }}\r\n      </mat-slide-toggle>\r\n      <div>\r\n        <button mat-raised-button type=\"button\" (click)=\"closeDialog()\">Cancel</button>\r\n        <button mat-raised-button type=\"button\" color=\"accent\" [disabled]=\"!form.valid\" (click)=\"confirm()\">Confirm</button>\r\n      </div>\r\n    </mat-dialog-actions>\r\n  </div>\r\n}\r\n","import { AsyncPipe, NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, HostBinding, OnDestroy, OnInit } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule, UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatOptionModule } from '@angular/material/core';\r\nimport { MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatSlideToggleChange, MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { BehaviorSubject, combineLatest, distinctUntilChanged, map, merge, Observable, startWith } from 'rxjs';\r\nimport { Of, transient } from '../../../../../core';\r\nimport { ContentType } from '../../app-administration/models';\r\nimport { ContentTypesService } from '../../app-administration/services';\r\nimport { UiControl } from '../../edit/shared/controls/ui-control';\r\nimport { BaseComponent } from '../../shared/components/base.component';\r\nimport { FieldHintComponent } from '../../shared/components/field-hint/field-hint.component';\r\nimport { dropdownInsertValue } from '../../shared/constants/dropdown-insert-value.constant';\r\nimport { eavConstants, MetadataKeyTypes, ScopeOption } from '../../shared/constants/eav.constants';\r\nimport { ClickStopPropagationDirective } from '../../shared/directives/click-stop-propagation.directive';\r\nimport { TippyDirective } from '../../shared/directives/tippy.directive';\r\nimport { mapUntilObjChanged } from '../../shared/rxJs/mapUntilChanged';\r\nimport { RxHelpers } from '../../shared/rxJs/rx.helpers';\r\nimport { Context } from '../../shared/services/context';\r\nimport { ContentItem } from '../models/content-item.model';\r\nimport { ContentItemsService } from '../services/content-items.service';\r\nimport { MetadataDialogViewModel, MetadataFormValues, MetadataInfo, TargetTypeOption } from './create-metadata-dialog.models';\r\nimport { metadataKeyValidator } from './metadata-key.validator';\r\n\r\n@Component({\r\n  selector: 'app-create-metadata-dialog',\r\n  templateUrl: './create-metadata-dialog.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MatFormFieldModule,\r\n    MatSelectModule,\r\n    MatOptionModule,\r\n    MatInputModule,\r\n    NgTemplateOutlet,\r\n    MatButtonModule,\r\n    NgClass,\r\n    MatIconModule,\r\n    MatDialogActions,\r\n    MatSlideToggleModule,\r\n    AsyncPipe,\r\n    FieldHintComponent,\r\n    ClickStopPropagationDirective,\r\n    TippyDirective,\r\n  ]\r\n})\r\nexport class CreateMetadataDialogComponent extends BaseComponent implements OnInit, OnDestroy {\r\n  @HostBinding('className') hostClass = 'dialog-component';\r\n\r\n  eavConstants = eavConstants;\r\n  dropdownInsertValue = dropdownInsertValue;\r\n  form: UntypedFormGroup;\r\n  viewModel$: Observable<MetadataDialogViewModel>;\r\n  targetTypeOptions: TargetTypeOption[];\r\n\r\n  /** Constants from metadata definitions */\r\n  private keyTypeOptions: Of<typeof MetadataKeyTypes>[];\r\n  private guidedMode$: BehaviorSubject<boolean>;\r\n  /** Currently available options */\r\n  private keyTypeOptions$: BehaviorSubject<Of<typeof MetadataKeyTypes>[]>;\r\n  private scopeOptions$: BehaviorSubject<ScopeOption[]>;\r\n  private contentItems$: BehaviorSubject<ContentItem[]>;\r\n  private contentTypes$: BehaviorSubject<ContentType[]>;\r\n  private guidedKey$: BehaviorSubject<boolean>;\r\n\r\n  private contentItemsService = transient(ContentItemsService);\r\n  \r\n  private contentTypesService = transient(ContentTypesService);\r\n  constructor(\r\n    private dialog: MatDialogRef<CreateMetadataDialogComponent>,\r\n    private context: Context,\r\n  ) {\r\n    super();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.targetTypeOptions = Object.values(eavConstants.metadata).map(option => ({ ...option }));\r\n    this.keyTypeOptions = Object.values(eavConstants.keyTypes);\r\n\r\n    this.keyTypeOptions$ = new BehaviorSubject<Of<typeof MetadataKeyTypes>[]>([]);\r\n    this.scopeOptions$ = new BehaviorSubject<ScopeOption[]>([]);\r\n    this.guidedMode$ = new BehaviorSubject(true);\r\n    this.contentItems$ = new BehaviorSubject<ContentItem[]>([]);\r\n    this.contentTypes$ = new BehaviorSubject<ContentType[]>([]);\r\n    this.guidedKey$ = new BehaviorSubject(true);\r\n\r\n    this.fetchScopes();\r\n\r\n    this.form = new UntypedFormGroup({});\r\n    this.form.addControl('targetType', new UntypedFormControl(eavConstants.metadata.entity.targetType, [Validators.required, Validators.pattern(/^[0-9]+$/)]));\r\n    this.form.addControl('keyType', new UntypedFormControl(eavConstants.metadata.entity.keyType, [Validators.required]));\r\n    this.form.addControl('contentTypeForContentItems', new UntypedFormControl(null));\r\n    this.form.addControl('scopeForContentTypes', new UntypedFormControl(eavConstants.scopes.default.value));\r\n    this.form.addControl('key', new UntypedFormControl(null, [Validators.required, metadataKeyValidator(this.form)]));\r\n\r\n    this.subscriptions.add(\r\n      this.form.controls['scopeForContentTypes'].valueChanges.pipe(\r\n        startWith(this.form.controls['scopeForContentTypes'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe((newScope: string) => {\r\n        if (this.form.controls['contentTypeForContentItems'].value != null) {\r\n          this.form.controls['contentTypeForContentItems'].patchValue(null);\r\n        }\r\n\r\n        if (newScope === dropdownInsertValue) {\r\n          newScope = prompt('This is an advanced feature to show content-types of another scope. Don\\'t use this if you don\\'t know what you\\'re doing, as content-types of other scopes are usually hidden for a good reason.') || eavConstants.scopes.default.value;\r\n          if (!this.scopeOptions$.value.some(option => option.value === newScope)) {\r\n            const newScopeOption: ScopeOption = {\r\n              name: newScope,\r\n              value: newScope,\r\n            };\r\n            this.scopeOptions$.next([newScopeOption, ...this.scopeOptions$.value]);\r\n          }\r\n          this.form.controls['scopeForContentTypes'].patchValue(newScope);\r\n        } else {\r\n          this.fetchContentTypes(newScope);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if target or keyType changed\r\n    this.subscriptions.add(\r\n      merge(\r\n        this.form.controls['targetType'].valueChanges.pipe(distinctUntilChanged()),\r\n        this.form.controls['keyType'].valueChanges.pipe(distinctUntilChanged()),\r\n      ).subscribe(() => {\r\n        this.guidedKey$.next(true);\r\n\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n      })\r\n    );\r\n\r\n    // reset key if contentTypeForContentItems changed\r\n    this.subscriptions.add(\r\n      this.form.controls['contentTypeForContentItems'].valueChanges.pipe(\r\n        startWith(this.form.controls['contentTypeForContentItems'].value),\r\n        distinctUntilChanged(),\r\n      ).subscribe(contentTypeStaticName => {\r\n        const formValues: MetadataFormValues = this.form.getRawValue();\r\n        if (formValues.targetType === eavConstants.metadata.entity.targetType && formValues.key != null) {\r\n          const updatedForm: Partial<MetadataFormValues> = {\r\n            key: null,\r\n          };\r\n          this.form.patchValue(updatedForm);\r\n        }\r\n\r\n        this.contentItemsService.getAll(contentTypeStaticName).subscribe(items => {\r\n          this.contentItems$.next(items);\r\n        });\r\n      })\r\n    );\r\n\r\n    const formValues$ = this.form.valueChanges.pipe(\r\n      startWith(this.form.getRawValue() as MetadataFormValues),\r\n      map(() => this.form.getRawValue() as MetadataFormValues),\r\n      mapUntilObjChanged(m => m)\r\n      // distinctUntilChanged(RxHelpers.objectsEqual),\r\n    );\r\n\r\n    this.subscriptions.add(\r\n      combineLatest([formValues$, this.guidedMode$]).subscribe(([formValues, guidedMode]) => {\r\n        // keyTypeOptions depend on targetType and advanced\r\n        const foundTargetType = this.targetTypeOptions.find(option => option.targetType === formValues.targetType);\r\n        const keyTypeOptions = guidedMode && foundTargetType ? [foundTargetType.keyType] : [...this.keyTypeOptions];\r\n        if (!RxHelpers.arraysEqual(keyTypeOptions, this.keyTypeOptions$.value))\r\n          this.keyTypeOptions$.next(keyTypeOptions);\r\n\r\n        // update form if keyType is not available\r\n        const updatedForm: Partial<MetadataFormValues> = {};\r\n        if (!this.keyTypeOptions$.value.includes(formValues.keyType))\r\n          updatedForm.keyType = this.keyTypeOptions$.value[0];\r\n\r\n        // if target is app key must be current app id\r\n        const isAppMetadata = guidedMode && formValues.targetType === eavConstants.metadata.app.targetType;\r\n        if (isAppMetadata && formValues.key !== this.context.appId)\r\n          updatedForm.key = this.context.appId;\r\n\r\n        if (Object.keys(updatedForm).length)\r\n          this.form.patchValue(updatedForm);\r\n\r\n        const keyTypeDisabled = guidedMode && this.keyTypeOptions$.value.length <= 1;\r\n        UiControl.disable(this.form.controls['keyType'], keyTypeDisabled);\r\n        UiControl.disable(this.form.controls['key'], isAppMetadata);\r\n      })\r\n    );\r\n\r\n    this.viewModel$ = combineLatest([\r\n      combineLatest([this.guidedMode$, this.keyTypeOptions$, this.scopeOptions$, this.contentItems$, this.contentTypes$]),\r\n      combineLatest([formValues$, this.guidedKey$]),\r\n    ]).pipe(\r\n      map(([\r\n        [guidedMode, keyTypeOptions, scopeOptions, contentItems, contentTypes],\r\n        [formValues, guidedKey],\r\n      ]) => {\r\n        const viewModel: MetadataDialogViewModel = {\r\n          guidedMode,\r\n          unknownTargetType: !this.targetTypeOptions.some(option => option.targetType === formValues.targetType),\r\n          targetTypeHint: guidedMode && this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.hint,\r\n          keyTypeOptions,\r\n          scopeOptions,\r\n          guidedKey,\r\n          guidedKeyExists:\r\n            [eavConstants.metadata.entity.targetType, eavConstants.metadata.contentType.targetType].includes(formValues.targetType),\r\n          formValues,\r\n          contentItems,\r\n          contentTypes,\r\n        };\r\n        return viewModel;\r\n      }),\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.guidedMode$.complete();\r\n    this.keyTypeOptions$.complete();\r\n    this.contentItems$.complete();\r\n    this.contentTypes$.complete();\r\n    this.guidedKey$.complete();\r\n    super.ngOnDestroy();\r\n  }\r\n\r\n  closeDialog(result?: MetadataInfo): void {\r\n    this.dialog.close(result);\r\n  }\r\n\r\n  toggleGuidedKey(event: boolean): void {\r\n    this.guidedKey$.next(event);\r\n  }\r\n\r\n  toggleGuidedMode(event: MatSlideToggleChange): void {\r\n    this.guidedMode$.next(event.checked);\r\n  }\r\n\r\n  confirm(): void {\r\n    const formValues: MetadataFormValues = this.form.getRawValue();\r\n\r\n    const result: MetadataInfo = {\r\n      target: this.targetTypeOptions.find(option => option.targetType === formValues.targetType)?.target,\r\n      targetType: formValues.targetType,\r\n      keyType: formValues.keyType,\r\n      // if keyType is guid remove curly brackets\r\n      key: formValues.keyType === eavConstants.keyTypes.guid ? (formValues.key as string).replace(/{|}/g, '') : formValues.key.toString(),\r\n    };\r\n    this.closeDialog(result);\r\n  }\r\n\r\n  private fetchContentTypes(scope: string): void {\r\n    this.contentTypesService.retrieveContentTypes(scope).subscribe(contentTypes => {\r\n      this.contentTypes$.next(contentTypes);\r\n    });\r\n  }\r\n\r\n  private fetchScopes(): void {\r\n    this.contentTypesService.getScopes().subscribe(scopes => {\r\n      this.scopeOptions$.next(scopes);\r\n    });\r\n  }\r\n}\r\n","import { IFilterAngularComp } from '@ag-grid-community/angular';\r\nimport { IAfterGuiAttachedParams, IDoesFilterPassParams, IFilterParams, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { Component } from '@angular/core';\r\nimport { PubMeta, PubMetaFilterModel } from './pub-meta-filter.model';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\n\r\n@Component({\r\n  selector: 'app-pub-meta-filter',\r\n  templateUrl: './pub-meta-filter.component.html',\r\n  styleUrls: ['./pub-meta-filter.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatRadioModule,\r\n    FormsModule,\r\n  ],\r\n})\r\nexport class PubMetaFilterComponent implements IFilterAngularComp {\r\n  published = '';\r\n  metadata = '';\r\n  hasMetadata = '';\r\n\r\n  private filterParams: IFilterParams;\r\n\r\n  agInit(params: IFilterParams) {\r\n    this.filterParams = params;\r\n  }\r\n\r\n  isFilterActive(): boolean {\r\n    return this.published !== '' || this.metadata !== '' || this.hasMetadata !== '';\r\n  }\r\n\r\n  doesFilterPass(params: IDoesFilterPassParams): boolean {\r\n    let publishedPassed = false;\r\n    let metadataPassed = false;\r\n    let hasMetadataPassed = false;\r\n\r\n    const valueGetterParams: ValueGetterParams = {\r\n      api: this.filterParams.api,\r\n      colDef: this.filterParams.colDef,\r\n      column: this.filterParams.column,\r\n      columnApi: this.filterParams.columnApi,\r\n      context: this.filterParams.context,\r\n      data: params.node.data,\r\n      getValue: (field) => params.node.data[field],\r\n      node: params.node,\r\n    };\r\n    const value: PubMeta = this.filterParams.valueGetter(valueGetterParams);\r\n    if (this.published !== '') {\r\n      if (value.published === null || value.published === undefined) {\r\n        publishedPassed = false;\r\n      } else {\r\n        publishedPassed = value.published.toString() === this.published;\r\n      }\r\n    } else {\r\n      publishedPassed = true;\r\n    }\r\n    if (this.metadata !== '') {\r\n      if (value.metadata === null || value.metadata === undefined) {\r\n        metadataPassed = false;\r\n      } else {\r\n        metadataPassed = value.metadata.toString() === this.metadata;\r\n      }\r\n    } else {\r\n      metadataPassed = true;\r\n    }\r\n    if (this.hasMetadata !== '') {\r\n      if (value.hasMetadata === null || value.hasMetadata === undefined) {\r\n        hasMetadataPassed = false;\r\n      } else {\r\n        hasMetadataPassed = value.hasMetadata.toString() === this.hasMetadata;\r\n      }\r\n    } else {\r\n      hasMetadataPassed = true;\r\n    }\r\n    return publishedPassed && metadataPassed && hasMetadataPassed;\r\n  }\r\n\r\n  getModel(): PubMetaFilterModel {\r\n    if (!this.isFilterActive()) return;\r\n\r\n    const model: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: this.published,\r\n      metadata: this.metadata,\r\n      hasMetadata: this.hasMetadata,\r\n    };\r\n    return model;\r\n  }\r\n\r\n  setModel(model: PubMetaFilterModel) {\r\n    this.published = model ? model.published : '';\r\n    this.metadata = model ? model.metadata : '';\r\n    this.hasMetadata = model ? model.hasMetadata : '';\r\n  }\r\n\r\n  afterGuiAttached(params: IAfterGuiAttachedParams) {\r\n  }\r\n\r\n  filterChanged() {\r\n    this.filterParams.filterChangedCallback();\r\n  }\r\n}\r\n","<div class=\"title\">Published</div>\r\n<mat-radio-group [(ngModel)]=\"published\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Published</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Not published</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Is Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"metadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Is metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Is not metadata</mat-radio-button>\r\n</mat-radio-group>\r\n\r\n<div class=\"title\">Has Metadata</div>\r\n<mat-radio-group [(ngModel)]=\"hasMetadata\" (ngModelChange)=\"filterChanged()\">\r\n  <mat-radio-button value=\"\">All</mat-radio-button>\r\n  <mat-radio-button value=\"true\">Has metadata</mat-radio-button>\r\n  <mat-radio-button value=\"false\">Has no metadata</mat-radio-button>\r\n</mat-radio-group>\r\n","<div appToggleDebug class=\"eav-dialog nav-component-wrapper\">\r\n  <div class=\"eav-dialog-header\">\r\n    <div class=\"eav-dialog-header__title\">{{ contentType()?.Label || contentType()?.Name }} Data</div>\r\n    <button mat-icon-button tippy=\"Close dialog\" (click)=\"closeDialog()\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n  </div>\r\n  <div class=\"eav-dialog-content nav-component-wrapper\">\r\n    <router-outlet></router-outlet>\r\n    @if (contentType()?.Properties?.ListInstructions; as listInstructions) {\r\n      <div [innerHTML]=\"listInstructions | safeHtml\"></div>\r\n    }\r\n    <div class=\"grid-wrapper\">\r\n      <ag-grid-angular\r\n        class=\"ag-theme-material\"\r\n        [rowData]=\"items()()\"\r\n        [gridOptions]=\"gridOptions\"\r\n        (gridReady)=\"onGridReady($event)\"\r\n        appDragAndDrop\r\n        [allowedFileTypes]=\"'xml,json'\"\r\n        (filesDropped)=\"filesDropped($event)\"\r\n      >\r\n      </ag-grid-angular>\r\n    </div>\r\n  </div>\r\n  <mat-dialog-actions class=\"eav-dialog-actions\">\r\n    <div class=\"eav-dialog-actions-div\">\r\n      <a [href]=\"urlToExportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Export xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_download</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportContent()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import xml list\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Data</span>\r\n      </a>\r\n      <a [href]=\"urlToImportItem()\" mat-button class=\"eav-button__with-icon\" tippy=\"Import single json item\" tippyPlacement=\"top\">\r\n        <mat-icon class=\"eav-icon\">cloud_upload</mat-icon>\r\n        <span>Item</span>\r\n      </a>\r\n      <button mat-button class=\"eav-button__with-icon\" tippy=\"Create metadata\" tippyPlacement=\"top\" (click)=\"createMetadata()\">\r\n        <mat-icon class=\"eav-icon\">local_offer</mat-icon>\r\n        <span>Create Metadata</span>\r\n      </button>\r\n      @if (isDebug()) {\r\n        <button\r\n          mat-button\r\n          class=\"eav-button__with-icon\"\r\n          color=\"accent\"\r\n          tippy=\"Print filter to console\"\r\n          tippyPlacement=\"top\"\r\n          (click)=\"debugFilter()\"\r\n        >\r\n          <mat-icon class=\"eav-icon\">filter_list</mat-icon>\r\n          <span>Filter</span>\r\n        </button>\r\n      }\r\n    </div>\r\n    <a [href]=\"urlToNewItem()\" mat-fab mat-elevation-z24 class=\"grid-fab\" tippy=\"Add item\">\r\n      <mat-icon>add</mat-icon>\r\n    </a>\r\n  </mat-dialog-actions>\r\n</div>\r\n","import { ColDef, GridApi, GridOptions, GridReadyEvent, ValueGetterParams } from '@ag-grid-community/core';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\nimport { ChangeDetectorRef, Component, computed, effect, inject, OnInit, signal, ViewContainerRef, WritableSignal } from '@angular/core';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatDialog, MatDialogActions, MatDialogRef } from '@angular/material/dialog';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { transient } from '../../../../core';\r\nimport { ContentTypesService } from '../app-administration/services/content-types.service';\r\nimport { ContentExportService } from '../content-export/services/content-export.service';\r\nimport { GoToMetadata } from '../metadata';\r\nimport { AgGridHelper } from '../shared/ag-grid/ag-grid-helper';\r\nimport { ColumnDefinitions } from '../shared/ag-grid/column-definitions';\r\nimport { BooleanFilterComponent } from '../shared/components/boolean-filter/boolean-filter.component';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { FileUploadDialogData } from '../shared/components/file-upload-dialog';\r\nimport { defaultGridOptions } from '../shared/constants/default-grid-options.constants';\r\nimport { keyFilters } from '../shared/constants/session.constants';\r\nimport { DragAndDropDirective } from '../shared/directives/drag-and-drop.directive';\r\nimport { TippyDirective } from '../shared/directives/tippy.directive';\r\nimport { ToggleDebugDirective } from '../shared/directives/toggle-debug.directive';\r\nimport { DataTypeCatalog } from '../shared/fields/data-type-catalog';\r\nimport { Field } from '../shared/fields/field.model';\r\nimport { convertFormToUrl } from '../shared/helpers/url-prep.helper';\r\nimport { classLog } from '../shared/logging';\r\nimport { EditForm, EditPrep } from '../shared/models/edit-form.model';\r\nimport { SxcGridModule } from '../shared/modules/sxc-grid-module/sxc-grid.module';\r\nimport { SafeHtmlPipe } from '../shared/pipes/safe-html.pipe';\r\nimport { DialogRoutingService } from '../shared/routing/dialog-routing.service';\r\nimport { EntityEditService } from '../shared/services/entity-edit.service';\r\nimport { GlobalConfigService } from '../shared/services/global-config.service';\r\nimport { computedObj } from '../shared/signals/signal.utilities';\r\nimport { ContentItemsActionsComponent } from './content-items-actions/content-items-actions.component';\r\nimport { ContentItemsActionsParams } from './content-items-actions/content-items-actions.models';\r\nimport { ContentItemsEntityComponent } from './content-items-entity/content-items-entity.component';\r\nimport { ContentItemsStatusComponent } from './content-items-status/content-items-status.component';\r\nimport { buildFilterModel } from './content-items.helpers';\r\nimport { CreateMetadataDialogComponent } from './create-metadata-dialog/create-metadata-dialog.component';\r\nimport { MetadataInfo } from './create-metadata-dialog/create-metadata-dialog.models';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { ContentItem } from './models/content-item.model';\r\nimport { ExtendedColDef } from './models/extended-col-def.model';\r\nimport { PubMetaFilterComponent } from './pub-meta-filter/pub-meta-filter.component';\r\nimport { PubMeta } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { ContentItemsService } from './services/content-items.service';\r\n\r\n@Component({\r\n  selector: 'app-content-items',\r\n  templateUrl: './content-items.component.html',\r\n  standalone: true,\r\n  imports: [\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    RouterOutlet,\r\n    MatDialogActions,\r\n    SafeHtmlPipe,\r\n    DragAndDropDirective,\r\n    ToggleDebugDirective,\r\n    SxcGridModule,\r\n    TippyDirective,\r\n  ],\r\n})\r\nexport class ContentItemsComponent implements OnInit {\r\n\r\n  log = classLog({ ContentItemsComponent });\r\n\r\n  isDebug = inject(GlobalConfigService).isDebug;\r\n\r\n  #entitiesSvc = transient(EntityEditService);\r\n  #contentExportSvc = transient(ContentExportService);\r\n  #contentItemsSvc = transient(ContentItemsService);\r\n  #contentTypesSvc = transient(ContentTypesService);\r\n  #dialogRouter = transient(DialogRoutingService);\r\n\r\n  constructor(\r\n    private dialog: MatDialogRef<ContentItemsComponent>,\r\n    private snackBar: MatSnackBar,\r\n    private matDialog: MatDialog,\r\n    private viewContainerRef: ViewContainerRef,\r\n    private changeDetectorRef: ChangeDetectorRef,\r\n  ) { effect(() => this.fetchColumns()); }\r\n\r\n  gridOptions: GridOptions = {\r\n    ...defaultGridOptions,\r\n    onFilterChanged: _ => this.#filterChanged.update(v => v + 1),\r\n  };\r\n\r\n  /** Signal to tell other signals that the filter changed */\r\n  #filterChanged = signal(0);\r\n\r\n  #gridApiSigTemp: WritableSignal<GridApi<ContentItem>> = signal<GridApi<ContentItem>>(null);\r\n\r\n  #contentTypeStaticName = this.#dialogRouter.getParam('contentTypeStaticName');\r\n  contentType = this.#contentTypesSvc.retrieveContentTypeSig(this.#contentTypeStaticName, undefined);\r\n\r\n  #refresh = signal(0);\r\n\r\n  items = computed(() => {\r\n    const refresh = this.#refresh();\r\n    return this.#contentItemsSvc.getAllSig(this.#contentTypeStaticName, undefined);\r\n  });\r\n\r\n  ngOnInit() {\r\n    this.urlToExportContent();\r\n    this.#dialogRouter.doOnDialogClosed(() => this.fetchItems());\r\n  }\r\n\r\n  closeDialog() {\r\n    this.dialog.close();\r\n  }\r\n\r\n  onGridReady(params: GridReadyEvent) {\r\n    this.#gridApiSigTemp.set(params.api);\r\n    this.urlToExportContent();\r\n  }\r\n\r\n  private fetchItems() {\r\n    this.#refresh.update(value => value + 1)\r\n  }\r\n\r\n  private fetchColumns() {\r\n    this.#contentItemsSvc.getColumns(this.#contentTypeStaticName).subscribe(columns => {\r\n      // filter out ephemeral columns as they don't have data to show\r\n      const columnsWithoutEphemeral = columns.filter(column => !column.IsEphemeral);\r\n      const columnDefs = this.#buildColumnDefs(columnsWithoutEphemeral);\r\n      const filterModel = buildFilterModel(sessionStorage.getItem(keyFilters), columnDefs);\r\n      if (this.#gridApiSigTemp())\r\n        this.setColumnDefs(columnDefs, filterModel);\r\n    });\r\n  }\r\n\r\n  private setColumnDefs(columnDefs: ColDef[], filterModel: AgGridFilterModel) {\r\n    this.#gridApiSigTemp().setColumnDefs(columnDefs);\r\n    if (filterModel) {\r\n      this.log.a('Will try to apply filter:', filterModel);\r\n      this.#gridApiSigTemp().setFilterModel(filterModel);\r\n    }\r\n  }\r\n\r\n  // This method is called multiple times, to reduce redundancy.\r\n  // It calls the urlSubRoute method from the dialogRouter service\r\n  // and sets a # infront of the url, so angular can differentiate\r\n  // angular routes from ordinary urls.\r\n  #urlTo(url: string) {\r\n    return '#' + this.#dialogRouter.urlSubRoute(url);\r\n  }\r\n\r\n  #urlToMetadata(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(GoToMetadata.getUrlEntity(\r\n      item.Guid,\r\n      `Metadata for Entity: ${item._Title} (${item.Id})`,\r\n      this.#contentTypeStaticName,\r\n    ));\r\n  }\r\n\r\n  editItem(item?: ContentItem) {\r\n    const form: EditForm = {\r\n      items: [\r\n        item == null\r\n          ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n          : EditPrep.editId(item.Id)\r\n      ],\r\n    };\r\n    const formUrl = convertFormToUrl(form);\r\n    this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n  }\r\n\r\n  #urlToOpenEditView(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ]\r\n      })}`\r\n    )\r\n  }\r\n\r\n  urlToNewItem(item?: ContentItem) {\r\n    return this.#urlTo(\r\n      `edit/${convertFormToUrl({\r\n        items: [\r\n          item == null\r\n            ? EditPrep.newFromType(this.#contentTypeStaticName)\r\n            : EditPrep.editId(item.Id)\r\n        ],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  urlToExportContent = computedObj('urlToExportContent', () => {\r\n    const value = this.#gridApiSigTemp();\r\n    if (!value)\r\n      return '';\r\n\r\n    // Watch for filter changes, as the IDs are probably different on each change\r\n    this.#filterChanged();\r\n\r\n    const hasFilters = Object.keys(value.getFilterModel()).length > 0;\r\n    const ids: number[] = [];\r\n\r\n    if (hasFilters)\r\n      value.forEachNodeAfterFilterAndSort(n => ids.push(n.data.Id));\r\n\r\n    return this.#urlTo(\r\n      `export/${this.#contentTypeStaticName}${ids.length > 0 ? `/${ids.join(',')}` : ''}`\r\n    );\r\n  });\r\n\r\n  filesDropped(files: File[]) {\r\n    const importFile = files[0];\r\n    const ext = importFile.name.substring(importFile.name.lastIndexOf('.') + 1).toLocaleLowerCase();\r\n    switch (ext) {\r\n      case 'xml':\r\n        this.urlToImportContent(files);\r\n        break;\r\n      case 'json':\r\n        this.importItem(files);\r\n        break;\r\n    }\r\n  }\r\n\r\n  urlToImportContent(files?: File[]) {\r\n    // Special, because the /import is at the end of the URL\r\n    return this.#urlTo(\r\n      `${this.#contentTypeStaticName}${files ? `/${files.map(f => f.name).join(',')}` : ''}/import`\r\n    );\r\n  }\r\n\r\n  importItem(files?: File[]) {\r\n    const dialogData: FileUploadDialogData = { files };\r\n    this.#dialogRouter.navRelative(['import'], { state: dialogData });\r\n  }\r\n\r\n  urlToImportItem() {\r\n    return this.#urlTo('import');\r\n  }\r\n\r\n  createMetadata() {\r\n    const metadataDialogRef = this.matDialog.open(CreateMetadataDialogComponent, {\r\n      autoFocus: false,\r\n      viewContainerRef: this.viewContainerRef,\r\n      width: '650px',\r\n    });\r\n    metadataDialogRef.afterClosed().subscribe((itemFor: MetadataInfo) => {\r\n      if (itemFor == null) return;\r\n\r\n      const form: EditForm = {\r\n        items: [EditPrep.newMetadataFromInfo(this.#contentTypeStaticName, itemFor)],\r\n      };\r\n      const formUrl = convertFormToUrl(form);\r\n      this.#dialogRouter.navRelative([`edit/${formUrl}`]);\r\n      this.changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  debugFilter() {\r\n    console.warn('Current filter:', this.#gridApiSigTemp().getFilterModel());\r\n    this.snackBar.open('Check console for filter information', undefined, { duration: 3000 });\r\n  }\r\n\r\n  #buildColumnDefs(columns: Field[]) {\r\n    const columnDefs: ColDef[] = [\r\n      {\r\n        ...ColumnDefinitions.IdWithDefaultRenderer,\r\n        cellClass: (p: { data: ContentItem }) => `id-action no-padding no-outline ${p.data._EditInfo.ReadOnly ? 'disabled' : ''}`.split(' '),\r\n        cellRendererParams: ColumnDefinitions.idFieldParamsTooltipGetter<ContentItem>()\r\n      },\r\n      {\r\n        field: 'Status',\r\n        width: 82,\r\n        headerClass: 'dense',\r\n        cellClass: 'secondary-action no-padding'.split(' '),\r\n        filter: PubMetaFilterComponent,\r\n        valueGetter: (p) => {\r\n          const item: ContentItem = p.data;\r\n          const published: PubMeta = {\r\n            published: item.IsPublished,\r\n            metadata: !!item.For,\r\n            hasMetadata: item.Metadata ? item.Metadata.length > 0 : false,\r\n          };\r\n          return published;\r\n        },\r\n        cellRenderer: ContentItemsStatusComponent,\r\n        cellRendererParams: (() => ({\r\n          urlTo: (verb, item) => '#' + this.#urlToMetadata(item),\r\n        } satisfies ContentItemsStatusComponent['params']))(),\r\n      },\r\n      {\r\n        ...ColumnDefinitions.TextWidePrimary,\r\n        headerName: 'Item (Entity)',\r\n        field: '_Title',\r\n        flex: 2,\r\n        cellRenderer: (p: { data: ContentItem, }) => AgGridHelper.cellLink(this.#urlToOpenEditView(p.data), p.data.Title),\r\n      },\r\n      {\r\n        headerName: 'Stats',\r\n        headerTooltip: 'Used by others / uses others',\r\n        field: '_Used',\r\n        width: 70,\r\n        headerClass: 'dense',\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n        filter: 'agTextColumnFilter',\r\n        valueGetter: (p: { data: ContentItem }) => `${p.data._Used} / ${p.data._Uses}`,\r\n      },\r\n      {\r\n        ...ColumnDefinitions.ActionsPinnedRight3,\r\n        cellRenderer: ContentItemsActionsComponent,\r\n        cellRendererParams: (() => {\r\n          const params: ContentItemsActionsParams = {\r\n            urlTo: (verb, item) => '#' + this.#urlToClone(item),\r\n            do: (verb, item) => {\r\n              switch (verb) {\r\n                case 'export': this.export(item); break;\r\n                case 'delete': this.delete(item); break;\r\n              }\r\n            }\r\n          } satisfies ContentItemsActionsParams;\r\n          return params;\r\n        })(),\r\n      },\r\n    ];\r\n    for (const column of columns) {\r\n      const colDef: ExtendedColDef = {\r\n        headerName: column.StaticName,\r\n        field: column.StaticName,\r\n        flex: 2,\r\n        minWidth: 250,\r\n        cellClass: 'no-outline',\r\n        sortable: true,\r\n      };\r\n      switch (column.Type) {\r\n        case DataTypeCatalog.Entity:\r\n          colDef.allowMultiValue = column.Metadata?.Entity?.AllowMultiValue ?? true;\r\n          colDef.cellRenderer = ContentItemsEntityComponent;\r\n          colDef.valueGetter = this.valueGetterEntityField;\r\n          colDef.filter = EntityFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.DateTime:\r\n          colDef.useTimePicker = column.Metadata?.DateTime?.UseTimePicker ?? false;\r\n          colDef.valueGetter = this.valueGetterDateTime;\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n        case DataTypeCatalog.Boolean:\r\n          colDef.valueGetter = this.valueGetterBoolean;\r\n          colDef.filter = BooleanFilterComponent;\r\n          break;\r\n        case DataTypeCatalog.Number:\r\n          colDef.filter = 'agNumberColumnFilter';\r\n          break;\r\n        default:\r\n          colDef.filter = 'agTextColumnFilter';\r\n          break;\r\n      }\r\n      columnDefs.push(colDef);\r\n    }\r\n    return columnDefs;\r\n  }\r\n\r\n  #urlToClone(item: ContentItem) {\r\n    return this.#dialogRouter.urlSubRoute(\r\n      `edit/${convertFormToUrl({\r\n        items: [EditPrep.copy(this.#contentTypeStaticName, item.Id)],\r\n      })}`\r\n    );\r\n  }\r\n\r\n  private export(item: ContentItem) {\r\n    this.#contentExportSvc.exportEntity(item.Id, this.#contentTypeStaticName, true);\r\n  }\r\n\r\n  private delete(item: ContentItem) {\r\n    if (!confirm(`Delete '${item._Title}' (${item._RepositoryId})?`)) return;\r\n    this.snackBar.open('Deleting...');\r\n    this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, false).subscribe({\r\n      next: () => {\r\n        this.snackBar.open('Deleted', null, { duration: 2000 });\r\n        this.fetchItems();\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.snackBar.dismiss();\r\n        if (!confirm(`${err.error.ExceptionMessage}\\n\\nDo you want to force delete '${item._Title}' (${item._RepositoryId})?`)) {\r\n          return;\r\n        }\r\n        this.snackBar.open('Deleting...');\r\n        this.#entitiesSvc.delete(this.#contentTypeStaticName, item._RepositoryId, true).subscribe(() => {\r\n          this.snackBar.open('Deleted', null, { duration: 2000 });\r\n          this.fetchItems();\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  private valueGetterEntityField(params: ValueGetterParams) {\r\n    const rawValue: ContentItem[] = params.data[params.colDef.field];\r\n    if (rawValue.length === 0) { return null; }\r\n    return rawValue.map(item => item.Title);\r\n  }\r\n\r\n  private valueGetterDateTime(params: ValueGetterParams) {\r\n    const rawValue: string = params.data[params.colDef.field];\r\n    if (!rawValue) { return null; }\r\n    return (params.colDef as ExtendedColDef).useTimePicker\r\n      ? rawValue.replace('T', ' ').replace('Z', '')\r\n      : rawValue.split('T')[0];\r\n  }\r\n\r\n  private valueGetterBoolean(params: ValueGetterParams) {\r\n    const rawValue = params.data[params.colDef.field];\r\n    if (typeof rawValue !== 'boolean') { return null; }\r\n    return rawValue.toString();\r\n  }\r\n}\r\n","import { ColDef, NumberFilterModel, TextFilterModel } from '@ag-grid-community/core';\r\nimport { BooleanFilterModel } from '../shared/components/boolean-filter/boolean-filter.model';\r\nimport { EntityFilterComponent } from '../shared/components/entity-filter/entity-filter.component';\r\nimport { EntityFilterModel } from '../shared/components/entity-filter/entity-filter.model';\r\nimport { AgGridFilterModel } from './models/ag-grid-filter.model';\r\nimport { PubMetaFilterModel } from './pub-meta-filter/pub-meta-filter.model';\r\nimport { JsonHelpers } from '../shared/helpers/json.helpers';\r\n\r\nexport function buildFilterModel(urlFilters: string, columnDefs: ColDef[]) {\r\n  if (!urlFilters) return;\r\n\r\n  // special decode if parameter was passed as base64 - this is necessary for strings containing the \"+\" character\r\n  if (urlFilters.charAt(urlFilters.length - 1) === '=') {\r\n    urlFilters = atob(urlFilters);\r\n  }\r\n\r\n  let filters: Record<string, any>;\r\n  try {\r\n    filters = JSON.parse(urlFilters);\r\n  } catch (error) {\r\n    console.error('Can\\'t parse JSON with filters from url:', urlFilters);\r\n  }\r\n  if (!filters) return;\r\n\r\n  // handle IsPublished and IsMetadata\r\n  const filterModel: AgGridFilterModel = {};\r\n  if (filters.IsPublished || filters.IsMetadata) {\r\n    const filter: PubMetaFilterModel = {\r\n      filterType: 'pub-meta',\r\n      published: filters.IsPublished ?? '',\r\n      metadata: filters.IsMetadata ?? '',\r\n      hasMetadata: '',\r\n    };\r\n    filterModel.Status = filter;\r\n  }\r\n\r\n  // handle all other cases\r\n  Object.entries(filters)\r\n    .filter(([key, value]) => key !== 'IsPublished' && key !== 'IsMetadata')\r\n    .forEach(([key, value]) => {\r\n      const columnDef = columnDefs.find(c => c.headerName === key);\r\n      if (columnDef?.filter === EntityFilterComponent) {\r\n        value = JsonHelpers.tryParse(value) ?? value;\r\n        const filter: EntityFilterModel = {\r\n          filterType: 'entity',\r\n          filter: typeof value === 'string' ? value : undefined,\r\n          idFilter: typeof value === 'number' ? [value] : Array.isArray(value) ? value.filter(v => typeof v === 'number') : undefined,\r\n        };\r\n        filterModel[key] = filter;\r\n        return;\r\n      }\r\n\r\n      if (typeof value === 'string') {\r\n        const filter: TextFilterModel = { filterType: 'text', type: 'equals', filter: value };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'number') {\r\n        const filter: NumberFilterModel = { filterType: 'number', type: 'equals', filter: value, filterTo: null };\r\n        filterModel[key] = filter;\r\n      } else if (typeof value === 'boolean') {\r\n        const filter: BooleanFilterModel = { filterType: 'boolean', filter: value.toString() };\r\n        filterModel[key] = filter;\r\n      }\r\n    });\r\n\r\n  return filterModel;\r\n}\r\n","import { Injectable, Signal } from '@angular/core';\r\nimport { from, map, switchMap } from 'rxjs';\r\nimport { FileUploadResult } from '../../shared/components/file-upload-dialog';\r\nimport { webApiFieldsAll } from '../../shared/fields/content-types-fields.service';\r\nimport { Field } from '../../shared/fields/field.model';\r\nimport { toBase64 } from '../../shared/helpers/file-to-base64.helper';\r\nimport { webApiEntityList, webApiEntityRoot } from '../../shared/services/entity.service';\r\nimport { HttpServiceBase } from '../../shared/services/http-service-base';\r\nimport { ContentItem } from '../models/content-item.model';\r\n\r\n@Injectable()\r\nexport class ContentItemsService extends HttpServiceBase {\r\n\r\n  getAll(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  getAllSig(contentTypeStaticName: string, initial: undefined): Signal<ContentItem[]> {\r\n    return this.getSignal<ContentItem[]>(webApiEntityList, {\r\n      params: { appId: this.appId, contentType: contentTypeStaticName }\r\n    }, initial);\r\n  }\r\n\r\n  getColumns(contentTypeStaticName: string) {\r\n    return this.getHttpApiUrl<Field[]>(webApiFieldsAll, {\r\n      params: { appId: this.appId, staticName: contentTypeStaticName }\r\n    });\r\n  }\r\n\r\n  importItem(file: File) {\r\n    return from(toBase64(file)).pipe(\r\n      switchMap(fileBase64 => {\r\n        return this.http.post<boolean>(this.apiUrl(webApiEntityRoot + 'upload'), {\r\n          AppId: this.appId,\r\n          ContentBase64: fileBase64,\r\n        });\r\n      }),\r\n      map(success => {\r\n        const result: FileUploadResult = {\r\n          Success: success,\r\n          Messages: [],\r\n        };\r\n        return result;\r\n      }),\r\n    );\r\n  }\r\n}\r\n","export class AgGridHelper {\r\n  public static cellLink(link: string, body: string, classes?: string): string {\r\n    return `<a class=\"default-link fill-cell ${classes}\" href=\"${link}\">${body}</a>`;\r\n  }\r\n}","<div class=\"hint-box\" (click)=\"toggleIsShort()\" [ngClass]=\"{ 'hint-box__short': isShort }\">\r\n  @switch (isError()) {\r\n    @case (false) {\r\n      <mat-hint>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-hint>\r\n    }\r\n    @case (true) {\r\n      <mat-error>\r\n        <ng-container *ngTemplateOutlet=\"content\"></ng-container>\r\n      </mat-error>\r\n    }\r\n  }\r\n</div>\r\n\r\n<ng-template #content>\r\n  <ng-content></ng-content>\r\n</ng-template>\r\n","import { NgClass, NgTemplateOutlet } from '@angular/common';\r\nimport { Component, input } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\n\r\n@Component({\r\n  selector: 'app-field-hint',\r\n  templateUrl: './field-hint.component.html',\r\n  styleUrls: ['./field-hint.component.scss'],\r\n  standalone: true,\r\n  imports: [\r\n    MatFormFieldModule,\r\n    NgClass,\r\n    NgTemplateOutlet\r\n  ]\r\n})\r\nexport class FieldHintComponent {\r\n  isError = input<boolean>(false);\r\n  isShort = true;\r\n\r\n  constructor() { }\r\n\r\n  toggleIsShort() {\r\n    this.isShort = !this.isShort;\r\n  }\r\n}\r\n","export const dropdownInsertValue = 'DROPDOWN_INSERT_VALUE' as const;\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { classLog } from '../logging';\r\n\r\n@Directive({\r\n  selector: '[appClickStopPropagation]',\r\n  standalone: true,\r\n})\r\nexport class ClickStopPropagationDirective {\r\n\r\n  log = classLog({ClickStopPropagationDirective});\r\n\r\n  // Log constructor to detect that it was really attached/created\r\n  constructor() {\r\n    this.log.a('constructor');\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    this.log.a('onClick', { event });\r\n    event.stopPropagation();\r\n\r\n    // This should never be added here, as it's often on a link, and the default behavior (link open) should happen\r\n    // event.preventDefault();\r\n  }\r\n\r\n}\r\n","import { Directive, HostListener } from '@angular/core';\r\nimport { GlobalConfigService } from '../services/global-config.service';\r\n\r\n@Directive({\r\n  selector: '[appToggleDebug]',\r\n  standalone: true\r\n})\r\nexport class ToggleDebugDirective {\r\n\r\n  constructor(private globalConfigService: GlobalConfigService) { }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent): void {\r\n    const CTRL_SHIFT_ALT_CLICK = (navigator.platform.match('Mac') ? event.metaKey : event.ctrlKey) && event.shiftKey && event.altKey;\r\n    if (CTRL_SHIFT_ALT_CLICK) {\r\n      this.globalConfigService.toggleDebugEnabled();\r\n      window.getSelection().removeAllRanges();\r\n    }\r\n  }\r\n}\r\n","export const DataTypeCatalog = {\r\n  Boolean: 'Boolean',\r\n  Custom: 'Custom',\r\n  DateTime: 'DateTime',\r\n  Empty: 'Empty',\r\n  Entity: 'Entity',\r\n  Hyperlink: 'Hyperlink',\r\n  Number: 'Number',\r\n  String: 'String',\r\n} as const /* the as const ensures that the keys/values can be strictly checked */;\r\n","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute, NavigationEnd, NavigationExtras, Router } from '@angular/router';\r\nimport { filter, map, pairwise, startWith } from 'rxjs';\r\nimport { classLog } from '../logging';\r\nimport { ServiceBase } from '../services/service-base';\r\n\r\nconst logSpecs = {\r\n  doOnDialogClosed: true,\r\n};\r\n\r\n/**\r\n * Helper to handle dialog routings, especially:\r\n * 1. handling on-child-closed events (it also takes care of subscriptions)\r\n * 2. accessing the router and route - a very common task when you have dialogs\r\n */\r\n@Injectable()\r\nexport class DialogRoutingService extends ServiceBase {\r\n\r\n  log = classLog({ DialogRoutingService }, logSpecs);\r\n\r\n  constructor(\r\n    public router: Router,\r\n    public route: ActivatedRoute\r\n  ) { super(); }\r\n\r\n  get snapshot() { return this.route.snapshot; }\r\n\r\n  get url() { return this.router.url; }\r\n\r\n  getParam(key: string): string {\r\n    return this.route.snapshot.paramMap.get(key);\r\n  }\r\n\r\n  getParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const paramMap = this.route.snapshot.paramMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = paramMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  getQueryParam(key: string): string {\r\n    return this.route.snapshot.queryParamMap.get(key);\r\n  }\r\n\r\n  getQueryParams<K extends string>(keys: K[]): Record<K, string> {\r\n    const queryParamMap = this.route.snapshot.queryParamMap;\r\n    return keys.reduce((acc, key) => {\r\n      acc[key] = queryParamMap.get(key);\r\n      return acc;\r\n    }, {} as Record<string, string>);\r\n  }\r\n\r\n  state<T = any>() { return this.router.getCurrentNavigation().extras?.state as T; }\r\n\r\n  /**\r\n   * Preferred way to register a callback, since the caller doesn't need to worry about subscriptions.\r\n   */\r\n  public doOnDialogClosed(callback: () => void) {\r\n    const l = this.log.fnIf('doOnDialogClosed');\r\n    this.subscriptions.add(\r\n      this.childDialogClosed$().subscribe(() => callback())\r\n    );\r\n    l.end();\r\n  }\r\n\r\n  /**\r\n   * Get the URL for a sub-route of the current route.\r\n   */\r\n  public urlSubRoute(params: string) {\r\n    const tree = this.router.createUrlTree([params], { relativeTo: this.route });\r\n    const routeUrl = this.router.serializeUrl(tree);\r\n    return routeUrl;\r\n  }\r\n\r\n  /**\r\n   * Navigate to a new route.\r\n   * Just looks a bit simpler than the internal array notation.\r\n   */\r\n  public navPath(url: string, extras?: NavigationExtras): Promise<boolean> {\r\n    return this.router.navigate([url], extras);\r\n  }\r\n\r\n  /**\r\n   * Navigate relative to the current route.\r\n   */\r\n  public navRelative(commands: any[], extras?: Omit<NavigationExtras, 'relativeTo'>): Promise<boolean> {\r\n    return this.router.navigate(commands, { ...extras, relativeTo: this.route });\r\n  }\r\n\r\n  childDialogClosed$() {\r\n    return this.router.events.pipe(\r\n      filter(event => event instanceof NavigationEnd),\r\n      startWith(!!this.route.snapshot.firstChild),\r\n      map(() => !!this.route.snapshot.firstChild),\r\n      pairwise(),\r\n      filter(([hadChildBefore, hasChildNow]) => hadChildBefore && !hasChildNow),\r\n    )\r\n  }\r\n}\r\n","import { Observable, pipe, UnaryFunction } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport isEqual from 'lodash-es/isEqual';\r\n\r\n/**\r\n * Combine map and distinctUntilChanged, as this is a very common pattern.\r\n * @param fn the mapping function\r\n * @returns\r\n */\r\nexport function mapUntilChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(),\r\n    map(fn),\r\n    distinctUntilChanged(),\r\n  );\r\n}\r\n\r\nexport function mapUntilObjChanged<T, R>(\r\n  fn: (state: T) => R\r\n): UnaryFunction<Observable<T>, Observable<R>> {\r\n  return pipe(\r\n    distinctUntilChanged(isEqual),\r\n    map(fn),\r\n    distinctUntilChanged(isEqual),\r\n  );\r\n}\r\n","import isEqual from 'lodash-es/isEqual';\r\n\r\nexport class RxHelpers {\r\n\r\n  static boolEquals(x: boolean, y: boolean): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static stringEquals(x: string, y: string): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static valueEquals<T>(x: T, y: T): boolean {\r\n    return x === y;\r\n  }\r\n\r\n  static objectsEqual<T>(x: T, y: T): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    const obj1 = x as Record<string, any>;\r\n    const obj2 = y as Record<string, any>;\r\n\r\n    const keys1 = Object.keys(obj1);\r\n    const keys2 = Object.keys(obj2);\r\n    if (keys1.length !== keys2.length) return false;\r\n\r\n    const equal = keys1.every(key1 => {\r\n      if (!obj2.hasOwnProperty(key1)) return false;\r\n\r\n      return obj1[key1] === obj2[key1];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  static arraysEqual<T>(x: T[], y: T[]): boolean {\r\n    if (x == null || y == null) return x === y;\r\n\r\n    if (x.length !== y.length) return false;\r\n\r\n    const equal = x.every((item, index) => {\r\n      return x[index] === y[index];\r\n    });\r\n\r\n    return equal;\r\n  }\r\n\r\n  /** used as .filter(distinct), filters array to only have distinct values */\r\n  static distinct<T>(value: T, index: number, array: T[]): boolean {\r\n    return array.indexOf(value) === index;\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { EavFor } from '../../edit/shared/models/eav';\r\nimport { ItemInListIdentifier } from '../models/edit-form.model';\r\nimport { webApiEntityRoot } from './entity.service';\r\nimport { HttpServiceBase } from './http-service-base';\r\n\r\n@Injectable()\r\nexport class EntityEditService extends HttpServiceBase {\r\n\r\n  create<T = QuickEntityResponse>(contentType: string, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  update<T = QuickEntityResponse>(contentType: string, entityId: number, entity: QuickEntityRequest): Observable<T> {\r\n    return this.http.post<T>(`app/auto/data/${contentType}/${entityId}`, entity, {\r\n      params: { appId: this.appId, zoneId: this.zoneId },\r\n    });\r\n  }\r\n\r\n  delete(type: string, id: number, tryForce: boolean) {\r\n    return this.http.delete<null>(this.apiUrl(webApiEntityRoot + 'delete'), {\r\n      params: { contentType: type, id: id.toString(), appId: this.appId, force: tryForce.toString() },\r\n    });\r\n  }\r\n}\r\n\r\ninterface QuickEntityRequest {\r\n  /** Metadata target */\r\n  For?: EavFor;\r\n  /** Parent linking target (add to this entity) */\r\n  ParentRelationship?: ItemInListIdentifier;\r\n  [field: string]: any;\r\n}\r\n\r\ninterface QuickEntityResponse {\r\n  Created: string;\r\n  Guid: string;\r\n  Id: number;\r\n  Modified: string;\r\n  [field: string]: any;\r\n}\r\n","import * as i0 from '@angular/core';\nimport { Component, ViewEncapsulation, ChangeDetectionStrategy, inject, ApplicationRef, createComponent, EnvironmentInjector, ANIMATION_MODULE_TYPE, booleanAttribute, Directive, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport * as i1 from '@angular/cdk/a11y';\nimport { InteractivityChecker, A11yModule } from '@angular/cdk/a11y';\nimport { DOCUMENT } from '@angular/common';\n\nlet nextId = 0;\nconst BADGE_CONTENT_CLASS = 'mat-badge-content';\n/** Keeps track of the apps currently containing badges. */\nconst badgeApps = new Set();\n/**\n * Component used to load the structural styles of the badge.\n * @docs-private\n */\nclass _MatBadgeStyleLoader {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", type: _MatBadgeStyleLoader, isStandalone: true, selector: \"ng-component\", ngImport: i0, template: '', isInline: true, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: _MatBadgeStyleLoader, decorators: [{\n            type: Component,\n            args: [{ standalone: true, encapsulation: ViewEncapsulation.None, template: '', changeDetection: ChangeDetectionStrategy.OnPush, styles: [\".mat-badge{position:relative}.mat-badge.mat-badge{overflow:visible}.mat-badge-content{position:absolute;text-align:center;display:inline-block;transition:transform 200ms ease-in-out;transform:scale(0.6);overflow:hidden;white-space:nowrap;text-overflow:ellipsis;box-sizing:border-box;pointer-events:none;background-color:var(--mat-badge-background-color, var(--mat-app-error));color:var(--mat-badge-text-color, var(--mat-app-on-error));font-family:var(--mat-badge-text-font, var(--mat-app-label-small-font));font-weight:var(--mat-badge-text-weight, var(--mat-app-label-small-weight));border-radius:var(--mat-badge-container-shape, var(--mat-app-corner-full))}.cdk-high-contrast-active .mat-badge-content{outline:solid 1px;border-radius:0}.mat-badge-above .mat-badge-content{bottom:100%}.mat-badge-below .mat-badge-content{top:100%}.mat-badge-before .mat-badge-content{right:100%}[dir=rtl] .mat-badge-before .mat-badge-content{right:auto;left:100%}.mat-badge-after .mat-badge-content{left:100%}[dir=rtl] .mat-badge-after .mat-badge-content{left:auto;right:100%}.mat-badge-disabled .mat-badge-content{background-color:var(--mat-badge-disabled-state-background-color);color:var(--mat-badge-disabled-state-text-color, var(--mat-app-on-error))}.mat-badge-hidden .mat-badge-content{display:none}.ng-animate-disabled .mat-badge-content,.mat-badge-content._mat-animation-noopable{transition:none}.mat-badge-content.mat-badge-active{transform:none}.mat-badge-small .mat-badge-content{width:var(--mat-badge-legacy-small-size-container-size, unset);height:var(--mat-badge-legacy-small-size-container-size, unset);min-width:var(--mat-badge-small-size-container-size, unset);min-height:var(--mat-badge-small-size-container-size, unset);line-height:var(--mat-badge-legacy-small-size-container-size);padding:var(--mat-badge-small-size-container-padding);font-size:var(--mat-badge-small-size-text-size);margin:var(--mat-badge-small-size-container-offset)}.mat-badge-small.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-small-size-container-overlap-offset)}.mat-badge-medium .mat-badge-content{width:var(--mat-badge-legacy-container-size, unset);height:var(--mat-badge-legacy-container-size, unset);min-width:var(--mat-badge-container-size, unset);min-height:var(--mat-badge-container-size, unset);line-height:var(--mat-badge-legacy-container-size);padding:var(--mat-badge-container-padding);font-size:var(--mat-badge-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-container-offset)}.mat-badge-medium.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-container-overlap-offset)}.mat-badge-large .mat-badge-content{width:var(--mat-badge-legacy-large-size-container-size, unset);height:var(--mat-badge-legacy-large-size-container-size, unset);min-width:var(--mat-badge-large-size-container-size, unset);min-height:var(--mat-badge-large-size-container-size, unset);line-height:var(--mat-badge-legacy-large-size-container-size);padding:var(--mat-badge-large-size-container-padding);font-size:var(--mat-badge-large-size-text-size, var(--mat-app-label-small-size));margin:var(--mat-badge-large-size-container-offset)}.mat-badge-large.mat-badge-overlap .mat-badge-content{margin:var(--mat-badge-large-size-container-overlap-offset)}\"] }]\n        }] });\n/** Directive to display a text badge. */\nclass MatBadge {\n    /**\n     * Theme color of the badge. This API is supported in M2 themes only, it\n     * has no effect in M3 themes.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.io/guide/theming#using-component-color-variants.\n     */\n    get color() {\n        return this._color;\n    }\n    set color(value) {\n        this._setColor(value);\n        this._color = value;\n    }\n    /** The content for the badge */\n    get content() {\n        return this._content;\n    }\n    set content(newContent) {\n        this._updateRenderedContent(newContent);\n    }\n    /** Message used to describe the decorated element via aria-describedby */\n    get description() {\n        return this._description;\n    }\n    set description(newDescription) {\n        this._updateDescription(newDescription);\n    }\n    constructor(_ngZone, _elementRef, _ariaDescriber, _renderer, _animationMode) {\n        this._ngZone = _ngZone;\n        this._elementRef = _elementRef;\n        this._ariaDescriber = _ariaDescriber;\n        this._renderer = _renderer;\n        this._animationMode = _animationMode;\n        this._color = 'primary';\n        /** Whether the badge should overlap its contents or not */\n        this.overlap = true;\n        /**\n         * Position the badge should reside.\n         * Accepts any combination of 'above'|'below' and 'before'|'after'\n         */\n        this.position = 'above after';\n        /** Size of the badge. Can be 'small', 'medium', or 'large'. */\n        this.size = 'medium';\n        /** Unique id for the badge */\n        this._id = nextId++;\n        /** Whether the OnInit lifecycle hook has run yet */\n        this._isInitialized = false;\n        /** InteractivityChecker to determine if the badge host is focusable. */\n        this._interactivityChecker = inject(InteractivityChecker);\n        this._document = inject(DOCUMENT);\n        const appRef = inject(ApplicationRef);\n        if (!badgeApps.has(appRef)) {\n            badgeApps.add(appRef);\n            const componentRef = createComponent(_MatBadgeStyleLoader, {\n                environmentInjector: inject(EnvironmentInjector),\n            });\n            appRef.onDestroy(() => {\n                badgeApps.delete(appRef);\n                componentRef.destroy();\n            });\n        }\n        if (typeof ngDevMode === 'undefined' || ngDevMode) {\n            const nativeElement = _elementRef.nativeElement;\n            if (nativeElement.nodeType !== nativeElement.ELEMENT_NODE) {\n                throw Error('matBadge must be attached to an element node.');\n            }\n            const matIconTagName = 'mat-icon';\n            // Heads-up for developers to avoid putting matBadge on <mat-icon>\n            // as it is aria-hidden by default docs mention this at:\n            // https://material.angular.io/components/badge/overview#accessibility\n            if (nativeElement.tagName.toLowerCase() === matIconTagName &&\n                nativeElement.getAttribute('aria-hidden') === 'true') {\n                console.warn(`Detected a matBadge on an \"aria-hidden\" \"<mat-icon>\". ` +\n                    `Consider setting aria-hidden=\"false\" in order to surface the information assistive technology.` +\n                    `\\n${nativeElement.outerHTML}`);\n            }\n        }\n    }\n    /** Whether the badge is above the host or not */\n    isAbove() {\n        return this.position.indexOf('below') === -1;\n    }\n    /** Whether the badge is after the host or not */\n    isAfter() {\n        return this.position.indexOf('before') === -1;\n    }\n    /**\n     * Gets the element into which the badge's content is being rendered. Undefined if the element\n     * hasn't been created (e.g. if the badge doesn't have content).\n     */\n    getBadgeElement() {\n        return this._badgeElement;\n    }\n    ngOnInit() {\n        // We may have server-side rendered badge that we need to clear.\n        // We need to do this in ngOnInit because the full content of the component\n        // on which the badge is attached won't necessarily be in the DOM until this point.\n        this._clearExistingBadges();\n        if (this.content && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n            this._updateRenderedContent(this.content);\n        }\n        this._isInitialized = true;\n    }\n    ngOnDestroy() {\n        // ViewEngine only: when creating a badge through the Renderer, Angular remembers its index.\n        // We have to destroy it ourselves, otherwise it'll be retained in memory.\n        if (this._renderer.destroyNode) {\n            this._renderer.destroyNode(this._badgeElement);\n            this._inlineBadgeDescription?.remove();\n        }\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n    }\n    /** Gets whether the badge's host element is interactive. */\n    _isHostInteractive() {\n        // Ignore visibility since it requires an expensive style caluclation.\n        return this._interactivityChecker.isFocusable(this._elementRef.nativeElement, {\n            ignoreVisibility: true,\n        });\n    }\n    /** Creates the badge element */\n    _createBadgeElement() {\n        const badgeElement = this._renderer.createElement('span');\n        const activeClass = 'mat-badge-active';\n        badgeElement.setAttribute('id', `mat-badge-content-${this._id}`);\n        // The badge is aria-hidden because we don't want it to appear in the page's navigation\n        // flow. Instead, we use the badge to describe the decorated element with aria-describedby.\n        badgeElement.setAttribute('aria-hidden', 'true');\n        badgeElement.classList.add(BADGE_CONTENT_CLASS);\n        if (this._animationMode === 'NoopAnimations') {\n            badgeElement.classList.add('_mat-animation-noopable');\n        }\n        this._elementRef.nativeElement.appendChild(badgeElement);\n        // animate in after insertion\n        if (typeof requestAnimationFrame === 'function' && this._animationMode !== 'NoopAnimations') {\n            this._ngZone.runOutsideAngular(() => {\n                requestAnimationFrame(() => {\n                    badgeElement.classList.add(activeClass);\n                });\n            });\n        }\n        else {\n            badgeElement.classList.add(activeClass);\n        }\n        return badgeElement;\n    }\n    /** Update the text content of the badge element in the DOM, creating the element if necessary. */\n    _updateRenderedContent(newContent) {\n        const newContentNormalized = `${newContent ?? ''}`.trim();\n        // Don't create the badge element if the directive isn't initialized because we want to\n        // append the badge element to the *end* of the host element's content for backwards\n        // compatibility.\n        if (this._isInitialized && newContentNormalized && !this._badgeElement) {\n            this._badgeElement = this._createBadgeElement();\n        }\n        if (this._badgeElement) {\n            this._badgeElement.textContent = newContentNormalized;\n        }\n        this._content = newContentNormalized;\n    }\n    /** Updates the host element's aria description via AriaDescriber. */\n    _updateDescription(newDescription) {\n        // Always start by removing the aria-describedby; we will add a new one if necessary.\n        this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this.description);\n        // NOTE: We only check whether the host is interactive here, which happens during\n        // when then badge content changes. It is possible that the host changes\n        // interactivity status separate from one of these. However, watching the interactivity\n        // status of the host would require a `MutationObserver`, which is likely more code + overhead\n        // than it's worth; from usages inside Google, we see that the vats majority of badges either\n        // never change interactivity, or also set `matBadgeHidden` based on the same condition.\n        if (!newDescription || this._isHostInteractive()) {\n            this._removeInlineDescription();\n        }\n        this._description = newDescription;\n        // We don't add `aria-describedby` for non-interactive hosts elements because we\n        // instead insert the description inline.\n        if (this._isHostInteractive()) {\n            this._ariaDescriber.describe(this._elementRef.nativeElement, newDescription);\n        }\n        else {\n            this._updateInlineDescription();\n        }\n    }\n    _updateInlineDescription() {\n        // Create the inline description element if it doesn't exist\n        if (!this._inlineBadgeDescription) {\n            this._inlineBadgeDescription = this._document.createElement('span');\n            this._inlineBadgeDescription.classList.add('cdk-visually-hidden');\n        }\n        this._inlineBadgeDescription.textContent = this.description;\n        this._badgeElement?.appendChild(this._inlineBadgeDescription);\n    }\n    _removeInlineDescription() {\n        this._inlineBadgeDescription?.remove();\n        this._inlineBadgeDescription = undefined;\n    }\n    /** Adds css theme class given the color to the component host */\n    _setColor(colorPalette) {\n        const classList = this._elementRef.nativeElement.classList;\n        classList.remove(`mat-badge-${this._color}`);\n        if (colorPalette) {\n            classList.add(`mat-badge-${colorPalette}`);\n        }\n    }\n    /** Clears any existing badges that might be left over from server-side rendering. */\n    _clearExistingBadges() {\n        // Only check direct children of this host element in order to avoid deleting\n        // any badges that might exist in descendant elements.\n        const badges = this._elementRef.nativeElement.querySelectorAll(`:scope > .${BADGE_CONTENT_CLASS}`);\n        for (const badgeElement of Array.from(badges)) {\n            if (badgeElement !== this._badgeElement) {\n                badgeElement.remove();\n            }\n        }\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i1.AriaDescriber }, { token: i0.Renderer2 }, { token: ANIMATION_MODULE_TYPE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"18.2.0-next.2\", type: MatBadge, isStandalone: true, selector: \"[matBadge]\", inputs: { color: [\"matBadgeColor\", \"color\"], overlap: [\"matBadgeOverlap\", \"overlap\", booleanAttribute], disabled: [\"matBadgeDisabled\", \"disabled\", booleanAttribute], position: [\"matBadgePosition\", \"position\"], content: [\"matBadge\", \"content\"], description: [\"matBadgeDescription\", \"description\"], size: [\"matBadgeSize\", \"size\"], hidden: [\"matBadgeHidden\", \"hidden\", booleanAttribute] }, host: { properties: { \"class.mat-badge-overlap\": \"overlap\", \"class.mat-badge-above\": \"isAbove()\", \"class.mat-badge-below\": \"!isAbove()\", \"class.mat-badge-before\": \"!isAfter()\", \"class.mat-badge-after\": \"isAfter()\", \"class.mat-badge-small\": \"size === \\\"small\\\"\", \"class.mat-badge-medium\": \"size === \\\"medium\\\"\", \"class.mat-badge-large\": \"size === \\\"large\\\"\", \"class.mat-badge-hidden\": \"hidden || !content\", \"class.mat-badge-disabled\": \"disabled\" }, classAttribute: \"mat-badge\" }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadge, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matBadge]',\n                    host: {\n                        'class': 'mat-badge',\n                        '[class.mat-badge-overlap]': 'overlap',\n                        '[class.mat-badge-above]': 'isAbove()',\n                        '[class.mat-badge-below]': '!isAbove()',\n                        '[class.mat-badge-before]': '!isAfter()',\n                        '[class.mat-badge-after]': 'isAfter()',\n                        '[class.mat-badge-small]': 'size === \"small\"',\n                        '[class.mat-badge-medium]': 'size === \"medium\"',\n                        '[class.mat-badge-large]': 'size === \"large\"',\n                        '[class.mat-badge-hidden]': 'hidden || !content',\n                        '[class.mat-badge-disabled]': 'disabled',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i1.AriaDescriber }, { type: i0.Renderer2 }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [ANIMATION_MODULE_TYPE]\n                }] }], propDecorators: { color: [{\n                type: Input,\n                args: ['matBadgeColor']\n            }], overlap: [{\n                type: Input,\n                args: [{ alias: 'matBadgeOverlap', transform: booleanAttribute }]\n            }], disabled: [{\n                type: Input,\n                args: [{ alias: 'matBadgeDisabled', transform: booleanAttribute }]\n            }], position: [{\n                type: Input,\n                args: ['matBadgePosition']\n            }], content: [{\n                type: Input,\n                args: ['matBadge']\n            }], description: [{\n                type: Input,\n                args: ['matBadgeDescription']\n            }], size: [{\n                type: Input,\n                args: ['matBadgeSize']\n            }], hidden: [{\n                type: Input,\n                args: [{ alias: 'matBadgeHidden', transform: booleanAttribute }]\n            }] } });\n\nclass MatBadgeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader], exports: [MatBadge, MatCommonModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, imports: [A11yModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"18.2.0-next.2\", ngImport: i0, type: MatBadgeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    // Note: we _shouldn't_ have to import `_MatBadgeStyleLoader`,\n                    // but it seems to be necessary for tests.\n                    imports: [A11yModule, MatCommonModule, MatBadge, _MatBadgeStyleLoader],\n                    exports: [MatBadge, MatCommonModule],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatBadge, MatBadgeModule };\n"],"x_google_ignoreList":[29]}